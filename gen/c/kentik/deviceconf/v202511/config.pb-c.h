/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: kentik/deviceconf/v202511/config.proto */

#ifndef PROTOBUF_C_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto__INCLUDED
#define PROTOBUF_C_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protobuf-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protobuf-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protobuf-c.
#endif

#include "google/protobuf/timestamp.pb-c.h"

typedef struct Kentik__Deviceconf__V202511__Revision Kentik__Deviceconf__V202511__Revision;
typedef struct Kentik__Deviceconf__V202511__Snapshot Kentik__Deviceconf__V202511__Snapshot;


/* --- enums --- */

typedef enum _Kentik__Deviceconf__V202511__ConfigEncoding {
  KENTIK__DEVICECONF__V202511__CONFIG_ENCODING__CONFIG_ENCODING_UNSPECIFIED = 0,
  KENTIK__DEVICECONF__V202511__CONFIG_ENCODING__CONFIG_ENCODING_PLAIN = 1,
  KENTIK__DEVICECONF__V202511__CONFIG_ENCODING__CONFIG_ENCODING_BZIP2 = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(KENTIK__DEVICECONF__V202511__CONFIG_ENCODING)
} Kentik__Deviceconf__V202511__ConfigEncoding;

/* --- messages --- */

struct  Kentik__Deviceconf__V202511__Revision
{
  ProtobufCMessage base;
  /*
   * incremented for each different configuration fetched from the device
   */
  char *id;
  Google__Protobuf__Timestamp *last_fetched;
};
#define KENTIK__DEVICECONF__V202511__REVISION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__deviceconf__v202511__revision__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


struct  Kentik__Deviceconf__V202511__Snapshot
{
  ProtobufCMessage base;
  /*
   * Agent that fetched the configuration
   */
  char *agent_id;
  char *device_id;
  Kentik__Deviceconf__V202511__Revision *revision;
  /*
   * error message is in config_data if true
   */
  protobuf_c_boolean fetch_error;
  Kentik__Deviceconf__V202511__ConfigEncoding encoding;
  ProtobufCBinaryData config_data;
  /*
   * SHA256 digest of config_data
   */
  char *digest;
};
#define KENTIK__DEVICECONF__V202511__SNAPSHOT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__deviceconf__v202511__snapshot__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, KENTIK__DEVICECONF__V202511__CONFIG_ENCODING__CONFIG_ENCODING_UNSPECIFIED, {0,NULL}, (char *)protobuf_c_empty_string }


/* Kentik__Deviceconf__V202511__Revision methods */
void   kentik__deviceconf__v202511__revision__init
                     (Kentik__Deviceconf__V202511__Revision         *message);
size_t kentik__deviceconf__v202511__revision__get_packed_size
                     (const Kentik__Deviceconf__V202511__Revision   *message);
size_t kentik__deviceconf__v202511__revision__pack
                     (const Kentik__Deviceconf__V202511__Revision   *message,
                      uint8_t             *out);
size_t kentik__deviceconf__v202511__revision__pack_to_buffer
                     (const Kentik__Deviceconf__V202511__Revision   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Deviceconf__V202511__Revision *
       kentik__deviceconf__v202511__revision__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__deviceconf__v202511__revision__free_unpacked
                     (Kentik__Deviceconf__V202511__Revision *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Deviceconf__V202511__Snapshot methods */
void   kentik__deviceconf__v202511__snapshot__init
                     (Kentik__Deviceconf__V202511__Snapshot         *message);
size_t kentik__deviceconf__v202511__snapshot__get_packed_size
                     (const Kentik__Deviceconf__V202511__Snapshot   *message);
size_t kentik__deviceconf__v202511__snapshot__pack
                     (const Kentik__Deviceconf__V202511__Snapshot   *message,
                      uint8_t             *out);
size_t kentik__deviceconf__v202511__snapshot__pack_to_buffer
                     (const Kentik__Deviceconf__V202511__Snapshot   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Deviceconf__V202511__Snapshot *
       kentik__deviceconf__v202511__snapshot__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__deviceconf__v202511__snapshot__free_unpacked
                     (Kentik__Deviceconf__V202511__Snapshot *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Kentik__Deviceconf__V202511__Revision_Closure)
                 (const Kentik__Deviceconf__V202511__Revision *message,
                  void *closure_data);
typedef void (*Kentik__Deviceconf__V202511__Snapshot_Closure)
                 (const Kentik__Deviceconf__V202511__Snapshot *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    kentik__deviceconf__v202511__config_encoding__descriptor;
extern const ProtobufCMessageDescriptor kentik__deviceconf__v202511__revision__descriptor;
extern const ProtobufCMessageDescriptor kentik__deviceconf__v202511__snapshot__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_kentik_2fdeviceconf_2fv202511_2fconfig_2eproto__INCLUDED */
