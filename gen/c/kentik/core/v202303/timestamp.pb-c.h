/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: kentik/core/v202303/timestamp.proto */

#ifndef PROTOBUF_C_kentik_2fcore_2fv202303_2ftimestamp_2eproto__INCLUDED
#define PROTOBUF_C_kentik_2fcore_2fv202303_2ftimestamp_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/descriptor.pb-c.h"

typedef struct Kentik__Core__V202303__PseudoTimestamp Kentik__Core__V202303__PseudoTimestamp;


/* --- enums --- */


/* --- messages --- */

/*
 * This is an override for google.protobuf.Timestamp which exists solely to provide compatibility between buf and grpc-js.
 * As far as protobuf consumers are concerned this is identical to a regular timestamp and should be treated as such.
 */
struct  Kentik__Core__V202303__PseudoTimestamp
{
  ProtobufCMessage base;
  /*
   * Represents seconds of UTC time since Unix epoch
   * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
   * 9999-12-31T23:59:59Z inclusive.
   */
  int64_t seconds;
  /*
   * Non-negative fractions of a second at nanosecond resolution. Negative
   * second values with fractions must still have non-negative nanos values
   * that count forward in time. Must be from 0 to 999,999,999
   * inclusive.
   */
  int32_t nanos;
};
#define KENTIK__CORE__V202303__PSEUDO_TIMESTAMP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__core__v202303__pseudo_timestamp__descriptor) \
    , 0, 0 }


/* Kentik__Core__V202303__PseudoTimestamp methods */
void   kentik__core__v202303__pseudo_timestamp__init
                     (Kentik__Core__V202303__PseudoTimestamp         *message);
size_t kentik__core__v202303__pseudo_timestamp__get_packed_size
                     (const Kentik__Core__V202303__PseudoTimestamp   *message);
size_t kentik__core__v202303__pseudo_timestamp__pack
                     (const Kentik__Core__V202303__PseudoTimestamp   *message,
                      uint8_t             *out);
size_t kentik__core__v202303__pseudo_timestamp__pack_to_buffer
                     (const Kentik__Core__V202303__PseudoTimestamp   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Core__V202303__PseudoTimestamp *
       kentik__core__v202303__pseudo_timestamp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__core__v202303__pseudo_timestamp__free_unpacked
                     (Kentik__Core__V202303__PseudoTimestamp *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Kentik__Core__V202303__PseudoTimestamp_Closure)
                 (const Kentik__Core__V202303__PseudoTimestamp *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kentik__core__v202303__pseudo_timestamp__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_kentik_2fcore_2fv202303_2ftimestamp_2eproto__INCLUDED */
