/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: kentik/mkp/v202102alpha1/mkp.proto */

#ifndef PROTOBUF_C_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto__INCLUDED
#define PROTOBUF_C_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/api/annotations.pb-c.h"
#include "google/api/client.pb-c.h"
#include "google/protobuf/field_mask.pb-c.h"
#include "protoc-gen-openapiv2/options/annotations.pb-c.h"
#include "kentik/core/v202303/annotations.pb-c.h"

typedef struct Kentik__Mkp__V202102alpha1__Alert Kentik__Mkp__V202102alpha1__Alert;
typedef struct Kentik__Mkp__V202102alpha1__Asset Kentik__Mkp__V202102alpha1__Asset;
typedef struct Kentik__Mkp__V202102alpha1__Asset__Report Kentik__Mkp__V202102alpha1__Asset__Report;
typedef struct Kentik__Mkp__V202102alpha1__Threshold Kentik__Mkp__V202102alpha1__Threshold;
typedef struct Kentik__Mkp__V202102alpha1__Activate Kentik__Mkp__V202102alpha1__Activate;
typedef struct Kentik__Mkp__V202102alpha1__Condition Kentik__Mkp__V202102alpha1__Condition;
typedef struct Kentik__Mkp__V202102alpha1__Mitigation Kentik__Mkp__V202102alpha1__Mitigation;
typedef struct Kentik__Mkp__V202102alpha1__NotificationChannel Kentik__Mkp__V202102alpha1__NotificationChannel;
typedef struct Kentik__Mkp__V202102alpha1__User Kentik__Mkp__V202102alpha1__User;
typedef struct Kentik__Mkp__V202102alpha1__TenantLink Kentik__Mkp__V202102alpha1__TenantLink;
typedef struct Kentik__Mkp__V202102alpha1__Package Kentik__Mkp__V202102alpha1__Package;
typedef struct Kentik__Mkp__V202102alpha1__CustomDimension Kentik__Mkp__V202102alpha1__CustomDimension;
typedef struct Kentik__Mkp__V202102alpha1__Device Kentik__Mkp__V202102alpha1__Device;
typedef struct Kentik__Mkp__V202102alpha1__FilterField Kentik__Mkp__V202102alpha1__FilterField;
typedef struct Kentik__Mkp__V202102alpha1__Filter Kentik__Mkp__V202102alpha1__Filter;
typedef struct Kentik__Mkp__V202102alpha1__Tenant Kentik__Mkp__V202102alpha1__Tenant;
typedef struct Kentik__Mkp__V202102alpha1__ListPackageRequest Kentik__Mkp__V202102alpha1__ListPackageRequest;
typedef struct Kentik__Mkp__V202102alpha1__ListPackageResponse Kentik__Mkp__V202102alpha1__ListPackageResponse;
typedef struct Kentik__Mkp__V202102alpha1__GetPackageRequest Kentik__Mkp__V202102alpha1__GetPackageRequest;
typedef struct Kentik__Mkp__V202102alpha1__GetPackageResponse Kentik__Mkp__V202102alpha1__GetPackageResponse;
typedef struct Kentik__Mkp__V202102alpha1__CreatePackageRequest Kentik__Mkp__V202102alpha1__CreatePackageRequest;
typedef struct Kentik__Mkp__V202102alpha1__CreatePackageResponse Kentik__Mkp__V202102alpha1__CreatePackageResponse;
typedef struct Kentik__Mkp__V202102alpha1__UpdatePackageRequest Kentik__Mkp__V202102alpha1__UpdatePackageRequest;
typedef struct Kentik__Mkp__V202102alpha1__UpdatePackageResponse Kentik__Mkp__V202102alpha1__UpdatePackageResponse;
typedef struct Kentik__Mkp__V202102alpha1__PatchPackageRequest Kentik__Mkp__V202102alpha1__PatchPackageRequest;
typedef struct Kentik__Mkp__V202102alpha1__PatchPackageResponse Kentik__Mkp__V202102alpha1__PatchPackageResponse;
typedef struct Kentik__Mkp__V202102alpha1__DeletePackageRequest Kentik__Mkp__V202102alpha1__DeletePackageRequest;
typedef struct Kentik__Mkp__V202102alpha1__DeletePackageResponse Kentik__Mkp__V202102alpha1__DeletePackageResponse;
typedef struct Kentik__Mkp__V202102alpha1__ListTenantRequest Kentik__Mkp__V202102alpha1__ListTenantRequest;
typedef struct Kentik__Mkp__V202102alpha1__ListTenantResponse Kentik__Mkp__V202102alpha1__ListTenantResponse;
typedef struct Kentik__Mkp__V202102alpha1__GetTenantRequest Kentik__Mkp__V202102alpha1__GetTenantRequest;
typedef struct Kentik__Mkp__V202102alpha1__GetTenantResponse Kentik__Mkp__V202102alpha1__GetTenantResponse;
typedef struct Kentik__Mkp__V202102alpha1__CreateTenantRequest Kentik__Mkp__V202102alpha1__CreateTenantRequest;
typedef struct Kentik__Mkp__V202102alpha1__CreateTenantResponse Kentik__Mkp__V202102alpha1__CreateTenantResponse;
typedef struct Kentik__Mkp__V202102alpha1__UpdateTenantRequest Kentik__Mkp__V202102alpha1__UpdateTenantRequest;
typedef struct Kentik__Mkp__V202102alpha1__UpdateTenantResponse Kentik__Mkp__V202102alpha1__UpdateTenantResponse;
typedef struct Kentik__Mkp__V202102alpha1__PatchTenantRequest Kentik__Mkp__V202102alpha1__PatchTenantRequest;
typedef struct Kentik__Mkp__V202102alpha1__PatchTenantResponse Kentik__Mkp__V202102alpha1__PatchTenantResponse;
typedef struct Kentik__Mkp__V202102alpha1__DeleteTenantRequest Kentik__Mkp__V202102alpha1__DeleteTenantRequest;
typedef struct Kentik__Mkp__V202102alpha1__DeleteTenantResponse Kentik__Mkp__V202102alpha1__DeleteTenantResponse;


/* --- enums --- */


/* --- messages --- */

/*
 * Alert Policy
 */
struct  Kentik__Mkp__V202102alpha1__Alert
{
  ProtobufCMessage base;
  protobuf_c_boolean saved;
  uint64_t policy_id;
  size_t n_thresholds;
  Kentik__Mkp__V202102alpha1__Threshold **thresholds;
  char *primary_metric;
  size_t n_secondary_metrics;
  char **secondary_metrics;
  protobuf_c_boolean is_template;
  char *subpolicy_id;
};
#define KENTIK__MKP__V202102ALPHA1__ALERT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__alert__descriptor) \
    , 0, 0, 0,NULL, (char *)protobuf_c_empty_string, 0,NULL, 0, (char *)protobuf_c_empty_string }


struct  Kentik__Mkp__V202102alpha1__Asset__Report
{
  ProtobufCMessage base;
  uint64_t id;
  char *type;
};
#define KENTIK__MKP__V202102ALPHA1__ASSET__REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__asset__report__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


struct  Kentik__Mkp__V202102alpha1__Asset
{
  ProtobufCMessage base;
  size_t n_reports;
  Kentik__Mkp__V202102alpha1__Asset__Report **reports;
  Kentik__Mkp__V202102alpha1__Asset__Report *default_report;
};
#define KENTIK__MKP__V202102ALPHA1__ASSET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__asset__descriptor) \
    , 0,NULL, NULL }


/*
 * Alert Threshold
 */
struct  Kentik__Mkp__V202102alpha1__Threshold
{
  ProtobufCMessage base;
  uint64_t id;
  Kentik__Mkp__V202102alpha1__Activate *activate;
  char *severity;
  size_t n_conditions;
  Kentik__Mkp__V202102alpha1__Condition **conditions;
  size_t n_mitigations;
  Kentik__Mkp__V202102alpha1__Mitigation **mitigations;
  size_t n_notification_channels;
  Kentik__Mkp__V202102alpha1__NotificationChannel **notification_channels;
  protobuf_c_boolean threshold_ack_required;
  protobuf_c_boolean enable_tenant_notifications;
  protobuf_c_boolean receive_landlord_notifications;
};
#define KENTIK__MKP__V202102ALPHA1__THRESHOLD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__threshold__descriptor) \
    , 0, NULL, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0, 0, 0 }


struct  Kentik__Mkp__V202102alpha1__Activate
{
  ProtobufCMessage base;
  uint32_t times;
  char *operator_;
  char *time_unit;
  uint32_t time_window;
  uint32_t grace_period;
};
#define KENTIK__MKP__V202102ALPHA1__ACTIVATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__activate__descriptor) \
    , 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


struct  Kentik__Mkp__V202102alpha1__Condition
{
  ProtobufCMessage base;
  char *type;
  uint32_t value;
  char *metric;
  char *operator_;
  char *value_type;
  char *value_select;
};
#define KENTIK__MKP__V202102ALPHA1__CONDITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__condition__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Kentik__Mkp__V202102alpha1__Mitigation
{
  ProtobufCMessage base;
  uint64_t id;
  char *status;
  uint64_t company_id;
  uint64_t pairing_id;
  uint64_t threshold_id;
  protobuf_c_boolean is_method_overridable;
  char *mitigation_apply_type;
  char *mitigation_clear_type;
  uint32_t mitigation_apply_timer;
  uint32_t mitigation_clear_timer;
  protobuf_c_boolean is_platform_overridable;
  /*
   * revisit for timestamp
   */
  char *cdate;
  /*
   * revisit for timestamp
   */
  char *edate;
};
#define KENTIK__MKP__V202102ALPHA1__MITIGATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__mitigation__descriptor) \
    , 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Kentik__Mkp__V202102alpha1__NotificationChannel
{
  ProtobufCMessage base;
  uint64_t id;
};
#define KENTIK__MKP__V202102ALPHA1__NOTIFICATION_CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__notification_channel__descriptor) \
    , 0 }


struct  Kentik__Mkp__V202102alpha1__User
{
  ProtobufCMessage base;
  uint64_t id;
  uint64_t company_id;
  char *user_email;
  char *user_name;
  char *user_full_name;
  uint64_t user_group_id;
  /*
   * revisit timestamp
   */
  char *last_login;
  /*
   * Required for the CreateTenant operation
   */
  protobuf_c_boolean permission_overrides;
  /*
   * Required for the CreateTenant operation
   */
  char *role;
  /*
   * Required for the CreateTenant operation
   */
  uint32_t user_level;
};
#define KENTIK__MKP__V202102ALPHA1__USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__user__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0 }


/*
 * Tenants referencing this Package template
 */
struct  Kentik__Mkp__V202102alpha1__TenantLink
{
  ProtobufCMessage base;
  uint64_t id;
  uint64_t pivot_template_id;
  uint64_t pivot_user_group_id;
};
#define KENTIK__MKP__V202102ALPHA1__TENANT_LINK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__tenant_link__descriptor) \
    , 0, 0, 0 }


/*
 * Package Template definition
 */
struct  Kentik__Mkp__V202102alpha1__Package
{
  ProtobufCMessage base;
  uint64_t id;
  uint64_t company_id;
  char *name;
  char *description;
  char *icon;
  char *color;
  size_t n_alerts;
  Kentik__Mkp__V202102alpha1__Alert **alerts;
  Kentik__Mkp__V202102alpha1__Asset *assets;
  protobuf_c_boolean is_default;
  /*
   * list of tenants using this Package template (for GetTenant only)
   */
  size_t n_tenants;
  Kentik__Mkp__V202102alpha1__TenantLink **tenants;
};
#define KENTIK__MKP__V202102ALPHA1__PACKAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__package__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, NULL, 0, 0,NULL }


struct  Kentik__Mkp__V202102alpha1__CustomDimension
{
  ProtobufCMessage base;
  char *dimension;
  char *populator;
};
#define KENTIK__MKP__V202102ALPHA1__CUSTOM_DIMENSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__custom_dimension__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Kentik__Mkp__V202102alpha1__Device
{
  ProtobufCMessage base;
  protobuf_c_boolean all_devices;
  size_t n_device_types;
  char **device_types;
  size_t n_device_labels;
  uint32_t *device_labels;
  size_t n_device_sites;
  uint32_t *device_sites;
  size_t n_device_name;
  char **device_name;
};
#define KENTIK__MKP__V202102ALPHA1__DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__device__descriptor) \
    , 0, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  Kentik__Mkp__V202102alpha1__FilterField
{
  ProtobufCMessage base;
  char *filter_field;
  char *operator_;
  char *filter_value;
};
#define KENTIK__MKP__V202102ALPHA1__FILTER_FIELD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__filter_field__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Kentik__Mkp__V202102alpha1__Filter
{
  ProtobufCMessage base;
  char *name;
  protobuf_c_boolean named;
  char *connector;
  protobuf_c_boolean not_;
  char *auto_added;
  size_t n_saved_filters;
  char **saved_filters;
  size_t n_filters;
  Kentik__Mkp__V202102alpha1__FilterField **filters;
  size_t n_filter_groups;
  Kentik__Mkp__V202102alpha1__Filter **filter_groups;
  size_t n_metric;
  char **metric;
};
#define KENTIK__MKP__V202102ALPHA1__FILTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__filter__descriptor) \
    , (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


struct  Kentik__Mkp__V202102alpha1__Tenant
{
  ProtobufCMessage base;
  uint64_t id;
  uint64_t company_id;
  char *name;
  char *description;
  char *type;
  protobuf_c_boolean enabled;
  /*
   * config object
   */
  size_t n_alerts;
  Kentik__Mkp__V202102alpha1__Alert **alerts;
  Kentik__Mkp__V202102alpha1__Asset *assets;
  char *asn;
  char *cidr;
  size_t n_custom_dimensions;
  Kentik__Mkp__V202102alpha1__CustomDimension **custom_dimensions;
  Kentik__Mkp__V202102alpha1__Device *devices;
  Kentik__Mkp__V202102alpha1__Filter *filters;
  char *interface_name;
  char *snmp_alias;
  /*
   * Packages associated with Tenant (for GetTenant only)
   */
  size_t n_packages;
  Kentik__Mkp__V202102alpha1__Package **packages;
  /*
   * Users associated with Tenant (for GetTenant only)
   */
  size_t n_users;
  Kentik__Mkp__V202102alpha1__User **users;
  /*
   * Package ID to use with tenant
   */
  uint32_t template_id;
};
#define KENTIK__MKP__V202102ALPHA1__TENANT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__tenant__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0,NULL, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, NULL, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0 }


struct  Kentik__Mkp__V202102alpha1__ListPackageRequest
{
  ProtobufCMessage base;
};
#define KENTIK__MKP__V202102ALPHA1__LIST_PACKAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__list_package_request__descriptor) \
     }


struct  Kentik__Mkp__V202102alpha1__ListPackageResponse
{
  ProtobufCMessage base;
  size_t n_packages;
  Kentik__Mkp__V202102alpha1__Package **packages;
  /*
   * The number of invalid packages, for troubleshooting. Should be zero.
   */
  uint32_t invalid_count;
};
#define KENTIK__MKP__V202102ALPHA1__LIST_PACKAGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__list_package_response__descriptor) \
    , 0,NULL, 0 }


struct  Kentik__Mkp__V202102alpha1__GetPackageRequest
{
  ProtobufCMessage base;
  uint64_t id;
};
#define KENTIK__MKP__V202102ALPHA1__GET_PACKAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__get_package_request__descriptor) \
    , 0 }


struct  Kentik__Mkp__V202102alpha1__GetPackageResponse
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Package *package;
};
#define KENTIK__MKP__V202102ALPHA1__GET_PACKAGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__get_package_response__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__CreatePackageRequest
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Package *package;
};
#define KENTIK__MKP__V202102ALPHA1__CREATE_PACKAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__create_package_request__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__CreatePackageResponse
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Package *package;
};
#define KENTIK__MKP__V202102ALPHA1__CREATE_PACKAGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__create_package_response__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__UpdatePackageRequest
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Package *package;
};
#define KENTIK__MKP__V202102ALPHA1__UPDATE_PACKAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__update_package_request__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__UpdatePackageResponse
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Package *package;
};
#define KENTIK__MKP__V202102ALPHA1__UPDATE_PACKAGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__update_package_response__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__PatchPackageRequest
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Package *package;
  /*
   * CSV values of fields follow the path of Package object dot notation (ie. "package.name,package.assets.reports")
   */
  Google__Protobuf__FieldMask *mask;
};
#define KENTIK__MKP__V202102ALPHA1__PATCH_PACKAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__patch_package_request__descriptor) \
    , NULL, NULL }


struct  Kentik__Mkp__V202102alpha1__PatchPackageResponse
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Package *package;
};
#define KENTIK__MKP__V202102ALPHA1__PATCH_PACKAGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__patch_package_response__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__DeletePackageRequest
{
  ProtobufCMessage base;
  uint64_t id;
};
#define KENTIK__MKP__V202102ALPHA1__DELETE_PACKAGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__delete_package_request__descriptor) \
    , 0 }


struct  Kentik__Mkp__V202102alpha1__DeletePackageResponse
{
  ProtobufCMessage base;
};
#define KENTIK__MKP__V202102ALPHA1__DELETE_PACKAGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__delete_package_response__descriptor) \
     }


struct  Kentik__Mkp__V202102alpha1__ListTenantRequest
{
  ProtobufCMessage base;
};
#define KENTIK__MKP__V202102ALPHA1__LIST_TENANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__list_tenant_request__descriptor) \
     }


struct  Kentik__Mkp__V202102alpha1__ListTenantResponse
{
  ProtobufCMessage base;
  size_t n_tenants;
  Kentik__Mkp__V202102alpha1__Tenant **tenants;
  uint32_t invalid_count;
};
#define KENTIK__MKP__V202102ALPHA1__LIST_TENANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__list_tenant_response__descriptor) \
    , 0,NULL, 0 }


struct  Kentik__Mkp__V202102alpha1__GetTenantRequest
{
  ProtobufCMessage base;
  uint64_t id;
};
#define KENTIK__MKP__V202102ALPHA1__GET_TENANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__get_tenant_request__descriptor) \
    , 0 }


struct  Kentik__Mkp__V202102alpha1__GetTenantResponse
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Tenant *tenant;
};
#define KENTIK__MKP__V202102ALPHA1__GET_TENANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__get_tenant_response__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__CreateTenantRequest
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Tenant *tenant;
};
#define KENTIK__MKP__V202102ALPHA1__CREATE_TENANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__create_tenant_request__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__CreateTenantResponse
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Tenant *tenant;
};
#define KENTIK__MKP__V202102ALPHA1__CREATE_TENANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__create_tenant_response__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__UpdateTenantRequest
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Tenant *tenant;
};
#define KENTIK__MKP__V202102ALPHA1__UPDATE_TENANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__update_tenant_request__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__UpdateTenantResponse
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Tenant *tenant;
};
#define KENTIK__MKP__V202102ALPHA1__UPDATE_TENANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__update_tenant_response__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__PatchTenantRequest
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Tenant *tenant;
  /*
   * CSV values of fields follow the path of Tenant object dot notation (ie. "tenant.name,tenant.filters.name")
   */
  Google__Protobuf__FieldMask *mask;
};
#define KENTIK__MKP__V202102ALPHA1__PATCH_TENANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__patch_tenant_request__descriptor) \
    , NULL, NULL }


struct  Kentik__Mkp__V202102alpha1__PatchTenantResponse
{
  ProtobufCMessage base;
  Kentik__Mkp__V202102alpha1__Tenant *tenant;
};
#define KENTIK__MKP__V202102ALPHA1__PATCH_TENANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__patch_tenant_response__descriptor) \
    , NULL }


struct  Kentik__Mkp__V202102alpha1__DeleteTenantRequest
{
  ProtobufCMessage base;
  uint64_t id;
};
#define KENTIK__MKP__V202102ALPHA1__DELETE_TENANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__delete_tenant_request__descriptor) \
    , 0 }


struct  Kentik__Mkp__V202102alpha1__DeleteTenantResponse
{
  ProtobufCMessage base;
};
#define KENTIK__MKP__V202102ALPHA1__DELETE_TENANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&kentik__mkp__v202102alpha1__delete_tenant_response__descriptor) \
     }


/* Kentik__Mkp__V202102alpha1__Alert methods */
void   kentik__mkp__v202102alpha1__alert__init
                     (Kentik__Mkp__V202102alpha1__Alert         *message);
size_t kentik__mkp__v202102alpha1__alert__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Alert   *message);
size_t kentik__mkp__v202102alpha1__alert__pack
                     (const Kentik__Mkp__V202102alpha1__Alert   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__alert__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Alert   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Alert *
       kentik__mkp__v202102alpha1__alert__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__alert__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Alert *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Asset__Report methods */
void   kentik__mkp__v202102alpha1__asset__report__init
                     (Kentik__Mkp__V202102alpha1__Asset__Report         *message);
/* Kentik__Mkp__V202102alpha1__Asset methods */
void   kentik__mkp__v202102alpha1__asset__init
                     (Kentik__Mkp__V202102alpha1__Asset         *message);
size_t kentik__mkp__v202102alpha1__asset__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Asset   *message);
size_t kentik__mkp__v202102alpha1__asset__pack
                     (const Kentik__Mkp__V202102alpha1__Asset   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__asset__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Asset   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Asset *
       kentik__mkp__v202102alpha1__asset__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__asset__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Asset *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Threshold methods */
void   kentik__mkp__v202102alpha1__threshold__init
                     (Kentik__Mkp__V202102alpha1__Threshold         *message);
size_t kentik__mkp__v202102alpha1__threshold__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Threshold   *message);
size_t kentik__mkp__v202102alpha1__threshold__pack
                     (const Kentik__Mkp__V202102alpha1__Threshold   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__threshold__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Threshold   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Threshold *
       kentik__mkp__v202102alpha1__threshold__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__threshold__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Threshold *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Activate methods */
void   kentik__mkp__v202102alpha1__activate__init
                     (Kentik__Mkp__V202102alpha1__Activate         *message);
size_t kentik__mkp__v202102alpha1__activate__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Activate   *message);
size_t kentik__mkp__v202102alpha1__activate__pack
                     (const Kentik__Mkp__V202102alpha1__Activate   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__activate__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Activate   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Activate *
       kentik__mkp__v202102alpha1__activate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__activate__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Activate *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Condition methods */
void   kentik__mkp__v202102alpha1__condition__init
                     (Kentik__Mkp__V202102alpha1__Condition         *message);
size_t kentik__mkp__v202102alpha1__condition__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Condition   *message);
size_t kentik__mkp__v202102alpha1__condition__pack
                     (const Kentik__Mkp__V202102alpha1__Condition   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__condition__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Condition   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Condition *
       kentik__mkp__v202102alpha1__condition__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__condition__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Condition *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Mitigation methods */
void   kentik__mkp__v202102alpha1__mitigation__init
                     (Kentik__Mkp__V202102alpha1__Mitigation         *message);
size_t kentik__mkp__v202102alpha1__mitigation__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Mitigation   *message);
size_t kentik__mkp__v202102alpha1__mitigation__pack
                     (const Kentik__Mkp__V202102alpha1__Mitigation   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__mitigation__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Mitigation   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Mitigation *
       kentik__mkp__v202102alpha1__mitigation__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__mitigation__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Mitigation *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__NotificationChannel methods */
void   kentik__mkp__v202102alpha1__notification_channel__init
                     (Kentik__Mkp__V202102alpha1__NotificationChannel         *message);
size_t kentik__mkp__v202102alpha1__notification_channel__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__NotificationChannel   *message);
size_t kentik__mkp__v202102alpha1__notification_channel__pack
                     (const Kentik__Mkp__V202102alpha1__NotificationChannel   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__notification_channel__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__NotificationChannel   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__NotificationChannel *
       kentik__mkp__v202102alpha1__notification_channel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__notification_channel__free_unpacked
                     (Kentik__Mkp__V202102alpha1__NotificationChannel *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__User methods */
void   kentik__mkp__v202102alpha1__user__init
                     (Kentik__Mkp__V202102alpha1__User         *message);
size_t kentik__mkp__v202102alpha1__user__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__User   *message);
size_t kentik__mkp__v202102alpha1__user__pack
                     (const Kentik__Mkp__V202102alpha1__User   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__user__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__User   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__User *
       kentik__mkp__v202102alpha1__user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__user__free_unpacked
                     (Kentik__Mkp__V202102alpha1__User *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__TenantLink methods */
void   kentik__mkp__v202102alpha1__tenant_link__init
                     (Kentik__Mkp__V202102alpha1__TenantLink         *message);
size_t kentik__mkp__v202102alpha1__tenant_link__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__TenantLink   *message);
size_t kentik__mkp__v202102alpha1__tenant_link__pack
                     (const Kentik__Mkp__V202102alpha1__TenantLink   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__tenant_link__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__TenantLink   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__TenantLink *
       kentik__mkp__v202102alpha1__tenant_link__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__tenant_link__free_unpacked
                     (Kentik__Mkp__V202102alpha1__TenantLink *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Package methods */
void   kentik__mkp__v202102alpha1__package__init
                     (Kentik__Mkp__V202102alpha1__Package         *message);
size_t kentik__mkp__v202102alpha1__package__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Package   *message);
size_t kentik__mkp__v202102alpha1__package__pack
                     (const Kentik__Mkp__V202102alpha1__Package   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__package__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Package   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Package *
       kentik__mkp__v202102alpha1__package__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__package__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Package *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__CustomDimension methods */
void   kentik__mkp__v202102alpha1__custom_dimension__init
                     (Kentik__Mkp__V202102alpha1__CustomDimension         *message);
size_t kentik__mkp__v202102alpha1__custom_dimension__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__CustomDimension   *message);
size_t kentik__mkp__v202102alpha1__custom_dimension__pack
                     (const Kentik__Mkp__V202102alpha1__CustomDimension   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__custom_dimension__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__CustomDimension   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__CustomDimension *
       kentik__mkp__v202102alpha1__custom_dimension__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__custom_dimension__free_unpacked
                     (Kentik__Mkp__V202102alpha1__CustomDimension *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Device methods */
void   kentik__mkp__v202102alpha1__device__init
                     (Kentik__Mkp__V202102alpha1__Device         *message);
size_t kentik__mkp__v202102alpha1__device__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Device   *message);
size_t kentik__mkp__v202102alpha1__device__pack
                     (const Kentik__Mkp__V202102alpha1__Device   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__device__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Device   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Device *
       kentik__mkp__v202102alpha1__device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__device__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Device *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__FilterField methods */
void   kentik__mkp__v202102alpha1__filter_field__init
                     (Kentik__Mkp__V202102alpha1__FilterField         *message);
size_t kentik__mkp__v202102alpha1__filter_field__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__FilterField   *message);
size_t kentik__mkp__v202102alpha1__filter_field__pack
                     (const Kentik__Mkp__V202102alpha1__FilterField   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__filter_field__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__FilterField   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__FilterField *
       kentik__mkp__v202102alpha1__filter_field__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__filter_field__free_unpacked
                     (Kentik__Mkp__V202102alpha1__FilterField *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Filter methods */
void   kentik__mkp__v202102alpha1__filter__init
                     (Kentik__Mkp__V202102alpha1__Filter         *message);
size_t kentik__mkp__v202102alpha1__filter__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Filter   *message);
size_t kentik__mkp__v202102alpha1__filter__pack
                     (const Kentik__Mkp__V202102alpha1__Filter   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__filter__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Filter   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Filter *
       kentik__mkp__v202102alpha1__filter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__filter__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Filter *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__Tenant methods */
void   kentik__mkp__v202102alpha1__tenant__init
                     (Kentik__Mkp__V202102alpha1__Tenant         *message);
size_t kentik__mkp__v202102alpha1__tenant__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__Tenant   *message);
size_t kentik__mkp__v202102alpha1__tenant__pack
                     (const Kentik__Mkp__V202102alpha1__Tenant   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__tenant__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__Tenant   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__Tenant *
       kentik__mkp__v202102alpha1__tenant__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__tenant__free_unpacked
                     (Kentik__Mkp__V202102alpha1__Tenant *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__ListPackageRequest methods */
void   kentik__mkp__v202102alpha1__list_package_request__init
                     (Kentik__Mkp__V202102alpha1__ListPackageRequest         *message);
size_t kentik__mkp__v202102alpha1__list_package_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__ListPackageRequest   *message);
size_t kentik__mkp__v202102alpha1__list_package_request__pack
                     (const Kentik__Mkp__V202102alpha1__ListPackageRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__list_package_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__ListPackageRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__ListPackageRequest *
       kentik__mkp__v202102alpha1__list_package_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__list_package_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__ListPackageRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__ListPackageResponse methods */
void   kentik__mkp__v202102alpha1__list_package_response__init
                     (Kentik__Mkp__V202102alpha1__ListPackageResponse         *message);
size_t kentik__mkp__v202102alpha1__list_package_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__ListPackageResponse   *message);
size_t kentik__mkp__v202102alpha1__list_package_response__pack
                     (const Kentik__Mkp__V202102alpha1__ListPackageResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__list_package_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__ListPackageResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__ListPackageResponse *
       kentik__mkp__v202102alpha1__list_package_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__list_package_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__ListPackageResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__GetPackageRequest methods */
void   kentik__mkp__v202102alpha1__get_package_request__init
                     (Kentik__Mkp__V202102alpha1__GetPackageRequest         *message);
size_t kentik__mkp__v202102alpha1__get_package_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__GetPackageRequest   *message);
size_t kentik__mkp__v202102alpha1__get_package_request__pack
                     (const Kentik__Mkp__V202102alpha1__GetPackageRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__get_package_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__GetPackageRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__GetPackageRequest *
       kentik__mkp__v202102alpha1__get_package_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__get_package_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__GetPackageRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__GetPackageResponse methods */
void   kentik__mkp__v202102alpha1__get_package_response__init
                     (Kentik__Mkp__V202102alpha1__GetPackageResponse         *message);
size_t kentik__mkp__v202102alpha1__get_package_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__GetPackageResponse   *message);
size_t kentik__mkp__v202102alpha1__get_package_response__pack
                     (const Kentik__Mkp__V202102alpha1__GetPackageResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__get_package_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__GetPackageResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__GetPackageResponse *
       kentik__mkp__v202102alpha1__get_package_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__get_package_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__GetPackageResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__CreatePackageRequest methods */
void   kentik__mkp__v202102alpha1__create_package_request__init
                     (Kentik__Mkp__V202102alpha1__CreatePackageRequest         *message);
size_t kentik__mkp__v202102alpha1__create_package_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__CreatePackageRequest   *message);
size_t kentik__mkp__v202102alpha1__create_package_request__pack
                     (const Kentik__Mkp__V202102alpha1__CreatePackageRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__create_package_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__CreatePackageRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__CreatePackageRequest *
       kentik__mkp__v202102alpha1__create_package_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__create_package_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__CreatePackageRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__CreatePackageResponse methods */
void   kentik__mkp__v202102alpha1__create_package_response__init
                     (Kentik__Mkp__V202102alpha1__CreatePackageResponse         *message);
size_t kentik__mkp__v202102alpha1__create_package_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__CreatePackageResponse   *message);
size_t kentik__mkp__v202102alpha1__create_package_response__pack
                     (const Kentik__Mkp__V202102alpha1__CreatePackageResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__create_package_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__CreatePackageResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__CreatePackageResponse *
       kentik__mkp__v202102alpha1__create_package_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__create_package_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__CreatePackageResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__UpdatePackageRequest methods */
void   kentik__mkp__v202102alpha1__update_package_request__init
                     (Kentik__Mkp__V202102alpha1__UpdatePackageRequest         *message);
size_t kentik__mkp__v202102alpha1__update_package_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__UpdatePackageRequest   *message);
size_t kentik__mkp__v202102alpha1__update_package_request__pack
                     (const Kentik__Mkp__V202102alpha1__UpdatePackageRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__update_package_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__UpdatePackageRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__UpdatePackageRequest *
       kentik__mkp__v202102alpha1__update_package_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__update_package_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__UpdatePackageRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__UpdatePackageResponse methods */
void   kentik__mkp__v202102alpha1__update_package_response__init
                     (Kentik__Mkp__V202102alpha1__UpdatePackageResponse         *message);
size_t kentik__mkp__v202102alpha1__update_package_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__UpdatePackageResponse   *message);
size_t kentik__mkp__v202102alpha1__update_package_response__pack
                     (const Kentik__Mkp__V202102alpha1__UpdatePackageResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__update_package_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__UpdatePackageResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__UpdatePackageResponse *
       kentik__mkp__v202102alpha1__update_package_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__update_package_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__UpdatePackageResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__PatchPackageRequest methods */
void   kentik__mkp__v202102alpha1__patch_package_request__init
                     (Kentik__Mkp__V202102alpha1__PatchPackageRequest         *message);
size_t kentik__mkp__v202102alpha1__patch_package_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__PatchPackageRequest   *message);
size_t kentik__mkp__v202102alpha1__patch_package_request__pack
                     (const Kentik__Mkp__V202102alpha1__PatchPackageRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__patch_package_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__PatchPackageRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__PatchPackageRequest *
       kentik__mkp__v202102alpha1__patch_package_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__patch_package_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__PatchPackageRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__PatchPackageResponse methods */
void   kentik__mkp__v202102alpha1__patch_package_response__init
                     (Kentik__Mkp__V202102alpha1__PatchPackageResponse         *message);
size_t kentik__mkp__v202102alpha1__patch_package_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__PatchPackageResponse   *message);
size_t kentik__mkp__v202102alpha1__patch_package_response__pack
                     (const Kentik__Mkp__V202102alpha1__PatchPackageResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__patch_package_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__PatchPackageResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__PatchPackageResponse *
       kentik__mkp__v202102alpha1__patch_package_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__patch_package_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__PatchPackageResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__DeletePackageRequest methods */
void   kentik__mkp__v202102alpha1__delete_package_request__init
                     (Kentik__Mkp__V202102alpha1__DeletePackageRequest         *message);
size_t kentik__mkp__v202102alpha1__delete_package_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__DeletePackageRequest   *message);
size_t kentik__mkp__v202102alpha1__delete_package_request__pack
                     (const Kentik__Mkp__V202102alpha1__DeletePackageRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__delete_package_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__DeletePackageRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__DeletePackageRequest *
       kentik__mkp__v202102alpha1__delete_package_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__delete_package_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__DeletePackageRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__DeletePackageResponse methods */
void   kentik__mkp__v202102alpha1__delete_package_response__init
                     (Kentik__Mkp__V202102alpha1__DeletePackageResponse         *message);
size_t kentik__mkp__v202102alpha1__delete_package_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__DeletePackageResponse   *message);
size_t kentik__mkp__v202102alpha1__delete_package_response__pack
                     (const Kentik__Mkp__V202102alpha1__DeletePackageResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__delete_package_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__DeletePackageResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__DeletePackageResponse *
       kentik__mkp__v202102alpha1__delete_package_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__delete_package_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__DeletePackageResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__ListTenantRequest methods */
void   kentik__mkp__v202102alpha1__list_tenant_request__init
                     (Kentik__Mkp__V202102alpha1__ListTenantRequest         *message);
size_t kentik__mkp__v202102alpha1__list_tenant_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__ListTenantRequest   *message);
size_t kentik__mkp__v202102alpha1__list_tenant_request__pack
                     (const Kentik__Mkp__V202102alpha1__ListTenantRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__list_tenant_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__ListTenantRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__ListTenantRequest *
       kentik__mkp__v202102alpha1__list_tenant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__list_tenant_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__ListTenantRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__ListTenantResponse methods */
void   kentik__mkp__v202102alpha1__list_tenant_response__init
                     (Kentik__Mkp__V202102alpha1__ListTenantResponse         *message);
size_t kentik__mkp__v202102alpha1__list_tenant_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__ListTenantResponse   *message);
size_t kentik__mkp__v202102alpha1__list_tenant_response__pack
                     (const Kentik__Mkp__V202102alpha1__ListTenantResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__list_tenant_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__ListTenantResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__ListTenantResponse *
       kentik__mkp__v202102alpha1__list_tenant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__list_tenant_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__ListTenantResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__GetTenantRequest methods */
void   kentik__mkp__v202102alpha1__get_tenant_request__init
                     (Kentik__Mkp__V202102alpha1__GetTenantRequest         *message);
size_t kentik__mkp__v202102alpha1__get_tenant_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__GetTenantRequest   *message);
size_t kentik__mkp__v202102alpha1__get_tenant_request__pack
                     (const Kentik__Mkp__V202102alpha1__GetTenantRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__get_tenant_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__GetTenantRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__GetTenantRequest *
       kentik__mkp__v202102alpha1__get_tenant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__get_tenant_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__GetTenantRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__GetTenantResponse methods */
void   kentik__mkp__v202102alpha1__get_tenant_response__init
                     (Kentik__Mkp__V202102alpha1__GetTenantResponse         *message);
size_t kentik__mkp__v202102alpha1__get_tenant_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__GetTenantResponse   *message);
size_t kentik__mkp__v202102alpha1__get_tenant_response__pack
                     (const Kentik__Mkp__V202102alpha1__GetTenantResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__get_tenant_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__GetTenantResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__GetTenantResponse *
       kentik__mkp__v202102alpha1__get_tenant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__get_tenant_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__GetTenantResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__CreateTenantRequest methods */
void   kentik__mkp__v202102alpha1__create_tenant_request__init
                     (Kentik__Mkp__V202102alpha1__CreateTenantRequest         *message);
size_t kentik__mkp__v202102alpha1__create_tenant_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__CreateTenantRequest   *message);
size_t kentik__mkp__v202102alpha1__create_tenant_request__pack
                     (const Kentik__Mkp__V202102alpha1__CreateTenantRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__create_tenant_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__CreateTenantRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__CreateTenantRequest *
       kentik__mkp__v202102alpha1__create_tenant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__create_tenant_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__CreateTenantRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__CreateTenantResponse methods */
void   kentik__mkp__v202102alpha1__create_tenant_response__init
                     (Kentik__Mkp__V202102alpha1__CreateTenantResponse         *message);
size_t kentik__mkp__v202102alpha1__create_tenant_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__CreateTenantResponse   *message);
size_t kentik__mkp__v202102alpha1__create_tenant_response__pack
                     (const Kentik__Mkp__V202102alpha1__CreateTenantResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__create_tenant_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__CreateTenantResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__CreateTenantResponse *
       kentik__mkp__v202102alpha1__create_tenant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__create_tenant_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__CreateTenantResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__UpdateTenantRequest methods */
void   kentik__mkp__v202102alpha1__update_tenant_request__init
                     (Kentik__Mkp__V202102alpha1__UpdateTenantRequest         *message);
size_t kentik__mkp__v202102alpha1__update_tenant_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__UpdateTenantRequest   *message);
size_t kentik__mkp__v202102alpha1__update_tenant_request__pack
                     (const Kentik__Mkp__V202102alpha1__UpdateTenantRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__update_tenant_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__UpdateTenantRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__UpdateTenantRequest *
       kentik__mkp__v202102alpha1__update_tenant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__update_tenant_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__UpdateTenantRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__UpdateTenantResponse methods */
void   kentik__mkp__v202102alpha1__update_tenant_response__init
                     (Kentik__Mkp__V202102alpha1__UpdateTenantResponse         *message);
size_t kentik__mkp__v202102alpha1__update_tenant_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__UpdateTenantResponse   *message);
size_t kentik__mkp__v202102alpha1__update_tenant_response__pack
                     (const Kentik__Mkp__V202102alpha1__UpdateTenantResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__update_tenant_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__UpdateTenantResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__UpdateTenantResponse *
       kentik__mkp__v202102alpha1__update_tenant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__update_tenant_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__UpdateTenantResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__PatchTenantRequest methods */
void   kentik__mkp__v202102alpha1__patch_tenant_request__init
                     (Kentik__Mkp__V202102alpha1__PatchTenantRequest         *message);
size_t kentik__mkp__v202102alpha1__patch_tenant_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__PatchTenantRequest   *message);
size_t kentik__mkp__v202102alpha1__patch_tenant_request__pack
                     (const Kentik__Mkp__V202102alpha1__PatchTenantRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__patch_tenant_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__PatchTenantRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__PatchTenantRequest *
       kentik__mkp__v202102alpha1__patch_tenant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__patch_tenant_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__PatchTenantRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__PatchTenantResponse methods */
void   kentik__mkp__v202102alpha1__patch_tenant_response__init
                     (Kentik__Mkp__V202102alpha1__PatchTenantResponse         *message);
size_t kentik__mkp__v202102alpha1__patch_tenant_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__PatchTenantResponse   *message);
size_t kentik__mkp__v202102alpha1__patch_tenant_response__pack
                     (const Kentik__Mkp__V202102alpha1__PatchTenantResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__patch_tenant_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__PatchTenantResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__PatchTenantResponse *
       kentik__mkp__v202102alpha1__patch_tenant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__patch_tenant_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__PatchTenantResponse *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__DeleteTenantRequest methods */
void   kentik__mkp__v202102alpha1__delete_tenant_request__init
                     (Kentik__Mkp__V202102alpha1__DeleteTenantRequest         *message);
size_t kentik__mkp__v202102alpha1__delete_tenant_request__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__DeleteTenantRequest   *message);
size_t kentik__mkp__v202102alpha1__delete_tenant_request__pack
                     (const Kentik__Mkp__V202102alpha1__DeleteTenantRequest   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__delete_tenant_request__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__DeleteTenantRequest   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__DeleteTenantRequest *
       kentik__mkp__v202102alpha1__delete_tenant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__delete_tenant_request__free_unpacked
                     (Kentik__Mkp__V202102alpha1__DeleteTenantRequest *message,
                      ProtobufCAllocator *allocator);
/* Kentik__Mkp__V202102alpha1__DeleteTenantResponse methods */
void   kentik__mkp__v202102alpha1__delete_tenant_response__init
                     (Kentik__Mkp__V202102alpha1__DeleteTenantResponse         *message);
size_t kentik__mkp__v202102alpha1__delete_tenant_response__get_packed_size
                     (const Kentik__Mkp__V202102alpha1__DeleteTenantResponse   *message);
size_t kentik__mkp__v202102alpha1__delete_tenant_response__pack
                     (const Kentik__Mkp__V202102alpha1__DeleteTenantResponse   *message,
                      uint8_t             *out);
size_t kentik__mkp__v202102alpha1__delete_tenant_response__pack_to_buffer
                     (const Kentik__Mkp__V202102alpha1__DeleteTenantResponse   *message,
                      ProtobufCBuffer     *buffer);
Kentik__Mkp__V202102alpha1__DeleteTenantResponse *
       kentik__mkp__v202102alpha1__delete_tenant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   kentik__mkp__v202102alpha1__delete_tenant_response__free_unpacked
                     (Kentik__Mkp__V202102alpha1__DeleteTenantResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Kentik__Mkp__V202102alpha1__Alert_Closure)
                 (const Kentik__Mkp__V202102alpha1__Alert *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Asset__Report_Closure)
                 (const Kentik__Mkp__V202102alpha1__Asset__Report *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Asset_Closure)
                 (const Kentik__Mkp__V202102alpha1__Asset *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Threshold_Closure)
                 (const Kentik__Mkp__V202102alpha1__Threshold *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Activate_Closure)
                 (const Kentik__Mkp__V202102alpha1__Activate *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Condition_Closure)
                 (const Kentik__Mkp__V202102alpha1__Condition *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Mitigation_Closure)
                 (const Kentik__Mkp__V202102alpha1__Mitigation *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__NotificationChannel_Closure)
                 (const Kentik__Mkp__V202102alpha1__NotificationChannel *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__User_Closure)
                 (const Kentik__Mkp__V202102alpha1__User *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__TenantLink_Closure)
                 (const Kentik__Mkp__V202102alpha1__TenantLink *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Package_Closure)
                 (const Kentik__Mkp__V202102alpha1__Package *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__CustomDimension_Closure)
                 (const Kentik__Mkp__V202102alpha1__CustomDimension *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Device_Closure)
                 (const Kentik__Mkp__V202102alpha1__Device *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__FilterField_Closure)
                 (const Kentik__Mkp__V202102alpha1__FilterField *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Filter_Closure)
                 (const Kentik__Mkp__V202102alpha1__Filter *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__Tenant_Closure)
                 (const Kentik__Mkp__V202102alpha1__Tenant *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__ListPackageRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__ListPackageRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__ListPackageResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__ListPackageResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__GetPackageRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__GetPackageRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__GetPackageResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__GetPackageResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__CreatePackageRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__CreatePackageRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__CreatePackageResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__CreatePackageResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__UpdatePackageRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__UpdatePackageRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__UpdatePackageResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__UpdatePackageResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__PatchPackageRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__PatchPackageRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__PatchPackageResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__PatchPackageResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__DeletePackageRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__DeletePackageRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__DeletePackageResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__DeletePackageResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__ListTenantRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__ListTenantRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__ListTenantResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__ListTenantResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__GetTenantRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__GetTenantRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__GetTenantResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__GetTenantResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__CreateTenantRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__CreateTenantRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__CreateTenantResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__CreateTenantResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__UpdateTenantRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__UpdateTenantRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__UpdateTenantResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__UpdateTenantResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__PatchTenantRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__PatchTenantRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__PatchTenantResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__PatchTenantResponse *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__DeleteTenantRequest_Closure)
                 (const Kentik__Mkp__V202102alpha1__DeleteTenantRequest *message,
                  void *closure_data);
typedef void (*Kentik__Mkp__V202102alpha1__DeleteTenantResponse_Closure)
                 (const Kentik__Mkp__V202102alpha1__DeleteTenantResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct Kentik__Mkp__V202102alpha1__PackageService_Service Kentik__Mkp__V202102alpha1__PackageService_Service;
struct Kentik__Mkp__V202102alpha1__PackageService_Service
{
  ProtobufCService base;
  void (*list_package)(Kentik__Mkp__V202102alpha1__PackageService_Service *service,
                       const Kentik__Mkp__V202102alpha1__ListPackageRequest *input,
                       Kentik__Mkp__V202102alpha1__ListPackageResponse_Closure closure,
                       void *closure_data);
  void (*get_package)(Kentik__Mkp__V202102alpha1__PackageService_Service *service,
                      const Kentik__Mkp__V202102alpha1__GetPackageRequest *input,
                      Kentik__Mkp__V202102alpha1__GetPackageResponse_Closure closure,
                      void *closure_data);
  void (*create_package)(Kentik__Mkp__V202102alpha1__PackageService_Service *service,
                         const Kentik__Mkp__V202102alpha1__CreatePackageRequest *input,
                         Kentik__Mkp__V202102alpha1__CreatePackageResponse_Closure closure,
                         void *closure_data);
  void (*update_package)(Kentik__Mkp__V202102alpha1__PackageService_Service *service,
                         const Kentik__Mkp__V202102alpha1__UpdatePackageRequest *input,
                         Kentik__Mkp__V202102alpha1__UpdatePackageResponse_Closure closure,
                         void *closure_data);
  void (*patch_package)(Kentik__Mkp__V202102alpha1__PackageService_Service *service,
                        const Kentik__Mkp__V202102alpha1__PatchPackageRequest *input,
                        Kentik__Mkp__V202102alpha1__PatchPackageResponse_Closure closure,
                        void *closure_data);
  void (*delete_package)(Kentik__Mkp__V202102alpha1__PackageService_Service *service,
                         const Kentik__Mkp__V202102alpha1__DeletePackageRequest *input,
                         Kentik__Mkp__V202102alpha1__DeletePackageResponse_Closure closure,
                         void *closure_data);
};
typedef void (*Kentik__Mkp__V202102alpha1__PackageService_ServiceDestroy)(Kentik__Mkp__V202102alpha1__PackageService_Service *);
void kentik__mkp__v202102alpha1__package_service__init (Kentik__Mkp__V202102alpha1__PackageService_Service *service,
                                                        Kentik__Mkp__V202102alpha1__PackageService_ServiceDestroy destroy);
#define KENTIK__MKP__V202102ALPHA1__PACKAGE_SERVICE__BASE_INIT \
    { &kentik__mkp__v202102alpha1__package_service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define KENTIK__MKP__V202102ALPHA1__PACKAGE_SERVICE__INIT(function_prefix__) \
    { KENTIK__MKP__V202102ALPHA1__PACKAGE_SERVICE__BASE_INIT,\
      function_prefix__ ## list_package,\
      function_prefix__ ## get_package,\
      function_prefix__ ## create_package,\
      function_prefix__ ## update_package,\
      function_prefix__ ## patch_package,\
      function_prefix__ ## delete_package  }
void kentik__mkp__v202102alpha1__package_service__list_package(ProtobufCService *service,
                                                               const Kentik__Mkp__V202102alpha1__ListPackageRequest *input,
                                                               Kentik__Mkp__V202102alpha1__ListPackageResponse_Closure closure,
                                                               void *closure_data);
void kentik__mkp__v202102alpha1__package_service__get_package(ProtobufCService *service,
                                                              const Kentik__Mkp__V202102alpha1__GetPackageRequest *input,
                                                              Kentik__Mkp__V202102alpha1__GetPackageResponse_Closure closure,
                                                              void *closure_data);
void kentik__mkp__v202102alpha1__package_service__create_package(ProtobufCService *service,
                                                                 const Kentik__Mkp__V202102alpha1__CreatePackageRequest *input,
                                                                 Kentik__Mkp__V202102alpha1__CreatePackageResponse_Closure closure,
                                                                 void *closure_data);
void kentik__mkp__v202102alpha1__package_service__update_package(ProtobufCService *service,
                                                                 const Kentik__Mkp__V202102alpha1__UpdatePackageRequest *input,
                                                                 Kentik__Mkp__V202102alpha1__UpdatePackageResponse_Closure closure,
                                                                 void *closure_data);
void kentik__mkp__v202102alpha1__package_service__patch_package(ProtobufCService *service,
                                                                const Kentik__Mkp__V202102alpha1__PatchPackageRequest *input,
                                                                Kentik__Mkp__V202102alpha1__PatchPackageResponse_Closure closure,
                                                                void *closure_data);
void kentik__mkp__v202102alpha1__package_service__delete_package(ProtobufCService *service,
                                                                 const Kentik__Mkp__V202102alpha1__DeletePackageRequest *input,
                                                                 Kentik__Mkp__V202102alpha1__DeletePackageResponse_Closure closure,
                                                                 void *closure_data);
typedef struct Kentik__Mkp__V202102alpha1__TenantService_Service Kentik__Mkp__V202102alpha1__TenantService_Service;
struct Kentik__Mkp__V202102alpha1__TenantService_Service
{
  ProtobufCService base;
  void (*list_tenant)(Kentik__Mkp__V202102alpha1__TenantService_Service *service,
                      const Kentik__Mkp__V202102alpha1__ListTenantRequest *input,
                      Kentik__Mkp__V202102alpha1__ListTenantResponse_Closure closure,
                      void *closure_data);
  void (*get_tenant)(Kentik__Mkp__V202102alpha1__TenantService_Service *service,
                     const Kentik__Mkp__V202102alpha1__GetTenantRequest *input,
                     Kentik__Mkp__V202102alpha1__GetTenantResponse_Closure closure,
                     void *closure_data);
  void (*create_tenant)(Kentik__Mkp__V202102alpha1__TenantService_Service *service,
                        const Kentik__Mkp__V202102alpha1__CreateTenantRequest *input,
                        Kentik__Mkp__V202102alpha1__CreateTenantResponse_Closure closure,
                        void *closure_data);
  void (*update_tenant)(Kentik__Mkp__V202102alpha1__TenantService_Service *service,
                        const Kentik__Mkp__V202102alpha1__UpdateTenantRequest *input,
                        Kentik__Mkp__V202102alpha1__UpdateTenantResponse_Closure closure,
                        void *closure_data);
  void (*patch_tenant)(Kentik__Mkp__V202102alpha1__TenantService_Service *service,
                       const Kentik__Mkp__V202102alpha1__PatchTenantRequest *input,
                       Kentik__Mkp__V202102alpha1__PatchTenantResponse_Closure closure,
                       void *closure_data);
  void (*delete_tenant)(Kentik__Mkp__V202102alpha1__TenantService_Service *service,
                        const Kentik__Mkp__V202102alpha1__DeleteTenantRequest *input,
                        Kentik__Mkp__V202102alpha1__DeleteTenantResponse_Closure closure,
                        void *closure_data);
};
typedef void (*Kentik__Mkp__V202102alpha1__TenantService_ServiceDestroy)(Kentik__Mkp__V202102alpha1__TenantService_Service *);
void kentik__mkp__v202102alpha1__tenant_service__init (Kentik__Mkp__V202102alpha1__TenantService_Service *service,
                                                       Kentik__Mkp__V202102alpha1__TenantService_ServiceDestroy destroy);
#define KENTIK__MKP__V202102ALPHA1__TENANT_SERVICE__BASE_INIT \
    { &kentik__mkp__v202102alpha1__tenant_service__descriptor, protobuf_c_service_invoke_internal, NULL }
#define KENTIK__MKP__V202102ALPHA1__TENANT_SERVICE__INIT(function_prefix__) \
    { KENTIK__MKP__V202102ALPHA1__TENANT_SERVICE__BASE_INIT,\
      function_prefix__ ## list_tenant,\
      function_prefix__ ## get_tenant,\
      function_prefix__ ## create_tenant,\
      function_prefix__ ## update_tenant,\
      function_prefix__ ## patch_tenant,\
      function_prefix__ ## delete_tenant  }
void kentik__mkp__v202102alpha1__tenant_service__list_tenant(ProtobufCService *service,
                                                             const Kentik__Mkp__V202102alpha1__ListTenantRequest *input,
                                                             Kentik__Mkp__V202102alpha1__ListTenantResponse_Closure closure,
                                                             void *closure_data);
void kentik__mkp__v202102alpha1__tenant_service__get_tenant(ProtobufCService *service,
                                                            const Kentik__Mkp__V202102alpha1__GetTenantRequest *input,
                                                            Kentik__Mkp__V202102alpha1__GetTenantResponse_Closure closure,
                                                            void *closure_data);
void kentik__mkp__v202102alpha1__tenant_service__create_tenant(ProtobufCService *service,
                                                               const Kentik__Mkp__V202102alpha1__CreateTenantRequest *input,
                                                               Kentik__Mkp__V202102alpha1__CreateTenantResponse_Closure closure,
                                                               void *closure_data);
void kentik__mkp__v202102alpha1__tenant_service__update_tenant(ProtobufCService *service,
                                                               const Kentik__Mkp__V202102alpha1__UpdateTenantRequest *input,
                                                               Kentik__Mkp__V202102alpha1__UpdateTenantResponse_Closure closure,
                                                               void *closure_data);
void kentik__mkp__v202102alpha1__tenant_service__patch_tenant(ProtobufCService *service,
                                                              const Kentik__Mkp__V202102alpha1__PatchTenantRequest *input,
                                                              Kentik__Mkp__V202102alpha1__PatchTenantResponse_Closure closure,
                                                              void *closure_data);
void kentik__mkp__v202102alpha1__tenant_service__delete_tenant(ProtobufCService *service,
                                                               const Kentik__Mkp__V202102alpha1__DeleteTenantRequest *input,
                                                               Kentik__Mkp__V202102alpha1__DeleteTenantResponse_Closure closure,
                                                               void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__alert__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__asset__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__asset__report__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__threshold__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__activate__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__condition__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__mitigation__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__notification_channel__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__user__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__tenant_link__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__package__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__custom_dimension__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__device__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__filter_field__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__filter__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__tenant__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__list_package_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__list_package_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__get_package_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__get_package_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__create_package_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__create_package_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__update_package_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__update_package_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__patch_package_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__patch_package_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__delete_package_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__delete_package_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__list_tenant_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__list_tenant_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__get_tenant_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__get_tenant_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__create_tenant_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__create_tenant_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__update_tenant_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__update_tenant_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__patch_tenant_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__patch_tenant_response__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__delete_tenant_request__descriptor;
extern const ProtobufCMessageDescriptor kentik__mkp__v202102alpha1__delete_tenant_response__descriptor;
extern const ProtobufCServiceDescriptor kentik__mkp__v202102alpha1__package_service__descriptor;
extern const ProtobufCServiceDescriptor kentik__mkp__v202102alpha1__tenant_service__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto__INCLUDED */
