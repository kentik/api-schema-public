/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: google/type/phone_number.proto */

#ifndef PROTOBUF_C_google_2ftype_2fphone_5fnumber_2eproto__INCLUDED
#define PROTOBUF_C_google_2ftype_2fphone_5fnumber_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Google__Type__PhoneNumber Google__Type__PhoneNumber;
typedef struct _Google__Type__PhoneNumber__ShortCode Google__Type__PhoneNumber__ShortCode;


/* --- enums --- */


/* --- messages --- */

/*
 * An object representing a short code, which is a phone number that is
 * typically much shorter than regular phone numbers and can be used to
 * address messages in MMS and SMS systems, as well as for abbreviated dialing
 * (e.g. "Text 611 to see how many minutes you have remaining on your plan.").
 * Short codes are restricted to a region and are not internationally
 * dialable, which means the same short code can exist in different regions,
 * with different usage and pricing, even if those regions share the same
 * country calling code (e.g. US and CA).
 */
struct  _Google__Type__PhoneNumber__ShortCode
{
  ProtobufCMessage base;
  /*
   * Required. The BCP-47 region code of the location where calls to this
   * short code can be made, such as "US" and "BB".
   * Reference(s):
   *  - http://www.unicode.org/reports/tr35/#unicode_region_subtag
   */
  char *region_code;
  /*
   * Required. The short code digits, without a leading plus ('+') or country
   * calling code, e.g. "611".
   */
  char *number;
};
#define GOOGLE__TYPE__PHONE_NUMBER__SHORT_CODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__type__phone_number__short_code__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


typedef enum {
  GOOGLE__TYPE__PHONE_NUMBER__KIND__NOT_SET = 0,
  GOOGLE__TYPE__PHONE_NUMBER__KIND_E164_NUMBER = 1,
  GOOGLE__TYPE__PHONE_NUMBER__KIND_SHORT_CODE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__TYPE__PHONE_NUMBER__KIND)
} Google__Type__PhoneNumber__KindCase;

/*
 * An object representing a phone number, suitable as an API wire format.
 * This representation:
 *  - should not be used for locale-specific formatting of a phone number, such
 *    as "+1 (650) 253-0000 ext. 123"
 *  - is not designed for efficient storage
 *  - may not be suitable for dialing - specialized libraries (see references)
 *    should be used to parse the number for that purpose
 * To do something meaningful with this number, such as format it for various
 * use-cases, convert it to an `i18n.phonenumbers.PhoneNumber` object first.
 * For instance, in Java this would be:
 *    com.google.type.PhoneNumber wireProto =
 *        com.google.type.PhoneNumber.newBuilder().build();
 *    com.google.i18n.phonenumbers.Phonenumber.PhoneNumber phoneNumber =
 *        PhoneNumberUtil.getInstance().parse(wireProto.getE164Number(), "ZZ");
 *    if (!wireProto.getExtension().isEmpty()) {
 *      phoneNumber.setExtension(wireProto.getExtension());
 *    }
 *  Reference(s):
 *   - https://github.com/google/libphonenumber
 */
struct  _Google__Type__PhoneNumber
{
  ProtobufCMessage base;
  /*
   * The phone number's extension. The extension is not standardized in ITU
   * recommendations, except for being defined as a series of numbers with a
   * maximum length of 40 digits. Other than digits, some other dialing
   * characters such as ',' (indicating a wait) or '#' may be stored here.
   * Note that no regions currently use extensions with short codes, so this
   * field is normally only set in conjunction with an E.164 number. It is held
   * separately from the E.164 number to allow for short code extensions in the
   * future.
   */
  char *extension;
  Google__Type__PhoneNumber__KindCase kind_case;
  union {
    /*
     * The phone number, represented as a leading plus sign ('+'), followed by a
     * phone number that uses a relaxed ITU E.164 format consisting of the
     * country calling code (1 to 3 digits) and the subscriber number, with no
     * additional spaces or formatting, e.g.:
     *  - correct: "+15552220123"
     *  - incorrect: "+1 (555) 222-01234 x123".
     * The ITU E.164 format limits the latter to 12 digits, but in practice not
     * all countries respect that, so we relax that restriction here.
     * National-only numbers are not allowed.
     * References:
     *  - https://www.itu.int/rec/T-REC-E.164-201011-I
     *  - https://en.wikipedia.org/wiki/E.164.
     *  - https://en.wikipedia.org/wiki/List_of_country_calling_codes
     */
    char *e164_number;
    /*
     * A short code.
     * Reference(s):
     *  - https://en.wikipedia.org/wiki/Short_code
     */
    Google__Type__PhoneNumber__ShortCode *short_code;
  };
};
#define GOOGLE__TYPE__PHONE_NUMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__type__phone_number__descriptor) \
    , (char *)protobuf_c_empty_string, GOOGLE__TYPE__PHONE_NUMBER__KIND__NOT_SET, {0} }


/* Google__Type__PhoneNumber__ShortCode methods */
void   google__type__phone_number__short_code__init
                     (Google__Type__PhoneNumber__ShortCode         *message);
/* Google__Type__PhoneNumber methods */
void   google__type__phone_number__init
                     (Google__Type__PhoneNumber         *message);
size_t google__type__phone_number__get_packed_size
                     (const Google__Type__PhoneNumber   *message);
size_t google__type__phone_number__pack
                     (const Google__Type__PhoneNumber   *message,
                      uint8_t             *out);
size_t google__type__phone_number__pack_to_buffer
                     (const Google__Type__PhoneNumber   *message,
                      ProtobufCBuffer     *buffer);
Google__Type__PhoneNumber *
       google__type__phone_number__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__type__phone_number__free_unpacked
                     (Google__Type__PhoneNumber *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Google__Type__PhoneNumber__ShortCode_Closure)
                 (const Google__Type__PhoneNumber__ShortCode *message,
                  void *closure_data);
typedef void (*Google__Type__PhoneNumber_Closure)
                 (const Google__Type__PhoneNumber *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor google__type__phone_number__descriptor;
extern const ProtobufCMessageDescriptor google__type__phone_number__short_code__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_google_2ftype_2fphone_5fnumber_2eproto__INCLUDED */
