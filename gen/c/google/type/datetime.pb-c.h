/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: google/type/datetime.proto */

#ifndef PROTOBUF_C_google_2ftype_2fdatetime_2eproto__INCLUDED
#define PROTOBUF_C_google_2ftype_2fdatetime_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/duration.pb-c.h"

typedef struct _Google__Type__DateTime Google__Type__DateTime;
typedef struct _Google__Type__TimeZone Google__Type__TimeZone;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  GOOGLE__TYPE__DATE_TIME__TIME_OFFSET__NOT_SET = 0,
  GOOGLE__TYPE__DATE_TIME__TIME_OFFSET_UTC_OFFSET = 8,
  GOOGLE__TYPE__DATE_TIME__TIME_OFFSET_TIME_ZONE = 9
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__TYPE__DATE_TIME__TIME_OFFSET)
} Google__Type__DateTime__TimeOffsetCase;

/*
 * Represents civil time (or occasionally physical time).
 * This type can represent a civil time in one of a few possible ways:
 *  * When utc_offset is set and time_zone is unset: a civil time on a calendar
 *    day with a particular offset from UTC.
 *  * When time_zone is set and utc_offset is unset: a civil time on a calendar
 *    day in a particular time zone.
 *  * When neither time_zone nor utc_offset is set: a civil time on a calendar
 *    day in local time.
 * The date is relative to the Proleptic Gregorian Calendar.
 * If year is 0, the DateTime is considered not to have a specific year. month
 * and day must have valid, non-zero values.
 * This type may also be used to represent a physical time if all the date and
 * time fields are set and either case of the `time_offset` oneof is set.
 * Consider using `Timestamp` message for physical time instead. If your use
 * case also would like to store the user's timezone, that can be done in
 * another field.
 * This type is more flexible than some applications may want. Make sure to
 * document and validate your application's limitations.
 */
struct  _Google__Type__DateTime
{
  ProtobufCMessage base;
  /*
   * Optional. Year of date. Must be from 1 to 9999, or 0 if specifying a
   * datetime without a year.
   */
  int32_t year;
  /*
   * Required. Month of year. Must be from 1 to 12.
   */
  int32_t month;
  /*
   * Required. Day of month. Must be from 1 to 31 and valid for the year and
   * month.
   */
  int32_t day;
  /*
   * Required. Hours of day in 24 hour format. Should be from 0 to 23. An API
   * may choose to allow the value "24:00:00" for scenarios like business
   * closing time.
   */
  int32_t hours;
  /*
   * Required. Minutes of hour of day. Must be from 0 to 59.
   */
  int32_t minutes;
  /*
   * Required. Seconds of minutes of the time. Must normally be from 0 to 59. An
   * API may allow the value 60 if it allows leap-seconds.
   */
  int32_t seconds;
  /*
   * Required. Fractions of seconds in nanoseconds. Must be from 0 to
   * 999,999,999.
   */
  int32_t nanos;
  Google__Type__DateTime__TimeOffsetCase time_offset_case;
  union {
    /*
     * UTC offset. Must be whole seconds, between -18 hours and +18 hours.
     * For example, a UTC offset of -4:00 would be represented as
     * { seconds: -14400 }.
     */
    Google__Protobuf__Duration *utc_offset;
    /*
     * Time zone.
     */
    Google__Type__TimeZone *time_zone;
  };
};
#define GOOGLE__TYPE__DATE_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__type__date_time__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, GOOGLE__TYPE__DATE_TIME__TIME_OFFSET__NOT_SET, {0} }


/*
 * Represents a time zone from the
 * [IANA Time Zone Database](https://www.iana.org/time-zones).
 */
struct  _Google__Type__TimeZone
{
  ProtobufCMessage base;
  /*
   * IANA Time Zone Database time zone, e.g. "America/New_York".
   */
  char *id;
  /*
   * Optional. IANA Time Zone Database version number, e.g. "2019a".
   */
  char *version;
};
#define GOOGLE__TYPE__TIME_ZONE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__type__time_zone__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Google__Type__DateTime methods */
void   google__type__date_time__init
                     (Google__Type__DateTime         *message);
size_t google__type__date_time__get_packed_size
                     (const Google__Type__DateTime   *message);
size_t google__type__date_time__pack
                     (const Google__Type__DateTime   *message,
                      uint8_t             *out);
size_t google__type__date_time__pack_to_buffer
                     (const Google__Type__DateTime   *message,
                      ProtobufCBuffer     *buffer);
Google__Type__DateTime *
       google__type__date_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__type__date_time__free_unpacked
                     (Google__Type__DateTime *message,
                      ProtobufCAllocator *allocator);
/* Google__Type__TimeZone methods */
void   google__type__time_zone__init
                     (Google__Type__TimeZone         *message);
size_t google__type__time_zone__get_packed_size
                     (const Google__Type__TimeZone   *message);
size_t google__type__time_zone__pack
                     (const Google__Type__TimeZone   *message,
                      uint8_t             *out);
size_t google__type__time_zone__pack_to_buffer
                     (const Google__Type__TimeZone   *message,
                      ProtobufCBuffer     *buffer);
Google__Type__TimeZone *
       google__type__time_zone__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__type__time_zone__free_unpacked
                     (Google__Type__TimeZone *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Google__Type__DateTime_Closure)
                 (const Google__Type__DateTime *message,
                  void *closure_data);
typedef void (*Google__Type__TimeZone_Closure)
                 (const Google__Type__TimeZone *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor google__type__date_time__descriptor;
extern const ProtobufCMessageDescriptor google__type__time_zone__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_google_2ftype_2fdatetime_2eproto__INCLUDED */
