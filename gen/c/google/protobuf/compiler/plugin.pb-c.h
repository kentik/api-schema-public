/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: google/protobuf/compiler/plugin.proto */

#ifndef PROTOBUF_C_google_2fprotobuf_2fcompiler_2fplugin_2eproto__INCLUDED
#define PROTOBUF_C_google_2fprotobuf_2fcompiler_2fplugin_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/descriptor.pb-c.h"

typedef struct _Google__Protobuf__Compiler__Version Google__Protobuf__Compiler__Version;
typedef struct _Google__Protobuf__Compiler__CodeGeneratorRequest Google__Protobuf__Compiler__CodeGeneratorRequest;
typedef struct _Google__Protobuf__Compiler__CodeGeneratorResponse Google__Protobuf__Compiler__CodeGeneratorResponse;
typedef struct _Google__Protobuf__Compiler__CodeGeneratorResponse__File Google__Protobuf__Compiler__CodeGeneratorResponse__File;


/* --- enums --- */

/*
 * Sync with code_generator.h.
 */
typedef enum _Google__Protobuf__Compiler__CodeGeneratorResponse__Feature {
  GOOGLE__PROTOBUF__COMPILER__CODE_GENERATOR_RESPONSE__FEATURE__FEATURE_NONE = 0,
  GOOGLE__PROTOBUF__COMPILER__CODE_GENERATOR_RESPONSE__FEATURE__FEATURE_PROTO3_OPTIONAL = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__PROTOBUF__COMPILER__CODE_GENERATOR_RESPONSE__FEATURE)
} Google__Protobuf__Compiler__CodeGeneratorResponse__Feature;

/* --- messages --- */

/*
 * The version number of protocol compiler.
 */
struct  _Google__Protobuf__Compiler__Version
{
  ProtobufCMessage base;
  protobuf_c_boolean has_major;
  int32_t major;
  protobuf_c_boolean has_minor;
  int32_t minor;
  protobuf_c_boolean has_patch;
  int32_t patch;
  /*
   * A suffix for alpha, beta or rc release, e.g., "alpha-1", "rc2". It should
   * be empty for mainline stable releases.
   */
  char *suffix;
};
#define GOOGLE__PROTOBUF__COMPILER__VERSION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__protobuf__compiler__version__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL }


/*
 * An encoded CodeGeneratorRequest is written to the plugin's stdin.
 */
struct  _Google__Protobuf__Compiler__CodeGeneratorRequest
{
  ProtobufCMessage base;
  /*
   * The .proto files that were explicitly listed on the command-line.  The
   * code generator should generate code only for these files.  Each file's
   * descriptor will be included in proto_file, below.
   */
  size_t n_file_to_generate;
  char **file_to_generate;
  /*
   * The generator parameter passed on the command-line.
   */
  char *parameter;
  /*
   * FileDescriptorProtos for all files in files_to_generate and everything
   * they import.  The files will appear in topological order, so each file
   * appears before any file that imports it.
   * protoc guarantees that all proto_files will be written after
   * the fields above, even though this is not technically guaranteed by the
   * protobuf wire format.  This theoretically could allow a plugin to stream
   * in the FileDescriptorProtos and handle them one by one rather than read
   * the entire set into memory at once.  However, as of this writing, this
   * is not similarly optimized on protoc's end -- it will store all fields in
   * memory at once before sending them to the plugin.
   * Type names of fields and extensions in the FileDescriptorProto are always
   * fully qualified.
   */
  size_t n_proto_file;
  Google__Protobuf__FileDescriptorProto **proto_file;
  /*
   * The version number of protocol compiler.
   */
  Google__Protobuf__Compiler__Version *compiler_version;
};
#define GOOGLE__PROTOBUF__COMPILER__CODE_GENERATOR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__protobuf__compiler__code_generator_request__descriptor) \
    , 0,NULL, NULL, 0,NULL, NULL }


/*
 * Represents a single generated file.
 */
struct  _Google__Protobuf__Compiler__CodeGeneratorResponse__File
{
  ProtobufCMessage base;
  /*
   * The file name, relative to the output directory.  The name must not
   * contain "." or ".." components and must be relative, not be absolute (so,
   * the file cannot lie outside the output directory).  "/" must be used as
   * the path separator, not "\".
   * If the name is omitted, the content will be appended to the previous
   * file.  This allows the generator to break large files into small chunks,
   * and allows the generated text to be streamed back to protoc so that large
   * files need not reside completely in memory at one time.  Note that as of
   * this writing protoc does not optimize for this -- it will read the entire
   * CodeGeneratorResponse before writing files to disk.
   */
  char *name;
  /*
   * If non-empty, indicates that the named file should already exist, and the
   * content here is to be inserted into that file at a defined insertion
   * point.  This feature allows a code generator to extend the output
   * produced by another code generator.  The original generator may provide
   * insertion points by placing special annotations in the file that look
   * like:
   *   @@protoc_insertion_point(NAME)
   * The annotation can have arbitrary text before and after it on the line,
   * which allows it to be placed in a comment.  NAME should be replaced with
   * an identifier naming the point -- this is what other generators will use
   * as the insertion_point.  Code inserted at this point will be placed
   * immediately above the line containing the insertion point (thus multiple
   * insertions to the same point will come out in the order they were added).
   * The double-@ is intended to make it unlikely that the generated code
   * could contain things that look like insertion points by accident.
   * For example, the C++ code generator places the following line in the
   * .pb.h files that it generates:
   *   // @@protoc_insertion_point(namespace_scope)
   * This line appears within the scope of the file's package namespace, but
   * outside of any particular class.  Another plugin can then specify the
   * insertion_point "namespace_scope" to generate additional classes or
   * other declarations that should be placed in this scope.
   * Note that if the line containing the insertion point begins with
   * whitespace, the same whitespace will be added to every line of the
   * inserted text.  This is useful for languages like Python, where
   * indentation matters.  In these languages, the insertion point comment
   * should be indented the same amount as any inserted code will need to be
   * in order to work correctly in that context.
   * The code generator that generates the initial file and the one which
   * inserts into it must both run as part of a single invocation of protoc.
   * Code generators are executed in the order in which they appear on the
   * command line.
   * If |insertion_point| is present, |name| must also be present.
   */
  char *insertion_point;
  /*
   * The file contents.
   */
  char *content;
  /*
   * Information describing the file content being inserted. If an insertion
   * point is used, this information will be appropriately offset and inserted
   * into the code generation metadata for the generated files.
   */
  Google__Protobuf__GeneratedCodeInfo *generated_code_info;
};
#define GOOGLE__PROTOBUF__COMPILER__CODE_GENERATOR_RESPONSE__FILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__protobuf__compiler__code_generator_response__file__descriptor) \
    , NULL, NULL, NULL, NULL }


/*
 * The plugin writes an encoded CodeGeneratorResponse to stdout.
 */
struct  _Google__Protobuf__Compiler__CodeGeneratorResponse
{
  ProtobufCMessage base;
  /*
   * Error message.  If non-empty, code generation failed.  The plugin process
   * should exit with status code zero even if it reports an error in this way.
   * This should be used to indicate errors in .proto files which prevent the
   * code generator from generating correct code.  Errors which indicate a
   * problem in protoc itself -- such as the input CodeGeneratorRequest being
   * unparseable -- should be reported by writing a message to stderr and
   * exiting with a non-zero status code.
   */
  char *error;
  /*
   * A bitmask of supported features that the code generator supports.
   * This is a bitwise "or" of values from the Feature enum.
   */
  protobuf_c_boolean has_supported_features;
  uint64_t supported_features;
  size_t n_file;
  Google__Protobuf__Compiler__CodeGeneratorResponse__File **file;
};
#define GOOGLE__PROTOBUF__COMPILER__CODE_GENERATOR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__protobuf__compiler__code_generator_response__descriptor) \
    , NULL, 0, 0, 0,NULL }


/* Google__Protobuf__Compiler__Version methods */
void   google__protobuf__compiler__version__init
                     (Google__Protobuf__Compiler__Version         *message);
size_t google__protobuf__compiler__version__get_packed_size
                     (const Google__Protobuf__Compiler__Version   *message);
size_t google__protobuf__compiler__version__pack
                     (const Google__Protobuf__Compiler__Version   *message,
                      uint8_t             *out);
size_t google__protobuf__compiler__version__pack_to_buffer
                     (const Google__Protobuf__Compiler__Version   *message,
                      ProtobufCBuffer     *buffer);
Google__Protobuf__Compiler__Version *
       google__protobuf__compiler__version__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__protobuf__compiler__version__free_unpacked
                     (Google__Protobuf__Compiler__Version *message,
                      ProtobufCAllocator *allocator);
/* Google__Protobuf__Compiler__CodeGeneratorRequest methods */
void   google__protobuf__compiler__code_generator_request__init
                     (Google__Protobuf__Compiler__CodeGeneratorRequest         *message);
size_t google__protobuf__compiler__code_generator_request__get_packed_size
                     (const Google__Protobuf__Compiler__CodeGeneratorRequest   *message);
size_t google__protobuf__compiler__code_generator_request__pack
                     (const Google__Protobuf__Compiler__CodeGeneratorRequest   *message,
                      uint8_t             *out);
size_t google__protobuf__compiler__code_generator_request__pack_to_buffer
                     (const Google__Protobuf__Compiler__CodeGeneratorRequest   *message,
                      ProtobufCBuffer     *buffer);
Google__Protobuf__Compiler__CodeGeneratorRequest *
       google__protobuf__compiler__code_generator_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__protobuf__compiler__code_generator_request__free_unpacked
                     (Google__Protobuf__Compiler__CodeGeneratorRequest *message,
                      ProtobufCAllocator *allocator);
/* Google__Protobuf__Compiler__CodeGeneratorResponse__File methods */
void   google__protobuf__compiler__code_generator_response__file__init
                     (Google__Protobuf__Compiler__CodeGeneratorResponse__File         *message);
/* Google__Protobuf__Compiler__CodeGeneratorResponse methods */
void   google__protobuf__compiler__code_generator_response__init
                     (Google__Protobuf__Compiler__CodeGeneratorResponse         *message);
size_t google__protobuf__compiler__code_generator_response__get_packed_size
                     (const Google__Protobuf__Compiler__CodeGeneratorResponse   *message);
size_t google__protobuf__compiler__code_generator_response__pack
                     (const Google__Protobuf__Compiler__CodeGeneratorResponse   *message,
                      uint8_t             *out);
size_t google__protobuf__compiler__code_generator_response__pack_to_buffer
                     (const Google__Protobuf__Compiler__CodeGeneratorResponse   *message,
                      ProtobufCBuffer     *buffer);
Google__Protobuf__Compiler__CodeGeneratorResponse *
       google__protobuf__compiler__code_generator_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__protobuf__compiler__code_generator_response__free_unpacked
                     (Google__Protobuf__Compiler__CodeGeneratorResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Google__Protobuf__Compiler__Version_Closure)
                 (const Google__Protobuf__Compiler__Version *message,
                  void *closure_data);
typedef void (*Google__Protobuf__Compiler__CodeGeneratorRequest_Closure)
                 (const Google__Protobuf__Compiler__CodeGeneratorRequest *message,
                  void *closure_data);
typedef void (*Google__Protobuf__Compiler__CodeGeneratorResponse__File_Closure)
                 (const Google__Protobuf__Compiler__CodeGeneratorResponse__File *message,
                  void *closure_data);
typedef void (*Google__Protobuf__Compiler__CodeGeneratorResponse_Closure)
                 (const Google__Protobuf__Compiler__CodeGeneratorResponse *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor google__protobuf__compiler__version__descriptor;
extern const ProtobufCMessageDescriptor google__protobuf__compiler__code_generator_request__descriptor;
extern const ProtobufCMessageDescriptor google__protobuf__compiler__code_generator_response__descriptor;
extern const ProtobufCMessageDescriptor google__protobuf__compiler__code_generator_response__file__descriptor;
extern const ProtobufCEnumDescriptor    google__protobuf__compiler__code_generator_response__feature__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_google_2fprotobuf_2fcompiler_2fplugin_2eproto__INCLUDED */
