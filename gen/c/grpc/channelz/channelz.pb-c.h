/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: grpc/channelz/channelz.proto */

#ifndef PROTOBUF_C_grpc_2fchannelz_2fchannelz_2eproto__INCLUDED
#define PROTOBUF_C_grpc_2fchannelz_2fchannelz_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "google/protobuf/any.pb-c.h"
#include "google/protobuf/duration.pb-c.h"
#include "google/protobuf/timestamp.pb-c.h"
#include "google/protobuf/wrappers.pb-c.h"

typedef struct _Grpc__Channelz__V1__Channel Grpc__Channelz__V1__Channel;
typedef struct _Grpc__Channelz__V1__Subchannel Grpc__Channelz__V1__Subchannel;
typedef struct _Grpc__Channelz__V1__ChannelConnectivityState Grpc__Channelz__V1__ChannelConnectivityState;
typedef struct _Grpc__Channelz__V1__ChannelData Grpc__Channelz__V1__ChannelData;
typedef struct _Grpc__Channelz__V1__ChannelTraceEvent Grpc__Channelz__V1__ChannelTraceEvent;
typedef struct _Grpc__Channelz__V1__ChannelTrace Grpc__Channelz__V1__ChannelTrace;
typedef struct _Grpc__Channelz__V1__ChannelRef Grpc__Channelz__V1__ChannelRef;
typedef struct _Grpc__Channelz__V1__SubchannelRef Grpc__Channelz__V1__SubchannelRef;
typedef struct _Grpc__Channelz__V1__SocketRef Grpc__Channelz__V1__SocketRef;
typedef struct _Grpc__Channelz__V1__ServerRef Grpc__Channelz__V1__ServerRef;
typedef struct _Grpc__Channelz__V1__Server Grpc__Channelz__V1__Server;
typedef struct _Grpc__Channelz__V1__ServerData Grpc__Channelz__V1__ServerData;
typedef struct _Grpc__Channelz__V1__Socket Grpc__Channelz__V1__Socket;
typedef struct _Grpc__Channelz__V1__SocketData Grpc__Channelz__V1__SocketData;
typedef struct _Grpc__Channelz__V1__Address Grpc__Channelz__V1__Address;
typedef struct _Grpc__Channelz__V1__Address__TcpIpAddress Grpc__Channelz__V1__Address__TcpIpAddress;
typedef struct _Grpc__Channelz__V1__Address__UdsAddress Grpc__Channelz__V1__Address__UdsAddress;
typedef struct _Grpc__Channelz__V1__Address__OtherAddress Grpc__Channelz__V1__Address__OtherAddress;
typedef struct _Grpc__Channelz__V1__Security Grpc__Channelz__V1__Security;
typedef struct _Grpc__Channelz__V1__Security__Tls Grpc__Channelz__V1__Security__Tls;
typedef struct _Grpc__Channelz__V1__Security__OtherSecurity Grpc__Channelz__V1__Security__OtherSecurity;
typedef struct _Grpc__Channelz__V1__SocketOption Grpc__Channelz__V1__SocketOption;
typedef struct _Grpc__Channelz__V1__SocketOptionTimeout Grpc__Channelz__V1__SocketOptionTimeout;
typedef struct _Grpc__Channelz__V1__SocketOptionLinger Grpc__Channelz__V1__SocketOptionLinger;
typedef struct _Grpc__Channelz__V1__SocketOptionTcpInfo Grpc__Channelz__V1__SocketOptionTcpInfo;
typedef struct _Grpc__Channelz__V1__GetTopChannelsRequest Grpc__Channelz__V1__GetTopChannelsRequest;
typedef struct _Grpc__Channelz__V1__GetTopChannelsResponse Grpc__Channelz__V1__GetTopChannelsResponse;
typedef struct _Grpc__Channelz__V1__GetServersRequest Grpc__Channelz__V1__GetServersRequest;
typedef struct _Grpc__Channelz__V1__GetServersResponse Grpc__Channelz__V1__GetServersResponse;
typedef struct _Grpc__Channelz__V1__GetServerRequest Grpc__Channelz__V1__GetServerRequest;
typedef struct _Grpc__Channelz__V1__GetServerResponse Grpc__Channelz__V1__GetServerResponse;
typedef struct _Grpc__Channelz__V1__GetServerSocketsRequest Grpc__Channelz__V1__GetServerSocketsRequest;
typedef struct _Grpc__Channelz__V1__GetServerSocketsResponse Grpc__Channelz__V1__GetServerSocketsResponse;
typedef struct _Grpc__Channelz__V1__GetChannelRequest Grpc__Channelz__V1__GetChannelRequest;
typedef struct _Grpc__Channelz__V1__GetChannelResponse Grpc__Channelz__V1__GetChannelResponse;
typedef struct _Grpc__Channelz__V1__GetSubchannelRequest Grpc__Channelz__V1__GetSubchannelRequest;
typedef struct _Grpc__Channelz__V1__GetSubchannelResponse Grpc__Channelz__V1__GetSubchannelResponse;
typedef struct _Grpc__Channelz__V1__GetSocketRequest Grpc__Channelz__V1__GetSocketRequest;
typedef struct _Grpc__Channelz__V1__GetSocketResponse Grpc__Channelz__V1__GetSocketResponse;


/* --- enums --- */

typedef enum _Grpc__Channelz__V1__ChannelConnectivityState__State {
  GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__STATE__UNKNOWN = 0,
  GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__STATE__IDLE = 1,
  GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__STATE__CONNECTING = 2,
  GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__STATE__READY = 3,
  GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__STATE__TRANSIENT_FAILURE = 4,
  GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__STATE__SHUTDOWN = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__STATE)
} Grpc__Channelz__V1__ChannelConnectivityState__State;
/*
 * The supported severity levels of trace events.
 */
typedef enum _Grpc__Channelz__V1__ChannelTraceEvent__Severity {
  GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__SEVERITY__CT_UNKNOWN = 0,
  GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__SEVERITY__CT_INFO = 1,
  GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__SEVERITY__CT_WARNING = 2,
  GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__SEVERITY__CT_ERROR = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__SEVERITY)
} Grpc__Channelz__V1__ChannelTraceEvent__Severity;

/* --- messages --- */

/*
 * Channel is a logical grouping of channels, subchannels, and sockets.
 */
struct  _Grpc__Channelz__V1__Channel
{
  ProtobufCMessage base;
  /*
   * The identifier for this channel. This should be set.
   */
  Grpc__Channelz__V1__ChannelRef *ref;
  /*
   * Data specific to this channel.
   */
  /*
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   */
  Grpc__Channelz__V1__ChannelData *data;
  /*
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   */
  size_t n_channel_ref;
  Grpc__Channelz__V1__ChannelRef **channel_ref;
  /*
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   */
  size_t n_subchannel_ref;
  Grpc__Channelz__V1__SubchannelRef **subchannel_ref;
  /*
   * There are no ordering guarantees on the order of sockets.
   */
  size_t n_socket_ref;
  Grpc__Channelz__V1__SocketRef **socket_ref;
};
#define GRPC__CHANNELZ__V1__CHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__channel__descriptor) \
    , NULL, NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * Subchannel is a logical grouping of channels, subchannels, and sockets.
 * A subchannel is load balanced over by it's ancestor
 */
struct  _Grpc__Channelz__V1__Subchannel
{
  ProtobufCMessage base;
  /*
   * The identifier for this channel.
   */
  Grpc__Channelz__V1__SubchannelRef *ref;
  /*
   * Data specific to this channel.
   */
  /*
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   */
  Grpc__Channelz__V1__ChannelData *data;
  /*
   * There are no ordering guarantees on the order of channel refs.
   * There may not be cycles in the ref graph.
   * A channel ref may be present in more than one channel or subchannel.
   */
  size_t n_channel_ref;
  Grpc__Channelz__V1__ChannelRef **channel_ref;
  /*
   * At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
   * There are no ordering guarantees on the order of subchannel refs.
   * There may not be cycles in the ref graph.
   * A sub channel ref may be present in more than one channel or subchannel.
   */
  size_t n_subchannel_ref;
  Grpc__Channelz__V1__SubchannelRef **subchannel_ref;
  /*
   * There are no ordering guarantees on the order of sockets.
   */
  size_t n_socket_ref;
  Grpc__Channelz__V1__SocketRef **socket_ref;
};
#define GRPC__CHANNELZ__V1__SUBCHANNEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__subchannel__descriptor) \
    , NULL, NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * These come from the specified states in this document:
 * https://github.com/grpc/grpc/blob/master/doc/connectivity-semantics-and-api.md
 */
struct  _Grpc__Channelz__V1__ChannelConnectivityState
{
  ProtobufCMessage base;
  Grpc__Channelz__V1__ChannelConnectivityState__State state;
};
#define GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__channel_connectivity_state__descriptor) \
    , GRPC__CHANNELZ__V1__CHANNEL_CONNECTIVITY_STATE__STATE__UNKNOWN }


/*
 * Channel data is data related to a specific Channel or Subchannel.
 */
struct  _Grpc__Channelz__V1__ChannelData
{
  ProtobufCMessage base;
  /*
   * The connectivity state of the channel or subchannel.  Implementations
   * should always set this.
   */
  Grpc__Channelz__V1__ChannelConnectivityState *state;
  /*
   * The target this channel originally tried to connect to.  May be absent
   */
  char *target;
  /*
   * A trace of recent events on the channel.  May be absent.
   */
  Grpc__Channelz__V1__ChannelTrace *trace;
  /*
   * The number of calls started on the channel
   */
  int64_t calls_started;
  /*
   * The number of calls that have completed with an OK status
   */
  int64_t calls_succeeded;
  /*
   * The number of calls that have completed with a non-OK status
   */
  int64_t calls_failed;
  /*
   * The last time a call was started on the channel.
   */
  Google__Protobuf__Timestamp *last_call_started_timestamp;
};
#define GRPC__CHANNELZ__V1__CHANNEL_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__channel_data__descriptor) \
    , NULL, (char *)protobuf_c_empty_string, NULL, 0, 0, 0, NULL }


typedef enum {
  GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__CHILD_REF__NOT_SET = 0,
  GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__CHILD_REF_CHANNEL_REF = 4,
  GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__CHILD_REF_SUBCHANNEL_REF = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__CHILD_REF)
} Grpc__Channelz__V1__ChannelTraceEvent__ChildRefCase;

/*
 * A trace event is an interesting thing that happened to a channel or
 * subchannel, such as creation, address resolution, subchannel creation, etc.
 */
struct  _Grpc__Channelz__V1__ChannelTraceEvent
{
  ProtobufCMessage base;
  /*
   * High level description of the event.
   */
  char *description;
  /*
   * the severity of the trace event
   */
  Grpc__Channelz__V1__ChannelTraceEvent__Severity severity;
  /*
   * When this event occurred.
   */
  Google__Protobuf__Timestamp *timestamp;
  Grpc__Channelz__V1__ChannelTraceEvent__ChildRefCase child_ref_case;
  union {
    Grpc__Channelz__V1__ChannelRef *channel_ref;
    Grpc__Channelz__V1__SubchannelRef *subchannel_ref;
  };
};
#define GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__channel_trace_event__descriptor) \
    , (char *)protobuf_c_empty_string, GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__SEVERITY__CT_UNKNOWN, NULL, GRPC__CHANNELZ__V1__CHANNEL_TRACE_EVENT__CHILD_REF__NOT_SET, {0} }


/*
 * ChannelTrace represents the recent events that have occurred on the channel.
 */
struct  _Grpc__Channelz__V1__ChannelTrace
{
  ProtobufCMessage base;
  /*
   * Number of events ever logged in this tracing object. This can differ from
   * events.size() because events can be overwritten or garbage collected by
   * implementations.
   */
  int64_t num_events_logged;
  /*
   * Time that this channel was created.
   */
  Google__Protobuf__Timestamp *creation_timestamp;
  /*
   * List of events that have occurred on this channel.
   */
  size_t n_events;
  Grpc__Channelz__V1__ChannelTraceEvent **events;
};
#define GRPC__CHANNELZ__V1__CHANNEL_TRACE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__channel_trace__descriptor) \
    , 0, NULL, 0,NULL }


/*
 * ChannelRef is a reference to a Channel.
 */
struct  _Grpc__Channelz__V1__ChannelRef
{
  ProtobufCMessage base;
  /*
   * The globally unique id for this channel.  Must be a positive number.
   */
  int64_t channel_id;
  /*
   * An optional name associated with the channel.
   */
  char *name;
};
#define GRPC__CHANNELZ__V1__CHANNEL_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__channel_ref__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


/*
 * SubchannelRef is a reference to a Subchannel.
 */
struct  _Grpc__Channelz__V1__SubchannelRef
{
  ProtobufCMessage base;
  /*
   * The globally unique id for this subchannel.  Must be a positive number.
   */
  int64_t subchannel_id;
  /*
   * An optional name associated with the subchannel.
   */
  char *name;
};
#define GRPC__CHANNELZ__V1__SUBCHANNEL_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__subchannel_ref__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


/*
 * SocketRef is a reference to a Socket.
 */
struct  _Grpc__Channelz__V1__SocketRef
{
  ProtobufCMessage base;
  /*
   * The globally unique id for this socket.  Must be a positive number.
   */
  int64_t socket_id;
  /*
   * An optional name associated with the socket.
   */
  char *name;
};
#define GRPC__CHANNELZ__V1__SOCKET_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__socket_ref__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


/*
 * ServerRef is a reference to a Server.
 */
struct  _Grpc__Channelz__V1__ServerRef
{
  ProtobufCMessage base;
  /*
   * A globally unique identifier for this server.  Must be a positive number.
   */
  int64_t server_id;
  /*
   * An optional name associated with the server.
   */
  char *name;
};
#define GRPC__CHANNELZ__V1__SERVER_REF__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__server_ref__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


/*
 * Server represents a single server.  There may be multiple servers in a single
 * program.
 */
struct  _Grpc__Channelz__V1__Server
{
  ProtobufCMessage base;
  /*
   * The identifier for a Server.  This should be set.
   */
  Grpc__Channelz__V1__ServerRef *ref;
  /*
   * The associated data of the Server.
   */
  Grpc__Channelz__V1__ServerData *data;
  /*
   * The sockets that the server is listening on.  There are no ordering
   * guarantees.  This may be absent.
   */
  size_t n_listen_socket;
  Grpc__Channelz__V1__SocketRef **listen_socket;
};
#define GRPC__CHANNELZ__V1__SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__server__descriptor) \
    , NULL, NULL, 0,NULL }


/*
 * ServerData is data for a specific Server.
 */
struct  _Grpc__Channelz__V1__ServerData
{
  ProtobufCMessage base;
  /*
   * A trace of recent events on the server.  May be absent.
   */
  Grpc__Channelz__V1__ChannelTrace *trace;
  /*
   * The number of incoming calls started on the server
   */
  int64_t calls_started;
  /*
   * The number of incoming calls that have completed with an OK status
   */
  int64_t calls_succeeded;
  /*
   * The number of incoming calls that have a completed with a non-OK status
   */
  int64_t calls_failed;
  /*
   * The last time a call was started on the server.
   */
  Google__Protobuf__Timestamp *last_call_started_timestamp;
};
#define GRPC__CHANNELZ__V1__SERVER_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__server_data__descriptor) \
    , NULL, 0, 0, 0, NULL }


/*
 * Information about an actual connection.  Pronounced "sock-ay".
 */
struct  _Grpc__Channelz__V1__Socket
{
  ProtobufCMessage base;
  /*
   * The identifier for the Socket.
   */
  Grpc__Channelz__V1__SocketRef *ref;
  /*
   * Data specific to this Socket.
   */
  Grpc__Channelz__V1__SocketData *data;
  /*
   * The locally bound address.
   */
  Grpc__Channelz__V1__Address *local;
  /*
   * The remote bound address.  May be absent.
   */
  Grpc__Channelz__V1__Address *remote;
  /*
   * Security details for this socket.  May be absent if not available, or
   * there is no security on the socket.
   */
  Grpc__Channelz__V1__Security *security;
  /*
   * Optional, represents the name of the remote endpoint, if different than
   * the original target name.
   */
  char *remote_name;
};
#define GRPC__CHANNELZ__V1__SOCKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__socket__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, (char *)protobuf_c_empty_string }


/*
 * SocketData is data associated for a specific Socket.  The fields present
 * are specific to the implementation, so there may be minor differences in
 * the semantics.  (e.g. flow control windows)
 */
struct  _Grpc__Channelz__V1__SocketData
{
  ProtobufCMessage base;
  /*
   * The number of streams that have been started.
   */
  int64_t streams_started;
  /*
   * The number of streams that have ended successfully:
   * On client side, received frame with eos bit set;
   * On server side, sent frame with eos bit set.
   */
  int64_t streams_succeeded;
  /*
   * The number of streams that have ended unsuccessfully:
   * On client side, ended without receiving frame with eos bit set;
   * On server side, ended without sending frame with eos bit set.
   */
  int64_t streams_failed;
  /*
   * The number of grpc messages successfully sent on this socket.
   */
  int64_t messages_sent;
  /*
   * The number of grpc messages received on this socket.
   */
  int64_t messages_received;
  /*
   * The number of keep alives sent.  This is typically implemented with HTTP/2
   * ping messages.
   */
  int64_t keep_alives_sent;
  /*
   * The last time a stream was created by this endpoint.  Usually unset for
   * servers.
   */
  Google__Protobuf__Timestamp *last_local_stream_created_timestamp;
  /*
   * The last time a stream was created by the remote endpoint.  Usually unset
   * for clients.
   */
  Google__Protobuf__Timestamp *last_remote_stream_created_timestamp;
  /*
   * The last time a message was sent by this endpoint.
   */
  Google__Protobuf__Timestamp *last_message_sent_timestamp;
  /*
   * The last time a message was received by this endpoint.
   */
  Google__Protobuf__Timestamp *last_message_received_timestamp;
  /*
   * The amount of window, granted to the local endpoint by the remote endpoint.
   * This may be slightly out of date due to network latency.  This does NOT
   * include stream level or TCP level flow control info.
   */
  Google__Protobuf__Int64Value *local_flow_control_window;
  /*
   * The amount of window, granted to the remote endpoint by the local endpoint.
   * This may be slightly out of date due to network latency.  This does NOT
   * include stream level or TCP level flow control info.
   */
  Google__Protobuf__Int64Value *remote_flow_control_window;
  /*
   * Socket options set on this socket.  May be absent if 'summary' is set
   * on GetSocketRequest.
   */
  size_t n_option;
  Grpc__Channelz__V1__SocketOption **option;
};
#define GRPC__CHANNELZ__V1__SOCKET_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__socket_data__descriptor) \
    , 0, 0, 0, 0, 0, 0, NULL, NULL, NULL, NULL, NULL, NULL, 0,NULL }


struct  _Grpc__Channelz__V1__Address__TcpIpAddress
{
  ProtobufCMessage base;
  /*
   * Either the IPv4 or IPv6 address in bytes.  Will be either 4 bytes or 16
   * bytes in length.
   */
  ProtobufCBinaryData ip_address;
  /*
   * 0-64k, or -1 if not appropriate.
   */
  int32_t port;
};
#define GRPC__CHANNELZ__V1__ADDRESS__TCP_IP_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__address__tcp_ip_address__descriptor) \
    , {0,NULL}, 0 }


/*
 * A Unix Domain Socket address.
 */
struct  _Grpc__Channelz__V1__Address__UdsAddress
{
  ProtobufCMessage base;
  char *filename;
};
#define GRPC__CHANNELZ__V1__ADDRESS__UDS_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__address__uds_address__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * An address type not included above.
 */
struct  _Grpc__Channelz__V1__Address__OtherAddress
{
  ProtobufCMessage base;
  /*
   * The human readable version of the value.  This value should be set.
   */
  char *name;
  /*
   * The actual address message.
   */
  Google__Protobuf__Any *value;
};
#define GRPC__CHANNELZ__V1__ADDRESS__OTHER_ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__address__other_address__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


typedef enum {
  GRPC__CHANNELZ__V1__ADDRESS__ADDRESS__NOT_SET = 0,
  GRPC__CHANNELZ__V1__ADDRESS__ADDRESS_TCPIP_ADDRESS = 1,
  GRPC__CHANNELZ__V1__ADDRESS__ADDRESS_UDS_ADDRESS = 2,
  GRPC__CHANNELZ__V1__ADDRESS__ADDRESS_OTHER_ADDRESS = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GRPC__CHANNELZ__V1__ADDRESS__ADDRESS)
} Grpc__Channelz__V1__Address__AddressCase;

/*
 * Address represents the address used to create the socket.
 */
struct  _Grpc__Channelz__V1__Address
{
  ProtobufCMessage base;
  Grpc__Channelz__V1__Address__AddressCase address_case;
  union {
    Grpc__Channelz__V1__Address__TcpIpAddress *tcpip_address;
    Grpc__Channelz__V1__Address__UdsAddress *uds_address;
    Grpc__Channelz__V1__Address__OtherAddress *other_address;
  };
};
#define GRPC__CHANNELZ__V1__ADDRESS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__address__descriptor) \
    , GRPC__CHANNELZ__V1__ADDRESS__ADDRESS__NOT_SET, {0} }


typedef enum {
  GRPC__CHANNELZ__V1__SECURITY__TLS__CIPHER_SUITE__NOT_SET = 0,
  GRPC__CHANNELZ__V1__SECURITY__TLS__CIPHER_SUITE_STANDARD_NAME = 1,
  GRPC__CHANNELZ__V1__SECURITY__TLS__CIPHER_SUITE_OTHER_NAME = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GRPC__CHANNELZ__V1__SECURITY__TLS__CIPHER_SUITE)
} Grpc__Channelz__V1__Security__Tls__CipherSuiteCase;

struct  _Grpc__Channelz__V1__Security__Tls
{
  ProtobufCMessage base;
  /*
   * the certificate used by this endpoint.
   */
  ProtobufCBinaryData local_certificate;
  /*
   * the certificate used by the remote endpoint.
   */
  ProtobufCBinaryData remote_certificate;
  Grpc__Channelz__V1__Security__Tls__CipherSuiteCase cipher_suite_case;
  union {
    /*
     * The cipher suite name in the RFC 4346 format:
     * https://tools.ietf.org/html/rfc4346#appendix-C
     */
    char *standard_name;
    /*
     * Some other way to describe the cipher suite if
     * the RFC 4346 name is not available.
     */
    char *other_name;
  };
};
#define GRPC__CHANNELZ__V1__SECURITY__TLS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__security__tls__descriptor) \
    , {0,NULL}, {0,NULL}, GRPC__CHANNELZ__V1__SECURITY__TLS__CIPHER_SUITE__NOT_SET, {0} }


struct  _Grpc__Channelz__V1__Security__OtherSecurity
{
  ProtobufCMessage base;
  /*
   * The human readable version of the value.
   */
  char *name;
  /*
   * The actual security details message.
   */
  Google__Protobuf__Any *value;
};
#define GRPC__CHANNELZ__V1__SECURITY__OTHER_SECURITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__security__other_security__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


typedef enum {
  GRPC__CHANNELZ__V1__SECURITY__MODEL__NOT_SET = 0,
  GRPC__CHANNELZ__V1__SECURITY__MODEL_TLS = 1,
  GRPC__CHANNELZ__V1__SECURITY__MODEL_OTHER = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GRPC__CHANNELZ__V1__SECURITY__MODEL)
} Grpc__Channelz__V1__Security__ModelCase;

/*
 * Security represents details about how secure the socket is.
 */
struct  _Grpc__Channelz__V1__Security
{
  ProtobufCMessage base;
  Grpc__Channelz__V1__Security__ModelCase model_case;
  union {
    Grpc__Channelz__V1__Security__Tls *tls;
    Grpc__Channelz__V1__Security__OtherSecurity *other;
  };
};
#define GRPC__CHANNELZ__V1__SECURITY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__security__descriptor) \
    , GRPC__CHANNELZ__V1__SECURITY__MODEL__NOT_SET, {0} }


/*
 * SocketOption represents socket options for a socket.  Specifically, these
 * are the options returned by getsockopt().
 */
struct  _Grpc__Channelz__V1__SocketOption
{
  ProtobufCMessage base;
  /*
   * The full name of the socket option.  Typically this will be the upper case
   * name, such as "SO_REUSEPORT".
   */
  char *name;
  /*
   * The human readable value of this socket option.  At least one of value or
   * additional will be set.
   */
  char *value;
  /*
   * Additional data associated with the socket option.  At least one of value
   * or additional will be set.
   */
  Google__Protobuf__Any *additional;
};
#define GRPC__CHANNELZ__V1__SOCKET_OPTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__socket_option__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * For use with SocketOption's additional field.  This is primarily used for
 * SO_RCVTIMEO and SO_SNDTIMEO
 */
struct  _Grpc__Channelz__V1__SocketOptionTimeout
{
  ProtobufCMessage base;
  Google__Protobuf__Duration *duration;
};
#define GRPC__CHANNELZ__V1__SOCKET_OPTION_TIMEOUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__socket_option_timeout__descriptor) \
    , NULL }


/*
 * For use with SocketOption's additional field.  This is primarily used for
 * SO_LINGER.
 */
struct  _Grpc__Channelz__V1__SocketOptionLinger
{
  ProtobufCMessage base;
  /*
   * active maps to `struct linger.l_onoff`
   */
  protobuf_c_boolean active;
  /*
   * duration maps to `struct linger.l_linger`
   */
  Google__Protobuf__Duration *duration;
};
#define GRPC__CHANNELZ__V1__SOCKET_OPTION_LINGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__socket_option_linger__descriptor) \
    , 0, NULL }


/*
 * For use with SocketOption's additional field.  Tcp info for
 * SOL_TCP and TCP_INFO.
 */
struct  _Grpc__Channelz__V1__SocketOptionTcpInfo
{
  ProtobufCMessage base;
  uint32_t tcpi_state;
  uint32_t tcpi_ca_state;
  uint32_t tcpi_retransmits;
  uint32_t tcpi_probes;
  uint32_t tcpi_backoff;
  uint32_t tcpi_options;
  uint32_t tcpi_snd_wscale;
  uint32_t tcpi_rcv_wscale;
  uint32_t tcpi_rto;
  uint32_t tcpi_ato;
  uint32_t tcpi_snd_mss;
  uint32_t tcpi_rcv_mss;
  uint32_t tcpi_unacked;
  uint32_t tcpi_sacked;
  uint32_t tcpi_lost;
  uint32_t tcpi_retrans;
  uint32_t tcpi_fackets;
  uint32_t tcpi_last_data_sent;
  uint32_t tcpi_last_ack_sent;
  uint32_t tcpi_last_data_recv;
  uint32_t tcpi_last_ack_recv;
  uint32_t tcpi_pmtu;
  uint32_t tcpi_rcv_ssthresh;
  uint32_t tcpi_rtt;
  uint32_t tcpi_rttvar;
  uint32_t tcpi_snd_ssthresh;
  uint32_t tcpi_snd_cwnd;
  uint32_t tcpi_advmss;
  uint32_t tcpi_reordering;
};
#define GRPC__CHANNELZ__V1__SOCKET_OPTION_TCP_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__socket_option_tcp_info__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _Grpc__Channelz__V1__GetTopChannelsRequest
{
  ProtobufCMessage base;
  /*
   * start_channel_id indicates that only channels at or above this id should be
   * included in the results.
   * To request the first page, this should be set to 0. To request
   * subsequent pages, the client generates this value by adding 1 to
   * the highest seen result ID.
   */
  int64_t start_channel_id;
  /*
   * If non-zero, the server will return a page of results containing
   * at most this many items. If zero, the server will choose a
   * reasonable page size.  Must never be negative.
   */
  int64_t max_results;
};
#define GRPC__CHANNELZ__V1__GET_TOP_CHANNELS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_top_channels_request__descriptor) \
    , 0, 0 }


struct  _Grpc__Channelz__V1__GetTopChannelsResponse
{
  ProtobufCMessage base;
  /*
   * list of channels that the connection detail service knows about.  Sorted in
   * ascending channel_id order.
   * Must contain at least 1 result, otherwise 'end' must be true.
   */
  size_t n_channel;
  Grpc__Channelz__V1__Channel **channel;
  /*
   * If set, indicates that the list of channels is the final list.  Requesting
   * more channels can only return more if they are created after this RPC
   * completes.
   */
  protobuf_c_boolean end;
};
#define GRPC__CHANNELZ__V1__GET_TOP_CHANNELS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_top_channels_response__descriptor) \
    , 0,NULL, 0 }


struct  _Grpc__Channelz__V1__GetServersRequest
{
  ProtobufCMessage base;
  /*
   * start_server_id indicates that only servers at or above this id should be
   * included in the results.
   * To request the first page, this must be set to 0. To request
   * subsequent pages, the client generates this value by adding 1 to
   * the highest seen result ID.
   */
  int64_t start_server_id;
  /*
   * If non-zero, the server will return a page of results containing
   * at most this many items. If zero, the server will choose a
   * reasonable page size.  Must never be negative.
   */
  int64_t max_results;
};
#define GRPC__CHANNELZ__V1__GET_SERVERS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_servers_request__descriptor) \
    , 0, 0 }


struct  _Grpc__Channelz__V1__GetServersResponse
{
  ProtobufCMessage base;
  /*
   * list of servers that the connection detail service knows about.  Sorted in
   * ascending server_id order.
   * Must contain at least 1 result, otherwise 'end' must be true.
   */
  size_t n_server;
  Grpc__Channelz__V1__Server **server;
  /*
   * If set, indicates that the list of servers is the final list.  Requesting
   * more servers will only return more if they are created after this RPC
   * completes.
   */
  protobuf_c_boolean end;
};
#define GRPC__CHANNELZ__V1__GET_SERVERS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_servers_response__descriptor) \
    , 0,NULL, 0 }


struct  _Grpc__Channelz__V1__GetServerRequest
{
  ProtobufCMessage base;
  /*
   * server_id is the identifier of the specific server to get.
   */
  int64_t server_id;
};
#define GRPC__CHANNELZ__V1__GET_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_server_request__descriptor) \
    , 0 }


struct  _Grpc__Channelz__V1__GetServerResponse
{
  ProtobufCMessage base;
  /*
   * The Server that corresponds to the requested server_id.  This field
   * should be set.
   */
  Grpc__Channelz__V1__Server *server;
};
#define GRPC__CHANNELZ__V1__GET_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_server_response__descriptor) \
    , NULL }


struct  _Grpc__Channelz__V1__GetServerSocketsRequest
{
  ProtobufCMessage base;
  int64_t server_id;
  /*
   * start_socket_id indicates that only sockets at or above this id should be
   * included in the results.
   * To request the first page, this must be set to 0. To request
   * subsequent pages, the client generates this value by adding 1 to
   * the highest seen result ID.
   */
  int64_t start_socket_id;
  /*
   * If non-zero, the server will return a page of results containing
   * at most this many items. If zero, the server will choose a
   * reasonable page size.  Must never be negative.
   */
  int64_t max_results;
};
#define GRPC__CHANNELZ__V1__GET_SERVER_SOCKETS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_server_sockets_request__descriptor) \
    , 0, 0, 0 }


struct  _Grpc__Channelz__V1__GetServerSocketsResponse
{
  ProtobufCMessage base;
  /*
   * list of socket refs that the connection detail service knows about.  Sorted in
   * ascending socket_id order.
   * Must contain at least 1 result, otherwise 'end' must be true.
   */
  size_t n_socket_ref;
  Grpc__Channelz__V1__SocketRef **socket_ref;
  /*
   * If set, indicates that the list of sockets is the final list.  Requesting
   * more sockets will only return more if they are created after this RPC
   * completes.
   */
  protobuf_c_boolean end;
};
#define GRPC__CHANNELZ__V1__GET_SERVER_SOCKETS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_server_sockets_response__descriptor) \
    , 0,NULL, 0 }


struct  _Grpc__Channelz__V1__GetChannelRequest
{
  ProtobufCMessage base;
  /*
   * channel_id is the identifier of the specific channel to get.
   */
  int64_t channel_id;
};
#define GRPC__CHANNELZ__V1__GET_CHANNEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_channel_request__descriptor) \
    , 0 }


struct  _Grpc__Channelz__V1__GetChannelResponse
{
  ProtobufCMessage base;
  /*
   * The Channel that corresponds to the requested channel_id.  This field
   * should be set.
   */
  Grpc__Channelz__V1__Channel *channel;
};
#define GRPC__CHANNELZ__V1__GET_CHANNEL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_channel_response__descriptor) \
    , NULL }


struct  _Grpc__Channelz__V1__GetSubchannelRequest
{
  ProtobufCMessage base;
  /*
   * subchannel_id is the identifier of the specific subchannel to get.
   */
  int64_t subchannel_id;
};
#define GRPC__CHANNELZ__V1__GET_SUBCHANNEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_subchannel_request__descriptor) \
    , 0 }


struct  _Grpc__Channelz__V1__GetSubchannelResponse
{
  ProtobufCMessage base;
  /*
   * The Subchannel that corresponds to the requested subchannel_id.  This
   * field should be set.
   */
  Grpc__Channelz__V1__Subchannel *subchannel;
};
#define GRPC__CHANNELZ__V1__GET_SUBCHANNEL_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_subchannel_response__descriptor) \
    , NULL }


struct  _Grpc__Channelz__V1__GetSocketRequest
{
  ProtobufCMessage base;
  /*
   * socket_id is the identifier of the specific socket to get.
   */
  int64_t socket_id;
  /*
   * If true, the response will contain only high level information
   * that is inexpensive to obtain. Fields thay may be omitted are
   * documented.
   */
  protobuf_c_boolean summary;
};
#define GRPC__CHANNELZ__V1__GET_SOCKET_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_socket_request__descriptor) \
    , 0, 0 }


struct  _Grpc__Channelz__V1__GetSocketResponse
{
  ProtobufCMessage base;
  /*
   * The Socket that corresponds to the requested socket_id.  This field
   * should be set.
   */
  Grpc__Channelz__V1__Socket *socket;
};
#define GRPC__CHANNELZ__V1__GET_SOCKET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__channelz__v1__get_socket_response__descriptor) \
    , NULL }


/* Grpc__Channelz__V1__Channel methods */
void   grpc__channelz__v1__channel__init
                     (Grpc__Channelz__V1__Channel         *message);
size_t grpc__channelz__v1__channel__get_packed_size
                     (const Grpc__Channelz__V1__Channel   *message);
size_t grpc__channelz__v1__channel__pack
                     (const Grpc__Channelz__V1__Channel   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__channel__pack_to_buffer
                     (const Grpc__Channelz__V1__Channel   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__Channel *
       grpc__channelz__v1__channel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__channel__free_unpacked
                     (Grpc__Channelz__V1__Channel *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__Subchannel methods */
void   grpc__channelz__v1__subchannel__init
                     (Grpc__Channelz__V1__Subchannel         *message);
size_t grpc__channelz__v1__subchannel__get_packed_size
                     (const Grpc__Channelz__V1__Subchannel   *message);
size_t grpc__channelz__v1__subchannel__pack
                     (const Grpc__Channelz__V1__Subchannel   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__subchannel__pack_to_buffer
                     (const Grpc__Channelz__V1__Subchannel   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__Subchannel *
       grpc__channelz__v1__subchannel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__subchannel__free_unpacked
                     (Grpc__Channelz__V1__Subchannel *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__ChannelConnectivityState methods */
void   grpc__channelz__v1__channel_connectivity_state__init
                     (Grpc__Channelz__V1__ChannelConnectivityState         *message);
size_t grpc__channelz__v1__channel_connectivity_state__get_packed_size
                     (const Grpc__Channelz__V1__ChannelConnectivityState   *message);
size_t grpc__channelz__v1__channel_connectivity_state__pack
                     (const Grpc__Channelz__V1__ChannelConnectivityState   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__channel_connectivity_state__pack_to_buffer
                     (const Grpc__Channelz__V1__ChannelConnectivityState   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__ChannelConnectivityState *
       grpc__channelz__v1__channel_connectivity_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__channel_connectivity_state__free_unpacked
                     (Grpc__Channelz__V1__ChannelConnectivityState *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__ChannelData methods */
void   grpc__channelz__v1__channel_data__init
                     (Grpc__Channelz__V1__ChannelData         *message);
size_t grpc__channelz__v1__channel_data__get_packed_size
                     (const Grpc__Channelz__V1__ChannelData   *message);
size_t grpc__channelz__v1__channel_data__pack
                     (const Grpc__Channelz__V1__ChannelData   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__channel_data__pack_to_buffer
                     (const Grpc__Channelz__V1__ChannelData   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__ChannelData *
       grpc__channelz__v1__channel_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__channel_data__free_unpacked
                     (Grpc__Channelz__V1__ChannelData *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__ChannelTraceEvent methods */
void   grpc__channelz__v1__channel_trace_event__init
                     (Grpc__Channelz__V1__ChannelTraceEvent         *message);
size_t grpc__channelz__v1__channel_trace_event__get_packed_size
                     (const Grpc__Channelz__V1__ChannelTraceEvent   *message);
size_t grpc__channelz__v1__channel_trace_event__pack
                     (const Grpc__Channelz__V1__ChannelTraceEvent   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__channel_trace_event__pack_to_buffer
                     (const Grpc__Channelz__V1__ChannelTraceEvent   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__ChannelTraceEvent *
       grpc__channelz__v1__channel_trace_event__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__channel_trace_event__free_unpacked
                     (Grpc__Channelz__V1__ChannelTraceEvent *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__ChannelTrace methods */
void   grpc__channelz__v1__channel_trace__init
                     (Grpc__Channelz__V1__ChannelTrace         *message);
size_t grpc__channelz__v1__channel_trace__get_packed_size
                     (const Grpc__Channelz__V1__ChannelTrace   *message);
size_t grpc__channelz__v1__channel_trace__pack
                     (const Grpc__Channelz__V1__ChannelTrace   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__channel_trace__pack_to_buffer
                     (const Grpc__Channelz__V1__ChannelTrace   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__ChannelTrace *
       grpc__channelz__v1__channel_trace__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__channel_trace__free_unpacked
                     (Grpc__Channelz__V1__ChannelTrace *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__ChannelRef methods */
void   grpc__channelz__v1__channel_ref__init
                     (Grpc__Channelz__V1__ChannelRef         *message);
size_t grpc__channelz__v1__channel_ref__get_packed_size
                     (const Grpc__Channelz__V1__ChannelRef   *message);
size_t grpc__channelz__v1__channel_ref__pack
                     (const Grpc__Channelz__V1__ChannelRef   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__channel_ref__pack_to_buffer
                     (const Grpc__Channelz__V1__ChannelRef   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__ChannelRef *
       grpc__channelz__v1__channel_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__channel_ref__free_unpacked
                     (Grpc__Channelz__V1__ChannelRef *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__SubchannelRef methods */
void   grpc__channelz__v1__subchannel_ref__init
                     (Grpc__Channelz__V1__SubchannelRef         *message);
size_t grpc__channelz__v1__subchannel_ref__get_packed_size
                     (const Grpc__Channelz__V1__SubchannelRef   *message);
size_t grpc__channelz__v1__subchannel_ref__pack
                     (const Grpc__Channelz__V1__SubchannelRef   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__subchannel_ref__pack_to_buffer
                     (const Grpc__Channelz__V1__SubchannelRef   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__SubchannelRef *
       grpc__channelz__v1__subchannel_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__subchannel_ref__free_unpacked
                     (Grpc__Channelz__V1__SubchannelRef *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__SocketRef methods */
void   grpc__channelz__v1__socket_ref__init
                     (Grpc__Channelz__V1__SocketRef         *message);
size_t grpc__channelz__v1__socket_ref__get_packed_size
                     (const Grpc__Channelz__V1__SocketRef   *message);
size_t grpc__channelz__v1__socket_ref__pack
                     (const Grpc__Channelz__V1__SocketRef   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__socket_ref__pack_to_buffer
                     (const Grpc__Channelz__V1__SocketRef   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__SocketRef *
       grpc__channelz__v1__socket_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__socket_ref__free_unpacked
                     (Grpc__Channelz__V1__SocketRef *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__ServerRef methods */
void   grpc__channelz__v1__server_ref__init
                     (Grpc__Channelz__V1__ServerRef         *message);
size_t grpc__channelz__v1__server_ref__get_packed_size
                     (const Grpc__Channelz__V1__ServerRef   *message);
size_t grpc__channelz__v1__server_ref__pack
                     (const Grpc__Channelz__V1__ServerRef   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__server_ref__pack_to_buffer
                     (const Grpc__Channelz__V1__ServerRef   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__ServerRef *
       grpc__channelz__v1__server_ref__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__server_ref__free_unpacked
                     (Grpc__Channelz__V1__ServerRef *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__Server methods */
void   grpc__channelz__v1__server__init
                     (Grpc__Channelz__V1__Server         *message);
size_t grpc__channelz__v1__server__get_packed_size
                     (const Grpc__Channelz__V1__Server   *message);
size_t grpc__channelz__v1__server__pack
                     (const Grpc__Channelz__V1__Server   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__server__pack_to_buffer
                     (const Grpc__Channelz__V1__Server   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__Server *
       grpc__channelz__v1__server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__server__free_unpacked
                     (Grpc__Channelz__V1__Server *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__ServerData methods */
void   grpc__channelz__v1__server_data__init
                     (Grpc__Channelz__V1__ServerData         *message);
size_t grpc__channelz__v1__server_data__get_packed_size
                     (const Grpc__Channelz__V1__ServerData   *message);
size_t grpc__channelz__v1__server_data__pack
                     (const Grpc__Channelz__V1__ServerData   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__server_data__pack_to_buffer
                     (const Grpc__Channelz__V1__ServerData   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__ServerData *
       grpc__channelz__v1__server_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__server_data__free_unpacked
                     (Grpc__Channelz__V1__ServerData *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__Socket methods */
void   grpc__channelz__v1__socket__init
                     (Grpc__Channelz__V1__Socket         *message);
size_t grpc__channelz__v1__socket__get_packed_size
                     (const Grpc__Channelz__V1__Socket   *message);
size_t grpc__channelz__v1__socket__pack
                     (const Grpc__Channelz__V1__Socket   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__socket__pack_to_buffer
                     (const Grpc__Channelz__V1__Socket   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__Socket *
       grpc__channelz__v1__socket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__socket__free_unpacked
                     (Grpc__Channelz__V1__Socket *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__SocketData methods */
void   grpc__channelz__v1__socket_data__init
                     (Grpc__Channelz__V1__SocketData         *message);
size_t grpc__channelz__v1__socket_data__get_packed_size
                     (const Grpc__Channelz__V1__SocketData   *message);
size_t grpc__channelz__v1__socket_data__pack
                     (const Grpc__Channelz__V1__SocketData   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__socket_data__pack_to_buffer
                     (const Grpc__Channelz__V1__SocketData   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__SocketData *
       grpc__channelz__v1__socket_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__socket_data__free_unpacked
                     (Grpc__Channelz__V1__SocketData *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__Address__TcpIpAddress methods */
void   grpc__channelz__v1__address__tcp_ip_address__init
                     (Grpc__Channelz__V1__Address__TcpIpAddress         *message);
/* Grpc__Channelz__V1__Address__UdsAddress methods */
void   grpc__channelz__v1__address__uds_address__init
                     (Grpc__Channelz__V1__Address__UdsAddress         *message);
/* Grpc__Channelz__V1__Address__OtherAddress methods */
void   grpc__channelz__v1__address__other_address__init
                     (Grpc__Channelz__V1__Address__OtherAddress         *message);
/* Grpc__Channelz__V1__Address methods */
void   grpc__channelz__v1__address__init
                     (Grpc__Channelz__V1__Address         *message);
size_t grpc__channelz__v1__address__get_packed_size
                     (const Grpc__Channelz__V1__Address   *message);
size_t grpc__channelz__v1__address__pack
                     (const Grpc__Channelz__V1__Address   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__address__pack_to_buffer
                     (const Grpc__Channelz__V1__Address   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__Address *
       grpc__channelz__v1__address__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__address__free_unpacked
                     (Grpc__Channelz__V1__Address *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__Security__Tls methods */
void   grpc__channelz__v1__security__tls__init
                     (Grpc__Channelz__V1__Security__Tls         *message);
/* Grpc__Channelz__V1__Security__OtherSecurity methods */
void   grpc__channelz__v1__security__other_security__init
                     (Grpc__Channelz__V1__Security__OtherSecurity         *message);
/* Grpc__Channelz__V1__Security methods */
void   grpc__channelz__v1__security__init
                     (Grpc__Channelz__V1__Security         *message);
size_t grpc__channelz__v1__security__get_packed_size
                     (const Grpc__Channelz__V1__Security   *message);
size_t grpc__channelz__v1__security__pack
                     (const Grpc__Channelz__V1__Security   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__security__pack_to_buffer
                     (const Grpc__Channelz__V1__Security   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__Security *
       grpc__channelz__v1__security__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__security__free_unpacked
                     (Grpc__Channelz__V1__Security *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__SocketOption methods */
void   grpc__channelz__v1__socket_option__init
                     (Grpc__Channelz__V1__SocketOption         *message);
size_t grpc__channelz__v1__socket_option__get_packed_size
                     (const Grpc__Channelz__V1__SocketOption   *message);
size_t grpc__channelz__v1__socket_option__pack
                     (const Grpc__Channelz__V1__SocketOption   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__socket_option__pack_to_buffer
                     (const Grpc__Channelz__V1__SocketOption   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__SocketOption *
       grpc__channelz__v1__socket_option__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__socket_option__free_unpacked
                     (Grpc__Channelz__V1__SocketOption *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__SocketOptionTimeout methods */
void   grpc__channelz__v1__socket_option_timeout__init
                     (Grpc__Channelz__V1__SocketOptionTimeout         *message);
size_t grpc__channelz__v1__socket_option_timeout__get_packed_size
                     (const Grpc__Channelz__V1__SocketOptionTimeout   *message);
size_t grpc__channelz__v1__socket_option_timeout__pack
                     (const Grpc__Channelz__V1__SocketOptionTimeout   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__socket_option_timeout__pack_to_buffer
                     (const Grpc__Channelz__V1__SocketOptionTimeout   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__SocketOptionTimeout *
       grpc__channelz__v1__socket_option_timeout__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__socket_option_timeout__free_unpacked
                     (Grpc__Channelz__V1__SocketOptionTimeout *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__SocketOptionLinger methods */
void   grpc__channelz__v1__socket_option_linger__init
                     (Grpc__Channelz__V1__SocketOptionLinger         *message);
size_t grpc__channelz__v1__socket_option_linger__get_packed_size
                     (const Grpc__Channelz__V1__SocketOptionLinger   *message);
size_t grpc__channelz__v1__socket_option_linger__pack
                     (const Grpc__Channelz__V1__SocketOptionLinger   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__socket_option_linger__pack_to_buffer
                     (const Grpc__Channelz__V1__SocketOptionLinger   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__SocketOptionLinger *
       grpc__channelz__v1__socket_option_linger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__socket_option_linger__free_unpacked
                     (Grpc__Channelz__V1__SocketOptionLinger *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__SocketOptionTcpInfo methods */
void   grpc__channelz__v1__socket_option_tcp_info__init
                     (Grpc__Channelz__V1__SocketOptionTcpInfo         *message);
size_t grpc__channelz__v1__socket_option_tcp_info__get_packed_size
                     (const Grpc__Channelz__V1__SocketOptionTcpInfo   *message);
size_t grpc__channelz__v1__socket_option_tcp_info__pack
                     (const Grpc__Channelz__V1__SocketOptionTcpInfo   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__socket_option_tcp_info__pack_to_buffer
                     (const Grpc__Channelz__V1__SocketOptionTcpInfo   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__SocketOptionTcpInfo *
       grpc__channelz__v1__socket_option_tcp_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__socket_option_tcp_info__free_unpacked
                     (Grpc__Channelz__V1__SocketOptionTcpInfo *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetTopChannelsRequest methods */
void   grpc__channelz__v1__get_top_channels_request__init
                     (Grpc__Channelz__V1__GetTopChannelsRequest         *message);
size_t grpc__channelz__v1__get_top_channels_request__get_packed_size
                     (const Grpc__Channelz__V1__GetTopChannelsRequest   *message);
size_t grpc__channelz__v1__get_top_channels_request__pack
                     (const Grpc__Channelz__V1__GetTopChannelsRequest   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_top_channels_request__pack_to_buffer
                     (const Grpc__Channelz__V1__GetTopChannelsRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetTopChannelsRequest *
       grpc__channelz__v1__get_top_channels_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_top_channels_request__free_unpacked
                     (Grpc__Channelz__V1__GetTopChannelsRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetTopChannelsResponse methods */
void   grpc__channelz__v1__get_top_channels_response__init
                     (Grpc__Channelz__V1__GetTopChannelsResponse         *message);
size_t grpc__channelz__v1__get_top_channels_response__get_packed_size
                     (const Grpc__Channelz__V1__GetTopChannelsResponse   *message);
size_t grpc__channelz__v1__get_top_channels_response__pack
                     (const Grpc__Channelz__V1__GetTopChannelsResponse   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_top_channels_response__pack_to_buffer
                     (const Grpc__Channelz__V1__GetTopChannelsResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetTopChannelsResponse *
       grpc__channelz__v1__get_top_channels_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_top_channels_response__free_unpacked
                     (Grpc__Channelz__V1__GetTopChannelsResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetServersRequest methods */
void   grpc__channelz__v1__get_servers_request__init
                     (Grpc__Channelz__V1__GetServersRequest         *message);
size_t grpc__channelz__v1__get_servers_request__get_packed_size
                     (const Grpc__Channelz__V1__GetServersRequest   *message);
size_t grpc__channelz__v1__get_servers_request__pack
                     (const Grpc__Channelz__V1__GetServersRequest   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_servers_request__pack_to_buffer
                     (const Grpc__Channelz__V1__GetServersRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetServersRequest *
       grpc__channelz__v1__get_servers_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_servers_request__free_unpacked
                     (Grpc__Channelz__V1__GetServersRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetServersResponse methods */
void   grpc__channelz__v1__get_servers_response__init
                     (Grpc__Channelz__V1__GetServersResponse         *message);
size_t grpc__channelz__v1__get_servers_response__get_packed_size
                     (const Grpc__Channelz__V1__GetServersResponse   *message);
size_t grpc__channelz__v1__get_servers_response__pack
                     (const Grpc__Channelz__V1__GetServersResponse   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_servers_response__pack_to_buffer
                     (const Grpc__Channelz__V1__GetServersResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetServersResponse *
       grpc__channelz__v1__get_servers_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_servers_response__free_unpacked
                     (Grpc__Channelz__V1__GetServersResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetServerRequest methods */
void   grpc__channelz__v1__get_server_request__init
                     (Grpc__Channelz__V1__GetServerRequest         *message);
size_t grpc__channelz__v1__get_server_request__get_packed_size
                     (const Grpc__Channelz__V1__GetServerRequest   *message);
size_t grpc__channelz__v1__get_server_request__pack
                     (const Grpc__Channelz__V1__GetServerRequest   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_server_request__pack_to_buffer
                     (const Grpc__Channelz__V1__GetServerRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetServerRequest *
       grpc__channelz__v1__get_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_server_request__free_unpacked
                     (Grpc__Channelz__V1__GetServerRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetServerResponse methods */
void   grpc__channelz__v1__get_server_response__init
                     (Grpc__Channelz__V1__GetServerResponse         *message);
size_t grpc__channelz__v1__get_server_response__get_packed_size
                     (const Grpc__Channelz__V1__GetServerResponse   *message);
size_t grpc__channelz__v1__get_server_response__pack
                     (const Grpc__Channelz__V1__GetServerResponse   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_server_response__pack_to_buffer
                     (const Grpc__Channelz__V1__GetServerResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetServerResponse *
       grpc__channelz__v1__get_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_server_response__free_unpacked
                     (Grpc__Channelz__V1__GetServerResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetServerSocketsRequest methods */
void   grpc__channelz__v1__get_server_sockets_request__init
                     (Grpc__Channelz__V1__GetServerSocketsRequest         *message);
size_t grpc__channelz__v1__get_server_sockets_request__get_packed_size
                     (const Grpc__Channelz__V1__GetServerSocketsRequest   *message);
size_t grpc__channelz__v1__get_server_sockets_request__pack
                     (const Grpc__Channelz__V1__GetServerSocketsRequest   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_server_sockets_request__pack_to_buffer
                     (const Grpc__Channelz__V1__GetServerSocketsRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetServerSocketsRequest *
       grpc__channelz__v1__get_server_sockets_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_server_sockets_request__free_unpacked
                     (Grpc__Channelz__V1__GetServerSocketsRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetServerSocketsResponse methods */
void   grpc__channelz__v1__get_server_sockets_response__init
                     (Grpc__Channelz__V1__GetServerSocketsResponse         *message);
size_t grpc__channelz__v1__get_server_sockets_response__get_packed_size
                     (const Grpc__Channelz__V1__GetServerSocketsResponse   *message);
size_t grpc__channelz__v1__get_server_sockets_response__pack
                     (const Grpc__Channelz__V1__GetServerSocketsResponse   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_server_sockets_response__pack_to_buffer
                     (const Grpc__Channelz__V1__GetServerSocketsResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetServerSocketsResponse *
       grpc__channelz__v1__get_server_sockets_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_server_sockets_response__free_unpacked
                     (Grpc__Channelz__V1__GetServerSocketsResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetChannelRequest methods */
void   grpc__channelz__v1__get_channel_request__init
                     (Grpc__Channelz__V1__GetChannelRequest         *message);
size_t grpc__channelz__v1__get_channel_request__get_packed_size
                     (const Grpc__Channelz__V1__GetChannelRequest   *message);
size_t grpc__channelz__v1__get_channel_request__pack
                     (const Grpc__Channelz__V1__GetChannelRequest   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_channel_request__pack_to_buffer
                     (const Grpc__Channelz__V1__GetChannelRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetChannelRequest *
       grpc__channelz__v1__get_channel_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_channel_request__free_unpacked
                     (Grpc__Channelz__V1__GetChannelRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetChannelResponse methods */
void   grpc__channelz__v1__get_channel_response__init
                     (Grpc__Channelz__V1__GetChannelResponse         *message);
size_t grpc__channelz__v1__get_channel_response__get_packed_size
                     (const Grpc__Channelz__V1__GetChannelResponse   *message);
size_t grpc__channelz__v1__get_channel_response__pack
                     (const Grpc__Channelz__V1__GetChannelResponse   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_channel_response__pack_to_buffer
                     (const Grpc__Channelz__V1__GetChannelResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetChannelResponse *
       grpc__channelz__v1__get_channel_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_channel_response__free_unpacked
                     (Grpc__Channelz__V1__GetChannelResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetSubchannelRequest methods */
void   grpc__channelz__v1__get_subchannel_request__init
                     (Grpc__Channelz__V1__GetSubchannelRequest         *message);
size_t grpc__channelz__v1__get_subchannel_request__get_packed_size
                     (const Grpc__Channelz__V1__GetSubchannelRequest   *message);
size_t grpc__channelz__v1__get_subchannel_request__pack
                     (const Grpc__Channelz__V1__GetSubchannelRequest   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_subchannel_request__pack_to_buffer
                     (const Grpc__Channelz__V1__GetSubchannelRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetSubchannelRequest *
       grpc__channelz__v1__get_subchannel_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_subchannel_request__free_unpacked
                     (Grpc__Channelz__V1__GetSubchannelRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetSubchannelResponse methods */
void   grpc__channelz__v1__get_subchannel_response__init
                     (Grpc__Channelz__V1__GetSubchannelResponse         *message);
size_t grpc__channelz__v1__get_subchannel_response__get_packed_size
                     (const Grpc__Channelz__V1__GetSubchannelResponse   *message);
size_t grpc__channelz__v1__get_subchannel_response__pack
                     (const Grpc__Channelz__V1__GetSubchannelResponse   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_subchannel_response__pack_to_buffer
                     (const Grpc__Channelz__V1__GetSubchannelResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetSubchannelResponse *
       grpc__channelz__v1__get_subchannel_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_subchannel_response__free_unpacked
                     (Grpc__Channelz__V1__GetSubchannelResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetSocketRequest methods */
void   grpc__channelz__v1__get_socket_request__init
                     (Grpc__Channelz__V1__GetSocketRequest         *message);
size_t grpc__channelz__v1__get_socket_request__get_packed_size
                     (const Grpc__Channelz__V1__GetSocketRequest   *message);
size_t grpc__channelz__v1__get_socket_request__pack
                     (const Grpc__Channelz__V1__GetSocketRequest   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_socket_request__pack_to_buffer
                     (const Grpc__Channelz__V1__GetSocketRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetSocketRequest *
       grpc__channelz__v1__get_socket_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_socket_request__free_unpacked
                     (Grpc__Channelz__V1__GetSocketRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Channelz__V1__GetSocketResponse methods */
void   grpc__channelz__v1__get_socket_response__init
                     (Grpc__Channelz__V1__GetSocketResponse         *message);
size_t grpc__channelz__v1__get_socket_response__get_packed_size
                     (const Grpc__Channelz__V1__GetSocketResponse   *message);
size_t grpc__channelz__v1__get_socket_response__pack
                     (const Grpc__Channelz__V1__GetSocketResponse   *message,
                      uint8_t             *out);
size_t grpc__channelz__v1__get_socket_response__pack_to_buffer
                     (const Grpc__Channelz__V1__GetSocketResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Channelz__V1__GetSocketResponse *
       grpc__channelz__v1__get_socket_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__channelz__v1__get_socket_response__free_unpacked
                     (Grpc__Channelz__V1__GetSocketResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Grpc__Channelz__V1__Channel_Closure)
                 (const Grpc__Channelz__V1__Channel *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Subchannel_Closure)
                 (const Grpc__Channelz__V1__Subchannel *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__ChannelConnectivityState_Closure)
                 (const Grpc__Channelz__V1__ChannelConnectivityState *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__ChannelData_Closure)
                 (const Grpc__Channelz__V1__ChannelData *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__ChannelTraceEvent_Closure)
                 (const Grpc__Channelz__V1__ChannelTraceEvent *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__ChannelTrace_Closure)
                 (const Grpc__Channelz__V1__ChannelTrace *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__ChannelRef_Closure)
                 (const Grpc__Channelz__V1__ChannelRef *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__SubchannelRef_Closure)
                 (const Grpc__Channelz__V1__SubchannelRef *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__SocketRef_Closure)
                 (const Grpc__Channelz__V1__SocketRef *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__ServerRef_Closure)
                 (const Grpc__Channelz__V1__ServerRef *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Server_Closure)
                 (const Grpc__Channelz__V1__Server *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__ServerData_Closure)
                 (const Grpc__Channelz__V1__ServerData *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Socket_Closure)
                 (const Grpc__Channelz__V1__Socket *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__SocketData_Closure)
                 (const Grpc__Channelz__V1__SocketData *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Address__TcpIpAddress_Closure)
                 (const Grpc__Channelz__V1__Address__TcpIpAddress *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Address__UdsAddress_Closure)
                 (const Grpc__Channelz__V1__Address__UdsAddress *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Address__OtherAddress_Closure)
                 (const Grpc__Channelz__V1__Address__OtherAddress *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Address_Closure)
                 (const Grpc__Channelz__V1__Address *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Security__Tls_Closure)
                 (const Grpc__Channelz__V1__Security__Tls *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Security__OtherSecurity_Closure)
                 (const Grpc__Channelz__V1__Security__OtherSecurity *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__Security_Closure)
                 (const Grpc__Channelz__V1__Security *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__SocketOption_Closure)
                 (const Grpc__Channelz__V1__SocketOption *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__SocketOptionTimeout_Closure)
                 (const Grpc__Channelz__V1__SocketOptionTimeout *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__SocketOptionLinger_Closure)
                 (const Grpc__Channelz__V1__SocketOptionLinger *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__SocketOptionTcpInfo_Closure)
                 (const Grpc__Channelz__V1__SocketOptionTcpInfo *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetTopChannelsRequest_Closure)
                 (const Grpc__Channelz__V1__GetTopChannelsRequest *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetTopChannelsResponse_Closure)
                 (const Grpc__Channelz__V1__GetTopChannelsResponse *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetServersRequest_Closure)
                 (const Grpc__Channelz__V1__GetServersRequest *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetServersResponse_Closure)
                 (const Grpc__Channelz__V1__GetServersResponse *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetServerRequest_Closure)
                 (const Grpc__Channelz__V1__GetServerRequest *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetServerResponse_Closure)
                 (const Grpc__Channelz__V1__GetServerResponse *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetServerSocketsRequest_Closure)
                 (const Grpc__Channelz__V1__GetServerSocketsRequest *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetServerSocketsResponse_Closure)
                 (const Grpc__Channelz__V1__GetServerSocketsResponse *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetChannelRequest_Closure)
                 (const Grpc__Channelz__V1__GetChannelRequest *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetChannelResponse_Closure)
                 (const Grpc__Channelz__V1__GetChannelResponse *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetSubchannelRequest_Closure)
                 (const Grpc__Channelz__V1__GetSubchannelRequest *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetSubchannelResponse_Closure)
                 (const Grpc__Channelz__V1__GetSubchannelResponse *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetSocketRequest_Closure)
                 (const Grpc__Channelz__V1__GetSocketRequest *message,
                  void *closure_data);
typedef void (*Grpc__Channelz__V1__GetSocketResponse_Closure)
                 (const Grpc__Channelz__V1__GetSocketResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Grpc__Channelz__V1__Channelz_Service Grpc__Channelz__V1__Channelz_Service;
struct _Grpc__Channelz__V1__Channelz_Service
{
  ProtobufCService base;
  void (*get_top_channels)(Grpc__Channelz__V1__Channelz_Service *service,
                           const Grpc__Channelz__V1__GetTopChannelsRequest *input,
                           Grpc__Channelz__V1__GetTopChannelsResponse_Closure closure,
                           void *closure_data);
  void (*get_servers)(Grpc__Channelz__V1__Channelz_Service *service,
                      const Grpc__Channelz__V1__GetServersRequest *input,
                      Grpc__Channelz__V1__GetServersResponse_Closure closure,
                      void *closure_data);
  void (*get_server)(Grpc__Channelz__V1__Channelz_Service *service,
                     const Grpc__Channelz__V1__GetServerRequest *input,
                     Grpc__Channelz__V1__GetServerResponse_Closure closure,
                     void *closure_data);
  void (*get_server_sockets)(Grpc__Channelz__V1__Channelz_Service *service,
                             const Grpc__Channelz__V1__GetServerSocketsRequest *input,
                             Grpc__Channelz__V1__GetServerSocketsResponse_Closure closure,
                             void *closure_data);
  void (*get_channel)(Grpc__Channelz__V1__Channelz_Service *service,
                      const Grpc__Channelz__V1__GetChannelRequest *input,
                      Grpc__Channelz__V1__GetChannelResponse_Closure closure,
                      void *closure_data);
  void (*get_subchannel)(Grpc__Channelz__V1__Channelz_Service *service,
                         const Grpc__Channelz__V1__GetSubchannelRequest *input,
                         Grpc__Channelz__V1__GetSubchannelResponse_Closure closure,
                         void *closure_data);
  void (*get_socket)(Grpc__Channelz__V1__Channelz_Service *service,
                     const Grpc__Channelz__V1__GetSocketRequest *input,
                     Grpc__Channelz__V1__GetSocketResponse_Closure closure,
                     void *closure_data);
};
typedef void (*Grpc__Channelz__V1__Channelz_ServiceDestroy)(Grpc__Channelz__V1__Channelz_Service *);
void grpc__channelz__v1__channelz__init (Grpc__Channelz__V1__Channelz_Service *service,
                                         Grpc__Channelz__V1__Channelz_ServiceDestroy destroy);
#define GRPC__CHANNELZ__V1__CHANNELZ__BASE_INIT \
    { &grpc__channelz__v1__channelz__descriptor, protobuf_c_service_invoke_internal, NULL }
#define GRPC__CHANNELZ__V1__CHANNELZ__INIT(function_prefix__) \
    { GRPC__CHANNELZ__V1__CHANNELZ__BASE_INIT,\
      function_prefix__ ## get_top_channels,\
      function_prefix__ ## get_servers,\
      function_prefix__ ## get_server,\
      function_prefix__ ## get_server_sockets,\
      function_prefix__ ## get_channel,\
      function_prefix__ ## get_subchannel,\
      function_prefix__ ## get_socket  }
void grpc__channelz__v1__channelz__get_top_channels(ProtobufCService *service,
                                                    const Grpc__Channelz__V1__GetTopChannelsRequest *input,
                                                    Grpc__Channelz__V1__GetTopChannelsResponse_Closure closure,
                                                    void *closure_data);
void grpc__channelz__v1__channelz__get_servers(ProtobufCService *service,
                                               const Grpc__Channelz__V1__GetServersRequest *input,
                                               Grpc__Channelz__V1__GetServersResponse_Closure closure,
                                               void *closure_data);
void grpc__channelz__v1__channelz__get_server(ProtobufCService *service,
                                              const Grpc__Channelz__V1__GetServerRequest *input,
                                              Grpc__Channelz__V1__GetServerResponse_Closure closure,
                                              void *closure_data);
void grpc__channelz__v1__channelz__get_server_sockets(ProtobufCService *service,
                                                      const Grpc__Channelz__V1__GetServerSocketsRequest *input,
                                                      Grpc__Channelz__V1__GetServerSocketsResponse_Closure closure,
                                                      void *closure_data);
void grpc__channelz__v1__channelz__get_channel(ProtobufCService *service,
                                               const Grpc__Channelz__V1__GetChannelRequest *input,
                                               Grpc__Channelz__V1__GetChannelResponse_Closure closure,
                                               void *closure_data);
void grpc__channelz__v1__channelz__get_subchannel(ProtobufCService *service,
                                                  const Grpc__Channelz__V1__GetSubchannelRequest *input,
                                                  Grpc__Channelz__V1__GetSubchannelResponse_Closure closure,
                                                  void *closure_data);
void grpc__channelz__v1__channelz__get_socket(ProtobufCService *service,
                                              const Grpc__Channelz__V1__GetSocketRequest *input,
                                              Grpc__Channelz__V1__GetSocketResponse_Closure closure,
                                              void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor grpc__channelz__v1__channel__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__subchannel__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__channel_connectivity_state__descriptor;
extern const ProtobufCEnumDescriptor    grpc__channelz__v1__channel_connectivity_state__state__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__channel_data__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__channel_trace_event__descriptor;
extern const ProtobufCEnumDescriptor    grpc__channelz__v1__channel_trace_event__severity__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__channel_trace__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__channel_ref__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__subchannel_ref__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__socket_ref__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__server_ref__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__server__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__server_data__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__socket__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__socket_data__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__address__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__address__tcp_ip_address__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__address__uds_address__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__address__other_address__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__security__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__security__tls__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__security__other_security__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__socket_option__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__socket_option_timeout__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__socket_option_linger__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__socket_option_tcp_info__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_top_channels_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_top_channels_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_servers_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_servers_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_server_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_server_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_server_sockets_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_server_sockets_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_channel_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_channel_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_subchannel_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_subchannel_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_socket_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__channelz__v1__get_socket_response__descriptor;
extern const ProtobufCServiceDescriptor grpc__channelz__v1__channelz__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_grpc_2fchannelz_2fchannelz_2eproto__INCLUDED */
