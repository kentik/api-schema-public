/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: grpc/reflection/v1alpha/reflection.proto */

#ifndef PROTOBUF_C_grpc_2freflection_2fv1alpha_2freflection_2eproto__INCLUDED
#define PROTOBUF_C_grpc_2freflection_2fv1alpha_2freflection_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Grpc__Reflection__V1alpha__ServerReflectionRequest Grpc__Reflection__V1alpha__ServerReflectionRequest;
typedef struct _Grpc__Reflection__V1alpha__ExtensionRequest Grpc__Reflection__V1alpha__ExtensionRequest;
typedef struct _Grpc__Reflection__V1alpha__ServerReflectionResponse Grpc__Reflection__V1alpha__ServerReflectionResponse;
typedef struct _Grpc__Reflection__V1alpha__FileDescriptorResponse Grpc__Reflection__V1alpha__FileDescriptorResponse;
typedef struct _Grpc__Reflection__V1alpha__ExtensionNumberResponse Grpc__Reflection__V1alpha__ExtensionNumberResponse;
typedef struct _Grpc__Reflection__V1alpha__ListServiceResponse Grpc__Reflection__V1alpha__ListServiceResponse;
typedef struct _Grpc__Reflection__V1alpha__ServiceResponse Grpc__Reflection__V1alpha__ServiceResponse;
typedef struct _Grpc__Reflection__V1alpha__ErrorResponse Grpc__Reflection__V1alpha__ErrorResponse;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__MESSAGE_REQUEST__NOT_SET = 0,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__MESSAGE_REQUEST_FILE_BY_FILENAME = 3,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__MESSAGE_REQUEST_FILE_CONTAINING_SYMBOL = 4,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__MESSAGE_REQUEST_FILE_CONTAINING_EXTENSION = 5,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__MESSAGE_REQUEST_ALL_EXTENSION_NUMBERS_OF_TYPE = 6,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__MESSAGE_REQUEST_LIST_SERVICES = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__MESSAGE_REQUEST)
} Grpc__Reflection__V1alpha__ServerReflectionRequest__MessageRequestCase;

/*
 * The message sent by the client when calling ServerReflectionInfo method.
 */
struct  _Grpc__Reflection__V1alpha__ServerReflectionRequest
{
  ProtobufCMessage base;
  char *host;
  Grpc__Reflection__V1alpha__ServerReflectionRequest__MessageRequestCase message_request_case;
  union {
    /*
     * Find a proto file by the file name.
     */
    char *file_by_filename;
    /*
     * Find the proto file that declares the given fully-qualified symbol name.
     * This field should be a fully-qualified symbol name
     * (e.g. <package>.<service>[.<method>] or <package>.<type>).
     */
    char *file_containing_symbol;
    /*
     * Find the proto file which defines an extension extending the given
     * message type with the given field number.
     */
    Grpc__Reflection__V1alpha__ExtensionRequest *file_containing_extension;
    /*
     * Finds the tag numbers used by all known extensions of the given message
     * type, and appends them to ExtensionNumberResponse in an undefined order.
     * Its corresponding method is best-effort: it's not guaranteed that the
     * reflection service will implement this method, and it's not guaranteed
     * that this method will provide all extensions. Returns
     * StatusCode::UNIMPLEMENTED if it's not implemented.
     * This field should be a fully-qualified type name. The format is
     * <package>.<type>
     */
    char *all_extension_numbers_of_type;
    /*
     * List the full names of registered services. The content will not be
     * checked.
     */
    char *list_services;
  };
};
#define GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__reflection__v1alpha__server_reflection_request__descriptor) \
    , (char *)protobuf_c_empty_string, GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_REQUEST__MESSAGE_REQUEST__NOT_SET, {0} }


/*
 * The type name and extension number sent by the client when requesting
 * file_containing_extension.
 */
struct  _Grpc__Reflection__V1alpha__ExtensionRequest
{
  ProtobufCMessage base;
  /*
   * Fully-qualified type name. The format should be <package>.<type>
   */
  char *containing_type;
  int32_t extension_number;
};
#define GRPC__REFLECTION__V1ALPHA__EXTENSION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__reflection__v1alpha__extension_request__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


typedef enum {
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_RESPONSE__MESSAGE_RESPONSE__NOT_SET = 0,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_RESPONSE__MESSAGE_RESPONSE_FILE_DESCRIPTOR_RESPONSE = 4,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_RESPONSE__MESSAGE_RESPONSE_ALL_EXTENSION_NUMBERS_RESPONSE = 5,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_RESPONSE__MESSAGE_RESPONSE_LIST_SERVICES_RESPONSE = 6,
  GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_RESPONSE__MESSAGE_RESPONSE_ERROR_RESPONSE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_RESPONSE__MESSAGE_RESPONSE)
} Grpc__Reflection__V1alpha__ServerReflectionResponse__MessageResponseCase;

/*
 * The message sent by the server to answer ServerReflectionInfo method.
 */
struct  _Grpc__Reflection__V1alpha__ServerReflectionResponse
{
  ProtobufCMessage base;
  char *valid_host;
  Grpc__Reflection__V1alpha__ServerReflectionRequest *original_request;
  Grpc__Reflection__V1alpha__ServerReflectionResponse__MessageResponseCase message_response_case;
  union {
    /*
     * This message is used to answer file_by_filename, file_containing_symbol,
     * file_containing_extension requests with transitive dependencies. As
     * the repeated label is not allowed in oneof fields, we use a
     * FileDescriptorResponse message to encapsulate the repeated fields.
     * The reflection service is allowed to avoid sending FileDescriptorProtos
     * that were previously sent in response to earlier requests in the stream.
     */
    Grpc__Reflection__V1alpha__FileDescriptorResponse *file_descriptor_response;
    /*
     * This message is used to answer all_extension_numbers_of_type requst.
     */
    Grpc__Reflection__V1alpha__ExtensionNumberResponse *all_extension_numbers_response;
    /*
     * This message is used to answer list_services request.
     */
    Grpc__Reflection__V1alpha__ListServiceResponse *list_services_response;
    /*
     * This message is used when an error occurs.
     */
    Grpc__Reflection__V1alpha__ErrorResponse *error_response;
  };
};
#define GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__reflection__v1alpha__server_reflection_response__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION_RESPONSE__MESSAGE_RESPONSE__NOT_SET, {0} }


/*
 * Serialized FileDescriptorProto messages sent by the server answering
 * a file_by_filename, file_containing_symbol, or file_containing_extension
 * request.
 */
struct  _Grpc__Reflection__V1alpha__FileDescriptorResponse
{
  ProtobufCMessage base;
  /*
   * Serialized FileDescriptorProto messages. We avoid taking a dependency on
   * descriptor.proto, which uses proto2 only features, by making them opaque
   * bytes instead.
   */
  size_t n_file_descriptor_proto;
  ProtobufCBinaryData *file_descriptor_proto;
};
#define GRPC__REFLECTION__V1ALPHA__FILE_DESCRIPTOR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__reflection__v1alpha__file_descriptor_response__descriptor) \
    , 0,NULL }


/*
 * A list of extension numbers sent by the server answering
 * all_extension_numbers_of_type request.
 */
struct  _Grpc__Reflection__V1alpha__ExtensionNumberResponse
{
  ProtobufCMessage base;
  /*
   * Full name of the base type, including the package name. The format
   * is <package>.<type>
   */
  char *base_type_name;
  size_t n_extension_number;
  int32_t *extension_number;
};
#define GRPC__REFLECTION__V1ALPHA__EXTENSION_NUMBER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__reflection__v1alpha__extension_number_response__descriptor) \
    , (char *)protobuf_c_empty_string, 0,NULL }


/*
 * A list of ServiceResponse sent by the server answering list_services request.
 */
struct  _Grpc__Reflection__V1alpha__ListServiceResponse
{
  ProtobufCMessage base;
  /*
   * The information of each service may be expanded in the future, so we use
   * ServiceResponse message to encapsulate it.
   */
  size_t n_service;
  Grpc__Reflection__V1alpha__ServiceResponse **service;
};
#define GRPC__REFLECTION__V1ALPHA__LIST_SERVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__reflection__v1alpha__list_service_response__descriptor) \
    , 0,NULL }


/*
 * The information of a single service used by ListServiceResponse to answer
 * list_services request.
 */
struct  _Grpc__Reflection__V1alpha__ServiceResponse
{
  ProtobufCMessage base;
  /*
   * Full name of a registered service, including its package name. The format
   * is <package>.<service>
   */
  char *name;
};
#define GRPC__REFLECTION__V1ALPHA__SERVICE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__reflection__v1alpha__service_response__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * The error code and error message sent by the server when an error occurs.
 */
struct  _Grpc__Reflection__V1alpha__ErrorResponse
{
  ProtobufCMessage base;
  /*
   * This field uses the error codes defined in grpc::StatusCode.
   */
  int32_t error_code;
  char *error_message;
};
#define GRPC__REFLECTION__V1ALPHA__ERROR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&grpc__reflection__v1alpha__error_response__descriptor) \
    , 0, (char *)protobuf_c_empty_string }


/* Grpc__Reflection__V1alpha__ServerReflectionRequest methods */
void   grpc__reflection__v1alpha__server_reflection_request__init
                     (Grpc__Reflection__V1alpha__ServerReflectionRequest         *message);
size_t grpc__reflection__v1alpha__server_reflection_request__get_packed_size
                     (const Grpc__Reflection__V1alpha__ServerReflectionRequest   *message);
size_t grpc__reflection__v1alpha__server_reflection_request__pack
                     (const Grpc__Reflection__V1alpha__ServerReflectionRequest   *message,
                      uint8_t             *out);
size_t grpc__reflection__v1alpha__server_reflection_request__pack_to_buffer
                     (const Grpc__Reflection__V1alpha__ServerReflectionRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Reflection__V1alpha__ServerReflectionRequest *
       grpc__reflection__v1alpha__server_reflection_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__reflection__v1alpha__server_reflection_request__free_unpacked
                     (Grpc__Reflection__V1alpha__ServerReflectionRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Reflection__V1alpha__ExtensionRequest methods */
void   grpc__reflection__v1alpha__extension_request__init
                     (Grpc__Reflection__V1alpha__ExtensionRequest         *message);
size_t grpc__reflection__v1alpha__extension_request__get_packed_size
                     (const Grpc__Reflection__V1alpha__ExtensionRequest   *message);
size_t grpc__reflection__v1alpha__extension_request__pack
                     (const Grpc__Reflection__V1alpha__ExtensionRequest   *message,
                      uint8_t             *out);
size_t grpc__reflection__v1alpha__extension_request__pack_to_buffer
                     (const Grpc__Reflection__V1alpha__ExtensionRequest   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Reflection__V1alpha__ExtensionRequest *
       grpc__reflection__v1alpha__extension_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__reflection__v1alpha__extension_request__free_unpacked
                     (Grpc__Reflection__V1alpha__ExtensionRequest *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Reflection__V1alpha__ServerReflectionResponse methods */
void   grpc__reflection__v1alpha__server_reflection_response__init
                     (Grpc__Reflection__V1alpha__ServerReflectionResponse         *message);
size_t grpc__reflection__v1alpha__server_reflection_response__get_packed_size
                     (const Grpc__Reflection__V1alpha__ServerReflectionResponse   *message);
size_t grpc__reflection__v1alpha__server_reflection_response__pack
                     (const Grpc__Reflection__V1alpha__ServerReflectionResponse   *message,
                      uint8_t             *out);
size_t grpc__reflection__v1alpha__server_reflection_response__pack_to_buffer
                     (const Grpc__Reflection__V1alpha__ServerReflectionResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Reflection__V1alpha__ServerReflectionResponse *
       grpc__reflection__v1alpha__server_reflection_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__reflection__v1alpha__server_reflection_response__free_unpacked
                     (Grpc__Reflection__V1alpha__ServerReflectionResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Reflection__V1alpha__FileDescriptorResponse methods */
void   grpc__reflection__v1alpha__file_descriptor_response__init
                     (Grpc__Reflection__V1alpha__FileDescriptorResponse         *message);
size_t grpc__reflection__v1alpha__file_descriptor_response__get_packed_size
                     (const Grpc__Reflection__V1alpha__FileDescriptorResponse   *message);
size_t grpc__reflection__v1alpha__file_descriptor_response__pack
                     (const Grpc__Reflection__V1alpha__FileDescriptorResponse   *message,
                      uint8_t             *out);
size_t grpc__reflection__v1alpha__file_descriptor_response__pack_to_buffer
                     (const Grpc__Reflection__V1alpha__FileDescriptorResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Reflection__V1alpha__FileDescriptorResponse *
       grpc__reflection__v1alpha__file_descriptor_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__reflection__v1alpha__file_descriptor_response__free_unpacked
                     (Grpc__Reflection__V1alpha__FileDescriptorResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Reflection__V1alpha__ExtensionNumberResponse methods */
void   grpc__reflection__v1alpha__extension_number_response__init
                     (Grpc__Reflection__V1alpha__ExtensionNumberResponse         *message);
size_t grpc__reflection__v1alpha__extension_number_response__get_packed_size
                     (const Grpc__Reflection__V1alpha__ExtensionNumberResponse   *message);
size_t grpc__reflection__v1alpha__extension_number_response__pack
                     (const Grpc__Reflection__V1alpha__ExtensionNumberResponse   *message,
                      uint8_t             *out);
size_t grpc__reflection__v1alpha__extension_number_response__pack_to_buffer
                     (const Grpc__Reflection__V1alpha__ExtensionNumberResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Reflection__V1alpha__ExtensionNumberResponse *
       grpc__reflection__v1alpha__extension_number_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__reflection__v1alpha__extension_number_response__free_unpacked
                     (Grpc__Reflection__V1alpha__ExtensionNumberResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Reflection__V1alpha__ListServiceResponse methods */
void   grpc__reflection__v1alpha__list_service_response__init
                     (Grpc__Reflection__V1alpha__ListServiceResponse         *message);
size_t grpc__reflection__v1alpha__list_service_response__get_packed_size
                     (const Grpc__Reflection__V1alpha__ListServiceResponse   *message);
size_t grpc__reflection__v1alpha__list_service_response__pack
                     (const Grpc__Reflection__V1alpha__ListServiceResponse   *message,
                      uint8_t             *out);
size_t grpc__reflection__v1alpha__list_service_response__pack_to_buffer
                     (const Grpc__Reflection__V1alpha__ListServiceResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Reflection__V1alpha__ListServiceResponse *
       grpc__reflection__v1alpha__list_service_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__reflection__v1alpha__list_service_response__free_unpacked
                     (Grpc__Reflection__V1alpha__ListServiceResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Reflection__V1alpha__ServiceResponse methods */
void   grpc__reflection__v1alpha__service_response__init
                     (Grpc__Reflection__V1alpha__ServiceResponse         *message);
size_t grpc__reflection__v1alpha__service_response__get_packed_size
                     (const Grpc__Reflection__V1alpha__ServiceResponse   *message);
size_t grpc__reflection__v1alpha__service_response__pack
                     (const Grpc__Reflection__V1alpha__ServiceResponse   *message,
                      uint8_t             *out);
size_t grpc__reflection__v1alpha__service_response__pack_to_buffer
                     (const Grpc__Reflection__V1alpha__ServiceResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Reflection__V1alpha__ServiceResponse *
       grpc__reflection__v1alpha__service_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__reflection__v1alpha__service_response__free_unpacked
                     (Grpc__Reflection__V1alpha__ServiceResponse *message,
                      ProtobufCAllocator *allocator);
/* Grpc__Reflection__V1alpha__ErrorResponse methods */
void   grpc__reflection__v1alpha__error_response__init
                     (Grpc__Reflection__V1alpha__ErrorResponse         *message);
size_t grpc__reflection__v1alpha__error_response__get_packed_size
                     (const Grpc__Reflection__V1alpha__ErrorResponse   *message);
size_t grpc__reflection__v1alpha__error_response__pack
                     (const Grpc__Reflection__V1alpha__ErrorResponse   *message,
                      uint8_t             *out);
size_t grpc__reflection__v1alpha__error_response__pack_to_buffer
                     (const Grpc__Reflection__V1alpha__ErrorResponse   *message,
                      ProtobufCBuffer     *buffer);
Grpc__Reflection__V1alpha__ErrorResponse *
       grpc__reflection__v1alpha__error_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   grpc__reflection__v1alpha__error_response__free_unpacked
                     (Grpc__Reflection__V1alpha__ErrorResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Grpc__Reflection__V1alpha__ServerReflectionRequest_Closure)
                 (const Grpc__Reflection__V1alpha__ServerReflectionRequest *message,
                  void *closure_data);
typedef void (*Grpc__Reflection__V1alpha__ExtensionRequest_Closure)
                 (const Grpc__Reflection__V1alpha__ExtensionRequest *message,
                  void *closure_data);
typedef void (*Grpc__Reflection__V1alpha__ServerReflectionResponse_Closure)
                 (const Grpc__Reflection__V1alpha__ServerReflectionResponse *message,
                  void *closure_data);
typedef void (*Grpc__Reflection__V1alpha__FileDescriptorResponse_Closure)
                 (const Grpc__Reflection__V1alpha__FileDescriptorResponse *message,
                  void *closure_data);
typedef void (*Grpc__Reflection__V1alpha__ExtensionNumberResponse_Closure)
                 (const Grpc__Reflection__V1alpha__ExtensionNumberResponse *message,
                  void *closure_data);
typedef void (*Grpc__Reflection__V1alpha__ListServiceResponse_Closure)
                 (const Grpc__Reflection__V1alpha__ListServiceResponse *message,
                  void *closure_data);
typedef void (*Grpc__Reflection__V1alpha__ServiceResponse_Closure)
                 (const Grpc__Reflection__V1alpha__ServiceResponse *message,
                  void *closure_data);
typedef void (*Grpc__Reflection__V1alpha__ErrorResponse_Closure)
                 (const Grpc__Reflection__V1alpha__ErrorResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Grpc__Reflection__V1alpha__ServerReflection_Service Grpc__Reflection__V1alpha__ServerReflection_Service;
struct _Grpc__Reflection__V1alpha__ServerReflection_Service
{
  ProtobufCService base;
  void (*server_reflection_info)(Grpc__Reflection__V1alpha__ServerReflection_Service *service,
                                 const Grpc__Reflection__V1alpha__ServerReflectionRequest *input,
                                 Grpc__Reflection__V1alpha__ServerReflectionResponse_Closure closure,
                                 void *closure_data);
};
typedef void (*Grpc__Reflection__V1alpha__ServerReflection_ServiceDestroy)(Grpc__Reflection__V1alpha__ServerReflection_Service *);
void grpc__reflection__v1alpha__server_reflection__init (Grpc__Reflection__V1alpha__ServerReflection_Service *service,
                                                         Grpc__Reflection__V1alpha__ServerReflection_ServiceDestroy destroy);
#define GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION__BASE_INIT \
    { &grpc__reflection__v1alpha__server_reflection__descriptor, protobuf_c_service_invoke_internal, NULL }
#define GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION__INIT(function_prefix__) \
    { GRPC__REFLECTION__V1ALPHA__SERVER_REFLECTION__BASE_INIT,\
      function_prefix__ ## server_reflection_info  }
void grpc__reflection__v1alpha__server_reflection__server_reflection_info(ProtobufCService *service,
                                                                          const Grpc__Reflection__V1alpha__ServerReflectionRequest *input,
                                                                          Grpc__Reflection__V1alpha__ServerReflectionResponse_Closure closure,
                                                                          void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor grpc__reflection__v1alpha__server_reflection_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__reflection__v1alpha__extension_request__descriptor;
extern const ProtobufCMessageDescriptor grpc__reflection__v1alpha__server_reflection_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__reflection__v1alpha__file_descriptor_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__reflection__v1alpha__extension_number_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__reflection__v1alpha__list_service_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__reflection__v1alpha__service_response__descriptor;
extern const ProtobufCMessageDescriptor grpc__reflection__v1alpha__error_response__descriptor;
extern const ProtobufCServiceDescriptor grpc__reflection__v1alpha__server_reflection__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_grpc_2freflection_2fv1alpha_2freflection_2eproto__INCLUDED */
