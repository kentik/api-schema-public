# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from grpc.lb.v1 import load_balancer_pb2 as grpc_dot_lb_dot_v1_dot_load__balancer__pb2


class LoadBalancerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BalanceLoad = channel.stream_stream(
                '/grpc.lb.v1.LoadBalancer/BalanceLoad',
                request_serializer=grpc_dot_lb_dot_v1_dot_load__balancer__pb2.LoadBalanceRequest.SerializeToString,
                response_deserializer=grpc_dot_lb_dot_v1_dot_load__balancer__pb2.LoadBalanceResponse.FromString,
                )


class LoadBalancerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BalanceLoad(self, request_iterator, context):
        """Bidirectional rpc to get a list of servers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoadBalancerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BalanceLoad': grpc.stream_stream_rpc_method_handler(
                    servicer.BalanceLoad,
                    request_deserializer=grpc_dot_lb_dot_v1_dot_load__balancer__pb2.LoadBalanceRequest.FromString,
                    response_serializer=grpc_dot_lb_dot_v1_dot_load__balancer__pb2.LoadBalanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.lb.v1.LoadBalancer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoadBalancer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BalanceLoad(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/grpc.lb.v1.LoadBalancer/BalanceLoad',
            grpc_dot_lb_dot_v1_dot_load__balancer__pb2.LoadBalanceRequest.SerializeToString,
            grpc_dot_lb_dot_v1_dot_load__balancer__pb2.LoadBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
