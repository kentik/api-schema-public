# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: kentik/mkp/v202102alpha1/mkp.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.api.annotations_pb2
import google.api.client_pb2
import google.protobuf.field_mask_pb2
import protoc_gen_openapiv2.options.annotations_pb2
import kentik.core.v202012alpha1.annotations_pb2
import kentik.mkp.v202102alpha1.mkp_pb2


class PackageServiceBase(abc.ABC):

    @abc.abstractmethod
    async def ListPackage(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.ListPackageRequest, kentik.mkp.v202102alpha1.mkp_pb2.ListPackageResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetPackage(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.GetPackageRequest, kentik.mkp.v202102alpha1.mkp_pb2.GetPackageResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreatePackage(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.CreatePackageRequest, kentik.mkp.v202102alpha1.mkp_pb2.CreatePackageResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdatePackage(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.UpdatePackageRequest, kentik.mkp.v202102alpha1.mkp_pb2.UpdatePackageResponse]') -> None:
        pass

    @abc.abstractmethod
    async def PatchPackage(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.PatchPackageRequest, kentik.mkp.v202102alpha1.mkp_pb2.PatchPackageResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeletePackage(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.DeletePackageRequest, kentik.mkp.v202102alpha1.mkp_pb2.DeletePackageResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/kentik.mkp.v202102alpha1.PackageService/ListPackage': grpclib.const.Handler(
                self.ListPackage,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.ListPackageRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.ListPackageResponse,
            ),
            '/kentik.mkp.v202102alpha1.PackageService/GetPackage': grpclib.const.Handler(
                self.GetPackage,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.GetPackageRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.GetPackageResponse,
            ),
            '/kentik.mkp.v202102alpha1.PackageService/CreatePackage': grpclib.const.Handler(
                self.CreatePackage,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.CreatePackageRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.CreatePackageResponse,
            ),
            '/kentik.mkp.v202102alpha1.PackageService/UpdatePackage': grpclib.const.Handler(
                self.UpdatePackage,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.UpdatePackageRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.UpdatePackageResponse,
            ),
            '/kentik.mkp.v202102alpha1.PackageService/PatchPackage': grpclib.const.Handler(
                self.PatchPackage,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.PatchPackageRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.PatchPackageResponse,
            ),
            '/kentik.mkp.v202102alpha1.PackageService/DeletePackage': grpclib.const.Handler(
                self.DeletePackage,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.DeletePackageRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.DeletePackageResponse,
            ),
        }


class PackageServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListPackage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.PackageService/ListPackage',
            kentik.mkp.v202102alpha1.mkp_pb2.ListPackageRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.ListPackageResponse,
        )
        self.GetPackage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.PackageService/GetPackage',
            kentik.mkp.v202102alpha1.mkp_pb2.GetPackageRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.GetPackageResponse,
        )
        self.CreatePackage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.PackageService/CreatePackage',
            kentik.mkp.v202102alpha1.mkp_pb2.CreatePackageRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.CreatePackageResponse,
        )
        self.UpdatePackage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.PackageService/UpdatePackage',
            kentik.mkp.v202102alpha1.mkp_pb2.UpdatePackageRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.UpdatePackageResponse,
        )
        self.PatchPackage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.PackageService/PatchPackage',
            kentik.mkp.v202102alpha1.mkp_pb2.PatchPackageRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.PatchPackageResponse,
        )
        self.DeletePackage = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.PackageService/DeletePackage',
            kentik.mkp.v202102alpha1.mkp_pb2.DeletePackageRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.DeletePackageResponse,
        )


class TenantServiceBase(abc.ABC):

    @abc.abstractmethod
    async def ListTenant(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.ListTenantRequest, kentik.mkp.v202102alpha1.mkp_pb2.ListTenantResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetTenant(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.GetTenantRequest, kentik.mkp.v202102alpha1.mkp_pb2.GetTenantResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateTenant(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.CreateTenantRequest, kentik.mkp.v202102alpha1.mkp_pb2.CreateTenantResponse]') -> None:
        pass

    @abc.abstractmethod
    async def UpdateTenant(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.UpdateTenantRequest, kentik.mkp.v202102alpha1.mkp_pb2.UpdateTenantResponse]') -> None:
        pass

    @abc.abstractmethod
    async def PatchTenant(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.PatchTenantRequest, kentik.mkp.v202102alpha1.mkp_pb2.PatchTenantResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteTenant(self, stream: 'grpclib.server.Stream[kentik.mkp.v202102alpha1.mkp_pb2.DeleteTenantRequest, kentik.mkp.v202102alpha1.mkp_pb2.DeleteTenantResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/kentik.mkp.v202102alpha1.TenantService/ListTenant': grpclib.const.Handler(
                self.ListTenant,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.ListTenantRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.ListTenantResponse,
            ),
            '/kentik.mkp.v202102alpha1.TenantService/GetTenant': grpclib.const.Handler(
                self.GetTenant,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.GetTenantRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.GetTenantResponse,
            ),
            '/kentik.mkp.v202102alpha1.TenantService/CreateTenant': grpclib.const.Handler(
                self.CreateTenant,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.CreateTenantRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.CreateTenantResponse,
            ),
            '/kentik.mkp.v202102alpha1.TenantService/UpdateTenant': grpclib.const.Handler(
                self.UpdateTenant,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.UpdateTenantRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.UpdateTenantResponse,
            ),
            '/kentik.mkp.v202102alpha1.TenantService/PatchTenant': grpclib.const.Handler(
                self.PatchTenant,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.PatchTenantRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.PatchTenantResponse,
            ),
            '/kentik.mkp.v202102alpha1.TenantService/DeleteTenant': grpclib.const.Handler(
                self.DeleteTenant,
                grpclib.const.Cardinality.UNARY_UNARY,
                kentik.mkp.v202102alpha1.mkp_pb2.DeleteTenantRequest,
                kentik.mkp.v202102alpha1.mkp_pb2.DeleteTenantResponse,
            ),
        }


class TenantServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListTenant = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.TenantService/ListTenant',
            kentik.mkp.v202102alpha1.mkp_pb2.ListTenantRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.ListTenantResponse,
        )
        self.GetTenant = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.TenantService/GetTenant',
            kentik.mkp.v202102alpha1.mkp_pb2.GetTenantRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.GetTenantResponse,
        )
        self.CreateTenant = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.TenantService/CreateTenant',
            kentik.mkp.v202102alpha1.mkp_pb2.CreateTenantRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.CreateTenantResponse,
        )
        self.UpdateTenant = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.TenantService/UpdateTenant',
            kentik.mkp.v202102alpha1.mkp_pb2.UpdateTenantRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.UpdateTenantResponse,
        )
        self.PatchTenant = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.TenantService/PatchTenant',
            kentik.mkp.v202102alpha1.mkp_pb2.PatchTenantRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.PatchTenantResponse,
        )
        self.DeleteTenant = grpclib.client.UnaryUnaryMethod(
            channel,
            '/kentik.mkp.v202102alpha1.TenantService/DeleteTenant',
            kentik.mkp.v202102alpha1.mkp_pb2.DeleteTenantRequest,
            kentik.mkp.v202102alpha1.mkp_pb2.DeleteTenantResponse,
        )
