# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kentik/synthetics/v202202/synthetics.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.api import client_pb2 as google_dot_api_dot_client__pb2
from google.api import field_behavior_pb2 as google_dot_api_dot_field__behavior__pb2
from google.protobuf import timestamp_pb2 as google_dot_protobuf_dot_timestamp__pb2
from protoc_gen_openapiv2.options import annotations_pb2 as protoc__gen__openapiv2_dot_options_dot_annotations__pb2
from kentik.core.v202012alpha1 import annotations_pb2 as kentik_dot_core_dot_v202012alpha1_dot_annotations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n*kentik/synthetics/v202202/synthetics.proto\x12\x19kentik.synthetics.v202202\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a+kentik/core/v202012alpha1/annotations.proto\"\xf7\x0e\n\x05\x41gent\x12\x37\n\x02id\x18\x01 \x01(\tB\'\x92\x41 2\x1eUnique identifier of the agent\xe2\x41\x01\x03R\x02id\x12I\n\tsite_name\x18\x02 \x01(\tB,\x92\x41)2\'Name of the site where agent is locatedR\x08siteName\x12W\n\x06status\x18\x03 \x01(\x0e\x32&.kentik.synthetics.v202202.AgentStatusB\x17\x92\x41\x14\x32\x12Operational statusR\x06status\x12\x46\n\x05\x61lias\x18\x04 \x01(\tB0\x92\x41-2+User selected descriptive name of the agentR\x05\x61lias\x12=\n\x04type\x18\x05 \x01(\tB)\x92\x41\"2 Type of agent (global | private)\xe2\x41\x01\x03R\x04type\x12\x42\n\x02os\x18\x06 \x01(\tB2\x92\x41+2)OS version of server/VM hosting the agent\xe2\x41\x01\x03R\x02os\x12I\n\x02ip\x18\x07 \x01(\tB9\x18\x01\x92\x41\x30\x32.Public IP address of the agent (auto-detected)\xe2\x41\x01\x03R\x02ip\x12L\n\x03lat\x18\x08 \x01(\x01\x42:\x92\x41\x37\x32\x35Latitude of agent\'s location (signed decimal degrees)R\x03lat\x12O\n\x04long\x18\t \x01(\x01\x42;\x92\x41\x38\x32\x36Longitude of agent\'s location (signed decimal degrees)R\x04long\x12i\n\x0blast_authed\x18\n \x01(\x0b\x32\x1a.google.protobuf.TimestampB,\x92\x41%2#Timestamp of the last authorization\xe2\x41\x01\x03R\nlastAuthed\x12j\n\x06\x66\x61mily\x18\x0b \x01(\x0e\x32#.kentik.synthetics.v202202.IPFamilyB-\x92\x41*2(IP address family supported by the agentR\x06\x66\x61mily\x12\x42\n\x03\x61sn\x18\x0c \x01(\rB0\x92\x41-2+ASN of the AS owning agent\'s public addressR\x03\x61sn\x12X\n\x07site_id\x18\r \x01(\tB?\x92\x41<2:ID of the site hosting the agent (if configured in Kentik)R\x06siteId\x12@\n\x07version\x18\x0e \x01(\tB&\x92\x41\x1f\x32\x1dSoftware version of the agent\xe2\x41\x01\x03R\x07version\x12\x38\n\x04\x63ity\x18\x10 \x01(\tB$\x92\x41!2\x1f\x43ity where the agent is locatedR\x04\x63ity\x12\x44\n\x06region\x18\x11 \x01(\tB,\x92\x41)2\'Geographical region of agent\'s locationR\x06region\x12:\n\x07\x63ountry\x18\x12 \x01(\tB \x92\x41\x1d\x32\x1b\x43ountry of agent\'s locationR\x07\x63ountry\x12K\n\x08test_ids\x18\x13 \x03(\tB0\x92\x41)2\'IDs of user\'s test running on the agent\xe2\x41\x01\x03R\x07testIds\x12\x42\n\x08local_ip\x18\x14 \x01(\tB\'\x18\x01\x92\x41\"2 Internal IP address of the agentR\x07localIp\x12O\n\x0c\x63loud_region\x18\x16 \x01(\tB,\x92\x41)2\'Cloud region (if any) hosting the agentR\x0b\x63loudRegion\x12U\n\x0e\x63loud_provider\x18\x17 \x01(\tB.\x92\x41+2)Cloud provider (if any) hosting the agentR\rcloudProvider\x12M\n\nagent_impl\x18\x18 \x01(\x0e\x32(.kentik.synthetics.v202202.ImplementTypeB\x04\xe2\x41\x01\x03R\tagentImpl\x12N\n\x06labels\x18\x19 \x03(\tB6\x92\x41\x33\x32\x31List of names of labels associated with the agentR\x06labels\x12\x90\x01\n\x08metadata\x18\x1a \x01(\x0b\x32(.kentik.synthetics.v202202.AgentMetadataBJ\x92\x41G2EAdditional information about agent\'s configuration and run-time stateR\x08metadata\"\xea\x04\n\rAgentMetadata\x12\x8b\x01\n\x16private_ipv4_addresses\x18\x01 \x03(\x0b\x32\x30.kentik.synthetics.v202202.AgentMetadata.IpValueB#\x92\x41 2\x1eList of private IPv4 addressesR\x14privateIpv4Addresses\x12\x8c\x01\n\x15public_ipv4_addresses\x18\x02 \x03(\x0b\x32\x30.kentik.synthetics.v202202.AgentMetadata.IpValueB&\x92\x41\x1f\x32\x1dList of public IPv4 addresses\xe2\x41\x01\x03R\x13publicIpv4Addresses\x12\x8b\x01\n\x16private_ipv6_addresses\x18\x03 \x03(\x0b\x32\x30.kentik.synthetics.v202202.AgentMetadata.IpValueB#\x92\x41 2\x1eList of private IPv6 addressesR\x14privateIpv6Addresses\x12\x8c\x01\n\x15public_ipv6_addresses\x18\x04 \x03(\x0b\x32\x30.kentik.synthetics.v202202.AgentMetadata.IpValueB&\x92\x41\x1f\x32\x1dList of public IPv6 addresses\xe2\x41\x01\x03R\x13publicIpv6Addresses\x1a\x1f\n\x07IpValue\x12\x14\n\x05value\x18\x01 \x01(\tR\x05value\"\xb2\x01\n\x08UserInfo\x12.\n\x02id\x18\x01 \x01(\tB\x1e\x92\x41\x17\x32\x15Unique ID of the user\xe2\x41\x01\x03R\x02id\x12\x39\n\x05\x65mail\x18\x02 \x01(\tB#\x92\x41\x1c\x32\x1a\x45-mail address of the user\xe2\x41\x01\x03R\x05\x65mail\x12;\n\tfull_name\x18\x03 \x01(\tB\x1e\x92\x41\x17\x32\x15\x46ull name of the user\xe2\x41\x01\x03R\x08\x66ullName\"\xc3\x06\n\x04Test\x12.\n\x02id\x18\x01 \x01(\tB\x1e\x92\x41\x17\x32\x15Unique ID of the test\xe2\x41\x01\x03R\x02id\x12\x37\n\x04name\x18\x02 \x01(\tB#\x92\x41 2\x1eUser selected name of the testR\x04name\x12)\n\x04type\x18\x03 \x01(\tB\x15\x92\x41\x12\x32\x10Type of the testR\x04type\x12\x62\n\x06status\x18\x05 \x01(\x0e\x32%.kentik.synthetics.v202202.TestStatusB#\x92\x41 2\x1eOperational status of the testR\x06status\x12\\\n\x08settings\x18\x06 \x01(\x0b\x32\'.kentik.synthetics.v202202.TestSettingsB\x17\x92\x41\x14\x32\x12Test configurationR\x08settings\x12S\n\x05\x63\x64\x61te\x18\x07 \x01(\x0b\x32\x1a.google.protobuf.TimestampB!\x92\x41\x1a\x32\x18\x43reation timestamp (UTC)\xe2\x41\x01\x03R\x05\x63\x64\x61te\x12\\\n\x05\x65\x64\x61te\x18\x08 \x01(\x0b\x32\x1a.google.protobuf.TimestampB*\x92\x41#2!Last modification timestamp (UTC)\xe2\x41\x01\x03R\x05\x65\x64\x61te\x12\x65\n\ncreated_by\x18\t \x01(\x0b\x32#.kentik.synthetics.v202202.UserInfoB!\x92\x41\x1a\x32\x18Identity of test creator\xe2\x41\x01\x03R\tcreatedBy\x12\x85\x01\n\x0flast_updated_by\x18\n \x01(\x0b\x32#.kentik.synthetics.v202202.UserInfoB8\x92\x41\x31\x32/Identity of use that has modified the test last\xe2\x41\x01\x03R\rlastUpdatedBy\x12\x43\n\x06labels\x18\x0b \x03(\tB+\x92\x41(2&Set of labels associated with the testR\x06labels\"\x94\x0c\n\x0cTestSettings\x12\x45\n\x08hostname\x18\x01 \x01(\x0b\x32\'.kentik.synthetics.v202202.HostnameTestH\x00R\x08hostname\x12\x33\n\x02ip\x18\x02 \x01(\x0b\x32!.kentik.synthetics.v202202.IpTestH\x00R\x02ip\x12<\n\x05\x61gent\x18\x03 \x01(\x0b\x32$.kentik.synthetics.v202202.AgentTestH\x00R\x05\x61gent\x12\x39\n\x04\x66low\x18\x04 \x01(\x0b\x32#.kentik.synthetics.v202202.FlowTestH\x00R\x04\x66low\x12\x36\n\x03\x64ns\x18\x05 \x01(\x0b\x32\".kentik.synthetics.v202202.DnsTestH\x00R\x03\x64ns\x12\x36\n\x03url\x18\x06 \x01(\x0b\x32\".kentik.synthetics.v202202.UrlTestH\x00R\x03url\x12\x46\n\x0cnetwork_grid\x18\x07 \x01(\x0b\x32!.kentik.synthetics.v202202.IpTestH\x00R\x0bnetworkGrid\x12\x46\n\tpage_load\x18\x08 \x01(\x0b\x32\'.kentik.synthetics.v202202.PageLoadTestH\x00R\x08pageLoad\x12?\n\x08\x64ns_grid\x18\t \x01(\x0b\x32\".kentik.synthetics.v202202.DnsTestH\x00R\x07\x64nsGrid\x12O\n\x0cnetwork_mesh\x18\x12 \x01(\x0b\x32*.kentik.synthetics.v202202.NetworkMeshTestH\x00R\x0bnetworkMesh\x12[\n\tagent_ids\x18\n \x03(\tB>\x92\x41;29IDs of agents assigned to run tasks on behalf of the testR\x08\x61gentIds\x12\x41\n\x05tasks\x18\x0b \x03(\tB+\x92\x41(2&List of task names to run for the testR\x05tasks\x12\xa9\x01\n\x0fhealth_settings\x18\x0c \x01(\x0b\x32).kentik.synthetics.v202202.HealthSettingsBU\x92\x41R2PHealth evaluation thresholds, acceptable responses and alarm activation settingsR\x0ehealthSettings\x12i\n\x04ping\x18\r \x01(\x0b\x32+.kentik.synthetics.v202202.TestPingSettingsB(\x92\x41%2#Ping tasks configuration parametersR\x04ping\x12q\n\x05trace\x18\x0e \x01(\x0b\x32,.kentik.synthetics.v202202.TestTraceSettingsB-\x92\x41*2(Traceroute task configuration parametersR\x05trace\x12@\n\x06period\x18\x0f \x01(\rB(\x92\x41%2#Test evaluation period (in seconds)R\x06period\x12\x81\x01\n\x06\x66\x61mily\x18\x10 \x01(\x0e\x32#.kentik.synthetics.v202202.IPFamilyBD\x92\x41\x41\x32?IP address family to select from available DNS name resolutionsR\x06\x66\x61mily\x12\x7f\n\x15notification_channels\x18\x11 \x03(\tBJ\x92\x41G2EList of IDs of notification channels for alarms triggered by the testR\x14notificationChannelsB\x0c\n\ndefinition\"\xb8\x03\n\x10TestPingSettings\x12K\n\x05\x63ount\x18\x01 \x01(\rB5\x92\x41\x32\x32\x30Number of probe packets to send in one iterationR\x05\x63ount\x12G\n\x08protocol\x18\x02 \x01(\tB+\x92\x41(2&Transport protocol to use (icmp | tcp)R\x08protocol\x12\x46\n\x04port\x18\x03 \x01(\rB2\x92\x41/2-Target port for TCP probes (ignored for ICMP)R\x04port\x12P\n\x07timeout\x18\x04 \x01(\rB6\x92\x41\x33\x32\x31Timeout in milliseconds for execution of the taskR\x07timeout\x12<\n\x05\x64\x65lay\x18\x05 \x01(\x02\x42&\x92\x41#2!Inter-probe delay in millisecondsR\x05\x64\x65lay\x12\x36\n\x04\x64scp\x18\x06 \x01(\rB\"\x92\x41\x1f\x32\x1d--- <Not implemented yet> ---R\x04\x64scp\"\x95\x04\n\x11TestTraceSettings\x12K\n\x05\x63ount\x18\x01 \x01(\rB5\x92\x41\x32\x32\x30Number of probe packets to send in one iterationR\x05\x63ount\x12M\n\x08protocol\x18\x02 \x01(\tB1\x92\x41.2,Transport protocol to use (icmp | tcp | udp)R\x08protocol\x12M\n\x04port\x18\x03 \x01(\rB9\x92\x41\x36\x32\x34Target port for TCP or UDP probes (ignored for ICMP)R\x04port\x12P\n\x07timeout\x18\x04 \x01(\rB6\x92\x41\x33\x32\x31Timeout in milliseconds for execution of the taskR\x07timeout\x12M\n\x05limit\x18\x05 \x01(\rB7\x92\x41\x34\x32\x32Maximum number of hops to probe (i.e. maximum TTL)R\x05limit\x12<\n\x05\x64\x65lay\x18\x06 \x01(\x02\x42&\x92\x41#2!Inter-probe delay in millisecondsR\x05\x64\x65lay\x12\x36\n\x04\x64scp\x18\x07 \x01(\rB\"\x92\x41\x1f\x32\x1d--- <Not implemented yet> ---R\x04\x64scp\"\xc6\x03\n\x12\x41\x63tivationSettings\x12\x82\x01\n\x0cgrace_period\x18\x01 \x01(\tB_\x92\x41\\2ZPeriod of healthy status in minutes within the time window not cancelling alarm activationR\x0bgracePeriod\x12N\n\ttime_unit\x18\x02 \x01(\tB1\x92\x41.2,Time unit for specifying time window (m | h)R\x08timeUnit\x12]\n\x0btime_window\x18\x03 \x01(\tB<\x92\x41\x39\x32\x37Time window for evaluating of test for alarm activationR\ntimeWindow\x12|\n\x05times\x18\x04 \x01(\tBf\x92\x41\x63\x32\x61Number of occurrences of unhealthy test status within the time window triggering alarm activationR\x05times\"\xf0\x16\n\x0eHealthSettings\x12\x86\x01\n\x10latency_critical\x18\x01 \x01(\x02\x42[\x92\x41X2VThreshold for ping or DNS response latency (in microseconds) to trigger critical alarmR\x0flatencyCritical\x12\x83\x01\n\x0flatency_warning\x18\x02 \x01(\x02\x42Z\x92\x41W2UThreshold for ping or DNS response latency (in microseconds) to trigger warning alarmR\x0elatencyWarning\x12v\n\x14packet_loss_critical\x18\x03 \x01(\x02\x42\x44\x92\x41\x41\x32?Threshold for ping packet loss (in %) to trigger critical alarmR\x12packetLossCritical\x12s\n\x13packet_loss_warning\x18\x04 \x01(\x02\x42\x43\x92\x41@2>Threshold for ping packet loss (in %) to trigger warning alarmR\x11packetLossWarning\x12s\n\x0fjitter_critical\x18\x05 \x01(\x02\x42J\x92\x41G2EThreshold for ping jitter (in microseconds) to trigger critical alarmR\x0ejitterCritical\x12q\n\x0ejitter_warning\x18\x06 \x01(\x02\x42J\x92\x41G2EThreshold for ping jitter (in microseconds) to trigger critical alarmR\rjitterWarning\x12\x88\x01\n\x15http_latency_critical\x18\x07 \x01(\x02\x42T\x92\x41Q2OThreshold for HTTP response latency (in microseconds) to trigger critical alarmR\x13httpLatencyCritical\x12\x85\x01\n\x14http_latency_warning\x18\x08 \x01(\x02\x42S\x92\x41P2NThreshold for HTTP response latency (in microseconds) to trigger warning alarmR\x12httpLatencyWarning\x12\x61\n\x10http_valid_codes\x18\t \x03(\rB7\x92\x41\x34\x32\x32List of HTTP status codes indicating healthy stateR\x0ehttpValidCodes\x12^\n\x0f\x64ns_valid_codes\x18\n \x03(\rB6\x92\x41\x33\x32\x31List of DNS status codes indicating healthy stateR\rdnsValidCodes\x12\xa9\x01\n\x17latency_critical_stddev\x18\x0b \x01(\x02\x42q\x92\x41n2lThreshold for standard deviation (in microseconds) of ping or DNS response latency to trigger critical alarmR\x15latencyCriticalStddev\x12\xa6\x01\n\x16latency_warning_stddev\x18\x0c \x01(\x02\x42p\x92\x41m2kThreshold for standard deviation (in microseconds) of ping or DNS response latency to trigger warning alarmR\x14latencyWarningStddev\x12\x96\x01\n\x16jitter_critical_stddev\x18\r \x01(\x02\x42`\x92\x41]2[Threshold for standard deviation of ping jitter (in microseconds) to trigger critical alarmR\x14jitterCriticalStddev\x12\x93\x01\n\x15jitter_warning_stddev\x18\x0e \x01(\x02\x42_\x92\x41\\2ZThreshold for standard deviation of ping jitter (in microseconds) to trigger warning alarmR\x13jitterWarningStddev\x12\xab\x01\n\x1chttp_latency_critical_stddev\x18\x0f \x01(\x02\x42j\x92\x41g2eThreshold for standard deviation of HTTP response latency (in microseconds) to trigger critical alarmR\x19httpLatencyCriticalStddev\x12\xa8\x01\n\x1bhttp_latency_warning_stddev\x18\x10 \x01(\x02\x42i\x92\x41\x66\x32\x64Threshold for standard deviation of HTTP response latency (in microseconds) to trigger warning alarmR\x18httpLatencyWarningStddev\x12\xad\x01\n\x1bunhealthy_subtest_threshold\x18\x11 \x01(\rBm\x92\x41j2hNumber of tasks (across all agents) that must report unhealthy status in order for alarm to be triggeredR\x19unhealthySubtestThreshold\x12m\n\nactivation\x18\x12 \x01(\x0b\x32-.kentik.synthetics.v202202.ActivationSettingsB\x1e\x92\x41\x1b\x32\x19\x41larm activation settingsR\nactivation\x12\x8b\x01\n\x13\x63\x65rt_expiry_warning\x18\x13 \x01(\rB[\x92\x41X2VThreshold for remaining validity of TLS certificate (in days) to trigger warning alarmR\x11\x63\x65rtExpiryWarning\x12\x8e\x01\n\x14\x63\x65rt_expiry_critical\x18\x14 \x01(\rB\\\x92\x41Y2WThreshold for remaining validity of TLS certificate (in days) to trigger critical alarmR\x12\x63\x65rtExpiryCritical\x12\x88\x01\n\rdns_valid_ips\x18\x15 \x01(\tBd\x92\x41\x61\x32_Comma separated list of IP addresses expected to be received in response to DNS A or AAAA queryR\x0b\x64nsValidIps\"X\n\x0cHostnameTest\x12H\n\x06target\x18\x01 \x01(\tB0\x92\x41-2+Fully qualified DNS name of the target hostR\x06target\"H\n\x06IpTest\x12>\n\x07targets\x18\x01 \x03(\tB$\x92\x41!2\x1fList of IP addresses of targetsR\x07targets\"\xbf\x01\n\tAgentTest\x12\x33\n\x06target\x18\x01 \x01(\tB\x1b\x92\x41\x18\x32\x16ID of the target agentR\x06target\x12}\n\x0cuse_local_ip\x18\x02 \x01(\x08\x42[\x92\x41X2VBoolean value indicating whether to use local (private) IP address of the target agentR\nuseLocalIp\"\x8b\x07\n\x08\x46lowTest\x12\x87\x01\n\x06target\x18\x01 \x01(\tBo\x92\x41l2jTarget ASN, CDN, Country, Region of City for autonomous test (type of value depends on flow test sub-type)R\x06target\x12\x9e\x01\n\x1etarget_refresh_interval_millis\x18\x02 \x01(\rBY\x92\x41V2TPeriod (in milliseconds) for refreshing list of targets based on available flow dataR\x1btargetRefreshIntervalMillis\x12^\n\rmax_providers\x18\x03 \x01(\rB9\x92\x41\x36\x32\x34Maximum number of IP providers to track autonomouslyR\x0cmaxProviders\x12p\n\x0emax_ip_targets\x18\x04 \x01(\rBJ\x92\x41G2EMaximum number of target IP addresses to select based flow data queryR\x0cmaxIpTargets\x12W\n\x04type\x18\x05 \x01(\tBC\x92\x41@2>Autonomous test sub-type (asn | cdn | country | region | city)R\x04type\x12\xa8\x01\n\x0einet_direction\x18\x06 \x01(\tB\x80\x01\x92\x41}2{Selection of address from flow data (src = source address in inbound flows | dst = destination addresses in outbound flows)R\rinetDirection\x12~\n\tdirection\x18\x07 \x01(\tB`\x92\x41]2[Direction of flows to match target attribute for extraction of target addresses (src | dst)R\tdirection\"\xdc\x02\n\x07\x44nsTest\x12>\n\x06target\x18\x01 \x01(\tB&\x92\x41#2!Fully qualified DNS name to queryR\x06target\x12\x33\n\x07timeout\x18\x02 \x01(\rB\x19\x92\x41\x16\x32\x14--- <deprecated> ---R\x07timeout\x12g\n\x0brecord_type\x18\x03 \x01(\x0e\x32$.kentik.synthetics.v202202.DNSRecordB \x92\x41\x1d\x32\x1bType of DNS record to queryR\nrecordType\x12\x42\n\x07servers\x18\x04 \x03(\tB(\x92\x41%2#List of IP addresses of DNS serversR\x07servers\x12/\n\x04port\x18\x05 \x01(\rB\x1b\x92\x41\x18\x32\x16Target DNS server portR\x04port\"\xc6\x04\n\x07UrlTest\x12\x39\n\x06target\x18\x01 \x01(\tB!\x92\x41\x1e\x32\x1cHTTP or HTTPS URL to requestR\x06target\x12I\n\x07timeout\x18\x02 \x01(\rB/\x92\x41,2*HTTP transaction timeout (in milliseconds)R\x07timeout\x12Q\n\x06method\x18\x03 \x01(\tB9\x92\x41\x36\x32\x34HTTP method to use (GET | HEAD | PATCH | POST | PUT)R\x06method\x12\x7f\n\x07headers\x18\x04 \x03(\x0b\x32/.kentik.synthetics.v202202.UrlTest.HeadersEntryB4\x92\x41\x31\x32/Map of HTTP header values keyed by header namesR\x07headers\x12*\n\x04\x62ody\x18\x05 \x01(\tB\x16\x92\x41\x13\x32\x11HTTP request bodyR\x04\x62ody\x12y\n\x11ignore_tls_errors\x18\x06 \x01(\x08\x42M\x92\x41J2HBoolean indicating whether to ignore TLS certificate verification errorsR\x0fignoreTlsErrors\x1a:\n\x0cHeadersEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value:\x02\x38\x01\"\xac\x05\n\x0cPageLoadTest\x12\x39\n\x06target\x18\x01 \x01(\tB!\x92\x41\x1e\x32\x1cHTTP or HTTPS URL to requestR\x06target\x12I\n\x07timeout\x18\x02 \x01(\rB/\x92\x41,2*HTTP transaction timeout (in milliseconds)R\x07timeout\x12\x84\x01\n\x07headers\x18\x03 \x03(\x0b\x32\x34.kentik.synthetics.v202202.PageLoadTest.HeadersEntryB4\x92\x41\x31\x32/Map of HTTP header values keyed by header namesR\x07headers\x12y\n\x11ignore_tls_errors\x18\x04 \x01(\x08\x42M\x92\x41J2HBoolean indicating whether to ignore TLS certificate verification errorsR\x0fignoreTlsErrors\x12\x96\x01\n\rcss_selectors\x18\x05 \x03(\x0b\x32\x39.kentik.synthetics.v202202.PageLoadTest.CssSelectorsEntryB6\x92\x41\x33\x32\x31Map of CSS selector values keyed by selector nameR\x0c\x63ssSelectors\x1a:\n\x0cHeadersEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value:\x02\x38\x01\x1a?\n\x11\x43ssSelectorsEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n\x05value\x18\x02 \x01(\tR\x05value:\x02\x38\x01\"\x91\x01\n\x0fNetworkMeshTest\x12~\n\x0cuse_local_ip\x18\x01 \x01(\x08\x42\\\x92\x41Y2WBoolean value indicating whether to use local (private) IP address of the target agentsR\nuseLocalIp\"\xc7\x02\n\nMetricData\x12\x36\n\x07\x63urrent\x18\x01 \x01(\rB\x1c\x92\x41\x19\x32\x17\x43urrent value of metricR\x07\x63urrent\x12?\n\x0brolling_avg\x18\x02 \x01(\rB\x1e\x92\x41\x1b\x32\x19Rolling average of metricR\nrollingAvg\x12[\n\x0erolling_stddev\x18\x03 \x01(\rB4\x92\x41\x31\x32/Rolling average of standard deviation of metricR\rrollingStddev\x12\x63\n\x06health\x18\x04 \x01(\tBK\x92\x41H2FHealth evaluation status for the metric (healthy | warning | critical)R\x06health\"\xaf\x01\n\x0ePacketLossData\x12\x38\n\x07\x63urrent\x18\x01 \x01(\x01\x42\x1e\x92\x41\x1b\x32\x19\x43urrent packet loss valueR\x07\x63urrent\x12\x63\n\x06health\x18\x02 \x01(\tBK\x92\x41H2FHealth evaluation status for the metric (healthy | warning | critical)R\x06health\"\xd6\x03\n\x0bPingResults\x12\x45\n\x06target\x18\x01 \x01(\tB-\x92\x41*2(Hostname or address of the probed targetR\x06target\x12n\n\x0bpacket_loss\x18\x02 \x01(\x0b\x32).kentik.synthetics.v202202.PacketLossDataB\"\x92\x41\x1f\x32\x1dPacket loss metric and healthR\npacketLoss\x12\x66\n\x07latency\x18\x03 \x01(\x0b\x32%.kentik.synthetics.v202202.MetricDataB%\x92\x41\"2 Packet latency metric and healthR\x07latency\x12o\n\x06jitter\x18\x04 \x01(\x0b\x32%.kentik.synthetics.v202202.MetricDataB0\x92\x41-2+Latency jitter (variance) metric and healthR\x06jitter\x12\x37\n\x06\x64st_ip\x18\x05 \x01(\tB \x92\x41\x1d\x32\x1bIP address of probed targetR\x05\x64stIp\"\xf9\x01\n\x10HTTPResponseData\x12\x34\n\x06status\x18\x01 \x01(\rB\x1c\x92\x41\x19\x32\x17HTTP status in responseR\x06status\x12>\n\x04size\x18\x02 \x01(\rB*\x92\x41\'2%Total size of  received response bodyR\x04size\x12o\n\x04\x64\x61ta\x18\x03 \x01(\tB[\x92\x41X2VDetailed information about transaction timing, connection characteristics and responseR\x04\x64\x61ta\"\xe4\x02\n\x0bHTTPResults\x12.\n\x06target\x18\x01 \x01(\tB\x16\x92\x41\x13\x32\x11Target probed URLR\x06target\x12m\n\x07latency\x18\x02 \x01(\x0b\x32%.kentik.synthetics.v202202.MetricDataB,\x92\x41)2\'HTTP response latency metric and healthR\x07latency\x12v\n\x08response\x18\x04 \x01(\x0b\x32+.kentik.synthetics.v202202.HTTPResponseDataB-\x92\x41*2(Information about received HTTP responseR\x08response\x12>\n\x06\x64st_ip\x18\x05 \x01(\tB\'\x92\x41$2\"IP address of probed target serverR\x05\x64stIp\"\x87\x01\n\x0f\x44NSResponseData\x12\x30\n\x06status\x18\x01 \x01(\rB\x18\x92\x41\x15\x32\x13Received DNS statusR\x06status\x12\x42\n\x04\x64\x61ta\x18\x02 \x01(\tB.\x92\x41+2)Text rendering of received DNS resolutionR\x04\x64\x61ta\"\xdd\x02\n\nDNSResults\x12/\n\x06target\x18\x01 \x01(\tB\x17\x92\x41\x14\x32\x12Queried DNS recordR\x06target\x12:\n\x06server\x18\x02 \x01(\tB\"\x92\x41\x1f\x32\x1d\x44NS server used for the queryR\x06server\x12l\n\x07latency\x18\x03 \x01(\x0b\x32%.kentik.synthetics.v202202.MetricDataB+\x92\x41(2&DNS response latency metric and healthR\x07latency\x12t\n\x08response\x18\x05 \x01(\x0b\x32*.kentik.synthetics.v202202.DNSResponseDataB,\x92\x41)2\'Information about received DNS responseR\x08response\"\x83\x03\n\x0bTaskResults\x12\x65\n\x04ping\x18\x01 \x01(\x0b\x32&.kentik.synthetics.v202202.PingResultsB\'\x92\x41$2\"Entry containing ping task resultsH\x00R\x04ping\x12\x65\n\x04http\x18\x02 \x01(\x0b\x32&.kentik.synthetics.v202202.HTTPResultsB\'\x92\x41$2\"Entry containing HTTP task resultsH\x00R\x04http\x12\x61\n\x03\x64ns\x18\x03 \x01(\x0b\x32%.kentik.synthetics.v202202.DNSResultsB&\x92\x41#2!Entry containing DNS task resultsH\x00R\x03\x64ns\x12\x36\n\x06health\x18\x04 \x01(\tB\x1e\x92\x41\x1b\x32\x19Health status of the taskR\x06healthB\x0b\n\ttask_type\"\x9e\x02\n\x0c\x41gentResults\x12\x41\n\x08\x61gent_id\x18\x01 \x01(\tB&\x92\x41#2!ID of the agent providing resultsR\x07\x61gentId\x12\x62\n\x06health\x18\x02 \x01(\tBJ\x92\x41G2EOverall health status of all task for the test executed by this agentR\x06health\x12g\n\x05tasks\x18\x03 \x03(\x0b\x32&.kentik.synthetics.v202202.TaskResultsB)\x92\x41&2$List of results for individual tasksR\x05tasks\"\xea\x02\n\x0bTestResults\x12K\n\x07test_id\x18\x01 \x01(\tB2\x92\x41/2-ID of the test for which results are providedR\x06testId\x12L\n\x04time\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.TimestampB\x1c\x92\x41\x19\x32\x17Results timestamp (UTC)R\x04time\x12\x36\n\x06health\x18\x03 \x01(\tB\x1e\x92\x41\x1b\x32\x19Health status of the testR\x06health\x12\x87\x01\n\x06\x61gents\x18\x04 \x03(\x0b\x32\'.kentik.synthetics.v202202.AgentResultsBF\x92\x41\x43\x32\x41List of results from agents executing tasks on behalf of the testR\x06\x61gents\"\x81\x01\n\x05Stats\x12,\n\x07\x61verage\x18\x01 \x01(\x05\x42\x12\x92\x41\x0f\x32\rAverage valueR\x07\x61verage\x12$\n\x03min\x18\x02 \x01(\x05\x42\x12\x92\x41\x0f\x32\rMinimum valueR\x03min\x12$\n\x03max\x18\x03 \x01(\x05\x42\x12\x92\x41\x0f\x32\rMaximum valueR\x03max\"\xc1\x02\n\x08Location\x12\x43\n\x08latitude\x18\x08 \x01(\x01\x42\'\x92\x41$2\"Latitude in signed decimal degreesR\x08latitude\x12\x46\n\tlongitude\x18\t \x01(\x01\x42(\x92\x41%2#Longitude in signed decimal degreesR\tlongitude\x12\x36\n\x07\x63ountry\x18\x01 \x01(\tB\x1c\x92\x41\x19\x32\x17\x43ountry of the locationR\x07\x63ountry\x12\x41\n\x06region\x18\x02 \x01(\tB)\x92\x41&2$Geographic region within the countryR\x06region\x12-\n\x04\x63ity\x18\x03 \x01(\tB\x19\x92\x41\x16\x32\x14\x43ity of the locationR\x04\x63ity\"\x86\x05\n\x07NetNode\x12H\n\x02ip\x18\x02 \x01(\tB8\x92\x41\x35\x32\x33IP address of the node in standard textual notationR\x02ip\x12?\n\x03\x61sn\x18\x03 \x01(\rB-\x92\x41*2(AS number owning the address of the nodeR\x03\x61sn\x12K\n\x07\x61s_name\x18\x04 \x01(\tB2\x92\x41/2-Name of the AS owning the address of the nodeR\x06\x61sName\x12h\n\x08location\x18\x05 \x01(\x0b\x32#.kentik.synthetics.v202202.LocationB\'\x92\x41$2\"Location of IP address of the nodeR\x08location\x12Y\n\x08\x64ns_name\x18\x06 \x01(\tB>\x92\x41;29DNS name of the node (obtained by reverse DNS resolution)R\x07\x64nsName\x12\x66\n\tdevice_id\x18\x07 \x01(\tBI\x92\x41\x46\x32\x44ID of the device corresponding with the node in Kentik configurationR\x08\x64\x65viceId\x12v\n\x07site_id\x18\x08 \x01(\tB]\x92\x41Z2XID of the site containing the device corresponding with the node in Kentik configurationR\x06siteId\"\xf3\x01\n\x08TraceHop\x12v\n\x07latency\x18\x03 \x01(\x05\x42\\\x92\x41Y2WRound-trip packet latency to the node (in microseconds) - 0 if no response was receivedR\x07latency\x12o\n\x07node_id\x18\x05 \x01(\tBV\x92\x41S2QID of the node for this hop in the Nodes map  - empty if no response was receivedR\x06nodeId\"\xfc\x01\n\tPathTrace\x12:\n\x07\x61s_path\x18\x01 \x03(\x05\x42!\x92\x41\x1e\x32\x1c\x41S path of the network traceR\x06\x61sPath\x12Z\n\x0bis_complete\x18\x02 \x01(\x08\x42\x39\x92\x41\x36\x32\x34Indication whether response from target was receivedR\nisComplete\x12W\n\x04hops\x18\x06 \x03(\x0b\x32#.kentik.synthetics.v202202.TraceHopB\x1e\x92\x41\x1b\x32\x19List of hops in the traceR\x04hops\"\xa8\x04\n\x04Path\x12H\n\x08\x61gent_id\x18\x01 \x01(\tB-\x92\x41*2(ID of the agent generating the path dataR\x07\x61gentId\x12\x46\n\ttarget_ip\x18\x03 \x01(\tB)\x92\x41&2$IP address of the target of the pathR\x08targetIp\x12j\n\thop_count\x18\x04 \x01(\x0b\x32 .kentik.synthetics.v202202.StatsB+\x92\x41(2&Hop count statistics across all tracesR\x08hopCount\x12]\n\x12max_as_path_length\x18\x07 \x01(\x05\x42\x30\x92\x41-2+Maximum length of AS path across all tracesR\x0fmaxAsPathLength\x12]\n\x06traces\x18\x08 \x03(\x0b\x32$.kentik.synthetics.v202202.PathTraceB\x1f\x92\x41\x1c\x32\x1a\x44\x61ta for individual tracesR\x06traces\x12\x64\n\x04time\x18\t \x01(\x0b\x32\x1a.google.protobuf.TimestampB4\x92\x41\x31\x32/Timestamp (UTC) of initiation of the path traceR\x04time\"\x95\x05\n\x19GetResultsForTestsRequest\x12I\n\x03ids\x18\x01 \x03(\tB7\x92\x41\x30\x32.List of test IDs for which to retrieve results\xe2\x41\x01\x02R\x03ids\x12y\n\nstart_time\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.TimestampB>\x92\x41\x37\x32\x35Timestamp of the oldest results to include in results\xe2\x41\x01\x02R\tstartTime\x12u\n\x08\x65nd_time\x18\x03 \x01(\x0b\x32\x1a.google.protobuf.TimestampB>\x92\x41\x37\x32\x35Timestamp of the newest results to include in results\xe2\x41\x01\x02R\x07\x65ndTime\x12P\n\tagent_ids\x18\x04 \x03(\tB3\x92\x41\x30\x32.List of agent IDs from which to return resultsR\x08\x61gentIds\x12]\n\x07targets\x18\x05 \x03(\tBC\x92\x41@2>List of targets (test dependent) for which to retrieve resultsR\x07targets\x12\x89\x01\n\taggregate\x18\x06 \x01(\x08\x42k\x92\x41h2fIf true, retrieve result aggregated across the requested time period, else return complete time seriesR\taggregate\"^\n\x1aGetResultsForTestsResponse\x12@\n\x07results\x18\x01 \x03(\x0b\x32&.kentik.synthetics.v202202.TestResultsR\x07results\"\x8a\x04\n\x16GetTraceForTestRequest\x12M\n\x02id\x18\x01 \x01(\tB=\x92\x41:28ID of test for which to retrieve network path trace dataR\x02id\x12y\n\nstart_time\x18\x02 \x01(\x0b\x32\x1a.google.protobuf.TimestampB>\x92\x41\x37\x32\x35Timestamp of the oldest results to include in results\xe2\x41\x01\x02R\tstartTime\x12u\n\x08\x65nd_time\x18\x03 \x01(\x0b\x32\x1a.google.protobuf.TimestampB>\x92\x41\x37\x32\x35Timestamp of the newest results to include in results\xe2\x41\x01\x02R\x07\x65ndTime\x12P\n\tagent_ids\x18\x04 \x03(\tB3\x92\x41\x30\x32.List of agent IDs from which to return resultsR\x08\x61gentIds\x12]\n\ntarget_ips\x18\x05 \x03(\tB>\x92\x41;29List of target IP addresses for which to retrieve resultsR\ttargetIps\"\xe6\x02\n\x17GetTraceForTestResponse\x12\x8b\x01\n\x05nodes\x18\x01 \x03(\x0b\x32=.kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntryB6\x92\x41\x33\x32\x31Map of network node information keyed by node IDsR\x05nodes\x12_\n\x05paths\x18\x02 \x03(\x0b\x32\x1f.kentik.synthetics.v202202.PathB(\x92\x41%2#List of retrieved network path dataR\x05paths\x1a\\\n\nNodesEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12\x38\n\x05value\x18\x02 \x01(\x0b\x32\".kentik.synthetics.v202202.NetNodeR\x05value:\x02\x38\x01\"\x13\n\x11ListAgentsRequest\"\xd4\x01\n\x12ListAgentsResponse\x12W\n\x06\x61gents\x18\x01 \x03(\x0b\x32 .kentik.synthetics.v202202.AgentB\x1d\x92\x41\x1a\x32\x18List of available agentsR\x06\x61gents\x12\x65\n\rinvalid_count\x18\x02 \x01(\rB@\x92\x41=2;Number of invalid entries encountered while collecting dataR\x0cinvalidCount\"E\n\x0fGetAgentRequest\x12\x32\n\x02id\x18\x01 \x01(\tB\"\x92\x41\x1b\x32\x19ID of the requested agent\xe2\x41\x01\x02R\x02id\"t\n\x10GetAgentResponse\x12`\n\x05\x61gent\x18\x01 \x01(\x0b\x32 .kentik.synthetics.v202202.AgentB(\x92\x41%2#Agent configuration and status dataR\x05\x61gent\"k\n\x12UpdateAgentRequest\x12U\n\x05\x61gent\x18\x01 \x01(\x0b\x32 .kentik.synthetics.v202202.AgentB\x1d\x92\x41\x1a\x32\x18\x41gent configuration dataR\x05\x61gent\"w\n\x13UpdateAgentResponse\x12`\n\x05\x61gent\x18\x01 \x01(\x0b\x32 .kentik.synthetics.v202202.AgentB(\x92\x41%2#Agent configuration and status dataR\x05\x61gent\"L\n\x12\x44\x65leteAgentRequest\x12\x36\n\x02id\x18\x01 \x01(\tB&\x92\x41\x1f\x32\x1dID of the agent to be deleted\xe2\x41\x01\x02R\x02id\"\x15\n\x13\x44\x65leteAgentResponse\"\x12\n\x10ListTestsRequest\"\xe1\x01\n\x11ListTestsResponse\x12\x65\n\x05tests\x18\x01 \x03(\x0b\x32\x1f.kentik.synthetics.v202202.TestB.\x92\x41+2)List of configured active or paused testsR\x05tests\x12\x65\n\rinvalid_count\x18\x02 \x01(\rB@\x92\x41=2;Number of invalid entries encountered while collecting dataR\x0cinvalidCount\"j\n\x11\x43reateTestRequest\x12U\n\x04test\x18\x01 \x01(\x0b\x32\x1f.kentik.synthetics.v202202.TestB \x92\x41\x19\x32\x17Test configuration data\xe2\x41\x01\x02R\x04test\"r\n\x12\x43reateTestResponse\x12\\\n\x04test\x18\x01 \x01(\x0b\x32\x1f.kentik.synthetics.v202202.TestB\'\x92\x41$2\"Test configuration and status dataR\x04test\"?\n\x0eGetTestRequest\x12-\n\x02id\x18\x01 \x01(\tB\x1d\x92\x41\x16\x32\x14ID of requested test\xe2\x41\x01\x02R\x02id\"o\n\x0fGetTestResponse\x12\\\n\x04test\x18\x01 \x01(\x0b\x32\x1f.kentik.synthetics.v202202.TestB\'\x92\x41$2\"Test configuration and status dataR\x04test\"f\n\x11UpdateTestRequest\x12Q\n\x04test\x18\x01 \x01(\x0b\x32\x1f.kentik.synthetics.v202202.TestB\x1c\x92\x41\x19\x32\x17Test configuration dataR\x04test\"r\n\x12UpdateTestResponse\x12\\\n\x04test\x18\x01 \x01(\x0b\x32\x1f.kentik.synthetics.v202202.TestB\'\x92\x41$2\"Test configuration and status dataR\x04test\"J\n\x11\x44\x65leteTestRequest\x12\x35\n\x02id\x18\x01 \x01(\tB%\x92\x41\x1e\x32\x1cID of the test to be deleted\xe2\x41\x01\x02R\x02id\"\x14\n\x12\x44\x65leteTestResponse\"\xba\x01\n\x14SetTestStatusRequest\x12\x46\n\x02id\x18\x01 \x01(\tB6\x92\x41/2-ID of the test which status is to be modified\xe2\x41\x01\x02R\x02id\x12Z\n\x06status\x18\x02 \x01(\x0e\x32%.kentik.synthetics.v202202.TestStatusB\x1b\x92\x41\x14\x32\x12Target test status\xe2\x41\x01\x02R\x06status\"\x17\n\x15SetTestStatusResponse*a\n\rImplementType\x12\x1e\n\x1aIMPLEMENT_TYPE_UNSPECIFIED\x10\x00\x12\x17\n\x13IMPLEMENT_TYPE_RUST\x10\x01\x12\x17\n\x13IMPLEMENT_TYPE_NODE\x10\x02*]\n\x08IPFamily\x12\x19\n\x15IP_FAMILY_UNSPECIFIED\x10\x00\x12\x10\n\x0cIP_FAMILY_V4\x10\x01\x12\x10\n\x0cIP_FAMILY_V6\x10\x02\x12\x12\n\x0eIP_FAMILY_DUAL\x10\x03*r\n\nTestStatus\x12\x1b\n\x17TEST_STATUS_UNSPECIFIED\x10\x00\x12\x16\n\x12TEST_STATUS_ACTIVE\x10\x01\x12\x16\n\x12TEST_STATUS_PAUSED\x10\x02\x12\x17\n\x13TEST_STATUS_DELETED\x10\x03*q\n\x0b\x41gentStatus\x12\x1c\n\x18\x41GENT_STATUS_UNSPECIFIED\x10\x00\x12\x13\n\x0f\x41GENT_STATUS_OK\x10\x01\x12\x15\n\x11\x41GENT_STATUS_WAIT\x10\x02\x12\x18\n\x14\x41GENT_STATUS_DELETED\x10\x03*\xc8\x01\n\tDNSRecord\x12\x1a\n\x16\x44NS_RECORD_UNSPECIFIED\x10\x00\x12\x10\n\x0c\x44NS_RECORD_A\x10\x01\x12\x13\n\x0f\x44NS_RECORD_AAAA\x10\x02\x12\x14\n\x10\x44NS_RECORD_CNAME\x10\x03\x12\x14\n\x10\x44NS_RECORD_DNAME\x10\x04\x12\x11\n\rDNS_RECORD_NS\x10\x05\x12\x11\n\rDNS_RECORD_MX\x10\x06\x12\x12\n\x0e\x44NS_RECORD_PTR\x10\x07\x12\x12\n\x0e\x44NS_RECORD_SOA\x10\x08\x32\xc6\x05\n\x15SyntheticsDataService\x12\xb3\x02\n\x12GetResultsForTests\x12\x34.kentik.synthetics.v202202.GetResultsForTestsRequest\x1a\x35.kentik.synthetics.v202202.GetResultsForTestsResponse\"\xaf\x01\x92\x41s\x12\x15Get results for tests\x1a\x46Returns probe results for a set of tests for specified period of time.*\x12GetResultsForTests\xf2\xd7\x02\x0fsynthetics:read\x82\xd3\xe4\x93\x02 \"\x1b/synthetics/v202202/results:\x01*\x12\xd0\x02\n\x0fGetTraceForTest\x12\x31.kentik.synthetics.v202202.GetTraceForTestRequest\x1a\x32.kentik.synthetics.v202202.GetTraceForTestResponse\"\xd5\x01\x92\x41\x9a\x01\x12!Get network trace data for a test\x1a\x64Get network trace data for a specific synthetic test. The test must have traceroute task configured.*\x0fGetTraceForTest\xf2\xd7\x02\x0fsynthetics:read\x82\xd3\xe4\x93\x02\x1e\"\x19/synthetics/v202202/trace:\x01*\x1a$\xca\x41\x13grpc.api.kentik.com\xea\xd7\x02\nsynthetics2\xbc\x16\n\x16SyntheticsAdminService\x12\x8d\x02\n\nListAgents\x12,.kentik.synthetics.v202202.ListAgentsRequest\x1a-.kentik.synthetics.v202202.ListAgentsResponse\"\xa1\x01\x92\x41\x63\x12\x15List available agents\x1a>Returns list of all synthetic agents available in the account.*\nListAgents\xf2\xd7\x02\x15\x61\x64min.synthetics:read\x82\xd3\xe4\x93\x02\x1c\x12\x1a/synthetics/v202202/agents\x12\x8d\x02\n\x08GetAgent\x12*.kentik.synthetics.v202202.GetAgentRequest\x1a+.kentik.synthetics.v202202.GetAgentResponse\"\xa7\x01\x92\x41\x64\x12\x1eGet information about an agent\x1a\x38Returns information about the requested synthetic agent.*\x08GetAgent\xf2\xd7\x02\x15\x61\x64min.synthetics:read\x82\xd3\xe4\x93\x02!\x12\x1f/synthetics/v202202/agents/{id}\x12\x97\x02\n\x0bUpdateAgent\x12-.kentik.synthetics.v202202.UpdateAgentRequest\x1a..kentik.synthetics.v202202.UpdateAgentResponse\"\xa8\x01\x92\x41[\x12 Update configuration of an agent\x1a*Update configuration of a synthetic agent.*\x0bUpdateAgent\xf2\xd7\x02\x16\x61\x64min.synthetics:write\x82\xd3\xe4\x93\x02*\x1a%/synthetics/v202202/agents/{agent.id}:\x01*\x12\xad\x02\n\x0b\x44\x65leteAgent\x12-.kentik.synthetics.v202202.DeleteAgentRequest\x1a..kentik.synthetics.v202202.DeleteAgentResponse\"\xbe\x01\x92\x41z\x12\x0f\x44\x65lete an agent\x1aZDeletes the requested agent. The deleted agent is removed from configuration of all tests.*\x0b\x44\x65leteAgent\xf2\xd7\x02\x16\x61\x64min.synthetics:write\x82\xd3\xe4\x93\x02!*\x1f/synthetics/v202202/agents/{id}\x12\x86\x02\n\tListTests\x12+.kentik.synthetics.v202202.ListTestsRequest\x1a,.kentik.synthetics.v202202.ListTestsResponse\"\x9d\x01\x92\x41`\x12\x0eList all tests\x1a\x43Returns a list of all configured active and paused synthetic tests.*\tListTests\xf2\xd7\x02\x15\x61\x64min.synthetics:read\x82\xd3\xe4\x93\x02\x1b\x12\x19/synthetics/v202202/tests\x12\x8f\x02\n\nCreateTest\x12,.kentik.synthetics.v202202.CreateTestRequest\x1a-.kentik.synthetics.v202202.CreateTestResponse\"\xa3\x01\x92\x41\x62\x12\rCreate a test\x1a\x45\x43reate synthetic test based on configuration provided in the request.*\nCreateTest\xf2\xd7\x02\x16\x61\x64min.synthetics:write\x82\xd3\xe4\x93\x02\x1e\"\x19/synthetics/v202202/tests:\x01*\x12\x90\x02\n\x07GetTest\x12).kentik.synthetics.v202202.GetTestRequest\x1a*.kentik.synthetics.v202202.GetTestResponse\"\xad\x01\x92\x41k\x12\x1cGet information about a test\x1a\x42Returns configuration and status for the requested synthetic test.*\x07GetTest\xf2\xd7\x02\x15\x61\x64min.synthetics:read\x82\xd3\xe4\x93\x02 \x12\x1e/synthetics/v202202/tests/{id}\x12\x8f\x02\n\nUpdateTest\x12,.kentik.synthetics.v202202.UpdateTestRequest\x1a-.kentik.synthetics.v202202.UpdateTestResponse\"\xa3\x01\x92\x41X\x12\x1eUpdate configuration of a test\x1a*Updates configuration of a synthetic test.*\nUpdateTest\xf2\xd7\x02\x16\x61\x64min.synthetics:write\x82\xd3\xe4\x93\x02(\x1a#/synthetics/v202202/tests/{test.id}:\x01*\x12\xb1\x02\n\nDeleteTest\x12,.kentik.synthetics.v202202.DeleteTestRequest\x1a-.kentik.synthetics.v202202.DeleteTestResponse\"\xc5\x01\x92\x41\x81\x01\x12\x18\x44\x65lete a synthetic test.\x1aYDeletes the synthetics test. All accumulated results for the test cease to be accessible.*\nDeleteTest\xf2\xd7\x02\x16\x61\x64min.synthetics:write\x82\xd3\xe4\x93\x02 *\x1e/synthetics/v202202/tests/{id}\x12\x97\x02\n\rSetTestStatus\x12/.kentik.synthetics.v202202.SetTestStatusRequest\x1a\x30.kentik.synthetics.v202202.SetTestStatusResponse\"\xa2\x01\x92\x41U\x12!Update status of a synthetic test\x1a!Update status of a synthetic test*\rSetTestStatus\xf2\xd7\x02\x16\x61\x64min.synthetics:write\x82\xd3\xe4\x93\x02*\x1a%/synthetics/v202202/tests/{id}/status:\x01*\x1a*\xca\x41\x13grpc.api.kentik.com\xea\xd7\x02\x10\x61\x64min.syntheticsB\xb8?ZHgithub.com/kentik/api-schema/gen/go/kentik/synthetics/v202202;synthetics\x92\x41\xea>\x12\x80=\n\x19Synthetics Monitoring API\x12\x93<# Overview\nThe Synthetics Monitoring API provides programmatic access to Kentik\'s [synthetic monitoring system](https://kb.kentik.com/v4/Ma00.htm). The API consists of two endpoints:\n| Endpoint | Purpose |\n|-----------|---------|\n| SyntheticsAdminService | CRUD operations for synthetic tests and agents |\n| SyntheticsDataService  | Retrieval of synthetic test results and network traces |\n\nBoth REST endpoint and gRPC RPCs are provided.\n### Known Limitations\nThe API currently does not support the following [Synthetic Test Types](https://kb.kentik.com/v4/Ma00.htm#Ma00-Synthetic_Test_Types):\n* BGP Monitor tests, which are supported in a [separate API](https://github.com/kentik/api-schema-public/blob/master/proto/kentik/bgp_monitoring/v202205beta1/bgp_monitoring.proto)\n* Transaction tests.\n\n### Additional Public Resources\nKentik community [Python](https://github.com/kentik/community_sdk_python) and [Go](https://github.com/kentik/community_sdk_golang) SDKs provide language-specific support for using this and other Kentik APIs. These SDKs can be also used as example code for development. \n A [Terraform provider](https://registry.terraform.io/providers/kentik/kentik-synthetics) is available for configuring tests and agents for Kentik synthetic monitoring.\n# Anatomy of a Synthetic Test\nEach `Test` consists of one or more tasks. Tasks are executed by monitoring `Agents` that send synthetic traffic (probes) over the network. The API currently supports following tasks:\n| Task name  | Purpose |\n|------------|---------|\n| ping       | Test basic address, and optionally TCP port reachability |\n| traceroute (a.k.a. trace)| Discover unidirectional network path |\n| http | Perform a simple HTTP/HTTPS request |\n| page-load | Use headless Chromium to execute an HTTP/HTTPS request |\n| dns | Execute a DNS query|\n\nThe set of tasks executed on behalf of a given test depends on the `type` of that test. The following test types are currently supported by the API:\n| API type | Portal (UI) equivalent | Tasks |\n|---------------|--------------|-------|\n| ip | IP Address | ping, traceroute |\n| hostname | Hostname | ping, traceroute |\n| network_grid | Network Grid | ping, traceroute |\n| agent | Agent-to-Agent | ping, traceroute |\n| network_mesh | Network Mesh | ping, traceroute |\n| flow | Autonomous Tests (5 variants) | ping, traceroute |\n| url | HTTP(S) or API | http, ping (optional), traceroute (optional) |\n| page_load | Page Load | page-load, ping (optional), traceroute (optional) |\n| dns | DNS Server Monitor | dns |\n| dns_grid | DNS Server Grid | dns |\n\n***Note:*** `ping` and `traceroute` tasks are always run together (never one without the other).\n\n# Test Attributes and Settings\nThe attributes of the test object enable configuration of test settings, access to test metadata, and access to runtime state information.\n### State and metadata attributes\n The following table lists the metadata and state attributes:\n| Attribute | Access | Purpose |\n|-----------|--------|---------|\n| id | RO | System-generated unique identifier of the test |\n| name | RW | User specified name for the test (need not be unique) |\n| type | RO (after creation) | Type of the test (set on creation; read-only thereafter) |\n| status | RW | Life-cycle status of the test |\n| cdate | RO | Creation timestamp |\n| edate | RO | Last-modification timestamp |\n| createdBy | RO | Identity of the user that created the test |\n| lastUpdatedBy | RO | Identity of the latest user to modify the test |\n| labels | RW | List of names of labels applied to the test |\n\nTest configuration is performed via the test\'s `settings` attribute. Some settings are common to all tests while others are specific to tests of a given type.\n### Common Test Settings\nThe following settings are used for tests of all types:\n| Attribute | Purpose | Required |\n|-----------|---------|----------|\n| agentIds  | IDs of agents to execute tasks for the test | YES |\n| period | Test execution interval in seconds | NO (default 60s) |\n| family | IP address family. Used only for tests whose type is url or dns. Selects which type of DNS resource is queried for resolving hostname to target address | NO (default IP_FAMILY_DUAL) |\n| notificationChannels | List of notification channels for the test | NO (default empty list) |\n| healthSettings | A HealthSettings object that configures health settings for this test, which includes metric thresholds that define health status (warning and critical) and trigger associated alarms. | YES |\n| ping | A TestPingSettings object that configures the ping task of the test | NO (default depends on test type) |\n| trace | A TestTraceSettings object that configures the trace task of the test | NO (default depends on test type) |\n| tasks | List of names of the tasks that will be executed for this test | YES |\n\n### Type-specific Settings\nEach test type has its own configuration object that represents the settings for that type. These type-specific objects are referenced by the attributes in `Test.settings`:\n| Test type    | Settings attribute | Configuration object |\n|--------------|-------------------------|---------------------------|\n| ip           | ip                      | IpTest                    |\n| hostname     | hostname                | HostnameTest              |\n| network_grid | networkGrid             | IpTest                    |\n| agent        | agent                   | AgentTest                 |\n| network_mesh | networkMesh             | NetworkMeshTest           |\n| flow         | flow                    | FlowTest                  |\n| url          | url                     | UrlTest                   |\n| page_load    | pageLoad                | PageLoadTest              |\n| dns          | dns                     | DnsTest                   |\n| dns_grid     | dnsGrid                 | DnsTest                   |\n\n# Test Results\nResults of synthetic tests are returned as a sequence of `TestResults` objects. Each such object represents measurements and health evaluation for a single test at specific point in time. Measurements and health evaluation are grouped by agent and by task.\nGranularity of timestamps in test results depends on the frequency (period) of the test and on the requested time range. The minimum granularity is 1 minute (even when period < 1 minute). The longer the time range, the lower the granularity.\n# Network Traces\nSynthetic tests that include the `traceroute` task collect the unidirectional network path from the agent to the target for each agent/target pair. The trace data are returned in the `GetTraceForTestResponse` object. The `paths` attribute of this object contains the collected network path for each agent/target pair and the round-trip time (RTT) to each hop.\nHops in actual network traces are identified by a `nodeId`. The mapping of node IDs to address, name, location, and other attributes of the hop is provided in a map that is stored in the `nodes` attribute of the `GetTraceForTestResponse` object.\n# Agents\nThe Kentik synthetic monitoring system recognizes 2 types of agents:\n* **Global** (public): Managed by Kentik and available to every Kentik user. All information about global agents in this API is read-only.\n* **Private**: Deployed by each customer and available only to that customer.\nTo be visible in this API, a private agent must first associate itself with a customer account by contacting the Kentik system (via private API). Once the agent is associated it can be authorized via the API by changing its `status` to `AGENT_STATUS_OK`. For more information about private agent deployment, see [**Synthetic Agent Deployments**](https://kb.kentik.com/v4/Ma01.htm#Ma01-Synthetic_Agent_Deployments).\n\"E\n\x16Kentik API Engineering\x12+https://github.com/kentik/api-schema-public2\x06\x32\x30\x32\x32\x30\x32*\x01\x02\x32\x10\x61pplication/json:\x10\x61pplication/jsonZD\n\x1e\n\x05\x65mail\x12\x15\x08\x02\x1a\x0fX-CH-Auth-Email \x02\n\"\n\x05token\x12\x19\x08\x02\x1a\x13X-CH-Auth-API-Token \x02\x62\x16\n\t\n\x05\x65mail\x12\x00\n\t\n\x05token\x12\x00r`\n\"Kentik synthetic monitoring system\x12:https://kb.kentik.com/v4/Ma00.htm#Ma00-Synthetics_Overviewb\x06proto3')

_IMPLEMENTTYPE = DESCRIPTOR.enum_types_by_name['ImplementType']
ImplementType = enum_type_wrapper.EnumTypeWrapper(_IMPLEMENTTYPE)
_IPFAMILY = DESCRIPTOR.enum_types_by_name['IPFamily']
IPFamily = enum_type_wrapper.EnumTypeWrapper(_IPFAMILY)
_TESTSTATUS = DESCRIPTOR.enum_types_by_name['TestStatus']
TestStatus = enum_type_wrapper.EnumTypeWrapper(_TESTSTATUS)
_AGENTSTATUS = DESCRIPTOR.enum_types_by_name['AgentStatus']
AgentStatus = enum_type_wrapper.EnumTypeWrapper(_AGENTSTATUS)
_DNSRECORD = DESCRIPTOR.enum_types_by_name['DNSRecord']
DNSRecord = enum_type_wrapper.EnumTypeWrapper(_DNSRECORD)
IMPLEMENT_TYPE_UNSPECIFIED = 0
IMPLEMENT_TYPE_RUST = 1
IMPLEMENT_TYPE_NODE = 2
IP_FAMILY_UNSPECIFIED = 0
IP_FAMILY_V4 = 1
IP_FAMILY_V6 = 2
IP_FAMILY_DUAL = 3
TEST_STATUS_UNSPECIFIED = 0
TEST_STATUS_ACTIVE = 1
TEST_STATUS_PAUSED = 2
TEST_STATUS_DELETED = 3
AGENT_STATUS_UNSPECIFIED = 0
AGENT_STATUS_OK = 1
AGENT_STATUS_WAIT = 2
AGENT_STATUS_DELETED = 3
DNS_RECORD_UNSPECIFIED = 0
DNS_RECORD_A = 1
DNS_RECORD_AAAA = 2
DNS_RECORD_CNAME = 3
DNS_RECORD_DNAME = 4
DNS_RECORD_NS = 5
DNS_RECORD_MX = 6
DNS_RECORD_PTR = 7
DNS_RECORD_SOA = 8


_AGENT = DESCRIPTOR.message_types_by_name['Agent']
_AGENTMETADATA = DESCRIPTOR.message_types_by_name['AgentMetadata']
_AGENTMETADATA_IPVALUE = _AGENTMETADATA.nested_types_by_name['IpValue']
_USERINFO = DESCRIPTOR.message_types_by_name['UserInfo']
_TEST = DESCRIPTOR.message_types_by_name['Test']
_TESTSETTINGS = DESCRIPTOR.message_types_by_name['TestSettings']
_TESTPINGSETTINGS = DESCRIPTOR.message_types_by_name['TestPingSettings']
_TESTTRACESETTINGS = DESCRIPTOR.message_types_by_name['TestTraceSettings']
_ACTIVATIONSETTINGS = DESCRIPTOR.message_types_by_name['ActivationSettings']
_HEALTHSETTINGS = DESCRIPTOR.message_types_by_name['HealthSettings']
_HOSTNAMETEST = DESCRIPTOR.message_types_by_name['HostnameTest']
_IPTEST = DESCRIPTOR.message_types_by_name['IpTest']
_AGENTTEST = DESCRIPTOR.message_types_by_name['AgentTest']
_FLOWTEST = DESCRIPTOR.message_types_by_name['FlowTest']
_DNSTEST = DESCRIPTOR.message_types_by_name['DnsTest']
_URLTEST = DESCRIPTOR.message_types_by_name['UrlTest']
_URLTEST_HEADERSENTRY = _URLTEST.nested_types_by_name['HeadersEntry']
_PAGELOADTEST = DESCRIPTOR.message_types_by_name['PageLoadTest']
_PAGELOADTEST_HEADERSENTRY = _PAGELOADTEST.nested_types_by_name['HeadersEntry']
_PAGELOADTEST_CSSSELECTORSENTRY = _PAGELOADTEST.nested_types_by_name['CssSelectorsEntry']
_NETWORKMESHTEST = DESCRIPTOR.message_types_by_name['NetworkMeshTest']
_METRICDATA = DESCRIPTOR.message_types_by_name['MetricData']
_PACKETLOSSDATA = DESCRIPTOR.message_types_by_name['PacketLossData']
_PINGRESULTS = DESCRIPTOR.message_types_by_name['PingResults']
_HTTPRESPONSEDATA = DESCRIPTOR.message_types_by_name['HTTPResponseData']
_HTTPRESULTS = DESCRIPTOR.message_types_by_name['HTTPResults']
_DNSRESPONSEDATA = DESCRIPTOR.message_types_by_name['DNSResponseData']
_DNSRESULTS = DESCRIPTOR.message_types_by_name['DNSResults']
_TASKRESULTS = DESCRIPTOR.message_types_by_name['TaskResults']
_AGENTRESULTS = DESCRIPTOR.message_types_by_name['AgentResults']
_TESTRESULTS = DESCRIPTOR.message_types_by_name['TestResults']
_STATS = DESCRIPTOR.message_types_by_name['Stats']
_LOCATION = DESCRIPTOR.message_types_by_name['Location']
_NETNODE = DESCRIPTOR.message_types_by_name['NetNode']
_TRACEHOP = DESCRIPTOR.message_types_by_name['TraceHop']
_PATHTRACE = DESCRIPTOR.message_types_by_name['PathTrace']
_PATH = DESCRIPTOR.message_types_by_name['Path']
_GETRESULTSFORTESTSREQUEST = DESCRIPTOR.message_types_by_name['GetResultsForTestsRequest']
_GETRESULTSFORTESTSRESPONSE = DESCRIPTOR.message_types_by_name['GetResultsForTestsResponse']
_GETTRACEFORTESTREQUEST = DESCRIPTOR.message_types_by_name['GetTraceForTestRequest']
_GETTRACEFORTESTRESPONSE = DESCRIPTOR.message_types_by_name['GetTraceForTestResponse']
_GETTRACEFORTESTRESPONSE_NODESENTRY = _GETTRACEFORTESTRESPONSE.nested_types_by_name['NodesEntry']
_LISTAGENTSREQUEST = DESCRIPTOR.message_types_by_name['ListAgentsRequest']
_LISTAGENTSRESPONSE = DESCRIPTOR.message_types_by_name['ListAgentsResponse']
_GETAGENTREQUEST = DESCRIPTOR.message_types_by_name['GetAgentRequest']
_GETAGENTRESPONSE = DESCRIPTOR.message_types_by_name['GetAgentResponse']
_UPDATEAGENTREQUEST = DESCRIPTOR.message_types_by_name['UpdateAgentRequest']
_UPDATEAGENTRESPONSE = DESCRIPTOR.message_types_by_name['UpdateAgentResponse']
_DELETEAGENTREQUEST = DESCRIPTOR.message_types_by_name['DeleteAgentRequest']
_DELETEAGENTRESPONSE = DESCRIPTOR.message_types_by_name['DeleteAgentResponse']
_LISTTESTSREQUEST = DESCRIPTOR.message_types_by_name['ListTestsRequest']
_LISTTESTSRESPONSE = DESCRIPTOR.message_types_by_name['ListTestsResponse']
_CREATETESTREQUEST = DESCRIPTOR.message_types_by_name['CreateTestRequest']
_CREATETESTRESPONSE = DESCRIPTOR.message_types_by_name['CreateTestResponse']
_GETTESTREQUEST = DESCRIPTOR.message_types_by_name['GetTestRequest']
_GETTESTRESPONSE = DESCRIPTOR.message_types_by_name['GetTestResponse']
_UPDATETESTREQUEST = DESCRIPTOR.message_types_by_name['UpdateTestRequest']
_UPDATETESTRESPONSE = DESCRIPTOR.message_types_by_name['UpdateTestResponse']
_DELETETESTREQUEST = DESCRIPTOR.message_types_by_name['DeleteTestRequest']
_DELETETESTRESPONSE = DESCRIPTOR.message_types_by_name['DeleteTestResponse']
_SETTESTSTATUSREQUEST = DESCRIPTOR.message_types_by_name['SetTestStatusRequest']
_SETTESTSTATUSRESPONSE = DESCRIPTOR.message_types_by_name['SetTestStatusResponse']
Agent = _reflection.GeneratedProtocolMessageType('Agent', (_message.Message,), {
  'DESCRIPTOR' : _AGENT,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.Agent)
  })
_sym_db.RegisterMessage(Agent)

AgentMetadata = _reflection.GeneratedProtocolMessageType('AgentMetadata', (_message.Message,), {

  'IpValue' : _reflection.GeneratedProtocolMessageType('IpValue', (_message.Message,), {
    'DESCRIPTOR' : _AGENTMETADATA_IPVALUE,
    '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.AgentMetadata.IpValue)
    })
  ,
  'DESCRIPTOR' : _AGENTMETADATA,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.AgentMetadata)
  })
_sym_db.RegisterMessage(AgentMetadata)
_sym_db.RegisterMessage(AgentMetadata.IpValue)

UserInfo = _reflection.GeneratedProtocolMessageType('UserInfo', (_message.Message,), {
  'DESCRIPTOR' : _USERINFO,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.UserInfo)
  })
_sym_db.RegisterMessage(UserInfo)

Test = _reflection.GeneratedProtocolMessageType('Test', (_message.Message,), {
  'DESCRIPTOR' : _TEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.Test)
  })
_sym_db.RegisterMessage(Test)

TestSettings = _reflection.GeneratedProtocolMessageType('TestSettings', (_message.Message,), {
  'DESCRIPTOR' : _TESTSETTINGS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.TestSettings)
  })
_sym_db.RegisterMessage(TestSettings)

TestPingSettings = _reflection.GeneratedProtocolMessageType('TestPingSettings', (_message.Message,), {
  'DESCRIPTOR' : _TESTPINGSETTINGS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.TestPingSettings)
  })
_sym_db.RegisterMessage(TestPingSettings)

TestTraceSettings = _reflection.GeneratedProtocolMessageType('TestTraceSettings', (_message.Message,), {
  'DESCRIPTOR' : _TESTTRACESETTINGS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.TestTraceSettings)
  })
_sym_db.RegisterMessage(TestTraceSettings)

ActivationSettings = _reflection.GeneratedProtocolMessageType('ActivationSettings', (_message.Message,), {
  'DESCRIPTOR' : _ACTIVATIONSETTINGS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.ActivationSettings)
  })
_sym_db.RegisterMessage(ActivationSettings)

HealthSettings = _reflection.GeneratedProtocolMessageType('HealthSettings', (_message.Message,), {
  'DESCRIPTOR' : _HEALTHSETTINGS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.HealthSettings)
  })
_sym_db.RegisterMessage(HealthSettings)

HostnameTest = _reflection.GeneratedProtocolMessageType('HostnameTest', (_message.Message,), {
  'DESCRIPTOR' : _HOSTNAMETEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.HostnameTest)
  })
_sym_db.RegisterMessage(HostnameTest)

IpTest = _reflection.GeneratedProtocolMessageType('IpTest', (_message.Message,), {
  'DESCRIPTOR' : _IPTEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.IpTest)
  })
_sym_db.RegisterMessage(IpTest)

AgentTest = _reflection.GeneratedProtocolMessageType('AgentTest', (_message.Message,), {
  'DESCRIPTOR' : _AGENTTEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.AgentTest)
  })
_sym_db.RegisterMessage(AgentTest)

FlowTest = _reflection.GeneratedProtocolMessageType('FlowTest', (_message.Message,), {
  'DESCRIPTOR' : _FLOWTEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.FlowTest)
  })
_sym_db.RegisterMessage(FlowTest)

DnsTest = _reflection.GeneratedProtocolMessageType('DnsTest', (_message.Message,), {
  'DESCRIPTOR' : _DNSTEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.DnsTest)
  })
_sym_db.RegisterMessage(DnsTest)

UrlTest = _reflection.GeneratedProtocolMessageType('UrlTest', (_message.Message,), {

  'HeadersEntry' : _reflection.GeneratedProtocolMessageType('HeadersEntry', (_message.Message,), {
    'DESCRIPTOR' : _URLTEST_HEADERSENTRY,
    '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.UrlTest.HeadersEntry)
    })
  ,
  'DESCRIPTOR' : _URLTEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.UrlTest)
  })
_sym_db.RegisterMessage(UrlTest)
_sym_db.RegisterMessage(UrlTest.HeadersEntry)

PageLoadTest = _reflection.GeneratedProtocolMessageType('PageLoadTest', (_message.Message,), {

  'HeadersEntry' : _reflection.GeneratedProtocolMessageType('HeadersEntry', (_message.Message,), {
    'DESCRIPTOR' : _PAGELOADTEST_HEADERSENTRY,
    '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.PageLoadTest.HeadersEntry)
    })
  ,

  'CssSelectorsEntry' : _reflection.GeneratedProtocolMessageType('CssSelectorsEntry', (_message.Message,), {
    'DESCRIPTOR' : _PAGELOADTEST_CSSSELECTORSENTRY,
    '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.PageLoadTest.CssSelectorsEntry)
    })
  ,
  'DESCRIPTOR' : _PAGELOADTEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.PageLoadTest)
  })
_sym_db.RegisterMessage(PageLoadTest)
_sym_db.RegisterMessage(PageLoadTest.HeadersEntry)
_sym_db.RegisterMessage(PageLoadTest.CssSelectorsEntry)

NetworkMeshTest = _reflection.GeneratedProtocolMessageType('NetworkMeshTest', (_message.Message,), {
  'DESCRIPTOR' : _NETWORKMESHTEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.NetworkMeshTest)
  })
_sym_db.RegisterMessage(NetworkMeshTest)

MetricData = _reflection.GeneratedProtocolMessageType('MetricData', (_message.Message,), {
  'DESCRIPTOR' : _METRICDATA,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.MetricData)
  })
_sym_db.RegisterMessage(MetricData)

PacketLossData = _reflection.GeneratedProtocolMessageType('PacketLossData', (_message.Message,), {
  'DESCRIPTOR' : _PACKETLOSSDATA,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.PacketLossData)
  })
_sym_db.RegisterMessage(PacketLossData)

PingResults = _reflection.GeneratedProtocolMessageType('PingResults', (_message.Message,), {
  'DESCRIPTOR' : _PINGRESULTS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.PingResults)
  })
_sym_db.RegisterMessage(PingResults)

HTTPResponseData = _reflection.GeneratedProtocolMessageType('HTTPResponseData', (_message.Message,), {
  'DESCRIPTOR' : _HTTPRESPONSEDATA,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.HTTPResponseData)
  })
_sym_db.RegisterMessage(HTTPResponseData)

HTTPResults = _reflection.GeneratedProtocolMessageType('HTTPResults', (_message.Message,), {
  'DESCRIPTOR' : _HTTPRESULTS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.HTTPResults)
  })
_sym_db.RegisterMessage(HTTPResults)

DNSResponseData = _reflection.GeneratedProtocolMessageType('DNSResponseData', (_message.Message,), {
  'DESCRIPTOR' : _DNSRESPONSEDATA,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.DNSResponseData)
  })
_sym_db.RegisterMessage(DNSResponseData)

DNSResults = _reflection.GeneratedProtocolMessageType('DNSResults', (_message.Message,), {
  'DESCRIPTOR' : _DNSRESULTS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.DNSResults)
  })
_sym_db.RegisterMessage(DNSResults)

TaskResults = _reflection.GeneratedProtocolMessageType('TaskResults', (_message.Message,), {
  'DESCRIPTOR' : _TASKRESULTS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.TaskResults)
  })
_sym_db.RegisterMessage(TaskResults)

AgentResults = _reflection.GeneratedProtocolMessageType('AgentResults', (_message.Message,), {
  'DESCRIPTOR' : _AGENTRESULTS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.AgentResults)
  })
_sym_db.RegisterMessage(AgentResults)

TestResults = _reflection.GeneratedProtocolMessageType('TestResults', (_message.Message,), {
  'DESCRIPTOR' : _TESTRESULTS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.TestResults)
  })
_sym_db.RegisterMessage(TestResults)

Stats = _reflection.GeneratedProtocolMessageType('Stats', (_message.Message,), {
  'DESCRIPTOR' : _STATS,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.Stats)
  })
_sym_db.RegisterMessage(Stats)

Location = _reflection.GeneratedProtocolMessageType('Location', (_message.Message,), {
  'DESCRIPTOR' : _LOCATION,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.Location)
  })
_sym_db.RegisterMessage(Location)

NetNode = _reflection.GeneratedProtocolMessageType('NetNode', (_message.Message,), {
  'DESCRIPTOR' : _NETNODE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.NetNode)
  })
_sym_db.RegisterMessage(NetNode)

TraceHop = _reflection.GeneratedProtocolMessageType('TraceHop', (_message.Message,), {
  'DESCRIPTOR' : _TRACEHOP,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.TraceHop)
  })
_sym_db.RegisterMessage(TraceHop)

PathTrace = _reflection.GeneratedProtocolMessageType('PathTrace', (_message.Message,), {
  'DESCRIPTOR' : _PATHTRACE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.PathTrace)
  })
_sym_db.RegisterMessage(PathTrace)

Path = _reflection.GeneratedProtocolMessageType('Path', (_message.Message,), {
  'DESCRIPTOR' : _PATH,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.Path)
  })
_sym_db.RegisterMessage(Path)

GetResultsForTestsRequest = _reflection.GeneratedProtocolMessageType('GetResultsForTestsRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETRESULTSFORTESTSREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetResultsForTestsRequest)
  })
_sym_db.RegisterMessage(GetResultsForTestsRequest)

GetResultsForTestsResponse = _reflection.GeneratedProtocolMessageType('GetResultsForTestsResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETRESULTSFORTESTSRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetResultsForTestsResponse)
  })
_sym_db.RegisterMessage(GetResultsForTestsResponse)

GetTraceForTestRequest = _reflection.GeneratedProtocolMessageType('GetTraceForTestRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETTRACEFORTESTREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetTraceForTestRequest)
  })
_sym_db.RegisterMessage(GetTraceForTestRequest)

GetTraceForTestResponse = _reflection.GeneratedProtocolMessageType('GetTraceForTestResponse', (_message.Message,), {

  'NodesEntry' : _reflection.GeneratedProtocolMessageType('NodesEntry', (_message.Message,), {
    'DESCRIPTOR' : _GETTRACEFORTESTRESPONSE_NODESENTRY,
    '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetTraceForTestResponse.NodesEntry)
    })
  ,
  'DESCRIPTOR' : _GETTRACEFORTESTRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetTraceForTestResponse)
  })
_sym_db.RegisterMessage(GetTraceForTestResponse)
_sym_db.RegisterMessage(GetTraceForTestResponse.NodesEntry)

ListAgentsRequest = _reflection.GeneratedProtocolMessageType('ListAgentsRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTAGENTSREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.ListAgentsRequest)
  })
_sym_db.RegisterMessage(ListAgentsRequest)

ListAgentsResponse = _reflection.GeneratedProtocolMessageType('ListAgentsResponse', (_message.Message,), {
  'DESCRIPTOR' : _LISTAGENTSRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.ListAgentsResponse)
  })
_sym_db.RegisterMessage(ListAgentsResponse)

GetAgentRequest = _reflection.GeneratedProtocolMessageType('GetAgentRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETAGENTREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetAgentRequest)
  })
_sym_db.RegisterMessage(GetAgentRequest)

GetAgentResponse = _reflection.GeneratedProtocolMessageType('GetAgentResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETAGENTRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetAgentResponse)
  })
_sym_db.RegisterMessage(GetAgentResponse)

UpdateAgentRequest = _reflection.GeneratedProtocolMessageType('UpdateAgentRequest', (_message.Message,), {
  'DESCRIPTOR' : _UPDATEAGENTREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.UpdateAgentRequest)
  })
_sym_db.RegisterMessage(UpdateAgentRequest)

UpdateAgentResponse = _reflection.GeneratedProtocolMessageType('UpdateAgentResponse', (_message.Message,), {
  'DESCRIPTOR' : _UPDATEAGENTRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.UpdateAgentResponse)
  })
_sym_db.RegisterMessage(UpdateAgentResponse)

DeleteAgentRequest = _reflection.GeneratedProtocolMessageType('DeleteAgentRequest', (_message.Message,), {
  'DESCRIPTOR' : _DELETEAGENTREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.DeleteAgentRequest)
  })
_sym_db.RegisterMessage(DeleteAgentRequest)

DeleteAgentResponse = _reflection.GeneratedProtocolMessageType('DeleteAgentResponse', (_message.Message,), {
  'DESCRIPTOR' : _DELETEAGENTRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.DeleteAgentResponse)
  })
_sym_db.RegisterMessage(DeleteAgentResponse)

ListTestsRequest = _reflection.GeneratedProtocolMessageType('ListTestsRequest', (_message.Message,), {
  'DESCRIPTOR' : _LISTTESTSREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.ListTestsRequest)
  })
_sym_db.RegisterMessage(ListTestsRequest)

ListTestsResponse = _reflection.GeneratedProtocolMessageType('ListTestsResponse', (_message.Message,), {
  'DESCRIPTOR' : _LISTTESTSRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.ListTestsResponse)
  })
_sym_db.RegisterMessage(ListTestsResponse)

CreateTestRequest = _reflection.GeneratedProtocolMessageType('CreateTestRequest', (_message.Message,), {
  'DESCRIPTOR' : _CREATETESTREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.CreateTestRequest)
  })
_sym_db.RegisterMessage(CreateTestRequest)

CreateTestResponse = _reflection.GeneratedProtocolMessageType('CreateTestResponse', (_message.Message,), {
  'DESCRIPTOR' : _CREATETESTRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.CreateTestResponse)
  })
_sym_db.RegisterMessage(CreateTestResponse)

GetTestRequest = _reflection.GeneratedProtocolMessageType('GetTestRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETTESTREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetTestRequest)
  })
_sym_db.RegisterMessage(GetTestRequest)

GetTestResponse = _reflection.GeneratedProtocolMessageType('GetTestResponse', (_message.Message,), {
  'DESCRIPTOR' : _GETTESTRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.GetTestResponse)
  })
_sym_db.RegisterMessage(GetTestResponse)

UpdateTestRequest = _reflection.GeneratedProtocolMessageType('UpdateTestRequest', (_message.Message,), {
  'DESCRIPTOR' : _UPDATETESTREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.UpdateTestRequest)
  })
_sym_db.RegisterMessage(UpdateTestRequest)

UpdateTestResponse = _reflection.GeneratedProtocolMessageType('UpdateTestResponse', (_message.Message,), {
  'DESCRIPTOR' : _UPDATETESTRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.UpdateTestResponse)
  })
_sym_db.RegisterMessage(UpdateTestResponse)

DeleteTestRequest = _reflection.GeneratedProtocolMessageType('DeleteTestRequest', (_message.Message,), {
  'DESCRIPTOR' : _DELETETESTREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.DeleteTestRequest)
  })
_sym_db.RegisterMessage(DeleteTestRequest)

DeleteTestResponse = _reflection.GeneratedProtocolMessageType('DeleteTestResponse', (_message.Message,), {
  'DESCRIPTOR' : _DELETETESTRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.DeleteTestResponse)
  })
_sym_db.RegisterMessage(DeleteTestResponse)

SetTestStatusRequest = _reflection.GeneratedProtocolMessageType('SetTestStatusRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETTESTSTATUSREQUEST,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.SetTestStatusRequest)
  })
_sym_db.RegisterMessage(SetTestStatusRequest)

SetTestStatusResponse = _reflection.GeneratedProtocolMessageType('SetTestStatusResponse', (_message.Message,), {
  'DESCRIPTOR' : _SETTESTSTATUSRESPONSE,
  '__module__' : 'kentik.synthetics.v202202.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:kentik.synthetics.v202202.SetTestStatusResponse)
  })
_sym_db.RegisterMessage(SetTestStatusResponse)

_SYNTHETICSDATASERVICE = DESCRIPTOR.services_by_name['SyntheticsDataService']
_SYNTHETICSADMINSERVICE = DESCRIPTOR.services_by_name['SyntheticsAdminService']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'ZHgithub.com/kentik/api-schema/gen/go/kentik/synthetics/v202202;synthetics\222A\352>\022\200=\n\031Synthetics Monitoring API\022\223<# Overview\nThe Synthetics Monitoring API provides programmatic access to Kentik\'s [synthetic monitoring system](https://kb.kentik.com/v4/Ma00.htm). The API consists of two endpoints:\n| Endpoint | Purpose |\n|-----------|---------|\n| SyntheticsAdminService | CRUD operations for synthetic tests and agents |\n| SyntheticsDataService  | Retrieval of synthetic test results and network traces |\n\nBoth REST endpoint and gRPC RPCs are provided.\n### Known Limitations\nThe API currently does not support the following [Synthetic Test Types](https://kb.kentik.com/v4/Ma00.htm#Ma00-Synthetic_Test_Types):\n* BGP Monitor tests, which are supported in a [separate API](https://github.com/kentik/api-schema-public/blob/master/proto/kentik/bgp_monitoring/v202205beta1/bgp_monitoring.proto)\n* Transaction tests.\n\n### Additional Public Resources\nKentik community [Python](https://github.com/kentik/community_sdk_python) and [Go](https://github.com/kentik/community_sdk_golang) SDKs provide language-specific support for using this and other Kentik APIs. These SDKs can be also used as example code for development. \n A [Terraform provider](https://registry.terraform.io/providers/kentik/kentik-synthetics) is available for configuring tests and agents for Kentik synthetic monitoring.\n# Anatomy of a Synthetic Test\nEach `Test` consists of one or more tasks. Tasks are executed by monitoring `Agents` that send synthetic traffic (probes) over the network. The API currently supports following tasks:\n| Task name  | Purpose |\n|------------|---------|\n| ping       | Test basic address, and optionally TCP port reachability |\n| traceroute (a.k.a. trace)| Discover unidirectional network path |\n| http | Perform a simple HTTP/HTTPS request |\n| page-load | Use headless Chromium to execute an HTTP/HTTPS request |\n| dns | Execute a DNS query|\n\nThe set of tasks executed on behalf of a given test depends on the `type` of that test. The following test types are currently supported by the API:\n| API type | Portal (UI) equivalent | Tasks |\n|---------------|--------------|-------|\n| ip | IP Address | ping, traceroute |\n| hostname | Hostname | ping, traceroute |\n| network_grid | Network Grid | ping, traceroute |\n| agent | Agent-to-Agent | ping, traceroute |\n| network_mesh | Network Mesh | ping, traceroute |\n| flow | Autonomous Tests (5 variants) | ping, traceroute |\n| url | HTTP(S) or API | http, ping (optional), traceroute (optional) |\n| page_load | Page Load | page-load, ping (optional), traceroute (optional) |\n| dns | DNS Server Monitor | dns |\n| dns_grid | DNS Server Grid | dns |\n\n***Note:*** `ping` and `traceroute` tasks are always run together (never one without the other).\n\n# Test Attributes and Settings\nThe attributes of the test object enable configuration of test settings, access to test metadata, and access to runtime state information.\n### State and metadata attributes\n The following table lists the metadata and state attributes:\n| Attribute | Access | Purpose |\n|-----------|--------|---------|\n| id | RO | System-generated unique identifier of the test |\n| name | RW | User specified name for the test (need not be unique) |\n| type | RO (after creation) | Type of the test (set on creation; read-only thereafter) |\n| status | RW | Life-cycle status of the test |\n| cdate | RO | Creation timestamp |\n| edate | RO | Last-modification timestamp |\n| createdBy | RO | Identity of the user that created the test |\n| lastUpdatedBy | RO | Identity of the latest user to modify the test |\n| labels | RW | List of names of labels applied to the test |\n\nTest configuration is performed via the test\'s `settings` attribute. Some settings are common to all tests while others are specific to tests of a given type.\n### Common Test Settings\nThe following settings are used for tests of all types:\n| Attribute | Purpose | Required |\n|-----------|---------|----------|\n| agentIds  | IDs of agents to execute tasks for the test | YES |\n| period | Test execution interval in seconds | NO (default 60s) |\n| family | IP address family. Used only for tests whose type is url or dns. Selects which type of DNS resource is queried for resolving hostname to target address | NO (default IP_FAMILY_DUAL) |\n| notificationChannels | List of notification channels for the test | NO (default empty list) |\n| healthSettings | A HealthSettings object that configures health settings for this test, which includes metric thresholds that define health status (warning and critical) and trigger associated alarms. | YES |\n| ping | A TestPingSettings object that configures the ping task of the test | NO (default depends on test type) |\n| trace | A TestTraceSettings object that configures the trace task of the test | NO (default depends on test type) |\n| tasks | List of names of the tasks that will be executed for this test | YES |\n\n### Type-specific Settings\nEach test type has its own configuration object that represents the settings for that type. These type-specific objects are referenced by the attributes in `Test.settings`:\n| Test type    | Settings attribute | Configuration object |\n|--------------|-------------------------|---------------------------|\n| ip           | ip                      | IpTest                    |\n| hostname     | hostname                | HostnameTest              |\n| network_grid | networkGrid             | IpTest                    |\n| agent        | agent                   | AgentTest                 |\n| network_mesh | networkMesh             | NetworkMeshTest           |\n| flow         | flow                    | FlowTest                  |\n| url          | url                     | UrlTest                   |\n| page_load    | pageLoad                | PageLoadTest              |\n| dns          | dns                     | DnsTest                   |\n| dns_grid     | dnsGrid                 | DnsTest                   |\n\n# Test Results\nResults of synthetic tests are returned as a sequence of `TestResults` objects. Each such object represents measurements and health evaluation for a single test at specific point in time. Measurements and health evaluation are grouped by agent and by task.\nGranularity of timestamps in test results depends on the frequency (period) of the test and on the requested time range. The minimum granularity is 1 minute (even when period < 1 minute). The longer the time range, the lower the granularity.\n# Network Traces\nSynthetic tests that include the `traceroute` task collect the unidirectional network path from the agent to the target for each agent/target pair. The trace data are returned in the `GetTraceForTestResponse` object. The `paths` attribute of this object contains the collected network path for each agent/target pair and the round-trip time (RTT) to each hop.\nHops in actual network traces are identified by a `nodeId`. The mapping of node IDs to address, name, location, and other attributes of the hop is provided in a map that is stored in the `nodes` attribute of the `GetTraceForTestResponse` object.\n# Agents\nThe Kentik synthetic monitoring system recognizes 2 types of agents:\n* **Global** (public): Managed by Kentik and available to every Kentik user. All information about global agents in this API is read-only.\n* **Private**: Deployed by each customer and available only to that customer.\nTo be visible in this API, a private agent must first associate itself with a customer account by contacting the Kentik system (via private API). Once the agent is associated it can be authorized via the API by changing its `status` to `AGENT_STATUS_OK`. For more information about private agent deployment, see [**Synthetic Agent Deployments**](https://kb.kentik.com/v4/Ma01.htm#Ma01-Synthetic_Agent_Deployments).\n\"E\n\026Kentik API Engineering\022+https://github.com/kentik/api-schema-public2\006202202*\001\0022\020application/json:\020application/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Token \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r`\n\"Kentik synthetic monitoring system\022:https://kb.kentik.com/v4/Ma00.htm#Ma00-Synthetics_Overview'
  _AGENT.fields_by_name['id']._options = None
  _AGENT.fields_by_name['id']._serialized_options = b'\222A 2\036Unique identifier of the agent\342A\001\003'
  _AGENT.fields_by_name['site_name']._options = None
  _AGENT.fields_by_name['site_name']._serialized_options = b'\222A)2\'Name of the site where agent is located'
  _AGENT.fields_by_name['status']._options = None
  _AGENT.fields_by_name['status']._serialized_options = b'\222A\0242\022Operational status'
  _AGENT.fields_by_name['alias']._options = None
  _AGENT.fields_by_name['alias']._serialized_options = b'\222A-2+User selected descriptive name of the agent'
  _AGENT.fields_by_name['type']._options = None
  _AGENT.fields_by_name['type']._serialized_options = b'\222A\"2 Type of agent (global | private)\342A\001\003'
  _AGENT.fields_by_name['os']._options = None
  _AGENT.fields_by_name['os']._serialized_options = b'\222A+2)OS version of server/VM hosting the agent\342A\001\003'
  _AGENT.fields_by_name['ip']._options = None
  _AGENT.fields_by_name['ip']._serialized_options = b'\030\001\222A02.Public IP address of the agent (auto-detected)\342A\001\003'
  _AGENT.fields_by_name['lat']._options = None
  _AGENT.fields_by_name['lat']._serialized_options = b'\222A725Latitude of agent\'s location (signed decimal degrees)'
  _AGENT.fields_by_name['long']._options = None
  _AGENT.fields_by_name['long']._serialized_options = b'\222A826Longitude of agent\'s location (signed decimal degrees)'
  _AGENT.fields_by_name['last_authed']._options = None
  _AGENT.fields_by_name['last_authed']._serialized_options = b'\222A%2#Timestamp of the last authorization\342A\001\003'
  _AGENT.fields_by_name['family']._options = None
  _AGENT.fields_by_name['family']._serialized_options = b'\222A*2(IP address family supported by the agent'
  _AGENT.fields_by_name['asn']._options = None
  _AGENT.fields_by_name['asn']._serialized_options = b'\222A-2+ASN of the AS owning agent\'s public address'
  _AGENT.fields_by_name['site_id']._options = None
  _AGENT.fields_by_name['site_id']._serialized_options = b'\222A<2:ID of the site hosting the agent (if configured in Kentik)'
  _AGENT.fields_by_name['version']._options = None
  _AGENT.fields_by_name['version']._serialized_options = b'\222A\0372\035Software version of the agent\342A\001\003'
  _AGENT.fields_by_name['city']._options = None
  _AGENT.fields_by_name['city']._serialized_options = b'\222A!2\037City where the agent is located'
  _AGENT.fields_by_name['region']._options = None
  _AGENT.fields_by_name['region']._serialized_options = b'\222A)2\'Geographical region of agent\'s location'
  _AGENT.fields_by_name['country']._options = None
  _AGENT.fields_by_name['country']._serialized_options = b'\222A\0352\033Country of agent\'s location'
  _AGENT.fields_by_name['test_ids']._options = None
  _AGENT.fields_by_name['test_ids']._serialized_options = b'\222A)2\'IDs of user\'s test running on the agent\342A\001\003'
  _AGENT.fields_by_name['local_ip']._options = None
  _AGENT.fields_by_name['local_ip']._serialized_options = b'\030\001\222A\"2 Internal IP address of the agent'
  _AGENT.fields_by_name['cloud_region']._options = None
  _AGENT.fields_by_name['cloud_region']._serialized_options = b'\222A)2\'Cloud region (if any) hosting the agent'
  _AGENT.fields_by_name['cloud_provider']._options = None
  _AGENT.fields_by_name['cloud_provider']._serialized_options = b'\222A+2)Cloud provider (if any) hosting the agent'
  _AGENT.fields_by_name['agent_impl']._options = None
  _AGENT.fields_by_name['agent_impl']._serialized_options = b'\342A\001\003'
  _AGENT.fields_by_name['labels']._options = None
  _AGENT.fields_by_name['labels']._serialized_options = b'\222A321List of names of labels associated with the agent'
  _AGENT.fields_by_name['metadata']._options = None
  _AGENT.fields_by_name['metadata']._serialized_options = b'\222AG2EAdditional information about agent\'s configuration and run-time state'
  _AGENTMETADATA.fields_by_name['private_ipv4_addresses']._options = None
  _AGENTMETADATA.fields_by_name['private_ipv4_addresses']._serialized_options = b'\222A 2\036List of private IPv4 addresses'
  _AGENTMETADATA.fields_by_name['public_ipv4_addresses']._options = None
  _AGENTMETADATA.fields_by_name['public_ipv4_addresses']._serialized_options = b'\222A\0372\035List of public IPv4 addresses\342A\001\003'
  _AGENTMETADATA.fields_by_name['private_ipv6_addresses']._options = None
  _AGENTMETADATA.fields_by_name['private_ipv6_addresses']._serialized_options = b'\222A 2\036List of private IPv6 addresses'
  _AGENTMETADATA.fields_by_name['public_ipv6_addresses']._options = None
  _AGENTMETADATA.fields_by_name['public_ipv6_addresses']._serialized_options = b'\222A\0372\035List of public IPv6 addresses\342A\001\003'
  _USERINFO.fields_by_name['id']._options = None
  _USERINFO.fields_by_name['id']._serialized_options = b'\222A\0272\025Unique ID of the user\342A\001\003'
  _USERINFO.fields_by_name['email']._options = None
  _USERINFO.fields_by_name['email']._serialized_options = b'\222A\0342\032E-mail address of the user\342A\001\003'
  _USERINFO.fields_by_name['full_name']._options = None
  _USERINFO.fields_by_name['full_name']._serialized_options = b'\222A\0272\025Full name of the user\342A\001\003'
  _TEST.fields_by_name['id']._options = None
  _TEST.fields_by_name['id']._serialized_options = b'\222A\0272\025Unique ID of the test\342A\001\003'
  _TEST.fields_by_name['name']._options = None
  _TEST.fields_by_name['name']._serialized_options = b'\222A 2\036User selected name of the test'
  _TEST.fields_by_name['type']._options = None
  _TEST.fields_by_name['type']._serialized_options = b'\222A\0222\020Type of the test'
  _TEST.fields_by_name['status']._options = None
  _TEST.fields_by_name['status']._serialized_options = b'\222A 2\036Operational status of the test'
  _TEST.fields_by_name['settings']._options = None
  _TEST.fields_by_name['settings']._serialized_options = b'\222A\0242\022Test configuration'
  _TEST.fields_by_name['cdate']._options = None
  _TEST.fields_by_name['cdate']._serialized_options = b'\222A\0322\030Creation timestamp (UTC)\342A\001\003'
  _TEST.fields_by_name['edate']._options = None
  _TEST.fields_by_name['edate']._serialized_options = b'\222A#2!Last modification timestamp (UTC)\342A\001\003'
  _TEST.fields_by_name['created_by']._options = None
  _TEST.fields_by_name['created_by']._serialized_options = b'\222A\0322\030Identity of test creator\342A\001\003'
  _TEST.fields_by_name['last_updated_by']._options = None
  _TEST.fields_by_name['last_updated_by']._serialized_options = b'\222A12/Identity of use that has modified the test last\342A\001\003'
  _TEST.fields_by_name['labels']._options = None
  _TEST.fields_by_name['labels']._serialized_options = b'\222A(2&Set of labels associated with the test'
  _TESTSETTINGS.fields_by_name['agent_ids']._options = None
  _TESTSETTINGS.fields_by_name['agent_ids']._serialized_options = b'\222A;29IDs of agents assigned to run tasks on behalf of the test'
  _TESTSETTINGS.fields_by_name['tasks']._options = None
  _TESTSETTINGS.fields_by_name['tasks']._serialized_options = b'\222A(2&List of task names to run for the test'
  _TESTSETTINGS.fields_by_name['health_settings']._options = None
  _TESTSETTINGS.fields_by_name['health_settings']._serialized_options = b'\222AR2PHealth evaluation thresholds, acceptable responses and alarm activation settings'
  _TESTSETTINGS.fields_by_name['ping']._options = None
  _TESTSETTINGS.fields_by_name['ping']._serialized_options = b'\222A%2#Ping tasks configuration parameters'
  _TESTSETTINGS.fields_by_name['trace']._options = None
  _TESTSETTINGS.fields_by_name['trace']._serialized_options = b'\222A*2(Traceroute task configuration parameters'
  _TESTSETTINGS.fields_by_name['period']._options = None
  _TESTSETTINGS.fields_by_name['period']._serialized_options = b'\222A%2#Test evaluation period (in seconds)'
  _TESTSETTINGS.fields_by_name['family']._options = None
  _TESTSETTINGS.fields_by_name['family']._serialized_options = b'\222AA2?IP address family to select from available DNS name resolutions'
  _TESTSETTINGS.fields_by_name['notification_channels']._options = None
  _TESTSETTINGS.fields_by_name['notification_channels']._serialized_options = b'\222AG2EList of IDs of notification channels for alarms triggered by the test'
  _TESTPINGSETTINGS.fields_by_name['count']._options = None
  _TESTPINGSETTINGS.fields_by_name['count']._serialized_options = b'\222A220Number of probe packets to send in one iteration'
  _TESTPINGSETTINGS.fields_by_name['protocol']._options = None
  _TESTPINGSETTINGS.fields_by_name['protocol']._serialized_options = b'\222A(2&Transport protocol to use (icmp | tcp)'
  _TESTPINGSETTINGS.fields_by_name['port']._options = None
  _TESTPINGSETTINGS.fields_by_name['port']._serialized_options = b'\222A/2-Target port for TCP probes (ignored for ICMP)'
  _TESTPINGSETTINGS.fields_by_name['timeout']._options = None
  _TESTPINGSETTINGS.fields_by_name['timeout']._serialized_options = b'\222A321Timeout in milliseconds for execution of the task'
  _TESTPINGSETTINGS.fields_by_name['delay']._options = None
  _TESTPINGSETTINGS.fields_by_name['delay']._serialized_options = b'\222A#2!Inter-probe delay in milliseconds'
  _TESTPINGSETTINGS.fields_by_name['dscp']._options = None
  _TESTPINGSETTINGS.fields_by_name['dscp']._serialized_options = b'\222A\0372\035--- <Not implemented yet> ---'
  _TESTTRACESETTINGS.fields_by_name['count']._options = None
  _TESTTRACESETTINGS.fields_by_name['count']._serialized_options = b'\222A220Number of probe packets to send in one iteration'
  _TESTTRACESETTINGS.fields_by_name['protocol']._options = None
  _TESTTRACESETTINGS.fields_by_name['protocol']._serialized_options = b'\222A.2,Transport protocol to use (icmp | tcp | udp)'
  _TESTTRACESETTINGS.fields_by_name['port']._options = None
  _TESTTRACESETTINGS.fields_by_name['port']._serialized_options = b'\222A624Target port for TCP or UDP probes (ignored for ICMP)'
  _TESTTRACESETTINGS.fields_by_name['timeout']._options = None
  _TESTTRACESETTINGS.fields_by_name['timeout']._serialized_options = b'\222A321Timeout in milliseconds for execution of the task'
  _TESTTRACESETTINGS.fields_by_name['limit']._options = None
  _TESTTRACESETTINGS.fields_by_name['limit']._serialized_options = b'\222A422Maximum number of hops to probe (i.e. maximum TTL)'
  _TESTTRACESETTINGS.fields_by_name['delay']._options = None
  _TESTTRACESETTINGS.fields_by_name['delay']._serialized_options = b'\222A#2!Inter-probe delay in milliseconds'
  _TESTTRACESETTINGS.fields_by_name['dscp']._options = None
  _TESTTRACESETTINGS.fields_by_name['dscp']._serialized_options = b'\222A\0372\035--- <Not implemented yet> ---'
  _ACTIVATIONSETTINGS.fields_by_name['grace_period']._options = None
  _ACTIVATIONSETTINGS.fields_by_name['grace_period']._serialized_options = b'\222A\\2ZPeriod of healthy status in minutes within the time window not cancelling alarm activation'
  _ACTIVATIONSETTINGS.fields_by_name['time_unit']._options = None
  _ACTIVATIONSETTINGS.fields_by_name['time_unit']._serialized_options = b'\222A.2,Time unit for specifying time window (m | h)'
  _ACTIVATIONSETTINGS.fields_by_name['time_window']._options = None
  _ACTIVATIONSETTINGS.fields_by_name['time_window']._serialized_options = b'\222A927Time window for evaluating of test for alarm activation'
  _ACTIVATIONSETTINGS.fields_by_name['times']._options = None
  _ACTIVATIONSETTINGS.fields_by_name['times']._serialized_options = b'\222Ac2aNumber of occurrences of unhealthy test status within the time window triggering alarm activation'
  _HEALTHSETTINGS.fields_by_name['latency_critical']._options = None
  _HEALTHSETTINGS.fields_by_name['latency_critical']._serialized_options = b'\222AX2VThreshold for ping or DNS response latency (in microseconds) to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['latency_warning']._options = None
  _HEALTHSETTINGS.fields_by_name['latency_warning']._serialized_options = b'\222AW2UThreshold for ping or DNS response latency (in microseconds) to trigger warning alarm'
  _HEALTHSETTINGS.fields_by_name['packet_loss_critical']._options = None
  _HEALTHSETTINGS.fields_by_name['packet_loss_critical']._serialized_options = b'\222AA2?Threshold for ping packet loss (in %) to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['packet_loss_warning']._options = None
  _HEALTHSETTINGS.fields_by_name['packet_loss_warning']._serialized_options = b'\222A@2>Threshold for ping packet loss (in %) to trigger warning alarm'
  _HEALTHSETTINGS.fields_by_name['jitter_critical']._options = None
  _HEALTHSETTINGS.fields_by_name['jitter_critical']._serialized_options = b'\222AG2EThreshold for ping jitter (in microseconds) to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['jitter_warning']._options = None
  _HEALTHSETTINGS.fields_by_name['jitter_warning']._serialized_options = b'\222AG2EThreshold for ping jitter (in microseconds) to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['http_latency_critical']._options = None
  _HEALTHSETTINGS.fields_by_name['http_latency_critical']._serialized_options = b'\222AQ2OThreshold for HTTP response latency (in microseconds) to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['http_latency_warning']._options = None
  _HEALTHSETTINGS.fields_by_name['http_latency_warning']._serialized_options = b'\222AP2NThreshold for HTTP response latency (in microseconds) to trigger warning alarm'
  _HEALTHSETTINGS.fields_by_name['http_valid_codes']._options = None
  _HEALTHSETTINGS.fields_by_name['http_valid_codes']._serialized_options = b'\222A422List of HTTP status codes indicating healthy state'
  _HEALTHSETTINGS.fields_by_name['dns_valid_codes']._options = None
  _HEALTHSETTINGS.fields_by_name['dns_valid_codes']._serialized_options = b'\222A321List of DNS status codes indicating healthy state'
  _HEALTHSETTINGS.fields_by_name['latency_critical_stddev']._options = None
  _HEALTHSETTINGS.fields_by_name['latency_critical_stddev']._serialized_options = b'\222An2lThreshold for standard deviation (in microseconds) of ping or DNS response latency to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['latency_warning_stddev']._options = None
  _HEALTHSETTINGS.fields_by_name['latency_warning_stddev']._serialized_options = b'\222Am2kThreshold for standard deviation (in microseconds) of ping or DNS response latency to trigger warning alarm'
  _HEALTHSETTINGS.fields_by_name['jitter_critical_stddev']._options = None
  _HEALTHSETTINGS.fields_by_name['jitter_critical_stddev']._serialized_options = b'\222A]2[Threshold for standard deviation of ping jitter (in microseconds) to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['jitter_warning_stddev']._options = None
  _HEALTHSETTINGS.fields_by_name['jitter_warning_stddev']._serialized_options = b'\222A\\2ZThreshold for standard deviation of ping jitter (in microseconds) to trigger warning alarm'
  _HEALTHSETTINGS.fields_by_name['http_latency_critical_stddev']._options = None
  _HEALTHSETTINGS.fields_by_name['http_latency_critical_stddev']._serialized_options = b'\222Ag2eThreshold for standard deviation of HTTP response latency (in microseconds) to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['http_latency_warning_stddev']._options = None
  _HEALTHSETTINGS.fields_by_name['http_latency_warning_stddev']._serialized_options = b'\222Af2dThreshold for standard deviation of HTTP response latency (in microseconds) to trigger warning alarm'
  _HEALTHSETTINGS.fields_by_name['unhealthy_subtest_threshold']._options = None
  _HEALTHSETTINGS.fields_by_name['unhealthy_subtest_threshold']._serialized_options = b'\222Aj2hNumber of tasks (across all agents) that must report unhealthy status in order for alarm to be triggered'
  _HEALTHSETTINGS.fields_by_name['activation']._options = None
  _HEALTHSETTINGS.fields_by_name['activation']._serialized_options = b'\222A\0332\031Alarm activation settings'
  _HEALTHSETTINGS.fields_by_name['cert_expiry_warning']._options = None
  _HEALTHSETTINGS.fields_by_name['cert_expiry_warning']._serialized_options = b'\222AX2VThreshold for remaining validity of TLS certificate (in days) to trigger warning alarm'
  _HEALTHSETTINGS.fields_by_name['cert_expiry_critical']._options = None
  _HEALTHSETTINGS.fields_by_name['cert_expiry_critical']._serialized_options = b'\222AY2WThreshold for remaining validity of TLS certificate (in days) to trigger critical alarm'
  _HEALTHSETTINGS.fields_by_name['dns_valid_ips']._options = None
  _HEALTHSETTINGS.fields_by_name['dns_valid_ips']._serialized_options = b'\222Aa2_Comma separated list of IP addresses expected to be received in response to DNS A or AAAA query'
  _HOSTNAMETEST.fields_by_name['target']._options = None
  _HOSTNAMETEST.fields_by_name['target']._serialized_options = b'\222A-2+Fully qualified DNS name of the target host'
  _IPTEST.fields_by_name['targets']._options = None
  _IPTEST.fields_by_name['targets']._serialized_options = b'\222A!2\037List of IP addresses of targets'
  _AGENTTEST.fields_by_name['target']._options = None
  _AGENTTEST.fields_by_name['target']._serialized_options = b'\222A\0302\026ID of the target agent'
  _AGENTTEST.fields_by_name['use_local_ip']._options = None
  _AGENTTEST.fields_by_name['use_local_ip']._serialized_options = b'\222AX2VBoolean value indicating whether to use local (private) IP address of the target agent'
  _FLOWTEST.fields_by_name['target']._options = None
  _FLOWTEST.fields_by_name['target']._serialized_options = b'\222Al2jTarget ASN, CDN, Country, Region of City for autonomous test (type of value depends on flow test sub-type)'
  _FLOWTEST.fields_by_name['target_refresh_interval_millis']._options = None
  _FLOWTEST.fields_by_name['target_refresh_interval_millis']._serialized_options = b'\222AV2TPeriod (in milliseconds) for refreshing list of targets based on available flow data'
  _FLOWTEST.fields_by_name['max_providers']._options = None
  _FLOWTEST.fields_by_name['max_providers']._serialized_options = b'\222A624Maximum number of IP providers to track autonomously'
  _FLOWTEST.fields_by_name['max_ip_targets']._options = None
  _FLOWTEST.fields_by_name['max_ip_targets']._serialized_options = b'\222AG2EMaximum number of target IP addresses to select based flow data query'
  _FLOWTEST.fields_by_name['type']._options = None
  _FLOWTEST.fields_by_name['type']._serialized_options = b'\222A@2>Autonomous test sub-type (asn | cdn | country | region | city)'
  _FLOWTEST.fields_by_name['inet_direction']._options = None
  _FLOWTEST.fields_by_name['inet_direction']._serialized_options = b'\222A}2{Selection of address from flow data (src = source address in inbound flows | dst = destination addresses in outbound flows)'
  _FLOWTEST.fields_by_name['direction']._options = None
  _FLOWTEST.fields_by_name['direction']._serialized_options = b'\222A]2[Direction of flows to match target attribute for extraction of target addresses (src | dst)'
  _DNSTEST.fields_by_name['target']._options = None
  _DNSTEST.fields_by_name['target']._serialized_options = b'\222A#2!Fully qualified DNS name to query'
  _DNSTEST.fields_by_name['timeout']._options = None
  _DNSTEST.fields_by_name['timeout']._serialized_options = b'\222A\0262\024--- <deprecated> ---'
  _DNSTEST.fields_by_name['record_type']._options = None
  _DNSTEST.fields_by_name['record_type']._serialized_options = b'\222A\0352\033Type of DNS record to query'
  _DNSTEST.fields_by_name['servers']._options = None
  _DNSTEST.fields_by_name['servers']._serialized_options = b'\222A%2#List of IP addresses of DNS servers'
  _DNSTEST.fields_by_name['port']._options = None
  _DNSTEST.fields_by_name['port']._serialized_options = b'\222A\0302\026Target DNS server port'
  _URLTEST_HEADERSENTRY._options = None
  _URLTEST_HEADERSENTRY._serialized_options = b'8\001'
  _URLTEST.fields_by_name['target']._options = None
  _URLTEST.fields_by_name['target']._serialized_options = b'\222A\0362\034HTTP or HTTPS URL to request'
  _URLTEST.fields_by_name['timeout']._options = None
  _URLTEST.fields_by_name['timeout']._serialized_options = b'\222A,2*HTTP transaction timeout (in milliseconds)'
  _URLTEST.fields_by_name['method']._options = None
  _URLTEST.fields_by_name['method']._serialized_options = b'\222A624HTTP method to use (GET | HEAD | PATCH | POST | PUT)'
  _URLTEST.fields_by_name['headers']._options = None
  _URLTEST.fields_by_name['headers']._serialized_options = b'\222A12/Map of HTTP header values keyed by header names'
  _URLTEST.fields_by_name['body']._options = None
  _URLTEST.fields_by_name['body']._serialized_options = b'\222A\0232\021HTTP request body'
  _URLTEST.fields_by_name['ignore_tls_errors']._options = None
  _URLTEST.fields_by_name['ignore_tls_errors']._serialized_options = b'\222AJ2HBoolean indicating whether to ignore TLS certificate verification errors'
  _PAGELOADTEST_HEADERSENTRY._options = None
  _PAGELOADTEST_HEADERSENTRY._serialized_options = b'8\001'
  _PAGELOADTEST_CSSSELECTORSENTRY._options = None
  _PAGELOADTEST_CSSSELECTORSENTRY._serialized_options = b'8\001'
  _PAGELOADTEST.fields_by_name['target']._options = None
  _PAGELOADTEST.fields_by_name['target']._serialized_options = b'\222A\0362\034HTTP or HTTPS URL to request'
  _PAGELOADTEST.fields_by_name['timeout']._options = None
  _PAGELOADTEST.fields_by_name['timeout']._serialized_options = b'\222A,2*HTTP transaction timeout (in milliseconds)'
  _PAGELOADTEST.fields_by_name['headers']._options = None
  _PAGELOADTEST.fields_by_name['headers']._serialized_options = b'\222A12/Map of HTTP header values keyed by header names'
  _PAGELOADTEST.fields_by_name['ignore_tls_errors']._options = None
  _PAGELOADTEST.fields_by_name['ignore_tls_errors']._serialized_options = b'\222AJ2HBoolean indicating whether to ignore TLS certificate verification errors'
  _PAGELOADTEST.fields_by_name['css_selectors']._options = None
  _PAGELOADTEST.fields_by_name['css_selectors']._serialized_options = b'\222A321Map of CSS selector values keyed by selector name'
  _NETWORKMESHTEST.fields_by_name['use_local_ip']._options = None
  _NETWORKMESHTEST.fields_by_name['use_local_ip']._serialized_options = b'\222AY2WBoolean value indicating whether to use local (private) IP address of the target agents'
  _METRICDATA.fields_by_name['current']._options = None
  _METRICDATA.fields_by_name['current']._serialized_options = b'\222A\0312\027Current value of metric'
  _METRICDATA.fields_by_name['rolling_avg']._options = None
  _METRICDATA.fields_by_name['rolling_avg']._serialized_options = b'\222A\0332\031Rolling average of metric'
  _METRICDATA.fields_by_name['rolling_stddev']._options = None
  _METRICDATA.fields_by_name['rolling_stddev']._serialized_options = b'\222A12/Rolling average of standard deviation of metric'
  _METRICDATA.fields_by_name['health']._options = None
  _METRICDATA.fields_by_name['health']._serialized_options = b'\222AH2FHealth evaluation status for the metric (healthy | warning | critical)'
  _PACKETLOSSDATA.fields_by_name['current']._options = None
  _PACKETLOSSDATA.fields_by_name['current']._serialized_options = b'\222A\0332\031Current packet loss value'
  _PACKETLOSSDATA.fields_by_name['health']._options = None
  _PACKETLOSSDATA.fields_by_name['health']._serialized_options = b'\222AH2FHealth evaluation status for the metric (healthy | warning | critical)'
  _PINGRESULTS.fields_by_name['target']._options = None
  _PINGRESULTS.fields_by_name['target']._serialized_options = b'\222A*2(Hostname or address of the probed target'
  _PINGRESULTS.fields_by_name['packet_loss']._options = None
  _PINGRESULTS.fields_by_name['packet_loss']._serialized_options = b'\222A\0372\035Packet loss metric and health'
  _PINGRESULTS.fields_by_name['latency']._options = None
  _PINGRESULTS.fields_by_name['latency']._serialized_options = b'\222A\"2 Packet latency metric and health'
  _PINGRESULTS.fields_by_name['jitter']._options = None
  _PINGRESULTS.fields_by_name['jitter']._serialized_options = b'\222A-2+Latency jitter (variance) metric and health'
  _PINGRESULTS.fields_by_name['dst_ip']._options = None
  _PINGRESULTS.fields_by_name['dst_ip']._serialized_options = b'\222A\0352\033IP address of probed target'
  _HTTPRESPONSEDATA.fields_by_name['status']._options = None
  _HTTPRESPONSEDATA.fields_by_name['status']._serialized_options = b'\222A\0312\027HTTP status in response'
  _HTTPRESPONSEDATA.fields_by_name['size']._options = None
  _HTTPRESPONSEDATA.fields_by_name['size']._serialized_options = b'\222A\'2%Total size of  received response body'
  _HTTPRESPONSEDATA.fields_by_name['data']._options = None
  _HTTPRESPONSEDATA.fields_by_name['data']._serialized_options = b'\222AX2VDetailed information about transaction timing, connection characteristics and response'
  _HTTPRESULTS.fields_by_name['target']._options = None
  _HTTPRESULTS.fields_by_name['target']._serialized_options = b'\222A\0232\021Target probed URL'
  _HTTPRESULTS.fields_by_name['latency']._options = None
  _HTTPRESULTS.fields_by_name['latency']._serialized_options = b'\222A)2\'HTTP response latency metric and health'
  _HTTPRESULTS.fields_by_name['response']._options = None
  _HTTPRESULTS.fields_by_name['response']._serialized_options = b'\222A*2(Information about received HTTP response'
  _HTTPRESULTS.fields_by_name['dst_ip']._options = None
  _HTTPRESULTS.fields_by_name['dst_ip']._serialized_options = b'\222A$2\"IP address of probed target server'
  _DNSRESPONSEDATA.fields_by_name['status']._options = None
  _DNSRESPONSEDATA.fields_by_name['status']._serialized_options = b'\222A\0252\023Received DNS status'
  _DNSRESPONSEDATA.fields_by_name['data']._options = None
  _DNSRESPONSEDATA.fields_by_name['data']._serialized_options = b'\222A+2)Text rendering of received DNS resolution'
  _DNSRESULTS.fields_by_name['target']._options = None
  _DNSRESULTS.fields_by_name['target']._serialized_options = b'\222A\0242\022Queried DNS record'
  _DNSRESULTS.fields_by_name['server']._options = None
  _DNSRESULTS.fields_by_name['server']._serialized_options = b'\222A\0372\035DNS server used for the query'
  _DNSRESULTS.fields_by_name['latency']._options = None
  _DNSRESULTS.fields_by_name['latency']._serialized_options = b'\222A(2&DNS response latency metric and health'
  _DNSRESULTS.fields_by_name['response']._options = None
  _DNSRESULTS.fields_by_name['response']._serialized_options = b'\222A)2\'Information about received DNS response'
  _TASKRESULTS.fields_by_name['ping']._options = None
  _TASKRESULTS.fields_by_name['ping']._serialized_options = b'\222A$2\"Entry containing ping task results'
  _TASKRESULTS.fields_by_name['http']._options = None
  _TASKRESULTS.fields_by_name['http']._serialized_options = b'\222A$2\"Entry containing HTTP task results'
  _TASKRESULTS.fields_by_name['dns']._options = None
  _TASKRESULTS.fields_by_name['dns']._serialized_options = b'\222A#2!Entry containing DNS task results'
  _TASKRESULTS.fields_by_name['health']._options = None
  _TASKRESULTS.fields_by_name['health']._serialized_options = b'\222A\0332\031Health status of the task'
  _AGENTRESULTS.fields_by_name['agent_id']._options = None
  _AGENTRESULTS.fields_by_name['agent_id']._serialized_options = b'\222A#2!ID of the agent providing results'
  _AGENTRESULTS.fields_by_name['health']._options = None
  _AGENTRESULTS.fields_by_name['health']._serialized_options = b'\222AG2EOverall health status of all task for the test executed by this agent'
  _AGENTRESULTS.fields_by_name['tasks']._options = None
  _AGENTRESULTS.fields_by_name['tasks']._serialized_options = b'\222A&2$List of results for individual tasks'
  _TESTRESULTS.fields_by_name['test_id']._options = None
  _TESTRESULTS.fields_by_name['test_id']._serialized_options = b'\222A/2-ID of the test for which results are provided'
  _TESTRESULTS.fields_by_name['time']._options = None
  _TESTRESULTS.fields_by_name['time']._serialized_options = b'\222A\0312\027Results timestamp (UTC)'
  _TESTRESULTS.fields_by_name['health']._options = None
  _TESTRESULTS.fields_by_name['health']._serialized_options = b'\222A\0332\031Health status of the test'
  _TESTRESULTS.fields_by_name['agents']._options = None
  _TESTRESULTS.fields_by_name['agents']._serialized_options = b'\222AC2AList of results from agents executing tasks on behalf of the test'
  _STATS.fields_by_name['average']._options = None
  _STATS.fields_by_name['average']._serialized_options = b'\222A\0172\rAverage value'
  _STATS.fields_by_name['min']._options = None
  _STATS.fields_by_name['min']._serialized_options = b'\222A\0172\rMinimum value'
  _STATS.fields_by_name['max']._options = None
  _STATS.fields_by_name['max']._serialized_options = b'\222A\0172\rMaximum value'
  _LOCATION.fields_by_name['latitude']._options = None
  _LOCATION.fields_by_name['latitude']._serialized_options = b'\222A$2\"Latitude in signed decimal degrees'
  _LOCATION.fields_by_name['longitude']._options = None
  _LOCATION.fields_by_name['longitude']._serialized_options = b'\222A%2#Longitude in signed decimal degrees'
  _LOCATION.fields_by_name['country']._options = None
  _LOCATION.fields_by_name['country']._serialized_options = b'\222A\0312\027Country of the location'
  _LOCATION.fields_by_name['region']._options = None
  _LOCATION.fields_by_name['region']._serialized_options = b'\222A&2$Geographic region within the country'
  _LOCATION.fields_by_name['city']._options = None
  _LOCATION.fields_by_name['city']._serialized_options = b'\222A\0262\024City of the location'
  _NETNODE.fields_by_name['ip']._options = None
  _NETNODE.fields_by_name['ip']._serialized_options = b'\222A523IP address of the node in standard textual notation'
  _NETNODE.fields_by_name['asn']._options = None
  _NETNODE.fields_by_name['asn']._serialized_options = b'\222A*2(AS number owning the address of the node'
  _NETNODE.fields_by_name['as_name']._options = None
  _NETNODE.fields_by_name['as_name']._serialized_options = b'\222A/2-Name of the AS owning the address of the node'
  _NETNODE.fields_by_name['location']._options = None
  _NETNODE.fields_by_name['location']._serialized_options = b'\222A$2\"Location of IP address of the node'
  _NETNODE.fields_by_name['dns_name']._options = None
  _NETNODE.fields_by_name['dns_name']._serialized_options = b'\222A;29DNS name of the node (obtained by reverse DNS resolution)'
  _NETNODE.fields_by_name['device_id']._options = None
  _NETNODE.fields_by_name['device_id']._serialized_options = b'\222AF2DID of the device corresponding with the node in Kentik configuration'
  _NETNODE.fields_by_name['site_id']._options = None
  _NETNODE.fields_by_name['site_id']._serialized_options = b'\222AZ2XID of the site containing the device corresponding with the node in Kentik configuration'
  _TRACEHOP.fields_by_name['latency']._options = None
  _TRACEHOP.fields_by_name['latency']._serialized_options = b'\222AY2WRound-trip packet latency to the node (in microseconds) - 0 if no response was received'
  _TRACEHOP.fields_by_name['node_id']._options = None
  _TRACEHOP.fields_by_name['node_id']._serialized_options = b'\222AS2QID of the node for this hop in the Nodes map  - empty if no response was received'
  _PATHTRACE.fields_by_name['as_path']._options = None
  _PATHTRACE.fields_by_name['as_path']._serialized_options = b'\222A\0362\034AS path of the network trace'
  _PATHTRACE.fields_by_name['is_complete']._options = None
  _PATHTRACE.fields_by_name['is_complete']._serialized_options = b'\222A624Indication whether response from target was received'
  _PATHTRACE.fields_by_name['hops']._options = None
  _PATHTRACE.fields_by_name['hops']._serialized_options = b'\222A\0332\031List of hops in the trace'
  _PATH.fields_by_name['agent_id']._options = None
  _PATH.fields_by_name['agent_id']._serialized_options = b'\222A*2(ID of the agent generating the path data'
  _PATH.fields_by_name['target_ip']._options = None
  _PATH.fields_by_name['target_ip']._serialized_options = b'\222A&2$IP address of the target of the path'
  _PATH.fields_by_name['hop_count']._options = None
  _PATH.fields_by_name['hop_count']._serialized_options = b'\222A(2&Hop count statistics across all traces'
  _PATH.fields_by_name['max_as_path_length']._options = None
  _PATH.fields_by_name['max_as_path_length']._serialized_options = b'\222A-2+Maximum length of AS path across all traces'
  _PATH.fields_by_name['traces']._options = None
  _PATH.fields_by_name['traces']._serialized_options = b'\222A\0342\032Data for individual traces'
  _PATH.fields_by_name['time']._options = None
  _PATH.fields_by_name['time']._serialized_options = b'\222A12/Timestamp (UTC) of initiation of the path trace'
  _GETRESULTSFORTESTSREQUEST.fields_by_name['ids']._options = None
  _GETRESULTSFORTESTSREQUEST.fields_by_name['ids']._serialized_options = b'\222A02.List of test IDs for which to retrieve results\342A\001\002'
  _GETRESULTSFORTESTSREQUEST.fields_by_name['start_time']._options = None
  _GETRESULTSFORTESTSREQUEST.fields_by_name['start_time']._serialized_options = b'\222A725Timestamp of the oldest results to include in results\342A\001\002'
  _GETRESULTSFORTESTSREQUEST.fields_by_name['end_time']._options = None
  _GETRESULTSFORTESTSREQUEST.fields_by_name['end_time']._serialized_options = b'\222A725Timestamp of the newest results to include in results\342A\001\002'
  _GETRESULTSFORTESTSREQUEST.fields_by_name['agent_ids']._options = None
  _GETRESULTSFORTESTSREQUEST.fields_by_name['agent_ids']._serialized_options = b'\222A02.List of agent IDs from which to return results'
  _GETRESULTSFORTESTSREQUEST.fields_by_name['targets']._options = None
  _GETRESULTSFORTESTSREQUEST.fields_by_name['targets']._serialized_options = b'\222A@2>List of targets (test dependent) for which to retrieve results'
  _GETRESULTSFORTESTSREQUEST.fields_by_name['aggregate']._options = None
  _GETRESULTSFORTESTSREQUEST.fields_by_name['aggregate']._serialized_options = b'\222Ah2fIf true, retrieve result aggregated across the requested time period, else return complete time series'
  _GETTRACEFORTESTREQUEST.fields_by_name['id']._options = None
  _GETTRACEFORTESTREQUEST.fields_by_name['id']._serialized_options = b'\222A:28ID of test for which to retrieve network path trace data'
  _GETTRACEFORTESTREQUEST.fields_by_name['start_time']._options = None
  _GETTRACEFORTESTREQUEST.fields_by_name['start_time']._serialized_options = b'\222A725Timestamp of the oldest results to include in results\342A\001\002'
  _GETTRACEFORTESTREQUEST.fields_by_name['end_time']._options = None
  _GETTRACEFORTESTREQUEST.fields_by_name['end_time']._serialized_options = b'\222A725Timestamp of the newest results to include in results\342A\001\002'
  _GETTRACEFORTESTREQUEST.fields_by_name['agent_ids']._options = None
  _GETTRACEFORTESTREQUEST.fields_by_name['agent_ids']._serialized_options = b'\222A02.List of agent IDs from which to return results'
  _GETTRACEFORTESTREQUEST.fields_by_name['target_ips']._options = None
  _GETTRACEFORTESTREQUEST.fields_by_name['target_ips']._serialized_options = b'\222A;29List of target IP addresses for which to retrieve results'
  _GETTRACEFORTESTRESPONSE_NODESENTRY._options = None
  _GETTRACEFORTESTRESPONSE_NODESENTRY._serialized_options = b'8\001'
  _GETTRACEFORTESTRESPONSE.fields_by_name['nodes']._options = None
  _GETTRACEFORTESTRESPONSE.fields_by_name['nodes']._serialized_options = b'\222A321Map of network node information keyed by node IDs'
  _GETTRACEFORTESTRESPONSE.fields_by_name['paths']._options = None
  _GETTRACEFORTESTRESPONSE.fields_by_name['paths']._serialized_options = b'\222A%2#List of retrieved network path data'
  _LISTAGENTSRESPONSE.fields_by_name['agents']._options = None
  _LISTAGENTSRESPONSE.fields_by_name['agents']._serialized_options = b'\222A\0322\030List of available agents'
  _LISTAGENTSRESPONSE.fields_by_name['invalid_count']._options = None
  _LISTAGENTSRESPONSE.fields_by_name['invalid_count']._serialized_options = b'\222A=2;Number of invalid entries encountered while collecting data'
  _GETAGENTREQUEST.fields_by_name['id']._options = None
  _GETAGENTREQUEST.fields_by_name['id']._serialized_options = b'\222A\0332\031ID of the requested agent\342A\001\002'
  _GETAGENTRESPONSE.fields_by_name['agent']._options = None
  _GETAGENTRESPONSE.fields_by_name['agent']._serialized_options = b'\222A%2#Agent configuration and status data'
  _UPDATEAGENTREQUEST.fields_by_name['agent']._options = None
  _UPDATEAGENTREQUEST.fields_by_name['agent']._serialized_options = b'\222A\0322\030Agent configuration data'
  _UPDATEAGENTRESPONSE.fields_by_name['agent']._options = None
  _UPDATEAGENTRESPONSE.fields_by_name['agent']._serialized_options = b'\222A%2#Agent configuration and status data'
  _DELETEAGENTREQUEST.fields_by_name['id']._options = None
  _DELETEAGENTREQUEST.fields_by_name['id']._serialized_options = b'\222A\0372\035ID of the agent to be deleted\342A\001\002'
  _LISTTESTSRESPONSE.fields_by_name['tests']._options = None
  _LISTTESTSRESPONSE.fields_by_name['tests']._serialized_options = b'\222A+2)List of configured active or paused tests'
  _LISTTESTSRESPONSE.fields_by_name['invalid_count']._options = None
  _LISTTESTSRESPONSE.fields_by_name['invalid_count']._serialized_options = b'\222A=2;Number of invalid entries encountered while collecting data'
  _CREATETESTREQUEST.fields_by_name['test']._options = None
  _CREATETESTREQUEST.fields_by_name['test']._serialized_options = b'\222A\0312\027Test configuration data\342A\001\002'
  _CREATETESTRESPONSE.fields_by_name['test']._options = None
  _CREATETESTRESPONSE.fields_by_name['test']._serialized_options = b'\222A$2\"Test configuration and status data'
  _GETTESTREQUEST.fields_by_name['id']._options = None
  _GETTESTREQUEST.fields_by_name['id']._serialized_options = b'\222A\0262\024ID of requested test\342A\001\002'
  _GETTESTRESPONSE.fields_by_name['test']._options = None
  _GETTESTRESPONSE.fields_by_name['test']._serialized_options = b'\222A$2\"Test configuration and status data'
  _UPDATETESTREQUEST.fields_by_name['test']._options = None
  _UPDATETESTREQUEST.fields_by_name['test']._serialized_options = b'\222A\0312\027Test configuration data'
  _UPDATETESTRESPONSE.fields_by_name['test']._options = None
  _UPDATETESTRESPONSE.fields_by_name['test']._serialized_options = b'\222A$2\"Test configuration and status data'
  _DELETETESTREQUEST.fields_by_name['id']._options = None
  _DELETETESTREQUEST.fields_by_name['id']._serialized_options = b'\222A\0362\034ID of the test to be deleted\342A\001\002'
  _SETTESTSTATUSREQUEST.fields_by_name['id']._options = None
  _SETTESTSTATUSREQUEST.fields_by_name['id']._serialized_options = b'\222A/2-ID of the test which status is to be modified\342A\001\002'
  _SETTESTSTATUSREQUEST.fields_by_name['status']._options = None
  _SETTESTSTATUSREQUEST.fields_by_name['status']._serialized_options = b'\222A\0242\022Target test status\342A\001\002'
  _SYNTHETICSDATASERVICE._options = None
  _SYNTHETICSDATASERVICE._serialized_options = b'\312A\023grpc.api.kentik.com\352\327\002\nsynthetics'
  _SYNTHETICSDATASERVICE.methods_by_name['GetResultsForTests']._options = None
  _SYNTHETICSDATASERVICE.methods_by_name['GetResultsForTests']._serialized_options = b'\222As\022\025Get results for tests\032FReturns probe results for a set of tests for specified period of time.*\022GetResultsForTests\362\327\002\017synthetics:read\202\323\344\223\002 \"\033/synthetics/v202202/results:\001*'
  _SYNTHETICSDATASERVICE.methods_by_name['GetTraceForTest']._options = None
  _SYNTHETICSDATASERVICE.methods_by_name['GetTraceForTest']._serialized_options = b'\222A\232\001\022!Get network trace data for a test\032dGet network trace data for a specific synthetic test. The test must have traceroute task configured.*\017GetTraceForTest\362\327\002\017synthetics:read\202\323\344\223\002\036\"\031/synthetics/v202202/trace:\001*'
  _SYNTHETICSADMINSERVICE._options = None
  _SYNTHETICSADMINSERVICE._serialized_options = b'\312A\023grpc.api.kentik.com\352\327\002\020admin.synthetics'
  _SYNTHETICSADMINSERVICE.methods_by_name['ListAgents']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['ListAgents']._serialized_options = b'\222Ac\022\025List available agents\032>Returns list of all synthetic agents available in the account.*\nListAgents\362\327\002\025admin.synthetics:read\202\323\344\223\002\034\022\032/synthetics/v202202/agents'
  _SYNTHETICSADMINSERVICE.methods_by_name['GetAgent']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['GetAgent']._serialized_options = b'\222Ad\022\036Get information about an agent\0328Returns information about the requested synthetic agent.*\010GetAgent\362\327\002\025admin.synthetics:read\202\323\344\223\002!\022\037/synthetics/v202202/agents/{id}'
  _SYNTHETICSADMINSERVICE.methods_by_name['UpdateAgent']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['UpdateAgent']._serialized_options = b'\222A[\022 Update configuration of an agent\032*Update configuration of a synthetic agent.*\013UpdateAgent\362\327\002\026admin.synthetics:write\202\323\344\223\002*\032%/synthetics/v202202/agents/{agent.id}:\001*'
  _SYNTHETICSADMINSERVICE.methods_by_name['DeleteAgent']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['DeleteAgent']._serialized_options = b'\222Az\022\017Delete an agent\032ZDeletes the requested agent. The deleted agent is removed from configuration of all tests.*\013DeleteAgent\362\327\002\026admin.synthetics:write\202\323\344\223\002!*\037/synthetics/v202202/agents/{id}'
  _SYNTHETICSADMINSERVICE.methods_by_name['ListTests']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['ListTests']._serialized_options = b'\222A`\022\016List all tests\032CReturns a list of all configured active and paused synthetic tests.*\tListTests\362\327\002\025admin.synthetics:read\202\323\344\223\002\033\022\031/synthetics/v202202/tests'
  _SYNTHETICSADMINSERVICE.methods_by_name['CreateTest']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['CreateTest']._serialized_options = b'\222Ab\022\rCreate a test\032ECreate synthetic test based on configuration provided in the request.*\nCreateTest\362\327\002\026admin.synthetics:write\202\323\344\223\002\036\"\031/synthetics/v202202/tests:\001*'
  _SYNTHETICSADMINSERVICE.methods_by_name['GetTest']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['GetTest']._serialized_options = b'\222Ak\022\034Get information about a test\032BReturns configuration and status for the requested synthetic test.*\007GetTest\362\327\002\025admin.synthetics:read\202\323\344\223\002 \022\036/synthetics/v202202/tests/{id}'
  _SYNTHETICSADMINSERVICE.methods_by_name['UpdateTest']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['UpdateTest']._serialized_options = b'\222AX\022\036Update configuration of a test\032*Updates configuration of a synthetic test.*\nUpdateTest\362\327\002\026admin.synthetics:write\202\323\344\223\002(\032#/synthetics/v202202/tests/{test.id}:\001*'
  _SYNTHETICSADMINSERVICE.methods_by_name['DeleteTest']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['DeleteTest']._serialized_options = b'\222A\201\001\022\030Delete a synthetic test.\032YDeletes the synthetics test. All accumulated results for the test cease to be accessible.*\nDeleteTest\362\327\002\026admin.synthetics:write\202\323\344\223\002 *\036/synthetics/v202202/tests/{id}'
  _SYNTHETICSADMINSERVICE.methods_by_name['SetTestStatus']._options = None
  _SYNTHETICSADMINSERVICE.methods_by_name['SetTestStatus']._serialized_options = b'\222AU\022!Update status of a synthetic test\032!Update status of a synthetic test*\rSetTestStatus\362\327\002\026admin.synthetics:write\202\323\344\223\002*\032%/synthetics/v202202/tests/{id}/status:\001*'
  _IMPLEMENTTYPE._serialized_start=21677
  _IMPLEMENTTYPE._serialized_end=21774
  _IPFAMILY._serialized_start=21776
  _IPFAMILY._serialized_end=21869
  _TESTSTATUS._serialized_start=21871
  _TESTSTATUS._serialized_end=21985
  _AGENTSTATUS._serialized_start=21987
  _AGENTSTATUS._serialized_end=22100
  _DNSRECORD._serialized_start=22103
  _DNSRECORD._serialized_end=22303
  _AGENT._serialized_start=288
  _AGENT._serialized_end=2199
  _AGENTMETADATA._serialized_start=2202
  _AGENTMETADATA._serialized_end=2820
  _AGENTMETADATA_IPVALUE._serialized_start=2789
  _AGENTMETADATA_IPVALUE._serialized_end=2820
  _USERINFO._serialized_start=2823
  _USERINFO._serialized_end=3001
  _TEST._serialized_start=3004
  _TEST._serialized_end=3839
  _TESTSETTINGS._serialized_start=3842
  _TESTSETTINGS._serialized_end=5398
  _TESTPINGSETTINGS._serialized_start=5401
  _TESTPINGSETTINGS._serialized_end=5841
  _TESTTRACESETTINGS._serialized_start=5844
  _TESTTRACESETTINGS._serialized_end=6377
  _ACTIVATIONSETTINGS._serialized_start=6380
  _ACTIVATIONSETTINGS._serialized_end=6834
  _HEALTHSETTINGS._serialized_start=6837
  _HEALTHSETTINGS._serialized_end=9765
  _HOSTNAMETEST._serialized_start=9767
  _HOSTNAMETEST._serialized_end=9855
  _IPTEST._serialized_start=9857
  _IPTEST._serialized_end=9929
  _AGENTTEST._serialized_start=9932
  _AGENTTEST._serialized_end=10123
  _FLOWTEST._serialized_start=10126
  _FLOWTEST._serialized_end=11033
  _DNSTEST._serialized_start=11036
  _DNSTEST._serialized_end=11384
  _URLTEST._serialized_start=11387
  _URLTEST._serialized_end=11969
  _URLTEST_HEADERSENTRY._serialized_start=11911
  _URLTEST_HEADERSENTRY._serialized_end=11969
  _PAGELOADTEST._serialized_start=11972
  _PAGELOADTEST._serialized_end=12656
  _PAGELOADTEST_HEADERSENTRY._serialized_start=11911
  _PAGELOADTEST_HEADERSENTRY._serialized_end=11969
  _PAGELOADTEST_CSSSELECTORSENTRY._serialized_start=12593
  _PAGELOADTEST_CSSSELECTORSENTRY._serialized_end=12656
  _NETWORKMESHTEST._serialized_start=12659
  _NETWORKMESHTEST._serialized_end=12804
  _METRICDATA._serialized_start=12807
  _METRICDATA._serialized_end=13134
  _PACKETLOSSDATA._serialized_start=13137
  _PACKETLOSSDATA._serialized_end=13312
  _PINGRESULTS._serialized_start=13315
  _PINGRESULTS._serialized_end=13785
  _HTTPRESPONSEDATA._serialized_start=13788
  _HTTPRESPONSEDATA._serialized_end=14037
  _HTTPRESULTS._serialized_start=14040
  _HTTPRESULTS._serialized_end=14396
  _DNSRESPONSEDATA._serialized_start=14399
  _DNSRESPONSEDATA._serialized_end=14534
  _DNSRESULTS._serialized_start=14537
  _DNSRESULTS._serialized_end=14886
  _TASKRESULTS._serialized_start=14889
  _TASKRESULTS._serialized_end=15276
  _AGENTRESULTS._serialized_start=15279
  _AGENTRESULTS._serialized_end=15565
  _TESTRESULTS._serialized_start=15568
  _TESTRESULTS._serialized_end=15930
  _STATS._serialized_start=15933
  _STATS._serialized_end=16062
  _LOCATION._serialized_start=16065
  _LOCATION._serialized_end=16386
  _NETNODE._serialized_start=16389
  _NETNODE._serialized_end=17035
  _TRACEHOP._serialized_start=17038
  _TRACEHOP._serialized_end=17281
  _PATHTRACE._serialized_start=17284
  _PATHTRACE._serialized_end=17536
  _PATH._serialized_start=17539
  _PATH._serialized_end=18091
  _GETRESULTSFORTESTSREQUEST._serialized_start=18094
  _GETRESULTSFORTESTSREQUEST._serialized_end=18755
  _GETRESULTSFORTESTSRESPONSE._serialized_start=18757
  _GETRESULTSFORTESTSRESPONSE._serialized_end=18851
  _GETTRACEFORTESTREQUEST._serialized_start=18854
  _GETTRACEFORTESTREQUEST._serialized_end=19376
  _GETTRACEFORTESTRESPONSE._serialized_start=19379
  _GETTRACEFORTESTRESPONSE._serialized_end=19737
  _GETTRACEFORTESTRESPONSE_NODESENTRY._serialized_start=19645
  _GETTRACEFORTESTRESPONSE_NODESENTRY._serialized_end=19737
  _LISTAGENTSREQUEST._serialized_start=19739
  _LISTAGENTSREQUEST._serialized_end=19758
  _LISTAGENTSRESPONSE._serialized_start=19761
  _LISTAGENTSRESPONSE._serialized_end=19973
  _GETAGENTREQUEST._serialized_start=19975
  _GETAGENTREQUEST._serialized_end=20044
  _GETAGENTRESPONSE._serialized_start=20046
  _GETAGENTRESPONSE._serialized_end=20162
  _UPDATEAGENTREQUEST._serialized_start=20164
  _UPDATEAGENTREQUEST._serialized_end=20271
  _UPDATEAGENTRESPONSE._serialized_start=20273
  _UPDATEAGENTRESPONSE._serialized_end=20392
  _DELETEAGENTREQUEST._serialized_start=20394
  _DELETEAGENTREQUEST._serialized_end=20470
  _DELETEAGENTRESPONSE._serialized_start=20472
  _DELETEAGENTRESPONSE._serialized_end=20493
  _LISTTESTSREQUEST._serialized_start=20495
  _LISTTESTSREQUEST._serialized_end=20513
  _LISTTESTSRESPONSE._serialized_start=20516
  _LISTTESTSRESPONSE._serialized_end=20741
  _CREATETESTREQUEST._serialized_start=20743
  _CREATETESTREQUEST._serialized_end=20849
  _CREATETESTRESPONSE._serialized_start=20851
  _CREATETESTRESPONSE._serialized_end=20965
  _GETTESTREQUEST._serialized_start=20967
  _GETTESTREQUEST._serialized_end=21030
  _GETTESTRESPONSE._serialized_start=21032
  _GETTESTRESPONSE._serialized_end=21143
  _UPDATETESTREQUEST._serialized_start=21145
  _UPDATETESTREQUEST._serialized_end=21247
  _UPDATETESTRESPONSE._serialized_start=21249
  _UPDATETESTRESPONSE._serialized_end=21363
  _DELETETESTREQUEST._serialized_start=21365
  _DELETETESTREQUEST._serialized_end=21439
  _DELETETESTRESPONSE._serialized_start=21441
  _DELETETESTRESPONSE._serialized_end=21461
  _SETTESTSTATUSREQUEST._serialized_start=21464
  _SETTESTSTATUSREQUEST._serialized_end=21650
  _SETTESTSTATUSRESPONSE._serialized_start=21652
  _SETTESTSTATUSRESPONSE._serialized_end=21675
  _SYNTHETICSDATASERVICE._serialized_start=22306
  _SYNTHETICSDATASERVICE._serialized_end=23016
  _SYNTHETICSADMINSERVICE._serialized_start=23019
  _SYNTHETICSADMINSERVICE._serialized_end=25895
# @@protoc_insertion_point(module_scope)
