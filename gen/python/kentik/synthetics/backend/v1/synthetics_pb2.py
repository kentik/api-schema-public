# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: kentik/synthetics/backend/v1/synthetics.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from protoc_gen_openapiv2.options import annotations_pb2 as protoc__gen__openapiv2_dot_options_dot_annotations__pb2
from kentik.core.v202012alpha1 import annotations_pb2 as kentik_dot_core_dot_v202012alpha1_dot_annotations__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n-kentik/synthetics/backend/v1/synthetics.proto\x12\tsynthetic\x1a\x1cgoogle/api/annotations.proto\x1a.protoc-gen-openapiv2/options/annotations.proto\x1a+kentik/core/v202012alpha1/annotations.proto\"}\n\x06Status\x12\x0c\n\x02ok\x18\x01 \x01(\x08H\x00\x12&\n\x03\x65rr\x18\x02 \x01(\x0b\x32\x17.synthetic.Status.ErrorH\x00\x1a\x33\n\x05\x45rror\x12\x0e\n\x06status\x18\x01 \x01(\r\x12\x0b\n\x03msg\x18\x02 \x01(\t\x12\r\n\x05retry\x18\x03 \x01(\rB\x08\n\x06status\"\xd7\x01\n\x0b\x41uthRequest\x12\r\n\x05\x61gent\x18\x01 \x01(\t\x12\x11\n\tsignature\x18\x02 \x01(\t\x12\x11\n\ttimestamp\x18\x03 \x01(\t\x12\x0f\n\x07version\x18\x04 \x01(\t\x12\x12\n\ncompany_id\x18\x05 \x01(\x04\x12\x0c\n\x04name\x18\x06 \x01(\t\x12\x0e\n\x06global\x18\x07 \x01(\x08\x12\n\n\x02os\x18\x08 \x01(\t\x12\x0c\n\x04\x62ind\x18\t \x01(\t\x12\x0c\n\x04site\x18\n \x01(\x04\x12(\n\nagent_impl\x18\x0b \x01(\x0e\x32\x14.synthetic.AgentImpl\"\xdf\x01\n\tAuthReply\x12\'\n\x04\x61uth\x18\x01 \x01(\x0e\x32\x19.synthetic.AuthReply.Auth\x12!\n\x06status\x18\x02 \x01(\x0b\x32\x11.synthetic.Status\x12\x0f\n\x07session\x18\x03 \x01(\t\x12#\n\x06\x66\x61mily\x18\x04 \x01(\x0e\x32\x13.synthetic.IPFamily\x12\x10\n\x08\x61gent_id\x18\x05 \x01(\x04\x12\x11\n\tchallenge\x18\x06 \x01(\t\"+\n\x04\x41uth\x12\x06\n\x02OK\x10\x00\x12\x08\n\x04WAIT\x10\x01\x12\x08\n\x04\x44\x45NY\x10\x02\x12\x07\n\x03\x45RR\x10\x03\"&\n\x06Kentik\x12\r\n\x05\x65mail\x18\x01 \x01(\t\x12\r\n\x05token\x18\x02 \x01(\t\">\n\x06\x44\x65vice\x12\n\n\x02id\x18\x01 \x01(\x04\x12(\n\x07\x63ustoms\x18\x02 \x03(\x0b\x32\x17.synthetic.CustomColumn\"\x8a\x01\n\x0c\x43ustomColumn\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02id\x18\x02 \x01(\x04\x12*\n\x04type\x18\x03 \x01(\x0e\x32\x1c.synthetic.CustomColumn.Type\"4\n\x04Type\x12\n\n\x06UINT32\x10\x00\x12\n\n\x06UINT64\x10\x01\x12\n\n\x06STRING\x10\x02\x12\x08\n\x04\x41\x44\x44R\x10\x03\".\n\x0cTasksRequest\x12\x0f\n\x07session\x18\x01 \x01(\t\x12\r\n\x05since\x18\x02 \x01(\x04\"d\n\nTasksReply\x12 \n\x06groups\x18\x01 \x03(\x0b\x32\x10.synthetic.Group\x12\x11\n\ttimestamp\x18\x02 \x01(\x04\x12!\n\x06status\x18\x03 \x01(\x0b\x32\x11.synthetic.Status\"\x81\x01\n\x05Group\x12\x12\n\ncompany_id\x18\x01 \x01(\x04\x12!\n\x06\x64\x65vice\x18\x02 \x01(\x0b\x32\x11.synthetic.Device\x12!\n\x06kentik\x18\x03 \x01(\x0b\x32\x11.synthetic.Kentik\x12\x1e\n\x05tasks\x18\x04 \x03(\x0b\x32\x0f.synthetic.Task\"\xb7\x05\n\x04Task\x12\n\n\x02id\x18\x01 \x01(\x04\x12$\n\x05state\x18\x02 \x01(\x0e\x32\x15.synthetic.Task.State\x12\x12\n\ncompany_id\x18\x03 \x01(\x04\x12\x0f\n\x07user_id\x18\x04 \x01(\x04\x12\x11\n\tdevice_id\x18\x05 \x01(\x04\x12\x0e\n\x06status\x18\x06 \x01(\t\x12\x0f\n\x07test_id\x18\x07 \x01(\x04\x12#\n\x06\x66\x61mily\x18\x08 \x01(\x0e\x32\x13.synthetic.IPFamily\x12-\n\x04ping\x18\t \x01(\x0b\x32\x1d.synthetic.PingTaskDefinitionH\x00\x12\x34\n\ntraceroute\x18\n \x01(\x0b\x32\x1e.synthetic.TraceTaskDefinitionH\x00\x12-\n\x04http\x18\x0b \x01(\x0b\x32\x1d.synthetic.HTTPTaskDefinitionH\x00\x12/\n\x05knock\x18\x0c \x01(\x0b\x32\x1e.synthetic.KnockTaskDefinitionH\x00\x12+\n\x03\x64ns\x18\r \x01(\x0b\x32\x1c.synthetic.DNSTaskDefinitionH\x00\x12/\n\x05shake\x18\x0e \x01(\x0b\x32\x1e.synthetic.ShakeTaskDefinitionH\x00\x12\x34\n\x0bhttp_timing\x18\x0f \x01(\x0b\x32\x1d.synthetic.HTTPTaskDefinitionH\x00\x12\x32\n\tpage_load\x18\x10 \x01(\x0b\x32\x1d.synthetic.HTTPTaskDefinitionH\x00\x12\x34\n\x0btransaction\x18\x11 \x01(\x0b\x32\x1d.synthetic.HTTPTaskDefinitionH\x00\".\n\x05State\x12\x0b\n\x07\x43REATED\x10\x00\x12\x0b\n\x07UPDATED\x10\x01\x12\x0b\n\x07\x44\x45LETED\x10\x02\x42\x0c\n\ndefinition\"b\n\x12PingTaskDefinition\x12\x0e\n\x06target\x18\x01 \x01(\t\x12\x0e\n\x06period\x18\x02 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x03 \x01(\r\x12\r\n\x05\x63ount\x18\x04 \x01(\r\x12\r\n\x05\x64\x65lay\x18\x05 \x01(\r\"\x92\x01\n\x13TraceTaskDefinition\x12\x0e\n\x06target\x18\x01 \x01(\t\x12\x0e\n\x06period\x18\x02 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x03 \x01(\r\x12\r\n\x05limit\x18\x04 \x01(\r\x12\x10\n\x08protocol\x18\x05 \x01(\t\x12\x0c\n\x04port\x18\x06 \x01(\r\x12\r\n\x05\x63ount\x18\x07 \x01(\r\x12\r\n\x05\x64\x65lay\x18\x08 \x01(\r\"\x90\x03\n\x12HTTPTaskDefinition\x12\x0e\n\x06target\x18\x01 \x01(\t\x12\x0e\n\x06period\x18\x02 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x03 \x01(\r\x12\x0e\n\x06method\x18\x04 \x01(\t\x12\x13\n\x0breturn_code\x18\x05 \x01(\r\x12;\n\x07headers\x18\x06 \x03(\x0b\x32*.synthetic.HTTPTaskDefinition.HeadersEntry\x12\x0c\n\x04\x62ody\x18\x07 \x01(\t\x12\x19\n\x11ignore_tls_errors\x18\x08 \x01(\x08\x12\x46\n\rcss_selectors\x18\t \x03(\x0b\x32/.synthetic.HTTPTaskDefinition.CssSelectorsEntry\x12\x12\n\ntrx_script\x18\n \x01(\t\x1a.\n\x0cHeadersEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a\x33\n\x11\x43ssSelectorsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"q\n\x13KnockTaskDefinition\x12\x0e\n\x06target\x18\x01 \x01(\t\x12\x0e\n\x06period\x18\x02 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x03 \x01(\r\x12\r\n\x05\x63ount\x18\x04 \x01(\r\x12\x0c\n\x04port\x18\x05 \x01(\r\x12\r\n\x05\x64\x65lay\x18\x06 \x01(\r\"\x80\x01\n\x11\x44NSTaskDefinition\x12\x0e\n\x06target\x18\x01 \x01(\t\x12\x0e\n\x06period\x18\x02 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x03 \x01(\r\x12\r\n\x05\x63ount\x18\x04 \x01(\r\x12\x0c\n\x04port\x18\x05 \x01(\r\x12\x0c\n\x04type\x18\x06 \x01(\t\x12\x10\n\x08resolver\x18\x07 \x01(\t\"S\n\x13ShakeTaskDefinition\x12\x0e\n\x06target\x18\x01 \x01(\t\x12\x0c\n\x04port\x18\x02 \x01(\r\x12\x0e\n\x06period\x18\x03 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x04 \x01(\r\"I\n\rStatusRequest\x12\x0f\n\x07session\x18\x01 \x01(\t\x12\'\n\x06report\x18\x02 \x01(\x0b\x32\x17.synthetic.StatusReport\"C\n\x0cStatusReport\x12$\n\x05tasks\x18\x01 \x01(\x0b\x32\x15.synthetic.TaskStatus\x12\r\n\x05\x61\x64\x64rs\x18\x02 \x03(\t\"^\n\nTaskStatus\x12\x0f\n\x07started\x18\x01 \x01(\x04\x12\x0f\n\x07running\x18\x02 \x01(\x04\x12\x0e\n\x06\x65xited\x18\x03 \x01(\x04\x12\x0e\n\x06\x66\x61iled\x18\x04 \x01(\x04\x12\x0e\n\x06\x61\x63tive\x18\x05 \x03(\x04\"0\n\x0bStatusReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\" \n\rDeauthRequest\x12\x0f\n\x07session\x18\x01 \x01(\t\"0\n\x0b\x44\x65\x61uthReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\"\x99\x01\n\rSearchRequest\x12\x12\n\ncompany_id\x18\x01 \x01(\x04\x12\r\n\x05limit\x18\x02 \x01(\r\x12\x0e\n\x06offset\x18\x03 \x01(\r\x12\x0e\n\x06select\x18\x04 \x01(\t\x12\x1f\n\x05where\x18\x05 \x01(\x0b\x32\x10.synthetic.Where\x12$\n\x08order_by\x18\x06 \x01(\x0b\x32\x12.synthetic.OrderBy\"N\n\x05Where\x12\x11\n\tconnector\x18\x01 \x01(\t\x12\x32\n\x0f\x63riteria_groups\x18\x02 \x01(\x0b\x32\x19.synthetic.CriteriaGroups\",\n\x07OrderBy\x12\x0e\n\x06\x66ields\x18\x01 \x03(\t\x12\x11\n\tdirection\x18\x02 \x01(\t\"J\n\x0e\x43riteriaGroups\x12\x11\n\tconnector\x18\x01 \x01(\t\x12%\n\x08\x63riteria\x18\x02 \x03(\x0b\x32\x13.synthetic.Criteria\":\n\x08\x43riteria\x12\r\n\x05\x66ield\x18\x01 \x01(\t\x12\x10\n\x08operator\x18\x02 \x01(\t\x12\r\n\x05value\x18\x03 \x01(\t\"\x92\x01\n\x0bSearchReply\x12\x1e\n\x05tasks\x18\x01 \x03(\x0b\x32\x0f.synthetic.Task\x12 \n\x06\x61gents\x18\x02 \x03(\x0b\x32\x10.synthetic.Agent\x12\x1e\n\x05tests\x18\x03 \x03(\x0b\x32\x0f.synthetic.Test\x12!\n\x06status\x18\x04 \x01(\x0b\x32\x11.synthetic.Status\"6\n\x12UpdateAgentRequest\x12 \n\x06\x61gents\x18\x01 \x03(\x0b\x32\x10.synthetic.Agent\"B\n\x10UpdateAgentReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\x12\x0b\n\x03num\x18\x02 \x01(\r\"3\n\x11UpdateTaskRequest\x12\x1e\n\x05tasks\x18\x01 \x03(\x0b\x32\x0f.synthetic.Task\"A\n\x0fUpdateTaskReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\x12\x0b\n\x03num\x18\x02 \x01(\r\"\xa0\x03\n\x05\x41gent\x12\n\n\x02id\x18\x01 \x01(\x04\x12\x12\n\nagent_name\x18\x02 \x01(\t\x12\x14\n\x0c\x61gent_status\x18\x03 \x01(\t\x12\x12\n\ncompany_id\x18\x04 \x01(\x04\x12\x13\n\x0b\x61gent_alias\x18\x05 \x01(\t\x12\x12\n\nagent_type\x18\x06 \x01(\t\x12\n\n\x02os\x18\x07 \x01(\t\x12\n\n\x02ip\x18\x08 \x01(\t\x12\x0b\n\x03lat\x18\t \x01(\x01\x12\x0c\n\x04long\x18\n \x01(\x01\x12\x19\n\x11\x61gent_last_authed\x18\x0b \x01(\x04\x12#\n\x06\x66\x61mily\x18\x0c \x01(\x0e\x32\x13.synthetic.IPFamily\x12\x0b\n\x03\x61sn\x18\r \x01(\r\x12\x15\n\ragent_site_id\x18\x0e \x01(\x04\x12\x0f\n\x07version\x18\x0f \x01(\t\x12\x11\n\tchallenge\x18\x10 \x01(\t\x12\x0c\n\x04\x63ity\x18\x11 \x01(\t\x12\x0e\n\x06region\x18\x12 \x01(\t\x12\x0f\n\x07\x63ountry\x18\x13 \x01(\t\x12\x10\n\x08local_ip\x18\x14 \x01(\t\x12(\n\nagent_impl\x18\x15 \x01(\x0e\x32\x14.synthetic.AgentImpl\"I\n\x16\x41gentTaskAssignRequest\x12\x10\n\x08\x61gent_id\x18\x01 \x01(\x04\x12\x0e\n\x06\x61\x63tion\x18\x02 \x01(\t\x12\r\n\x05tasks\x18\x03 \x03(\x04\"9\n\x14\x41gentTaskAssignReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\"3\n\x11UpdateTestRequest\x12\x1e\n\x05tests\x18\x01 \x03(\x0b\x32\x0f.synthetic.Test\"\x84\x03\n\x04Test\x12\n\n\x02id\x18\x01 \x01(\x04\x12\x11\n\ttest_type\x18\x02 \x01(\t\x12+\n\x08hostname\x18\x03 \x01(\x0b\x32\x17.synthetic.HostnameTestH\x00\x12\x1f\n\x02ip\x18\x04 \x01(\x0b\x32\x11.synthetic.IpTestH\x00\x12%\n\x05\x61gent\x18\x05 \x01(\x0b\x32\x14.synthetic.AgentTestH\x00\x12#\n\x04\x66low\x18\x06 \x01(\x0b\x32\x13.synthetic.FlowTestH\x00\x12#\n\x04site\x18\x07 \x01(\x0b\x32\x13.synthetic.SiteTestH\x00\x12!\n\x03tag\x18\x08 \x01(\x0b\x32\x12.synthetic.TagTestH\x00\x12\x12\n\ncompany_id\x18\t \x01(\x04\x12\x0f\n\x07user_id\x18\n \x01(\x04\x12\x11\n\tdevice_id\x18\x0b \x01(\x04\x12\x0e\n\x06status\x18\x0c \x01(\t\x12%\n\x06\x63onfig\x18\r \x01(\x0b\x32\x15.synthetic.TestConfigB\x0c\n\ndefinition\"J\n\nPingConfig\x12\x0e\n\x06period\x18\x01 \x01(\r\x12\r\n\x05\x63ount\x18\x02 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x03 \x01(\r\x12\r\n\x05\x64\x65lay\x18\x04 \x01(\r\"z\n\x0bTraceConfig\x12\x0e\n\x06period\x18\x01 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x02 \x01(\r\x12\r\n\x05limit\x18\x03 \x01(\r\x12\x0c\n\x04port\x18\x04 \x01(\r\x12\x10\n\x08protocol\x18\x05 \x01(\t\x12\r\n\x05\x63ount\x18\x06 \x01(\r\x12\r\n\x05\x64\x65lay\x18\x07 \x01(\r\"\xd3\x02\n\nHTTPConfig\x12\x0e\n\x06period\x18\x01 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x02 \x01(\r\x12\x0e\n\x06method\x18\x03 \x01(\t\x12\x33\n\x07headers\x18\x04 \x03(\x0b\x32\".synthetic.HTTPConfig.HeadersEntry\x12\x0c\n\x04\x62ody\x18\x05 \x01(\t\x12\x19\n\x11ignore_tls_errors\x18\x06 \x01(\x08\x12>\n\rcss_selectors\x18\x07 \x03(\x0b\x32\'.synthetic.HTTPConfig.CssSelectorsEntry\x12\x12\n\ntrx_script\x18\x08 \x01(\t\x1a.\n\x0cHeadersEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\x1a\x33\n\x11\x43ssSelectorsEntry\x12\x0b\n\x03key\x18\x01 \x01(\t\x12\r\n\x05value\x18\x02 \x01(\t:\x02\x38\x01\"\x9c\x04\n\nTestConfig\x12\x0e\n\x06\x61gents\x18\x01 \x03(\x04\x12\x0e\n\x06period\x18\x02 \x01(\r\x12\r\n\x05\x63ount\x18\x03 \x01(\r\x12\x0e\n\x06\x65xpiry\x18\x04 \x01(\r\x12\r\n\x05limit\x18\x05 \x01(\r\x12\r\n\x05tasks\x18\x06 \x03(\t\x12\x0c\n\x04name\x18\x07 \x01(\t\x12\x11\n\tdirection\x18\x08 \x01(\t\x12\x16\n\x0einet_direction\x18\t \x01(\t\x12\x14\n\x0cuse_local_ip\x18\n \x01(\x08\x12\x12\n\nreciprocal\x18\x0b \x01(\x08\x12\x14\n\x0crollup_level\x18\x0c \x01(\r\x12\x10\n\x08protocol\x18\r \x01(\t\x12\x0c\n\x04port\x18\x0e \x01(\r\x12\x0e\n\x06method\x18\x0f \x01(\t\x12\x13\n\x0breturn_code\x18\x10 \x01(\r\x12\x0c\n\x04type\x18\x11 \x01(\t\x12\x11\n\tresolvers\x18\x12 \x03(\t\x12#\n\x06\x66\x61mily\x18\x13 \x01(\x0e\x32\x13.synthetic.IPFamily\x12#\n\x04ping\x18\x14 \x01(\x0b\x32\x15.synthetic.PingConfig\x12%\n\x05trace\x18\x15 \x01(\x0b\x32\x16.synthetic.TraceConfig\x12\x11\n\tmax_tasks\x18\x16 \x01(\r\x12\x13\n\x0bmax_targets\x18\x17 \x01(\r\x12\x14\n\x0chigh_density\x18\x18 \x01(\x08\x12#\n\x04http\x18\x19 \x01(\x0b\x32\x15.synthetic.HTTPConfig\"\x1e\n\x0cHostnameTest\x12\x0e\n\x06target\x18\x01 \x01(\t\"\x18\n\x06IpTest\x12\x0e\n\x06target\x18\x01 \x01(\t\"\x1b\n\tAgentTest\x12\x0e\n\x06target\x18\x01 \x01(\t\"c\n\x08\x46lowTest\x12\x0e\n\x06target\x18\x01 \x01(\t\x12&\n\x1etarget_refresh_interval_millis\x18\x02 \x01(\r\x12\x11\n\tmax_tasks\x18\x03 \x01(\r\x12\x0c\n\x04type\x18\x04 \x01(\t\"\x1a\n\x08SiteTest\x12\x0e\n\x06target\x18\x01 \x01(\t\"\x19\n\x07TagTest\x12\x0e\n\x06target\x18\x01 \x01(\t\"A\n\x0fUpdateTestReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\x12\x0b\n\x03num\x18\x02 \x01(\r\";\n\x18SetTasksFromTestsRequest\x12\x0b\n\x03ids\x18\x01 \x03(\x04\x12\x12\n\ncompany_id\x18\x02 \x01(\x04\"N\n\x16SetTasksFromTestsReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\x12\x11\n\tnum_tasks\x18\x02 \x01(\r\"=\n\x15\x44ropAgentCacheRequest\x12\x10\n\x08\x61gent_id\x18\x01 \x01(\x04\x12\x12\n\nagent_name\x18\x02 \x01(\t\"8\n\x13\x44ropAgentCacheReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\"\x86\x01\n\x18GetHealthForTestsRequest\x12\x0b\n\x03ids\x18\x01 \x03(\x04\x12\x12\n\ncompany_id\x18\x02 \x01(\x04\x12\x12\n\nstart_time\x18\x03 \x01(\x03\x12\x10\n\x08\x65nd_time\x18\x04 \x01(\x03\x12\x11\n\tagent_ids\x18\x05 \x03(\x04\x12\x10\n\x08task_ids\x18\x06 \x03(\x04\"b\n\x16GetHealthForTestsReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\x12%\n\x06health\x18\x02 \x03(\x0b\x32\x15.synthetic.TestHealth\"\xc5\x01\n\nTestHealth\x12\x0f\n\x07test_id\x18\x01 \x01(\x04\x12$\n\x05tasks\x18\x02 \x03(\x0b\x32\x15.synthetic.TaskHealth\x12)\n\x0eoverall_health\x18\x03 \x01(\x0b\x32\x11.synthetic.Health\x12$\n\thealth_ts\x18\x04 \x03(\x0b\x32\x11.synthetic.Health\x12/\n\nhealth_agg\x18\x05 \x01(\x0b\x32\x1b.synthetic.AggregatedHealth\"~\n\nTaskHealth\x12\x1d\n\x04task\x18\x01 \x01(\x0b\x32\x0f.synthetic.Task\x12&\n\x06\x61gents\x18\x02 \x03(\x0b\x32\x16.synthetic.AgentHealth\x12)\n\x0eoverall_health\x18\x03 \x01(\x0b\x32\x11.synthetic.Health\"\x82\x01\n\x0b\x41gentHealth\x12\x1f\n\x05\x61gent\x18\x01 \x01(\x0b\x32\x10.synthetic.Agent\x12\'\n\x06health\x18\x02 \x03(\x0b\x32\x17.synthetic.HealthMoment\x12)\n\x0eoverall_health\x18\x03 \x01(\x0b\x32\x11.synthetic.Health\"c\n\x10\x41ggregatedHealth\x12&\n\x06\x61gents\x18\x01 \x03(\x0b\x32\x16.synthetic.AgentHealth\x12\'\n\x06health\x18\x02 \x03(\x0b\x32\x17.synthetic.HealthMoment\"\xe8\x03\n\x0cHealthMoment\x12\x0c\n\x04time\x18\x01 \x01(\x03\x12\x0e\n\x06src_ip\x18\x02 \x01(\t\x12\x0e\n\x06\x64st_ip\x18\x03 \x01(\t\x12\x13\n\x0bpacket_loss\x18\x04 \x01(\x01\x12\x13\n\x0b\x61vg_latency\x18\x05 \x01(\r\x12\x1c\n\x14\x61vg_weighted_latency\x18\x06 \x01(\r\x12\x1b\n\x13rolling_avg_latency\x18\x07 \x01(\r\x12\x1e\n\x16rolling_stddev_latency\x18\x08 \x01(\r\x12$\n\x1crolling_avg_weighted_latency\x18\t \x01(\r\x12\x16\n\x0elatency_health\x18\n \x01(\t\x12\x1a\n\x12packet_loss_health\x18\x0b \x01(\t\x12)\n\x0eoverall_health\x18\x0c \x01(\x0b\x32\x11.synthetic.Health\x12\x12\n\navg_jitter\x18\r \x01(\r\x12\x1a\n\x12rolling_avg_jitter\x18\x0e \x01(\r\x12\x1a\n\x12rolling_std_jitter\x18\x0f \x01(\r\x12\x15\n\rjitter_health\x18\x10 \x01(\t\x12\x0c\n\x04\x64\x61ta\x18\x11 \x01(\t\x12\x0c\n\x04size\x18\x12 \x01(\r\x12\x0e\n\x06status\x18\x13 \x01(\r\x12\x11\n\ttask_type\x18\x14 \x01(\t\"&\n\x06Health\x12\x0e\n\x06health\x18\x01 \x01(\t\x12\x0c\n\x04time\x18\x02 \x01(\x03\"q\n\x16GetTraceForTestRequest\x12\n\n\x02id\x18\x01 \x01(\x04\x12\x12\n\ncompany_id\x18\x02 \x01(\x04\x12\x12\n\nstart_time\x18\x03 \x01(\x03\x12\x10\n\x08\x65nd_time\x18\x04 \x01(\x03\x12\x11\n\tagent_ids\x18\x05 \x03(\x04\"Z\n\x14GetTraceForTestReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\x12\x1f\n\x05trace\x18\x02 \x01(\x0b\x32\x10.synthetic.Trace\"O\n\x05Trace\x12!\n\x04hops\x18\x01 \x03(\x0b\x32\x13.synthetic.TraceHop\x12#\n\x05links\x18\x02 \x03(\x0b\x32\x14.synthetic.TraceLink\"\x95\x01\n\x08TraceHop\x12\n\n\x02id\x18\x01 \x01(\r\x12\x10\n\x08hop_name\x18\x02 \x01(\t\x12\x11\n\thop_depth\x18\x03 \x01(\r\x12\x0b\n\x03\x61sn\x18\x04 \x01(\r\x12$\n\tin_health\x18\x05 \x01(\x0b\x32\x11.synthetic.Health\x12%\n\nout_health\x18\x06 \x01(\x0b\x32\x11.synthetic.Health\"\x87\x01\n\tTraceLink\x12\x12\n\nsrc_hop_id\x18\x01 \x01(\r\x12\x12\n\ndst_hop_id\x18\x02 \x01(\r\x12)\n\x0eoverall_health\x18\x03 \x01(\x0b\x32\x11.synthetic.Health\x12\'\n\x06health\x18\x04 \x03(\x0b\x32\x17.synthetic.HealthMoment\"A\n\x18GetHealthOfAgentsRequest\x12\x12\n\ncompany_id\x18\x01 \x01(\x04\x12\x11\n\tagent_ids\x18\x02 \x03(\x04\"\x93\x01\n\x16GetHealthOfAgentsReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\x12,\n\x06\x61gents\x18\x02 \x03(\x0b\x32\x1c.synthetic.AgentHealthStatus\x12\x0c\n\x04good\x18\x03 \x01(\r\x12\x0c\n\x04warn\x18\x04 \x01(\r\x12\x0c\n\x04\x63rit\x18\x05 \x01(\r\"\x95\x01\n\x11\x41gentHealthStatus\x12\x11\n\tlast_seen\x18\x01 \x01(\x04\x12%\n\x06status\x18\x02 \x01(\x0b\x32\x15.synthetic.TaskStatus\x12\x0e\n\x06health\x18\x03 \x01(\t\x12\x1f\n\x05\x61gent\x18\x04 \x01(\x0b\x32\x10.synthetic.Agent\x12\x15\n\rlast_seen_str\x18\x05 \x01(\t\"\x86\x01\n\x18GetErrorsForTestsRequest\x12\x0b\n\x03ids\x18\x01 \x03(\x04\x12\x12\n\ncompany_id\x18\x02 \x01(\x04\x12\x12\n\nstart_time\x18\x03 \x01(\x03\x12\x10\n\x08\x65nd_time\x18\x04 \x01(\x03\x12\x11\n\tagent_ids\x18\x05 \x03(\x04\x12\x10\n\x08task_ids\x18\x06 \x03(\x04\"a\n\x16GetErrorsForTestsReply\x12!\n\x06status\x18\x01 \x01(\x0b\x32\x11.synthetic.Status\x12$\n\x06\x65rrors\x18\x02 \x03(\x0b\x32\x14.synthetic.TestError\"B\n\tTestError\x12\x0f\n\x07test_id\x18\x01 \x01(\x04\x12$\n\x06\x65rrors\x18\x02 \x03(\x0b\x32\x14.synthetic.TaskError\"Q\n\tTaskError\x12%\n\x06\x65rrors\x18\x01 \x03(\x0b\x32\x15.synthetic.AgentError\x12\x1d\n\x04task\x18\x02 \x01(\x0b\x32\x0f.synthetic.Task\"\x85\x01\n\nAgentError\x12\x1f\n\x05\x61gent\x18\x01 \x01(\x0b\x32\x10.synthetic.Agent\x12(\n\x06\x65rrors\x18\x02 \x03(\x0b\x32\x18.synthetic.AgentErrorSet\x12,\n\x08timeouts\x18\x03 \x03(\x0b\x32\x1a.synthetic.AgentTimeoutSet\"C\n\rAgentErrorSet\x12\x11\n\tlast_time\x18\x01 \x01(\x03\x12\x0b\n\x03msg\x18\x02 \x01(\t\x12\x12\n\nnum_errors\x18\x03 \x01(\x03\":\n\x0f\x41gentTimeoutSet\x12\x11\n\tlast_time\x18\x01 \x01(\x03\x12\x14\n\x0cnum_timeouts\x18\x02 \x01(\x03*\x1f\n\tAgentImpl\x12\x08\n\x04RUST\x10\x00\x12\x08\n\x04NODE\x10\x01*$\n\x08IPFamily\x12\x06\n\x02V4\x10\x00\x12\x06\n\x02V6\x10\x01\x12\x08\n\x04\x44UAL\x10\x02\x32\xdd\r\n\x0eSyntheticAgent\x12W\n\x04\x41uth\x12\x16.synthetic.AuthRequest\x1a\x14.synthetic.AuthReply\"!\x82\xd3\xe4\x93\x02\x1b\"\x16/api/agent/v1/syn/auth:\x01*\x12[\n\x05Tasks\x12\x17.synthetic.TasksRequest\x1a\x15.synthetic.TasksReply\"\"\x82\xd3\xe4\x93\x02\x1c\"\x17/api/agent/v1/syn/tasks:\x01*\x12_\n\x06Status\x12\x18.synthetic.StatusRequest\x1a\x16.synthetic.StatusReply\"#\x82\xd3\xe4\x93\x02\x1d\"\x18/api/agent/v1/syn/status:\x01*\x12_\n\x06\x44\x65\x61uth\x12\x18.synthetic.DeauthRequest\x1a\x16.synthetic.DeauthReply\"#\x82\xd3\xe4\x93\x02\x1d\"\x18/api/agent/v1/syn/deauth:\x01*\x12^\n\x06Search\x12\x18.synthetic.SearchRequest\x1a\x16.synthetic.SearchReply\"\"\x82\xd3\xe4\x93\x02\x1c\"\x17/v1/syn/internal/search:\x01*\x12m\n\x0bUpdateAgent\x12\x1d.synthetic.UpdateAgentRequest\x1a\x1b.synthetic.UpdateAgentReply\"\"\x82\xd3\xe4\x93\x02\x1c\x1a\x17/v1/syn/internal/agents:\x01*\x12i\n\nUpdateTask\x12\x1c.synthetic.UpdateTaskRequest\x1a\x1a.synthetic.UpdateTaskReply\"!\x82\xd3\xe4\x93\x02\x1b\x1a\x16/v1/syn/internal/tasks:\x01*\x12\x87\x01\n\x0f\x41gentTaskAssign\x12!.synthetic.AgentTaskAssignRequest\x1a\x1f.synthetic.AgentTaskAssignReply\"0\x82\xd3\xe4\x93\x02*\x1a%/v1/syn/internal/agentTask/{agent_id}:\x01*\x12i\n\nUpdateTest\x12\x1c.synthetic.UpdateTestRequest\x1a\x1a.synthetic.UpdateTestReply\"!\x82\xd3\xe4\x93\x02\x1b\x1a\x16/v1/syn/internal/tests:\x01*\x12\x81\x01\n\x11SetTasksFromTests\x12#.synthetic.SetTasksFromTestsRequest\x1a!.synthetic.SetTasksFromTestsReply\"$\x82\xd3\xe4\x93\x02\x1e\x1a\x19/v1/syn/internal/settasks:\x01*\x12\x85\x01\n\x11GetHealthForTests\x12#.synthetic.GetHealthForTestsRequest\x1a!.synthetic.GetHealthForTestsReply\"(\x82\xd3\xe4\x93\x02\"\"\x1d/v1/syn/internal/health/tasks:\x01*\x12\x7f\n\x0fGetTraceForTest\x12!.synthetic.GetTraceForTestRequest\x1a\x1f.synthetic.GetTraceForTestReply\"(\x82\xd3\xe4\x93\x02\"\"\x1d/v1/syn/internal/health/trace:\x01*\x12\x7f\n\x0e\x44ropAgentCache\x12 .synthetic.DropAgentCacheRequest\x1a\x1e.synthetic.DropAgentCacheReply\"+\x82\xd3\xe4\x93\x02%\" /v1/syn/internal/dropcache/agent:\x01*\x12\x86\x01\n\x11GetHealthOfAgents\x12#.synthetic.GetHealthOfAgentsRequest\x1a!.synthetic.GetHealthOfAgentsReply\")\x82\xd3\xe4\x93\x02#\"\x1e/v1/syn/internal/health/agents:\x01*\x12\x86\x01\n\x11GetErrorsForTests\x12#.synthetic.GetErrorsForTestsRequest\x1a!.synthetic.GetErrorsForTestsReply\")\x82\xd3\xe4\x93\x02#\"\x1e/v1/syn/internal/health/errors:\x01*\x1a\x04\xf8\xd7\x02\x01\x42+\x92\x41(\x12&\n\x1dKentik Synthetics Backend API2\x05\x30.0.1b\x06proto3')

_AGENTIMPL = DESCRIPTOR.enum_types_by_name['AgentImpl']
AgentImpl = enum_type_wrapper.EnumTypeWrapper(_AGENTIMPL)
_IPFAMILY = DESCRIPTOR.enum_types_by_name['IPFamily']
IPFamily = enum_type_wrapper.EnumTypeWrapper(_IPFAMILY)
RUST = 0
NODE = 1
V4 = 0
V6 = 1
DUAL = 2


_STATUS = DESCRIPTOR.message_types_by_name['Status']
_STATUS_ERROR = _STATUS.nested_types_by_name['Error']
_AUTHREQUEST = DESCRIPTOR.message_types_by_name['AuthRequest']
_AUTHREPLY = DESCRIPTOR.message_types_by_name['AuthReply']
_KENTIK = DESCRIPTOR.message_types_by_name['Kentik']
_DEVICE = DESCRIPTOR.message_types_by_name['Device']
_CUSTOMCOLUMN = DESCRIPTOR.message_types_by_name['CustomColumn']
_TASKSREQUEST = DESCRIPTOR.message_types_by_name['TasksRequest']
_TASKSREPLY = DESCRIPTOR.message_types_by_name['TasksReply']
_GROUP = DESCRIPTOR.message_types_by_name['Group']
_TASK = DESCRIPTOR.message_types_by_name['Task']
_PINGTASKDEFINITION = DESCRIPTOR.message_types_by_name['PingTaskDefinition']
_TRACETASKDEFINITION = DESCRIPTOR.message_types_by_name['TraceTaskDefinition']
_HTTPTASKDEFINITION = DESCRIPTOR.message_types_by_name['HTTPTaskDefinition']
_HTTPTASKDEFINITION_HEADERSENTRY = _HTTPTASKDEFINITION.nested_types_by_name['HeadersEntry']
_HTTPTASKDEFINITION_CSSSELECTORSENTRY = _HTTPTASKDEFINITION.nested_types_by_name['CssSelectorsEntry']
_KNOCKTASKDEFINITION = DESCRIPTOR.message_types_by_name['KnockTaskDefinition']
_DNSTASKDEFINITION = DESCRIPTOR.message_types_by_name['DNSTaskDefinition']
_SHAKETASKDEFINITION = DESCRIPTOR.message_types_by_name['ShakeTaskDefinition']
_STATUSREQUEST = DESCRIPTOR.message_types_by_name['StatusRequest']
_STATUSREPORT = DESCRIPTOR.message_types_by_name['StatusReport']
_TASKSTATUS = DESCRIPTOR.message_types_by_name['TaskStatus']
_STATUSREPLY = DESCRIPTOR.message_types_by_name['StatusReply']
_DEAUTHREQUEST = DESCRIPTOR.message_types_by_name['DeauthRequest']
_DEAUTHREPLY = DESCRIPTOR.message_types_by_name['DeauthReply']
_SEARCHREQUEST = DESCRIPTOR.message_types_by_name['SearchRequest']
_WHERE = DESCRIPTOR.message_types_by_name['Where']
_ORDERBY = DESCRIPTOR.message_types_by_name['OrderBy']
_CRITERIAGROUPS = DESCRIPTOR.message_types_by_name['CriteriaGroups']
_CRITERIA = DESCRIPTOR.message_types_by_name['Criteria']
_SEARCHREPLY = DESCRIPTOR.message_types_by_name['SearchReply']
_UPDATEAGENTREQUEST = DESCRIPTOR.message_types_by_name['UpdateAgentRequest']
_UPDATEAGENTREPLY = DESCRIPTOR.message_types_by_name['UpdateAgentReply']
_UPDATETASKREQUEST = DESCRIPTOR.message_types_by_name['UpdateTaskRequest']
_UPDATETASKREPLY = DESCRIPTOR.message_types_by_name['UpdateTaskReply']
_AGENT = DESCRIPTOR.message_types_by_name['Agent']
_AGENTTASKASSIGNREQUEST = DESCRIPTOR.message_types_by_name['AgentTaskAssignRequest']
_AGENTTASKASSIGNREPLY = DESCRIPTOR.message_types_by_name['AgentTaskAssignReply']
_UPDATETESTREQUEST = DESCRIPTOR.message_types_by_name['UpdateTestRequest']
_TEST = DESCRIPTOR.message_types_by_name['Test']
_PINGCONFIG = DESCRIPTOR.message_types_by_name['PingConfig']
_TRACECONFIG = DESCRIPTOR.message_types_by_name['TraceConfig']
_HTTPCONFIG = DESCRIPTOR.message_types_by_name['HTTPConfig']
_HTTPCONFIG_HEADERSENTRY = _HTTPCONFIG.nested_types_by_name['HeadersEntry']
_HTTPCONFIG_CSSSELECTORSENTRY = _HTTPCONFIG.nested_types_by_name['CssSelectorsEntry']
_TESTCONFIG = DESCRIPTOR.message_types_by_name['TestConfig']
_HOSTNAMETEST = DESCRIPTOR.message_types_by_name['HostnameTest']
_IPTEST = DESCRIPTOR.message_types_by_name['IpTest']
_AGENTTEST = DESCRIPTOR.message_types_by_name['AgentTest']
_FLOWTEST = DESCRIPTOR.message_types_by_name['FlowTest']
_SITETEST = DESCRIPTOR.message_types_by_name['SiteTest']
_TAGTEST = DESCRIPTOR.message_types_by_name['TagTest']
_UPDATETESTREPLY = DESCRIPTOR.message_types_by_name['UpdateTestReply']
_SETTASKSFROMTESTSREQUEST = DESCRIPTOR.message_types_by_name['SetTasksFromTestsRequest']
_SETTASKSFROMTESTSREPLY = DESCRIPTOR.message_types_by_name['SetTasksFromTestsReply']
_DROPAGENTCACHEREQUEST = DESCRIPTOR.message_types_by_name['DropAgentCacheRequest']
_DROPAGENTCACHEREPLY = DESCRIPTOR.message_types_by_name['DropAgentCacheReply']
_GETHEALTHFORTESTSREQUEST = DESCRIPTOR.message_types_by_name['GetHealthForTestsRequest']
_GETHEALTHFORTESTSREPLY = DESCRIPTOR.message_types_by_name['GetHealthForTestsReply']
_TESTHEALTH = DESCRIPTOR.message_types_by_name['TestHealth']
_TASKHEALTH = DESCRIPTOR.message_types_by_name['TaskHealth']
_AGENTHEALTH = DESCRIPTOR.message_types_by_name['AgentHealth']
_AGGREGATEDHEALTH = DESCRIPTOR.message_types_by_name['AggregatedHealth']
_HEALTHMOMENT = DESCRIPTOR.message_types_by_name['HealthMoment']
_HEALTH = DESCRIPTOR.message_types_by_name['Health']
_GETTRACEFORTESTREQUEST = DESCRIPTOR.message_types_by_name['GetTraceForTestRequest']
_GETTRACEFORTESTREPLY = DESCRIPTOR.message_types_by_name['GetTraceForTestReply']
_TRACE = DESCRIPTOR.message_types_by_name['Trace']
_TRACEHOP = DESCRIPTOR.message_types_by_name['TraceHop']
_TRACELINK = DESCRIPTOR.message_types_by_name['TraceLink']
_GETHEALTHOFAGENTSREQUEST = DESCRIPTOR.message_types_by_name['GetHealthOfAgentsRequest']
_GETHEALTHOFAGENTSREPLY = DESCRIPTOR.message_types_by_name['GetHealthOfAgentsReply']
_AGENTHEALTHSTATUS = DESCRIPTOR.message_types_by_name['AgentHealthStatus']
_GETERRORSFORTESTSREQUEST = DESCRIPTOR.message_types_by_name['GetErrorsForTestsRequest']
_GETERRORSFORTESTSREPLY = DESCRIPTOR.message_types_by_name['GetErrorsForTestsReply']
_TESTERROR = DESCRIPTOR.message_types_by_name['TestError']
_TASKERROR = DESCRIPTOR.message_types_by_name['TaskError']
_AGENTERROR = DESCRIPTOR.message_types_by_name['AgentError']
_AGENTERRORSET = DESCRIPTOR.message_types_by_name['AgentErrorSet']
_AGENTTIMEOUTSET = DESCRIPTOR.message_types_by_name['AgentTimeoutSet']
_AUTHREPLY_AUTH = _AUTHREPLY.enum_types_by_name['Auth']
_CUSTOMCOLUMN_TYPE = _CUSTOMCOLUMN.enum_types_by_name['Type']
_TASK_STATE = _TASK.enum_types_by_name['State']
Status = _reflection.GeneratedProtocolMessageType('Status', (_message.Message,), {

  'Error' : _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), {
    'DESCRIPTOR' : _STATUS_ERROR,
    '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:synthetic.Status.Error)
    })
  ,
  'DESCRIPTOR' : _STATUS,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Status)
  })
_sym_db.RegisterMessage(Status)
_sym_db.RegisterMessage(Status.Error)

AuthRequest = _reflection.GeneratedProtocolMessageType('AuthRequest', (_message.Message,), {
  'DESCRIPTOR' : _AUTHREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AuthRequest)
  })
_sym_db.RegisterMessage(AuthRequest)

AuthReply = _reflection.GeneratedProtocolMessageType('AuthReply', (_message.Message,), {
  'DESCRIPTOR' : _AUTHREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AuthReply)
  })
_sym_db.RegisterMessage(AuthReply)

Kentik = _reflection.GeneratedProtocolMessageType('Kentik', (_message.Message,), {
  'DESCRIPTOR' : _KENTIK,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Kentik)
  })
_sym_db.RegisterMessage(Kentik)

Device = _reflection.GeneratedProtocolMessageType('Device', (_message.Message,), {
  'DESCRIPTOR' : _DEVICE,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Device)
  })
_sym_db.RegisterMessage(Device)

CustomColumn = _reflection.GeneratedProtocolMessageType('CustomColumn', (_message.Message,), {
  'DESCRIPTOR' : _CUSTOMCOLUMN,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.CustomColumn)
  })
_sym_db.RegisterMessage(CustomColumn)

TasksRequest = _reflection.GeneratedProtocolMessageType('TasksRequest', (_message.Message,), {
  'DESCRIPTOR' : _TASKSREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TasksRequest)
  })
_sym_db.RegisterMessage(TasksRequest)

TasksReply = _reflection.GeneratedProtocolMessageType('TasksReply', (_message.Message,), {
  'DESCRIPTOR' : _TASKSREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TasksReply)
  })
_sym_db.RegisterMessage(TasksReply)

Group = _reflection.GeneratedProtocolMessageType('Group', (_message.Message,), {
  'DESCRIPTOR' : _GROUP,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Group)
  })
_sym_db.RegisterMessage(Group)

Task = _reflection.GeneratedProtocolMessageType('Task', (_message.Message,), {
  'DESCRIPTOR' : _TASK,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Task)
  })
_sym_db.RegisterMessage(Task)

PingTaskDefinition = _reflection.GeneratedProtocolMessageType('PingTaskDefinition', (_message.Message,), {
  'DESCRIPTOR' : _PINGTASKDEFINITION,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.PingTaskDefinition)
  })
_sym_db.RegisterMessage(PingTaskDefinition)

TraceTaskDefinition = _reflection.GeneratedProtocolMessageType('TraceTaskDefinition', (_message.Message,), {
  'DESCRIPTOR' : _TRACETASKDEFINITION,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TraceTaskDefinition)
  })
_sym_db.RegisterMessage(TraceTaskDefinition)

HTTPTaskDefinition = _reflection.GeneratedProtocolMessageType('HTTPTaskDefinition', (_message.Message,), {

  'HeadersEntry' : _reflection.GeneratedProtocolMessageType('HeadersEntry', (_message.Message,), {
    'DESCRIPTOR' : _HTTPTASKDEFINITION_HEADERSENTRY,
    '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:synthetic.HTTPTaskDefinition.HeadersEntry)
    })
  ,

  'CssSelectorsEntry' : _reflection.GeneratedProtocolMessageType('CssSelectorsEntry', (_message.Message,), {
    'DESCRIPTOR' : _HTTPTASKDEFINITION_CSSSELECTORSENTRY,
    '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:synthetic.HTTPTaskDefinition.CssSelectorsEntry)
    })
  ,
  'DESCRIPTOR' : _HTTPTASKDEFINITION,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.HTTPTaskDefinition)
  })
_sym_db.RegisterMessage(HTTPTaskDefinition)
_sym_db.RegisterMessage(HTTPTaskDefinition.HeadersEntry)
_sym_db.RegisterMessage(HTTPTaskDefinition.CssSelectorsEntry)

KnockTaskDefinition = _reflection.GeneratedProtocolMessageType('KnockTaskDefinition', (_message.Message,), {
  'DESCRIPTOR' : _KNOCKTASKDEFINITION,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.KnockTaskDefinition)
  })
_sym_db.RegisterMessage(KnockTaskDefinition)

DNSTaskDefinition = _reflection.GeneratedProtocolMessageType('DNSTaskDefinition', (_message.Message,), {
  'DESCRIPTOR' : _DNSTASKDEFINITION,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.DNSTaskDefinition)
  })
_sym_db.RegisterMessage(DNSTaskDefinition)

ShakeTaskDefinition = _reflection.GeneratedProtocolMessageType('ShakeTaskDefinition', (_message.Message,), {
  'DESCRIPTOR' : _SHAKETASKDEFINITION,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.ShakeTaskDefinition)
  })
_sym_db.RegisterMessage(ShakeTaskDefinition)

StatusRequest = _reflection.GeneratedProtocolMessageType('StatusRequest', (_message.Message,), {
  'DESCRIPTOR' : _STATUSREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.StatusRequest)
  })
_sym_db.RegisterMessage(StatusRequest)

StatusReport = _reflection.GeneratedProtocolMessageType('StatusReport', (_message.Message,), {
  'DESCRIPTOR' : _STATUSREPORT,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.StatusReport)
  })
_sym_db.RegisterMessage(StatusReport)

TaskStatus = _reflection.GeneratedProtocolMessageType('TaskStatus', (_message.Message,), {
  'DESCRIPTOR' : _TASKSTATUS,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TaskStatus)
  })
_sym_db.RegisterMessage(TaskStatus)

StatusReply = _reflection.GeneratedProtocolMessageType('StatusReply', (_message.Message,), {
  'DESCRIPTOR' : _STATUSREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.StatusReply)
  })
_sym_db.RegisterMessage(StatusReply)

DeauthRequest = _reflection.GeneratedProtocolMessageType('DeauthRequest', (_message.Message,), {
  'DESCRIPTOR' : _DEAUTHREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.DeauthRequest)
  })
_sym_db.RegisterMessage(DeauthRequest)

DeauthReply = _reflection.GeneratedProtocolMessageType('DeauthReply', (_message.Message,), {
  'DESCRIPTOR' : _DEAUTHREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.DeauthReply)
  })
_sym_db.RegisterMessage(DeauthReply)

SearchRequest = _reflection.GeneratedProtocolMessageType('SearchRequest', (_message.Message,), {
  'DESCRIPTOR' : _SEARCHREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.SearchRequest)
  })
_sym_db.RegisterMessage(SearchRequest)

Where = _reflection.GeneratedProtocolMessageType('Where', (_message.Message,), {
  'DESCRIPTOR' : _WHERE,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Where)
  })
_sym_db.RegisterMessage(Where)

OrderBy = _reflection.GeneratedProtocolMessageType('OrderBy', (_message.Message,), {
  'DESCRIPTOR' : _ORDERBY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.OrderBy)
  })
_sym_db.RegisterMessage(OrderBy)

CriteriaGroups = _reflection.GeneratedProtocolMessageType('CriteriaGroups', (_message.Message,), {
  'DESCRIPTOR' : _CRITERIAGROUPS,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.CriteriaGroups)
  })
_sym_db.RegisterMessage(CriteriaGroups)

Criteria = _reflection.GeneratedProtocolMessageType('Criteria', (_message.Message,), {
  'DESCRIPTOR' : _CRITERIA,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Criteria)
  })
_sym_db.RegisterMessage(Criteria)

SearchReply = _reflection.GeneratedProtocolMessageType('SearchReply', (_message.Message,), {
  'DESCRIPTOR' : _SEARCHREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.SearchReply)
  })
_sym_db.RegisterMessage(SearchReply)

UpdateAgentRequest = _reflection.GeneratedProtocolMessageType('UpdateAgentRequest', (_message.Message,), {
  'DESCRIPTOR' : _UPDATEAGENTREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.UpdateAgentRequest)
  })
_sym_db.RegisterMessage(UpdateAgentRequest)

UpdateAgentReply = _reflection.GeneratedProtocolMessageType('UpdateAgentReply', (_message.Message,), {
  'DESCRIPTOR' : _UPDATEAGENTREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.UpdateAgentReply)
  })
_sym_db.RegisterMessage(UpdateAgentReply)

UpdateTaskRequest = _reflection.GeneratedProtocolMessageType('UpdateTaskRequest', (_message.Message,), {
  'DESCRIPTOR' : _UPDATETASKREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.UpdateTaskRequest)
  })
_sym_db.RegisterMessage(UpdateTaskRequest)

UpdateTaskReply = _reflection.GeneratedProtocolMessageType('UpdateTaskReply', (_message.Message,), {
  'DESCRIPTOR' : _UPDATETASKREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.UpdateTaskReply)
  })
_sym_db.RegisterMessage(UpdateTaskReply)

Agent = _reflection.GeneratedProtocolMessageType('Agent', (_message.Message,), {
  'DESCRIPTOR' : _AGENT,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Agent)
  })
_sym_db.RegisterMessage(Agent)

AgentTaskAssignRequest = _reflection.GeneratedProtocolMessageType('AgentTaskAssignRequest', (_message.Message,), {
  'DESCRIPTOR' : _AGENTTASKASSIGNREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AgentTaskAssignRequest)
  })
_sym_db.RegisterMessage(AgentTaskAssignRequest)

AgentTaskAssignReply = _reflection.GeneratedProtocolMessageType('AgentTaskAssignReply', (_message.Message,), {
  'DESCRIPTOR' : _AGENTTASKASSIGNREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AgentTaskAssignReply)
  })
_sym_db.RegisterMessage(AgentTaskAssignReply)

UpdateTestRequest = _reflection.GeneratedProtocolMessageType('UpdateTestRequest', (_message.Message,), {
  'DESCRIPTOR' : _UPDATETESTREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.UpdateTestRequest)
  })
_sym_db.RegisterMessage(UpdateTestRequest)

Test = _reflection.GeneratedProtocolMessageType('Test', (_message.Message,), {
  'DESCRIPTOR' : _TEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Test)
  })
_sym_db.RegisterMessage(Test)

PingConfig = _reflection.GeneratedProtocolMessageType('PingConfig', (_message.Message,), {
  'DESCRIPTOR' : _PINGCONFIG,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.PingConfig)
  })
_sym_db.RegisterMessage(PingConfig)

TraceConfig = _reflection.GeneratedProtocolMessageType('TraceConfig', (_message.Message,), {
  'DESCRIPTOR' : _TRACECONFIG,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TraceConfig)
  })
_sym_db.RegisterMessage(TraceConfig)

HTTPConfig = _reflection.GeneratedProtocolMessageType('HTTPConfig', (_message.Message,), {

  'HeadersEntry' : _reflection.GeneratedProtocolMessageType('HeadersEntry', (_message.Message,), {
    'DESCRIPTOR' : _HTTPCONFIG_HEADERSENTRY,
    '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:synthetic.HTTPConfig.HeadersEntry)
    })
  ,

  'CssSelectorsEntry' : _reflection.GeneratedProtocolMessageType('CssSelectorsEntry', (_message.Message,), {
    'DESCRIPTOR' : _HTTPCONFIG_CSSSELECTORSENTRY,
    '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
    # @@protoc_insertion_point(class_scope:synthetic.HTTPConfig.CssSelectorsEntry)
    })
  ,
  'DESCRIPTOR' : _HTTPCONFIG,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.HTTPConfig)
  })
_sym_db.RegisterMessage(HTTPConfig)
_sym_db.RegisterMessage(HTTPConfig.HeadersEntry)
_sym_db.RegisterMessage(HTTPConfig.CssSelectorsEntry)

TestConfig = _reflection.GeneratedProtocolMessageType('TestConfig', (_message.Message,), {
  'DESCRIPTOR' : _TESTCONFIG,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TestConfig)
  })
_sym_db.RegisterMessage(TestConfig)

HostnameTest = _reflection.GeneratedProtocolMessageType('HostnameTest', (_message.Message,), {
  'DESCRIPTOR' : _HOSTNAMETEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.HostnameTest)
  })
_sym_db.RegisterMessage(HostnameTest)

IpTest = _reflection.GeneratedProtocolMessageType('IpTest', (_message.Message,), {
  'DESCRIPTOR' : _IPTEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.IpTest)
  })
_sym_db.RegisterMessage(IpTest)

AgentTest = _reflection.GeneratedProtocolMessageType('AgentTest', (_message.Message,), {
  'DESCRIPTOR' : _AGENTTEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AgentTest)
  })
_sym_db.RegisterMessage(AgentTest)

FlowTest = _reflection.GeneratedProtocolMessageType('FlowTest', (_message.Message,), {
  'DESCRIPTOR' : _FLOWTEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.FlowTest)
  })
_sym_db.RegisterMessage(FlowTest)

SiteTest = _reflection.GeneratedProtocolMessageType('SiteTest', (_message.Message,), {
  'DESCRIPTOR' : _SITETEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.SiteTest)
  })
_sym_db.RegisterMessage(SiteTest)

TagTest = _reflection.GeneratedProtocolMessageType('TagTest', (_message.Message,), {
  'DESCRIPTOR' : _TAGTEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TagTest)
  })
_sym_db.RegisterMessage(TagTest)

UpdateTestReply = _reflection.GeneratedProtocolMessageType('UpdateTestReply', (_message.Message,), {
  'DESCRIPTOR' : _UPDATETESTREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.UpdateTestReply)
  })
_sym_db.RegisterMessage(UpdateTestReply)

SetTasksFromTestsRequest = _reflection.GeneratedProtocolMessageType('SetTasksFromTestsRequest', (_message.Message,), {
  'DESCRIPTOR' : _SETTASKSFROMTESTSREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.SetTasksFromTestsRequest)
  })
_sym_db.RegisterMessage(SetTasksFromTestsRequest)

SetTasksFromTestsReply = _reflection.GeneratedProtocolMessageType('SetTasksFromTestsReply', (_message.Message,), {
  'DESCRIPTOR' : _SETTASKSFROMTESTSREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.SetTasksFromTestsReply)
  })
_sym_db.RegisterMessage(SetTasksFromTestsReply)

DropAgentCacheRequest = _reflection.GeneratedProtocolMessageType('DropAgentCacheRequest', (_message.Message,), {
  'DESCRIPTOR' : _DROPAGENTCACHEREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.DropAgentCacheRequest)
  })
_sym_db.RegisterMessage(DropAgentCacheRequest)

DropAgentCacheReply = _reflection.GeneratedProtocolMessageType('DropAgentCacheReply', (_message.Message,), {
  'DESCRIPTOR' : _DROPAGENTCACHEREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.DropAgentCacheReply)
  })
_sym_db.RegisterMessage(DropAgentCacheReply)

GetHealthForTestsRequest = _reflection.GeneratedProtocolMessageType('GetHealthForTestsRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETHEALTHFORTESTSREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.GetHealthForTestsRequest)
  })
_sym_db.RegisterMessage(GetHealthForTestsRequest)

GetHealthForTestsReply = _reflection.GeneratedProtocolMessageType('GetHealthForTestsReply', (_message.Message,), {
  'DESCRIPTOR' : _GETHEALTHFORTESTSREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.GetHealthForTestsReply)
  })
_sym_db.RegisterMessage(GetHealthForTestsReply)

TestHealth = _reflection.GeneratedProtocolMessageType('TestHealth', (_message.Message,), {
  'DESCRIPTOR' : _TESTHEALTH,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TestHealth)
  })
_sym_db.RegisterMessage(TestHealth)

TaskHealth = _reflection.GeneratedProtocolMessageType('TaskHealth', (_message.Message,), {
  'DESCRIPTOR' : _TASKHEALTH,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TaskHealth)
  })
_sym_db.RegisterMessage(TaskHealth)

AgentHealth = _reflection.GeneratedProtocolMessageType('AgentHealth', (_message.Message,), {
  'DESCRIPTOR' : _AGENTHEALTH,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AgentHealth)
  })
_sym_db.RegisterMessage(AgentHealth)

AggregatedHealth = _reflection.GeneratedProtocolMessageType('AggregatedHealth', (_message.Message,), {
  'DESCRIPTOR' : _AGGREGATEDHEALTH,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AggregatedHealth)
  })
_sym_db.RegisterMessage(AggregatedHealth)

HealthMoment = _reflection.GeneratedProtocolMessageType('HealthMoment', (_message.Message,), {
  'DESCRIPTOR' : _HEALTHMOMENT,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.HealthMoment)
  })
_sym_db.RegisterMessage(HealthMoment)

Health = _reflection.GeneratedProtocolMessageType('Health', (_message.Message,), {
  'DESCRIPTOR' : _HEALTH,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Health)
  })
_sym_db.RegisterMessage(Health)

GetTraceForTestRequest = _reflection.GeneratedProtocolMessageType('GetTraceForTestRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETTRACEFORTESTREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.GetTraceForTestRequest)
  })
_sym_db.RegisterMessage(GetTraceForTestRequest)

GetTraceForTestReply = _reflection.GeneratedProtocolMessageType('GetTraceForTestReply', (_message.Message,), {
  'DESCRIPTOR' : _GETTRACEFORTESTREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.GetTraceForTestReply)
  })
_sym_db.RegisterMessage(GetTraceForTestReply)

Trace = _reflection.GeneratedProtocolMessageType('Trace', (_message.Message,), {
  'DESCRIPTOR' : _TRACE,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.Trace)
  })
_sym_db.RegisterMessage(Trace)

TraceHop = _reflection.GeneratedProtocolMessageType('TraceHop', (_message.Message,), {
  'DESCRIPTOR' : _TRACEHOP,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TraceHop)
  })
_sym_db.RegisterMessage(TraceHop)

TraceLink = _reflection.GeneratedProtocolMessageType('TraceLink', (_message.Message,), {
  'DESCRIPTOR' : _TRACELINK,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TraceLink)
  })
_sym_db.RegisterMessage(TraceLink)

GetHealthOfAgentsRequest = _reflection.GeneratedProtocolMessageType('GetHealthOfAgentsRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETHEALTHOFAGENTSREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.GetHealthOfAgentsRequest)
  })
_sym_db.RegisterMessage(GetHealthOfAgentsRequest)

GetHealthOfAgentsReply = _reflection.GeneratedProtocolMessageType('GetHealthOfAgentsReply', (_message.Message,), {
  'DESCRIPTOR' : _GETHEALTHOFAGENTSREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.GetHealthOfAgentsReply)
  })
_sym_db.RegisterMessage(GetHealthOfAgentsReply)

AgentHealthStatus = _reflection.GeneratedProtocolMessageType('AgentHealthStatus', (_message.Message,), {
  'DESCRIPTOR' : _AGENTHEALTHSTATUS,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AgentHealthStatus)
  })
_sym_db.RegisterMessage(AgentHealthStatus)

GetErrorsForTestsRequest = _reflection.GeneratedProtocolMessageType('GetErrorsForTestsRequest', (_message.Message,), {
  'DESCRIPTOR' : _GETERRORSFORTESTSREQUEST,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.GetErrorsForTestsRequest)
  })
_sym_db.RegisterMessage(GetErrorsForTestsRequest)

GetErrorsForTestsReply = _reflection.GeneratedProtocolMessageType('GetErrorsForTestsReply', (_message.Message,), {
  'DESCRIPTOR' : _GETERRORSFORTESTSREPLY,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.GetErrorsForTestsReply)
  })
_sym_db.RegisterMessage(GetErrorsForTestsReply)

TestError = _reflection.GeneratedProtocolMessageType('TestError', (_message.Message,), {
  'DESCRIPTOR' : _TESTERROR,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TestError)
  })
_sym_db.RegisterMessage(TestError)

TaskError = _reflection.GeneratedProtocolMessageType('TaskError', (_message.Message,), {
  'DESCRIPTOR' : _TASKERROR,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.TaskError)
  })
_sym_db.RegisterMessage(TaskError)

AgentError = _reflection.GeneratedProtocolMessageType('AgentError', (_message.Message,), {
  'DESCRIPTOR' : _AGENTERROR,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AgentError)
  })
_sym_db.RegisterMessage(AgentError)

AgentErrorSet = _reflection.GeneratedProtocolMessageType('AgentErrorSet', (_message.Message,), {
  'DESCRIPTOR' : _AGENTERRORSET,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AgentErrorSet)
  })
_sym_db.RegisterMessage(AgentErrorSet)

AgentTimeoutSet = _reflection.GeneratedProtocolMessageType('AgentTimeoutSet', (_message.Message,), {
  'DESCRIPTOR' : _AGENTTIMEOUTSET,
  '__module__' : 'kentik.synthetics.backend.v1.synthetics_pb2'
  # @@protoc_insertion_point(class_scope:synthetic.AgentTimeoutSet)
  })
_sym_db.RegisterMessage(AgentTimeoutSet)

_SYNTHETICAGENT = DESCRIPTOR.services_by_name['SyntheticAgent']
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'\222A(\022&\n\035Kentik Synthetics Backend API2\0050.0.1'
  _HTTPTASKDEFINITION_HEADERSENTRY._options = None
  _HTTPTASKDEFINITION_HEADERSENTRY._serialized_options = b'8\001'
  _HTTPTASKDEFINITION_CSSSELECTORSENTRY._options = None
  _HTTPTASKDEFINITION_CSSSELECTORSENTRY._serialized_options = b'8\001'
  _HTTPCONFIG_HEADERSENTRY._options = None
  _HTTPCONFIG_HEADERSENTRY._serialized_options = b'8\001'
  _HTTPCONFIG_CSSSELECTORSENTRY._options = None
  _HTTPCONFIG_CSSSELECTORSENTRY._serialized_options = b'8\001'
  _SYNTHETICAGENT._options = None
  _SYNTHETICAGENT._serialized_options = b'\370\327\002\001'
  _SYNTHETICAGENT.methods_by_name['Auth']._options = None
  _SYNTHETICAGENT.methods_by_name['Auth']._serialized_options = b'\202\323\344\223\002\033\"\026/api/agent/v1/syn/auth:\001*'
  _SYNTHETICAGENT.methods_by_name['Tasks']._options = None
  _SYNTHETICAGENT.methods_by_name['Tasks']._serialized_options = b'\202\323\344\223\002\034\"\027/api/agent/v1/syn/tasks:\001*'
  _SYNTHETICAGENT.methods_by_name['Status']._options = None
  _SYNTHETICAGENT.methods_by_name['Status']._serialized_options = b'\202\323\344\223\002\035\"\030/api/agent/v1/syn/status:\001*'
  _SYNTHETICAGENT.methods_by_name['Deauth']._options = None
  _SYNTHETICAGENT.methods_by_name['Deauth']._serialized_options = b'\202\323\344\223\002\035\"\030/api/agent/v1/syn/deauth:\001*'
  _SYNTHETICAGENT.methods_by_name['Search']._options = None
  _SYNTHETICAGENT.methods_by_name['Search']._serialized_options = b'\202\323\344\223\002\034\"\027/v1/syn/internal/search:\001*'
  _SYNTHETICAGENT.methods_by_name['UpdateAgent']._options = None
  _SYNTHETICAGENT.methods_by_name['UpdateAgent']._serialized_options = b'\202\323\344\223\002\034\032\027/v1/syn/internal/agents:\001*'
  _SYNTHETICAGENT.methods_by_name['UpdateTask']._options = None
  _SYNTHETICAGENT.methods_by_name['UpdateTask']._serialized_options = b'\202\323\344\223\002\033\032\026/v1/syn/internal/tasks:\001*'
  _SYNTHETICAGENT.methods_by_name['AgentTaskAssign']._options = None
  _SYNTHETICAGENT.methods_by_name['AgentTaskAssign']._serialized_options = b'\202\323\344\223\002*\032%/v1/syn/internal/agentTask/{agent_id}:\001*'
  _SYNTHETICAGENT.methods_by_name['UpdateTest']._options = None
  _SYNTHETICAGENT.methods_by_name['UpdateTest']._serialized_options = b'\202\323\344\223\002\033\032\026/v1/syn/internal/tests:\001*'
  _SYNTHETICAGENT.methods_by_name['SetTasksFromTests']._options = None
  _SYNTHETICAGENT.methods_by_name['SetTasksFromTests']._serialized_options = b'\202\323\344\223\002\036\032\031/v1/syn/internal/settasks:\001*'
  _SYNTHETICAGENT.methods_by_name['GetHealthForTests']._options = None
  _SYNTHETICAGENT.methods_by_name['GetHealthForTests']._serialized_options = b'\202\323\344\223\002\"\"\035/v1/syn/internal/health/tasks:\001*'
  _SYNTHETICAGENT.methods_by_name['GetTraceForTest']._options = None
  _SYNTHETICAGENT.methods_by_name['GetTraceForTest']._serialized_options = b'\202\323\344\223\002\"\"\035/v1/syn/internal/health/trace:\001*'
  _SYNTHETICAGENT.methods_by_name['DropAgentCache']._options = None
  _SYNTHETICAGENT.methods_by_name['DropAgentCache']._serialized_options = b'\202\323\344\223\002%\" /v1/syn/internal/dropcache/agent:\001*'
  _SYNTHETICAGENT.methods_by_name['GetHealthOfAgents']._options = None
  _SYNTHETICAGENT.methods_by_name['GetHealthOfAgents']._serialized_options = b'\202\323\344\223\002#\"\036/v1/syn/internal/health/agents:\001*'
  _SYNTHETICAGENT.methods_by_name['GetErrorsForTests']._options = None
  _SYNTHETICAGENT.methods_by_name['GetErrorsForTests']._serialized_options = b'\202\323\344\223\002#\"\036/v1/syn/internal/health/errors:\001*'
  _AGENTIMPL._serialized_start=9730
  _AGENTIMPL._serialized_end=9761
  _IPFAMILY._serialized_start=9763
  _IPFAMILY._serialized_end=9799
  _STATUS._serialized_start=183
  _STATUS._serialized_end=308
  _STATUS_ERROR._serialized_start=247
  _STATUS_ERROR._serialized_end=298
  _AUTHREQUEST._serialized_start=311
  _AUTHREQUEST._serialized_end=526
  _AUTHREPLY._serialized_start=529
  _AUTHREPLY._serialized_end=752
  _AUTHREPLY_AUTH._serialized_start=709
  _AUTHREPLY_AUTH._serialized_end=752
  _KENTIK._serialized_start=754
  _KENTIK._serialized_end=792
  _DEVICE._serialized_start=794
  _DEVICE._serialized_end=856
  _CUSTOMCOLUMN._serialized_start=859
  _CUSTOMCOLUMN._serialized_end=997
  _CUSTOMCOLUMN_TYPE._serialized_start=945
  _CUSTOMCOLUMN_TYPE._serialized_end=997
  _TASKSREQUEST._serialized_start=999
  _TASKSREQUEST._serialized_end=1045
  _TASKSREPLY._serialized_start=1047
  _TASKSREPLY._serialized_end=1147
  _GROUP._serialized_start=1150
  _GROUP._serialized_end=1279
  _TASK._serialized_start=1282
  _TASK._serialized_end=1977
  _TASK_STATE._serialized_start=1917
  _TASK_STATE._serialized_end=1963
  _PINGTASKDEFINITION._serialized_start=1979
  _PINGTASKDEFINITION._serialized_end=2077
  _TRACETASKDEFINITION._serialized_start=2080
  _TRACETASKDEFINITION._serialized_end=2226
  _HTTPTASKDEFINITION._serialized_start=2229
  _HTTPTASKDEFINITION._serialized_end=2629
  _HTTPTASKDEFINITION_HEADERSENTRY._serialized_start=2530
  _HTTPTASKDEFINITION_HEADERSENTRY._serialized_end=2576
  _HTTPTASKDEFINITION_CSSSELECTORSENTRY._serialized_start=2578
  _HTTPTASKDEFINITION_CSSSELECTORSENTRY._serialized_end=2629
  _KNOCKTASKDEFINITION._serialized_start=2631
  _KNOCKTASKDEFINITION._serialized_end=2744
  _DNSTASKDEFINITION._serialized_start=2747
  _DNSTASKDEFINITION._serialized_end=2875
  _SHAKETASKDEFINITION._serialized_start=2877
  _SHAKETASKDEFINITION._serialized_end=2960
  _STATUSREQUEST._serialized_start=2962
  _STATUSREQUEST._serialized_end=3035
  _STATUSREPORT._serialized_start=3037
  _STATUSREPORT._serialized_end=3104
  _TASKSTATUS._serialized_start=3106
  _TASKSTATUS._serialized_end=3200
  _STATUSREPLY._serialized_start=3202
  _STATUSREPLY._serialized_end=3250
  _DEAUTHREQUEST._serialized_start=3252
  _DEAUTHREQUEST._serialized_end=3284
  _DEAUTHREPLY._serialized_start=3286
  _DEAUTHREPLY._serialized_end=3334
  _SEARCHREQUEST._serialized_start=3337
  _SEARCHREQUEST._serialized_end=3490
  _WHERE._serialized_start=3492
  _WHERE._serialized_end=3570
  _ORDERBY._serialized_start=3572
  _ORDERBY._serialized_end=3616
  _CRITERIAGROUPS._serialized_start=3618
  _CRITERIAGROUPS._serialized_end=3692
  _CRITERIA._serialized_start=3694
  _CRITERIA._serialized_end=3752
  _SEARCHREPLY._serialized_start=3755
  _SEARCHREPLY._serialized_end=3901
  _UPDATEAGENTREQUEST._serialized_start=3903
  _UPDATEAGENTREQUEST._serialized_end=3957
  _UPDATEAGENTREPLY._serialized_start=3959
  _UPDATEAGENTREPLY._serialized_end=4025
  _UPDATETASKREQUEST._serialized_start=4027
  _UPDATETASKREQUEST._serialized_end=4078
  _UPDATETASKREPLY._serialized_start=4080
  _UPDATETASKREPLY._serialized_end=4145
  _AGENT._serialized_start=4148
  _AGENT._serialized_end=4564
  _AGENTTASKASSIGNREQUEST._serialized_start=4566
  _AGENTTASKASSIGNREQUEST._serialized_end=4639
  _AGENTTASKASSIGNREPLY._serialized_start=4641
  _AGENTTASKASSIGNREPLY._serialized_end=4698
  _UPDATETESTREQUEST._serialized_start=4700
  _UPDATETESTREQUEST._serialized_end=4751
  _TEST._serialized_start=4754
  _TEST._serialized_end=5142
  _PINGCONFIG._serialized_start=5144
  _PINGCONFIG._serialized_end=5218
  _TRACECONFIG._serialized_start=5220
  _TRACECONFIG._serialized_end=5342
  _HTTPCONFIG._serialized_start=5345
  _HTTPCONFIG._serialized_end=5684
  _HTTPCONFIG_HEADERSENTRY._serialized_start=2530
  _HTTPCONFIG_HEADERSENTRY._serialized_end=2576
  _HTTPCONFIG_CSSSELECTORSENTRY._serialized_start=2578
  _HTTPCONFIG_CSSSELECTORSENTRY._serialized_end=2629
  _TESTCONFIG._serialized_start=5687
  _TESTCONFIG._serialized_end=6227
  _HOSTNAMETEST._serialized_start=6229
  _HOSTNAMETEST._serialized_end=6259
  _IPTEST._serialized_start=6261
  _IPTEST._serialized_end=6285
  _AGENTTEST._serialized_start=6287
  _AGENTTEST._serialized_end=6314
  _FLOWTEST._serialized_start=6316
  _FLOWTEST._serialized_end=6415
  _SITETEST._serialized_start=6417
  _SITETEST._serialized_end=6443
  _TAGTEST._serialized_start=6445
  _TAGTEST._serialized_end=6470
  _UPDATETESTREPLY._serialized_start=6472
  _UPDATETESTREPLY._serialized_end=6537
  _SETTASKSFROMTESTSREQUEST._serialized_start=6539
  _SETTASKSFROMTESTSREQUEST._serialized_end=6598
  _SETTASKSFROMTESTSREPLY._serialized_start=6600
  _SETTASKSFROMTESTSREPLY._serialized_end=6678
  _DROPAGENTCACHEREQUEST._serialized_start=6680
  _DROPAGENTCACHEREQUEST._serialized_end=6741
  _DROPAGENTCACHEREPLY._serialized_start=6743
  _DROPAGENTCACHEREPLY._serialized_end=6799
  _GETHEALTHFORTESTSREQUEST._serialized_start=6802
  _GETHEALTHFORTESTSREQUEST._serialized_end=6936
  _GETHEALTHFORTESTSREPLY._serialized_start=6938
  _GETHEALTHFORTESTSREPLY._serialized_end=7036
  _TESTHEALTH._serialized_start=7039
  _TESTHEALTH._serialized_end=7236
  _TASKHEALTH._serialized_start=7238
  _TASKHEALTH._serialized_end=7364
  _AGENTHEALTH._serialized_start=7367
  _AGENTHEALTH._serialized_end=7497
  _AGGREGATEDHEALTH._serialized_start=7499
  _AGGREGATEDHEALTH._serialized_end=7598
  _HEALTHMOMENT._serialized_start=7601
  _HEALTHMOMENT._serialized_end=8089
  _HEALTH._serialized_start=8091
  _HEALTH._serialized_end=8129
  _GETTRACEFORTESTREQUEST._serialized_start=8131
  _GETTRACEFORTESTREQUEST._serialized_end=8244
  _GETTRACEFORTESTREPLY._serialized_start=8246
  _GETTRACEFORTESTREPLY._serialized_end=8336
  _TRACE._serialized_start=8338
  _TRACE._serialized_end=8417
  _TRACEHOP._serialized_start=8420
  _TRACEHOP._serialized_end=8569
  _TRACELINK._serialized_start=8572
  _TRACELINK._serialized_end=8707
  _GETHEALTHOFAGENTSREQUEST._serialized_start=8709
  _GETHEALTHOFAGENTSREQUEST._serialized_end=8774
  _GETHEALTHOFAGENTSREPLY._serialized_start=8777
  _GETHEALTHOFAGENTSREPLY._serialized_end=8924
  _AGENTHEALTHSTATUS._serialized_start=8927
  _AGENTHEALTHSTATUS._serialized_end=9076
  _GETERRORSFORTESTSREQUEST._serialized_start=9079
  _GETERRORSFORTESTSREQUEST._serialized_end=9213
  _GETERRORSFORTESTSREPLY._serialized_start=9215
  _GETERRORSFORTESTSREPLY._serialized_end=9312
  _TESTERROR._serialized_start=9314
  _TESTERROR._serialized_end=9380
  _TASKERROR._serialized_start=9382
  _TASKERROR._serialized_end=9463
  _AGENTERROR._serialized_start=9466
  _AGENTERROR._serialized_end=9599
  _AGENTERRORSET._serialized_start=9601
  _AGENTERRORSET._serialized_end=9668
  _AGENTTIMEOUTSET._serialized_start=9670
  _AGENTTIMEOUTSET._serialized_end=9728
  _SYNTHETICAGENT._serialized_start=9802
  _SYNTHETICAGENT._serialized_end=11559
# @@protoc_insertion_point(module_scope)
