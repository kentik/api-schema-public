// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/type/datetime.proto

#include "google/type/datetime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2ftype_2fdatetime_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeZone_google_2ftype_2fdatetime_2eproto;
namespace google {
namespace type {
class DateTimeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DateTime> _instance;
  const PROTOBUF_NAMESPACE_ID::Duration* utc_offset_;
  const ::google::type::TimeZone* time_zone_;
} _DateTime_default_instance_;
class TimeZoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeZone> _instance;
} _TimeZone_default_instance_;
}  // namespace type
}  // namespace google
static void InitDefaultsscc_info_DateTime_google_2ftype_2fdatetime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::type::_DateTime_default_instance_;
    new (ptr) ::google::type::DateTime();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::type::DateTime::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DateTime_google_2ftype_2fdatetime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DateTime_google_2ftype_2fdatetime_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_TimeZone_google_2ftype_2fdatetime_2eproto.base,}};

static void InitDefaultsscc_info_TimeZone_google_2ftype_2fdatetime_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::type::_TimeZone_default_instance_;
    new (ptr) ::google::type::TimeZone();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::type::TimeZone::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeZone_google_2ftype_2fdatetime_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeZone_google_2ftype_2fdatetime_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2ftype_2fdatetime_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2ftype_2fdatetime_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2ftype_2fdatetime_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2ftype_2fdatetime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, year_),
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, month_),
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, day_),
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, hours_),
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, minutes_),
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, seconds_),
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, nanos_),
  offsetof(::google::type::DateTimeDefaultTypeInternal, utc_offset_),
  offsetof(::google::type::DateTimeDefaultTypeInternal, time_zone_),
  PROTOBUF_FIELD_OFFSET(::google::type::DateTime, time_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::type::TimeZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::type::TimeZone, id_),
  PROTOBUF_FIELD_OFFSET(::google::type::TimeZone, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::type::DateTime)},
  { 15, -1, sizeof(::google::type::TimeZone)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::type::_DateTime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::type::_TimeZone_default_instance_),
};

const char descriptor_table_protodef_google_2ftype_2fdatetime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\032google/type/datetime.proto\022\013google.typ"
  "e\032\036google/protobuf/duration.proto\"\247\002\n\010Da"
  "teTime\022\022\n\004year\030\001 \001(\005R\004year\022\024\n\005month\030\002 \001("
  "\005R\005month\022\020\n\003day\030\003 \001(\005R\003day\022\024\n\005hours\030\004 \001("
  "\005R\005hours\022\030\n\007minutes\030\005 \001(\005R\007minutes\022\030\n\007se"
  "conds\030\006 \001(\005R\007seconds\022\024\n\005nanos\030\007 \001(\005R\005nan"
  "os\022:\n\nutc_offset\030\010 \001(\0132\031.google.protobuf"
  ".DurationH\000R\tutcOffset\0224\n\ttime_zone\030\t \001("
  "\0132\025.google.type.TimeZoneH\000R\010timeZoneB\r\n\013"
  "time_offset\"4\n\010TimeZone\022\016\n\002id\030\001 \001(\tR\002id\022"
  "\030\n\007version\030\002 \001(\tR\007versionBi\n\017com.google."
  "typeB\rDateTimeProtoP\001Z<google.golang.org"
  "/genproto/googleapis/type/datetime;datet"
  "ime\370\001\001\242\002\003GTPb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2ftype_2fdatetime_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2ftype_2fdatetime_2eproto_sccs[2] = {
  &scc_info_DateTime_google_2ftype_2fdatetime_2eproto.base,
  &scc_info_TimeZone_google_2ftype_2fdatetime_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2ftype_2fdatetime_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2ftype_2fdatetime_2eproto = {
  false, false, descriptor_table_protodef_google_2ftype_2fdatetime_2eproto, "google/type/datetime.proto", 540,
  &descriptor_table_google_2ftype_2fdatetime_2eproto_once, descriptor_table_google_2ftype_2fdatetime_2eproto_sccs, descriptor_table_google_2ftype_2fdatetime_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_google_2ftype_2fdatetime_2eproto::offsets,
  file_level_metadata_google_2ftype_2fdatetime_2eproto, 2, file_level_enum_descriptors_google_2ftype_2fdatetime_2eproto, file_level_service_descriptors_google_2ftype_2fdatetime_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2ftype_2fdatetime_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2ftype_2fdatetime_2eproto)), true);
namespace google {
namespace type {

// ===================================================================

void DateTime::InitAsDefaultInstance() {
  ::google::type::_DateTime_default_instance_.utc_offset_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::google::type::_DateTime_default_instance_.time_zone_ = const_cast< ::google::type::TimeZone*>(
      ::google::type::TimeZone::internal_default_instance());
}
class DateTime::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& utc_offset(const DateTime* msg);
  static const ::google::type::TimeZone& time_zone(const DateTime* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
DateTime::_Internal::utc_offset(const DateTime* msg) {
  return *msg->time_offset_.utc_offset_;
}
const ::google::type::TimeZone&
DateTime::_Internal::time_zone(const DateTime* msg) {
  return *msg->time_offset_.time_zone_;
}
void DateTime::set_allocated_utc_offset(PROTOBUF_NAMESPACE_ID::Duration* utc_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_time_offset();
  if (utc_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(utc_offset)->GetArena();
    if (message_arena != submessage_arena) {
      utc_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, utc_offset, submessage_arena);
    }
    set_has_utc_offset();
    time_offset_.utc_offset_ = utc_offset;
  }
  // @@protoc_insertion_point(field_set_allocated:google.type.DateTime.utc_offset)
}
void DateTime::clear_utc_offset() {
  if (_internal_has_utc_offset()) {
    if (GetArena() == nullptr) {
      delete time_offset_.utc_offset_;
    }
    clear_has_time_offset();
  }
}
void DateTime::set_allocated_time_zone(::google::type::TimeZone* time_zone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_time_offset();
  if (time_zone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(time_zone);
    if (message_arena != submessage_arena) {
      time_zone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_zone, submessage_arena);
    }
    set_has_time_zone();
    time_offset_.time_zone_ = time_zone;
  }
  // @@protoc_insertion_point(field_set_allocated:google.type.DateTime.time_zone)
}
DateTime::DateTime(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.type.DateTime)
}
DateTime::DateTime(const DateTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&year_, &from.year_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&year_)) + sizeof(nanos_));
  clear_has_time_offset();
  switch (from.time_offset_case()) {
    case kUtcOffset: {
      _internal_mutable_utc_offset()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_utc_offset());
      break;
    }
    case kTimeZone: {
      _internal_mutable_time_zone()->::google::type::TimeZone::MergeFrom(from._internal_time_zone());
      break;
    }
    case TIME_OFFSET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.type.DateTime)
}

void DateTime::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DateTime_google_2ftype_2fdatetime_2eproto.base);
  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&year_)) + sizeof(nanos_));
  clear_has_time_offset();
}

DateTime::~DateTime() {
  // @@protoc_insertion_point(destructor:google.type.DateTime)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DateTime::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_time_offset()) {
    clear_time_offset();
  }
}

void DateTime::ArenaDtor(void* object) {
  DateTime* _this = reinterpret_cast< DateTime* >(object);
  (void)_this;
}
void DateTime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DateTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DateTime& DateTime::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DateTime_google_2ftype_2fdatetime_2eproto.base);
  return *internal_default_instance();
}


void DateTime::clear_time_offset() {
// @@protoc_insertion_point(one_of_clear_start:google.type.DateTime)
  switch (time_offset_case()) {
    case kUtcOffset: {
      if (GetArena() == nullptr) {
        delete time_offset_.utc_offset_;
      }
      break;
    }
    case kTimeZone: {
      if (GetArena() == nullptr) {
        delete time_offset_.time_zone_;
      }
      break;
    }
    case TIME_OFFSET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TIME_OFFSET_NOT_SET;
}


void DateTime::Clear() {
// @@protoc_insertion_point(message_clear_start:google.type.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&year_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&year_)) + sizeof(nanos_));
  clear_time_offset();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DateTime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 year = 1[json_name = "year"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 month = 2[json_name = "month"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 day = 3[json_name = "day"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hours = 4[json_name = "hours"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hours_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 minutes = 5[json_name = "minutes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          minutes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 seconds = 6[json_name = "seconds"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 nanos = 7[json_name = "nanos"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          nanos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration utc_offset = 8[json_name = "utcOffset"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_utc_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.type.TimeZone time_zone = 9[json_name = "timeZone"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_zone(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DateTime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.type.DateTime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 year = 1[json_name = "year"];
  if (this->year() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_year(), target);
  }

  // int32 month = 2[json_name = "month"];
  if (this->month() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_month(), target);
  }

  // int32 day = 3[json_name = "day"];
  if (this->day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_day(), target);
  }

  // int32 hours = 4[json_name = "hours"];
  if (this->hours() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hours(), target);
  }

  // int32 minutes = 5[json_name = "minutes"];
  if (this->minutes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_minutes(), target);
  }

  // int32 seconds = 6[json_name = "seconds"];
  if (this->seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_seconds(), target);
  }

  // int32 nanos = 7[json_name = "nanos"];
  if (this->nanos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_nanos(), target);
  }

  // .google.protobuf.Duration utc_offset = 8[json_name = "utcOffset"];
  if (_internal_has_utc_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::utc_offset(this), target, stream);
  }

  // .google.type.TimeZone time_zone = 9[json_name = "timeZone"];
  if (_internal_has_time_zone()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::time_zone(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.type.DateTime)
  return target;
}

size_t DateTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.type.DateTime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 year = 1[json_name = "year"];
  if (this->year() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  // int32 month = 2[json_name = "month"];
  if (this->month() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  // int32 day = 3[json_name = "day"];
  if (this->day() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  // int32 hours = 4[json_name = "hours"];
  if (this->hours() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hours());
  }

  // int32 minutes = 5[json_name = "minutes"];
  if (this->minutes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minutes());
  }

  // int32 seconds = 6[json_name = "seconds"];
  if (this->seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_seconds());
  }

  // int32 nanos = 7[json_name = "nanos"];
  if (this->nanos() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nanos());
  }

  switch (time_offset_case()) {
    // .google.protobuf.Duration utc_offset = 8[json_name = "utcOffset"];
    case kUtcOffset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_offset_.utc_offset_);
      break;
    }
    // .google.type.TimeZone time_zone = 9[json_name = "timeZone"];
    case kTimeZone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *time_offset_.time_zone_);
      break;
    }
    case TIME_OFFSET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DateTime::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.type.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  const DateTime* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DateTime>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.type.DateTime)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.type.DateTime)
    MergeFrom(*source);
  }
}

void DateTime::MergeFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.type.DateTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.year() != 0) {
    _internal_set_year(from._internal_year());
  }
  if (from.month() != 0) {
    _internal_set_month(from._internal_month());
  }
  if (from.day() != 0) {
    _internal_set_day(from._internal_day());
  }
  if (from.hours() != 0) {
    _internal_set_hours(from._internal_hours());
  }
  if (from.minutes() != 0) {
    _internal_set_minutes(from._internal_minutes());
  }
  if (from.seconds() != 0) {
    _internal_set_seconds(from._internal_seconds());
  }
  if (from.nanos() != 0) {
    _internal_set_nanos(from._internal_nanos());
  }
  switch (from.time_offset_case()) {
    case kUtcOffset: {
      _internal_mutable_utc_offset()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_utc_offset());
      break;
    }
    case kTimeZone: {
      _internal_mutable_time_zone()->::google::type::TimeZone::MergeFrom(from._internal_time_zone());
      break;
    }
    case TIME_OFFSET_NOT_SET: {
      break;
    }
  }
}

void DateTime::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.type.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DateTime::CopyFrom(const DateTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.type.DateTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DateTime::IsInitialized() const {
  return true;
}

void DateTime::InternalSwap(DateTime* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DateTime, nanos_)
      + sizeof(DateTime::nanos_)
      - PROTOBUF_FIELD_OFFSET(DateTime, year_)>(
          reinterpret_cast<char*>(&year_),
          reinterpret_cast<char*>(&other->year_));
  swap(time_offset_, other->time_offset_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DateTime::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeZone::InitAsDefaultInstance() {
}
class TimeZone::_Internal {
 public:
};

TimeZone::TimeZone(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.type.TimeZone)
}
TimeZone::TimeZone(const TimeZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:google.type.TimeZone)
}

void TimeZone::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimeZone_google_2ftype_2fdatetime_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TimeZone::~TimeZone() {
  // @@protoc_insertion_point(destructor:google.type.TimeZone)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TimeZone::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TimeZone::ArenaDtor(void* object) {
  TimeZone* _this = reinterpret_cast< TimeZone* >(object);
  (void)_this;
}
void TimeZone::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TimeZone::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeZone& TimeZone::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeZone_google_2ftype_2fdatetime_2eproto.base);
  return *internal_default_instance();
}


void TimeZone::Clear() {
// @@protoc_insertion_point(message_clear_start:google.type.TimeZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeZone::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.type.TimeZone.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 2[json_name = "version"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "google.type.TimeZone.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeZone::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.type.TimeZone)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.type.TimeZone.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string version = 2[json_name = "version"];
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.type.TimeZone.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.type.TimeZone)
  return target;
}

size_t TimeZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.type.TimeZone)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string version = 2[json_name = "version"];
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeZone::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.type.TimeZone)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeZone* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeZone>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.type.TimeZone)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.type.TimeZone)
    MergeFrom(*source);
  }
}

void TimeZone::MergeFrom(const TimeZone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.type.TimeZone)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
}

void TimeZone::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.type.TimeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeZone::CopyFrom(const TimeZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.type.TimeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeZone::IsInitialized() const {
  return true;
}

void TimeZone::InternalSwap(TimeZone* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeZone::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::type::DateTime* Arena::CreateMaybeMessage< ::google::type::DateTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::type::DateTime >(arena);
}
template<> PROTOBUF_NOINLINE ::google::type::TimeZone* Arena::CreateMaybeMessage< ::google::type::TimeZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::type::TimeZone >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
