// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/user/v202106alpha1/user.proto

#include "kentik/user/v202106alpha1/user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fuser_2fv202106alpha1_2fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto;
namespace kentik {
namespace user {
namespace v202106alpha1 {
class UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class ListUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserRequest> _instance;
} _ListUserRequest_default_instance_;
class ListUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUserResponse> _instance;
} _ListUserResponse_default_instance_;
class GetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserRequest> _instance;
} _GetUserRequest_default_instance_;
class GetUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserResponse> _instance;
} _GetUserResponse_default_instance_;
class CreateUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateUserRequest> _instance;
} _CreateUserRequest_default_instance_;
class CreateUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateUserResponse> _instance;
} _CreateUserResponse_default_instance_;
class UpdateUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateUserRequest> _instance;
} _UpdateUserRequest_default_instance_;
class UpdateUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateUserResponse> _instance;
} _UpdateUserResponse_default_instance_;
class DeleteUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteUserRequest> _instance;
} _DeleteUserRequest_default_instance_;
class DeleteUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteUserResponse> _instance;
} _DeleteUserResponse_default_instance_;
}  // namespace v202106alpha1
}  // namespace user
}  // namespace kentik
static void InitDefaultsscc_info_CreateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_CreateUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::CreateUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::CreateUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_CreateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_CreateUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::CreateUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::CreateUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_DeleteUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_DeleteUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::DeleteUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::DeleteUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_DeleteUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_DeleteUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::DeleteUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::DeleteUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_GetUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_GetUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::GetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::GetUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_GetUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_GetUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::GetUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::GetUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_ListUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_ListUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::ListUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::ListUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_ListUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_ListUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::ListUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::ListUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_UpdateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_UpdateUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::UpdateUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::UpdateUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_UpdateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_UpdateUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::UpdateUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::UpdateUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202106alpha1::_User_default_instance_;
    new (ptr) ::kentik::user::v202106alpha1::User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202106alpha1::User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fuser_2fv202106alpha1_2fuser_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fuser_2fv202106alpha1_2fuser_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fuser_2fv202106alpha1_2fuser_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fuser_2fv202106alpha1_2fuser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, user_email_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, username_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, user_full_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, role_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, last_login_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, created_date_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::User, updated_date_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::ListUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::ListUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::ListUserResponse, users_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::ListUserResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::GetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::GetUserRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::GetUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::GetUserResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::CreateUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::CreateUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::CreateUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::CreateUserResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::UpdateUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::UpdateUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::UpdateUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::UpdateUserResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::DeleteUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::DeleteUserRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202106alpha1::DeleteUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::user::v202106alpha1::User)},
  { 13, -1, sizeof(::kentik::user::v202106alpha1::ListUserRequest)},
  { 18, -1, sizeof(::kentik::user::v202106alpha1::ListUserResponse)},
  { 25, -1, sizeof(::kentik::user::v202106alpha1::GetUserRequest)},
  { 31, -1, sizeof(::kentik::user::v202106alpha1::GetUserResponse)},
  { 37, -1, sizeof(::kentik::user::v202106alpha1::CreateUserRequest)},
  { 43, -1, sizeof(::kentik::user::v202106alpha1::CreateUserResponse)},
  { 49, -1, sizeof(::kentik::user::v202106alpha1::UpdateUserRequest)},
  { 55, -1, sizeof(::kentik::user::v202106alpha1::UpdateUserResponse)},
  { 61, -1, sizeof(::kentik::user::v202106alpha1::DeleteUserRequest)},
  { 67, -1, sizeof(::kentik::user::v202106alpha1::DeleteUserResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_ListUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_ListUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_GetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_GetUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_CreateUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_CreateUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_UpdateUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_UpdateUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_DeleteUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202106alpha1::_DeleteUserResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fuser_2fv202106alpha1_2fuser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$kentik/user/v202106alpha1/user.proto\022\031"
  "kentik.user.v202106alpha1\032\034google/api/an"
  "notations.proto\032\027google/api/client.proto"
  "\032\037google/protobuf/timestamp.proto\032.proto"
  "c-gen-openapiv2/options/annotations.prot"
  "o\032+kentik/core/v202012alpha1/annotations"
  ".proto\"\345\002\n\004User\022\016\n\002id\030\001 \001(\tR\002id\022\035\n\nuser_"
  "email\030\002 \001(\tR\tuserEmail\022\032\n\010username\030\003 \001(\t"
  "R\010username\022$\n\016user_full_name\030\004 \001(\tR\014user"
  "FullName\0223\n\004role\030\005 \001(\0162\037.kentik.user.v20"
  "2106alpha1.RoleR\004role\0229\n\nlast_login\030\006 \001("
  "\0132\032.google.protobuf.TimestampR\tlastLogin"
  "\022=\n\014created_date\030\007 \001(\0132\032.google.protobuf"
  ".TimestampR\013createdDate\022=\n\014updated_date\030"
  "\010 \001(\0132\032.google.protobuf.TimestampR\013updat"
  "edDate\"\021\n\017ListUserRequest\"n\n\020ListUserRes"
  "ponse\0225\n\005users\030\001 \003(\0132\037.kentik.user.v2021"
  "06alpha1.UserR\005users\022#\n\rinvalid_count\030\002 "
  "\001(\rR\014invalidCount\" \n\016GetUserRequest\022\016\n\002i"
  "d\030\001 \001(\tR\002id\"F\n\017GetUserResponse\0223\n\004user\030\001"
  " \001(\0132\037.kentik.user.v202106alpha1.UserR\004u"
  "ser\"H\n\021CreateUserRequest\0223\n\004user\030\001 \001(\0132\037"
  ".kentik.user.v202106alpha1.UserR\004user\"I\n"
  "\022CreateUserResponse\0223\n\004user\030\001 \001(\0132\037.kent"
  "ik.user.v202106alpha1.UserR\004user\"H\n\021Upda"
  "teUserRequest\0223\n\004user\030\001 \001(\0132\037.kentik.use"
  "r.v202106alpha1.UserR\004user\"I\n\022UpdateUser"
  "Response\0223\n\004user\030\001 \001(\0132\037.kentik.user.v20"
  "2106alpha1.UserR\004user\"#\n\021DeleteUserReque"
  "st\022\016\n\002id\030\001 \001(\tR\002id\"\024\n\022DeleteUserResponse"
  "*\267\001\n\007Landing\022\027\n\023LANDING_UNSPECIFIED\020\000\022\034\n"
  "\030LANDING_OBSERVATION_DECK\020\001\022\034\n\030LANDING_N"
  "ETWORK_EXPLORER\020\002\022\023\n\017LANDING_LIBRARY\020\003\022\024"
  "\n\020LANDING_EXPLORER\020\004\022\024\n\020LANDING_ALERTING"
  "\020\005\022\026\n\022LANDING_SYNTHETICS\020\006*c\n\004Role\022\024\n\020RO"
  "LE_UNSPECIFIED\020\000\022\017\n\013ROLE_MEMBER\020\001\022\026\n\022ROL"
  "E_ADMINISTRATOR\020\002\022\034\n\030ROLE_SUPER_ADMINIST"
  "RATOR\020\0032\247\n\n\013UserService\022\325\001\n\010ListUser\022*.k"
  "entik.user.v202106alpha1.ListUserRequest"
  "\032+.kentik.user.v202106alpha1.ListUserRes"
  "ponse\"p\222A9\022\013List users.\032 Returns a list "
  "of user accounts.*\010UserList\362\327\002\017admin.use"
  "r:read\202\323\344\223\002\033\022\031/user/v202106alpha1/users\022"
  "\370\001\n\007GetUser\022).kentik.user.v202106alpha1."
  "GetUserRequest\032*.kentik.user.v202106alph"
  "a1.GetUserResponse\"\225\001\222AY\022\023Get a user acc"
  "ount.\0329Returns information about user ac"
  "count specified with ID.*\007UserGet\362\327\002\017adm"
  "in.user:read\202\323\344\223\002 \022\036/user/v202106alpha1/"
  "users/{id}\022\211\002\n\nCreateUser\022,.kentik.user."
  "v202106alpha1.CreateUserRequest\032-.kentik"
  ".user.v202106alpha1.CreateUserResponse\"\235"
  "\001\222Ab\022\026Create a user account.\032<Create a u"
  "ser account from request. returns create"
  "d account.*\nUserCreate\362\327\002\020admin.user:wri"
  "te\202\323\344\223\002\036\"\031/user/v202106alpha1/users:\001*\022\225"
  "\002\n\nUpdateUser\022,.kentik.user.v202106alpha"
  "1.UpdateUserRequest\032-.kentik.user.v20210"
  "6alpha1.UpdateUserResponse\"\251\001\222Ad\022\026Update"
  " a user account.\032>Replaces the entire us"
  "er account attributes specified with id."
  "*\nUserUpdate\362\327\002\020admin.user:write\202\323\344\223\002(\032#"
  "/user/v202106alpha1/users/{user.id}:\001*\022\372"
  "\001\n\nDeleteUser\022,.kentik.user.v202106alpha"
  "1.DeleteUserRequest\032-.kentik.user.v20210"
  "6alpha1.DeleteUserResponse\"\216\001\222AQ\022\026Delete"
  " a user account.\032+Deletes the user accou"
  "nt specified with id.*\nUserDelete\362\327\002\020adm"
  "in.user:write\202\323\344\223\002 *\036/user/v202106alpha1"
  "/users/{id}\032$\312A\023grpc.api.kentik.com\352\327\002\na"
  "dmin.userB\330\003ZBgithub.com/kentik/api-sche"
  "ma/gen/go/kentik/user/v202106alpha1;user"
  "\222A\220\003\022\251\001\n\023User management API\022K--- This A"
  "PI has been deprecated and will be remov"
  "ed in the near future ---\"7\n\026Kentik API "
  "Engineering\022\035https://github.com/kentik/a"
  "pi2\014202102alpha1*\001\0022\020application/json:\020a"
  "pplication/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Aut"
  "h-Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-To"
  "ken \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r]\n%General"
  " information about Kentik APIs\0224https://"
  "kb.kentik.com/v0/Ab09.htm#Ab09-APIs_Over"
  "viewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202012alpha1_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto_sccs[11] = {
  &scc_info_CreateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_CreateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_DeleteUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_DeleteUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_GetUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_GetUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_ListUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_ListUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_UpdateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_UpdateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
  &scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fuser_2fv202106alpha1_2fuser_2eproto, "kentik/user/v202106alpha1/user.proto", 3292,
  &descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto_once, descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto_sccs, descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto_deps, 11, 5,
  schemas, file_default_instances, TableStruct_kentik_2fuser_2fv202106alpha1_2fuser_2eproto::offsets,
  file_level_metadata_kentik_2fuser_2fv202106alpha1_2fuser_2eproto, 11, file_level_enum_descriptors_kentik_2fuser_2fv202106alpha1_2fuser_2eproto, file_level_service_descriptors_kentik_2fuser_2fv202106alpha1_2fuser_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fuser_2fv202106alpha1_2fuser_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto)), true);
namespace kentik {
namespace user {
namespace v202106alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Landing_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto);
  return file_level_enum_descriptors_kentik_2fuser_2fv202106alpha1_2fuser_2eproto[0];
}
bool Landing_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fuser_2fv202106alpha1_2fuser_2eproto);
  return file_level_enum_descriptors_kentik_2fuser_2fv202106alpha1_2fuser_2eproto[1];
}
bool Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void User::InitAsDefaultInstance() {
  ::kentik::user::v202106alpha1::_User_default_instance_._instance.get_mutable()->last_login_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::user::v202106alpha1::_User_default_instance_._instance.get_mutable()->created_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::user::v202106alpha1::_User_default_instance_._instance.get_mutable()->updated_date_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class User::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_login(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_date(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_date(const User* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::last_login(const User* msg) {
  return *msg->last_login_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::created_date(const User* msg) {
  return *msg->created_date_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::updated_date(const User* msg) {
  return *msg->updated_date_;
}
void User::clear_last_login() {
  if (GetArena() == nullptr && last_login_ != nullptr) {
    delete last_login_;
  }
  last_login_ = nullptr;
}
void User::clear_created_date() {
  if (GetArena() == nullptr && created_date_ != nullptr) {
    delete created_date_;
  }
  created_date_ = nullptr;
}
void User::clear_updated_date() {
  if (GetArena() == nullptr && updated_date_ != nullptr) {
    delete updated_date_;
  }
  updated_date_ = nullptr;
}
User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_email().empty()) {
    user_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_email(),
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_username(),
      GetArena());
  }
  user_full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_full_name().empty()) {
    user_full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_full_name(),
      GetArena());
  }
  if (from._internal_has_last_login()) {
    last_login_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_login_);
  } else {
    last_login_ = nullptr;
  }
  if (from._internal_has_created_date()) {
    created_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_date_);
  } else {
    created_date_ = nullptr;
  }
  if (from._internal_has_updated_date()) {
    updated_date_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_date_);
  } else {
    updated_date_ = nullptr;
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.User)
}

void User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_login_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&last_login_)) + sizeof(role_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.User)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void User::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_login_;
  if (this != internal_default_instance()) delete created_date_;
  if (this != internal_default_instance()) delete updated_date_;
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && last_login_ != nullptr) {
    delete last_login_;
  }
  last_login_ = nullptr;
  if (GetArena() == nullptr && created_date_ != nullptr) {
    delete created_date_;
  }
  created_date_ = nullptr;
  if (GetArena() == nullptr && updated_date_ != nullptr) {
    delete updated_date_;
  }
  updated_date_ = nullptr;
  role_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202106alpha1.User.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_email = 2[json_name = "userEmail"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202106alpha1.User.user_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 3[json_name = "username"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202106alpha1.User.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_full_name = 4[json_name = "userFullName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202106alpha1.User.user_full_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.user.v202106alpha1.Role role = 5[json_name = "role"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::kentik::user::v202106alpha1::Role>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_login = 6[json_name = "lastLogin"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_login(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_date = 7[json_name = "createdDate"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_date = 8[json_name = "updatedDate"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_date(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202106alpha1.User.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string user_email = 2[json_name = "userEmail"];
  if (this->user_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_email().data(), static_cast<int>(this->_internal_user_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202106alpha1.User.user_email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_email(), target);
  }

  // string username = 3[json_name = "username"];
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202106alpha1.User.username");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_username(), target);
  }

  // string user_full_name = 4[json_name = "userFullName"];
  if (this->user_full_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_full_name().data(), static_cast<int>(this->_internal_user_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202106alpha1.User.user_full_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_full_name(), target);
  }

  // .kentik.user.v202106alpha1.Role role = 5[json_name = "role"];
  if (this->role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_role(), target);
  }

  // .google.protobuf.Timestamp last_login = 6[json_name = "lastLogin"];
  if (this->has_last_login()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::last_login(this), target, stream);
  }

  // .google.protobuf.Timestamp created_date = 7[json_name = "createdDate"];
  if (this->has_created_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::created_date(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_date = 8[json_name = "updatedDate"];
  if (this->has_updated_date()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::updated_date(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string user_email = 2[json_name = "userEmail"];
  if (this->user_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_email());
  }

  // string username = 3[json_name = "username"];
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string user_full_name = 4[json_name = "userFullName"];
  if (this->user_full_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_full_name());
  }

  // .google.protobuf.Timestamp last_login = 6[json_name = "lastLogin"];
  if (this->has_last_login()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_login_);
  }

  // .google.protobuf.Timestamp created_date = 7[json_name = "createdDate"];
  if (this->has_created_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_date_);
  }

  // .google.protobuf.Timestamp updated_date = 8[json_name = "updatedDate"];
  if (this->has_updated_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_date_);
  }

  // .kentik.user.v202106alpha1.Role role = 5[json_name = "role"];
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.user_email().size() > 0) {
    _internal_set_user_email(from._internal_user_email());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.user_full_name().size() > 0) {
    _internal_set_user_full_name(from._internal_user_full_name());
  }
  if (from.has_last_login()) {
    _internal_mutable_last_login()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_login());
  }
  if (from.has_created_date()) {
    _internal_mutable_created_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_date());
  }
  if (from.has_updated_date()) {
    _internal_mutable_updated_date()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_date());
  }
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_email_.Swap(&other->user_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_full_name_.Swap(&other->user_full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, role_)
      + sizeof(User::role_)
      - PROTOBUF_FIELD_OFFSET(User, last_login_)>(
          reinterpret_cast<char*>(&last_login_),
          reinterpret_cast<char*>(&other->last_login_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserRequest::InitAsDefaultInstance() {
}
class ListUserRequest::_Internal {
 public:
};

ListUserRequest::ListUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.ListUserRequest)
}
ListUserRequest::ListUserRequest(const ListUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.ListUserRequest)
}

void ListUserRequest::SharedCtor() {
}

ListUserRequest::~ListUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.ListUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUserRequest::ArenaDtor(void* object) {
  ListUserRequest* _this = reinterpret_cast< ListUserRequest* >(object);
  (void)_this;
}
void ListUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserRequest& ListUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void ListUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.ListUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.ListUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.ListUserRequest)
  return target;
}

size_t ListUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.ListUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.ListUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.ListUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.ListUserRequest)
    MergeFrom(*source);
  }
}

void ListUserRequest::MergeFrom(const ListUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.ListUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.ListUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserRequest::CopyFrom(const ListUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.ListUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserRequest::IsInitialized() const {
  return true;
}

void ListUserRequest::InternalSwap(ListUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUserResponse::InitAsDefaultInstance() {
}
class ListUserResponse::_Internal {
 public:
};

ListUserResponse::ListUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.ListUserResponse)
}
ListUserResponse::ListUserResponse(const ListUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.ListUserResponse)
}

void ListUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  invalid_count_ = 0u;
}

ListUserResponse::~ListUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.ListUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUserResponse::ArenaDtor(void* object) {
  ListUserResponse* _this = reinterpret_cast< ListUserResponse* >(object);
  (void)_this;
}
void ListUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUserResponse& ListUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void ListUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.ListUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.user.v202106alpha1.User users = 1[json_name = "users"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.ListUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.user.v202106alpha1.User users = 1[json_name = "users"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.ListUserResponse)
  return target;
}

size_t ListUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.ListUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.user.v202106alpha1.User users = 1[json_name = "users"];
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.ListUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.ListUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.ListUserResponse)
    MergeFrom(*source);
  }
}

void ListUserResponse::MergeFrom(const ListUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.ListUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.ListUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUserResponse::CopyFrom(const ListUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.ListUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUserResponse::IsInitialized() const {
  return true;
}

void ListUserResponse::InternalSwap(ListUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserRequest::InitAsDefaultInstance() {
}
class GetUserRequest::_Internal {
 public:
};

GetUserRequest::GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.GetUserRequest)
}
GetUserRequest::GetUserRequest(const GetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.GetUserRequest)
}

void GetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetUserRequest::~GetUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.GetUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetUserRequest::ArenaDtor(void* object) {
  GetUserRequest* _this = reinterpret_cast< GetUserRequest* >(object);
  (void)_this;
}
void GetUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserRequest& GetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void GetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.GetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202106alpha1.GetUserRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.GetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202106alpha1.GetUserRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.GetUserRequest)
  return target;
}

size_t GetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.GetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.GetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.GetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.GetUserRequest)
    MergeFrom(*source);
  }
}

void GetUserRequest::MergeFrom(const GetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.GetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.GetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserRequest::CopyFrom(const GetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.GetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserRequest::IsInitialized() const {
  return true;
}

void GetUserRequest::InternalSwap(GetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserResponse::InitAsDefaultInstance() {
  ::kentik::user::v202106alpha1::_GetUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202106alpha1::User*>(
      ::kentik::user::v202106alpha1::User::internal_default_instance());
}
class GetUserResponse::_Internal {
 public:
  static const ::kentik::user::v202106alpha1::User& user(const GetUserResponse* msg);
};

const ::kentik::user::v202106alpha1::User&
GetUserResponse::_Internal::user(const GetUserResponse* msg) {
  return *msg->user_;
}
GetUserResponse::GetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.GetUserResponse)
}
GetUserResponse::GetUserResponse(const GetUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202106alpha1::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.GetUserResponse)
}

void GetUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  user_ = nullptr;
}

GetUserResponse::~GetUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.GetUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void GetUserResponse::ArenaDtor(void* object) {
  GetUserResponse* _this = reinterpret_cast< GetUserResponse* >(object);
  (void)_this;
}
void GetUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserResponse& GetUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void GetUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.GetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.GetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.GetUserResponse)
  return target;
}

size_t GetUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.GetUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.GetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.GetUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.GetUserResponse)
    MergeFrom(*source);
  }
}

void GetUserResponse::MergeFrom(const GetUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.GetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202106alpha1::User::MergeFrom(from._internal_user());
  }
}

void GetUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.GetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserResponse::CopyFrom(const GetUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.GetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserResponse::IsInitialized() const {
  return true;
}

void GetUserResponse::InternalSwap(GetUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateUserRequest::InitAsDefaultInstance() {
  ::kentik::user::v202106alpha1::_CreateUserRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202106alpha1::User*>(
      ::kentik::user::v202106alpha1::User::internal_default_instance());
}
class CreateUserRequest::_Internal {
 public:
  static const ::kentik::user::v202106alpha1::User& user(const CreateUserRequest* msg);
};

const ::kentik::user::v202106alpha1::User&
CreateUserRequest::_Internal::user(const CreateUserRequest* msg) {
  return *msg->user_;
}
CreateUserRequest::CreateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.CreateUserRequest)
}
CreateUserRequest::CreateUserRequest(const CreateUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202106alpha1::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.CreateUserRequest)
}

void CreateUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  user_ = nullptr;
}

CreateUserRequest::~CreateUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.CreateUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void CreateUserRequest::ArenaDtor(void* object) {
  CreateUserRequest* _this = reinterpret_cast< CreateUserRequest* >(object);
  (void)_this;
}
void CreateUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateUserRequest& CreateUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void CreateUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.CreateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.CreateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.CreateUserRequest)
  return target;
}

size_t CreateUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.CreateUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.CreateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.CreateUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.CreateUserRequest)
    MergeFrom(*source);
  }
}

void CreateUserRequest::MergeFrom(const CreateUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.CreateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202106alpha1::User::MergeFrom(from._internal_user());
  }
}

void CreateUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.CreateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserRequest::CopyFrom(const CreateUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.CreateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRequest::IsInitialized() const {
  return true;
}

void CreateUserRequest::InternalSwap(CreateUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateUserResponse::InitAsDefaultInstance() {
  ::kentik::user::v202106alpha1::_CreateUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202106alpha1::User*>(
      ::kentik::user::v202106alpha1::User::internal_default_instance());
}
class CreateUserResponse::_Internal {
 public:
  static const ::kentik::user::v202106alpha1::User& user(const CreateUserResponse* msg);
};

const ::kentik::user::v202106alpha1::User&
CreateUserResponse::_Internal::user(const CreateUserResponse* msg) {
  return *msg->user_;
}
CreateUserResponse::CreateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.CreateUserResponse)
}
CreateUserResponse::CreateUserResponse(const CreateUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202106alpha1::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.CreateUserResponse)
}

void CreateUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  user_ = nullptr;
}

CreateUserResponse::~CreateUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.CreateUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void CreateUserResponse::ArenaDtor(void* object) {
  CreateUserResponse* _this = reinterpret_cast< CreateUserResponse* >(object);
  (void)_this;
}
void CreateUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateUserResponse& CreateUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void CreateUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.CreateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.CreateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.CreateUserResponse)
  return target;
}

size_t CreateUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.CreateUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.CreateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.CreateUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.CreateUserResponse)
    MergeFrom(*source);
  }
}

void CreateUserResponse::MergeFrom(const CreateUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.CreateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202106alpha1::User::MergeFrom(from._internal_user());
  }
}

void CreateUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.CreateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserResponse::CopyFrom(const CreateUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.CreateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserResponse::IsInitialized() const {
  return true;
}

void CreateUserResponse::InternalSwap(CreateUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateUserRequest::InitAsDefaultInstance() {
  ::kentik::user::v202106alpha1::_UpdateUserRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202106alpha1::User*>(
      ::kentik::user::v202106alpha1::User::internal_default_instance());
}
class UpdateUserRequest::_Internal {
 public:
  static const ::kentik::user::v202106alpha1::User& user(const UpdateUserRequest* msg);
};

const ::kentik::user::v202106alpha1::User&
UpdateUserRequest::_Internal::user(const UpdateUserRequest* msg) {
  return *msg->user_;
}
UpdateUserRequest::UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.UpdateUserRequest)
}
UpdateUserRequest::UpdateUserRequest(const UpdateUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202106alpha1::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.UpdateUserRequest)
}

void UpdateUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  user_ = nullptr;
}

UpdateUserRequest::~UpdateUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.UpdateUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UpdateUserRequest::ArenaDtor(void* object) {
  UpdateUserRequest* _this = reinterpret_cast< UpdateUserRequest* >(object);
  (void)_this;
}
void UpdateUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateUserRequest& UpdateUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void UpdateUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.UpdateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.UpdateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.UpdateUserRequest)
  return target;
}

size_t UpdateUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.UpdateUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.UpdateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.UpdateUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.UpdateUserRequest)
    MergeFrom(*source);
  }
}

void UpdateUserRequest::MergeFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.UpdateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202106alpha1::User::MergeFrom(from._internal_user());
  }
}

void UpdateUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.UpdateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserRequest::CopyFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.UpdateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserRequest::IsInitialized() const {
  return true;
}

void UpdateUserRequest::InternalSwap(UpdateUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateUserResponse::InitAsDefaultInstance() {
  ::kentik::user::v202106alpha1::_UpdateUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202106alpha1::User*>(
      ::kentik::user::v202106alpha1::User::internal_default_instance());
}
class UpdateUserResponse::_Internal {
 public:
  static const ::kentik::user::v202106alpha1::User& user(const UpdateUserResponse* msg);
};

const ::kentik::user::v202106alpha1::User&
UpdateUserResponse::_Internal::user(const UpdateUserResponse* msg) {
  return *msg->user_;
}
UpdateUserResponse::UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.UpdateUserResponse)
}
UpdateUserResponse::UpdateUserResponse(const UpdateUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202106alpha1::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.UpdateUserResponse)
}

void UpdateUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  user_ = nullptr;
}

UpdateUserResponse::~UpdateUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.UpdateUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UpdateUserResponse::ArenaDtor(void* object) {
  UpdateUserResponse* _this = reinterpret_cast< UpdateUserResponse* >(object);
  (void)_this;
}
void UpdateUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateUserResponse& UpdateUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void UpdateUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.UpdateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.UpdateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.UpdateUserResponse)
  return target;
}

size_t UpdateUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.UpdateUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202106alpha1.User user = 1[json_name = "user"];
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.UpdateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.UpdateUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.UpdateUserResponse)
    MergeFrom(*source);
  }
}

void UpdateUserResponse::MergeFrom(const UpdateUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.UpdateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202106alpha1::User::MergeFrom(from._internal_user());
  }
}

void UpdateUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.UpdateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserResponse::CopyFrom(const UpdateUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.UpdateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserResponse::IsInitialized() const {
  return true;
}

void UpdateUserResponse::InternalSwap(UpdateUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteUserRequest::InitAsDefaultInstance() {
}
class DeleteUserRequest::_Internal {
 public:
};

DeleteUserRequest::DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.DeleteUserRequest)
}
DeleteUserRequest::DeleteUserRequest(const DeleteUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.DeleteUserRequest)
}

void DeleteUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteUserRequest::~DeleteUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.DeleteUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteUserRequest::ArenaDtor(void* object) {
  DeleteUserRequest* _this = reinterpret_cast< DeleteUserRequest* >(object);
  (void)_this;
}
void DeleteUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteUserRequest& DeleteUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteUserRequest_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void DeleteUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.DeleteUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202106alpha1.DeleteUserRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.DeleteUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202106alpha1.DeleteUserRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.DeleteUserRequest)
  return target;
}

size_t DeleteUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.DeleteUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.DeleteUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.DeleteUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.DeleteUserRequest)
    MergeFrom(*source);
  }
}

void DeleteUserRequest::MergeFrom(const DeleteUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.DeleteUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.DeleteUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteUserRequest::CopyFrom(const DeleteUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.DeleteUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserRequest::IsInitialized() const {
  return true;
}

void DeleteUserRequest::InternalSwap(DeleteUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteUserResponse::InitAsDefaultInstance() {
}
class DeleteUserResponse::_Internal {
 public:
};

DeleteUserResponse::DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202106alpha1.DeleteUserResponse)
}
DeleteUserResponse::DeleteUserResponse(const DeleteUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202106alpha1.DeleteUserResponse)
}

void DeleteUserResponse::SharedCtor() {
}

DeleteUserResponse::~DeleteUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202106alpha1.DeleteUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteUserResponse::ArenaDtor(void* object) {
  DeleteUserResponse* _this = reinterpret_cast< DeleteUserResponse* >(object);
  (void)_this;
}
void DeleteUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteUserResponse& DeleteUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteUserResponse_kentik_2fuser_2fv202106alpha1_2fuser_2eproto.base);
  return *internal_default_instance();
}


void DeleteUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202106alpha1.DeleteUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202106alpha1.DeleteUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202106alpha1.DeleteUserResponse)
  return target;
}

size_t DeleteUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202106alpha1.DeleteUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202106alpha1.DeleteUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202106alpha1.DeleteUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202106alpha1.DeleteUserResponse)
    MergeFrom(*source);
  }
}

void DeleteUserResponse::MergeFrom(const DeleteUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202106alpha1.DeleteUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202106alpha1.DeleteUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteUserResponse::CopyFrom(const DeleteUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202106alpha1.DeleteUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserResponse::IsInitialized() const {
  return true;
}

void DeleteUserResponse::InternalSwap(DeleteUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202106alpha1
}  // namespace user
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::User* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::User >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::ListUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::ListUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::ListUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::ListUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::ListUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::ListUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::GetUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::GetUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::GetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::GetUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::GetUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::GetUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::CreateUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::CreateUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::CreateUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::CreateUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::CreateUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::CreateUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::UpdateUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::UpdateUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::UpdateUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::UpdateUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::UpdateUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::UpdateUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::DeleteUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::DeleteUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::DeleteUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202106alpha1::DeleteUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202106alpha1::DeleteUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202106alpha1::DeleteUserResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
