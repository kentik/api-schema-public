// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/user/v202211/user.proto

#include "kentik/user/v202211/user.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fuser_2fv202211_2fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PermissionEntry_kentik_2fuser_2fv202211_2fuser_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fuser_2fv202211_2fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto;
namespace kentik {
namespace user {
namespace v202211 {
class PermissionEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PermissionEntry> _instance;
} _PermissionEntry_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<User> _instance;
} _User_default_instance_;
class ListUsersRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUsersRequest> _instance;
} _ListUsersRequest_default_instance_;
class ListUsersResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListUsersResponse> _instance;
} _ListUsersResponse_default_instance_;
class GetUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserRequest> _instance;
} _GetUserRequest_default_instance_;
class GetUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetUserResponse> _instance;
} _GetUserResponse_default_instance_;
class CreateUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateUserRequest> _instance;
} _CreateUserRequest_default_instance_;
class CreateUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateUserResponse> _instance;
} _CreateUserResponse_default_instance_;
class UpdateUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateUserRequest> _instance;
} _UpdateUserRequest_default_instance_;
class UpdateUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateUserResponse> _instance;
} _UpdateUserResponse_default_instance_;
class DeleteUserRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteUserRequest> _instance;
} _DeleteUserRequest_default_instance_;
class DeleteUserResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteUserResponse> _instance;
} _DeleteUserResponse_default_instance_;
class ResetApiTokenRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetApiTokenRequest> _instance;
} _ResetApiTokenRequest_default_instance_;
class ResetApiTokenResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetApiTokenResponse> _instance;
} _ResetApiTokenResponse_default_instance_;
class ResetActiveSessionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetActiveSessionsRequest> _instance;
} _ResetActiveSessionsRequest_default_instance_;
class ResetActiveSessionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ResetActiveSessionsResponse> _instance;
} _ResetActiveSessionsResponse_default_instance_;
}  // namespace v202211
}  // namespace user
}  // namespace kentik
static void InitDefaultsscc_info_CreateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_CreateUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202211::CreateUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::CreateUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_CreateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_CreateUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202211::CreateUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::CreateUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_DeleteUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_DeleteUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202211::DeleteUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::DeleteUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_DeleteUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_DeleteUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202211::DeleteUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::DeleteUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_GetUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_GetUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202211::GetUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::GetUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_GetUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_GetUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202211::GetUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::GetUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_ListUsersRequest_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_ListUsersRequest_default_instance_;
    new (ptr) ::kentik::user::v202211::ListUsersRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::ListUsersRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListUsersRequest_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListUsersRequest_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_ListUsersResponse_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_ListUsersResponse_default_instance_;
    new (ptr) ::kentik::user::v202211::ListUsersResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::ListUsersResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListUsersResponse_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListUsersResponse_kentik_2fuser_2fv202211_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_PermissionEntry_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_PermissionEntry_default_instance_;
    new (ptr) ::kentik::user::v202211::PermissionEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::PermissionEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PermissionEntry_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PermissionEntry_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_ResetActiveSessionsRequest_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_ResetActiveSessionsRequest_default_instance_;
    new (ptr) ::kentik::user::v202211::ResetActiveSessionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::ResetActiveSessionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetActiveSessionsRequest_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetActiveSessionsRequest_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_ResetActiveSessionsResponse_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_ResetActiveSessionsResponse_default_instance_;
    new (ptr) ::kentik::user::v202211::ResetActiveSessionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::ResetActiveSessionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetActiveSessionsResponse_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetActiveSessionsResponse_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_ResetApiTokenRequest_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_ResetApiTokenRequest_default_instance_;
    new (ptr) ::kentik::user::v202211::ResetApiTokenRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::ResetApiTokenRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetApiTokenRequest_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetApiTokenRequest_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_ResetApiTokenResponse_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_ResetApiTokenResponse_default_instance_;
    new (ptr) ::kentik::user::v202211::ResetApiTokenResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::ResetApiTokenResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ResetApiTokenResponse_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ResetApiTokenResponse_kentik_2fuser_2fv202211_2fuser_2eproto}, {}};

static void InitDefaultsscc_info_UpdateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_UpdateUserRequest_default_instance_;
    new (ptr) ::kentik::user::v202211::UpdateUserRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::UpdateUserRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_UpdateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_UpdateUserResponse_default_instance_;
    new (ptr) ::kentik::user::v202211::UpdateUserResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::UpdateUserResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto}, {
      &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::user::v202211::_User_default_instance_;
    new (ptr) ::kentik::user::v202211::User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::user::v202211::User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto}, {
      &scc_info_PermissionEntry_kentik_2fuser_2fv202211_2fuser_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fuser_2fv202211_2fuser_2eproto[16];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fuser_2fv202211_2fuser_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fuser_2fv202211_2fuser_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fuser_2fv202211_2fuser_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::PermissionEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::PermissionEntry, capability_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::PermissionEntry, allowed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, user_email_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, user_full_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, role_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, permissions_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, filter_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, last_login_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::User, edate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ListUsersRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ListUsersResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ListUsersResponse, users_),
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ListUsersResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::GetUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::GetUserRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::GetUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::GetUserResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::CreateUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::CreateUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::CreateUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::CreateUserResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::UpdateUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::UpdateUserRequest, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::UpdateUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::UpdateUserResponse, user_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::DeleteUserRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::DeleteUserRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::DeleteUserResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ResetApiTokenRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ResetApiTokenRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ResetApiTokenResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ResetActiveSessionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ResetActiveSessionsRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::user::v202211::ResetActiveSessionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::user::v202211::PermissionEntry)},
  { 7, -1, sizeof(::kentik::user::v202211::User)},
  { 21, -1, sizeof(::kentik::user::v202211::ListUsersRequest)},
  { 26, -1, sizeof(::kentik::user::v202211::ListUsersResponse)},
  { 33, -1, sizeof(::kentik::user::v202211::GetUserRequest)},
  { 39, -1, sizeof(::kentik::user::v202211::GetUserResponse)},
  { 45, -1, sizeof(::kentik::user::v202211::CreateUserRequest)},
  { 51, -1, sizeof(::kentik::user::v202211::CreateUserResponse)},
  { 57, -1, sizeof(::kentik::user::v202211::UpdateUserRequest)},
  { 63, -1, sizeof(::kentik::user::v202211::UpdateUserResponse)},
  { 69, -1, sizeof(::kentik::user::v202211::DeleteUserRequest)},
  { 75, -1, sizeof(::kentik::user::v202211::DeleteUserResponse)},
  { 80, -1, sizeof(::kentik::user::v202211::ResetApiTokenRequest)},
  { 86, -1, sizeof(::kentik::user::v202211::ResetApiTokenResponse)},
  { 91, -1, sizeof(::kentik::user::v202211::ResetActiveSessionsRequest)},
  { 97, -1, sizeof(::kentik::user::v202211::ResetActiveSessionsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_PermissionEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_ListUsersRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_ListUsersResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_GetUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_GetUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_CreateUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_CreateUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_UpdateUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_UpdateUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_DeleteUserRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_DeleteUserResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_ResetApiTokenRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_ResetApiTokenResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_ResetActiveSessionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::user::v202211::_ResetActiveSessionsResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fuser_2fv202211_2fuser_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036kentik/user/v202211/user.proto\022\023kentik"
  ".user.v202211\032\034google/api/annotations.pr"
  "oto\032\027google/api/client.proto\032\037google/api"
  "/field_behavior.proto\032\037google/protobuf/t"
  "imestamp.proto\032.protoc-gen-openapiv2/opt"
  "ions/annotations.proto\032%kentik/core/v202"
  "303/annotations.proto\"\304\001\n\017PermissionEntr"
  "y\022`\n\ncapability\030\001 \001(\tB@\222A927String ident"
  "ifying capability that is granted of den"
  "ied\342A\001\002R\ncapability\022O\n\007allowed\030\002 \001(\010B5\222A"
  ".2,Flag indicating whether operation is "
  "allowed\342A\001\002R\007allowed\"\264\006\n\004User\022;\n\002id\030\001 \001("
  "\tB+\222A$2\"System generated unique identifi"
  "er\342A\001\003R\002id\022U\n\nuser_email\030\002 \001(\tB6\222A/2-Use"
  "r e-mail address (serves also as usernam"
  "e)\342A\001\002R\tuserEmail\0228\n\016user_full_name\030\004 \001("
  "\tB\022\222A\0132\tFull name\342A\001\002R\014userFullName\022Y\n\004r"
  "ole\030\005 \001(\0162\031.kentik.user.v202211.RoleB*\222A"
  "#2!User role (in Kentik application)\342A\001\002"
  "R\004role\022}\n\013permissions\030\006 \003(\0132$.kentik.use"
  "r.v202211.PermissionEntryB5\222A220Optional"
  " list of permissions granted to the user"
  "R\013permissions\022a\n\006filter\030\007 \001(\tBI\222AF2DOpti"
  "onal JSON string defining filter for obj"
  "ects visible to the userR\006filter\022n\n\nlast"
  "_login\030\010 \001(\0132\032.google.protobuf.Timestamp"
  "B3\222A,2*UTC Timestamp of user\'s last logi"
  "n session\342A\001\003R\tlastLogin\022S\n\005cdate\030\t \001(\0132"
  "\032.google.protobuf.TimestampB!\222A\0322\030Creati"
  "on timestamp (UTC)\342A\001\003R\005cdate\022\\\n\005edate\030\n"
  " \001(\0132\032.google.protobuf.TimestampB*\222A#2!L"
  "ast modification timestamp (UTC)\342A\001\003R\005ed"
  "ate\"\022\n\020ListUsersRequest\"\322\001\n\021ListUsersRes"
  "ponse\022V\n\005users\030\001 \003(\0132\031.kentik.user.v2022"
  "11.UserB%\222A\0362\034Last of users in the accou"
  "nt\342A\001\003R\005users\022e\n\rinvalid_count\030\002 \001(\rB@\222A"
  "=2;Number of invalid entries encountered"
  " while collecting dataR\014invalidCount\"C\n\016"
  "GetUserRequest\0221\n\002id\030\001 \001(\tB!\222A\0322\030ID of t"
  "he requested user\342A\001\002R\002id\"k\n\017GetUserResp"
  "onse\022X\n\004user\030\001 \001(\0132\031.kentik.user.v202211"
  ".UserB)\222A&2$Information about the reques"
  "ted userR\004user\"z\n\021CreateUserRequest\022e\n\004u"
  "ser\030\001 \001(\0132\031.kentik.user.v202211.UserB6\222A"
  "/2-Attributes for the user account to be"
  " created\342A\001\002R\004user\"w\n\022CreateUserResponse"
  "\022a\n\004user\030\001 \001(\0132\031.kentik.user.v202211.Use"
  "rB2\222A/2-Attributes for the newly created"
  " user accountR\004user\"p\n\021UpdateUserRequest"
  "\022[\n\004user\030\001 \001(\0132\031.kentik.user.v202211.Use"
  "rB,\222A%2#New attributes for the user acco"
  "unt\342A\001\002R\004user\"i\n\022UpdateUserResponse\022S\n\004u"
  "ser\030\001 \001(\0132\031.kentik.user.v202211.UserB$\222A"
  "!2\037Updated user account attributesR\004user"
  "\"V\n\021DeleteUserRequest\022A\n\002id\030\001 \001(\tB1\222A*2("
  "ID of the the user account to be deleted"
  "\342A\001\002R\002id\"\024\n\022DeleteUserResponse\"c\n\024ResetA"
  "piTokenRequest\022K\n\002id\030\001 \001(\tB;\222A422ID of t"
  "he the user whose API token should be re"
  "set\342A\001\002R\002id\"\027\n\025ResetApiTokenResponse\"h\n\032"
  "ResetActiveSessionsRequest\022J\n\002id\030\001 \001(\tB:"
  "\222A321ID of the the user whose sessions s"
  "hould be reset\342A\001\002R\002id\"\035\n\033ResetActiveSes"
  "sionsResponse*c\n\004Role\022\024\n\020ROLE_UNSPECIFIE"
  "D\020\000\022\017\n\013ROLE_MEMBER\020\001\022\026\n\022ROLE_ADMINISTRAT"
  "OR\020\002\022\034\n\030ROLE_SUPER_ADMINISTRATOR\020\0032\260\017\n\013U"
  "serService\022\337\001\n\tListUsers\022%.kentik.user.v"
  "202211.ListUsersRequest\032&.kentik.user.v2"
  "02211.ListUsersResponse\"\202\001\222AQ\022\017List all "
  "users.\0323Returns a list of all user accou"
  "nts in the company.*\tListUsers\362\327\002\017admin."
  "user:read\202\323\344\223\002\025\022\023/user/v202211/users\022\360\001\n"
  "\007GetUser\022#.kentik.user.v202211.GetUserRe"
  "quest\032$.kentik.user.v202211.GetUserRespo"
  "nse\"\231\001\222Ac\022!Get attributes of a user acco"
  "unt.\0325Returns attributes of a user accou"
  "nt specified by ID.*\007GetUser\362\327\002\017admin.us"
  "er:read\202\323\344\223\002\032\022\030/user/v202211/users/{id}\022"
  "\253\002\n\nCreateUser\022&.kentik.user.v202211.Cre"
  "ateUserRequest\032\'.kentik.user.v202211.Cre"
  "ateUserResponse\"\313\001\222A\225\001\022\030Create new user "
  "account.\032mCreates new user account based"
  " on attributes in the request. Returns a"
  "ttributes of the newly created account.*"
  "\nCreateUser\362\327\002\020admin.user:write\202\323\344\223\002\030\"\023/"
  "user/v202211/users:\001*\022\311\002\n\nUpdateUser\022&.k"
  "entik.user.v202211.UpdateUserRequest\032\'.k"
  "entik.user.v202211.UpdateUserResponse\"\351\001"
  "\222A\251\001\022$Update attributes of a user accoun"
  "t.\032uReplaces all attributes of a user ac"
  "count specified by ID with attributes in"
  " the request. Returns updated attributes"
  ".*\nUpdateUser\362\327\002\020admin.user:write\202\323\344\223\002\"\032"
  "\035/user/v202211/users/{user.id}:\001*\022\342\001\n\nDe"
  "leteUser\022&.kentik.user.v202211.DeleteUse"
  "rRequest\032\'.kentik.user.v202211.DeleteUse"
  "rResponse\"\202\001\222AK\022\026Delete a user account.\032"
  "%Deletes user account specified by ID.*\n"
  "DeleteUser\362\327\002\020admin.user:write\202\323\344\223\002\032*\030/u"
  "ser/v202211/users/{id}\022\212\002\n\rResetApiToken"
  "\022).kentik.user.v202211.ResetApiTokenRequ"
  "est\032*.kentik.user.v202211.ResetApiTokenR"
  "esponse\"\241\001\222AZ\022\033Reset API token for a use"
  "r.\032,Resets API token for a user specifie"
  "d by ID.*\rResetApiToken\362\327\002\020admin.user:wr"
  "ite\202\323\344\223\002*\032(/user/v202211/users/{id}/rese"
  "t_api_token\022\265\002\n\023ResetActiveSessions\022/.ke"
  "ntik.user.v202211.ResetActiveSessionsReq"
  "uest\0320.kentik.user.v202211.ResetActiveSe"
  "ssionsResponse\"\272\001\222Am\022\"Resets active sess"
  "ions for a user.\0322Resets active sessions"
  " for a user specified by ID.*\023ResetActiv"
  "eSessions\362\327\002\020admin.user:write\202\323\344\223\0020\032./us"
  "er/v202211/users/{id}/reset_active_sessi"
  "ons\032(\312A\023grpc.api.kentik.com\352\327\002\nadmin.use"
  "r\220\330\002\003B\354\031Z\?github.com/kentik/api-schema-p"
  "ublic/go/kentik/user/v202211;user\222A\247\031\022\300\027"
  "\n\023User Management API\022\330\026# Overview\nThe U"
  "ser Management API enables programmatic "
  "administration of users within your orga"
  "nization. The API may be used to grant p"
  "ermissions to users at two levels: \n* **"
  "User role**: Permissions based on the le"
  "vel assigned to the Kentik user, either "
  "Member, Administrator, or Super Administ"
  "rator (see [About Users](https://kb.kent"
  "ik.com/v4/Cb02.htm#Cb02-About_Users)).\n*"
  " **User permissions**: Permissions grant"
  "ing access to specific capabilities of t"
  "he Kentik platform (see [User Permission"
  "s](https://kb.kentik.com/v4/Cb02.htm#Cb0"
  "2-User_Permissions)).\n\nBoth REST endpoin"
  "t and gRPC RPCs are provided.\n\n***Note:*"
  "** The legacy REST-only [User API](https"
  "://kb.kentik.com/v0/Ec06.htm#Ec06-User_A"
  "PI) provides a subset of the functionali"
  "ty of this API.\n\n# User Permission Ident"
  "ifiers\n\nIndividual user permissions are "
  "represented in this API by string-based "
  "identifiers. The table below shows the i"
  "dentifier used in the API for each permi"
  "ssion that can be enabled/disabled with "
  "the checkboxes on the Permissions tab of"
  " the Edit User dialog in the Kentik port"
  "al\'s Manage Users module (Settings \302\273 Ma"
  "nage Users).\n| Portal setting  | API ide"
  "ntifier |\n|-----------------|-----------"
  "-----|\n| Cancel Queries in Forensic View"
  "er | forensic_viewer.cancel_queries |\n| "
  "Synthetics Permissions: Create tests | s"
  "ynthetics.tests.create |\n| Synthetics Pe"
  "rmissions: Edit tests | synthetics.tests"
  ".edit |\n| Synthetics Permissions: Delete"
  " tests | synthetics.tests.delete |\n| Syn"
  "thetics Permissions: Create agents | syn"
  "thetics.agents.create |\n| Synthetics Per"
  "missions: Edit agents | synthetics.agent"
  "s.edit |\n| Synthetics Permissions: Delet"
  "e agents | synthetics.agents.delete |\n| "
  "Connectivity Costs Permissions: View Cos"
  "ts | connectivity_costs.read |\n| Connect"
  "ivity Costs Permissions: Configure Costs"
  " | connectivity_costs.edit |\n\n**_Note:_*"
  "* The API returns an error if the same p"
  "ermission is both granted and denied in "
  "the same request.\n\n### Default Permissio"
  "ns\n\nThe permissions above that are enabl"
  "ed/disabled by default depend on the rol"
  "e (level) of the user:\n* **Member**: All"
  " permissions in the table above are deni"
  "ed by default.\n* **Administrator** or **"
  "Super Administrator**: All permissions a"
  "re granted. \n\n# User Filter Attribute\n\nU"
  "ser filters enable Administrators to app"
  "ly filters that restrict the data that c"
  "an be returned from queries by a given u"
  "ser (see [User Filters](https://kb.kenti"
  "k.com/v4/Cb02.htm#Cb02-User_Filters)). I"
  "n the Kentik portal these filters are se"
  "t on the Filters tab of the Edit User di"
  "alog in the Manage Users module. In this"
  " API the filters are set in the `user` o"
  "bject with the `filter` attribute, whose"
  " type is string. The value of the attrib"
  "ute is given in JSON notation. The recom"
  "mended way to construct the JSON string "
  "is to configure the desired filter for o"
  "ne user in the Kentik portal and then co"
  "py the value of the `user.filter` attrib"
  "ute returned for that user by the `GetUs"
  "er` RPC.\"E\n\026Kentik API Engineering\022+http"
  "s://github.com/kentik/api-schema-public2"
  "\007v202211*\001\0022\020application/json:\020applicati"
  "on/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Email "
  "\002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Token \002b\026\n"
  "\t\n\005email\022\000\n\t\n\005token\022\000r]\n%General informa"
  "tion about Kentik APIs\0224https://kb.kenti"
  "k.com/v0/Ab09.htm#Ab09-APIs_Overviewb\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto_sccs[16] = {
  &scc_info_CreateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_CreateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_DeleteUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_DeleteUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_GetUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_GetUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_ListUsersRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_ListUsersResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_PermissionEntry_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_ResetActiveSessionsRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_ResetActiveSessionsResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_ResetApiTokenRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_ResetApiTokenResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_UpdateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_UpdateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base,
  &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fuser_2fv202211_2fuser_2eproto, "kentik/user/v202211/user.proto", 7924,
  &descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto_once, descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto_sccs, descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto_deps, 16, 6,
  schemas, file_default_instances, TableStruct_kentik_2fuser_2fv202211_2fuser_2eproto::offsets,
  file_level_metadata_kentik_2fuser_2fv202211_2fuser_2eproto, 16, file_level_enum_descriptors_kentik_2fuser_2fv202211_2fuser_2eproto, file_level_service_descriptors_kentik_2fuser_2fv202211_2fuser_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fuser_2fv202211_2fuser_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto)), true);
namespace kentik {
namespace user {
namespace v202211 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Role_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto);
  return file_level_enum_descriptors_kentik_2fuser_2fv202211_2fuser_2eproto[0];
}
bool Role_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void PermissionEntry::InitAsDefaultInstance() {
}
class PermissionEntry::_Internal {
 public:
};

PermissionEntry::PermissionEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.PermissionEntry)
}
PermissionEntry::PermissionEntry(const PermissionEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  capability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_capability().empty()) {
    capability_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_capability(),
      GetArena());
  }
  allowed_ = from.allowed_;
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.PermissionEntry)
}

void PermissionEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PermissionEntry_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  capability_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allowed_ = false;
}

PermissionEntry::~PermissionEntry() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.PermissionEntry)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PermissionEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  capability_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PermissionEntry::ArenaDtor(void* object) {
  PermissionEntry* _this = reinterpret_cast< PermissionEntry* >(object);
  (void)_this;
}
void PermissionEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PermissionEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PermissionEntry& PermissionEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PermissionEntry_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void PermissionEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.PermissionEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  capability_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  allowed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string capability = 1[json_name = "capability", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_capability();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.PermissionEntry.capability"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool allowed = 2[json_name = "allowed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PermissionEntry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.PermissionEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string capability = 1[json_name = "capability", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->capability().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_capability().data(), static_cast<int>(this->_internal_capability().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.PermissionEntry.capability");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_capability(), target);
  }

  // bool allowed = 2[json_name = "allowed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_allowed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.PermissionEntry)
  return target;
}

size_t PermissionEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.PermissionEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string capability = 1[json_name = "capability", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->capability().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_capability());
  }

  // bool allowed = 2[json_name = "allowed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->allowed() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PermissionEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.PermissionEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const PermissionEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PermissionEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.PermissionEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.PermissionEntry)
    MergeFrom(*source);
  }
}

void PermissionEntry::MergeFrom(const PermissionEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.PermissionEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.capability().size() > 0) {
    _internal_set_capability(from._internal_capability());
  }
  if (from.allowed() != 0) {
    _internal_set_allowed(from._internal_allowed());
  }
}

void PermissionEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.PermissionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermissionEntry::CopyFrom(const PermissionEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.PermissionEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionEntry::IsInitialized() const {
  return true;
}

void PermissionEntry::InternalSwap(PermissionEntry* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  capability_.Swap(&other->capability_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(allowed_, other->allowed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void User::InitAsDefaultInstance() {
  ::kentik::user::v202211::_User_default_instance_._instance.get_mutable()->last_login_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::user::v202211::_User_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::user::v202211::_User_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class User::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_login(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const User* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const User* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::last_login(const User* msg) {
  return *msg->last_login_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::cdate(const User* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
User::_Internal::edate(const User* msg) {
  return *msg->edate_;
}
void User::clear_last_login() {
  if (GetArena() == nullptr && last_login_ != nullptr) {
    delete last_login_;
  }
  last_login_ = nullptr;
}
void User::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void User::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  permissions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_(from.permissions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_email().empty()) {
    user_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_email(),
      GetArena());
  }
  user_full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_full_name().empty()) {
    user_full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_user_full_name(),
      GetArena());
  }
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter().empty()) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filter(),
      GetArena());
  }
  if (from._internal_has_last_login()) {
    last_login_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_login_);
  } else {
    last_login_ = nullptr;
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  role_ = from.role_;
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.User)
}

void User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_login_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&role_) -
      reinterpret_cast<char*>(&last_login_)) + sizeof(role_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.User)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void User::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_login_;
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const User& User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && last_login_ != nullptr) {
    delete last_login_;
  }
  last_login_ = nullptr;
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  role_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.User.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_email = 2[json_name = "userEmail", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.User.user_email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_full_name = 4[json_name = "userFullName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_user_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.User.user_full_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.user.v202211.Role role = 5[json_name = "role", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_role(static_cast<::kentik::user::v202211::Role>(val));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.user.v202211.PermissionEntry permissions = 6[json_name = "permissions", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // string filter = 7[json_name = "filter", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_filter();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.User.filter"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_login = 8[json_name = "lastLogin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_login(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 9[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 10[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* User::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.User.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string user_email = 2[json_name = "userEmail", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->user_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_email().data(), static_cast<int>(this->_internal_user_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.User.user_email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_email(), target);
  }

  // string user_full_name = 4[json_name = "userFullName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->user_full_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_full_name().data(), static_cast<int>(this->_internal_user_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.User.user_full_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_user_full_name(), target);
  }

  // .kentik.user.v202211.Role role = 5[json_name = "role", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_role(), target);
  }

  // repeated .kentik.user.v202211.PermissionEntry permissions = 6[json_name = "permissions", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_permissions(i), target, stream);
  }

  // string filter = 7[json_name = "filter", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->filter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.User.filter");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_filter(), target);
  }

  // .google.protobuf.Timestamp last_login = 8[json_name = "lastLogin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_last_login()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::last_login(this), target, stream);
  }

  // .google.protobuf.Timestamp cdate = 9[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 10[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::edate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.user.v202211.PermissionEntry permissions = 6[json_name = "permissions", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_permissions_size();
  for (const auto& msg : this->permissions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string user_email = 2[json_name = "userEmail", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->user_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_email());
  }

  // string user_full_name = 4[json_name = "userFullName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->user_full_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_full_name());
  }

  // string filter = 7[json_name = "filter", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  // .google.protobuf.Timestamp last_login = 8[json_name = "lastLogin", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_last_login()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_login_);
  }

  // .google.protobuf.Timestamp cdate = 9[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 10[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .kentik.user.v202211.Role role = 5[json_name = "role", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.user_email().size() > 0) {
    _internal_set_user_email(from._internal_user_email());
  }
  if (from.user_full_name().size() > 0) {
    _internal_set_user_full_name(from._internal_user_full_name());
  }
  if (from.filter().size() > 0) {
    _internal_set_filter(from._internal_filter());
  }
  if (from.has_last_login()) {
    _internal_mutable_last_login()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_login());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.role() != 0) {
    _internal_set_role(from._internal_role());
  }
}

void User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  permissions_.InternalSwap(&other->permissions_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_email_.Swap(&other->user_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  user_full_name_.Swap(&other->user_full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(User, role_)
      + sizeof(User::role_)
      - PROTOBUF_FIELD_OFFSET(User, last_login_)>(
          reinterpret_cast<char*>(&last_login_),
          reinterpret_cast<char*>(&other->last_login_));
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUsersRequest::InitAsDefaultInstance() {
}
class ListUsersRequest::_Internal {
 public:
};

ListUsersRequest::ListUsersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.ListUsersRequest)
}
ListUsersRequest::ListUsersRequest(const ListUsersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.ListUsersRequest)
}

void ListUsersRequest::SharedCtor() {
}

ListUsersRequest::~ListUsersRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.ListUsersRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUsersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUsersRequest::ArenaDtor(void* object) {
  ListUsersRequest* _this = reinterpret_cast< ListUsersRequest* >(object);
  (void)_this;
}
void ListUsersRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUsersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUsersRequest& ListUsersRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUsersRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void ListUsersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.ListUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUsersRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUsersRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.ListUsersRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.ListUsersRequest)
  return target;
}

size_t ListUsersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.ListUsersRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUsersRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.ListUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUsersRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUsersRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.ListUsersRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.ListUsersRequest)
    MergeFrom(*source);
  }
}

void ListUsersRequest::MergeFrom(const ListUsersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.ListUsersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListUsersRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.ListUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUsersRequest::CopyFrom(const ListUsersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.ListUsersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUsersRequest::IsInitialized() const {
  return true;
}

void ListUsersRequest::InternalSwap(ListUsersRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUsersRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListUsersResponse::InitAsDefaultInstance() {
}
class ListUsersResponse::_Internal {
 public:
};

ListUsersResponse::ListUsersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.ListUsersResponse)
}
ListUsersResponse::ListUsersResponse(const ListUsersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.ListUsersResponse)
}

void ListUsersResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListUsersResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  invalid_count_ = 0u;
}

ListUsersResponse::~ListUsersResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.ListUsersResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListUsersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListUsersResponse::ArenaDtor(void* object) {
  ListUsersResponse* _this = reinterpret_cast< ListUsersResponse* >(object);
  (void)_this;
}
void ListUsersResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListUsersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListUsersResponse& ListUsersResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListUsersResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void ListUsersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.ListUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  users_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListUsersResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.user.v202211.User users = 1[json_name = "users", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListUsersResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.ListUsersResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.user.v202211.User users = 1[json_name = "users", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_users(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.ListUsersResponse)
  return target;
}

size_t ListUsersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.ListUsersResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.user.v202211.User users = 1[json_name = "users", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListUsersResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.ListUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListUsersResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListUsersResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.ListUsersResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.ListUsersResponse)
    MergeFrom(*source);
  }
}

void ListUsersResponse::MergeFrom(const ListUsersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.ListUsersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListUsersResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.ListUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListUsersResponse::CopyFrom(const ListUsersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.ListUsersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListUsersResponse::IsInitialized() const {
  return true;
}

void ListUsersResponse::InternalSwap(ListUsersResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  users_.InternalSwap(&other->users_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListUsersResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserRequest::InitAsDefaultInstance() {
}
class GetUserRequest::_Internal {
 public:
};

GetUserRequest::GetUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.GetUserRequest)
}
GetUserRequest::GetUserRequest(const GetUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.GetUserRequest)
}

void GetUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetUserRequest::~GetUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.GetUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetUserRequest::ArenaDtor(void* object) {
  GetUserRequest* _this = reinterpret_cast< GetUserRequest* >(object);
  (void)_this;
}
void GetUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserRequest& GetUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void GetUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.GetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.GetUserRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.GetUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.GetUserRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.GetUserRequest)
  return target;
}

size_t GetUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.GetUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.GetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.GetUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.GetUserRequest)
    MergeFrom(*source);
  }
}

void GetUserRequest::MergeFrom(const GetUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.GetUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.GetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserRequest::CopyFrom(const GetUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.GetUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserRequest::IsInitialized() const {
  return true;
}

void GetUserRequest::InternalSwap(GetUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetUserResponse::InitAsDefaultInstance() {
  ::kentik::user::v202211::_GetUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202211::User*>(
      ::kentik::user::v202211::User::internal_default_instance());
}
class GetUserResponse::_Internal {
 public:
  static const ::kentik::user::v202211::User& user(const GetUserResponse* msg);
};

const ::kentik::user::v202211::User&
GetUserResponse::_Internal::user(const GetUserResponse* msg) {
  return *msg->user_;
}
GetUserResponse::GetUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.GetUserResponse)
}
GetUserResponse::GetUserResponse(const GetUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202211::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.GetUserResponse)
}

void GetUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  user_ = nullptr;
}

GetUserResponse::~GetUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.GetUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void GetUserResponse::ArenaDtor(void* object) {
  GetUserResponse* _this = reinterpret_cast< GetUserResponse* >(object);
  (void)_this;
}
void GetUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetUserResponse& GetUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void GetUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.GetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.GetUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.GetUserResponse)
  return target;
}

size_t GetUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.GetUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.GetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.GetUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.GetUserResponse)
    MergeFrom(*source);
  }
}

void GetUserResponse::MergeFrom(const GetUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.GetUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202211::User::MergeFrom(from._internal_user());
  }
}

void GetUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.GetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserResponse::CopyFrom(const GetUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.GetUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserResponse::IsInitialized() const {
  return true;
}

void GetUserResponse::InternalSwap(GetUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateUserRequest::InitAsDefaultInstance() {
  ::kentik::user::v202211::_CreateUserRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202211::User*>(
      ::kentik::user::v202211::User::internal_default_instance());
}
class CreateUserRequest::_Internal {
 public:
  static const ::kentik::user::v202211::User& user(const CreateUserRequest* msg);
};

const ::kentik::user::v202211::User&
CreateUserRequest::_Internal::user(const CreateUserRequest* msg) {
  return *msg->user_;
}
CreateUserRequest::CreateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.CreateUserRequest)
}
CreateUserRequest::CreateUserRequest(const CreateUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202211::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.CreateUserRequest)
}

void CreateUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  user_ = nullptr;
}

CreateUserRequest::~CreateUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.CreateUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void CreateUserRequest::ArenaDtor(void* object) {
  CreateUserRequest* _this = reinterpret_cast< CreateUserRequest* >(object);
  (void)_this;
}
void CreateUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateUserRequest& CreateUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void CreateUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.CreateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.CreateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.CreateUserRequest)
  return target;
}

size_t CreateUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.CreateUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.CreateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.CreateUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.CreateUserRequest)
    MergeFrom(*source);
  }
}

void CreateUserRequest::MergeFrom(const CreateUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.CreateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202211::User::MergeFrom(from._internal_user());
  }
}

void CreateUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.CreateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserRequest::CopyFrom(const CreateUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.CreateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRequest::IsInitialized() const {
  return true;
}

void CreateUserRequest::InternalSwap(CreateUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateUserResponse::InitAsDefaultInstance() {
  ::kentik::user::v202211::_CreateUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202211::User*>(
      ::kentik::user::v202211::User::internal_default_instance());
}
class CreateUserResponse::_Internal {
 public:
  static const ::kentik::user::v202211::User& user(const CreateUserResponse* msg);
};

const ::kentik::user::v202211::User&
CreateUserResponse::_Internal::user(const CreateUserResponse* msg) {
  return *msg->user_;
}
CreateUserResponse::CreateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.CreateUserResponse)
}
CreateUserResponse::CreateUserResponse(const CreateUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202211::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.CreateUserResponse)
}

void CreateUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  user_ = nullptr;
}

CreateUserResponse::~CreateUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.CreateUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void CreateUserResponse::ArenaDtor(void* object) {
  CreateUserResponse* _this = reinterpret_cast< CreateUserResponse* >(object);
  (void)_this;
}
void CreateUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateUserResponse& CreateUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void CreateUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.CreateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.CreateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.CreateUserResponse)
  return target;
}

size_t CreateUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.CreateUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.CreateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.CreateUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.CreateUserResponse)
    MergeFrom(*source);
  }
}

void CreateUserResponse::MergeFrom(const CreateUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.CreateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202211::User::MergeFrom(from._internal_user());
  }
}

void CreateUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.CreateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateUserResponse::CopyFrom(const CreateUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.CreateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserResponse::IsInitialized() const {
  return true;
}

void CreateUserResponse::InternalSwap(CreateUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateUserRequest::InitAsDefaultInstance() {
  ::kentik::user::v202211::_UpdateUserRequest_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202211::User*>(
      ::kentik::user::v202211::User::internal_default_instance());
}
class UpdateUserRequest::_Internal {
 public:
  static const ::kentik::user::v202211::User& user(const UpdateUserRequest* msg);
};

const ::kentik::user::v202211::User&
UpdateUserRequest::_Internal::user(const UpdateUserRequest* msg) {
  return *msg->user_;
}
UpdateUserRequest::UpdateUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.UpdateUserRequest)
}
UpdateUserRequest::UpdateUserRequest(const UpdateUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202211::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.UpdateUserRequest)
}

void UpdateUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  user_ = nullptr;
}

UpdateUserRequest::~UpdateUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.UpdateUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UpdateUserRequest::ArenaDtor(void* object) {
  UpdateUserRequest* _this = reinterpret_cast< UpdateUserRequest* >(object);
  (void)_this;
}
void UpdateUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateUserRequest& UpdateUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void UpdateUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.UpdateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.UpdateUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.UpdateUserRequest)
  return target;
}

size_t UpdateUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.UpdateUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.UpdateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.UpdateUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.UpdateUserRequest)
    MergeFrom(*source);
  }
}

void UpdateUserRequest::MergeFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.UpdateUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202211::User::MergeFrom(from._internal_user());
  }
}

void UpdateUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.UpdateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserRequest::CopyFrom(const UpdateUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.UpdateUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserRequest::IsInitialized() const {
  return true;
}

void UpdateUserRequest::InternalSwap(UpdateUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateUserResponse::InitAsDefaultInstance() {
  ::kentik::user::v202211::_UpdateUserResponse_default_instance_._instance.get_mutable()->user_ = const_cast< ::kentik::user::v202211::User*>(
      ::kentik::user::v202211::User::internal_default_instance());
}
class UpdateUserResponse::_Internal {
 public:
  static const ::kentik::user::v202211::User& user(const UpdateUserResponse* msg);
};

const ::kentik::user::v202211::User&
UpdateUserResponse::_Internal::user(const UpdateUserResponse* msg) {
  return *msg->user_;
}
UpdateUserResponse::UpdateUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.UpdateUserResponse)
}
UpdateUserResponse::UpdateUserResponse(const UpdateUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user()) {
    user_ = new ::kentik::user::v202211::User(*from.user_);
  } else {
    user_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.UpdateUserResponse)
}

void UpdateUserResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  user_ = nullptr;
}

UpdateUserResponse::~UpdateUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.UpdateUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete user_;
}

void UpdateUserResponse::ArenaDtor(void* object) {
  UpdateUserResponse* _this = reinterpret_cast< UpdateUserResponse* >(object);
  (void)_this;
}
void UpdateUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateUserResponse& UpdateUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void UpdateUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.UpdateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && user_ != nullptr) {
    delete user_;
  }
  user_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.UpdateUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.UpdateUserResponse)
  return target;
}

size_t UpdateUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.UpdateUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.user.v202211.User user = 1[json_name = "user", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_user()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.UpdateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.UpdateUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.UpdateUserResponse)
    MergeFrom(*source);
  }
}

void UpdateUserResponse::MergeFrom(const UpdateUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.UpdateUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    _internal_mutable_user()->::kentik::user::v202211::User::MergeFrom(from._internal_user());
  }
}

void UpdateUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.UpdateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserResponse::CopyFrom(const UpdateUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.UpdateUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserResponse::IsInitialized() const {
  return true;
}

void UpdateUserResponse::InternalSwap(UpdateUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(user_, other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteUserRequest::InitAsDefaultInstance() {
}
class DeleteUserRequest::_Internal {
 public:
};

DeleteUserRequest::DeleteUserRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.DeleteUserRequest)
}
DeleteUserRequest::DeleteUserRequest(const DeleteUserRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.DeleteUserRequest)
}

void DeleteUserRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteUserRequest::~DeleteUserRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.DeleteUserRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteUserRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteUserRequest::ArenaDtor(void* object) {
  DeleteUserRequest* _this = reinterpret_cast< DeleteUserRequest* >(object);
  (void)_this;
}
void DeleteUserRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUserRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteUserRequest& DeleteUserRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteUserRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void DeleteUserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.DeleteUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUserRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.DeleteUserRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUserRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.DeleteUserRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.DeleteUserRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.DeleteUserRequest)
  return target;
}

size_t DeleteUserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.DeleteUserRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteUserRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.DeleteUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteUserRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteUserRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.DeleteUserRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.DeleteUserRequest)
    MergeFrom(*source);
  }
}

void DeleteUserRequest::MergeFrom(const DeleteUserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.DeleteUserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteUserRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.DeleteUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteUserRequest::CopyFrom(const DeleteUserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.DeleteUserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserRequest::IsInitialized() const {
  return true;
}

void DeleteUserRequest::InternalSwap(DeleteUserRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUserRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteUserResponse::InitAsDefaultInstance() {
}
class DeleteUserResponse::_Internal {
 public:
};

DeleteUserResponse::DeleteUserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.DeleteUserResponse)
}
DeleteUserResponse::DeleteUserResponse(const DeleteUserResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.DeleteUserResponse)
}

void DeleteUserResponse::SharedCtor() {
}

DeleteUserResponse::~DeleteUserResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.DeleteUserResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteUserResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteUserResponse::ArenaDtor(void* object) {
  DeleteUserResponse* _this = reinterpret_cast< DeleteUserResponse* >(object);
  (void)_this;
}
void DeleteUserResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUserResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteUserResponse& DeleteUserResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteUserResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void DeleteUserResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.DeleteUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUserResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUserResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.DeleteUserResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.DeleteUserResponse)
  return target;
}

size_t DeleteUserResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.DeleteUserResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteUserResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.DeleteUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteUserResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteUserResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.DeleteUserResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.DeleteUserResponse)
    MergeFrom(*source);
  }
}

void DeleteUserResponse::MergeFrom(const DeleteUserResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.DeleteUserResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteUserResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.DeleteUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteUserResponse::CopyFrom(const DeleteUserResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.DeleteUserResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserResponse::IsInitialized() const {
  return true;
}

void DeleteUserResponse::InternalSwap(DeleteUserResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUserResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetApiTokenRequest::InitAsDefaultInstance() {
}
class ResetApiTokenRequest::_Internal {
 public:
};

ResetApiTokenRequest::ResetApiTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.ResetApiTokenRequest)
}
ResetApiTokenRequest::ResetApiTokenRequest(const ResetApiTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.ResetApiTokenRequest)
}

void ResetApiTokenRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetApiTokenRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResetApiTokenRequest::~ResetApiTokenRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.ResetApiTokenRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetApiTokenRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetApiTokenRequest::ArenaDtor(void* object) {
  ResetApiTokenRequest* _this = reinterpret_cast< ResetApiTokenRequest* >(object);
  (void)_this;
}
void ResetApiTokenRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetApiTokenRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetApiTokenRequest& ResetApiTokenRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetApiTokenRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void ResetApiTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.ResetApiTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetApiTokenRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.ResetApiTokenRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetApiTokenRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.ResetApiTokenRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.ResetApiTokenRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.ResetApiTokenRequest)
  return target;
}

size_t ResetApiTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.ResetApiTokenRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetApiTokenRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.ResetApiTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetApiTokenRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetApiTokenRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.ResetApiTokenRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.ResetApiTokenRequest)
    MergeFrom(*source);
  }
}

void ResetApiTokenRequest::MergeFrom(const ResetApiTokenRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.ResetApiTokenRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void ResetApiTokenRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.ResetApiTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetApiTokenRequest::CopyFrom(const ResetApiTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.ResetApiTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetApiTokenRequest::IsInitialized() const {
  return true;
}

void ResetApiTokenRequest::InternalSwap(ResetApiTokenRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetApiTokenRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetApiTokenResponse::InitAsDefaultInstance() {
}
class ResetApiTokenResponse::_Internal {
 public:
};

ResetApiTokenResponse::ResetApiTokenResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.ResetApiTokenResponse)
}
ResetApiTokenResponse::ResetApiTokenResponse(const ResetApiTokenResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.ResetApiTokenResponse)
}

void ResetApiTokenResponse::SharedCtor() {
}

ResetApiTokenResponse::~ResetApiTokenResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.ResetApiTokenResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetApiTokenResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResetApiTokenResponse::ArenaDtor(void* object) {
  ResetApiTokenResponse* _this = reinterpret_cast< ResetApiTokenResponse* >(object);
  (void)_this;
}
void ResetApiTokenResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetApiTokenResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetApiTokenResponse& ResetApiTokenResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetApiTokenResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void ResetApiTokenResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.ResetApiTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetApiTokenResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetApiTokenResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.ResetApiTokenResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.ResetApiTokenResponse)
  return target;
}

size_t ResetApiTokenResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.ResetApiTokenResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetApiTokenResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.ResetApiTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetApiTokenResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetApiTokenResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.ResetApiTokenResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.ResetApiTokenResponse)
    MergeFrom(*source);
  }
}

void ResetApiTokenResponse::MergeFrom(const ResetApiTokenResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.ResetApiTokenResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetApiTokenResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.ResetApiTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetApiTokenResponse::CopyFrom(const ResetApiTokenResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.ResetApiTokenResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetApiTokenResponse::IsInitialized() const {
  return true;
}

void ResetApiTokenResponse::InternalSwap(ResetApiTokenResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetApiTokenResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetActiveSessionsRequest::InitAsDefaultInstance() {
}
class ResetActiveSessionsRequest::_Internal {
 public:
};

ResetActiveSessionsRequest::ResetActiveSessionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.ResetActiveSessionsRequest)
}
ResetActiveSessionsRequest::ResetActiveSessionsRequest(const ResetActiveSessionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.ResetActiveSessionsRequest)
}

void ResetActiveSessionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ResetActiveSessionsRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ResetActiveSessionsRequest::~ResetActiveSessionsRequest() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.ResetActiveSessionsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetActiveSessionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ResetActiveSessionsRequest::ArenaDtor(void* object) {
  ResetActiveSessionsRequest* _this = reinterpret_cast< ResetActiveSessionsRequest* >(object);
  (void)_this;
}
void ResetActiveSessionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetActiveSessionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetActiveSessionsRequest& ResetActiveSessionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetActiveSessionsRequest_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void ResetActiveSessionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.ResetActiveSessionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetActiveSessionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.user.v202211.ResetActiveSessionsRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetActiveSessionsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.ResetActiveSessionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.user.v202211.ResetActiveSessionsRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.ResetActiveSessionsRequest)
  return target;
}

size_t ResetActiveSessionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.ResetActiveSessionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetActiveSessionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.ResetActiveSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetActiveSessionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetActiveSessionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.ResetActiveSessionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.ResetActiveSessionsRequest)
    MergeFrom(*source);
  }
}

void ResetActiveSessionsRequest::MergeFrom(const ResetActiveSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.ResetActiveSessionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void ResetActiveSessionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.ResetActiveSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetActiveSessionsRequest::CopyFrom(const ResetActiveSessionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.ResetActiveSessionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetActiveSessionsRequest::IsInitialized() const {
  return true;
}

void ResetActiveSessionsRequest::InternalSwap(ResetActiveSessionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetActiveSessionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ResetActiveSessionsResponse::InitAsDefaultInstance() {
}
class ResetActiveSessionsResponse::_Internal {
 public:
};

ResetActiveSessionsResponse::ResetActiveSessionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.user.v202211.ResetActiveSessionsResponse)
}
ResetActiveSessionsResponse::ResetActiveSessionsResponse(const ResetActiveSessionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.user.v202211.ResetActiveSessionsResponse)
}

void ResetActiveSessionsResponse::SharedCtor() {
}

ResetActiveSessionsResponse::~ResetActiveSessionsResponse() {
  // @@protoc_insertion_point(destructor:kentik.user.v202211.ResetActiveSessionsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResetActiveSessionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ResetActiveSessionsResponse::ArenaDtor(void* object) {
  ResetActiveSessionsResponse* _this = reinterpret_cast< ResetActiveSessionsResponse* >(object);
  (void)_this;
}
void ResetActiveSessionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResetActiveSessionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ResetActiveSessionsResponse& ResetActiveSessionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ResetActiveSessionsResponse_kentik_2fuser_2fv202211_2fuser_2eproto.base);
  return *internal_default_instance();
}


void ResetActiveSessionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.user.v202211.ResetActiveSessionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetActiveSessionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResetActiveSessionsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.user.v202211.ResetActiveSessionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.user.v202211.ResetActiveSessionsResponse)
  return target;
}

size_t ResetActiveSessionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.user.v202211.ResetActiveSessionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResetActiveSessionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.user.v202211.ResetActiveSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetActiveSessionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResetActiveSessionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.user.v202211.ResetActiveSessionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.user.v202211.ResetActiveSessionsResponse)
    MergeFrom(*source);
  }
}

void ResetActiveSessionsResponse::MergeFrom(const ResetActiveSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.user.v202211.ResetActiveSessionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetActiveSessionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.user.v202211.ResetActiveSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetActiveSessionsResponse::CopyFrom(const ResetActiveSessionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.user.v202211.ResetActiveSessionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetActiveSessionsResponse::IsInitialized() const {
  return true;
}

void ResetActiveSessionsResponse::InternalSwap(ResetActiveSessionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetActiveSessionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202211
}  // namespace user
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::PermissionEntry* Arena::CreateMaybeMessage< ::kentik::user::v202211::PermissionEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::PermissionEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::User* Arena::CreateMaybeMessage< ::kentik::user::v202211::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::User >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::ListUsersRequest* Arena::CreateMaybeMessage< ::kentik::user::v202211::ListUsersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::ListUsersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::ListUsersResponse* Arena::CreateMaybeMessage< ::kentik::user::v202211::ListUsersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::ListUsersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::GetUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202211::GetUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::GetUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::GetUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202211::GetUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::GetUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::CreateUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202211::CreateUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::CreateUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::CreateUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202211::CreateUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::CreateUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::UpdateUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202211::UpdateUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::UpdateUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::UpdateUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202211::UpdateUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::UpdateUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::DeleteUserRequest* Arena::CreateMaybeMessage< ::kentik::user::v202211::DeleteUserRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::DeleteUserRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::DeleteUserResponse* Arena::CreateMaybeMessage< ::kentik::user::v202211::DeleteUserResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::DeleteUserResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::ResetApiTokenRequest* Arena::CreateMaybeMessage< ::kentik::user::v202211::ResetApiTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::ResetApiTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::ResetApiTokenResponse* Arena::CreateMaybeMessage< ::kentik::user::v202211::ResetApiTokenResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::ResetApiTokenResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::ResetActiveSessionsRequest* Arena::CreateMaybeMessage< ::kentik::user::v202211::ResetActiveSessionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::ResetActiveSessionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::user::v202211::ResetActiveSessionsResponse* Arena::CreateMaybeMessage< ::kentik::user::v202211::ResetActiveSessionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::user::v202211::ResetActiveSessionsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
