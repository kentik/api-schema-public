// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/vault/v202312alpha1/vault.proto

#include "kentik/vault/v202312alpha1/vault.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fvault_2fv202312alpha1_2fvault_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto;
namespace kentik {
namespace vault {
namespace v202312alpha1 {
class SecretDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Secret> _instance;
} _Secret_default_instance_;
class GetSecretRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSecretRequest> _instance;
} _GetSecretRequest_default_instance_;
class GetSecretResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSecretResponse> _instance;
} _GetSecretResponse_default_instance_;
class ListSecretRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSecretRequest> _instance;
} _ListSecretRequest_default_instance_;
class ListSecretResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSecretResponse> _instance;
} _ListSecretResponse_default_instance_;
}  // namespace v202312alpha1
}  // namespace vault
}  // namespace kentik
static void InitDefaultsscc_info_GetSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::vault::v202312alpha1::_GetSecretRequest_default_instance_;
    new (ptr) ::kentik::vault::v202312alpha1::GetSecretRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::vault::v202312alpha1::GetSecretRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto}, {}};

static void InitDefaultsscc_info_GetSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::vault::v202312alpha1::_GetSecretResponse_default_instance_;
    new (ptr) ::kentik::vault::v202312alpha1::GetSecretResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::vault::v202312alpha1::GetSecretResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto}, {
      &scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base,}};

static void InitDefaultsscc_info_ListSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::vault::v202312alpha1::_ListSecretRequest_default_instance_;
    new (ptr) ::kentik::vault::v202312alpha1::ListSecretRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::vault::v202312alpha1::ListSecretRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto}, {}};

static void InitDefaultsscc_info_ListSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::vault::v202312alpha1::_ListSecretResponse_default_instance_;
    new (ptr) ::kentik::vault::v202312alpha1::ListSecretResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::vault::v202312alpha1::ListSecretResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto}, {
      &scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base,}};

static void InitDefaultsscc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::vault::v202312alpha1::_Secret_default_instance_;
    new (ptr) ::kentik::vault::v202312alpha1::Secret();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::vault::v202312alpha1::Secret::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fvault_2fv202312alpha1_2fvault_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fvault_2fv202312alpha1_2fvault_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fvault_2fv202312alpha1_2fvault_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fvault_2fv202312alpha1_2fvault_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::Secret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::Secret, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::Secret, value_),
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::Secret, version_),
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::Secret, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::Secret, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::Secret, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::GetSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::GetSecretRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::GetSecretResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::GetSecretResponse, secret_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::ListSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::ListSecretRequest, names_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::ListSecretResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::ListSecretResponse, secrets_),
  PROTOBUF_FIELD_OFFSET(::kentik::vault::v202312alpha1::ListSecretResponse, invalid_credential_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::vault::v202312alpha1::Secret)},
  { 11, -1, sizeof(::kentik::vault::v202312alpha1::GetSecretRequest)},
  { 17, -1, sizeof(::kentik::vault::v202312alpha1::GetSecretResponse)},
  { 23, -1, sizeof(::kentik::vault::v202312alpha1::ListSecretRequest)},
  { 29, -1, sizeof(::kentik::vault::v202312alpha1::ListSecretResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::vault::v202312alpha1::_Secret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::vault::v202312alpha1::_GetSecretRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::vault::v202312alpha1::_GetSecretResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::vault::v202312alpha1::_ListSecretRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::vault::v202312alpha1::_ListSecretResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fvault_2fv202312alpha1_2fvault_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&kentik/vault/v202312alpha1/vault.proto"
  "\022\032kentik.vault.v202312alpha1\032\034google/api"
  "/annotations.proto\032\027google/api/client.pr"
  "oto\032\037google/api/field_behavior.proto\032\037go"
  "ogle/protobuf/timestamp.proto\032.protoc-ge"
  "n-openapiv2/options/annotations.proto\032%k"
  "entik/core/v202303/annotations.proto\"\360\002\n"
  "\006Secret\022.\n\004name\030\001 \001(\tB\032\222A\0232\021The secret\'s"
  " name\342A\001\002R\004name\0228\n\005value\030\002 \001(\tB\"\222A\0332\031The"
  " secret\'s actual value\342A\001\002R\005value\0227\n\007ver"
  "sion\030\003 \001(\rB\035\222A\0262\024The secret\'s version\342A\001"
  "\002R\007version\022=\n\013description\030\004 \001(\tB\033\222A\0302\026Pu"
  "rpose of this secretR\013description\022R\n\004typ"
  "e\030\005 \001(\0162&.kentik.vault.v202312alpha1.Sec"
  "retTypeB\026\222A\0232\021The secret\'s typeR\004type\0220\n"
  "\002id\030\006 \001(\tB \222A\0312\027The secret\'s identifier\342"
  "A\001\002R\002id\"B\n\020GetSecretRequest\022.\n\004name\030\001 \001("
  "\tB\032\222A\0232\021The secret\'s name\342A\001\002R\004name\"`\n\021G"
  "etSecretResponse\022K\n\006secret\030\001 \001(\0132\".kenti"
  "k.vault.v202312alpha1.SecretB\017\222A\0102\006Secre"
  "t\342A\001\002R\006secret\"E\n\021ListSecretRequest\0220\n\005na"
  "mes\030\001 \003(\tB\032\222A\0232\021The secret\'s name\342A\001\002R\005n"
  "ames\"\373\001\n\022ListSecretResponse\022V\n\007secrets\030\001"
  " \003(\0132\".kentik.vault.v202312alpha1.Secret"
  "B\030\222A\0212\017List of secrets\342A\001\002R\007secrets\022\214\001\n\030"
  "invalid_credential_count\030\002 \001(\rBR\222AO2MNum"
  "ber of objects with invalid data (which "
  "are not returned in the response).R\026inva"
  "lidCredentialCount*\201\002\n\nSecretType\022\033\n\027SEC"
  "RET_TYPE_UNSPECIFIED\020\000\022\032\n\026SECRET_TYPE_BA"
  "SIC_AUTH\020\001\022\027\n\023SECRET_TYPE_SNMP_V1\020\002\022\030\n\024S"
  "ECRET_TYPE_SNMP_V2C\020\003\022\027\n\023SECRET_TYPE_SNM"
  "P_V3\020\004\022#\n\037SECRET_TYPE_STREAMING_TELEMETR"
  "Y\020\005\022\027\n\023SECRET_TYPE_BGP_MD5\020\006\022\031\n\025SECRET_T"
  "YPE_API_TOKEN\020\007\022\025\n\021SECRET_TYPE_OTHER\020\0102\242"
  "\004\n\014VaultService\022\371\001\n\tGetSecret\022,.kentik.v"
  "ault.v202312alpha1.GetSecretRequest\032-.ke"
  "ntik.vault.v202312alpha1.GetSecretRespon"
  "se\"\216\001\222AR\022\025Get a secret by name.\032.Returns"
  " a secret value stored in Kentik vault.*"
  "\tGetSecret\362\327\002\nvault:read\202\323\344\223\002%\022#/vault/v"
  "202312alpha1/secrets/{name}\022\365\001\n\nListSecr"
  "et\022-.kentik.vault.v202312alpha1.ListSecr"
  "etRequest\032..kentik.vault.v202312alpha1.L"
  "istSecretResponse\"\207\001\222AR\022\rList secrets.\0325"
  "Returns list of secret values stored in "
  "Kentik vault.*\nListSecret\362\327\002\nvault:read\202"
  "\323\344\223\002\036\022\034/vault/v202312alpha1/secrets\032\036\312A\023"
  "grpc.api.kentik.com\370\327\002\001\220\330\002\000B\370\003ZKgithub.c"
  "om/kentik/api-schema-public/gen/go/kenti"
  "k/vault/v202312alpha1;vault\222A\247\003\022\300\001\n\tVaul"
  "t API\022]# Overview\nThe Vault API enables "
  "programmatic access to secrets stored in"
  " your Kentik vault.\n\"E\n\026Kentik API Engin"
  "eering\022+https://github.com/kentik/api-sc"
  "hema-public2\rv202312alpha1*\001\0022\020applicati"
  "on/json:\020application/jsonZD\n\036\n\005email\022\025\010\002"
  "\032\017X-CH-Auth-Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-A"
  "uth-API-Token \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r"
  "]\n%General information about Kentik APIs"
  "\0224https://kb.kentik.com/v0/Ab09.htm#Ab09"
  "-APIs_Overviewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto_sccs[5] = {
  &scc_info_GetSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base,
  &scc_info_GetSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base,
  &scc_info_ListSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base,
  &scc_info_ListSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base,
  &scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fvault_2fv202312alpha1_2fvault_2eproto, "kentik/vault/v202312alpha1/vault.proto", 2462,
  &descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto_once, descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto_sccs, descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto_deps, 5, 6,
  schemas, file_default_instances, TableStruct_kentik_2fvault_2fv202312alpha1_2fvault_2eproto::offsets,
  file_level_metadata_kentik_2fvault_2fv202312alpha1_2fvault_2eproto, 5, file_level_enum_descriptors_kentik_2fvault_2fv202312alpha1_2fvault_2eproto, file_level_service_descriptors_kentik_2fvault_2fv202312alpha1_2fvault_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fvault_2fv202312alpha1_2fvault_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto)), true);
namespace kentik {
namespace vault {
namespace v202312alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecretType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto);
  return file_level_enum_descriptors_kentik_2fvault_2fv202312alpha1_2fvault_2eproto[0];
}
bool SecretType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Secret::InitAsDefaultInstance() {
}
class Secret::_Internal {
 public:
};

Secret::Secret(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.vault.v202312alpha1.Secret)
}
Secret::Secret(const Secret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kentik.vault.v202312alpha1.Secret)
}

void Secret::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(type_));
}

Secret::~Secret() {
  // @@protoc_insertion_point(destructor:kentik.vault.v202312alpha1.Secret)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Secret::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Secret::ArenaDtor(void* object) {
  Secret* _this = reinterpret_cast< Secret* >(object);
  (void)_this;
}
void Secret::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Secret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Secret& Secret::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  return *internal_default_instance();
}


void Secret::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.vault.v202312alpha1.Secret)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Secret::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.vault.v202312alpha1.Secret.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2[json_name = "value", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.vault.v202312alpha1.Secret.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.vault.v202312alpha1.Secret.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::vault::v202312alpha1::SecretType>(val));
        } else goto handle_unusual;
        continue;
      // string id = 6[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.vault.v202312alpha1.Secret.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Secret::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.vault.v202312alpha1.Secret)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.vault.v202312alpha1.Secret.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string value = 2[json_name = "value", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.vault.v202312alpha1.Secret.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.vault.v202312alpha1.Secret.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // string id = 6[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.vault.v202312alpha1.Secret.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.vault.v202312alpha1.Secret)
  return target;
}

size_t Secret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.vault.v202312alpha1.Secret)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string value = 2[json_name = "value", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string id = 6[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Secret::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.vault.v202312alpha1.Secret)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Secret>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.vault.v202312alpha1.Secret)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.vault.v202312alpha1.Secret)
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.vault.v202312alpha1.Secret)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void Secret::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.vault.v202312alpha1.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.vault.v202312alpha1.Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  return true;
}

void Secret::InternalSwap(Secret* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Secret, type_)
      + sizeof(Secret::type_)
      - PROTOBUF_FIELD_OFFSET(Secret, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Secret::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSecretRequest::InitAsDefaultInstance() {
}
class GetSecretRequest::_Internal {
 public:
};

GetSecretRequest::GetSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.vault.v202312alpha1.GetSecretRequest)
}
GetSecretRequest::GetSecretRequest(const GetSecretRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.vault.v202312alpha1.GetSecretRequest)
}

void GetSecretRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSecretRequest::~GetSecretRequest() {
  // @@protoc_insertion_point(destructor:kentik.vault.v202312alpha1.GetSecretRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSecretRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSecretRequest::ArenaDtor(void* object) {
  GetSecretRequest* _this = reinterpret_cast< GetSecretRequest* >(object);
  (void)_this;
}
void GetSecretRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSecretRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSecretRequest& GetSecretRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  return *internal_default_instance();
}


void GetSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.vault.v202312alpha1.GetSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSecretRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.vault.v202312alpha1.GetSecretRequest.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSecretRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.vault.v202312alpha1.GetSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.vault.v202312alpha1.GetSecretRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.vault.v202312alpha1.GetSecretRequest)
  return target;
}

size_t GetSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.vault.v202312alpha1.GetSecretRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSecretRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.vault.v202312alpha1.GetSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSecretRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSecretRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.vault.v202312alpha1.GetSecretRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.vault.v202312alpha1.GetSecretRequest)
    MergeFrom(*source);
  }
}

void GetSecretRequest::MergeFrom(const GetSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.vault.v202312alpha1.GetSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void GetSecretRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.vault.v202312alpha1.GetSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSecretRequest::CopyFrom(const GetSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.vault.v202312alpha1.GetSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSecretRequest::IsInitialized() const {
  return true;
}

void GetSecretRequest::InternalSwap(GetSecretRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSecretRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSecretResponse::InitAsDefaultInstance() {
  ::kentik::vault::v202312alpha1::_GetSecretResponse_default_instance_._instance.get_mutable()->secret_ = const_cast< ::kentik::vault::v202312alpha1::Secret*>(
      ::kentik::vault::v202312alpha1::Secret::internal_default_instance());
}
class GetSecretResponse::_Internal {
 public:
  static const ::kentik::vault::v202312alpha1::Secret& secret(const GetSecretResponse* msg);
};

const ::kentik::vault::v202312alpha1::Secret&
GetSecretResponse::_Internal::secret(const GetSecretResponse* msg) {
  return *msg->secret_;
}
GetSecretResponse::GetSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.vault.v202312alpha1.GetSecretResponse)
}
GetSecretResponse::GetSecretResponse(const GetSecretResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_secret()) {
    secret_ = new ::kentik::vault::v202312alpha1::Secret(*from.secret_);
  } else {
    secret_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.vault.v202312alpha1.GetSecretResponse)
}

void GetSecretResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  secret_ = nullptr;
}

GetSecretResponse::~GetSecretResponse() {
  // @@protoc_insertion_point(destructor:kentik.vault.v202312alpha1.GetSecretResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetSecretResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete secret_;
}

void GetSecretResponse::ArenaDtor(void* object) {
  GetSecretResponse* _this = reinterpret_cast< GetSecretResponse* >(object);
  (void)_this;
}
void GetSecretResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSecretResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSecretResponse& GetSecretResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  return *internal_default_instance();
}


void GetSecretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.vault.v202312alpha1.GetSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && secret_ != nullptr) {
    delete secret_;
  }
  secret_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSecretResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.vault.v202312alpha1.Secret secret = 1[json_name = "secret", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_secret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSecretResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.vault.v202312alpha1.GetSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.vault.v202312alpha1.Secret secret = 1[json_name = "secret", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_secret()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::secret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.vault.v202312alpha1.GetSecretResponse)
  return target;
}

size_t GetSecretResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.vault.v202312alpha1.GetSecretResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.vault.v202312alpha1.Secret secret = 1[json_name = "secret", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_secret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *secret_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSecretResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.vault.v202312alpha1.GetSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSecretResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSecretResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.vault.v202312alpha1.GetSecretResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.vault.v202312alpha1.GetSecretResponse)
    MergeFrom(*source);
  }
}

void GetSecretResponse::MergeFrom(const GetSecretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.vault.v202312alpha1.GetSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_secret()) {
    _internal_mutable_secret()->::kentik::vault::v202312alpha1::Secret::MergeFrom(from._internal_secret());
  }
}

void GetSecretResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.vault.v202312alpha1.GetSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSecretResponse::CopyFrom(const GetSecretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.vault.v202312alpha1.GetSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSecretResponse::IsInitialized() const {
  return true;
}

void GetSecretResponse::InternalSwap(GetSecretResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(secret_, other->secret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSecretResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSecretRequest::InitAsDefaultInstance() {
}
class ListSecretRequest::_Internal {
 public:
};

ListSecretRequest::ListSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  names_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.vault.v202312alpha1.ListSecretRequest)
}
ListSecretRequest::ListSecretRequest(const ListSecretRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.vault.v202312alpha1.ListSecretRequest)
}

void ListSecretRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
}

ListSecretRequest::~ListSecretRequest() {
  // @@protoc_insertion_point(destructor:kentik.vault.v202312alpha1.ListSecretRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSecretRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListSecretRequest::ArenaDtor(void* object) {
  ListSecretRequest* _this = reinterpret_cast< ListSecretRequest* >(object);
  (void)_this;
}
void ListSecretRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSecretRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSecretRequest& ListSecretRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSecretRequest_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  return *internal_default_instance();
}


void ListSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.vault.v202312alpha1.ListSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSecretRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string names = 1[json_name = "names", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.vault.v202312alpha1.ListSecretRequest.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSecretRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.vault.v202312alpha1.ListSecretRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string names = 1[json_name = "names", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.vault.v202312alpha1.ListSecretRequest.names");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.vault.v202312alpha1.ListSecretRequest)
  return target;
}

size_t ListSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.vault.v202312alpha1.ListSecretRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string names = 1[json_name = "names", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSecretRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.vault.v202312alpha1.ListSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSecretRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSecretRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.vault.v202312alpha1.ListSecretRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.vault.v202312alpha1.ListSecretRequest)
    MergeFrom(*source);
  }
}

void ListSecretRequest::MergeFrom(const ListSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.vault.v202312alpha1.ListSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
}

void ListSecretRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.vault.v202312alpha1.ListSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSecretRequest::CopyFrom(const ListSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.vault.v202312alpha1.ListSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSecretRequest::IsInitialized() const {
  return true;
}

void ListSecretRequest::InternalSwap(ListSecretRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  names_.InternalSwap(&other->names_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSecretRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSecretResponse::InitAsDefaultInstance() {
}
class ListSecretResponse::_Internal {
 public:
};

ListSecretResponse::ListSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  secrets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.vault.v202312alpha1.ListSecretResponse)
}
ListSecretResponse::ListSecretResponse(const ListSecretResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      secrets_(from.secrets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_credential_count_ = from.invalid_credential_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.vault.v202312alpha1.ListSecretResponse)
}

void ListSecretResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  invalid_credential_count_ = 0u;
}

ListSecretResponse::~ListSecretResponse() {
  // @@protoc_insertion_point(destructor:kentik.vault.v202312alpha1.ListSecretResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListSecretResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListSecretResponse::ArenaDtor(void* object) {
  ListSecretResponse* _this = reinterpret_cast< ListSecretResponse* >(object);
  (void)_this;
}
void ListSecretResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSecretResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSecretResponse& ListSecretResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSecretResponse_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base);
  return *internal_default_instance();
}


void ListSecretResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.vault.v202312alpha1.ListSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secrets_.Clear();
  invalid_credential_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSecretResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.vault.v202312alpha1.Secret secrets = 1[json_name = "secrets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_secrets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_credential_count = 2[json_name = "invalidCredentialCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_credential_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSecretResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.vault.v202312alpha1.ListSecretResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.vault.v202312alpha1.Secret secrets = 1[json_name = "secrets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_secrets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_secrets(i), target, stream);
  }

  // uint32 invalid_credential_count = 2[json_name = "invalidCredentialCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_credential_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_credential_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.vault.v202312alpha1.ListSecretResponse)
  return target;
}

size_t ListSecretResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.vault.v202312alpha1.ListSecretResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.vault.v202312alpha1.Secret secrets = 1[json_name = "secrets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_secrets_size();
  for (const auto& msg : this->secrets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_credential_count = 2[json_name = "invalidCredentialCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_credential_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_credential_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSecretResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.vault.v202312alpha1.ListSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSecretResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSecretResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.vault.v202312alpha1.ListSecretResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.vault.v202312alpha1.ListSecretResponse)
    MergeFrom(*source);
  }
}

void ListSecretResponse::MergeFrom(const ListSecretResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.vault.v202312alpha1.ListSecretResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secrets_.MergeFrom(from.secrets_);
  if (from.invalid_credential_count() != 0) {
    _internal_set_invalid_credential_count(from._internal_invalid_credential_count());
  }
}

void ListSecretResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.vault.v202312alpha1.ListSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSecretResponse::CopyFrom(const ListSecretResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.vault.v202312alpha1.ListSecretResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSecretResponse::IsInitialized() const {
  return true;
}

void ListSecretResponse::InternalSwap(ListSecretResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  secrets_.InternalSwap(&other->secrets_);
  swap(invalid_credential_count_, other->invalid_credential_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSecretResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202312alpha1
}  // namespace vault
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::vault::v202312alpha1::Secret* Arena::CreateMaybeMessage< ::kentik::vault::v202312alpha1::Secret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::vault::v202312alpha1::Secret >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::vault::v202312alpha1::GetSecretRequest* Arena::CreateMaybeMessage< ::kentik::vault::v202312alpha1::GetSecretRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::vault::v202312alpha1::GetSecretRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::vault::v202312alpha1::GetSecretResponse* Arena::CreateMaybeMessage< ::kentik::vault::v202312alpha1::GetSecretResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::vault::v202312alpha1::GetSecretResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::vault::v202312alpha1::ListSecretRequest* Arena::CreateMaybeMessage< ::kentik::vault::v202312alpha1::ListSecretRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::vault::v202312alpha1::ListSecretRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::vault::v202312alpha1::ListSecretResponse* Arena::CreateMaybeMessage< ::kentik::vault::v202312alpha1::ListSecretResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::vault::v202312alpha1::ListSecretResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
