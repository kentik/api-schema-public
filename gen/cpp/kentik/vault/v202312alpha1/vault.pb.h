// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/vault/v202312alpha1/vault.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fvault_2fv202312alpha1_2fvault_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fvault_2fv202312alpha1_2fvault_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fvault_2fv202312alpha1_2fvault_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fvault_2fv202312alpha1_2fvault_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto;
namespace kentik {
namespace vault {
namespace v202312alpha1 {
class GetSecretRequest;
class GetSecretRequestDefaultTypeInternal;
extern GetSecretRequestDefaultTypeInternal _GetSecretRequest_default_instance_;
class GetSecretResponse;
class GetSecretResponseDefaultTypeInternal;
extern GetSecretResponseDefaultTypeInternal _GetSecretResponse_default_instance_;
class ListSecretRequest;
class ListSecretRequestDefaultTypeInternal;
extern ListSecretRequestDefaultTypeInternal _ListSecretRequest_default_instance_;
class ListSecretResponse;
class ListSecretResponseDefaultTypeInternal;
extern ListSecretResponseDefaultTypeInternal _ListSecretResponse_default_instance_;
class Secret;
class SecretDefaultTypeInternal;
extern SecretDefaultTypeInternal _Secret_default_instance_;
}  // namespace v202312alpha1
}  // namespace vault
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::vault::v202312alpha1::GetSecretRequest* Arena::CreateMaybeMessage<::kentik::vault::v202312alpha1::GetSecretRequest>(Arena*);
template<> ::kentik::vault::v202312alpha1::GetSecretResponse* Arena::CreateMaybeMessage<::kentik::vault::v202312alpha1::GetSecretResponse>(Arena*);
template<> ::kentik::vault::v202312alpha1::ListSecretRequest* Arena::CreateMaybeMessage<::kentik::vault::v202312alpha1::ListSecretRequest>(Arena*);
template<> ::kentik::vault::v202312alpha1::ListSecretResponse* Arena::CreateMaybeMessage<::kentik::vault::v202312alpha1::ListSecretResponse>(Arena*);
template<> ::kentik::vault::v202312alpha1::Secret* Arena::CreateMaybeMessage<::kentik::vault::v202312alpha1::Secret>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace vault {
namespace v202312alpha1 {

enum SecretType : int {
  SECRET_TYPE_UNSPECIFIED = 0,
  SECRET_TYPE_BASIC_AUTH = 1,
  SECRET_TYPE_SNMP_V1 = 2,
  SECRET_TYPE_SNMP_V2C = 3,
  SECRET_TYPE_SNMP_V3 = 4,
  SECRET_TYPE_STREAMING_TELEMETRY = 5,
  SECRET_TYPE_BGP_MD5 = 6,
  SECRET_TYPE_API_TOKEN = 7,
  SECRET_TYPE_OTHER = 8,
  SecretType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SecretType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SecretType_IsValid(int value);
constexpr SecretType SecretType_MIN = SECRET_TYPE_UNSPECIFIED;
constexpr SecretType SecretType_MAX = SECRET_TYPE_OTHER;
constexpr int SecretType_ARRAYSIZE = SecretType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SecretType_descriptor();
template<typename T>
inline const std::string& SecretType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SecretType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SecretType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SecretType_descriptor(), enum_t_value);
}
inline bool SecretType_Parse(
    const std::string& name, SecretType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SecretType>(
    SecretType_descriptor(), name, value);
}
// ===================================================================

class Secret PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.vault.v202312alpha1.Secret) */ {
 public:
  inline Secret() : Secret(nullptr) {};
  virtual ~Secret();

  Secret(const Secret& from);
  Secret(Secret&& from) noexcept
    : Secret() {
    *this = ::std::move(from);
  }

  inline Secret& operator=(const Secret& from) {
    CopyFrom(from);
    return *this;
  }
  inline Secret& operator=(Secret&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Secret& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Secret* internal_default_instance() {
    return reinterpret_cast<const Secret*>(
               &_Secret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Secret& a, Secret& b) {
    a.Swap(&b);
  }
  inline void Swap(Secret* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Secret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Secret* New() const final {
    return CreateMaybeMessage<Secret>(nullptr);
  }

  Secret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Secret>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Secret& from);
  void MergeFrom(const Secret& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Secret* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.vault.v202312alpha1.Secret";
  }
  protected:
  explicit Secret(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto);
    return ::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kIdFieldNumber = 6,
    kVersionFieldNumber = 3,
    kTypeFieldNumber = 5,
  };
  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2[json_name = "value", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string id = 6[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_type();
  ::kentik::vault::v202312alpha1::SecretType type() const;
  void set_type(::kentik::vault::v202312alpha1::SecretType value);
  private:
  ::kentik::vault::v202312alpha1::SecretType _internal_type() const;
  void _internal_set_type(::kentik::vault::v202312alpha1::SecretType value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.vault.v202312alpha1.Secret)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fvault_2fv202312alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class GetSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.vault.v202312alpha1.GetSecretRequest) */ {
 public:
  inline GetSecretRequest() : GetSecretRequest(nullptr) {};
  virtual ~GetSecretRequest();

  GetSecretRequest(const GetSecretRequest& from);
  GetSecretRequest(GetSecretRequest&& from) noexcept
    : GetSecretRequest() {
    *this = ::std::move(from);
  }

  inline GetSecretRequest& operator=(const GetSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSecretRequest& operator=(GetSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSecretRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSecretRequest* internal_default_instance() {
    return reinterpret_cast<const GetSecretRequest*>(
               &_GetSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetSecretRequest& a, GetSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSecretRequest* New() const final {
    return CreateMaybeMessage<GetSecretRequest>(nullptr);
  }

  GetSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSecretRequest& from);
  void MergeFrom(const GetSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.vault.v202312alpha1.GetSecretRequest";
  }
  protected:
  explicit GetSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto);
    return ::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:kentik.vault.v202312alpha1.GetSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fvault_2fv202312alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class GetSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.vault.v202312alpha1.GetSecretResponse) */ {
 public:
  inline GetSecretResponse() : GetSecretResponse(nullptr) {};
  virtual ~GetSecretResponse();

  GetSecretResponse(const GetSecretResponse& from);
  GetSecretResponse(GetSecretResponse&& from) noexcept
    : GetSecretResponse() {
    *this = ::std::move(from);
  }

  inline GetSecretResponse& operator=(const GetSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSecretResponse& operator=(GetSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSecretResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSecretResponse* internal_default_instance() {
    return reinterpret_cast<const GetSecretResponse*>(
               &_GetSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetSecretResponse& a, GetSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSecretResponse* New() const final {
    return CreateMaybeMessage<GetSecretResponse>(nullptr);
  }

  GetSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSecretResponse& from);
  void MergeFrom(const GetSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.vault.v202312alpha1.GetSecretResponse";
  }
  protected:
  explicit GetSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto);
    return ::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretFieldNumber = 1,
  };
  // .kentik.vault.v202312alpha1.Secret secret = 1[json_name = "secret", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_secret() const;
  private:
  bool _internal_has_secret() const;
  public:
  void clear_secret();
  const ::kentik::vault::v202312alpha1::Secret& secret() const;
  ::kentik::vault::v202312alpha1::Secret* release_secret();
  ::kentik::vault::v202312alpha1::Secret* mutable_secret();
  void set_allocated_secret(::kentik::vault::v202312alpha1::Secret* secret);
  private:
  const ::kentik::vault::v202312alpha1::Secret& _internal_secret() const;
  ::kentik::vault::v202312alpha1::Secret* _internal_mutable_secret();
  public:
  void unsafe_arena_set_allocated_secret(
      ::kentik::vault::v202312alpha1::Secret* secret);
  ::kentik::vault::v202312alpha1::Secret* unsafe_arena_release_secret();

  // @@protoc_insertion_point(class_scope:kentik.vault.v202312alpha1.GetSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::vault::v202312alpha1::Secret* secret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fvault_2fv202312alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class ListSecretRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.vault.v202312alpha1.ListSecretRequest) */ {
 public:
  inline ListSecretRequest() : ListSecretRequest(nullptr) {};
  virtual ~ListSecretRequest();

  ListSecretRequest(const ListSecretRequest& from);
  ListSecretRequest(ListSecretRequest&& from) noexcept
    : ListSecretRequest() {
    *this = ::std::move(from);
  }

  inline ListSecretRequest& operator=(const ListSecretRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecretRequest& operator=(ListSecretRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSecretRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSecretRequest* internal_default_instance() {
    return reinterpret_cast<const ListSecretRequest*>(
               &_ListSecretRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListSecretRequest& a, ListSecretRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecretRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecretRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSecretRequest* New() const final {
    return CreateMaybeMessage<ListSecretRequest>(nullptr);
  }

  ListSecretRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSecretRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSecretRequest& from);
  void MergeFrom(const ListSecretRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecretRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.vault.v202312alpha1.ListSecretRequest";
  }
  protected:
  explicit ListSecretRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto);
    return ::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamesFieldNumber = 1,
  };
  // repeated string names = 1[json_name = "names", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // @@protoc_insertion_point(class_scope:kentik.vault.v202312alpha1.ListSecretRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fvault_2fv202312alpha1_2fvault_2eproto;
};
// -------------------------------------------------------------------

class ListSecretResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.vault.v202312alpha1.ListSecretResponse) */ {
 public:
  inline ListSecretResponse() : ListSecretResponse(nullptr) {};
  virtual ~ListSecretResponse();

  ListSecretResponse(const ListSecretResponse& from);
  ListSecretResponse(ListSecretResponse&& from) noexcept
    : ListSecretResponse() {
    *this = ::std::move(from);
  }

  inline ListSecretResponse& operator=(const ListSecretResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSecretResponse& operator=(ListSecretResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSecretResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSecretResponse* internal_default_instance() {
    return reinterpret_cast<const ListSecretResponse*>(
               &_ListSecretResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListSecretResponse& a, ListSecretResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSecretResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSecretResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSecretResponse* New() const final {
    return CreateMaybeMessage<ListSecretResponse>(nullptr);
  }

  ListSecretResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSecretResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSecretResponse& from);
  void MergeFrom(const ListSecretResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSecretResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.vault.v202312alpha1.ListSecretResponse";
  }
  protected:
  explicit ListSecretResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto);
    return ::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretsFieldNumber = 1,
    kInvalidCredentialCountFieldNumber = 2,
  };
  // repeated .kentik.vault.v202312alpha1.Secret secrets = 1[json_name = "secrets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int secrets_size() const;
  private:
  int _internal_secrets_size() const;
  public:
  void clear_secrets();
  ::kentik::vault::v202312alpha1::Secret* mutable_secrets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret >*
      mutable_secrets();
  private:
  const ::kentik::vault::v202312alpha1::Secret& _internal_secrets(int index) const;
  ::kentik::vault::v202312alpha1::Secret* _internal_add_secrets();
  public:
  const ::kentik::vault::v202312alpha1::Secret& secrets(int index) const;
  ::kentik::vault::v202312alpha1::Secret* add_secrets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret >&
      secrets() const;

  // uint32 invalid_credential_count = 2[json_name = "invalidCredentialCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_credential_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_credential_count() const;
  void set_invalid_credential_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_credential_count() const;
  void _internal_set_invalid_credential_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.vault.v202312alpha1.ListSecretResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret > secrets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_credential_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fvault_2fv202312alpha1_2fvault_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Secret

// string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Secret::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Secret::name() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.Secret.name)
  return _internal_name();
}
inline void Secret::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.Secret.name)
}
inline std::string* Secret::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.vault.v202312alpha1.Secret.name)
  return _internal_mutable_name();
}
inline const std::string& Secret::_internal_name() const {
  return name_.Get();
}
inline void Secret::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Secret::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.vault.v202312alpha1.Secret.name)
}
inline void Secret::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.vault.v202312alpha1.Secret.name)
}
inline void Secret::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.vault.v202312alpha1.Secret.name)
}
inline std::string* Secret::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Secret::release_name() {
  // @@protoc_insertion_point(field_release:kentik.vault.v202312alpha1.Secret.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Secret::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.vault.v202312alpha1.Secret.name)
}
inline std::string* Secret::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.vault.v202312alpha1.Secret.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Secret::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.vault.v202312alpha1.Secret.name)
}

// string value = 2[json_name = "value", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Secret::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Secret::value() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.Secret.value)
  return _internal_value();
}
inline void Secret::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.Secret.value)
}
inline std::string* Secret::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kentik.vault.v202312alpha1.Secret.value)
  return _internal_mutable_value();
}
inline const std::string& Secret::_internal_value() const {
  return value_.Get();
}
inline void Secret::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Secret::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.vault.v202312alpha1.Secret.value)
}
inline void Secret::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.vault.v202312alpha1.Secret.value)
}
inline void Secret::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.vault.v202312alpha1.Secret.value)
}
inline std::string* Secret::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Secret::release_value() {
  // @@protoc_insertion_point(field_release:kentik.vault.v202312alpha1.Secret.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Secret::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.vault.v202312alpha1.Secret.value)
}
inline std::string* Secret::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.vault.v202312alpha1.Secret.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Secret::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.vault.v202312alpha1.Secret.value)
}

// uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Secret::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secret::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Secret::version() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.Secret.version)
  return _internal_version();
}
inline void Secret::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void Secret::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.Secret.version)
}

// string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Secret::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Secret::description() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.Secret.description)
  return _internal_description();
}
inline void Secret::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.Secret.description)
}
inline std::string* Secret::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.vault.v202312alpha1.Secret.description)
  return _internal_mutable_description();
}
inline const std::string& Secret::_internal_description() const {
  return description_.Get();
}
inline void Secret::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Secret::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.vault.v202312alpha1.Secret.description)
}
inline void Secret::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.vault.v202312alpha1.Secret.description)
}
inline void Secret::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.vault.v202312alpha1.Secret.description)
}
inline std::string* Secret::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Secret::release_description() {
  // @@protoc_insertion_point(field_release:kentik.vault.v202312alpha1.Secret.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Secret::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.vault.v202312alpha1.Secret.description)
}
inline std::string* Secret::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.vault.v202312alpha1.Secret.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Secret::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.vault.v202312alpha1.Secret.description)
}

// .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Secret::clear_type() {
  type_ = 0;
}
inline ::kentik::vault::v202312alpha1::SecretType Secret::_internal_type() const {
  return static_cast< ::kentik::vault::v202312alpha1::SecretType >(type_);
}
inline ::kentik::vault::v202312alpha1::SecretType Secret::type() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.Secret.type)
  return _internal_type();
}
inline void Secret::_internal_set_type(::kentik::vault::v202312alpha1::SecretType value) {
  
  type_ = value;
}
inline void Secret::set_type(::kentik::vault::v202312alpha1::SecretType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.Secret.type)
}

// string id = 6[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Secret::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Secret::id() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.Secret.id)
  return _internal_id();
}
inline void Secret::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.Secret.id)
}
inline std::string* Secret::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.vault.v202312alpha1.Secret.id)
  return _internal_mutable_id();
}
inline const std::string& Secret::_internal_id() const {
  return id_.Get();
}
inline void Secret::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Secret::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.vault.v202312alpha1.Secret.id)
}
inline void Secret::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.vault.v202312alpha1.Secret.id)
}
inline void Secret::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.vault.v202312alpha1.Secret.id)
}
inline std::string* Secret::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Secret::release_id() {
  // @@protoc_insertion_point(field_release:kentik.vault.v202312alpha1.Secret.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Secret::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.vault.v202312alpha1.Secret.id)
}
inline std::string* Secret::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.vault.v202312alpha1.Secret.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Secret::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.vault.v202312alpha1.Secret.id)
}

// -------------------------------------------------------------------

// GetSecretRequest

// string name = 1[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetSecretRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetSecretRequest::name() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.GetSecretRequest.name)
  return _internal_name();
}
inline void GetSecretRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.GetSecretRequest.name)
}
inline std::string* GetSecretRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.vault.v202312alpha1.GetSecretRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetSecretRequest::_internal_name() const {
  return name_.Get();
}
inline void GetSecretRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetSecretRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.vault.v202312alpha1.GetSecretRequest.name)
}
inline void GetSecretRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.vault.v202312alpha1.GetSecretRequest.name)
}
inline void GetSecretRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.vault.v202312alpha1.GetSecretRequest.name)
}
inline std::string* GetSecretRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetSecretRequest::release_name() {
  // @@protoc_insertion_point(field_release:kentik.vault.v202312alpha1.GetSecretRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetSecretRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.vault.v202312alpha1.GetSecretRequest.name)
}
inline std::string* GetSecretRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.vault.v202312alpha1.GetSecretRequest.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetSecretRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.vault.v202312alpha1.GetSecretRequest.name)
}

// -------------------------------------------------------------------

// GetSecretResponse

// .kentik.vault.v202312alpha1.Secret secret = 1[json_name = "secret", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetSecretResponse::_internal_has_secret() const {
  return this != internal_default_instance() && secret_ != nullptr;
}
inline bool GetSecretResponse::has_secret() const {
  return _internal_has_secret();
}
inline void GetSecretResponse::clear_secret() {
  if (GetArena() == nullptr && secret_ != nullptr) {
    delete secret_;
  }
  secret_ = nullptr;
}
inline const ::kentik::vault::v202312alpha1::Secret& GetSecretResponse::_internal_secret() const {
  const ::kentik::vault::v202312alpha1::Secret* p = secret_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::vault::v202312alpha1::Secret*>(
      &::kentik::vault::v202312alpha1::_Secret_default_instance_);
}
inline const ::kentik::vault::v202312alpha1::Secret& GetSecretResponse::secret() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.GetSecretResponse.secret)
  return _internal_secret();
}
inline void GetSecretResponse::unsafe_arena_set_allocated_secret(
    ::kentik::vault::v202312alpha1::Secret* secret) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secret_);
  }
  secret_ = secret;
  if (secret) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.vault.v202312alpha1.GetSecretResponse.secret)
}
inline ::kentik::vault::v202312alpha1::Secret* GetSecretResponse::release_secret() {
  auto temp = unsafe_arena_release_secret();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::vault::v202312alpha1::Secret* GetSecretResponse::unsafe_arena_release_secret() {
  // @@protoc_insertion_point(field_release:kentik.vault.v202312alpha1.GetSecretResponse.secret)
  
  ::kentik::vault::v202312alpha1::Secret* temp = secret_;
  secret_ = nullptr;
  return temp;
}
inline ::kentik::vault::v202312alpha1::Secret* GetSecretResponse::_internal_mutable_secret() {
  
  if (secret_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::vault::v202312alpha1::Secret>(GetArena());
    secret_ = p;
  }
  return secret_;
}
inline ::kentik::vault::v202312alpha1::Secret* GetSecretResponse::mutable_secret() {
  // @@protoc_insertion_point(field_mutable:kentik.vault.v202312alpha1.GetSecretResponse.secret)
  return _internal_mutable_secret();
}
inline void GetSecretResponse::set_allocated_secret(::kentik::vault::v202312alpha1::Secret* secret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete secret_;
  }
  if (secret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(secret);
    if (message_arena != submessage_arena) {
      secret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secret, submessage_arena);
    }
    
  } else {
    
  }
  secret_ = secret;
  // @@protoc_insertion_point(field_set_allocated:kentik.vault.v202312alpha1.GetSecretResponse.secret)
}

// -------------------------------------------------------------------

// ListSecretRequest

// repeated string names = 1[json_name = "names", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListSecretRequest::_internal_names_size() const {
  return names_.size();
}
inline int ListSecretRequest::names_size() const {
  return _internal_names_size();
}
inline void ListSecretRequest::clear_names() {
  names_.Clear();
}
inline std::string* ListSecretRequest::add_names() {
  // @@protoc_insertion_point(field_add_mutable:kentik.vault.v202312alpha1.ListSecretRequest.names)
  return _internal_add_names();
}
inline const std::string& ListSecretRequest::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& ListSecretRequest::names(int index) const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.ListSecretRequest.names)
  return _internal_names(index);
}
inline std::string* ListSecretRequest::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.vault.v202312alpha1.ListSecretRequest.names)
  return names_.Mutable(index);
}
inline void ListSecretRequest::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.ListSecretRequest.names)
  names_.Mutable(index)->assign(value);
}
inline void ListSecretRequest::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.ListSecretRequest.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void ListSecretRequest::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.vault.v202312alpha1.ListSecretRequest.names)
}
inline void ListSecretRequest::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.vault.v202312alpha1.ListSecretRequest.names)
}
inline std::string* ListSecretRequest::_internal_add_names() {
  return names_.Add();
}
inline void ListSecretRequest::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.vault.v202312alpha1.ListSecretRequest.names)
}
inline void ListSecretRequest::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.vault.v202312alpha1.ListSecretRequest.names)
}
inline void ListSecretRequest::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.vault.v202312alpha1.ListSecretRequest.names)
}
inline void ListSecretRequest::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.vault.v202312alpha1.ListSecretRequest.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListSecretRequest::names() const {
  // @@protoc_insertion_point(field_list:kentik.vault.v202312alpha1.ListSecretRequest.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListSecretRequest::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:kentik.vault.v202312alpha1.ListSecretRequest.names)
  return &names_;
}

// -------------------------------------------------------------------

// ListSecretResponse

// repeated .kentik.vault.v202312alpha1.Secret secrets = 1[json_name = "secrets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListSecretResponse::_internal_secrets_size() const {
  return secrets_.size();
}
inline int ListSecretResponse::secrets_size() const {
  return _internal_secrets_size();
}
inline void ListSecretResponse::clear_secrets() {
  secrets_.Clear();
}
inline ::kentik::vault::v202312alpha1::Secret* ListSecretResponse::mutable_secrets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.vault.v202312alpha1.ListSecretResponse.secrets)
  return secrets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret >*
ListSecretResponse::mutable_secrets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.vault.v202312alpha1.ListSecretResponse.secrets)
  return &secrets_;
}
inline const ::kentik::vault::v202312alpha1::Secret& ListSecretResponse::_internal_secrets(int index) const {
  return secrets_.Get(index);
}
inline const ::kentik::vault::v202312alpha1::Secret& ListSecretResponse::secrets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.ListSecretResponse.secrets)
  return _internal_secrets(index);
}
inline ::kentik::vault::v202312alpha1::Secret* ListSecretResponse::_internal_add_secrets() {
  return secrets_.Add();
}
inline ::kentik::vault::v202312alpha1::Secret* ListSecretResponse::add_secrets() {
  // @@protoc_insertion_point(field_add:kentik.vault.v202312alpha1.ListSecretResponse.secrets)
  return _internal_add_secrets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret >&
ListSecretResponse::secrets() const {
  // @@protoc_insertion_point(field_list:kentik.vault.v202312alpha1.ListSecretResponse.secrets)
  return secrets_;
}

// uint32 invalid_credential_count = 2[json_name = "invalidCredentialCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListSecretResponse::clear_invalid_credential_count() {
  invalid_credential_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSecretResponse::_internal_invalid_credential_count() const {
  return invalid_credential_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListSecretResponse::invalid_credential_count() const {
  // @@protoc_insertion_point(field_get:kentik.vault.v202312alpha1.ListSecretResponse.invalid_credential_count)
  return _internal_invalid_credential_count();
}
inline void ListSecretResponse::_internal_set_invalid_credential_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_credential_count_ = value;
}
inline void ListSecretResponse::set_invalid_credential_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_credential_count(value);
  // @@protoc_insertion_point(field_set:kentik.vault.v202312alpha1.ListSecretResponse.invalid_credential_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202312alpha1
}  // namespace vault
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::vault::v202312alpha1::SecretType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::vault::v202312alpha1::SecretType>() {
  return ::kentik::vault::v202312alpha1::SecretType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fvault_2fv202312alpha1_2fvault_2eproto
