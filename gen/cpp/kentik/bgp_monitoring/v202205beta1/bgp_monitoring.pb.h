// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/bgp_monitoring/v202205beta1/bgp_monitoring.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
#include "kentik/core/v202303/user_info.pb.h"
#include "kentik/net/v202303/bgp_types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[23]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
namespace kentik {
namespace bgp_monitoring {
namespace v202205beta1 {
class BgpHealthSettings;
class BgpHealthSettingsDefaultTypeInternal;
extern BgpHealthSettingsDefaultTypeInternal _BgpHealthSettings_default_instance_;
class BgpMetric;
class BgpMetricDefaultTypeInternal;
extern BgpMetricDefaultTypeInternal _BgpMetric_default_instance_;
class BgpMonitor;
class BgpMonitorDefaultTypeInternal;
extern BgpMonitorDefaultTypeInternal _BgpMonitor_default_instance_;
class BgpMonitorSettings;
class BgpMonitorSettingsDefaultTypeInternal;
extern BgpMonitorSettingsDefaultTypeInternal _BgpMonitorSettings_default_instance_;
class CreateMonitorRequest;
class CreateMonitorRequestDefaultTypeInternal;
extern CreateMonitorRequestDefaultTypeInternal _CreateMonitorRequest_default_instance_;
class CreateMonitorResponse;
class CreateMonitorResponseDefaultTypeInternal;
extern CreateMonitorResponseDefaultTypeInternal _CreateMonitorResponse_default_instance_;
class DeleteMonitorRequest;
class DeleteMonitorRequestDefaultTypeInternal;
extern DeleteMonitorRequestDefaultTypeInternal _DeleteMonitorRequest_default_instance_;
class DeleteMonitorResponse;
class DeleteMonitorResponseDefaultTypeInternal;
extern DeleteMonitorResponseDefaultTypeInternal _DeleteMonitorResponse_default_instance_;
class GetMetricsForTargetRequest;
class GetMetricsForTargetRequestDefaultTypeInternal;
extern GetMetricsForTargetRequestDefaultTypeInternal _GetMetricsForTargetRequest_default_instance_;
class GetMetricsForTargetResponse;
class GetMetricsForTargetResponseDefaultTypeInternal;
extern GetMetricsForTargetResponseDefaultTypeInternal _GetMetricsForTargetResponse_default_instance_;
class GetMonitorRequest;
class GetMonitorRequestDefaultTypeInternal;
extern GetMonitorRequestDefaultTypeInternal _GetMonitorRequest_default_instance_;
class GetMonitorResponse;
class GetMonitorResponseDefaultTypeInternal;
extern GetMonitorResponseDefaultTypeInternal _GetMonitorResponse_default_instance_;
class GetRoutesForTargetRequest;
class GetRoutesForTargetRequestDefaultTypeInternal;
extern GetRoutesForTargetRequestDefaultTypeInternal _GetRoutesForTargetRequest_default_instance_;
class GetRoutesForTargetResponse;
class GetRoutesForTargetResponseDefaultTypeInternal;
extern GetRoutesForTargetResponseDefaultTypeInternal _GetRoutesForTargetResponse_default_instance_;
class GetRoutesForTargetResponse_AsNamesEntry_DoNotUse;
class GetRoutesForTargetResponse_AsNamesEntry_DoNotUseDefaultTypeInternal;
extern GetRoutesForTargetResponse_AsNamesEntry_DoNotUseDefaultTypeInternal _GetRoutesForTargetResponse_AsNamesEntry_DoNotUse_default_instance_;
class ListMonitorsRequest;
class ListMonitorsRequestDefaultTypeInternal;
extern ListMonitorsRequestDefaultTypeInternal _ListMonitorsRequest_default_instance_;
class ListMonitorsResponse;
class ListMonitorsResponseDefaultTypeInternal;
extern ListMonitorsResponseDefaultTypeInternal _ListMonitorsResponse_default_instance_;
class Nlri;
class NlriDefaultTypeInternal;
extern NlriDefaultTypeInternal _Nlri_default_instance_;
class RouteInfo;
class RouteInfoDefaultTypeInternal;
extern RouteInfoDefaultTypeInternal _RouteInfo_default_instance_;
class SetMonitorStatusRequest;
class SetMonitorStatusRequestDefaultTypeInternal;
extern SetMonitorStatusRequestDefaultTypeInternal _SetMonitorStatusRequest_default_instance_;
class SetMonitorStatusResponse;
class SetMonitorStatusResponseDefaultTypeInternal;
extern SetMonitorStatusResponseDefaultTypeInternal _SetMonitorStatusResponse_default_instance_;
class UpdateMonitorRequest;
class UpdateMonitorRequestDefaultTypeInternal;
extern UpdateMonitorRequestDefaultTypeInternal _UpdateMonitorRequest_default_instance_;
class UpdateMonitorResponse;
class UpdateMonitorResponseDefaultTypeInternal;
extern UpdateMonitorResponseDefaultTypeInternal _UpdateMonitorResponse_default_instance_;
}  // namespace v202205beta1
}  // namespace bgp_monitoring
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::BgpMetric* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMetric>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMonitor>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::CreateMonitorRequest* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::CreateMonitorRequest>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::CreateMonitorResponse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::CreateMonitorResponse>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::DeleteMonitorRequest* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::DeleteMonitorRequest>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::DeleteMonitorResponse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::DeleteMonitorResponse>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::GetMetricsForTargetRequest* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::GetMetricsForTargetRequest>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::GetMetricsForTargetResponse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::GetMetricsForTargetResponse>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::GetMonitorRequest* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::GetMonitorRequest>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::GetMonitorResponse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::GetMonitorResponse>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::GetRoutesForTargetRequest* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::GetRoutesForTargetRequest>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::GetRoutesForTargetResponse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::GetRoutesForTargetResponse>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::GetRoutesForTargetResponse_AsNamesEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::GetRoutesForTargetResponse_AsNamesEntry_DoNotUse>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::ListMonitorsRequest* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::ListMonitorsRequest>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::ListMonitorsResponse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::ListMonitorsResponse>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::Nlri* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::Nlri>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::RouteInfo* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::RouteInfo>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::SetMonitorStatusRequest* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::SetMonitorStatusRequest>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::SetMonitorStatusResponse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::SetMonitorStatusResponse>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::UpdateMonitorRequest* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::UpdateMonitorRequest>(Arena*);
template<> ::kentik::bgp_monitoring::v202205beta1::UpdateMonitorResponse* Arena::CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::UpdateMonitorResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace bgp_monitoring {
namespace v202205beta1 {

enum BgpMonitorStatus : int {
  BGP_MONITOR_STATUS_UNSPECIFIED = 0,
  BGP_MONITOR_STATUS_ACTIVE = 1,
  BGP_MONITOR_STATUS_PAUSED = 2,
  BGP_MONITOR_STATUS_DELETED = 3,
  BgpMonitorStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BgpMonitorStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BgpMonitorStatus_IsValid(int value);
constexpr BgpMonitorStatus BgpMonitorStatus_MIN = BGP_MONITOR_STATUS_UNSPECIFIED;
constexpr BgpMonitorStatus BgpMonitorStatus_MAX = BGP_MONITOR_STATUS_DELETED;
constexpr int BgpMonitorStatus_ARRAYSIZE = BgpMonitorStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpMonitorStatus_descriptor();
template<typename T>
inline const std::string& BgpMonitorStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BgpMonitorStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BgpMonitorStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BgpMonitorStatus_descriptor(), enum_t_value);
}
inline bool BgpMonitorStatus_Parse(
    const std::string& name, BgpMonitorStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BgpMonitorStatus>(
    BgpMonitorStatus_descriptor(), name, value);
}
enum BgpMetricType : int {
  BGP_METRIC_TYPE_UNSPECIFIED = 0,
  BGP_METRIC_TYPE_REACHABILITY = 1,
  BGP_METRIC_TYPE_PATH_CHANGES = 2,
  BgpMetricType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BgpMetricType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BgpMetricType_IsValid(int value);
constexpr BgpMetricType BgpMetricType_MIN = BGP_METRIC_TYPE_UNSPECIFIED;
constexpr BgpMetricType BgpMetricType_MAX = BGP_METRIC_TYPE_PATH_CHANGES;
constexpr int BgpMetricType_ARRAYSIZE = BgpMetricType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BgpMetricType_descriptor();
template<typename T>
inline const std::string& BgpMetricType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BgpMetricType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BgpMetricType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BgpMetricType_descriptor(), enum_t_value);
}
inline bool BgpMetricType_Parse(
    const std::string& name, BgpMetricType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BgpMetricType>(
    BgpMetricType_descriptor(), name, value);
}
// ===================================================================

class Nlri PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.Nlri) */ {
 public:
  inline Nlri() : Nlri(nullptr) {};
  virtual ~Nlri();

  Nlri(const Nlri& from);
  Nlri(Nlri&& from) noexcept
    : Nlri() {
    *this = ::std::move(from);
  }

  inline Nlri& operator=(const Nlri& from) {
    CopyFrom(from);
    return *this;
  }
  inline Nlri& operator=(Nlri&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Nlri& default_instance();

  enum TypeCase {
    kPrefix = 3,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Nlri* internal_default_instance() {
    return reinterpret_cast<const Nlri*>(
               &_Nlri_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Nlri& a, Nlri& b) {
    a.Swap(&b);
  }
  inline void Swap(Nlri* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Nlri* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Nlri* New() const final {
    return CreateMaybeMessage<Nlri>(nullptr);
  }

  Nlri* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Nlri>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Nlri& from);
  void MergeFrom(const Nlri& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Nlri* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.Nlri";
  }
  protected:
  explicit Nlri(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAfiFieldNumber = 1,
    kSafiFieldNumber = 2,
    kPrefixFieldNumber = 3,
  };
  // .kentik.net.v202303.Afi afi = 1[json_name = "afi"];
  void clear_afi();
  ::kentik::net::v202303::Afi afi() const;
  void set_afi(::kentik::net::v202303::Afi value);
  private:
  ::kentik::net::v202303::Afi _internal_afi() const;
  void _internal_set_afi(::kentik::net::v202303::Afi value);
  public:

  // .kentik.net.v202303.Safi safi = 2[json_name = "safi"];
  void clear_safi();
  ::kentik::net::v202303::Safi safi() const;
  void set_safi(::kentik::net::v202303::Safi value);
  private:
  ::kentik::net::v202303::Safi _internal_safi() const;
  void _internal_set_safi(::kentik::net::v202303::Safi value);
  public:

  // string prefix = 3[json_name = "prefix"];
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const std::string& prefix() const;
  void set_prefix(const std::string& value);
  void set_prefix(std::string&& value);
  void set_prefix(const char* value);
  void set_prefix(const char* value, size_t size);
  std::string* mutable_prefix();
  std::string* release_prefix();
  void set_allocated_prefix(std::string* prefix);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prefix();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prefix(
      std::string* prefix);
  private:
  const std::string& _internal_prefix() const;
  void _internal_set_prefix(const std::string& value);
  std::string* _internal_mutable_prefix();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.Nlri)
 private:
  class _Internal;
  void set_has_prefix();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int afi_;
  int safi_;
  union TypeUnion {
    TypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefix_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class BgpHealthSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.BgpHealthSettings) */ {
 public:
  inline BgpHealthSettings() : BgpHealthSettings(nullptr) {};
  virtual ~BgpHealthSettings();

  BgpHealthSettings(const BgpHealthSettings& from);
  BgpHealthSettings(BgpHealthSettings&& from) noexcept
    : BgpHealthSettings() {
    *this = ::std::move(from);
  }

  inline BgpHealthSettings& operator=(const BgpHealthSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BgpHealthSettings& operator=(BgpHealthSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BgpHealthSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BgpHealthSettings* internal_default_instance() {
    return reinterpret_cast<const BgpHealthSettings*>(
               &_BgpHealthSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BgpHealthSettings& a, BgpHealthSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(BgpHealthSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BgpHealthSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BgpHealthSettings* New() const final {
    return CreateMaybeMessage<BgpHealthSettings>(nullptr);
  }

  BgpHealthSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BgpHealthSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BgpHealthSettings& from);
  void MergeFrom(const BgpHealthSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BgpHealthSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.BgpHealthSettings";
  }
  protected:
  explicit BgpHealthSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReachabilityWarningFieldNumber = 1,
    kReachabilityCriticalFieldNumber = 2,
  };
  // float reachability_warning = 1[json_name = "reachabilityWarning"];
  void clear_reachability_warning();
  float reachability_warning() const;
  void set_reachability_warning(float value);
  private:
  float _internal_reachability_warning() const;
  void _internal_set_reachability_warning(float value);
  public:

  // float reachability_critical = 2[json_name = "reachabilityCritical"];
  void clear_reachability_critical();
  float reachability_critical() const;
  void set_reachability_critical(float value);
  private:
  float _internal_reachability_critical() const;
  void _internal_set_reachability_critical(float value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.BgpHealthSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float reachability_warning_;
  float reachability_critical_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class BgpMonitorSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings) */ {
 public:
  inline BgpMonitorSettings() : BgpMonitorSettings(nullptr) {};
  virtual ~BgpMonitorSettings();

  BgpMonitorSettings(const BgpMonitorSettings& from);
  BgpMonitorSettings(BgpMonitorSettings&& from) noexcept
    : BgpMonitorSettings() {
    *this = ::std::move(from);
  }

  inline BgpMonitorSettings& operator=(const BgpMonitorSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BgpMonitorSettings& operator=(BgpMonitorSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BgpMonitorSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BgpMonitorSettings* internal_default_instance() {
    return reinterpret_cast<const BgpMonitorSettings*>(
               &_BgpMonitorSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BgpMonitorSettings& a, BgpMonitorSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(BgpMonitorSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BgpMonitorSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BgpMonitorSettings* New() const final {
    return CreateMaybeMessage<BgpMonitorSettings>(nullptr);
  }

  BgpMonitorSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BgpMonitorSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BgpMonitorSettings& from);
  void MergeFrom(const BgpMonitorSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BgpMonitorSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings";
  }
  protected:
  explicit BgpMonitorSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowedAsnsFieldNumber = 1,
    kTargetsFieldNumber = 2,
    kNotificationChannelsFieldNumber = 6,
    kHealthSettingsFieldNumber = 5,
    kCheckRpkiFieldNumber = 3,
    kIncludeCoveredPrefixesFieldNumber = 4,
  };
  // repeated uint32 allowed_asns = 1[json_name = "allowedAsns"];
  int allowed_asns_size() const;
  private:
  int _internal_allowed_asns_size() const;
  public:
  void clear_allowed_asns();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_allowed_asns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_allowed_asns() const;
  void _internal_add_allowed_asns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_allowed_asns();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 allowed_asns(int index) const;
  void set_allowed_asns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_allowed_asns(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      allowed_asns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_allowed_asns();

  // repeated .kentik.bgp_monitoring.v202205beta1.Nlri targets = 2[json_name = "targets"];
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  ::kentik::bgp_monitoring::v202205beta1::Nlri* mutable_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::Nlri >*
      mutable_targets();
  private:
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& _internal_targets(int index) const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* _internal_add_targets();
  public:
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& targets(int index) const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* add_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::Nlri >&
      targets() const;

  // repeated string notification_channels = 6[json_name = "notificationChannels"];
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  const std::string& notification_channels(int index) const;
  std::string* mutable_notification_channels(int index);
  void set_notification_channels(int index, const std::string& value);
  void set_notification_channels(int index, std::string&& value);
  void set_notification_channels(int index, const char* value);
  void set_notification_channels(int index, const char* value, size_t size);
  std::string* add_notification_channels();
  void add_notification_channels(const std::string& value);
  void add_notification_channels(std::string&& value);
  void add_notification_channels(const char* value);
  void add_notification_channels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_channels();
  private:
  const std::string& _internal_notification_channels(int index) const;
  std::string* _internal_add_notification_channels();
  public:

  // .kentik.bgp_monitoring.v202205beta1.BgpHealthSettings health_settings = 5[json_name = "healthSettings"];
  bool has_health_settings() const;
  private:
  bool _internal_has_health_settings() const;
  public:
  void clear_health_settings();
  const ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings& health_settings() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* release_health_settings();
  ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* mutable_health_settings();
  void set_allocated_health_settings(::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* health_settings);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings& _internal_health_settings() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* _internal_mutable_health_settings();
  public:
  void unsafe_arena_set_allocated_health_settings(
      ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* health_settings);
  ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* unsafe_arena_release_health_settings();

  // bool check_rpki = 3[json_name = "checkRpki"];
  void clear_check_rpki();
  bool check_rpki() const;
  void set_check_rpki(bool value);
  private:
  bool _internal_check_rpki() const;
  void _internal_set_check_rpki(bool value);
  public:

  // bool include_covered_prefixes = 4[json_name = "includeCoveredPrefixes"];
  void clear_include_covered_prefixes();
  bool include_covered_prefixes() const;
  void set_include_covered_prefixes(bool value);
  private:
  bool _internal_include_covered_prefixes() const;
  void _internal_set_include_covered_prefixes(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > allowed_asns_;
  mutable std::atomic<int> _allowed_asns_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::Nlri > targets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_channels_;
  ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* health_settings_;
  bool check_rpki_;
  bool include_covered_prefixes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class BgpMonitor PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.BgpMonitor) */ {
 public:
  inline BgpMonitor() : BgpMonitor(nullptr) {};
  virtual ~BgpMonitor();

  BgpMonitor(const BgpMonitor& from);
  BgpMonitor(BgpMonitor&& from) noexcept
    : BgpMonitor() {
    *this = ::std::move(from);
  }

  inline BgpMonitor& operator=(const BgpMonitor& from) {
    CopyFrom(from);
    return *this;
  }
  inline BgpMonitor& operator=(BgpMonitor&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BgpMonitor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BgpMonitor* internal_default_instance() {
    return reinterpret_cast<const BgpMonitor*>(
               &_BgpMonitor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BgpMonitor& a, BgpMonitor& b) {
    a.Swap(&b);
  }
  inline void Swap(BgpMonitor* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BgpMonitor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BgpMonitor* New() const final {
    return CreateMaybeMessage<BgpMonitor>(nullptr);
  }

  BgpMonitor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BgpMonitor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BgpMonitor& from);
  void MergeFrom(const BgpMonitor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BgpMonitor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.BgpMonitor";
  }
  protected:
  explicit BgpMonitor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 9,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kSettingsFieldNumber = 4,
    kCdateFieldNumber = 5,
    kEdateFieldNumber = 6,
    kCreatedByFieldNumber = 7,
    kLastUpdatedByFieldNumber = 8,
    kStatusFieldNumber = 3,
  };
  // repeated string labels = 9[json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings settings = 4[json_name = "settings"];
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings& settings() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* release_settings();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* mutable_settings();
  void set_allocated_settings(::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* settings);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings& _internal_settings() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* settings);
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* unsafe_arena_release_settings();

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate"];
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 6[json_name = "edate"];
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // .kentik.core.v202303.UserInfo created_by = 7[json_name = "createdBy"];
  bool has_created_by() const;
  private:
  bool _internal_has_created_by() const;
  public:
  void clear_created_by();
  const ::kentik::core::v202303::UserInfo& created_by() const;
  ::kentik::core::v202303::UserInfo* release_created_by();
  ::kentik::core::v202303::UserInfo* mutable_created_by();
  void set_allocated_created_by(::kentik::core::v202303::UserInfo* created_by);
  private:
  const ::kentik::core::v202303::UserInfo& _internal_created_by() const;
  ::kentik::core::v202303::UserInfo* _internal_mutable_created_by();
  public:
  void unsafe_arena_set_allocated_created_by(
      ::kentik::core::v202303::UserInfo* created_by);
  ::kentik::core::v202303::UserInfo* unsafe_arena_release_created_by();

  // .kentik.core.v202303.UserInfo last_updated_by = 8[json_name = "lastUpdatedBy"];
  bool has_last_updated_by() const;
  private:
  bool _internal_has_last_updated_by() const;
  public:
  void clear_last_updated_by();
  const ::kentik::core::v202303::UserInfo& last_updated_by() const;
  ::kentik::core::v202303::UserInfo* release_last_updated_by();
  ::kentik::core::v202303::UserInfo* mutable_last_updated_by();
  void set_allocated_last_updated_by(::kentik::core::v202303::UserInfo* last_updated_by);
  private:
  const ::kentik::core::v202303::UserInfo& _internal_last_updated_by() const;
  ::kentik::core::v202303::UserInfo* _internal_mutable_last_updated_by();
  public:
  void unsafe_arena_set_allocated_last_updated_by(
      ::kentik::core::v202303::UserInfo* last_updated_by);
  ::kentik::core::v202303::UserInfo* unsafe_arena_release_last_updated_by();

  // .kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus status = 3[json_name = "status"];
  void clear_status();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus status() const;
  void set_status(::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus value);
  private:
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus _internal_status() const;
  void _internal_set_status(::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.BgpMonitor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* settings_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  ::kentik::core::v202303::UserInfo* created_by_;
  ::kentik::core::v202303::UserInfo* last_updated_by_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class RouteInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.RouteInfo) */ {
 public:
  inline RouteInfo() : RouteInfo(nullptr) {};
  virtual ~RouteInfo();

  RouteInfo(const RouteInfo& from);
  RouteInfo(RouteInfo&& from) noexcept
    : RouteInfo() {
    *this = ::std::move(from);
  }

  inline RouteInfo& operator=(const RouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RouteInfo& operator=(RouteInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RouteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RouteInfo* internal_default_instance() {
    return reinterpret_cast<const RouteInfo*>(
               &_RouteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RouteInfo& a, RouteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RouteInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RouteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RouteInfo* New() const final {
    return CreateMaybeMessage<RouteInfo>(nullptr);
  }

  RouteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RouteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RouteInfo& from);
  void MergeFrom(const RouteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RouteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.RouteInfo";
  }
  protected:
  explicit RouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsPathFieldNumber = 3,
    kNexthopFieldNumber = 6,
    kNlriFieldNumber = 1,
    kVantagePointFieldNumber = 4,
    kOriginAsnFieldNumber = 2,
    kRpkiStatusFieldNumber = 5,
  };
  // repeated string as_path = 3[json_name = "asPath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int as_path_size() const;
  private:
  int _internal_as_path_size() const;
  public:
  void clear_as_path();
  const std::string& as_path(int index) const;
  std::string* mutable_as_path(int index);
  void set_as_path(int index, const std::string& value);
  void set_as_path(int index, std::string&& value);
  void set_as_path(int index, const char* value);
  void set_as_path(int index, const char* value, size_t size);
  std::string* add_as_path();
  void add_as_path(const std::string& value);
  void add_as_path(std::string&& value);
  void add_as_path(const char* value);
  void add_as_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& as_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_as_path();
  private:
  const std::string& _internal_as_path(int index) const;
  std::string* _internal_add_as_path();
  public:

  // string nexthop = 6[json_name = "nexthop"];
  void clear_nexthop();
  const std::string& nexthop() const;
  void set_nexthop(const std::string& value);
  void set_nexthop(std::string&& value);
  void set_nexthop(const char* value);
  void set_nexthop(const char* value, size_t size);
  std::string* mutable_nexthop();
  std::string* release_nexthop();
  void set_allocated_nexthop(std::string* nexthop);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nexthop();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nexthop(
      std::string* nexthop);
  private:
  const std::string& _internal_nexthop() const;
  void _internal_set_nexthop(const std::string& value);
  std::string* _internal_mutable_nexthop();
  public:

  // .kentik.bgp_monitoring.v202205beta1.Nlri nlri = 1[json_name = "nlri"];
  bool has_nlri() const;
  private:
  bool _internal_has_nlri() const;
  public:
  void clear_nlri();
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& nlri() const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* release_nlri();
  ::kentik::bgp_monitoring::v202205beta1::Nlri* mutable_nlri();
  void set_allocated_nlri(::kentik::bgp_monitoring::v202205beta1::Nlri* nlri);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& _internal_nlri() const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* _internal_mutable_nlri();
  public:
  void unsafe_arena_set_allocated_nlri(
      ::kentik::bgp_monitoring::v202205beta1::Nlri* nlri);
  ::kentik::bgp_monitoring::v202205beta1::Nlri* unsafe_arena_release_nlri();

  // .kentik.net.v202303.VantagePoint vantage_point = 4[json_name = "vantagePoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_vantage_point() const;
  private:
  bool _internal_has_vantage_point() const;
  public:
  void clear_vantage_point();
  const ::kentik::net::v202303::VantagePoint& vantage_point() const;
  ::kentik::net::v202303::VantagePoint* release_vantage_point();
  ::kentik::net::v202303::VantagePoint* mutable_vantage_point();
  void set_allocated_vantage_point(::kentik::net::v202303::VantagePoint* vantage_point);
  private:
  const ::kentik::net::v202303::VantagePoint& _internal_vantage_point() const;
  ::kentik::net::v202303::VantagePoint* _internal_mutable_vantage_point();
  public:
  void unsafe_arena_set_allocated_vantage_point(
      ::kentik::net::v202303::VantagePoint* vantage_point);
  ::kentik::net::v202303::VantagePoint* unsafe_arena_release_vantage_point();

  // uint32 origin_asn = 2[json_name = "originAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_origin_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 origin_asn() const;
  void set_origin_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_origin_asn() const;
  void _internal_set_origin_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.net.v202303.RpkiStatus rpki_status = 5[json_name = "rpkiStatus"];
  void clear_rpki_status();
  ::kentik::net::v202303::RpkiStatus rpki_status() const;
  void set_rpki_status(::kentik::net::v202303::RpkiStatus value);
  private:
  ::kentik::net::v202303::RpkiStatus _internal_rpki_status() const;
  void _internal_set_rpki_status(::kentik::net::v202303::RpkiStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.RouteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> as_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nexthop_;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* nlri_;
  ::kentik::net::v202303::VantagePoint* vantage_point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 origin_asn_;
  int rpki_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class BgpMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.BgpMetric) */ {
 public:
  inline BgpMetric() : BgpMetric(nullptr) {};
  virtual ~BgpMetric();

  BgpMetric(const BgpMetric& from);
  BgpMetric(BgpMetric&& from) noexcept
    : BgpMetric() {
    *this = ::std::move(from);
  }

  inline BgpMetric& operator=(const BgpMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline BgpMetric& operator=(BgpMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BgpMetric& default_instance();

  enum TypeCase {
    kReachability = 3,
    kPathChanges = 5,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BgpMetric* internal_default_instance() {
    return reinterpret_cast<const BgpMetric*>(
               &_BgpMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BgpMetric& a, BgpMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(BgpMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BgpMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BgpMetric* New() const final {
    return CreateMaybeMessage<BgpMetric>(nullptr);
  }

  BgpMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BgpMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BgpMetric& from);
  void MergeFrom(const BgpMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BgpMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.BgpMetric";
  }
  protected:
  explicit BgpMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kNlriFieldNumber = 2,
    kReachabilityFieldNumber = 3,
    kPathChangesFieldNumber = 5,
  };
  // .google.protobuf.Timestamp timestamp = 1[json_name = "timestamp"];
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_timestamp();

  // .kentik.bgp_monitoring.v202205beta1.Nlri nlri = 2[json_name = "nlri"];
  bool has_nlri() const;
  private:
  bool _internal_has_nlri() const;
  public:
  void clear_nlri();
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& nlri() const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* release_nlri();
  ::kentik::bgp_monitoring::v202205beta1::Nlri* mutable_nlri();
  void set_allocated_nlri(::kentik::bgp_monitoring::v202205beta1::Nlri* nlri);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& _internal_nlri() const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* _internal_mutable_nlri();
  public:
  void unsafe_arena_set_allocated_nlri(
      ::kentik::bgp_monitoring::v202205beta1::Nlri* nlri);
  ::kentik::bgp_monitoring::v202205beta1::Nlri* unsafe_arena_release_nlri();

  // float reachability = 3[json_name = "reachability"];
  private:
  bool _internal_has_reachability() const;
  public:
  void clear_reachability();
  float reachability() const;
  void set_reachability(float value);
  private:
  float _internal_reachability() const;
  void _internal_set_reachability(float value);
  public:

  // uint32 path_changes = 5[json_name = "pathChanges"];
  private:
  bool _internal_has_path_changes() const;
  public:
  void clear_path_changes();
  ::PROTOBUF_NAMESPACE_ID::uint32 path_changes() const;
  void set_path_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_path_changes() const;
  void _internal_set_path_changes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.BgpMetric)
 private:
  class _Internal;
  void set_has_reachability();
  void set_has_path_changes();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* nlri_;
  union TypeUnion {
    TypeUnion() {}
    float reachability_;
    ::PROTOBUF_NAMESPACE_ID::uint32 path_changes_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class ListMonitorsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.ListMonitorsRequest) */ {
 public:
  inline ListMonitorsRequest() : ListMonitorsRequest(nullptr) {};
  virtual ~ListMonitorsRequest();

  ListMonitorsRequest(const ListMonitorsRequest& from);
  ListMonitorsRequest(ListMonitorsRequest&& from) noexcept
    : ListMonitorsRequest() {
    *this = ::std::move(from);
  }

  inline ListMonitorsRequest& operator=(const ListMonitorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMonitorsRequest& operator=(ListMonitorsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMonitorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMonitorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMonitorsRequest*>(
               &_ListMonitorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListMonitorsRequest& a, ListMonitorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMonitorsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMonitorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMonitorsRequest* New() const final {
    return CreateMaybeMessage<ListMonitorsRequest>(nullptr);
  }

  ListMonitorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMonitorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMonitorsRequest& from);
  void MergeFrom(const ListMonitorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMonitorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.ListMonitorsRequest";
  }
  protected:
  explicit ListMonitorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.ListMonitorsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class ListMonitorsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse) */ {
 public:
  inline ListMonitorsResponse() : ListMonitorsResponse(nullptr) {};
  virtual ~ListMonitorsResponse();

  ListMonitorsResponse(const ListMonitorsResponse& from);
  ListMonitorsResponse(ListMonitorsResponse&& from) noexcept
    : ListMonitorsResponse() {
    *this = ::std::move(from);
  }

  inline ListMonitorsResponse& operator=(const ListMonitorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMonitorsResponse& operator=(ListMonitorsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMonitorsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMonitorsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMonitorsResponse*>(
               &_ListMonitorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListMonitorsResponse& a, ListMonitorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMonitorsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMonitorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMonitorsResponse* New() const final {
    return CreateMaybeMessage<ListMonitorsResponse>(nullptr);
  }

  ListMonitorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMonitorsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMonitorsResponse& from);
  void MergeFrom(const ListMonitorsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMonitorsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse";
  }
  protected:
  explicit ListMonitorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitors = 1[json_name = "monitors"];
  int monitors_size() const;
  private:
  int _internal_monitors_size() const;
  public:
  void clear_monitors();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* mutable_monitors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMonitor >*
      mutable_monitors();
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& _internal_monitors(int index) const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* _internal_add_monitors();
  public:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& monitors(int index) const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* add_monitors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMonitor >&
      monitors() const;

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMonitor > monitors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class CreateMonitorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest) */ {
 public:
  inline CreateMonitorRequest() : CreateMonitorRequest(nullptr) {};
  virtual ~CreateMonitorRequest();

  CreateMonitorRequest(const CreateMonitorRequest& from);
  CreateMonitorRequest(CreateMonitorRequest&& from) noexcept
    : CreateMonitorRequest() {
    *this = ::std::move(from);
  }

  inline CreateMonitorRequest& operator=(const CreateMonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMonitorRequest& operator=(CreateMonitorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMonitorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMonitorRequest* internal_default_instance() {
    return reinterpret_cast<const CreateMonitorRequest*>(
               &_CreateMonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateMonitorRequest& a, CreateMonitorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMonitorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMonitorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMonitorRequest* New() const final {
    return CreateMaybeMessage<CreateMonitorRequest>(nullptr);
  }

  CreateMonitorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMonitorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMonitorRequest& from);
  void MergeFrom(const CreateMonitorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMonitorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest";
  }
  protected:
  explicit CreateMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorFieldNumber = 1,
  };
  // .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
  bool has_monitor() const;
  private:
  bool _internal_has_monitor() const;
  public:
  void clear_monitor();
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* release_monitor();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* mutable_monitor();
  void set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& _internal_monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* _internal_mutable_monitor();
  public:
  void unsafe_arena_set_allocated_monitor(
      ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* unsafe_arena_release_monitor();

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class CreateMonitorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse) */ {
 public:
  inline CreateMonitorResponse() : CreateMonitorResponse(nullptr) {};
  virtual ~CreateMonitorResponse();

  CreateMonitorResponse(const CreateMonitorResponse& from);
  CreateMonitorResponse(CreateMonitorResponse&& from) noexcept
    : CreateMonitorResponse() {
    *this = ::std::move(from);
  }

  inline CreateMonitorResponse& operator=(const CreateMonitorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateMonitorResponse& operator=(CreateMonitorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateMonitorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateMonitorResponse* internal_default_instance() {
    return reinterpret_cast<const CreateMonitorResponse*>(
               &_CreateMonitorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CreateMonitorResponse& a, CreateMonitorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateMonitorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateMonitorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateMonitorResponse* New() const final {
    return CreateMaybeMessage<CreateMonitorResponse>(nullptr);
  }

  CreateMonitorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateMonitorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateMonitorResponse& from);
  void MergeFrom(const CreateMonitorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateMonitorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse";
  }
  protected:
  explicit CreateMonitorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorFieldNumber = 1,
  };
  // .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
  bool has_monitor() const;
  private:
  bool _internal_has_monitor() const;
  public:
  void clear_monitor();
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* release_monitor();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* mutable_monitor();
  void set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& _internal_monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* _internal_mutable_monitor();
  public:
  void unsafe_arena_set_allocated_monitor(
      ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* unsafe_arena_release_monitor();

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class GetMonitorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest) */ {
 public:
  inline GetMonitorRequest() : GetMonitorRequest(nullptr) {};
  virtual ~GetMonitorRequest();

  GetMonitorRequest(const GetMonitorRequest& from);
  GetMonitorRequest(GetMonitorRequest&& from) noexcept
    : GetMonitorRequest() {
    *this = ::std::move(from);
  }

  inline GetMonitorRequest& operator=(const GetMonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMonitorRequest& operator=(GetMonitorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMonitorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMonitorRequest* internal_default_instance() {
    return reinterpret_cast<const GetMonitorRequest*>(
               &_GetMonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetMonitorRequest& a, GetMonitorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMonitorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMonitorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMonitorRequest* New() const final {
    return CreateMaybeMessage<GetMonitorRequest>(nullptr);
  }

  GetMonitorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMonitorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMonitorRequest& from);
  void MergeFrom(const GetMonitorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMonitorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.GetMonitorRequest";
  }
  protected:
  explicit GetMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class GetMonitorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.GetMonitorResponse) */ {
 public:
  inline GetMonitorResponse() : GetMonitorResponse(nullptr) {};
  virtual ~GetMonitorResponse();

  GetMonitorResponse(const GetMonitorResponse& from);
  GetMonitorResponse(GetMonitorResponse&& from) noexcept
    : GetMonitorResponse() {
    *this = ::std::move(from);
  }

  inline GetMonitorResponse& operator=(const GetMonitorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMonitorResponse& operator=(GetMonitorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMonitorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMonitorResponse* internal_default_instance() {
    return reinterpret_cast<const GetMonitorResponse*>(
               &_GetMonitorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetMonitorResponse& a, GetMonitorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMonitorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMonitorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMonitorResponse* New() const final {
    return CreateMaybeMessage<GetMonitorResponse>(nullptr);
  }

  GetMonitorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMonitorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMonitorResponse& from);
  void MergeFrom(const GetMonitorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMonitorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.GetMonitorResponse";
  }
  protected:
  explicit GetMonitorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorFieldNumber = 1,
  };
  // .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
  bool has_monitor() const;
  private:
  bool _internal_has_monitor() const;
  public:
  void clear_monitor();
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* release_monitor();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* mutable_monitor();
  void set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& _internal_monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* _internal_mutable_monitor();
  public:
  void unsafe_arena_set_allocated_monitor(
      ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* unsafe_arena_release_monitor();

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.GetMonitorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class UpdateMonitorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest) */ {
 public:
  inline UpdateMonitorRequest() : UpdateMonitorRequest(nullptr) {};
  virtual ~UpdateMonitorRequest();

  UpdateMonitorRequest(const UpdateMonitorRequest& from);
  UpdateMonitorRequest(UpdateMonitorRequest&& from) noexcept
    : UpdateMonitorRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMonitorRequest& operator=(const UpdateMonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMonitorRequest& operator=(UpdateMonitorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMonitorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMonitorRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMonitorRequest*>(
               &_UpdateMonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateMonitorRequest& a, UpdateMonitorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMonitorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMonitorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMonitorRequest* New() const final {
    return CreateMaybeMessage<UpdateMonitorRequest>(nullptr);
  }

  UpdateMonitorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMonitorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMonitorRequest& from);
  void MergeFrom(const UpdateMonitorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMonitorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest";
  }
  protected:
  explicit UpdateMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorFieldNumber = 1,
  };
  // .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
  bool has_monitor() const;
  private:
  bool _internal_has_monitor() const;
  public:
  void clear_monitor();
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* release_monitor();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* mutable_monitor();
  void set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& _internal_monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* _internal_mutable_monitor();
  public:
  void unsafe_arena_set_allocated_monitor(
      ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* unsafe_arena_release_monitor();

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class UpdateMonitorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse) */ {
 public:
  inline UpdateMonitorResponse() : UpdateMonitorResponse(nullptr) {};
  virtual ~UpdateMonitorResponse();

  UpdateMonitorResponse(const UpdateMonitorResponse& from);
  UpdateMonitorResponse(UpdateMonitorResponse&& from) noexcept
    : UpdateMonitorResponse() {
    *this = ::std::move(from);
  }

  inline UpdateMonitorResponse& operator=(const UpdateMonitorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMonitorResponse& operator=(UpdateMonitorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMonitorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMonitorResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateMonitorResponse*>(
               &_UpdateMonitorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateMonitorResponse& a, UpdateMonitorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMonitorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMonitorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMonitorResponse* New() const final {
    return CreateMaybeMessage<UpdateMonitorResponse>(nullptr);
  }

  UpdateMonitorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMonitorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMonitorResponse& from);
  void MergeFrom(const UpdateMonitorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMonitorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse";
  }
  protected:
  explicit UpdateMonitorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonitorFieldNumber = 1,
  };
  // .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
  bool has_monitor() const;
  private:
  bool _internal_has_monitor() const;
  public:
  void clear_monitor();
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* release_monitor();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* mutable_monitor();
  void set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& _internal_monitor() const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* _internal_mutable_monitor();
  public:
  void unsafe_arena_set_allocated_monitor(
      ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor);
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* unsafe_arena_release_monitor();

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class DeleteMonitorRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest) */ {
 public:
  inline DeleteMonitorRequest() : DeleteMonitorRequest(nullptr) {};
  virtual ~DeleteMonitorRequest();

  DeleteMonitorRequest(const DeleteMonitorRequest& from);
  DeleteMonitorRequest(DeleteMonitorRequest&& from) noexcept
    : DeleteMonitorRequest() {
    *this = ::std::move(from);
  }

  inline DeleteMonitorRequest& operator=(const DeleteMonitorRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMonitorRequest& operator=(DeleteMonitorRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMonitorRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMonitorRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteMonitorRequest*>(
               &_DeleteMonitorRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteMonitorRequest& a, DeleteMonitorRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMonitorRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMonitorRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMonitorRequest* New() const final {
    return CreateMaybeMessage<DeleteMonitorRequest>(nullptr);
  }

  DeleteMonitorRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMonitorRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMonitorRequest& from);
  void MergeFrom(const DeleteMonitorRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMonitorRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest";
  }
  protected:
  explicit DeleteMonitorRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class DeleteMonitorResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.DeleteMonitorResponse) */ {
 public:
  inline DeleteMonitorResponse() : DeleteMonitorResponse(nullptr) {};
  virtual ~DeleteMonitorResponse();

  DeleteMonitorResponse(const DeleteMonitorResponse& from);
  DeleteMonitorResponse(DeleteMonitorResponse&& from) noexcept
    : DeleteMonitorResponse() {
    *this = ::std::move(from);
  }

  inline DeleteMonitorResponse& operator=(const DeleteMonitorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMonitorResponse& operator=(DeleteMonitorResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteMonitorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteMonitorResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteMonitorResponse*>(
               &_DeleteMonitorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeleteMonitorResponse& a, DeleteMonitorResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMonitorResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMonitorResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteMonitorResponse* New() const final {
    return CreateMaybeMessage<DeleteMonitorResponse>(nullptr);
  }

  DeleteMonitorResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteMonitorResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteMonitorResponse& from);
  void MergeFrom(const DeleteMonitorResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMonitorResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.DeleteMonitorResponse";
  }
  protected:
  explicit DeleteMonitorResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.DeleteMonitorResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class SetMonitorStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest) */ {
 public:
  inline SetMonitorStatusRequest() : SetMonitorStatusRequest(nullptr) {};
  virtual ~SetMonitorStatusRequest();

  SetMonitorStatusRequest(const SetMonitorStatusRequest& from);
  SetMonitorStatusRequest(SetMonitorStatusRequest&& from) noexcept
    : SetMonitorStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetMonitorStatusRequest& operator=(const SetMonitorStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMonitorStatusRequest& operator=(SetMonitorStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMonitorStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMonitorStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetMonitorStatusRequest*>(
               &_SetMonitorStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SetMonitorStatusRequest& a, SetMonitorStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMonitorStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMonitorStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMonitorStatusRequest* New() const final {
    return CreateMaybeMessage<SetMonitorStatusRequest>(nullptr);
  }

  SetMonitorStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMonitorStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMonitorStatusRequest& from);
  void MergeFrom(const SetMonitorStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMonitorStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest";
  }
  protected:
  explicit SetMonitorStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus status = 2[json_name = "status"];
  void clear_status();
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus status() const;
  void set_status(::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus value);
  private:
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus _internal_status() const;
  void _internal_set_status(::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class SetMonitorStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusResponse) */ {
 public:
  inline SetMonitorStatusResponse() : SetMonitorStatusResponse(nullptr) {};
  virtual ~SetMonitorStatusResponse();

  SetMonitorStatusResponse(const SetMonitorStatusResponse& from);
  SetMonitorStatusResponse(SetMonitorStatusResponse&& from) noexcept
    : SetMonitorStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetMonitorStatusResponse& operator=(const SetMonitorStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMonitorStatusResponse& operator=(SetMonitorStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetMonitorStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMonitorStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetMonitorStatusResponse*>(
               &_SetMonitorStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetMonitorStatusResponse& a, SetMonitorStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMonitorStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMonitorStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetMonitorStatusResponse* New() const final {
    return CreateMaybeMessage<SetMonitorStatusResponse>(nullptr);
  }

  SetMonitorStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetMonitorStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetMonitorStatusResponse& from);
  void MergeFrom(const SetMonitorStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMonitorStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.SetMonitorStatusResponse";
  }
  protected:
  explicit SetMonitorStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class GetMetricsForTargetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest) */ {
 public:
  inline GetMetricsForTargetRequest() : GetMetricsForTargetRequest(nullptr) {};
  virtual ~GetMetricsForTargetRequest();

  GetMetricsForTargetRequest(const GetMetricsForTargetRequest& from);
  GetMetricsForTargetRequest(GetMetricsForTargetRequest&& from) noexcept
    : GetMetricsForTargetRequest() {
    *this = ::std::move(from);
  }

  inline GetMetricsForTargetRequest& operator=(const GetMetricsForTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricsForTargetRequest& operator=(GetMetricsForTargetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMetricsForTargetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMetricsForTargetRequest* internal_default_instance() {
    return reinterpret_cast<const GetMetricsForTargetRequest*>(
               &_GetMetricsForTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetMetricsForTargetRequest& a, GetMetricsForTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricsForTargetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetricsForTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMetricsForTargetRequest* New() const final {
    return CreateMaybeMessage<GetMetricsForTargetRequest>(nullptr);
  }

  GetMetricsForTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMetricsForTargetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMetricsForTargetRequest& from);
  void MergeFrom(const GetMetricsForTargetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricsForTargetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest";
  }
  protected:
  explicit GetMetricsForTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 5,
    kStartTimeFieldNumber = 1,
    kEndTimeFieldNumber = 2,
    kTargetFieldNumber = 3,
    kIncludeCoveredFieldNumber = 4,
  };
  // repeated .kentik.bgp_monitoring.v202205beta1.BgpMetricType metrics = 5[json_name = "metrics"];
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  private:
  ::kentik::bgp_monitoring::v202205beta1::BgpMetricType _internal_metrics(int index) const;
  void _internal_add_metrics(::kentik::bgp_monitoring::v202205beta1::BgpMetricType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_metrics();
  public:
  ::kentik::bgp_monitoring::v202205beta1::BgpMetricType metrics(int index) const;
  void set_metrics(int index, ::kentik::bgp_monitoring::v202205beta1::BgpMetricType value);
  void add_metrics(::kentik::bgp_monitoring::v202205beta1::BgpMetricType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& metrics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_metrics();

  // .google.protobuf.Timestamp start_time = 1[json_name = "startTime"];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 2[json_name = "endTime"];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .kentik.bgp_monitoring.v202205beta1.Nlri target = 3[json_name = "target"];
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& target() const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* release_target();
  ::kentik::bgp_monitoring::v202205beta1::Nlri* mutable_target();
  void set_allocated_target(::kentik::bgp_monitoring::v202205beta1::Nlri* target);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& _internal_target() const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::kentik::bgp_monitoring::v202205beta1::Nlri* target);
  ::kentik::bgp_monitoring::v202205beta1::Nlri* unsafe_arena_release_target();

  // bool include_covered = 4[json_name = "includeCovered"];
  void clear_include_covered();
  bool include_covered() const;
  void set_include_covered(bool value);
  private:
  bool _internal_include_covered() const;
  void _internal_set_include_covered(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> metrics_;
  mutable std::atomic<int> _metrics_cached_byte_size_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* target_;
  bool include_covered_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class GetMetricsForTargetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse) */ {
 public:
  inline GetMetricsForTargetResponse() : GetMetricsForTargetResponse(nullptr) {};
  virtual ~GetMetricsForTargetResponse();

  GetMetricsForTargetResponse(const GetMetricsForTargetResponse& from);
  GetMetricsForTargetResponse(GetMetricsForTargetResponse&& from) noexcept
    : GetMetricsForTargetResponse() {
    *this = ::std::move(from);
  }

  inline GetMetricsForTargetResponse& operator=(const GetMetricsForTargetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMetricsForTargetResponse& operator=(GetMetricsForTargetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetMetricsForTargetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetMetricsForTargetResponse* internal_default_instance() {
    return reinterpret_cast<const GetMetricsForTargetResponse*>(
               &_GetMetricsForTargetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetMetricsForTargetResponse& a, GetMetricsForTargetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMetricsForTargetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMetricsForTargetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetMetricsForTargetResponse* New() const final {
    return CreateMaybeMessage<GetMetricsForTargetResponse>(nullptr);
  }

  GetMetricsForTargetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetMetricsForTargetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetMetricsForTargetResponse& from);
  void MergeFrom(const GetMetricsForTargetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMetricsForTargetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse";
  }
  protected:
  explicit GetMetricsForTargetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetricsFieldNumber = 1,
  };
  // repeated .kentik.bgp_monitoring.v202205beta1.BgpMetric metrics = 1[json_name = "metrics"];
  int metrics_size() const;
  private:
  int _internal_metrics_size() const;
  public:
  void clear_metrics();
  ::kentik::bgp_monitoring::v202205beta1::BgpMetric* mutable_metrics(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMetric >*
      mutable_metrics();
  private:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMetric& _internal_metrics(int index) const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMetric* _internal_add_metrics();
  public:
  const ::kentik::bgp_monitoring::v202205beta1::BgpMetric& metrics(int index) const;
  ::kentik::bgp_monitoring::v202205beta1::BgpMetric* add_metrics();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMetric >&
      metrics() const;

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMetric > metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class GetRoutesForTargetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest) */ {
 public:
  inline GetRoutesForTargetRequest() : GetRoutesForTargetRequest(nullptr) {};
  virtual ~GetRoutesForTargetRequest();

  GetRoutesForTargetRequest(const GetRoutesForTargetRequest& from);
  GetRoutesForTargetRequest(GetRoutesForTargetRequest&& from) noexcept
    : GetRoutesForTargetRequest() {
    *this = ::std::move(from);
  }

  inline GetRoutesForTargetRequest& operator=(const GetRoutesForTargetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoutesForTargetRequest& operator=(GetRoutesForTargetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRoutesForTargetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRoutesForTargetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRoutesForTargetRequest*>(
               &_GetRoutesForTargetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetRoutesForTargetRequest& a, GetRoutesForTargetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoutesForTargetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoutesForTargetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRoutesForTargetRequest* New() const final {
    return CreateMaybeMessage<GetRoutesForTargetRequest>(nullptr);
  }

  GetRoutesForTargetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRoutesForTargetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRoutesForTargetRequest& from);
  void MergeFrom(const GetRoutesForTargetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoutesForTargetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest";
  }
  protected:
  explicit GetRoutesForTargetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kTargetFieldNumber = 2,
    kIncludeCoveredFieldNumber = 4,
    kCheckRpkiFieldNumber = 5,
  };
  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .kentik.bgp_monitoring.v202205beta1.Nlri target = 2[json_name = "target"];
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& target() const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* release_target();
  ::kentik::bgp_monitoring::v202205beta1::Nlri* mutable_target();
  void set_allocated_target(::kentik::bgp_monitoring::v202205beta1::Nlri* target);
  private:
  const ::kentik::bgp_monitoring::v202205beta1::Nlri& _internal_target() const;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::kentik::bgp_monitoring::v202205beta1::Nlri* target);
  ::kentik::bgp_monitoring::v202205beta1::Nlri* unsafe_arena_release_target();

  // bool include_covered = 4[json_name = "includeCovered"];
  void clear_include_covered();
  bool include_covered() const;
  void set_include_covered(bool value);
  private:
  bool _internal_include_covered() const;
  void _internal_set_include_covered(bool value);
  public:

  // bool check_rpki = 5[json_name = "checkRpki"];
  void clear_check_rpki();
  bool check_rpki() const;
  void set_check_rpki(bool value);
  private:
  bool _internal_check_rpki() const;
  void _internal_set_check_rpki(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::kentik::bgp_monitoring::v202205beta1::Nlri* target_;
  bool include_covered_;
  bool check_rpki_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// -------------------------------------------------------------------

class GetRoutesForTargetResponse_AsNamesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetRoutesForTargetResponse_AsNamesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetRoutesForTargetResponse_AsNamesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  GetRoutesForTargetResponse_AsNamesEntry_DoNotUse();
  GetRoutesForTargetResponse_AsNamesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetRoutesForTargetResponse_AsNamesEntry_DoNotUse& other);
  static const GetRoutesForTargetResponse_AsNamesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetRoutesForTargetResponse_AsNamesEntry_DoNotUse*>(&_GetRoutesForTargetResponse_AsNamesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.AsNamesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[21];
  }

  public:
};

// -------------------------------------------------------------------

class GetRoutesForTargetResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse) */ {
 public:
  inline GetRoutesForTargetResponse() : GetRoutesForTargetResponse(nullptr) {};
  virtual ~GetRoutesForTargetResponse();

  GetRoutesForTargetResponse(const GetRoutesForTargetResponse& from);
  GetRoutesForTargetResponse(GetRoutesForTargetResponse&& from) noexcept
    : GetRoutesForTargetResponse() {
    *this = ::std::move(from);
  }

  inline GetRoutesForTargetResponse& operator=(const GetRoutesForTargetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRoutesForTargetResponse& operator=(GetRoutesForTargetResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRoutesForTargetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRoutesForTargetResponse* internal_default_instance() {
    return reinterpret_cast<const GetRoutesForTargetResponse*>(
               &_GetRoutesForTargetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetRoutesForTargetResponse& a, GetRoutesForTargetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRoutesForTargetResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRoutesForTargetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRoutesForTargetResponse* New() const final {
    return CreateMaybeMessage<GetRoutesForTargetResponse>(nullptr);
  }

  GetRoutesForTargetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRoutesForTargetResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRoutesForTargetResponse& from);
  void MergeFrom(const GetRoutesForTargetResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRoutesForTargetResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse";
  }
  protected:
  explicit GetRoutesForTargetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto);
    return ::descriptor_table_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRoutesFieldNumber = 1,
    kAsNamesFieldNumber = 5,
  };
  // repeated .kentik.bgp_monitoring.v202205beta1.RouteInfo routes = 1[json_name = "routes"];
  int routes_size() const;
  private:
  int _internal_routes_size() const;
  public:
  void clear_routes();
  ::kentik::bgp_monitoring::v202205beta1::RouteInfo* mutable_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::RouteInfo >*
      mutable_routes();
  private:
  const ::kentik::bgp_monitoring::v202205beta1::RouteInfo& _internal_routes(int index) const;
  ::kentik::bgp_monitoring::v202205beta1::RouteInfo* _internal_add_routes();
  public:
  const ::kentik::bgp_monitoring::v202205beta1::RouteInfo& routes(int index) const;
  ::kentik::bgp_monitoring::v202205beta1::RouteInfo* add_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::RouteInfo >&
      routes() const;

  // map<uint32, string> as_names = 5[json_name = "asNames"];
  int as_names_size() const;
  private:
  int _internal_as_names_size() const;
  public:
  void clear_as_names();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      _internal_as_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      _internal_mutable_as_names();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
      as_names() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
      mutable_as_names();

  // @@protoc_insertion_point(class_scope:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::RouteInfo > routes_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetRoutesForTargetResponse_AsNamesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::uint32, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > as_names_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Nlri

// .kentik.net.v202303.Afi afi = 1[json_name = "afi"];
inline void Nlri::clear_afi() {
  afi_ = 0;
}
inline ::kentik::net::v202303::Afi Nlri::_internal_afi() const {
  return static_cast< ::kentik::net::v202303::Afi >(afi_);
}
inline ::kentik::net::v202303::Afi Nlri::afi() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.Nlri.afi)
  return _internal_afi();
}
inline void Nlri::_internal_set_afi(::kentik::net::v202303::Afi value) {
  
  afi_ = value;
}
inline void Nlri::set_afi(::kentik::net::v202303::Afi value) {
  _internal_set_afi(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.Nlri.afi)
}

// .kentik.net.v202303.Safi safi = 2[json_name = "safi"];
inline void Nlri::clear_safi() {
  safi_ = 0;
}
inline ::kentik::net::v202303::Safi Nlri::_internal_safi() const {
  return static_cast< ::kentik::net::v202303::Safi >(safi_);
}
inline ::kentik::net::v202303::Safi Nlri::safi() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.Nlri.safi)
  return _internal_safi();
}
inline void Nlri::_internal_set_safi(::kentik::net::v202303::Safi value) {
  
  safi_ = value;
}
inline void Nlri::set_safi(::kentik::net::v202303::Safi value) {
  _internal_set_safi(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.Nlri.safi)
}

// string prefix = 3[json_name = "prefix"];
inline bool Nlri::_internal_has_prefix() const {
  return type_case() == kPrefix;
}
inline void Nlri::set_has_prefix() {
  _oneof_case_[0] = kPrefix;
}
inline void Nlri::clear_prefix() {
  if (_internal_has_prefix()) {
    type_.prefix_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
    clear_has_type();
  }
}
inline const std::string& Nlri::prefix() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
  return _internal_prefix();
}
inline void Nlri::set_prefix(const std::string& value) {
  _internal_set_prefix(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
}
inline std::string* Nlri::mutable_prefix() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
  return _internal_mutable_prefix();
}
inline const std::string& Nlri::_internal_prefix() const {
  if (_internal_has_prefix()) {
    return type_.prefix_.Get();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Nlri::_internal_set_prefix(const std::string& value) {
  if (!_internal_has_prefix()) {
    clear_type();
    set_has_prefix();
    type_.prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Nlri::set_prefix(std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
  if (!_internal_has_prefix()) {
    clear_type();
    set_has_prefix();
    type_.prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.prefix_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
}
inline void Nlri::set_prefix(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_prefix()) {
    clear_type();
    set_has_prefix();
    type_.prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.prefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
}
inline void Nlri::set_prefix(const char* value,
                             size_t size) {
  if (!_internal_has_prefix()) {
    clear_type();
    set_has_prefix();
    type_.prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.prefix_.Set(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
}
inline std::string* Nlri::_internal_mutable_prefix() {
  if (!_internal_has_prefix()) {
    clear_type();
    set_has_prefix();
    type_.prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.prefix_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Nlri::release_prefix() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
  if (_internal_has_prefix()) {
    clear_has_type();
    return type_.prefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Nlri::set_allocated_prefix(std::string* prefix) {
  if (has_type()) {
    clear_type();
  }
  if (prefix != nullptr) {
    set_has_prefix();
    type_.prefix_.UnsafeSetDefault(prefix);
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
}
inline std::string* Nlri::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (_internal_has_prefix()) {
    clear_has_type();
    return type_.prefix_.UnsafeArenaRelease(
        &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void Nlri::unsafe_arena_set_allocated_prefix(std::string* prefix) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (!_internal_has_prefix()) {
    type_.prefix_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (prefix) {
    set_has_prefix();
    type_.prefix_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefix, GetArena());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.Nlri.prefix)
}

inline bool Nlri::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void Nlri::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline Nlri::TypeCase Nlri::type_case() const {
  return Nlri::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BgpHealthSettings

// float reachability_warning = 1[json_name = "reachabilityWarning"];
inline void BgpHealthSettings::clear_reachability_warning() {
  reachability_warning_ = 0;
}
inline float BgpHealthSettings::_internal_reachability_warning() const {
  return reachability_warning_;
}
inline float BgpHealthSettings::reachability_warning() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpHealthSettings.reachability_warning)
  return _internal_reachability_warning();
}
inline void BgpHealthSettings::_internal_set_reachability_warning(float value) {
  
  reachability_warning_ = value;
}
inline void BgpHealthSettings::set_reachability_warning(float value) {
  _internal_set_reachability_warning(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpHealthSettings.reachability_warning)
}

// float reachability_critical = 2[json_name = "reachabilityCritical"];
inline void BgpHealthSettings::clear_reachability_critical() {
  reachability_critical_ = 0;
}
inline float BgpHealthSettings::_internal_reachability_critical() const {
  return reachability_critical_;
}
inline float BgpHealthSettings::reachability_critical() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpHealthSettings.reachability_critical)
  return _internal_reachability_critical();
}
inline void BgpHealthSettings::_internal_set_reachability_critical(float value) {
  
  reachability_critical_ = value;
}
inline void BgpHealthSettings::set_reachability_critical(float value) {
  _internal_set_reachability_critical(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpHealthSettings.reachability_critical)
}

// -------------------------------------------------------------------

// BgpMonitorSettings

// repeated uint32 allowed_asns = 1[json_name = "allowedAsns"];
inline int BgpMonitorSettings::_internal_allowed_asns_size() const {
  return allowed_asns_.size();
}
inline int BgpMonitorSettings::allowed_asns_size() const {
  return _internal_allowed_asns_size();
}
inline void BgpMonitorSettings::clear_allowed_asns() {
  allowed_asns_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BgpMonitorSettings::_internal_allowed_asns(int index) const {
  return allowed_asns_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BgpMonitorSettings::allowed_asns(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.allowed_asns)
  return _internal_allowed_asns(index);
}
inline void BgpMonitorSettings::set_allowed_asns(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  allowed_asns_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.allowed_asns)
}
inline void BgpMonitorSettings::_internal_add_allowed_asns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  allowed_asns_.Add(value);
}
inline void BgpMonitorSettings::add_allowed_asns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_allowed_asns(value);
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.allowed_asns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BgpMonitorSettings::_internal_allowed_asns() const {
  return allowed_asns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
BgpMonitorSettings::allowed_asns() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.allowed_asns)
  return _internal_allowed_asns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BgpMonitorSettings::_internal_mutable_allowed_asns() {
  return &allowed_asns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
BgpMonitorSettings::mutable_allowed_asns() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.allowed_asns)
  return _internal_mutable_allowed_asns();
}

// repeated .kentik.bgp_monitoring.v202205beta1.Nlri targets = 2[json_name = "targets"];
inline int BgpMonitorSettings::_internal_targets_size() const {
  return targets_.size();
}
inline int BgpMonitorSettings::targets_size() const {
  return _internal_targets_size();
}
inline void BgpMonitorSettings::clear_targets() {
  targets_.Clear();
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* BgpMonitorSettings::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.targets)
  return targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::Nlri >*
BgpMonitorSettings::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.targets)
  return &targets_;
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& BgpMonitorSettings::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& BgpMonitorSettings::targets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.targets)
  return _internal_targets(index);
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* BgpMonitorSettings::_internal_add_targets() {
  return targets_.Add();
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* BgpMonitorSettings::add_targets() {
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.targets)
  return _internal_add_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::Nlri >&
BgpMonitorSettings::targets() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.targets)
  return targets_;
}

// bool check_rpki = 3[json_name = "checkRpki"];
inline void BgpMonitorSettings::clear_check_rpki() {
  check_rpki_ = false;
}
inline bool BgpMonitorSettings::_internal_check_rpki() const {
  return check_rpki_;
}
inline bool BgpMonitorSettings::check_rpki() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.check_rpki)
  return _internal_check_rpki();
}
inline void BgpMonitorSettings::_internal_set_check_rpki(bool value) {
  
  check_rpki_ = value;
}
inline void BgpMonitorSettings::set_check_rpki(bool value) {
  _internal_set_check_rpki(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.check_rpki)
}

// bool include_covered_prefixes = 4[json_name = "includeCoveredPrefixes"];
inline void BgpMonitorSettings::clear_include_covered_prefixes() {
  include_covered_prefixes_ = false;
}
inline bool BgpMonitorSettings::_internal_include_covered_prefixes() const {
  return include_covered_prefixes_;
}
inline bool BgpMonitorSettings::include_covered_prefixes() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.include_covered_prefixes)
  return _internal_include_covered_prefixes();
}
inline void BgpMonitorSettings::_internal_set_include_covered_prefixes(bool value) {
  
  include_covered_prefixes_ = value;
}
inline void BgpMonitorSettings::set_include_covered_prefixes(bool value) {
  _internal_set_include_covered_prefixes(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.include_covered_prefixes)
}

// .kentik.bgp_monitoring.v202205beta1.BgpHealthSettings health_settings = 5[json_name = "healthSettings"];
inline bool BgpMonitorSettings::_internal_has_health_settings() const {
  return this != internal_default_instance() && health_settings_ != nullptr;
}
inline bool BgpMonitorSettings::has_health_settings() const {
  return _internal_has_health_settings();
}
inline void BgpMonitorSettings::clear_health_settings() {
  if (GetArena() == nullptr && health_settings_ != nullptr) {
    delete health_settings_;
  }
  health_settings_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings& BgpMonitorSettings::_internal_health_settings() const {
  const ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* p = health_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings*>(
      &::kentik::bgp_monitoring::v202205beta1::_BgpHealthSettings_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings& BgpMonitorSettings::health_settings() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.health_settings)
  return _internal_health_settings();
}
inline void BgpMonitorSettings::unsafe_arena_set_allocated_health_settings(
    ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* health_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(health_settings_);
  }
  health_settings_ = health_settings;
  if (health_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.health_settings)
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* BgpMonitorSettings::release_health_settings() {
  auto temp = unsafe_arena_release_health_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* BgpMonitorSettings::unsafe_arena_release_health_settings() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.health_settings)
  
  ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* temp = health_settings_;
  health_settings_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* BgpMonitorSettings::_internal_mutable_health_settings() {
  
  if (health_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings>(GetArena());
    health_settings_ = p;
  }
  return health_settings_;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* BgpMonitorSettings::mutable_health_settings() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.health_settings)
  return _internal_mutable_health_settings();
}
inline void BgpMonitorSettings::set_allocated_health_settings(::kentik::bgp_monitoring::v202205beta1::BgpHealthSettings* health_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete health_settings_;
  }
  if (health_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(health_settings);
    if (message_arena != submessage_arena) {
      health_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health_settings, submessage_arena);
    }
    
  } else {
    
  }
  health_settings_ = health_settings;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.health_settings)
}

// repeated string notification_channels = 6[json_name = "notificationChannels"];
inline int BgpMonitorSettings::_internal_notification_channels_size() const {
  return notification_channels_.size();
}
inline int BgpMonitorSettings::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void BgpMonitorSettings::clear_notification_channels() {
  notification_channels_.Clear();
}
inline std::string* BgpMonitorSettings::add_notification_channels() {
  // @@protoc_insertion_point(field_add_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
  return _internal_add_notification_channels();
}
inline const std::string& BgpMonitorSettings::_internal_notification_channels(int index) const {
  return notification_channels_.Get(index);
}
inline const std::string& BgpMonitorSettings::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
  return _internal_notification_channels(index);
}
inline std::string* BgpMonitorSettings::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
  return notification_channels_.Mutable(index);
}
inline void BgpMonitorSettings::set_notification_channels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
  notification_channels_.Mutable(index)->assign(value);
}
inline void BgpMonitorSettings::set_notification_channels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
  notification_channels_.Mutable(index)->assign(std::move(value));
}
inline void BgpMonitorSettings::set_notification_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
}
inline void BgpMonitorSettings::set_notification_channels(int index, const char* value, size_t size) {
  notification_channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
}
inline std::string* BgpMonitorSettings::_internal_add_notification_channels() {
  return notification_channels_.Add();
}
inline void BgpMonitorSettings::add_notification_channels(const std::string& value) {
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
}
inline void BgpMonitorSettings::add_notification_channels(std::string&& value) {
  notification_channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
}
inline void BgpMonitorSettings::add_notification_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
}
inline void BgpMonitorSettings::add_notification_channels(const char* value, size_t size) {
  notification_channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BgpMonitorSettings::notification_channels() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
  return notification_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BgpMonitorSettings::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings.notification_channels)
  return &notification_channels_;
}

// -------------------------------------------------------------------

// BgpMonitor

// string id = 1[json_name = "id"];
inline void BgpMonitor::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BgpMonitor::id() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
  return _internal_id();
}
inline void BgpMonitor::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
}
inline std::string* BgpMonitor::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
  return _internal_mutable_id();
}
inline const std::string& BgpMonitor::_internal_id() const {
  return id_.Get();
}
inline void BgpMonitor::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BgpMonitor::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
}
inline void BgpMonitor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
}
inline void BgpMonitor::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
}
inline std::string* BgpMonitor::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BgpMonitor::release_id() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BgpMonitor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
}
inline std::string* BgpMonitor::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BgpMonitor::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.id)
}

// string name = 2[json_name = "name"];
inline void BgpMonitor::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& BgpMonitor::name() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
  return _internal_name();
}
inline void BgpMonitor::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
}
inline std::string* BgpMonitor::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
  return _internal_mutable_name();
}
inline const std::string& BgpMonitor::_internal_name() const {
  return name_.Get();
}
inline void BgpMonitor::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BgpMonitor::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
}
inline void BgpMonitor::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
}
inline void BgpMonitor::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
}
inline std::string* BgpMonitor::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BgpMonitor::release_name() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BgpMonitor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
}
inline std::string* BgpMonitor::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BgpMonitor::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.name)
}

// .kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus status = 3[json_name = "status"];
inline void BgpMonitor::clear_status() {
  status_ = 0;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus BgpMonitor::_internal_status() const {
  return static_cast< ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus >(status_);
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus BgpMonitor::status() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.status)
  return _internal_status();
}
inline void BgpMonitor::_internal_set_status(::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus value) {
  
  status_ = value;
}
inline void BgpMonitor::set_status(::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitor.status)
}

// .kentik.bgp_monitoring.v202205beta1.BgpMonitorSettings settings = 4[json_name = "settings"];
inline bool BgpMonitor::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool BgpMonitor::has_settings() const {
  return _internal_has_settings();
}
inline void BgpMonitor::clear_settings() {
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings& BgpMonitor::_internal_settings() const {
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings*>(
      &::kentik::bgp_monitoring::v202205beta1::_BgpMonitorSettings_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings& BgpMonitor::settings() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.settings)
  return _internal_settings();
}
inline void BgpMonitor::unsafe_arena_set_allocated_settings(
    ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.settings)
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* BgpMonitor::release_settings() {
  auto temp = unsafe_arena_release_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* BgpMonitor::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.settings)
  
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* BgpMonitor::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* BgpMonitor::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.settings)
  return _internal_mutable_settings();
}
inline void BgpMonitor::set_allocated_settings(::kentik::bgp_monitoring::v202205beta1::BgpMonitorSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.settings)
}

// .google.protobuf.Timestamp cdate = 5[json_name = "cdate"];
inline bool BgpMonitor::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool BgpMonitor::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BgpMonitor::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BgpMonitor::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.cdate)
  return _internal_cdate();
}
inline void BgpMonitor::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMonitor::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMonitor::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMonitor::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMonitor::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.cdate)
  return _internal_mutable_cdate();
}
inline void BgpMonitor::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.cdate)
}

// .google.protobuf.Timestamp edate = 6[json_name = "edate"];
inline bool BgpMonitor::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool BgpMonitor::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BgpMonitor::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BgpMonitor::edate() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.edate)
  return _internal_edate();
}
inline void BgpMonitor::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMonitor::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMonitor::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMonitor::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMonitor::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.edate)
  return _internal_mutable_edate();
}
inline void BgpMonitor::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.edate)
}

// .kentik.core.v202303.UserInfo created_by = 7[json_name = "createdBy"];
inline bool BgpMonitor::_internal_has_created_by() const {
  return this != internal_default_instance() && created_by_ != nullptr;
}
inline bool BgpMonitor::has_created_by() const {
  return _internal_has_created_by();
}
inline const ::kentik::core::v202303::UserInfo& BgpMonitor::_internal_created_by() const {
  const ::kentik::core::v202303::UserInfo* p = created_by_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::core::v202303::UserInfo*>(
      &::kentik::core::v202303::_UserInfo_default_instance_);
}
inline const ::kentik::core::v202303::UserInfo& BgpMonitor::created_by() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.created_by)
  return _internal_created_by();
}
inline void BgpMonitor::unsafe_arena_set_allocated_created_by(
    ::kentik::core::v202303::UserInfo* created_by) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by_);
  }
  created_by_ = created_by;
  if (created_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.created_by)
}
inline ::kentik::core::v202303::UserInfo* BgpMonitor::release_created_by() {
  auto temp = unsafe_arena_release_created_by();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::core::v202303::UserInfo* BgpMonitor::unsafe_arena_release_created_by() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.created_by)
  
  ::kentik::core::v202303::UserInfo* temp = created_by_;
  created_by_ = nullptr;
  return temp;
}
inline ::kentik::core::v202303::UserInfo* BgpMonitor::_internal_mutable_created_by() {
  
  if (created_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::core::v202303::UserInfo>(GetArena());
    created_by_ = p;
  }
  return created_by_;
}
inline ::kentik::core::v202303::UserInfo* BgpMonitor::mutable_created_by() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.created_by)
  return _internal_mutable_created_by();
}
inline void BgpMonitor::set_allocated_created_by(::kentik::core::v202303::UserInfo* created_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by_);
  }
  if (created_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by)->GetArena();
    if (message_arena != submessage_arena) {
      created_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_by, submessage_arena);
    }
    
  } else {
    
  }
  created_by_ = created_by;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.created_by)
}

// .kentik.core.v202303.UserInfo last_updated_by = 8[json_name = "lastUpdatedBy"];
inline bool BgpMonitor::_internal_has_last_updated_by() const {
  return this != internal_default_instance() && last_updated_by_ != nullptr;
}
inline bool BgpMonitor::has_last_updated_by() const {
  return _internal_has_last_updated_by();
}
inline const ::kentik::core::v202303::UserInfo& BgpMonitor::_internal_last_updated_by() const {
  const ::kentik::core::v202303::UserInfo* p = last_updated_by_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::core::v202303::UserInfo*>(
      &::kentik::core::v202303::_UserInfo_default_instance_);
}
inline const ::kentik::core::v202303::UserInfo& BgpMonitor::last_updated_by() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.last_updated_by)
  return _internal_last_updated_by();
}
inline void BgpMonitor::unsafe_arena_set_allocated_last_updated_by(
    ::kentik::core::v202303::UserInfo* last_updated_by) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_by_);
  }
  last_updated_by_ = last_updated_by;
  if (last_updated_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.last_updated_by)
}
inline ::kentik::core::v202303::UserInfo* BgpMonitor::release_last_updated_by() {
  auto temp = unsafe_arena_release_last_updated_by();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::core::v202303::UserInfo* BgpMonitor::unsafe_arena_release_last_updated_by() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMonitor.last_updated_by)
  
  ::kentik::core::v202303::UserInfo* temp = last_updated_by_;
  last_updated_by_ = nullptr;
  return temp;
}
inline ::kentik::core::v202303::UserInfo* BgpMonitor::_internal_mutable_last_updated_by() {
  
  if (last_updated_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::core::v202303::UserInfo>(GetArena());
    last_updated_by_ = p;
  }
  return last_updated_by_;
}
inline ::kentik::core::v202303::UserInfo* BgpMonitor::mutable_last_updated_by() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.last_updated_by)
  return _internal_mutable_last_updated_by();
}
inline void BgpMonitor::set_allocated_last_updated_by(::kentik::core::v202303::UserInfo* last_updated_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_by_);
  }
  if (last_updated_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_by)->GetArena();
    if (message_arena != submessage_arena) {
      last_updated_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated_by, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_by_ = last_updated_by;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMonitor.last_updated_by)
}

// repeated string labels = 9[json_name = "labels"];
inline int BgpMonitor::_internal_labels_size() const {
  return labels_.size();
}
inline int BgpMonitor::labels_size() const {
  return _internal_labels_size();
}
inline void BgpMonitor::clear_labels() {
  labels_.Clear();
}
inline std::string* BgpMonitor::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
  return _internal_add_labels();
}
inline const std::string& BgpMonitor::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& BgpMonitor::labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
  return _internal_labels(index);
}
inline std::string* BgpMonitor::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
  return labels_.Mutable(index);
}
inline void BgpMonitor::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
  labels_.Mutable(index)->assign(value);
}
inline void BgpMonitor::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void BgpMonitor::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
}
inline void BgpMonitor::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
}
inline std::string* BgpMonitor::_internal_add_labels() {
  return labels_.Add();
}
inline void BgpMonitor::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
}
inline void BgpMonitor::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
}
inline void BgpMonitor::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
}
inline void BgpMonitor::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BgpMonitor::labels() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BgpMonitor::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.BgpMonitor.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// RouteInfo

// .kentik.bgp_monitoring.v202205beta1.Nlri nlri = 1[json_name = "nlri"];
inline bool RouteInfo::_internal_has_nlri() const {
  return this != internal_default_instance() && nlri_ != nullptr;
}
inline bool RouteInfo::has_nlri() const {
  return _internal_has_nlri();
}
inline void RouteInfo::clear_nlri() {
  if (GetArena() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& RouteInfo::_internal_nlri() const {
  const ::kentik::bgp_monitoring::v202205beta1::Nlri* p = nlri_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::Nlri*>(
      &::kentik::bgp_monitoring::v202205beta1::_Nlri_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& RouteInfo::nlri() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.RouteInfo.nlri)
  return _internal_nlri();
}
inline void RouteInfo::unsafe_arena_set_allocated_nlri(
    ::kentik::bgp_monitoring::v202205beta1::Nlri* nlri) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nlri_);
  }
  nlri_ = nlri;
  if (nlri) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.RouteInfo.nlri)
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* RouteInfo::release_nlri() {
  auto temp = unsafe_arena_release_nlri();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* RouteInfo::unsafe_arena_release_nlri() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.RouteInfo.nlri)
  
  ::kentik::bgp_monitoring::v202205beta1::Nlri* temp = nlri_;
  nlri_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* RouteInfo::_internal_mutable_nlri() {
  
  if (nlri_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::Nlri>(GetArena());
    nlri_ = p;
  }
  return nlri_;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* RouteInfo::mutable_nlri() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.RouteInfo.nlri)
  return _internal_mutable_nlri();
}
inline void RouteInfo::set_allocated_nlri(::kentik::bgp_monitoring::v202205beta1::Nlri* nlri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nlri_;
  }
  if (nlri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nlri);
    if (message_arena != submessage_arena) {
      nlri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nlri, submessage_arena);
    }
    
  } else {
    
  }
  nlri_ = nlri;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.RouteInfo.nlri)
}

// uint32 origin_asn = 2[json_name = "originAsn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void RouteInfo::clear_origin_asn() {
  origin_asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteInfo::_internal_origin_asn() const {
  return origin_asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RouteInfo::origin_asn() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.RouteInfo.origin_asn)
  return _internal_origin_asn();
}
inline void RouteInfo::_internal_set_origin_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  origin_asn_ = value;
}
inline void RouteInfo::set_origin_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_origin_asn(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.RouteInfo.origin_asn)
}

// repeated string as_path = 3[json_name = "asPath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int RouteInfo::_internal_as_path_size() const {
  return as_path_.size();
}
inline int RouteInfo::as_path_size() const {
  return _internal_as_path_size();
}
inline void RouteInfo::clear_as_path() {
  as_path_.Clear();
}
inline std::string* RouteInfo::add_as_path() {
  // @@protoc_insertion_point(field_add_mutable:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
  return _internal_add_as_path();
}
inline const std::string& RouteInfo::_internal_as_path(int index) const {
  return as_path_.Get(index);
}
inline const std::string& RouteInfo::as_path(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
  return _internal_as_path(index);
}
inline std::string* RouteInfo::mutable_as_path(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
  return as_path_.Mutable(index);
}
inline void RouteInfo::set_as_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
  as_path_.Mutable(index)->assign(value);
}
inline void RouteInfo::set_as_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
  as_path_.Mutable(index)->assign(std::move(value));
}
inline void RouteInfo::set_as_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  as_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
}
inline void RouteInfo::set_as_path(int index, const char* value, size_t size) {
  as_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
}
inline std::string* RouteInfo::_internal_add_as_path() {
  return as_path_.Add();
}
inline void RouteInfo::add_as_path(const std::string& value) {
  as_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
}
inline void RouteInfo::add_as_path(std::string&& value) {
  as_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
}
inline void RouteInfo::add_as_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  as_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
}
inline void RouteInfo::add_as_path(const char* value, size_t size) {
  as_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RouteInfo::as_path() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
  return as_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RouteInfo::mutable_as_path() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.RouteInfo.as_path)
  return &as_path_;
}

// .kentik.net.v202303.VantagePoint vantage_point = 4[json_name = "vantagePoint", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool RouteInfo::_internal_has_vantage_point() const {
  return this != internal_default_instance() && vantage_point_ != nullptr;
}
inline bool RouteInfo::has_vantage_point() const {
  return _internal_has_vantage_point();
}
inline const ::kentik::net::v202303::VantagePoint& RouteInfo::_internal_vantage_point() const {
  const ::kentik::net::v202303::VantagePoint* p = vantage_point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::net::v202303::VantagePoint*>(
      &::kentik::net::v202303::_VantagePoint_default_instance_);
}
inline const ::kentik::net::v202303::VantagePoint& RouteInfo::vantage_point() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.RouteInfo.vantage_point)
  return _internal_vantage_point();
}
inline void RouteInfo::unsafe_arena_set_allocated_vantage_point(
    ::kentik::net::v202303::VantagePoint* vantage_point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vantage_point_);
  }
  vantage_point_ = vantage_point;
  if (vantage_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.RouteInfo.vantage_point)
}
inline ::kentik::net::v202303::VantagePoint* RouteInfo::release_vantage_point() {
  auto temp = unsafe_arena_release_vantage_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::net::v202303::VantagePoint* RouteInfo::unsafe_arena_release_vantage_point() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.RouteInfo.vantage_point)
  
  ::kentik::net::v202303::VantagePoint* temp = vantage_point_;
  vantage_point_ = nullptr;
  return temp;
}
inline ::kentik::net::v202303::VantagePoint* RouteInfo::_internal_mutable_vantage_point() {
  
  if (vantage_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::net::v202303::VantagePoint>(GetArena());
    vantage_point_ = p;
  }
  return vantage_point_;
}
inline ::kentik::net::v202303::VantagePoint* RouteInfo::mutable_vantage_point() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.RouteInfo.vantage_point)
  return _internal_mutable_vantage_point();
}
inline void RouteInfo::set_allocated_vantage_point(::kentik::net::v202303::VantagePoint* vantage_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vantage_point_);
  }
  if (vantage_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vantage_point)->GetArena();
    if (message_arena != submessage_arena) {
      vantage_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vantage_point, submessage_arena);
    }
    
  } else {
    
  }
  vantage_point_ = vantage_point;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.RouteInfo.vantage_point)
}

// .kentik.net.v202303.RpkiStatus rpki_status = 5[json_name = "rpkiStatus"];
inline void RouteInfo::clear_rpki_status() {
  rpki_status_ = 0;
}
inline ::kentik::net::v202303::RpkiStatus RouteInfo::_internal_rpki_status() const {
  return static_cast< ::kentik::net::v202303::RpkiStatus >(rpki_status_);
}
inline ::kentik::net::v202303::RpkiStatus RouteInfo::rpki_status() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.RouteInfo.rpki_status)
  return _internal_rpki_status();
}
inline void RouteInfo::_internal_set_rpki_status(::kentik::net::v202303::RpkiStatus value) {
  
  rpki_status_ = value;
}
inline void RouteInfo::set_rpki_status(::kentik::net::v202303::RpkiStatus value) {
  _internal_set_rpki_status(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.RouteInfo.rpki_status)
}

// string nexthop = 6[json_name = "nexthop"];
inline void RouteInfo::clear_nexthop() {
  nexthop_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RouteInfo::nexthop() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
  return _internal_nexthop();
}
inline void RouteInfo::set_nexthop(const std::string& value) {
  _internal_set_nexthop(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
}
inline std::string* RouteInfo::mutable_nexthop() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
  return _internal_mutable_nexthop();
}
inline const std::string& RouteInfo::_internal_nexthop() const {
  return nexthop_.Get();
}
inline void RouteInfo::_internal_set_nexthop(const std::string& value) {
  
  nexthop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RouteInfo::set_nexthop(std::string&& value) {
  
  nexthop_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
}
inline void RouteInfo::set_nexthop(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nexthop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
}
inline void RouteInfo::set_nexthop(const char* value,
    size_t size) {
  
  nexthop_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
}
inline std::string* RouteInfo::_internal_mutable_nexthop() {
  
  return nexthop_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RouteInfo::release_nexthop() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
  return nexthop_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RouteInfo::set_allocated_nexthop(std::string* nexthop) {
  if (nexthop != nullptr) {
    
  } else {
    
  }
  nexthop_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nexthop,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
}
inline std::string* RouteInfo::unsafe_arena_release_nexthop() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return nexthop_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RouteInfo::unsafe_arena_set_allocated_nexthop(
    std::string* nexthop) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nexthop != nullptr) {
    
  } else {
    
  }
  nexthop_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nexthop, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.RouteInfo.nexthop)
}

// -------------------------------------------------------------------

// BgpMetric

// .google.protobuf.Timestamp timestamp = 1[json_name = "timestamp"];
inline bool BgpMetric::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool BgpMetric::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BgpMetric::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BgpMetric::timestamp() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMetric.timestamp)
  return _internal_timestamp();
}
inline void BgpMetric::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMetric.timestamp)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMetric::release_timestamp() {
  auto temp = unsafe_arena_release_timestamp();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMetric::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMetric.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMetric::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BgpMetric::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMetric.timestamp)
  return _internal_mutable_timestamp();
}
inline void BgpMetric::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMetric.timestamp)
}

// .kentik.bgp_monitoring.v202205beta1.Nlri nlri = 2[json_name = "nlri"];
inline bool BgpMetric::_internal_has_nlri() const {
  return this != internal_default_instance() && nlri_ != nullptr;
}
inline bool BgpMetric::has_nlri() const {
  return _internal_has_nlri();
}
inline void BgpMetric::clear_nlri() {
  if (GetArena() == nullptr && nlri_ != nullptr) {
    delete nlri_;
  }
  nlri_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& BgpMetric::_internal_nlri() const {
  const ::kentik::bgp_monitoring::v202205beta1::Nlri* p = nlri_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::Nlri*>(
      &::kentik::bgp_monitoring::v202205beta1::_Nlri_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& BgpMetric::nlri() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMetric.nlri)
  return _internal_nlri();
}
inline void BgpMetric::unsafe_arena_set_allocated_nlri(
    ::kentik::bgp_monitoring::v202205beta1::Nlri* nlri) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nlri_);
  }
  nlri_ = nlri;
  if (nlri) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMetric.nlri)
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* BgpMetric::release_nlri() {
  auto temp = unsafe_arena_release_nlri();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* BgpMetric::unsafe_arena_release_nlri() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.BgpMetric.nlri)
  
  ::kentik::bgp_monitoring::v202205beta1::Nlri* temp = nlri_;
  nlri_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* BgpMetric::_internal_mutable_nlri() {
  
  if (nlri_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::Nlri>(GetArena());
    nlri_ = p;
  }
  return nlri_;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* BgpMetric::mutable_nlri() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.BgpMetric.nlri)
  return _internal_mutable_nlri();
}
inline void BgpMetric::set_allocated_nlri(::kentik::bgp_monitoring::v202205beta1::Nlri* nlri) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nlri_;
  }
  if (nlri) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nlri);
    if (message_arena != submessage_arena) {
      nlri = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nlri, submessage_arena);
    }
    
  } else {
    
  }
  nlri_ = nlri;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.BgpMetric.nlri)
}

// float reachability = 3[json_name = "reachability"];
inline bool BgpMetric::_internal_has_reachability() const {
  return type_case() == kReachability;
}
inline void BgpMetric::set_has_reachability() {
  _oneof_case_[0] = kReachability;
}
inline void BgpMetric::clear_reachability() {
  if (_internal_has_reachability()) {
    type_.reachability_ = 0;
    clear_has_type();
  }
}
inline float BgpMetric::_internal_reachability() const {
  if (_internal_has_reachability()) {
    return type_.reachability_;
  }
  return 0;
}
inline void BgpMetric::_internal_set_reachability(float value) {
  if (!_internal_has_reachability()) {
    clear_type();
    set_has_reachability();
  }
  type_.reachability_ = value;
}
inline float BgpMetric::reachability() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMetric.reachability)
  return _internal_reachability();
}
inline void BgpMetric::set_reachability(float value) {
  _internal_set_reachability(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMetric.reachability)
}

// uint32 path_changes = 5[json_name = "pathChanges"];
inline bool BgpMetric::_internal_has_path_changes() const {
  return type_case() == kPathChanges;
}
inline void BgpMetric::set_has_path_changes() {
  _oneof_case_[0] = kPathChanges;
}
inline void BgpMetric::clear_path_changes() {
  if (_internal_has_path_changes()) {
    type_.path_changes_ = 0u;
    clear_has_type();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BgpMetric::_internal_path_changes() const {
  if (_internal_has_path_changes()) {
    return type_.path_changes_;
  }
  return 0u;
}
inline void BgpMetric::_internal_set_path_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_path_changes()) {
    clear_type();
    set_has_path_changes();
  }
  type_.path_changes_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BgpMetric::path_changes() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.BgpMetric.path_changes)
  return _internal_path_changes();
}
inline void BgpMetric::set_path_changes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_path_changes(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.BgpMetric.path_changes)
}

inline bool BgpMetric::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void BgpMetric::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline BgpMetric::TypeCase BgpMetric::type_case() const {
  return BgpMetric::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ListMonitorsRequest

// -------------------------------------------------------------------

// ListMonitorsResponse

// repeated .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitors = 1[json_name = "monitors"];
inline int ListMonitorsResponse::_internal_monitors_size() const {
  return monitors_.size();
}
inline int ListMonitorsResponse::monitors_size() const {
  return _internal_monitors_size();
}
inline void ListMonitorsResponse::clear_monitors() {
  monitors_.Clear();
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* ListMonitorsResponse::mutable_monitors(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse.monitors)
  return monitors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMonitor >*
ListMonitorsResponse::mutable_monitors() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse.monitors)
  return &monitors_;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& ListMonitorsResponse::_internal_monitors(int index) const {
  return monitors_.Get(index);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& ListMonitorsResponse::monitors(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse.monitors)
  return _internal_monitors(index);
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* ListMonitorsResponse::_internal_add_monitors() {
  return monitors_.Add();
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* ListMonitorsResponse::add_monitors() {
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse.monitors)
  return _internal_add_monitors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMonitor >&
ListMonitorsResponse::monitors() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse.monitors)
  return monitors_;
}

// uint32 invalid_count = 2[json_name = "invalidCount"];
inline void ListMonitorsResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListMonitorsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListMonitorsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListMonitorsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListMonitorsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.ListMonitorsResponse.invalid_count)
}

// -------------------------------------------------------------------

// CreateMonitorRequest

// .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
inline bool CreateMonitorRequest::_internal_has_monitor() const {
  return this != internal_default_instance() && monitor_ != nullptr;
}
inline bool CreateMonitorRequest::has_monitor() const {
  return _internal_has_monitor();
}
inline void CreateMonitorRequest::clear_monitor() {
  if (GetArena() == nullptr && monitor_ != nullptr) {
    delete monitor_;
  }
  monitor_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& CreateMonitorRequest::_internal_monitor() const {
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* p = monitor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor*>(
      &::kentik::bgp_monitoring::v202205beta1::_BgpMonitor_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& CreateMonitorRequest::monitor() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest.monitor)
  return _internal_monitor();
}
inline void CreateMonitorRequest::unsafe_arena_set_allocated_monitor(
    ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitor_);
  }
  monitor_ = monitor;
  if (monitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest.monitor)
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* CreateMonitorRequest::release_monitor() {
  auto temp = unsafe_arena_release_monitor();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* CreateMonitorRequest::unsafe_arena_release_monitor() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest.monitor)
  
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* temp = monitor_;
  monitor_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* CreateMonitorRequest::_internal_mutable_monitor() {
  
  if (monitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMonitor>(GetArena());
    monitor_ = p;
  }
  return monitor_;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* CreateMonitorRequest::mutable_monitor() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest.monitor)
  return _internal_mutable_monitor();
}
inline void CreateMonitorRequest::set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete monitor_;
  }
  if (monitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monitor);
    if (message_arena != submessage_arena) {
      monitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitor, submessage_arena);
    }
    
  } else {
    
  }
  monitor_ = monitor;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.CreateMonitorRequest.monitor)
}

// -------------------------------------------------------------------

// CreateMonitorResponse

// .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
inline bool CreateMonitorResponse::_internal_has_monitor() const {
  return this != internal_default_instance() && monitor_ != nullptr;
}
inline bool CreateMonitorResponse::has_monitor() const {
  return _internal_has_monitor();
}
inline void CreateMonitorResponse::clear_monitor() {
  if (GetArena() == nullptr && monitor_ != nullptr) {
    delete monitor_;
  }
  monitor_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& CreateMonitorResponse::_internal_monitor() const {
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* p = monitor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor*>(
      &::kentik::bgp_monitoring::v202205beta1::_BgpMonitor_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& CreateMonitorResponse::monitor() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse.monitor)
  return _internal_monitor();
}
inline void CreateMonitorResponse::unsafe_arena_set_allocated_monitor(
    ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitor_);
  }
  monitor_ = monitor;
  if (monitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse.monitor)
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* CreateMonitorResponse::release_monitor() {
  auto temp = unsafe_arena_release_monitor();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* CreateMonitorResponse::unsafe_arena_release_monitor() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse.monitor)
  
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* temp = monitor_;
  monitor_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* CreateMonitorResponse::_internal_mutable_monitor() {
  
  if (monitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMonitor>(GetArena());
    monitor_ = p;
  }
  return monitor_;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* CreateMonitorResponse::mutable_monitor() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse.monitor)
  return _internal_mutable_monitor();
}
inline void CreateMonitorResponse::set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete monitor_;
  }
  if (monitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monitor);
    if (message_arena != submessage_arena) {
      monitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitor, submessage_arena);
    }
    
  } else {
    
  }
  monitor_ = monitor;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.CreateMonitorResponse.monitor)
}

// -------------------------------------------------------------------

// GetMonitorRequest

// string id = 1[json_name = "id"];
inline void GetMonitorRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetMonitorRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
  return _internal_id();
}
inline void GetMonitorRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
}
inline std::string* GetMonitorRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetMonitorRequest::_internal_id() const {
  return id_.Get();
}
inline void GetMonitorRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetMonitorRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
}
inline void GetMonitorRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
}
inline void GetMonitorRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
}
inline std::string* GetMonitorRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetMonitorRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetMonitorRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
}
inline std::string* GetMonitorRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetMonitorRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMonitorRequest.id)
}

// -------------------------------------------------------------------

// GetMonitorResponse

// .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
inline bool GetMonitorResponse::_internal_has_monitor() const {
  return this != internal_default_instance() && monitor_ != nullptr;
}
inline bool GetMonitorResponse::has_monitor() const {
  return _internal_has_monitor();
}
inline void GetMonitorResponse::clear_monitor() {
  if (GetArena() == nullptr && monitor_ != nullptr) {
    delete monitor_;
  }
  monitor_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& GetMonitorResponse::_internal_monitor() const {
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* p = monitor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor*>(
      &::kentik::bgp_monitoring::v202205beta1::_BgpMonitor_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& GetMonitorResponse::monitor() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetMonitorResponse.monitor)
  return _internal_monitor();
}
inline void GetMonitorResponse::unsafe_arena_set_allocated_monitor(
    ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitor_);
  }
  monitor_ = monitor;
  if (monitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMonitorResponse.monitor)
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* GetMonitorResponse::release_monitor() {
  auto temp = unsafe_arena_release_monitor();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* GetMonitorResponse::unsafe_arena_release_monitor() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.GetMonitorResponse.monitor)
  
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* temp = monitor_;
  monitor_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* GetMonitorResponse::_internal_mutable_monitor() {
  
  if (monitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMonitor>(GetArena());
    monitor_ = p;
  }
  return monitor_;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* GetMonitorResponse::mutable_monitor() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetMonitorResponse.monitor)
  return _internal_mutable_monitor();
}
inline void GetMonitorResponse::set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete monitor_;
  }
  if (monitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monitor);
    if (message_arena != submessage_arena) {
      monitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitor, submessage_arena);
    }
    
  } else {
    
  }
  monitor_ = monitor;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMonitorResponse.monitor)
}

// -------------------------------------------------------------------

// UpdateMonitorRequest

// .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
inline bool UpdateMonitorRequest::_internal_has_monitor() const {
  return this != internal_default_instance() && monitor_ != nullptr;
}
inline bool UpdateMonitorRequest::has_monitor() const {
  return _internal_has_monitor();
}
inline void UpdateMonitorRequest::clear_monitor() {
  if (GetArena() == nullptr && monitor_ != nullptr) {
    delete monitor_;
  }
  monitor_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& UpdateMonitorRequest::_internal_monitor() const {
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* p = monitor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor*>(
      &::kentik::bgp_monitoring::v202205beta1::_BgpMonitor_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& UpdateMonitorRequest::monitor() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest.monitor)
  return _internal_monitor();
}
inline void UpdateMonitorRequest::unsafe_arena_set_allocated_monitor(
    ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitor_);
  }
  monitor_ = monitor;
  if (monitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest.monitor)
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* UpdateMonitorRequest::release_monitor() {
  auto temp = unsafe_arena_release_monitor();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* UpdateMonitorRequest::unsafe_arena_release_monitor() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest.monitor)
  
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* temp = monitor_;
  monitor_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* UpdateMonitorRequest::_internal_mutable_monitor() {
  
  if (monitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMonitor>(GetArena());
    monitor_ = p;
  }
  return monitor_;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* UpdateMonitorRequest::mutable_monitor() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest.monitor)
  return _internal_mutable_monitor();
}
inline void UpdateMonitorRequest::set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete monitor_;
  }
  if (monitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monitor);
    if (message_arena != submessage_arena) {
      monitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitor, submessage_arena);
    }
    
  } else {
    
  }
  monitor_ = monitor;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.UpdateMonitorRequest.monitor)
}

// -------------------------------------------------------------------

// UpdateMonitorResponse

// .kentik.bgp_monitoring.v202205beta1.BgpMonitor monitor = 1[json_name = "monitor"];
inline bool UpdateMonitorResponse::_internal_has_monitor() const {
  return this != internal_default_instance() && monitor_ != nullptr;
}
inline bool UpdateMonitorResponse::has_monitor() const {
  return _internal_has_monitor();
}
inline void UpdateMonitorResponse::clear_monitor() {
  if (GetArena() == nullptr && monitor_ != nullptr) {
    delete monitor_;
  }
  monitor_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& UpdateMonitorResponse::_internal_monitor() const {
  const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* p = monitor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor*>(
      &::kentik::bgp_monitoring::v202205beta1::_BgpMonitor_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMonitor& UpdateMonitorResponse::monitor() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse.monitor)
  return _internal_monitor();
}
inline void UpdateMonitorResponse::unsafe_arena_set_allocated_monitor(
    ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitor_);
  }
  monitor_ = monitor;
  if (monitor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse.monitor)
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* UpdateMonitorResponse::release_monitor() {
  auto temp = unsafe_arena_release_monitor();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* UpdateMonitorResponse::unsafe_arena_release_monitor() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse.monitor)
  
  ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* temp = monitor_;
  monitor_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* UpdateMonitorResponse::_internal_mutable_monitor() {
  
  if (monitor_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::BgpMonitor>(GetArena());
    monitor_ = p;
  }
  return monitor_;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitor* UpdateMonitorResponse::mutable_monitor() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse.monitor)
  return _internal_mutable_monitor();
}
inline void UpdateMonitorResponse::set_allocated_monitor(::kentik::bgp_monitoring::v202205beta1::BgpMonitor* monitor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete monitor_;
  }
  if (monitor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monitor);
    if (message_arena != submessage_arena) {
      monitor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitor, submessage_arena);
    }
    
  } else {
    
  }
  monitor_ = monitor;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.UpdateMonitorResponse.monitor)
}

// -------------------------------------------------------------------

// DeleteMonitorRequest

// string id = 1[json_name = "id"];
inline void DeleteMonitorRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteMonitorRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
  return _internal_id();
}
inline void DeleteMonitorRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
}
inline std::string* DeleteMonitorRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteMonitorRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteMonitorRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteMonitorRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
}
inline void DeleteMonitorRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
}
inline void DeleteMonitorRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
}
inline std::string* DeleteMonitorRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteMonitorRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteMonitorRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
}
inline std::string* DeleteMonitorRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteMonitorRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.DeleteMonitorRequest.id)
}

// -------------------------------------------------------------------

// DeleteMonitorResponse

// -------------------------------------------------------------------

// SetMonitorStatusRequest

// string id = 1[json_name = "id"];
inline void SetMonitorStatusRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetMonitorStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
  return _internal_id();
}
inline void SetMonitorStatusRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
}
inline std::string* SetMonitorStatusRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
  return _internal_mutable_id();
}
inline const std::string& SetMonitorStatusRequest::_internal_id() const {
  return id_.Get();
}
inline void SetMonitorStatusRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetMonitorStatusRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
}
inline void SetMonitorStatusRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
}
inline void SetMonitorStatusRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
}
inline std::string* SetMonitorStatusRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetMonitorStatusRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetMonitorStatusRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
}
inline std::string* SetMonitorStatusRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetMonitorStatusRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.id)
}

// .kentik.bgp_monitoring.v202205beta1.BgpMonitorStatus status = 2[json_name = "status"];
inline void SetMonitorStatusRequest::clear_status() {
  status_ = 0;
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus SetMonitorStatusRequest::_internal_status() const {
  return static_cast< ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus >(status_);
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus SetMonitorStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.status)
  return _internal_status();
}
inline void SetMonitorStatusRequest::_internal_set_status(::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus value) {
  
  status_ = value;
}
inline void SetMonitorStatusRequest::set_status(::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.SetMonitorStatusRequest.status)
}

// -------------------------------------------------------------------

// SetMonitorStatusResponse

// -------------------------------------------------------------------

// GetMetricsForTargetRequest

// .google.protobuf.Timestamp start_time = 1[json_name = "startTime"];
inline bool GetMetricsForTargetRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool GetMetricsForTargetRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetMetricsForTargetRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetMetricsForTargetRequest::start_time() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.start_time)
  return _internal_start_time();
}
inline void GetMetricsForTargetRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetMetricsForTargetRequest::release_start_time() {
  auto temp = unsafe_arena_release_start_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetMetricsForTargetRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetMetricsForTargetRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetMetricsForTargetRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.start_time)
  return _internal_mutable_start_time();
}
inline void GetMetricsForTargetRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 2[json_name = "endTime"];
inline bool GetMetricsForTargetRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool GetMetricsForTargetRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetMetricsForTargetRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetMetricsForTargetRequest::end_time() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.end_time)
  return _internal_end_time();
}
inline void GetMetricsForTargetRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetMetricsForTargetRequest::release_end_time() {
  auto temp = unsafe_arena_release_end_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetMetricsForTargetRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetMetricsForTargetRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetMetricsForTargetRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.end_time)
  return _internal_mutable_end_time();
}
inline void GetMetricsForTargetRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.end_time)
}

// .kentik.bgp_monitoring.v202205beta1.Nlri target = 3[json_name = "target"];
inline bool GetMetricsForTargetRequest::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool GetMetricsForTargetRequest::has_target() const {
  return _internal_has_target();
}
inline void GetMetricsForTargetRequest::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& GetMetricsForTargetRequest::_internal_target() const {
  const ::kentik::bgp_monitoring::v202205beta1::Nlri* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::Nlri*>(
      &::kentik::bgp_monitoring::v202205beta1::_Nlri_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& GetMetricsForTargetRequest::target() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.target)
  return _internal_target();
}
inline void GetMetricsForTargetRequest::unsafe_arena_set_allocated_target(
    ::kentik::bgp_monitoring::v202205beta1::Nlri* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.target)
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* GetMetricsForTargetRequest::release_target() {
  auto temp = unsafe_arena_release_target();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* GetMetricsForTargetRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.target)
  
  ::kentik::bgp_monitoring::v202205beta1::Nlri* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* GetMetricsForTargetRequest::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::Nlri>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* GetMetricsForTargetRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.target)
  return _internal_mutable_target();
}
inline void GetMetricsForTargetRequest::set_allocated_target(::kentik::bgp_monitoring::v202205beta1::Nlri* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.target)
}

// bool include_covered = 4[json_name = "includeCovered"];
inline void GetMetricsForTargetRequest::clear_include_covered() {
  include_covered_ = false;
}
inline bool GetMetricsForTargetRequest::_internal_include_covered() const {
  return include_covered_;
}
inline bool GetMetricsForTargetRequest::include_covered() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.include_covered)
  return _internal_include_covered();
}
inline void GetMetricsForTargetRequest::_internal_set_include_covered(bool value) {
  
  include_covered_ = value;
}
inline void GetMetricsForTargetRequest::set_include_covered(bool value) {
  _internal_set_include_covered(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.include_covered)
}

// repeated .kentik.bgp_monitoring.v202205beta1.BgpMetricType metrics = 5[json_name = "metrics"];
inline int GetMetricsForTargetRequest::_internal_metrics_size() const {
  return metrics_.size();
}
inline int GetMetricsForTargetRequest::metrics_size() const {
  return _internal_metrics_size();
}
inline void GetMetricsForTargetRequest::clear_metrics() {
  metrics_.Clear();
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMetricType GetMetricsForTargetRequest::_internal_metrics(int index) const {
  return static_cast< ::kentik::bgp_monitoring::v202205beta1::BgpMetricType >(metrics_.Get(index));
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMetricType GetMetricsForTargetRequest::metrics(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.metrics)
  return _internal_metrics(index);
}
inline void GetMetricsForTargetRequest::set_metrics(int index, ::kentik::bgp_monitoring::v202205beta1::BgpMetricType value) {
  metrics_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.metrics)
}
inline void GetMetricsForTargetRequest::_internal_add_metrics(::kentik::bgp_monitoring::v202205beta1::BgpMetricType value) {
  metrics_.Add(value);
}
inline void GetMetricsForTargetRequest::add_metrics(::kentik::bgp_monitoring::v202205beta1::BgpMetricType value) {
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.metrics)
  _internal_add_metrics(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetMetricsForTargetRequest::metrics() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.metrics)
  return metrics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetMetricsForTargetRequest::_internal_mutable_metrics() {
  return &metrics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetMetricsForTargetRequest::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetRequest.metrics)
  return _internal_mutable_metrics();
}

// -------------------------------------------------------------------

// GetMetricsForTargetResponse

// repeated .kentik.bgp_monitoring.v202205beta1.BgpMetric metrics = 1[json_name = "metrics"];
inline int GetMetricsForTargetResponse::_internal_metrics_size() const {
  return metrics_.size();
}
inline int GetMetricsForTargetResponse::metrics_size() const {
  return _internal_metrics_size();
}
inline void GetMetricsForTargetResponse::clear_metrics() {
  metrics_.Clear();
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMetric* GetMetricsForTargetResponse::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse.metrics)
  return metrics_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMetric >*
GetMetricsForTargetResponse::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse.metrics)
  return &metrics_;
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMetric& GetMetricsForTargetResponse::_internal_metrics(int index) const {
  return metrics_.Get(index);
}
inline const ::kentik::bgp_monitoring::v202205beta1::BgpMetric& GetMetricsForTargetResponse::metrics(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse.metrics)
  return _internal_metrics(index);
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMetric* GetMetricsForTargetResponse::_internal_add_metrics() {
  return metrics_.Add();
}
inline ::kentik::bgp_monitoring::v202205beta1::BgpMetric* GetMetricsForTargetResponse::add_metrics() {
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse.metrics)
  return _internal_add_metrics();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::BgpMetric >&
GetMetricsForTargetResponse::metrics() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.GetMetricsForTargetResponse.metrics)
  return metrics_;
}

// -------------------------------------------------------------------

// GetRoutesForTargetRequest

// .google.protobuf.Timestamp time = 1[json_name = "time"];
inline bool GetRoutesForTargetRequest::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool GetRoutesForTargetRequest::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetRoutesForTargetRequest::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetRoutesForTargetRequest::time() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.time)
  return _internal_time();
}
inline void GetRoutesForTargetRequest::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetRoutesForTargetRequest::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetRoutesForTargetRequest::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetRoutesForTargetRequest::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetRoutesForTargetRequest::mutable_time() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.time)
  return _internal_mutable_time();
}
inline void GetRoutesForTargetRequest::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.time)
}

// .kentik.bgp_monitoring.v202205beta1.Nlri target = 2[json_name = "target"];
inline bool GetRoutesForTargetRequest::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool GetRoutesForTargetRequest::has_target() const {
  return _internal_has_target();
}
inline void GetRoutesForTargetRequest::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& GetRoutesForTargetRequest::_internal_target() const {
  const ::kentik::bgp_monitoring::v202205beta1::Nlri* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::bgp_monitoring::v202205beta1::Nlri*>(
      &::kentik::bgp_monitoring::v202205beta1::_Nlri_default_instance_);
}
inline const ::kentik::bgp_monitoring::v202205beta1::Nlri& GetRoutesForTargetRequest::target() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.target)
  return _internal_target();
}
inline void GetRoutesForTargetRequest::unsafe_arena_set_allocated_target(
    ::kentik::bgp_monitoring::v202205beta1::Nlri* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.target)
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* GetRoutesForTargetRequest::release_target() {
  auto temp = unsafe_arena_release_target();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* GetRoutesForTargetRequest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.target)
  
  ::kentik::bgp_monitoring::v202205beta1::Nlri* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* GetRoutesForTargetRequest::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::bgp_monitoring::v202205beta1::Nlri>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::kentik::bgp_monitoring::v202205beta1::Nlri* GetRoutesForTargetRequest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.target)
  return _internal_mutable_target();
}
inline void GetRoutesForTargetRequest::set_allocated_target(::kentik::bgp_monitoring::v202205beta1::Nlri* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.target)
}

// bool include_covered = 4[json_name = "includeCovered"];
inline void GetRoutesForTargetRequest::clear_include_covered() {
  include_covered_ = false;
}
inline bool GetRoutesForTargetRequest::_internal_include_covered() const {
  return include_covered_;
}
inline bool GetRoutesForTargetRequest::include_covered() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.include_covered)
  return _internal_include_covered();
}
inline void GetRoutesForTargetRequest::_internal_set_include_covered(bool value) {
  
  include_covered_ = value;
}
inline void GetRoutesForTargetRequest::set_include_covered(bool value) {
  _internal_set_include_covered(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.include_covered)
}

// bool check_rpki = 5[json_name = "checkRpki"];
inline void GetRoutesForTargetRequest::clear_check_rpki() {
  check_rpki_ = false;
}
inline bool GetRoutesForTargetRequest::_internal_check_rpki() const {
  return check_rpki_;
}
inline bool GetRoutesForTargetRequest::check_rpki() const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.check_rpki)
  return _internal_check_rpki();
}
inline void GetRoutesForTargetRequest::_internal_set_check_rpki(bool value) {
  
  check_rpki_ = value;
}
inline void GetRoutesForTargetRequest::set_check_rpki(bool value) {
  _internal_set_check_rpki(value);
  // @@protoc_insertion_point(field_set:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetRequest.check_rpki)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetRoutesForTargetResponse

// repeated .kentik.bgp_monitoring.v202205beta1.RouteInfo routes = 1[json_name = "routes"];
inline int GetRoutesForTargetResponse::_internal_routes_size() const {
  return routes_.size();
}
inline int GetRoutesForTargetResponse::routes_size() const {
  return _internal_routes_size();
}
inline void GetRoutesForTargetResponse::clear_routes() {
  routes_.Clear();
}
inline ::kentik::bgp_monitoring::v202205beta1::RouteInfo* GetRoutesForTargetResponse::mutable_routes(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.routes)
  return routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::RouteInfo >*
GetRoutesForTargetResponse::mutable_routes() {
  // @@protoc_insertion_point(field_mutable_list:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.routes)
  return &routes_;
}
inline const ::kentik::bgp_monitoring::v202205beta1::RouteInfo& GetRoutesForTargetResponse::_internal_routes(int index) const {
  return routes_.Get(index);
}
inline const ::kentik::bgp_monitoring::v202205beta1::RouteInfo& GetRoutesForTargetResponse::routes(int index) const {
  // @@protoc_insertion_point(field_get:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.routes)
  return _internal_routes(index);
}
inline ::kentik::bgp_monitoring::v202205beta1::RouteInfo* GetRoutesForTargetResponse::_internal_add_routes() {
  return routes_.Add();
}
inline ::kentik::bgp_monitoring::v202205beta1::RouteInfo* GetRoutesForTargetResponse::add_routes() {
  // @@protoc_insertion_point(field_add:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.routes)
  return _internal_add_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::bgp_monitoring::v202205beta1::RouteInfo >&
GetRoutesForTargetResponse::routes() const {
  // @@protoc_insertion_point(field_list:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.routes)
  return routes_;
}

// map<uint32, string> as_names = 5[json_name = "asNames"];
inline int GetRoutesForTargetResponse::_internal_as_names_size() const {
  return as_names_.size();
}
inline int GetRoutesForTargetResponse::as_names_size() const {
  return _internal_as_names_size();
}
inline void GetRoutesForTargetResponse::clear_as_names() {
  as_names_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
GetRoutesForTargetResponse::_internal_as_names() const {
  return as_names_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >&
GetRoutesForTargetResponse::as_names() const {
  // @@protoc_insertion_point(field_map:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.as_names)
  return _internal_as_names();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
GetRoutesForTargetResponse::_internal_mutable_as_names() {
  return as_names_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::uint32, std::string >*
GetRoutesForTargetResponse::mutable_as_names() {
  // @@protoc_insertion_point(field_mutable_map:kentik.bgp_monitoring.v202205beta1.GetRoutesForTargetResponse.as_names)
  return _internal_mutable_as_names();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202205beta1
}  // namespace bgp_monitoring
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus>() {
  return ::kentik::bgp_monitoring::v202205beta1::BgpMonitorStatus_descriptor();
}
template <> struct is_proto_enum< ::kentik::bgp_monitoring::v202205beta1::BgpMetricType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::bgp_monitoring::v202205beta1::BgpMetricType>() {
  return ::kentik::bgp_monitoring::v202205beta1::BgpMetricType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fbgp_5fmonitoring_2fv202205beta1_2fbgp_5fmonitoring_2eproto
