// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/credential/v202407alpha1/credential.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
#include "kentik/user/v202211/user.pb.h"
#include "kentik/vault/v202312alpha1/vault.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto;
namespace kentik {
namespace credential {
namespace v202407alpha1 {
class CredentialGroup;
class CredentialGroupDefaultTypeInternal;
extern CredentialGroupDefaultTypeInternal _CredentialGroup_default_instance_;
class GetCredentialGroupRequest;
class GetCredentialGroupRequestDefaultTypeInternal;
extern GetCredentialGroupRequestDefaultTypeInternal _GetCredentialGroupRequest_default_instance_;
class GetCredentialGroupResponse;
class GetCredentialGroupResponseDefaultTypeInternal;
extern GetCredentialGroupResponseDefaultTypeInternal _GetCredentialGroupResponse_default_instance_;
class ListCredentialGroupRequest;
class ListCredentialGroupRequestDefaultTypeInternal;
extern ListCredentialGroupRequestDefaultTypeInternal _ListCredentialGroupRequest_default_instance_;
class ListCredentialGroupResponse;
class ListCredentialGroupResponseDefaultTypeInternal;
extern ListCredentialGroupResponseDefaultTypeInternal _ListCredentialGroupResponse_default_instance_;
}  // namespace v202407alpha1
}  // namespace credential
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::credential::v202407alpha1::CredentialGroup* Arena::CreateMaybeMessage<::kentik::credential::v202407alpha1::CredentialGroup>(Arena*);
template<> ::kentik::credential::v202407alpha1::GetCredentialGroupRequest* Arena::CreateMaybeMessage<::kentik::credential::v202407alpha1::GetCredentialGroupRequest>(Arena*);
template<> ::kentik::credential::v202407alpha1::GetCredentialGroupResponse* Arena::CreateMaybeMessage<::kentik::credential::v202407alpha1::GetCredentialGroupResponse>(Arena*);
template<> ::kentik::credential::v202407alpha1::ListCredentialGroupRequest* Arena::CreateMaybeMessage<::kentik::credential::v202407alpha1::ListCredentialGroupRequest>(Arena*);
template<> ::kentik::credential::v202407alpha1::ListCredentialGroupResponse* Arena::CreateMaybeMessage<::kentik::credential::v202407alpha1::ListCredentialGroupResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace credential {
namespace v202407alpha1 {

// ===================================================================

class CredentialGroup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.credential.v202407alpha1.CredentialGroup) */ {
 public:
  inline CredentialGroup() : CredentialGroup(nullptr) {};
  virtual ~CredentialGroup();

  CredentialGroup(const CredentialGroup& from);
  CredentialGroup(CredentialGroup&& from) noexcept
    : CredentialGroup() {
    *this = ::std::move(from);
  }

  inline CredentialGroup& operator=(const CredentialGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline CredentialGroup& operator=(CredentialGroup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CredentialGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CredentialGroup* internal_default_instance() {
    return reinterpret_cast<const CredentialGroup*>(
               &_CredentialGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CredentialGroup& a, CredentialGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(CredentialGroup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CredentialGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CredentialGroup* New() const final {
    return CreateMaybeMessage<CredentialGroup>(nullptr);
  }

  CredentialGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CredentialGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CredentialGroup& from);
  void MergeFrom(const CredentialGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CredentialGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.credential.v202407alpha1.CredentialGroup";
  }
  protected:
  explicit CredentialGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto);
    return ::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCredentialsFieldNumber = 9,
    kLabelsFieldNumber = 10,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 4,
    kCdateFieldNumber = 6,
    kEdateFieldNumber = 7,
    kCreatedByFieldNumber = 8,
    kVersionFieldNumber = 3,
    kTypeFieldNumber = 5,
  };
  // repeated .kentik.vault.v202312alpha1.Secret credentials = 9[json_name = "credentials"];
  int credentials_size() const;
  private:
  int _internal_credentials_size() const;
  public:
  void clear_credentials();
  ::kentik::vault::v202312alpha1::Secret* mutable_credentials(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret >*
      mutable_credentials();
  private:
  const ::kentik::vault::v202312alpha1::Secret& _internal_credentials(int index) const;
  ::kentik::vault::v202312alpha1::Secret* _internal_add_credentials();
  public:
  const ::kentik::vault::v202312alpha1::Secret& credentials(int index) const;
  ::kentik::vault::v202312alpha1::Secret* add_credentials();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret >&
      credentials() const;

  // repeated string labels = 10[json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // .kentik.user.v202211.User created_by = 8[json_name = "createdBy"];
  bool has_created_by() const;
  private:
  bool _internal_has_created_by() const;
  public:
  void clear_created_by();
  const ::kentik::user::v202211::User& created_by() const;
  ::kentik::user::v202211::User* release_created_by();
  ::kentik::user::v202211::User* mutable_created_by();
  void set_allocated_created_by(::kentik::user::v202211::User* created_by);
  private:
  const ::kentik::user::v202211::User& _internal_created_by() const;
  ::kentik::user::v202211::User* _internal_mutable_created_by();
  public:
  void unsafe_arena_set_allocated_created_by(
      ::kentik::user::v202211::User* created_by);
  ::kentik::user::v202211::User* unsafe_arena_release_created_by();

  // uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_version() const;
  void _internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_type();
  ::kentik::vault::v202312alpha1::SecretType type() const;
  void set_type(::kentik::vault::v202312alpha1::SecretType value);
  private:
  ::kentik::vault::v202312alpha1::SecretType _internal_type() const;
  void _internal_set_type(::kentik::vault::v202312alpha1::SecretType value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.credential.v202407alpha1.CredentialGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret > credentials_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  ::kentik::user::v202211::User* created_by_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto;
};
// -------------------------------------------------------------------

class GetCredentialGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.credential.v202407alpha1.GetCredentialGroupRequest) */ {
 public:
  inline GetCredentialGroupRequest() : GetCredentialGroupRequest(nullptr) {};
  virtual ~GetCredentialGroupRequest();

  GetCredentialGroupRequest(const GetCredentialGroupRequest& from);
  GetCredentialGroupRequest(GetCredentialGroupRequest&& from) noexcept
    : GetCredentialGroupRequest() {
    *this = ::std::move(from);
  }

  inline GetCredentialGroupRequest& operator=(const GetCredentialGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentialGroupRequest& operator=(GetCredentialGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCredentialGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCredentialGroupRequest* internal_default_instance() {
    return reinterpret_cast<const GetCredentialGroupRequest*>(
               &_GetCredentialGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetCredentialGroupRequest& a, GetCredentialGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentialGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentialGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCredentialGroupRequest* New() const final {
    return CreateMaybeMessage<GetCredentialGroupRequest>(nullptr);
  }

  GetCredentialGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCredentialGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCredentialGroupRequest& from);
  void MergeFrom(const GetCredentialGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentialGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.credential.v202407alpha1.GetCredentialGroupRequest";
  }
  protected:
  explicit GetCredentialGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto);
    return ::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto;
};
// -------------------------------------------------------------------

class GetCredentialGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.credential.v202407alpha1.GetCredentialGroupResponse) */ {
 public:
  inline GetCredentialGroupResponse() : GetCredentialGroupResponse(nullptr) {};
  virtual ~GetCredentialGroupResponse();

  GetCredentialGroupResponse(const GetCredentialGroupResponse& from);
  GetCredentialGroupResponse(GetCredentialGroupResponse&& from) noexcept
    : GetCredentialGroupResponse() {
    *this = ::std::move(from);
  }

  inline GetCredentialGroupResponse& operator=(const GetCredentialGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCredentialGroupResponse& operator=(GetCredentialGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCredentialGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetCredentialGroupResponse* internal_default_instance() {
    return reinterpret_cast<const GetCredentialGroupResponse*>(
               &_GetCredentialGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetCredentialGroupResponse& a, GetCredentialGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCredentialGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCredentialGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCredentialGroupResponse* New() const final {
    return CreateMaybeMessage<GetCredentialGroupResponse>(nullptr);
  }

  GetCredentialGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCredentialGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCredentialGroupResponse& from);
  void MergeFrom(const GetCredentialGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCredentialGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.credential.v202407alpha1.GetCredentialGroupResponse";
  }
  protected:
  explicit GetCredentialGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto);
    return ::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // .kentik.credential.v202407alpha1.CredentialGroup group = 1[json_name = "group"];
  bool has_group() const;
  private:
  bool _internal_has_group() const;
  public:
  void clear_group();
  const ::kentik::credential::v202407alpha1::CredentialGroup& group() const;
  ::kentik::credential::v202407alpha1::CredentialGroup* release_group();
  ::kentik::credential::v202407alpha1::CredentialGroup* mutable_group();
  void set_allocated_group(::kentik::credential::v202407alpha1::CredentialGroup* group);
  private:
  const ::kentik::credential::v202407alpha1::CredentialGroup& _internal_group() const;
  ::kentik::credential::v202407alpha1::CredentialGroup* _internal_mutable_group();
  public:
  void unsafe_arena_set_allocated_group(
      ::kentik::credential::v202407alpha1::CredentialGroup* group);
  ::kentik::credential::v202407alpha1::CredentialGroup* unsafe_arena_release_group();

  // @@protoc_insertion_point(class_scope:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::credential::v202407alpha1::CredentialGroup* group_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto;
};
// -------------------------------------------------------------------

class ListCredentialGroupRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.credential.v202407alpha1.ListCredentialGroupRequest) */ {
 public:
  inline ListCredentialGroupRequest() : ListCredentialGroupRequest(nullptr) {};
  virtual ~ListCredentialGroupRequest();

  ListCredentialGroupRequest(const ListCredentialGroupRequest& from);
  ListCredentialGroupRequest(ListCredentialGroupRequest&& from) noexcept
    : ListCredentialGroupRequest() {
    *this = ::std::move(from);
  }

  inline ListCredentialGroupRequest& operator=(const ListCredentialGroupRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCredentialGroupRequest& operator=(ListCredentialGroupRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCredentialGroupRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCredentialGroupRequest* internal_default_instance() {
    return reinterpret_cast<const ListCredentialGroupRequest*>(
               &_ListCredentialGroupRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListCredentialGroupRequest& a, ListCredentialGroupRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCredentialGroupRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCredentialGroupRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCredentialGroupRequest* New() const final {
    return CreateMaybeMessage<ListCredentialGroupRequest>(nullptr);
  }

  ListCredentialGroupRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCredentialGroupRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCredentialGroupRequest& from);
  void MergeFrom(const ListCredentialGroupRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCredentialGroupRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.credential.v202407alpha1.ListCredentialGroupRequest";
  }
  protected:
  explicit ListCredentialGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto);
    return ::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto;
};
// -------------------------------------------------------------------

class ListCredentialGroupResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.credential.v202407alpha1.ListCredentialGroupResponse) */ {
 public:
  inline ListCredentialGroupResponse() : ListCredentialGroupResponse(nullptr) {};
  virtual ~ListCredentialGroupResponse();

  ListCredentialGroupResponse(const ListCredentialGroupResponse& from);
  ListCredentialGroupResponse(ListCredentialGroupResponse&& from) noexcept
    : ListCredentialGroupResponse() {
    *this = ::std::move(from);
  }

  inline ListCredentialGroupResponse& operator=(const ListCredentialGroupResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCredentialGroupResponse& operator=(ListCredentialGroupResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListCredentialGroupResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListCredentialGroupResponse* internal_default_instance() {
    return reinterpret_cast<const ListCredentialGroupResponse*>(
               &_ListCredentialGroupResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListCredentialGroupResponse& a, ListCredentialGroupResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCredentialGroupResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCredentialGroupResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListCredentialGroupResponse* New() const final {
    return CreateMaybeMessage<ListCredentialGroupResponse>(nullptr);
  }

  ListCredentialGroupResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListCredentialGroupResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListCredentialGroupResponse& from);
  void MergeFrom(const ListCredentialGroupResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCredentialGroupResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.credential.v202407alpha1.ListCredentialGroupResponse";
  }
  protected:
  explicit ListCredentialGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto);
    return ::descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.credential.v202407alpha1.CredentialGroup groups = 1[json_name = "groups"];
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::kentik::credential::v202407alpha1::CredentialGroup* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::credential::v202407alpha1::CredentialGroup >*
      mutable_groups();
  private:
  const ::kentik::credential::v202407alpha1::CredentialGroup& _internal_groups(int index) const;
  ::kentik::credential::v202407alpha1::CredentialGroup* _internal_add_groups();
  public:
  const ::kentik::credential::v202407alpha1::CredentialGroup& groups(int index) const;
  ::kentik::credential::v202407alpha1::CredentialGroup* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::credential::v202407alpha1::CredentialGroup >&
      groups() const;

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::credential::v202407alpha1::CredentialGroup > groups_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CredentialGroup

// string id = 1[json_name = "id"];
inline void CredentialGroup::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CredentialGroup::id() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.id)
  return _internal_id();
}
inline void CredentialGroup::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.CredentialGroup.id)
}
inline std::string* CredentialGroup::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.CredentialGroup.id)
  return _internal_mutable_id();
}
inline const std::string& CredentialGroup::_internal_id() const {
  return id_.Get();
}
inline void CredentialGroup::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CredentialGroup::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.credential.v202407alpha1.CredentialGroup.id)
}
inline void CredentialGroup::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.credential.v202407alpha1.CredentialGroup.id)
}
inline void CredentialGroup::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.credential.v202407alpha1.CredentialGroup.id)
}
inline std::string* CredentialGroup::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CredentialGroup::release_id() {
  // @@protoc_insertion_point(field_release:kentik.credential.v202407alpha1.CredentialGroup.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CredentialGroup::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.id)
}
inline std::string* CredentialGroup::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.credential.v202407alpha1.CredentialGroup.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CredentialGroup::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.id)
}

// string name = 2[json_name = "name"];
inline void CredentialGroup::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CredentialGroup::name() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.name)
  return _internal_name();
}
inline void CredentialGroup::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.CredentialGroup.name)
}
inline std::string* CredentialGroup::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.CredentialGroup.name)
  return _internal_mutable_name();
}
inline const std::string& CredentialGroup::_internal_name() const {
  return name_.Get();
}
inline void CredentialGroup::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CredentialGroup::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.credential.v202407alpha1.CredentialGroup.name)
}
inline void CredentialGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.credential.v202407alpha1.CredentialGroup.name)
}
inline void CredentialGroup::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.credential.v202407alpha1.CredentialGroup.name)
}
inline std::string* CredentialGroup::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CredentialGroup::release_name() {
  // @@protoc_insertion_point(field_release:kentik.credential.v202407alpha1.CredentialGroup.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CredentialGroup::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.name)
}
inline std::string* CredentialGroup::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.credential.v202407alpha1.CredentialGroup.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CredentialGroup::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.name)
}

// uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CredentialGroup::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CredentialGroup::_internal_version() const {
  return version_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CredentialGroup::version() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.version)
  return _internal_version();
}
inline void CredentialGroup::_internal_set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
}
inline void CredentialGroup::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.CredentialGroup.version)
}

// string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CredentialGroup::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CredentialGroup::description() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.description)
  return _internal_description();
}
inline void CredentialGroup::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.CredentialGroup.description)
}
inline std::string* CredentialGroup::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.CredentialGroup.description)
  return _internal_mutable_description();
}
inline const std::string& CredentialGroup::_internal_description() const {
  return description_.Get();
}
inline void CredentialGroup::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CredentialGroup::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.credential.v202407alpha1.CredentialGroup.description)
}
inline void CredentialGroup::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.credential.v202407alpha1.CredentialGroup.description)
}
inline void CredentialGroup::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.credential.v202407alpha1.CredentialGroup.description)
}
inline std::string* CredentialGroup::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CredentialGroup::release_description() {
  // @@protoc_insertion_point(field_release:kentik.credential.v202407alpha1.CredentialGroup.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CredentialGroup::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.description)
}
inline std::string* CredentialGroup::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.credential.v202407alpha1.CredentialGroup.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CredentialGroup::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.description)
}

// .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CredentialGroup::clear_type() {
  type_ = 0;
}
inline ::kentik::vault::v202312alpha1::SecretType CredentialGroup::_internal_type() const {
  return static_cast< ::kentik::vault::v202312alpha1::SecretType >(type_);
}
inline ::kentik::vault::v202312alpha1::SecretType CredentialGroup::type() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.type)
  return _internal_type();
}
inline void CredentialGroup::_internal_set_type(::kentik::vault::v202312alpha1::SecretType value) {
  
  type_ = value;
}
inline void CredentialGroup::set_type(::kentik::vault::v202312alpha1::SecretType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.CredentialGroup.type)
}

// .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
inline bool CredentialGroup::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool CredentialGroup::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CredentialGroup::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CredentialGroup::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.cdate)
  return _internal_cdate();
}
inline void CredentialGroup::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CredentialGroup::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CredentialGroup::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.credential.v202407alpha1.CredentialGroup.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CredentialGroup::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CredentialGroup::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.CredentialGroup.cdate)
  return _internal_mutable_cdate();
}
inline void CredentialGroup::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.cdate)
}

// .google.protobuf.Timestamp edate = 7[json_name = "edate"];
inline bool CredentialGroup::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool CredentialGroup::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CredentialGroup::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CredentialGroup::edate() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.edate)
  return _internal_edate();
}
inline void CredentialGroup::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CredentialGroup::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CredentialGroup::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.credential.v202407alpha1.CredentialGroup.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CredentialGroup::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CredentialGroup::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.CredentialGroup.edate)
  return _internal_mutable_edate();
}
inline void CredentialGroup::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.edate)
}

// .kentik.user.v202211.User created_by = 8[json_name = "createdBy"];
inline bool CredentialGroup::_internal_has_created_by() const {
  return this != internal_default_instance() && created_by_ != nullptr;
}
inline bool CredentialGroup::has_created_by() const {
  return _internal_has_created_by();
}
inline const ::kentik::user::v202211::User& CredentialGroup::_internal_created_by() const {
  const ::kentik::user::v202211::User* p = created_by_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::user::v202211::User*>(
      &::kentik::user::v202211::_User_default_instance_);
}
inline const ::kentik::user::v202211::User& CredentialGroup::created_by() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.created_by)
  return _internal_created_by();
}
inline void CredentialGroup::unsafe_arena_set_allocated_created_by(
    ::kentik::user::v202211::User* created_by) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by_);
  }
  created_by_ = created_by;
  if (created_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.created_by)
}
inline ::kentik::user::v202211::User* CredentialGroup::release_created_by() {
  auto temp = unsafe_arena_release_created_by();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::user::v202211::User* CredentialGroup::unsafe_arena_release_created_by() {
  // @@protoc_insertion_point(field_release:kentik.credential.v202407alpha1.CredentialGroup.created_by)
  
  ::kentik::user::v202211::User* temp = created_by_;
  created_by_ = nullptr;
  return temp;
}
inline ::kentik::user::v202211::User* CredentialGroup::_internal_mutable_created_by() {
  
  if (created_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::user::v202211::User>(GetArena());
    created_by_ = p;
  }
  return created_by_;
}
inline ::kentik::user::v202211::User* CredentialGroup::mutable_created_by() {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.CredentialGroup.created_by)
  return _internal_mutable_created_by();
}
inline void CredentialGroup::set_allocated_created_by(::kentik::user::v202211::User* created_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by_);
  }
  if (created_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by)->GetArena();
    if (message_arena != submessage_arena) {
      created_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_by, submessage_arena);
    }
    
  } else {
    
  }
  created_by_ = created_by;
  // @@protoc_insertion_point(field_set_allocated:kentik.credential.v202407alpha1.CredentialGroup.created_by)
}

// repeated .kentik.vault.v202312alpha1.Secret credentials = 9[json_name = "credentials"];
inline int CredentialGroup::_internal_credentials_size() const {
  return credentials_.size();
}
inline int CredentialGroup::credentials_size() const {
  return _internal_credentials_size();
}
inline ::kentik::vault::v202312alpha1::Secret* CredentialGroup::mutable_credentials(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.CredentialGroup.credentials)
  return credentials_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret >*
CredentialGroup::mutable_credentials() {
  // @@protoc_insertion_point(field_mutable_list:kentik.credential.v202407alpha1.CredentialGroup.credentials)
  return &credentials_;
}
inline const ::kentik::vault::v202312alpha1::Secret& CredentialGroup::_internal_credentials(int index) const {
  return credentials_.Get(index);
}
inline const ::kentik::vault::v202312alpha1::Secret& CredentialGroup::credentials(int index) const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.credentials)
  return _internal_credentials(index);
}
inline ::kentik::vault::v202312alpha1::Secret* CredentialGroup::_internal_add_credentials() {
  return credentials_.Add();
}
inline ::kentik::vault::v202312alpha1::Secret* CredentialGroup::add_credentials() {
  // @@protoc_insertion_point(field_add:kentik.credential.v202407alpha1.CredentialGroup.credentials)
  return _internal_add_credentials();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::vault::v202312alpha1::Secret >&
CredentialGroup::credentials() const {
  // @@protoc_insertion_point(field_list:kentik.credential.v202407alpha1.CredentialGroup.credentials)
  return credentials_;
}

// repeated string labels = 10[json_name = "labels"];
inline int CredentialGroup::_internal_labels_size() const {
  return labels_.size();
}
inline int CredentialGroup::labels_size() const {
  return _internal_labels_size();
}
inline void CredentialGroup::clear_labels() {
  labels_.Clear();
}
inline std::string* CredentialGroup::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:kentik.credential.v202407alpha1.CredentialGroup.labels)
  return _internal_add_labels();
}
inline const std::string& CredentialGroup::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& CredentialGroup::labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.CredentialGroup.labels)
  return _internal_labels(index);
}
inline std::string* CredentialGroup::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.CredentialGroup.labels)
  return labels_.Mutable(index);
}
inline void CredentialGroup::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.CredentialGroup.labels)
  labels_.Mutable(index)->assign(value);
}
inline void CredentialGroup::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.CredentialGroup.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void CredentialGroup::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.credential.v202407alpha1.CredentialGroup.labels)
}
inline void CredentialGroup::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.credential.v202407alpha1.CredentialGroup.labels)
}
inline std::string* CredentialGroup::_internal_add_labels() {
  return labels_.Add();
}
inline void CredentialGroup::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.credential.v202407alpha1.CredentialGroup.labels)
}
inline void CredentialGroup::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.credential.v202407alpha1.CredentialGroup.labels)
}
inline void CredentialGroup::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.credential.v202407alpha1.CredentialGroup.labels)
}
inline void CredentialGroup::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.credential.v202407alpha1.CredentialGroup.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CredentialGroup::labels() const {
  // @@protoc_insertion_point(field_list:kentik.credential.v202407alpha1.CredentialGroup.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CredentialGroup::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.credential.v202407alpha1.CredentialGroup.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// GetCredentialGroupRequest

// string id = 1[json_name = "id"];
inline void GetCredentialGroupRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetCredentialGroupRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
  return _internal_id();
}
inline void GetCredentialGroupRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
}
inline std::string* GetCredentialGroupRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetCredentialGroupRequest::_internal_id() const {
  return id_.Get();
}
inline void GetCredentialGroupRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetCredentialGroupRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
}
inline void GetCredentialGroupRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
}
inline void GetCredentialGroupRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
}
inline std::string* GetCredentialGroupRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetCredentialGroupRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCredentialGroupRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
}
inline std::string* GetCredentialGroupRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetCredentialGroupRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.credential.v202407alpha1.GetCredentialGroupRequest.id)
}

// -------------------------------------------------------------------

// GetCredentialGroupResponse

// .kentik.credential.v202407alpha1.CredentialGroup group = 1[json_name = "group"];
inline bool GetCredentialGroupResponse::_internal_has_group() const {
  return this != internal_default_instance() && group_ != nullptr;
}
inline bool GetCredentialGroupResponse::has_group() const {
  return _internal_has_group();
}
inline void GetCredentialGroupResponse::clear_group() {
  if (GetArena() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
}
inline const ::kentik::credential::v202407alpha1::CredentialGroup& GetCredentialGroupResponse::_internal_group() const {
  const ::kentik::credential::v202407alpha1::CredentialGroup* p = group_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::credential::v202407alpha1::CredentialGroup*>(
      &::kentik::credential::v202407alpha1::_CredentialGroup_default_instance_);
}
inline const ::kentik::credential::v202407alpha1::CredentialGroup& GetCredentialGroupResponse::group() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.GetCredentialGroupResponse.group)
  return _internal_group();
}
inline void GetCredentialGroupResponse::unsafe_arena_set_allocated_group(
    ::kentik::credential::v202407alpha1::CredentialGroup* group) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(group_);
  }
  group_ = group;
  if (group) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.credential.v202407alpha1.GetCredentialGroupResponse.group)
}
inline ::kentik::credential::v202407alpha1::CredentialGroup* GetCredentialGroupResponse::release_group() {
  auto temp = unsafe_arena_release_group();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::credential::v202407alpha1::CredentialGroup* GetCredentialGroupResponse::unsafe_arena_release_group() {
  // @@protoc_insertion_point(field_release:kentik.credential.v202407alpha1.GetCredentialGroupResponse.group)
  
  ::kentik::credential::v202407alpha1::CredentialGroup* temp = group_;
  group_ = nullptr;
  return temp;
}
inline ::kentik::credential::v202407alpha1::CredentialGroup* GetCredentialGroupResponse::_internal_mutable_group() {
  
  if (group_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::credential::v202407alpha1::CredentialGroup>(GetArena());
    group_ = p;
  }
  return group_;
}
inline ::kentik::credential::v202407alpha1::CredentialGroup* GetCredentialGroupResponse::mutable_group() {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.GetCredentialGroupResponse.group)
  return _internal_mutable_group();
}
inline void GetCredentialGroupResponse::set_allocated_group(::kentik::credential::v202407alpha1::CredentialGroup* group) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete group_;
  }
  if (group) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(group);
    if (message_arena != submessage_arena) {
      group = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, group, submessage_arena);
    }
    
  } else {
    
  }
  group_ = group;
  // @@protoc_insertion_point(field_set_allocated:kentik.credential.v202407alpha1.GetCredentialGroupResponse.group)
}

// -------------------------------------------------------------------

// ListCredentialGroupRequest

// -------------------------------------------------------------------

// ListCredentialGroupResponse

// repeated .kentik.credential.v202407alpha1.CredentialGroup groups = 1[json_name = "groups"];
inline int ListCredentialGroupResponse::_internal_groups_size() const {
  return groups_.size();
}
inline int ListCredentialGroupResponse::groups_size() const {
  return _internal_groups_size();
}
inline void ListCredentialGroupResponse::clear_groups() {
  groups_.Clear();
}
inline ::kentik::credential::v202407alpha1::CredentialGroup* ListCredentialGroupResponse::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.credential.v202407alpha1.ListCredentialGroupResponse.groups)
  return groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::credential::v202407alpha1::CredentialGroup >*
ListCredentialGroupResponse::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:kentik.credential.v202407alpha1.ListCredentialGroupResponse.groups)
  return &groups_;
}
inline const ::kentik::credential::v202407alpha1::CredentialGroup& ListCredentialGroupResponse::_internal_groups(int index) const {
  return groups_.Get(index);
}
inline const ::kentik::credential::v202407alpha1::CredentialGroup& ListCredentialGroupResponse::groups(int index) const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.ListCredentialGroupResponse.groups)
  return _internal_groups(index);
}
inline ::kentik::credential::v202407alpha1::CredentialGroup* ListCredentialGroupResponse::_internal_add_groups() {
  return groups_.Add();
}
inline ::kentik::credential::v202407alpha1::CredentialGroup* ListCredentialGroupResponse::add_groups() {
  // @@protoc_insertion_point(field_add:kentik.credential.v202407alpha1.ListCredentialGroupResponse.groups)
  return _internal_add_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::credential::v202407alpha1::CredentialGroup >&
ListCredentialGroupResponse::groups() const {
  // @@protoc_insertion_point(field_list:kentik.credential.v202407alpha1.ListCredentialGroupResponse.groups)
  return groups_;
}

// uint32 invalid_count = 2[json_name = "invalidCount"];
inline void ListCredentialGroupResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCredentialGroupResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListCredentialGroupResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.credential.v202407alpha1.ListCredentialGroupResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListCredentialGroupResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListCredentialGroupResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.credential.v202407alpha1.ListCredentialGroupResponse.invalid_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202407alpha1
}  // namespace credential
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto
