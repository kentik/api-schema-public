// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/credential/v202407alpha1/credential.proto

#include "kentik/credential/v202407alpha1/credential.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fuser_2fv202211_2fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fvault_2fv202312alpha1_2fvault_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto;
namespace kentik {
namespace credential {
namespace v202407alpha1 {
class CredentialGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CredentialGroup> _instance;
} _CredentialGroup_default_instance_;
class GetCredentialGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCredentialGroupRequest> _instance;
} _GetCredentialGroupRequest_default_instance_;
class GetCredentialGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCredentialGroupResponse> _instance;
} _GetCredentialGroupResponse_default_instance_;
class ListCredentialGroupRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCredentialGroupRequest> _instance;
} _ListCredentialGroupRequest_default_instance_;
class ListCredentialGroupResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListCredentialGroupResponse> _instance;
} _ListCredentialGroupResponse_default_instance_;
}  // namespace v202407alpha1
}  // namespace credential
}  // namespace kentik
static void InitDefaultsscc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::credential::v202407alpha1::_CredentialGroup_default_instance_;
    new (ptr) ::kentik::credential::v202407alpha1::CredentialGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::credential::v202407alpha1::CredentialGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,
      &scc_info_Secret_kentik_2fvault_2fv202312alpha1_2fvault_2eproto.base,}};

static void InitDefaultsscc_info_GetCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::credential::v202407alpha1::_GetCredentialGroupRequest_default_instance_;
    new (ptr) ::kentik::credential::v202407alpha1::GetCredentialGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::credential::v202407alpha1::GetCredentialGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto}, {}};

static void InitDefaultsscc_info_GetCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::credential::v202407alpha1::_GetCredentialGroupResponse_default_instance_;
    new (ptr) ::kentik::credential::v202407alpha1::GetCredentialGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::credential::v202407alpha1::GetCredentialGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto}, {
      &scc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base,}};

static void InitDefaultsscc_info_ListCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::credential::v202407alpha1::_ListCredentialGroupRequest_default_instance_;
    new (ptr) ::kentik::credential::v202407alpha1::ListCredentialGroupRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::credential::v202407alpha1::ListCredentialGroupRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto}, {}};

static void InitDefaultsscc_info_ListCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::credential::v202407alpha1::_ListCredentialGroupResponse_default_instance_;
    new (ptr) ::kentik::credential::v202407alpha1::ListCredentialGroupResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::credential::v202407alpha1::ListCredentialGroupResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto}, {
      &scc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, version_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, edate_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, created_by_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, credentials_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::CredentialGroup, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::GetCredentialGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::GetCredentialGroupRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::GetCredentialGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::GetCredentialGroupResponse, group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::ListCredentialGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::ListCredentialGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::ListCredentialGroupResponse, groups_),
  PROTOBUF_FIELD_OFFSET(::kentik::credential::v202407alpha1::ListCredentialGroupResponse, invalid_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::credential::v202407alpha1::CredentialGroup)},
  { 15, -1, sizeof(::kentik::credential::v202407alpha1::GetCredentialGroupRequest)},
  { 21, -1, sizeof(::kentik::credential::v202407alpha1::GetCredentialGroupResponse)},
  { 27, -1, sizeof(::kentik::credential::v202407alpha1::ListCredentialGroupRequest)},
  { 32, -1, sizeof(::kentik::credential::v202407alpha1::ListCredentialGroupResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::credential::v202407alpha1::_CredentialGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::credential::v202407alpha1::_GetCredentialGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::credential::v202407alpha1::_GetCredentialGroupResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::credential::v202407alpha1::_ListCredentialGroupRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::credential::v202407alpha1::_ListCredentialGroupResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0kentik/credential/v202407alpha1/creden"
  "tial.proto\022\037kentik.credential.v202407alp"
  "ha1\032\034google/api/annotations.proto\032\027googl"
  "e/api/client.proto\032\037google/api/field_beh"
  "avior.proto\032\037google/protobuf/timestamp.p"
  "roto\032.protoc-gen-openapiv2/options/annot"
  "ations.proto\032%kentik/core/v202303/annota"
  "tions.proto\032\036kentik/user/v202211/user.pr"
  "oto\032&kentik/vault/v202312alpha1/vault.pr"
  "oto\"\375\003\n\017CredentialGroup\022\016\n\002id\030\001 \001(\tR\002id\022"
  "\022\n\004name\030\002 \001(\tR\004name\0227\n\007version\030\003 \001(\rB\035\222A"
  "\0262\024The secret\'s version\342A\001\002R\007version\022=\n\013"
  "description\030\004 \001(\tB\033\222A\0302\026Purpose of this "
  "secretR\013description\022R\n\004type\030\005 \001(\0162&.kent"
  "ik.vault.v202312alpha1.SecretTypeB\026\222A\0232\021"
  "The secret\'s typeR\004type\0220\n\005cdate\030\006 \001(\0132\032"
  ".google.protobuf.TimestampR\005cdate\0220\n\005eda"
  "te\030\007 \001(\0132\032.google.protobuf.TimestampR\005ed"
  "ate\0228\n\ncreated_by\030\010 \001(\0132\031.kentik.user.v2"
  "02211.UserR\tcreatedBy\022D\n\013credentials\030\t \003"
  "(\0132\".kentik.vault.v202312alpha1.SecretR\013"
  "credentials\022\026\n\006labels\030\n \003(\tR\006labels\"+\n\031G"
  "etCredentialGroupRequest\022\016\n\002id\030\001 \001(\tR\002id"
  "\"d\n\032GetCredentialGroupResponse\022F\n\005group\030"
  "\001 \001(\01320.kentik.credential.v202407alpha1."
  "CredentialGroupR\005group\"\034\n\032ListCredential"
  "GroupRequest\"\214\001\n\033ListCredentialGroupResp"
  "onse\022H\n\006groups\030\001 \003(\01320.kentik.credential"
  ".v202407alpha1.CredentialGroupR\006groups\022#"
  "\n\rinvalid_count\030\002 \001(\rR\014invalidCount2\327\005\n\021"
  "CredentialService\022\313\002\n\022GetCredentialGroup"
  "\022:.kentik.credential.v202407alpha1.GetCr"
  "edentialGroupRequest\032;.kentik.credential"
  ".v202407alpha1.GetCredentialGroupRespons"
  "e\"\273\001\222As\022\035Get a credential group by id.\032>"
  "Returns specific credential group inform"
  "ation in Kentik vault.*\022GetCredentialGro"
  "up\362\327\002\025admin.credential:read\202\323\344\223\002&\022$/cred"
  "ential/v202407alpha1/group/{id}\022\303\002\n\023List"
  "CredentialGroup\022;.kentik.credential.v202"
  "407alpha1.ListCredentialGroupRequest\032<.k"
  "entik.credential.v202407alpha1.ListCrede"
  "ntialGroupResponse\"\260\001\222Am\022\027List credentia"
  "l groups.\032=Returns list of credential gr"
  "oup information in Kentik vault.*\023ListCr"
  "edentialGroup\362\327\002\025admin.credential:read\202\323"
  "\344\223\002!\022\037/credential/v202407alpha1/group\032.\312"
  "A\023grpc.api.kentik.com\352\327\002\020admin.credentia"
  "l\220\330\002\003B\250\004ZUgithub.com/kentik/api-schema-p"
  "ublic/gen/go/kentik/credential/v202407al"
  "pha1;credential\222A\315\003\022\346\001\n\025Credentials Vaul"
  "t API\022w# Overview\nThe Credentials Vault "
  "API enables programmatic access to crede"
  "ntial information in Kentik Credential V"
  "ault.\n\"E\n\026Kentik API Engineering\022+https:"
  "//github.com/kentik/api-schema-public2\rv"
  "202407alpha1*\001\0022\020application/json:\020appli"
  "cation/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Em"
  "ail \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Token "
  "\002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r]\n%General inf"
  "ormation about Kentik APIs\0224https://kb.k"
  "entik.com/v0/Ab09.htm#Ab09-APIs_Overview"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto_deps[8] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto,
  &::descriptor_table_kentik_2fvault_2fv202312alpha1_2fvault_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto_sccs[5] = {
  &scc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base,
  &scc_info_GetCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base,
  &scc_info_GetCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base,
  &scc_info_ListCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base,
  &scc_info_ListCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto, "kentik/credential/v202407alpha1/credential.proto", 2488,
  &descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto_once, descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto_sccs, descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto_deps, 5, 8,
  schemas, file_default_instances, TableStruct_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto::offsets,
  file_level_metadata_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto, 5, file_level_enum_descriptors_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto, file_level_service_descriptors_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto)), true);
namespace kentik {
namespace credential {
namespace v202407alpha1 {

// ===================================================================

void CredentialGroup::InitAsDefaultInstance() {
  ::kentik::credential::v202407alpha1::_CredentialGroup_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::credential::v202407alpha1::_CredentialGroup_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::credential::v202407alpha1::_CredentialGroup_default_instance_._instance.get_mutable()->created_by_ = const_cast< ::kentik::user::v202211::User*>(
      ::kentik::user::v202211::User::internal_default_instance());
}
class CredentialGroup::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const CredentialGroup* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const CredentialGroup* msg);
  static const ::kentik::user::v202211::User& created_by(const CredentialGroup* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CredentialGroup::_Internal::cdate(const CredentialGroup* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
CredentialGroup::_Internal::edate(const CredentialGroup* msg) {
  return *msg->edate_;
}
const ::kentik::user::v202211::User&
CredentialGroup::_Internal::created_by(const CredentialGroup* msg) {
  return *msg->created_by_;
}
void CredentialGroup::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void CredentialGroup::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
void CredentialGroup::clear_created_by() {
  if (GetArena() == nullptr && created_by_ != nullptr) {
    delete created_by_;
  }
  created_by_ = nullptr;
}
void CredentialGroup::clear_credentials() {
  credentials_.Clear();
}
CredentialGroup::CredentialGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  credentials_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.credential.v202407alpha1.CredentialGroup)
}
CredentialGroup::CredentialGroup(const CredentialGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      credentials_(from.credentials_),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  if (from._internal_has_created_by()) {
    created_by_ = new ::kentik::user::v202211::User(*from.created_by_);
  } else {
    created_by_ = nullptr;
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:kentik.credential.v202407alpha1.CredentialGroup)
}

void CredentialGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&cdate_)) + sizeof(type_));
}

CredentialGroup::~CredentialGroup() {
  // @@protoc_insertion_point(destructor:kentik.credential.v202407alpha1.CredentialGroup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CredentialGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
  if (this != internal_default_instance()) delete created_by_;
}

void CredentialGroup::ArenaDtor(void* object) {
  CredentialGroup* _this = reinterpret_cast< CredentialGroup* >(object);
  (void)_this;
}
void CredentialGroup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CredentialGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CredentialGroup& CredentialGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CredentialGroup_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  return *internal_default_instance();
}


void CredentialGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.credential.v202407alpha1.CredentialGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  credentials_.Clear();
  labels_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  if (GetArena() == nullptr && created_by_ != nullptr) {
    delete created_by_;
  }
  created_by_ = nullptr;
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&version_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CredentialGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.credential.v202407alpha1.CredentialGroup.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.credential.v202407alpha1.CredentialGroup.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.credential.v202407alpha1.CredentialGroup.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::vault::v202312alpha1::SecretType>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.user.v202211.User created_by = 8[json_name = "createdBy"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_by(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.vault.v202312alpha1.Secret credentials = 9[json_name = "credentials"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_credentials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string labels = 10[json_name = "labels"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.credential.v202407alpha1.CredentialGroup.labels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CredentialGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.credential.v202407alpha1.CredentialGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.credential.v202407alpha1.CredentialGroup.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.credential.v202407alpha1.CredentialGroup.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_version(), target);
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.credential.v202407alpha1.CredentialGroup.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::edate(this), target, stream);
  }

  // .kentik.user.v202211.User created_by = 8[json_name = "createdBy"];
  if (this->has_created_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::created_by(this), target, stream);
  }

  // repeated .kentik.vault.v202312alpha1.Secret credentials = 9[json_name = "credentials"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_credentials_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_credentials(i), target, stream);
  }

  // repeated string labels = 10[json_name = "labels"];
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.credential.v202407alpha1.CredentialGroup.labels");
    target = stream->WriteString(10, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.credential.v202407alpha1.CredentialGroup)
  return target;
}

size_t CredentialGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.credential.v202407alpha1.CredentialGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.vault.v202312alpha1.Secret credentials = 9[json_name = "credentials"];
  total_size += 1UL * this->_internal_credentials_size();
  for (const auto& msg : this->credentials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string labels = 10[json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .kentik.user.v202211.User created_by = 8[json_name = "createdBy"];
  if (this->has_created_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_by_);
  }

  // uint32 version = 3[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_version());
  }

  // .kentik.vault.v202312alpha1.SecretType type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CredentialGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.credential.v202407alpha1.CredentialGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CredentialGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CredentialGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.credential.v202407alpha1.CredentialGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.credential.v202407alpha1.CredentialGroup)
    MergeFrom(*source);
  }
}

void CredentialGroup::MergeFrom(const CredentialGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.credential.v202407alpha1.CredentialGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  credentials_.MergeFrom(from.credentials_);
  labels_.MergeFrom(from.labels_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.has_created_by()) {
    _internal_mutable_created_by()->::kentik::user::v202211::User::MergeFrom(from._internal_created_by());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CredentialGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.credential.v202407alpha1.CredentialGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CredentialGroup::CopyFrom(const CredentialGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.credential.v202407alpha1.CredentialGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CredentialGroup::IsInitialized() const {
  return true;
}

void CredentialGroup::InternalSwap(CredentialGroup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  credentials_.InternalSwap(&other->credentials_);
  labels_.InternalSwap(&other->labels_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CredentialGroup, type_)
      + sizeof(CredentialGroup::type_)
      - PROTOBUF_FIELD_OFFSET(CredentialGroup, cdate_)>(
          reinterpret_cast<char*>(&cdate_),
          reinterpret_cast<char*>(&other->cdate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CredentialGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCredentialGroupRequest::InitAsDefaultInstance() {
}
class GetCredentialGroupRequest::_Internal {
 public:
};

GetCredentialGroupRequest::GetCredentialGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
}
GetCredentialGroupRequest::GetCredentialGroupRequest(const GetCredentialGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
}

void GetCredentialGroupRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCredentialGroupRequest::~GetCredentialGroupRequest() {
  // @@protoc_insertion_point(destructor:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCredentialGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCredentialGroupRequest::ArenaDtor(void* object) {
  GetCredentialGroupRequest* _this = reinterpret_cast< GetCredentialGroupRequest* >(object);
  (void)_this;
}
void GetCredentialGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCredentialGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCredentialGroupRequest& GetCredentialGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  return *internal_default_instance();
}


void GetCredentialGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCredentialGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.credential.v202407alpha1.GetCredentialGroupRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCredentialGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.credential.v202407alpha1.GetCredentialGroupRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  return target;
}

size_t GetCredentialGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCredentialGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCredentialGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCredentialGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
    MergeFrom(*source);
  }
}

void GetCredentialGroupRequest::MergeFrom(const GetCredentialGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetCredentialGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCredentialGroupRequest::CopyFrom(const GetCredentialGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.credential.v202407alpha1.GetCredentialGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCredentialGroupRequest::IsInitialized() const {
  return true;
}

void GetCredentialGroupRequest::InternalSwap(GetCredentialGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCredentialGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetCredentialGroupResponse::InitAsDefaultInstance() {
  ::kentik::credential::v202407alpha1::_GetCredentialGroupResponse_default_instance_._instance.get_mutable()->group_ = const_cast< ::kentik::credential::v202407alpha1::CredentialGroup*>(
      ::kentik::credential::v202407alpha1::CredentialGroup::internal_default_instance());
}
class GetCredentialGroupResponse::_Internal {
 public:
  static const ::kentik::credential::v202407alpha1::CredentialGroup& group(const GetCredentialGroupResponse* msg);
};

const ::kentik::credential::v202407alpha1::CredentialGroup&
GetCredentialGroupResponse::_Internal::group(const GetCredentialGroupResponse* msg) {
  return *msg->group_;
}
GetCredentialGroupResponse::GetCredentialGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
}
GetCredentialGroupResponse::GetCredentialGroupResponse(const GetCredentialGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_group()) {
    group_ = new ::kentik::credential::v202407alpha1::CredentialGroup(*from.group_);
  } else {
    group_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
}

void GetCredentialGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  group_ = nullptr;
}

GetCredentialGroupResponse::~GetCredentialGroupResponse() {
  // @@protoc_insertion_point(destructor:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCredentialGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete group_;
}

void GetCredentialGroupResponse::ArenaDtor(void* object) {
  GetCredentialGroupResponse* _this = reinterpret_cast< GetCredentialGroupResponse* >(object);
  (void)_this;
}
void GetCredentialGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCredentialGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCredentialGroupResponse& GetCredentialGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  return *internal_default_instance();
}


void GetCredentialGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && group_ != nullptr) {
    delete group_;
  }
  group_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCredentialGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.credential.v202407alpha1.CredentialGroup group = 1[json_name = "group"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_group(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCredentialGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.credential.v202407alpha1.CredentialGroup group = 1[json_name = "group"];
  if (this->has_group()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::group(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  return target;
}

size_t GetCredentialGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.credential.v202407alpha1.CredentialGroup group = 1[json_name = "group"];
  if (this->has_group()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *group_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCredentialGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCredentialGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCredentialGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
    MergeFrom(*source);
  }
}

void GetCredentialGroupResponse::MergeFrom(const GetCredentialGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group()) {
    _internal_mutable_group()->::kentik::credential::v202407alpha1::CredentialGroup::MergeFrom(from._internal_group());
  }
}

void GetCredentialGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCredentialGroupResponse::CopyFrom(const GetCredentialGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.credential.v202407alpha1.GetCredentialGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCredentialGroupResponse::IsInitialized() const {
  return true;
}

void GetCredentialGroupResponse::InternalSwap(GetCredentialGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(group_, other->group_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCredentialGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCredentialGroupRequest::InitAsDefaultInstance() {
}
class ListCredentialGroupRequest::_Internal {
 public:
};

ListCredentialGroupRequest::ListCredentialGroupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
}
ListCredentialGroupRequest::ListCredentialGroupRequest(const ListCredentialGroupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
}

void ListCredentialGroupRequest::SharedCtor() {
}

ListCredentialGroupRequest::~ListCredentialGroupRequest() {
  // @@protoc_insertion_point(destructor:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCredentialGroupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCredentialGroupRequest::ArenaDtor(void* object) {
  ListCredentialGroupRequest* _this = reinterpret_cast< ListCredentialGroupRequest* >(object);
  (void)_this;
}
void ListCredentialGroupRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCredentialGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCredentialGroupRequest& ListCredentialGroupRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCredentialGroupRequest_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  return *internal_default_instance();
}


void ListCredentialGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCredentialGroupRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCredentialGroupRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  return target;
}

size_t ListCredentialGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCredentialGroupRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCredentialGroupRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCredentialGroupRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
    MergeFrom(*source);
  }
}

void ListCredentialGroupRequest::MergeFrom(const ListCredentialGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListCredentialGroupRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCredentialGroupRequest::CopyFrom(const ListCredentialGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.credential.v202407alpha1.ListCredentialGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCredentialGroupRequest::IsInitialized() const {
  return true;
}

void ListCredentialGroupRequest::InternalSwap(ListCredentialGroupRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCredentialGroupRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListCredentialGroupResponse::InitAsDefaultInstance() {
}
class ListCredentialGroupResponse::_Internal {
 public:
};

ListCredentialGroupResponse::ListCredentialGroupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  groups_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
}
ListCredentialGroupResponse::ListCredentialGroupResponse(const ListCredentialGroupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      groups_(from.groups_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
}

void ListCredentialGroupResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  invalid_count_ = 0u;
}

ListCredentialGroupResponse::~ListCredentialGroupResponse() {
  // @@protoc_insertion_point(destructor:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListCredentialGroupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListCredentialGroupResponse::ArenaDtor(void* object) {
  ListCredentialGroupResponse* _this = reinterpret_cast< ListCredentialGroupResponse* >(object);
  (void)_this;
}
void ListCredentialGroupResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCredentialGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListCredentialGroupResponse& ListCredentialGroupResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListCredentialGroupResponse_kentik_2fcredential_2fv202407alpha1_2fcredential_2eproto.base);
  return *internal_default_instance();
}


void ListCredentialGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  groups_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCredentialGroupResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.credential.v202407alpha1.CredentialGroup groups = 1[json_name = "groups"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCredentialGroupResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.credential.v202407alpha1.CredentialGroup groups = 1[json_name = "groups"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_groups(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  return target;
}

size_t ListCredentialGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.credential.v202407alpha1.CredentialGroup groups = 1[json_name = "groups"];
  total_size += 1UL * this->_internal_groups_size();
  for (const auto& msg : this->groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListCredentialGroupResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCredentialGroupResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListCredentialGroupResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
    MergeFrom(*source);
  }
}

void ListCredentialGroupResponse::MergeFrom(const ListCredentialGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  groups_.MergeFrom(from.groups_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListCredentialGroupResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCredentialGroupResponse::CopyFrom(const ListCredentialGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.credential.v202407alpha1.ListCredentialGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCredentialGroupResponse::IsInitialized() const {
  return true;
}

void ListCredentialGroupResponse::InternalSwap(ListCredentialGroupResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  groups_.InternalSwap(&other->groups_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCredentialGroupResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202407alpha1
}  // namespace credential
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::credential::v202407alpha1::CredentialGroup* Arena::CreateMaybeMessage< ::kentik::credential::v202407alpha1::CredentialGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::credential::v202407alpha1::CredentialGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::credential::v202407alpha1::GetCredentialGroupRequest* Arena::CreateMaybeMessage< ::kentik::credential::v202407alpha1::GetCredentialGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::credential::v202407alpha1::GetCredentialGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::credential::v202407alpha1::GetCredentialGroupResponse* Arena::CreateMaybeMessage< ::kentik::credential::v202407alpha1::GetCredentialGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::credential::v202407alpha1::GetCredentialGroupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::credential::v202407alpha1::ListCredentialGroupRequest* Arena::CreateMaybeMessage< ::kentik::credential::v202407alpha1::ListCredentialGroupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::credential::v202407alpha1::ListCredentialGroupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::credential::v202407alpha1::ListCredentialGroupResponse* Arena::CreateMaybeMessage< ::kentik::credential::v202407alpha1::ListCredentialGroupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::credential::v202407alpha1::ListCredentialGroupResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
