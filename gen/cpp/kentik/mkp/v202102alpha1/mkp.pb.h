// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/mkp/v202102alpha1/mkp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[40]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
namespace kentik {
namespace mkp {
namespace v202102alpha1 {
class Activate;
class ActivateDefaultTypeInternal;
extern ActivateDefaultTypeInternal _Activate_default_instance_;
class Alert;
class AlertDefaultTypeInternal;
extern AlertDefaultTypeInternal _Alert_default_instance_;
class Asset;
class AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Asset_Report;
class Asset_ReportDefaultTypeInternal;
extern Asset_ReportDefaultTypeInternal _Asset_Report_default_instance_;
class Condition;
class ConditionDefaultTypeInternal;
extern ConditionDefaultTypeInternal _Condition_default_instance_;
class CreatePackageRequest;
class CreatePackageRequestDefaultTypeInternal;
extern CreatePackageRequestDefaultTypeInternal _CreatePackageRequest_default_instance_;
class CreatePackageResponse;
class CreatePackageResponseDefaultTypeInternal;
extern CreatePackageResponseDefaultTypeInternal _CreatePackageResponse_default_instance_;
class CreateTenantRequest;
class CreateTenantRequestDefaultTypeInternal;
extern CreateTenantRequestDefaultTypeInternal _CreateTenantRequest_default_instance_;
class CreateTenantResponse;
class CreateTenantResponseDefaultTypeInternal;
extern CreateTenantResponseDefaultTypeInternal _CreateTenantResponse_default_instance_;
class CustomDimension;
class CustomDimensionDefaultTypeInternal;
extern CustomDimensionDefaultTypeInternal _CustomDimension_default_instance_;
class DeletePackageRequest;
class DeletePackageRequestDefaultTypeInternal;
extern DeletePackageRequestDefaultTypeInternal _DeletePackageRequest_default_instance_;
class DeletePackageResponse;
class DeletePackageResponseDefaultTypeInternal;
extern DeletePackageResponseDefaultTypeInternal _DeletePackageResponse_default_instance_;
class DeleteTenantRequest;
class DeleteTenantRequestDefaultTypeInternal;
extern DeleteTenantRequestDefaultTypeInternal _DeleteTenantRequest_default_instance_;
class DeleteTenantResponse;
class DeleteTenantResponseDefaultTypeInternal;
extern DeleteTenantResponseDefaultTypeInternal _DeleteTenantResponse_default_instance_;
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class Filter;
class FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class FilterField;
class FilterFieldDefaultTypeInternal;
extern FilterFieldDefaultTypeInternal _FilterField_default_instance_;
class GetPackageRequest;
class GetPackageRequestDefaultTypeInternal;
extern GetPackageRequestDefaultTypeInternal _GetPackageRequest_default_instance_;
class GetPackageResponse;
class GetPackageResponseDefaultTypeInternal;
extern GetPackageResponseDefaultTypeInternal _GetPackageResponse_default_instance_;
class GetTenantRequest;
class GetTenantRequestDefaultTypeInternal;
extern GetTenantRequestDefaultTypeInternal _GetTenantRequest_default_instance_;
class GetTenantResponse;
class GetTenantResponseDefaultTypeInternal;
extern GetTenantResponseDefaultTypeInternal _GetTenantResponse_default_instance_;
class ListPackageRequest;
class ListPackageRequestDefaultTypeInternal;
extern ListPackageRequestDefaultTypeInternal _ListPackageRequest_default_instance_;
class ListPackageResponse;
class ListPackageResponseDefaultTypeInternal;
extern ListPackageResponseDefaultTypeInternal _ListPackageResponse_default_instance_;
class ListTenantRequest;
class ListTenantRequestDefaultTypeInternal;
extern ListTenantRequestDefaultTypeInternal _ListTenantRequest_default_instance_;
class ListTenantResponse;
class ListTenantResponseDefaultTypeInternal;
extern ListTenantResponseDefaultTypeInternal _ListTenantResponse_default_instance_;
class Mitigation;
class MitigationDefaultTypeInternal;
extern MitigationDefaultTypeInternal _Mitigation_default_instance_;
class NotificationChannel;
class NotificationChannelDefaultTypeInternal;
extern NotificationChannelDefaultTypeInternal _NotificationChannel_default_instance_;
class Package;
class PackageDefaultTypeInternal;
extern PackageDefaultTypeInternal _Package_default_instance_;
class PatchPackageRequest;
class PatchPackageRequestDefaultTypeInternal;
extern PatchPackageRequestDefaultTypeInternal _PatchPackageRequest_default_instance_;
class PatchPackageResponse;
class PatchPackageResponseDefaultTypeInternal;
extern PatchPackageResponseDefaultTypeInternal _PatchPackageResponse_default_instance_;
class PatchTenantRequest;
class PatchTenantRequestDefaultTypeInternal;
extern PatchTenantRequestDefaultTypeInternal _PatchTenantRequest_default_instance_;
class PatchTenantResponse;
class PatchTenantResponseDefaultTypeInternal;
extern PatchTenantResponseDefaultTypeInternal _PatchTenantResponse_default_instance_;
class Tenant;
class TenantDefaultTypeInternal;
extern TenantDefaultTypeInternal _Tenant_default_instance_;
class TenantLink;
class TenantLinkDefaultTypeInternal;
extern TenantLinkDefaultTypeInternal _TenantLink_default_instance_;
class Threshold;
class ThresholdDefaultTypeInternal;
extern ThresholdDefaultTypeInternal _Threshold_default_instance_;
class UpdatePackageRequest;
class UpdatePackageRequestDefaultTypeInternal;
extern UpdatePackageRequestDefaultTypeInternal _UpdatePackageRequest_default_instance_;
class UpdatePackageResponse;
class UpdatePackageResponseDefaultTypeInternal;
extern UpdatePackageResponseDefaultTypeInternal _UpdatePackageResponse_default_instance_;
class UpdateTenantRequest;
class UpdateTenantRequestDefaultTypeInternal;
extern UpdateTenantRequestDefaultTypeInternal _UpdateTenantRequest_default_instance_;
class UpdateTenantResponse;
class UpdateTenantResponseDefaultTypeInternal;
extern UpdateTenantResponseDefaultTypeInternal _UpdateTenantResponse_default_instance_;
class User;
class UserDefaultTypeInternal;
extern UserDefaultTypeInternal _User_default_instance_;
}  // namespace v202102alpha1
}  // namespace mkp
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::mkp::v202102alpha1::Activate* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Activate>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Alert* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Alert>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Asset* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Asset>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Asset_Report* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Asset_Report>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Condition* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Condition>(Arena*);
template<> ::kentik::mkp::v202102alpha1::CreatePackageRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::CreatePackageRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::CreatePackageResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::CreatePackageResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::CreateTenantRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::CreateTenantRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::CreateTenantResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::CreateTenantResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::CustomDimension* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::CustomDimension>(Arena*);
template<> ::kentik::mkp::v202102alpha1::DeletePackageRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::DeletePackageRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::DeletePackageResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::DeletePackageResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::DeleteTenantRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::DeleteTenantRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::DeleteTenantResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::DeleteTenantResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Device* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Device>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Filter* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Filter>(Arena*);
template<> ::kentik::mkp::v202102alpha1::FilterField* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::FilterField>(Arena*);
template<> ::kentik::mkp::v202102alpha1::GetPackageRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::GetPackageRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::GetPackageResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::GetPackageResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::GetTenantRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::GetTenantRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::GetTenantResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::GetTenantResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::ListPackageRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::ListPackageRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::ListPackageResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::ListPackageResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::ListTenantRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::ListTenantRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::ListTenantResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::ListTenantResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Mitigation* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Mitigation>(Arena*);
template<> ::kentik::mkp::v202102alpha1::NotificationChannel* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::NotificationChannel>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Package* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Package>(Arena*);
template<> ::kentik::mkp::v202102alpha1::PatchPackageRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::PatchPackageRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::PatchPackageResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::PatchPackageResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::PatchTenantRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::PatchTenantRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::PatchTenantResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::PatchTenantResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Tenant* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Tenant>(Arena*);
template<> ::kentik::mkp::v202102alpha1::TenantLink* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::TenantLink>(Arena*);
template<> ::kentik::mkp::v202102alpha1::Threshold* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::Threshold>(Arena*);
template<> ::kentik::mkp::v202102alpha1::UpdatePackageRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::UpdatePackageRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::UpdatePackageResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::UpdatePackageResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::UpdateTenantRequest* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::UpdateTenantRequest>(Arena*);
template<> ::kentik::mkp::v202102alpha1::UpdateTenantResponse* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::UpdateTenantResponse>(Arena*);
template<> ::kentik::mkp::v202102alpha1::User* Arena::CreateMaybeMessage<::kentik::mkp::v202102alpha1::User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace mkp {
namespace v202102alpha1 {

// ===================================================================

class Alert PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Alert) */ {
 public:
  inline Alert() : Alert(nullptr) {};
  virtual ~Alert();

  Alert(const Alert& from);
  Alert(Alert&& from) noexcept
    : Alert() {
    *this = ::std::move(from);
  }

  inline Alert& operator=(const Alert& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alert& operator=(Alert&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Alert& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Alert* internal_default_instance() {
    return reinterpret_cast<const Alert*>(
               &_Alert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Alert& a, Alert& b) {
    a.Swap(&b);
  }
  inline void Swap(Alert* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Alert* New() const final {
    return CreateMaybeMessage<Alert>(nullptr);
  }

  Alert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Alert>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Alert& from);
  void MergeFrom(const Alert& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Alert* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Alert";
  }
  protected:
  explicit Alert(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThresholdsFieldNumber = 3,
    kSecondaryMetricsFieldNumber = 5,
    kPrimaryMetricFieldNumber = 4,
    kSubpolicyIdFieldNumber = 7,
    kPolicyIdFieldNumber = 2,
    kSavedFieldNumber = 1,
    kIsTemplateFieldNumber = 6,
  };
  // repeated .kentik.mkp.v202102alpha1.Threshold thresholds = 3[json_name = "thresholds"];
  int thresholds_size() const;
  private:
  int _internal_thresholds_size() const;
  public:
  void clear_thresholds();
  ::kentik::mkp::v202102alpha1::Threshold* mutable_thresholds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Threshold >*
      mutable_thresholds();
  private:
  const ::kentik::mkp::v202102alpha1::Threshold& _internal_thresholds(int index) const;
  ::kentik::mkp::v202102alpha1::Threshold* _internal_add_thresholds();
  public:
  const ::kentik::mkp::v202102alpha1::Threshold& thresholds(int index) const;
  ::kentik::mkp::v202102alpha1::Threshold* add_thresholds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Threshold >&
      thresholds() const;

  // repeated string secondary_metrics = 5[json_name = "secondaryMetrics"];
  int secondary_metrics_size() const;
  private:
  int _internal_secondary_metrics_size() const;
  public:
  void clear_secondary_metrics();
  const std::string& secondary_metrics(int index) const;
  std::string* mutable_secondary_metrics(int index);
  void set_secondary_metrics(int index, const std::string& value);
  void set_secondary_metrics(int index, std::string&& value);
  void set_secondary_metrics(int index, const char* value);
  void set_secondary_metrics(int index, const char* value, size_t size);
  std::string* add_secondary_metrics();
  void add_secondary_metrics(const std::string& value);
  void add_secondary_metrics(std::string&& value);
  void add_secondary_metrics(const char* value);
  void add_secondary_metrics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& secondary_metrics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_secondary_metrics();
  private:
  const std::string& _internal_secondary_metrics(int index) const;
  std::string* _internal_add_secondary_metrics();
  public:

  // string primary_metric = 4[json_name = "primaryMetric"];
  void clear_primary_metric();
  const std::string& primary_metric() const;
  void set_primary_metric(const std::string& value);
  void set_primary_metric(std::string&& value);
  void set_primary_metric(const char* value);
  void set_primary_metric(const char* value, size_t size);
  std::string* mutable_primary_metric();
  std::string* release_primary_metric();
  void set_allocated_primary_metric(std::string* primary_metric);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_primary_metric();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_primary_metric(
      std::string* primary_metric);
  private:
  const std::string& _internal_primary_metric() const;
  void _internal_set_primary_metric(const std::string& value);
  std::string* _internal_mutable_primary_metric();
  public:

  // string subpolicy_id = 7[json_name = "subpolicyId"];
  void clear_subpolicy_id();
  const std::string& subpolicy_id() const;
  void set_subpolicy_id(const std::string& value);
  void set_subpolicy_id(std::string&& value);
  void set_subpolicy_id(const char* value);
  void set_subpolicy_id(const char* value, size_t size);
  std::string* mutable_subpolicy_id();
  std::string* release_subpolicy_id();
  void set_allocated_subpolicy_id(std::string* subpolicy_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subpolicy_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subpolicy_id(
      std::string* subpolicy_id);
  private:
  const std::string& _internal_subpolicy_id() const;
  void _internal_set_subpolicy_id(const std::string& value);
  std::string* _internal_mutable_subpolicy_id();
  public:

  // uint64 policy_id = 2[json_name = "policyId"];
  void clear_policy_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 policy_id() const;
  void set_policy_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_policy_id() const;
  void _internal_set_policy_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool saved = 1[json_name = "saved"];
  void clear_saved();
  bool saved() const;
  void set_saved(bool value);
  private:
  bool _internal_saved() const;
  void _internal_set_saved(bool value);
  public:

  // bool is_template = 6[json_name = "isTemplate"];
  void clear_is_template();
  bool is_template() const;
  void set_is_template(bool value);
  private:
  bool _internal_is_template() const;
  void _internal_set_is_template(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Alert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Threshold > thresholds_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> secondary_metrics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_metric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subpolicy_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 policy_id_;
  bool saved_;
  bool is_template_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Asset_Report PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Asset.Report) */ {
 public:
  inline Asset_Report() : Asset_Report(nullptr) {};
  virtual ~Asset_Report();

  Asset_Report(const Asset_Report& from);
  Asset_Report(Asset_Report&& from) noexcept
    : Asset_Report() {
    *this = ::std::move(from);
  }

  inline Asset_Report& operator=(const Asset_Report& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset_Report& operator=(Asset_Report&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset_Report& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Asset_Report* internal_default_instance() {
    return reinterpret_cast<const Asset_Report*>(
               &_Asset_Report_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Asset_Report& a, Asset_Report& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset_Report* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset_Report* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset_Report* New() const final {
    return CreateMaybeMessage<Asset_Report>(nullptr);
  }

  Asset_Report* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset_Report>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset_Report& from);
  void MergeFrom(const Asset_Report& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset_Report* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Asset.Report";
  }
  protected:
  explicit Asset_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string type = 2[json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Asset.Report)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Asset PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {};
  virtual ~Asset();

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Asset& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Asset* New() const final {
    return CreateMaybeMessage<Asset>(nullptr);
  }

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Asset& from);
  void MergeFrom(const Asset& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Asset_Report Report;

  // accessors -------------------------------------------------------

  enum : int {
    kReportsFieldNumber = 1,
    kDefaultReportFieldNumber = 2,
  };
  // repeated .kentik.mkp.v202102alpha1.Asset.Report reports = 1[json_name = "reports"];
  int reports_size() const;
  private:
  int _internal_reports_size() const;
  public:
  void clear_reports();
  ::kentik::mkp::v202102alpha1::Asset_Report* mutable_reports(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Asset_Report >*
      mutable_reports();
  private:
  const ::kentik::mkp::v202102alpha1::Asset_Report& _internal_reports(int index) const;
  ::kentik::mkp::v202102alpha1::Asset_Report* _internal_add_reports();
  public:
  const ::kentik::mkp::v202102alpha1::Asset_Report& reports(int index) const;
  ::kentik::mkp::v202102alpha1::Asset_Report* add_reports();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Asset_Report >&
      reports() const;

  // .kentik.mkp.v202102alpha1.Asset.Report default_report = 2[json_name = "defaultReport"];
  bool has_default_report() const;
  private:
  bool _internal_has_default_report() const;
  public:
  void clear_default_report();
  const ::kentik::mkp::v202102alpha1::Asset_Report& default_report() const;
  ::kentik::mkp::v202102alpha1::Asset_Report* release_default_report();
  ::kentik::mkp::v202102alpha1::Asset_Report* mutable_default_report();
  void set_allocated_default_report(::kentik::mkp::v202102alpha1::Asset_Report* default_report);
  private:
  const ::kentik::mkp::v202102alpha1::Asset_Report& _internal_default_report() const;
  ::kentik::mkp::v202102alpha1::Asset_Report* _internal_mutable_default_report();
  public:
  void unsafe_arena_set_allocated_default_report(
      ::kentik::mkp::v202102alpha1::Asset_Report* default_report);
  ::kentik::mkp::v202102alpha1::Asset_Report* unsafe_arena_release_default_report();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Asset_Report > reports_;
  ::kentik::mkp::v202102alpha1::Asset_Report* default_report_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Threshold PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Threshold) */ {
 public:
  inline Threshold() : Threshold(nullptr) {};
  virtual ~Threshold();

  Threshold(const Threshold& from);
  Threshold(Threshold&& from) noexcept
    : Threshold() {
    *this = ::std::move(from);
  }

  inline Threshold& operator=(const Threshold& from) {
    CopyFrom(from);
    return *this;
  }
  inline Threshold& operator=(Threshold&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Threshold& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Threshold* internal_default_instance() {
    return reinterpret_cast<const Threshold*>(
               &_Threshold_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Threshold& a, Threshold& b) {
    a.Swap(&b);
  }
  inline void Swap(Threshold* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Threshold* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Threshold* New() const final {
    return CreateMaybeMessage<Threshold>(nullptr);
  }

  Threshold* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Threshold>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Threshold& from);
  void MergeFrom(const Threshold& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Threshold* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Threshold";
  }
  protected:
  explicit Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionsFieldNumber = 4,
    kMitigationsFieldNumber = 5,
    kNotificationChannelsFieldNumber = 6,
    kSeverityFieldNumber = 3,
    kActivateFieldNumber = 2,
    kIdFieldNumber = 1,
    kThresholdAckRequiredFieldNumber = 7,
    kEnableTenantNotificationsFieldNumber = 8,
    kReceiveLandlordNotificationsFieldNumber = 9,
  };
  // repeated .kentik.mkp.v202102alpha1.Condition conditions = 4[json_name = "conditions"];
  int conditions_size() const;
  private:
  int _internal_conditions_size() const;
  public:
  void clear_conditions();
  ::kentik::mkp::v202102alpha1::Condition* mutable_conditions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Condition >*
      mutable_conditions();
  private:
  const ::kentik::mkp::v202102alpha1::Condition& _internal_conditions(int index) const;
  ::kentik::mkp::v202102alpha1::Condition* _internal_add_conditions();
  public:
  const ::kentik::mkp::v202102alpha1::Condition& conditions(int index) const;
  ::kentik::mkp::v202102alpha1::Condition* add_conditions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Condition >&
      conditions() const;

  // repeated .kentik.mkp.v202102alpha1.Mitigation mitigations = 5[json_name = "mitigations"];
  int mitigations_size() const;
  private:
  int _internal_mitigations_size() const;
  public:
  void clear_mitigations();
  ::kentik::mkp::v202102alpha1::Mitigation* mutable_mitigations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Mitigation >*
      mutable_mitigations();
  private:
  const ::kentik::mkp::v202102alpha1::Mitigation& _internal_mitigations(int index) const;
  ::kentik::mkp::v202102alpha1::Mitigation* _internal_add_mitigations();
  public:
  const ::kentik::mkp::v202102alpha1::Mitigation& mitigations(int index) const;
  ::kentik::mkp::v202102alpha1::Mitigation* add_mitigations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Mitigation >&
      mitigations() const;

  // repeated .kentik.mkp.v202102alpha1.NotificationChannel notification_channels = 6[json_name = "notificationChannels"];
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  ::kentik::mkp::v202102alpha1::NotificationChannel* mutable_notification_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::NotificationChannel >*
      mutable_notification_channels();
  private:
  const ::kentik::mkp::v202102alpha1::NotificationChannel& _internal_notification_channels(int index) const;
  ::kentik::mkp::v202102alpha1::NotificationChannel* _internal_add_notification_channels();
  public:
  const ::kentik::mkp::v202102alpha1::NotificationChannel& notification_channels(int index) const;
  ::kentik::mkp::v202102alpha1::NotificationChannel* add_notification_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::NotificationChannel >&
      notification_channels() const;

  // string severity = 3[json_name = "severity"];
  void clear_severity();
  const std::string& severity() const;
  void set_severity(const std::string& value);
  void set_severity(std::string&& value);
  void set_severity(const char* value);
  void set_severity(const char* value, size_t size);
  std::string* mutable_severity();
  std::string* release_severity();
  void set_allocated_severity(std::string* severity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_severity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_severity(
      std::string* severity);
  private:
  const std::string& _internal_severity() const;
  void _internal_set_severity(const std::string& value);
  std::string* _internal_mutable_severity();
  public:

  // .kentik.mkp.v202102alpha1.Activate activate = 2[json_name = "activate"];
  bool has_activate() const;
  private:
  bool _internal_has_activate() const;
  public:
  void clear_activate();
  const ::kentik::mkp::v202102alpha1::Activate& activate() const;
  ::kentik::mkp::v202102alpha1::Activate* release_activate();
  ::kentik::mkp::v202102alpha1::Activate* mutable_activate();
  void set_allocated_activate(::kentik::mkp::v202102alpha1::Activate* activate);
  private:
  const ::kentik::mkp::v202102alpha1::Activate& _internal_activate() const;
  ::kentik::mkp::v202102alpha1::Activate* _internal_mutable_activate();
  public:
  void unsafe_arena_set_allocated_activate(
      ::kentik::mkp::v202102alpha1::Activate* activate);
  ::kentik::mkp::v202102alpha1::Activate* unsafe_arena_release_activate();

  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool threshold_ack_required = 7[json_name = "thresholdAckRequired"];
  void clear_threshold_ack_required();
  bool threshold_ack_required() const;
  void set_threshold_ack_required(bool value);
  private:
  bool _internal_threshold_ack_required() const;
  void _internal_set_threshold_ack_required(bool value);
  public:

  // bool enable_tenant_notifications = 8[json_name = "enableTenantNotifications"];
  void clear_enable_tenant_notifications();
  bool enable_tenant_notifications() const;
  void set_enable_tenant_notifications(bool value);
  private:
  bool _internal_enable_tenant_notifications() const;
  void _internal_set_enable_tenant_notifications(bool value);
  public:

  // bool receive_landlord_notifications = 9[json_name = "receiveLandlordNotifications"];
  void clear_receive_landlord_notifications();
  bool receive_landlord_notifications() const;
  void set_receive_landlord_notifications(bool value);
  private:
  bool _internal_receive_landlord_notifications() const;
  void _internal_set_receive_landlord_notifications(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Threshold)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Condition > conditions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Mitigation > mitigations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::NotificationChannel > notification_channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr severity_;
  ::kentik::mkp::v202102alpha1::Activate* activate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  bool threshold_ack_required_;
  bool enable_tenant_notifications_;
  bool receive_landlord_notifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Activate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Activate) */ {
 public:
  inline Activate() : Activate(nullptr) {};
  virtual ~Activate();

  Activate(const Activate& from);
  Activate(Activate&& from) noexcept
    : Activate() {
    *this = ::std::move(from);
  }

  inline Activate& operator=(const Activate& from) {
    CopyFrom(from);
    return *this;
  }
  inline Activate& operator=(Activate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Activate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Activate* internal_default_instance() {
    return reinterpret_cast<const Activate*>(
               &_Activate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Activate& a, Activate& b) {
    a.Swap(&b);
  }
  inline void Swap(Activate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Activate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Activate* New() const final {
    return CreateMaybeMessage<Activate>(nullptr);
  }

  Activate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Activate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Activate& from);
  void MergeFrom(const Activate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Activate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Activate";
  }
  protected:
  explicit Activate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperatorFieldNumber = 2,
    kTimeUnitFieldNumber = 3,
    kTimesFieldNumber = 1,
    kTimeWindowFieldNumber = 4,
    kGracePeriodFieldNumber = 5,
  };
  // string operator = 2[json_name = "operator"];
  void clear_operator_();
  const std::string& operator_() const;
  void set_operator_(const std::string& value);
  void set_operator_(std::string&& value);
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  std::string* mutable_operator_();
  std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operator_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operator_(
      std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // string time_unit = 3[json_name = "timeUnit"];
  void clear_time_unit();
  const std::string& time_unit() const;
  void set_time_unit(const std::string& value);
  void set_time_unit(std::string&& value);
  void set_time_unit(const char* value);
  void set_time_unit(const char* value, size_t size);
  std::string* mutable_time_unit();
  std::string* release_time_unit();
  void set_allocated_time_unit(std::string* time_unit);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time_unit();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time_unit(
      std::string* time_unit);
  private:
  const std::string& _internal_time_unit() const;
  void _internal_set_time_unit(const std::string& value);
  std::string* _internal_mutable_time_unit();
  public:

  // uint32 times = 1[json_name = "times"];
  void clear_times();
  ::PROTOBUF_NAMESPACE_ID::uint32 times() const;
  void set_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_times() const;
  void _internal_set_times(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 time_window = 4[json_name = "timeWindow"];
  void clear_time_window();
  ::PROTOBUF_NAMESPACE_ID::uint32 time_window() const;
  void set_time_window(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_time_window() const;
  void _internal_set_time_window(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 grace_period = 5[json_name = "gracePeriod"];
  void clear_grace_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 grace_period() const;
  void set_grace_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_grace_period() const;
  void _internal_set_grace_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Activate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_unit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 times_;
  ::PROTOBUF_NAMESPACE_ID::uint32 time_window_;
  ::PROTOBUF_NAMESPACE_ID::uint32 grace_period_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Condition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Condition) */ {
 public:
  inline Condition() : Condition(nullptr) {};
  virtual ~Condition();

  Condition(const Condition& from);
  Condition(Condition&& from) noexcept
    : Condition() {
    *this = ::std::move(from);
  }

  inline Condition& operator=(const Condition& from) {
    CopyFrom(from);
    return *this;
  }
  inline Condition& operator=(Condition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Condition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Condition* internal_default_instance() {
    return reinterpret_cast<const Condition*>(
               &_Condition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Condition& a, Condition& b) {
    a.Swap(&b);
  }
  inline void Swap(Condition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Condition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Condition* New() const final {
    return CreateMaybeMessage<Condition>(nullptr);
  }

  Condition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Condition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Condition& from);
  void MergeFrom(const Condition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Condition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Condition";
  }
  protected:
  explicit Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kMetricFieldNumber = 3,
    kOperatorFieldNumber = 4,
    kValueTypeFieldNumber = 5,
    kValueSelectFieldNumber = 6,
    kValueFieldNumber = 2,
  };
  // string type = 1[json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string metric = 3[json_name = "metric"];
  void clear_metric();
  const std::string& metric() const;
  void set_metric(const std::string& value);
  void set_metric(std::string&& value);
  void set_metric(const char* value);
  void set_metric(const char* value, size_t size);
  std::string* mutable_metric();
  std::string* release_metric();
  void set_allocated_metric(std::string* metric);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_metric();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_metric(
      std::string* metric);
  private:
  const std::string& _internal_metric() const;
  void _internal_set_metric(const std::string& value);
  std::string* _internal_mutable_metric();
  public:

  // string operator = 4[json_name = "operator"];
  void clear_operator_();
  const std::string& operator_() const;
  void set_operator_(const std::string& value);
  void set_operator_(std::string&& value);
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  std::string* mutable_operator_();
  std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operator_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operator_(
      std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // string value_type = 5[json_name = "valueType"];
  void clear_value_type();
  const std::string& value_type() const;
  void set_value_type(const std::string& value);
  void set_value_type(std::string&& value);
  void set_value_type(const char* value);
  void set_value_type(const char* value, size_t size);
  std::string* mutable_value_type();
  std::string* release_value_type();
  void set_allocated_value_type(std::string* value_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value_type(
      std::string* value_type);
  private:
  const std::string& _internal_value_type() const;
  void _internal_set_value_type(const std::string& value);
  std::string* _internal_mutable_value_type();
  public:

  // string value_select = 6[json_name = "valueSelect"];
  void clear_value_select();
  const std::string& value_select() const;
  void set_value_select(const std::string& value);
  void set_value_select(std::string&& value);
  void set_value_select(const char* value);
  void set_value_select(const char* value, size_t size);
  std::string* mutable_value_select();
  std::string* release_value_select();
  void set_allocated_value_select(std::string* value_select);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value_select();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value_select(
      std::string* value_select);
  private:
  const std::string& _internal_value_select() const;
  void _internal_set_value_select(const std::string& value);
  std::string* _internal_mutable_value_select();
  public:

  // uint32 value = 2[json_name = "value"];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Condition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr metric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_select_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Mitigation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Mitigation) */ {
 public:
  inline Mitigation() : Mitigation(nullptr) {};
  virtual ~Mitigation();

  Mitigation(const Mitigation& from);
  Mitigation(Mitigation&& from) noexcept
    : Mitigation() {
    *this = ::std::move(from);
  }

  inline Mitigation& operator=(const Mitigation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mitigation& operator=(Mitigation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mitigation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mitigation* internal_default_instance() {
    return reinterpret_cast<const Mitigation*>(
               &_Mitigation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Mitigation& a, Mitigation& b) {
    a.Swap(&b);
  }
  inline void Swap(Mitigation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mitigation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mitigation* New() const final {
    return CreateMaybeMessage<Mitigation>(nullptr);
  }

  Mitigation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mitigation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mitigation& from);
  void MergeFrom(const Mitigation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mitigation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Mitigation";
  }
  protected:
  explicit Mitigation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMitigationApplyTypeFieldNumber = 6,
    kMitigationClearTypeFieldNumber = 7,
    kCdateFieldNumber = 11,
    kEdateFieldNumber = 12,
    kCompanyIdFieldNumber = 2,
    kPairingIdFieldNumber = 3,
    kThresholdIdFieldNumber = 4,
    kIsMethodOverridableFieldNumber = 5,
    kIsPlatformOverridableFieldNumber = 10,
    kMitigationApplyTimerFieldNumber = 8,
    kIdFieldNumber = 13,
    kMitigationClearTimerFieldNumber = 9,
  };
  // string status = 1[json_name = "status"];
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string mitigation_apply_type = 6[json_name = "mitigationApplyType"];
  void clear_mitigation_apply_type();
  const std::string& mitigation_apply_type() const;
  void set_mitigation_apply_type(const std::string& value);
  void set_mitigation_apply_type(std::string&& value);
  void set_mitigation_apply_type(const char* value);
  void set_mitigation_apply_type(const char* value, size_t size);
  std::string* mutable_mitigation_apply_type();
  std::string* release_mitigation_apply_type();
  void set_allocated_mitigation_apply_type(std::string* mitigation_apply_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mitigation_apply_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mitigation_apply_type(
      std::string* mitigation_apply_type);
  private:
  const std::string& _internal_mitigation_apply_type() const;
  void _internal_set_mitigation_apply_type(const std::string& value);
  std::string* _internal_mutable_mitigation_apply_type();
  public:

  // string mitigation_clear_type = 7[json_name = "mitigationClearType"];
  void clear_mitigation_clear_type();
  const std::string& mitigation_clear_type() const;
  void set_mitigation_clear_type(const std::string& value);
  void set_mitigation_clear_type(std::string&& value);
  void set_mitigation_clear_type(const char* value);
  void set_mitigation_clear_type(const char* value, size_t size);
  std::string* mutable_mitigation_clear_type();
  std::string* release_mitigation_clear_type();
  void set_allocated_mitigation_clear_type(std::string* mitigation_clear_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mitigation_clear_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mitigation_clear_type(
      std::string* mitigation_clear_type);
  private:
  const std::string& _internal_mitigation_clear_type() const;
  void _internal_set_mitigation_clear_type(const std::string& value);
  std::string* _internal_mutable_mitigation_clear_type();
  public:

  // string cdate = 11[json_name = "cdate"];
  void clear_cdate();
  const std::string& cdate() const;
  void set_cdate(const std::string& value);
  void set_cdate(std::string&& value);
  void set_cdate(const char* value);
  void set_cdate(const char* value, size_t size);
  std::string* mutable_cdate();
  std::string* release_cdate();
  void set_allocated_cdate(std::string* cdate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cdate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cdate(
      std::string* cdate);
  private:
  const std::string& _internal_cdate() const;
  void _internal_set_cdate(const std::string& value);
  std::string* _internal_mutable_cdate();
  public:

  // string edate = 12[json_name = "edate"];
  void clear_edate();
  const std::string& edate() const;
  void set_edate(const std::string& value);
  void set_edate(std::string&& value);
  void set_edate(const char* value);
  void set_edate(const char* value, size_t size);
  std::string* mutable_edate();
  std::string* release_edate();
  void set_allocated_edate(std::string* edate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_edate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_edate(
      std::string* edate);
  private:
  const std::string& _internal_edate() const;
  void _internal_set_edate(const std::string& value);
  std::string* _internal_mutable_edate();
  public:

  // uint64 company_id = 2[json_name = "companyId"];
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pairing_id = 3[json_name = "pairingId"];
  void clear_pairing_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pairing_id() const;
  void set_pairing_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pairing_id() const;
  void _internal_set_pairing_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 threshold_id = 4[json_name = "thresholdId"];
  void clear_threshold_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 threshold_id() const;
  void set_threshold_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_threshold_id() const;
  void _internal_set_threshold_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_method_overridable = 5[json_name = "isMethodOverridable"];
  void clear_is_method_overridable();
  bool is_method_overridable() const;
  void set_is_method_overridable(bool value);
  private:
  bool _internal_is_method_overridable() const;
  void _internal_set_is_method_overridable(bool value);
  public:

  // bool is_platform_overridable = 10[json_name = "isPlatformOverridable"];
  void clear_is_platform_overridable();
  bool is_platform_overridable() const;
  void set_is_platform_overridable(bool value);
  private:
  bool _internal_is_platform_overridable() const;
  void _internal_set_is_platform_overridable(bool value);
  public:

  // uint32 mitigation_apply_timer = 8[json_name = "mitigationApplyTimer"];
  void clear_mitigation_apply_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 mitigation_apply_timer() const;
  void set_mitigation_apply_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mitigation_apply_timer() const;
  void _internal_set_mitigation_apply_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 id = 13[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 mitigation_clear_timer = 9[json_name = "mitigationClearTimer"];
  void clear_mitigation_clear_timer();
  ::PROTOBUF_NAMESPACE_ID::uint32 mitigation_clear_timer() const;
  void set_mitigation_clear_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_mitigation_clear_timer() const;
  void _internal_set_mitigation_clear_timer(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Mitigation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mitigation_apply_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mitigation_clear_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr edate_;
  ::PROTOBUF_NAMESPACE_ID::uint64 company_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pairing_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 threshold_id_;
  bool is_method_overridable_;
  bool is_platform_overridable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mitigation_apply_timer_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mitigation_clear_timer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class NotificationChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.NotificationChannel) */ {
 public:
  inline NotificationChannel() : NotificationChannel(nullptr) {};
  virtual ~NotificationChannel();

  NotificationChannel(const NotificationChannel& from);
  NotificationChannel(NotificationChannel&& from) noexcept
    : NotificationChannel() {
    *this = ::std::move(from);
  }

  inline NotificationChannel& operator=(const NotificationChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationChannel& operator=(NotificationChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationChannel* internal_default_instance() {
    return reinterpret_cast<const NotificationChannel*>(
               &_NotificationChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NotificationChannel& a, NotificationChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationChannel* New() const final {
    return CreateMaybeMessage<NotificationChannel>(nullptr);
  }

  NotificationChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationChannel& from);
  void MergeFrom(const NotificationChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.NotificationChannel";
  }
  protected:
  explicit NotificationChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.NotificationChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class User PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.User) */ {
 public:
  inline User() : User(nullptr) {};
  virtual ~User();

  User(const User& from);
  User(User&& from) noexcept
    : User() {
    *this = ::std::move(from);
  }

  inline User& operator=(const User& from) {
    CopyFrom(from);
    return *this;
  }
  inline User& operator=(User&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const User* internal_default_instance() {
    return reinterpret_cast<const User*>(
               &_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(User& a, User& b) {
    a.Swap(&b);
  }
  inline void Swap(User* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(User* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline User* New() const final {
    return CreateMaybeMessage<User>(nullptr);
  }

  User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const User& from);
  void MergeFrom(const User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.User";
  }
  protected:
  explicit User(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserEmailFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kUserFullNameFieldNumber = 5,
    kLastLoginFieldNumber = 7,
    kRoleFieldNumber = 9,
    kIdFieldNumber = 1,
    kCompanyIdFieldNumber = 2,
    kUserGroupIdFieldNumber = 6,
    kPermissionOverridesFieldNumber = 8,
    kUserLevelFieldNumber = 10,
  };
  // string user_email = 3[json_name = "userEmail"];
  void clear_user_email();
  const std::string& user_email() const;
  void set_user_email(const std::string& value);
  void set_user_email(std::string&& value);
  void set_user_email(const char* value);
  void set_user_email(const char* value, size_t size);
  std::string* mutable_user_email();
  std::string* release_user_email();
  void set_allocated_user_email(std::string* user_email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_email(
      std::string* user_email);
  private:
  const std::string& _internal_user_email() const;
  void _internal_set_user_email(const std::string& value);
  std::string* _internal_mutable_user_email();
  public:

  // string user_name = 4[json_name = "userName"];
  void clear_user_name();
  const std::string& user_name() const;
  void set_user_name(const std::string& value);
  void set_user_name(std::string&& value);
  void set_user_name(const char* value);
  void set_user_name(const char* value, size_t size);
  std::string* mutable_user_name();
  std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_name(
      std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // string user_full_name = 5[json_name = "userFullName"];
  void clear_user_full_name();
  const std::string& user_full_name() const;
  void set_user_full_name(const std::string& value);
  void set_user_full_name(std::string&& value);
  void set_user_full_name(const char* value);
  void set_user_full_name(const char* value, size_t size);
  std::string* mutable_user_full_name();
  std::string* release_user_full_name();
  void set_allocated_user_full_name(std::string* user_full_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user_full_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user_full_name(
      std::string* user_full_name);
  private:
  const std::string& _internal_user_full_name() const;
  void _internal_set_user_full_name(const std::string& value);
  std::string* _internal_mutable_user_full_name();
  public:

  // string last_login = 7[json_name = "lastLogin"];
  void clear_last_login();
  const std::string& last_login() const;
  void set_last_login(const std::string& value);
  void set_last_login(std::string&& value);
  void set_last_login(const char* value);
  void set_last_login(const char* value, size_t size);
  std::string* mutable_last_login();
  std::string* release_last_login();
  void set_allocated_last_login(std::string* last_login);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_last_login();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_last_login(
      std::string* last_login);
  private:
  const std::string& _internal_last_login() const;
  void _internal_set_last_login(const std::string& value);
  std::string* _internal_mutable_last_login();
  public:

  // string role = 9[json_name = "role"];
  void clear_role();
  const std::string& role() const;
  void set_role(const std::string& value);
  void set_role(std::string&& value);
  void set_role(const char* value);
  void set_role(const char* value, size_t size);
  std::string* mutable_role();
  std::string* release_role();
  void set_allocated_role(std::string* role);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_role();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_role(
      std::string* role);
  private:
  const std::string& _internal_role() const;
  void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 company_id = 2[json_name = "companyId"];
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 user_group_id = 6[json_name = "userGroupId"];
  void clear_user_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 user_group_id() const;
  void set_user_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_user_group_id() const;
  void _internal_set_user_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool permission_overrides = 8[json_name = "permissionOverrides"];
  void clear_permission_overrides();
  bool permission_overrides() const;
  void set_permission_overrides(bool value);
  private:
  bool _internal_permission_overrides() const;
  void _internal_set_permission_overrides(bool value);
  public:

  // uint32 user_level = 10[json_name = "userLevel"];
  void clear_user_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_level() const;
  void set_user_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_level() const;
  void _internal_set_user_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.User)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_login_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 company_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 user_group_id_;
  bool permission_overrides_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class TenantLink PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.TenantLink) */ {
 public:
  inline TenantLink() : TenantLink(nullptr) {};
  virtual ~TenantLink();

  TenantLink(const TenantLink& from);
  TenantLink(TenantLink&& from) noexcept
    : TenantLink() {
    *this = ::std::move(from);
  }

  inline TenantLink& operator=(const TenantLink& from) {
    CopyFrom(from);
    return *this;
  }
  inline TenantLink& operator=(TenantLink&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TenantLink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TenantLink* internal_default_instance() {
    return reinterpret_cast<const TenantLink*>(
               &_TenantLink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TenantLink& a, TenantLink& b) {
    a.Swap(&b);
  }
  inline void Swap(TenantLink* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TenantLink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TenantLink* New() const final {
    return CreateMaybeMessage<TenantLink>(nullptr);
  }

  TenantLink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TenantLink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TenantLink& from);
  void MergeFrom(const TenantLink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TenantLink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.TenantLink";
  }
  protected:
  explicit TenantLink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPivotTemplateIdFieldNumber = 2,
    kPivotUserGroupIdFieldNumber = 3,
  };
  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pivot_template_id = 2[json_name = "pivotTemplateId"];
  void clear_pivot_template_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pivot_template_id() const;
  void set_pivot_template_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pivot_template_id() const;
  void _internal_set_pivot_template_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 pivot_user_group_id = 3[json_name = "pivotUserGroupId"];
  void clear_pivot_user_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 pivot_user_group_id() const;
  void set_pivot_user_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_pivot_user_group_id() const;
  void _internal_set_pivot_user_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.TenantLink)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pivot_template_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pivot_user_group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Package PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Package) */ {
 public:
  inline Package() : Package(nullptr) {};
  virtual ~Package();

  Package(const Package& from);
  Package(Package&& from) noexcept
    : Package() {
    *this = ::std::move(from);
  }

  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  inline Package& operator=(Package&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Package& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Package* internal_default_instance() {
    return reinterpret_cast<const Package*>(
               &_Package_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Package& a, Package& b) {
    a.Swap(&b);
  }
  inline void Swap(Package* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Package* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Package* New() const final {
    return CreateMaybeMessage<Package>(nullptr);
  }

  Package* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Package>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Package* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Package";
  }
  protected:
  explicit Package(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlertsFieldNumber = 7,
    kTenantsFieldNumber = 10,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kIconFieldNumber = 5,
    kColorFieldNumber = 6,
    kAssetsFieldNumber = 8,
    kIdFieldNumber = 1,
    kCompanyIdFieldNumber = 2,
    kIsDefaultFieldNumber = 9,
  };
  // repeated .kentik.mkp.v202102alpha1.Alert alerts = 7[json_name = "alerts"];
  int alerts_size() const;
  private:
  int _internal_alerts_size() const;
  public:
  void clear_alerts();
  ::kentik::mkp::v202102alpha1::Alert* mutable_alerts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert >*
      mutable_alerts();
  private:
  const ::kentik::mkp::v202102alpha1::Alert& _internal_alerts(int index) const;
  ::kentik::mkp::v202102alpha1::Alert* _internal_add_alerts();
  public:
  const ::kentik::mkp::v202102alpha1::Alert& alerts(int index) const;
  ::kentik::mkp::v202102alpha1::Alert* add_alerts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert >&
      alerts() const;

  // repeated .kentik.mkp.v202102alpha1.TenantLink tenants = 10[json_name = "tenants"];
  int tenants_size() const;
  private:
  int _internal_tenants_size() const;
  public:
  void clear_tenants();
  ::kentik::mkp::v202102alpha1::TenantLink* mutable_tenants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::TenantLink >*
      mutable_tenants();
  private:
  const ::kentik::mkp::v202102alpha1::TenantLink& _internal_tenants(int index) const;
  ::kentik::mkp::v202102alpha1::TenantLink* _internal_add_tenants();
  public:
  const ::kentik::mkp::v202102alpha1::TenantLink& tenants(int index) const;
  ::kentik::mkp::v202102alpha1::TenantLink* add_tenants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::TenantLink >&
      tenants() const;

  // string name = 3[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string icon = 5[json_name = "icon"];
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_icon();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_icon(
      std::string* icon);
  private:
  const std::string& _internal_icon() const;
  void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // string color = 6[json_name = "color"];
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_color();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_color(
      std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // .kentik.mkp.v202102alpha1.Asset assets = 8[json_name = "assets"];
  bool has_assets() const;
  private:
  bool _internal_has_assets() const;
  public:
  void clear_assets();
  const ::kentik::mkp::v202102alpha1::Asset& assets() const;
  ::kentik::mkp::v202102alpha1::Asset* release_assets();
  ::kentik::mkp::v202102alpha1::Asset* mutable_assets();
  void set_allocated_assets(::kentik::mkp::v202102alpha1::Asset* assets);
  private:
  const ::kentik::mkp::v202102alpha1::Asset& _internal_assets() const;
  ::kentik::mkp::v202102alpha1::Asset* _internal_mutable_assets();
  public:
  void unsafe_arena_set_allocated_assets(
      ::kentik::mkp::v202102alpha1::Asset* assets);
  ::kentik::mkp::v202102alpha1::Asset* unsafe_arena_release_assets();

  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 company_id = 2[json_name = "companyId"];
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool is_default = 9[json_name = "isDefault"];
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Package)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert > alerts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::TenantLink > tenants_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::kentik::mkp::v202102alpha1::Asset* assets_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 company_id_;
  bool is_default_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class CustomDimension PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.CustomDimension) */ {
 public:
  inline CustomDimension() : CustomDimension(nullptr) {};
  virtual ~CustomDimension();

  CustomDimension(const CustomDimension& from);
  CustomDimension(CustomDimension&& from) noexcept
    : CustomDimension() {
    *this = ::std::move(from);
  }

  inline CustomDimension& operator=(const CustomDimension& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomDimension& operator=(CustomDimension&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomDimension& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomDimension* internal_default_instance() {
    return reinterpret_cast<const CustomDimension*>(
               &_CustomDimension_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CustomDimension& a, CustomDimension& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomDimension* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomDimension* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomDimension* New() const final {
    return CreateMaybeMessage<CustomDimension>(nullptr);
  }

  CustomDimension* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomDimension>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomDimension& from);
  void MergeFrom(const CustomDimension& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomDimension* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.CustomDimension";
  }
  protected:
  explicit CustomDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimensionFieldNumber = 1,
    kPopulatorFieldNumber = 2,
  };
  // string dimension = 1[json_name = "dimension"];
  void clear_dimension();
  const std::string& dimension() const;
  void set_dimension(const std::string& value);
  void set_dimension(std::string&& value);
  void set_dimension(const char* value);
  void set_dimension(const char* value, size_t size);
  std::string* mutable_dimension();
  std::string* release_dimension();
  void set_allocated_dimension(std::string* dimension);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dimension();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dimension(
      std::string* dimension);
  private:
  const std::string& _internal_dimension() const;
  void _internal_set_dimension(const std::string& value);
  std::string* _internal_mutable_dimension();
  public:

  // string populator = 2[json_name = "populator"];
  void clear_populator();
  const std::string& populator() const;
  void set_populator(const std::string& value);
  void set_populator(std::string&& value);
  void set_populator(const char* value);
  void set_populator(const char* value, size_t size);
  std::string* mutable_populator();
  std::string* release_populator();
  void set_allocated_populator(std::string* populator);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_populator();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_populator(
      std::string* populator);
  private:
  const std::string& _internal_populator() const;
  void _internal_set_populator(const std::string& value);
  std::string* _internal_mutable_populator();
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.CustomDimension)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dimension_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr populator_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Device) */ {
 public:
  inline Device() : Device(nullptr) {};
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceTypesFieldNumber = 2,
    kDeviceLabelsFieldNumber = 3,
    kDeviceSitesFieldNumber = 4,
    kDeviceNameFieldNumber = 5,
    kAllDevicesFieldNumber = 1,
  };
  // repeated string device_types = 2[json_name = "deviceTypes"];
  int device_types_size() const;
  private:
  int _internal_device_types_size() const;
  public:
  void clear_device_types();
  const std::string& device_types(int index) const;
  std::string* mutable_device_types(int index);
  void set_device_types(int index, const std::string& value);
  void set_device_types(int index, std::string&& value);
  void set_device_types(int index, const char* value);
  void set_device_types(int index, const char* value, size_t size);
  std::string* add_device_types();
  void add_device_types(const std::string& value);
  void add_device_types(std::string&& value);
  void add_device_types(const char* value);
  void add_device_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_types();
  private:
  const std::string& _internal_device_types(int index) const;
  std::string* _internal_add_device_types();
  public:

  // repeated uint32 device_labels = 3[json_name = "deviceLabels"];
  int device_labels_size() const;
  private:
  int _internal_device_labels_size() const;
  public:
  void clear_device_labels();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device_labels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_device_labels() const;
  void _internal_add_device_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_device_labels();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 device_labels(int index) const;
  void set_device_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_device_labels(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      device_labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_device_labels();

  // repeated uint32 device_sites = 4[json_name = "deviceSites"];
  int device_sites_size() const;
  private:
  int _internal_device_sites_size() const;
  public:
  void clear_device_sites();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_device_sites(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_device_sites() const;
  void _internal_add_device_sites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_device_sites();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 device_sites(int index) const;
  void set_device_sites(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_device_sites(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      device_sites() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_device_sites();

  // repeated string device_name = 5[json_name = "deviceName"];
  int device_name_size() const;
  private:
  int _internal_device_name_size() const;
  public:
  void clear_device_name();
  const std::string& device_name(int index) const;
  std::string* mutable_device_name(int index);
  void set_device_name(int index, const std::string& value);
  void set_device_name(int index, std::string&& value);
  void set_device_name(int index, const char* value);
  void set_device_name(int index, const char* value, size_t size);
  std::string* add_device_name();
  void add_device_name(const std::string& value);
  void add_device_name(std::string&& value);
  void add_device_name(const char* value);
  void add_device_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& device_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_device_name();
  private:
  const std::string& _internal_device_name(int index) const;
  std::string* _internal_add_device_name();
  public:

  // bool all_devices = 1[json_name = "allDevices"];
  void clear_all_devices();
  bool all_devices() const;
  void set_all_devices(bool value);
  private:
  bool _internal_all_devices() const;
  void _internal_set_all_devices(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > device_labels_;
  mutable std::atomic<int> _device_labels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > device_sites_;
  mutable std::atomic<int> _device_sites_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> device_name_;
  bool all_devices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class FilterField PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.FilterField) */ {
 public:
  inline FilterField() : FilterField(nullptr) {};
  virtual ~FilterField();

  FilterField(const FilterField& from);
  FilterField(FilterField&& from) noexcept
    : FilterField() {
    *this = ::std::move(from);
  }

  inline FilterField& operator=(const FilterField& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterField& operator=(FilterField&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FilterField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FilterField* internal_default_instance() {
    return reinterpret_cast<const FilterField*>(
               &_FilterField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FilterField& a, FilterField& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterField* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterField* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FilterField* New() const final {
    return CreateMaybeMessage<FilterField>(nullptr);
  }

  FilterField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FilterField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FilterField& from);
  void MergeFrom(const FilterField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.FilterField";
  }
  protected:
  explicit FilterField(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldFieldNumber = 1,
    kOperatorFieldNumber = 2,
    kFilterValueFieldNumber = 3,
  };
  // string filter_field = 1[json_name = "filterField"];
  void clear_filter_field();
  const std::string& filter_field() const;
  void set_filter_field(const std::string& value);
  void set_filter_field(std::string&& value);
  void set_filter_field(const char* value);
  void set_filter_field(const char* value, size_t size);
  std::string* mutable_filter_field();
  std::string* release_filter_field();
  void set_allocated_filter_field(std::string* filter_field);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filter_field();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filter_field(
      std::string* filter_field);
  private:
  const std::string& _internal_filter_field() const;
  void _internal_set_filter_field(const std::string& value);
  std::string* _internal_mutable_filter_field();
  public:

  // string operator = 2[json_name = "operator"];
  void clear_operator_();
  const std::string& operator_() const;
  void set_operator_(const std::string& value);
  void set_operator_(std::string&& value);
  void set_operator_(const char* value);
  void set_operator_(const char* value, size_t size);
  std::string* mutable_operator_();
  std::string* release_operator_();
  void set_allocated_operator_(std::string* operator_);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operator_();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operator_(
      std::string* operator_);
  private:
  const std::string& _internal_operator_() const;
  void _internal_set_operator_(const std::string& value);
  std::string* _internal_mutable_operator_();
  public:

  // string filter_value = 3[json_name = "filterValue"];
  void clear_filter_value();
  const std::string& filter_value() const;
  void set_filter_value(const std::string& value);
  void set_filter_value(std::string&& value);
  void set_filter_value(const char* value);
  void set_filter_value(const char* value, size_t size);
  std::string* mutable_filter_value();
  std::string* release_filter_value();
  void set_allocated_filter_value(std::string* filter_value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filter_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filter_value(
      std::string* filter_value);
  private:
  const std::string& _internal_filter_value() const;
  void _internal_set_filter_value(const std::string& value);
  std::string* _internal_mutable_filter_value();
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.FilterField)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_field_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operator__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Filter PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Filter) */ {
 public:
  inline Filter() : Filter(nullptr) {};
  virtual ~Filter();

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Filter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return CreateMaybeMessage<Filter>(nullptr);
  }

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Filter";
  }
  protected:
  explicit Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSavedFiltersFieldNumber = 6,
    kFiltersFieldNumber = 7,
    kFilterGroupsFieldNumber = 8,
    kMetricFieldNumber = 9,
    kNameFieldNumber = 1,
    kConnectorFieldNumber = 3,
    kAutoAddedFieldNumber = 5,
    kNamedFieldNumber = 2,
    kNotFieldNumber = 4,
  };
  // repeated string saved_filters = 6[json_name = "savedFilters"];
  int saved_filters_size() const;
  private:
  int _internal_saved_filters_size() const;
  public:
  void clear_saved_filters();
  const std::string& saved_filters(int index) const;
  std::string* mutable_saved_filters(int index);
  void set_saved_filters(int index, const std::string& value);
  void set_saved_filters(int index, std::string&& value);
  void set_saved_filters(int index, const char* value);
  void set_saved_filters(int index, const char* value, size_t size);
  std::string* add_saved_filters();
  void add_saved_filters(const std::string& value);
  void add_saved_filters(std::string&& value);
  void add_saved_filters(const char* value);
  void add_saved_filters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& saved_filters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_saved_filters();
  private:
  const std::string& _internal_saved_filters(int index) const;
  std::string* _internal_add_saved_filters();
  public:

  // repeated .kentik.mkp.v202102alpha1.FilterField filters = 7[json_name = "filters"];
  int filters_size() const;
  private:
  int _internal_filters_size() const;
  public:
  void clear_filters();
  ::kentik::mkp::v202102alpha1::FilterField* mutable_filters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::FilterField >*
      mutable_filters();
  private:
  const ::kentik::mkp::v202102alpha1::FilterField& _internal_filters(int index) const;
  ::kentik::mkp::v202102alpha1::FilterField* _internal_add_filters();
  public:
  const ::kentik::mkp::v202102alpha1::FilterField& filters(int index) const;
  ::kentik::mkp::v202102alpha1::FilterField* add_filters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::FilterField >&
      filters() const;

  // repeated .kentik.mkp.v202102alpha1.Filter filter_groups = 8[json_name = "filterGroups"];
  int filter_groups_size() const;
  private:
  int _internal_filter_groups_size() const;
  public:
  void clear_filter_groups();
  ::kentik::mkp::v202102alpha1::Filter* mutable_filter_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Filter >*
      mutable_filter_groups();
  private:
  const ::kentik::mkp::v202102alpha1::Filter& _internal_filter_groups(int index) const;
  ::kentik::mkp::v202102alpha1::Filter* _internal_add_filter_groups();
  public:
  const ::kentik::mkp::v202102alpha1::Filter& filter_groups(int index) const;
  ::kentik::mkp::v202102alpha1::Filter* add_filter_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Filter >&
      filter_groups() const;

  // repeated string metric = 9[json_name = "metric"];
  int metric_size() const;
  private:
  int _internal_metric_size() const;
  public:
  void clear_metric();
  const std::string& metric(int index) const;
  std::string* mutable_metric(int index);
  void set_metric(int index, const std::string& value);
  void set_metric(int index, std::string&& value);
  void set_metric(int index, const char* value);
  void set_metric(int index, const char* value, size_t size);
  std::string* add_metric();
  void add_metric(const std::string& value);
  void add_metric(std::string&& value);
  void add_metric(const char* value);
  void add_metric(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& metric() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_metric();
  private:
  const std::string& _internal_metric(int index) const;
  std::string* _internal_add_metric();
  public:

  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string connector = 3[json_name = "connector"];
  void clear_connector();
  const std::string& connector() const;
  void set_connector(const std::string& value);
  void set_connector(std::string&& value);
  void set_connector(const char* value);
  void set_connector(const char* value, size_t size);
  std::string* mutable_connector();
  std::string* release_connector();
  void set_allocated_connector(std::string* connector);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_connector();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_connector(
      std::string* connector);
  private:
  const std::string& _internal_connector() const;
  void _internal_set_connector(const std::string& value);
  std::string* _internal_mutable_connector();
  public:

  // string auto_added = 5[json_name = "autoAdded"];
  void clear_auto_added();
  const std::string& auto_added() const;
  void set_auto_added(const std::string& value);
  void set_auto_added(std::string&& value);
  void set_auto_added(const char* value);
  void set_auto_added(const char* value, size_t size);
  std::string* mutable_auto_added();
  std::string* release_auto_added();
  void set_allocated_auto_added(std::string* auto_added);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_auto_added();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_auto_added(
      std::string* auto_added);
  private:
  const std::string& _internal_auto_added() const;
  void _internal_set_auto_added(const std::string& value);
  std::string* _internal_mutable_auto_added();
  public:

  // bool named = 2[json_name = "named"];
  void clear_named();
  bool named() const;
  void set_named(bool value);
  private:
  bool _internal_named() const;
  void _internal_set_named(bool value);
  public:

  // bool not = 4[json_name = "not"];
  void clear_not_();
  bool not_() const;
  void set_not_(bool value);
  private:
  bool _internal_not_() const;
  void _internal_set_not_(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> saved_filters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::FilterField > filters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Filter > filter_groups_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> metric_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connector_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auto_added_;
  bool named_;
  bool not__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class Tenant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.Tenant) */ {
 public:
  inline Tenant() : Tenant(nullptr) {};
  virtual ~Tenant();

  Tenant(const Tenant& from);
  Tenant(Tenant&& from) noexcept
    : Tenant() {
    *this = ::std::move(from);
  }

  inline Tenant& operator=(const Tenant& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tenant& operator=(Tenant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Tenant& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Tenant* internal_default_instance() {
    return reinterpret_cast<const Tenant*>(
               &_Tenant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Tenant& a, Tenant& b) {
    a.Swap(&b);
  }
  inline void Swap(Tenant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tenant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Tenant* New() const final {
    return CreateMaybeMessage<Tenant>(nullptr);
  }

  Tenant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Tenant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Tenant& from);
  void MergeFrom(const Tenant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tenant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.Tenant";
  }
  protected:
  explicit Tenant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlertsFieldNumber = 7,
    kCustomDimensionsFieldNumber = 10,
    kPackagesFieldNumber = 16,
    kUsersFieldNumber = 17,
    kNameFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kTypeFieldNumber = 5,
    kAsnFieldNumber = 8,
    kCidrFieldNumber = 9,
    kInterfaceNameFieldNumber = 13,
    kSnmpAliasFieldNumber = 14,
    kDevicesFieldNumber = 11,
    kFiltersFieldNumber = 12,
    kAssetsFieldNumber = 15,
    kIdFieldNumber = 1,
    kCompanyIdFieldNumber = 2,
    kEnabledFieldNumber = 6,
    kTemplateIdFieldNumber = 18,
  };
  // repeated .kentik.mkp.v202102alpha1.Alert alerts = 7[json_name = "alerts"];
  int alerts_size() const;
  private:
  int _internal_alerts_size() const;
  public:
  void clear_alerts();
  ::kentik::mkp::v202102alpha1::Alert* mutable_alerts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert >*
      mutable_alerts();
  private:
  const ::kentik::mkp::v202102alpha1::Alert& _internal_alerts(int index) const;
  ::kentik::mkp::v202102alpha1::Alert* _internal_add_alerts();
  public:
  const ::kentik::mkp::v202102alpha1::Alert& alerts(int index) const;
  ::kentik::mkp::v202102alpha1::Alert* add_alerts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert >&
      alerts() const;

  // repeated .kentik.mkp.v202102alpha1.CustomDimension custom_dimensions = 10[json_name = "customDimensions"];
  int custom_dimensions_size() const;
  private:
  int _internal_custom_dimensions_size() const;
  public:
  void clear_custom_dimensions();
  ::kentik::mkp::v202102alpha1::CustomDimension* mutable_custom_dimensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::CustomDimension >*
      mutable_custom_dimensions();
  private:
  const ::kentik::mkp::v202102alpha1::CustomDimension& _internal_custom_dimensions(int index) const;
  ::kentik::mkp::v202102alpha1::CustomDimension* _internal_add_custom_dimensions();
  public:
  const ::kentik::mkp::v202102alpha1::CustomDimension& custom_dimensions(int index) const;
  ::kentik::mkp::v202102alpha1::CustomDimension* add_custom_dimensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::CustomDimension >&
      custom_dimensions() const;

  // repeated .kentik.mkp.v202102alpha1.Package packages = 16[json_name = "packages"];
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::kentik::mkp::v202102alpha1::Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package >*
      mutable_packages();
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_packages(int index) const;
  ::kentik::mkp::v202102alpha1::Package* _internal_add_packages();
  public:
  const ::kentik::mkp::v202102alpha1::Package& packages(int index) const;
  ::kentik::mkp::v202102alpha1::Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package >&
      packages() const;

  // repeated .kentik.mkp.v202102alpha1.User users = 17[json_name = "users"];
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::kentik::mkp::v202102alpha1::User* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::User >*
      mutable_users();
  private:
  const ::kentik::mkp::v202102alpha1::User& _internal_users(int index) const;
  ::kentik::mkp::v202102alpha1::User* _internal_add_users();
  public:
  const ::kentik::mkp::v202102alpha1::User& users(int index) const;
  ::kentik::mkp::v202102alpha1::User* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::User >&
      users() const;

  // string name = 3[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 4[json_name = "description"];
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string type = 5[json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string asn = 8[json_name = "asn"];
  void clear_asn();
  const std::string& asn() const;
  void set_asn(const std::string& value);
  void set_asn(std::string&& value);
  void set_asn(const char* value);
  void set_asn(const char* value, size_t size);
  std::string* mutable_asn();
  std::string* release_asn();
  void set_allocated_asn(std::string* asn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_asn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_asn(
      std::string* asn);
  private:
  const std::string& _internal_asn() const;
  void _internal_set_asn(const std::string& value);
  std::string* _internal_mutable_asn();
  public:

  // string cidr = 9[json_name = "cidr"];
  void clear_cidr();
  const std::string& cidr() const;
  void set_cidr(const std::string& value);
  void set_cidr(std::string&& value);
  void set_cidr(const char* value);
  void set_cidr(const char* value, size_t size);
  std::string* mutable_cidr();
  std::string* release_cidr();
  void set_allocated_cidr(std::string* cidr);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cidr();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cidr(
      std::string* cidr);
  private:
  const std::string& _internal_cidr() const;
  void _internal_set_cidr(const std::string& value);
  std::string* _internal_mutable_cidr();
  public:

  // string interface_name = 13[json_name = "interfaceName"];
  void clear_interface_name();
  const std::string& interface_name() const;
  void set_interface_name(const std::string& value);
  void set_interface_name(std::string&& value);
  void set_interface_name(const char* value);
  void set_interface_name(const char* value, size_t size);
  std::string* mutable_interface_name();
  std::string* release_interface_name();
  void set_allocated_interface_name(std::string* interface_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_interface_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_interface_name(
      std::string* interface_name);
  private:
  const std::string& _internal_interface_name() const;
  void _internal_set_interface_name(const std::string& value);
  std::string* _internal_mutable_interface_name();
  public:

  // string snmp_alias = 14[json_name = "snmpAlias"];
  void clear_snmp_alias();
  const std::string& snmp_alias() const;
  void set_snmp_alias(const std::string& value);
  void set_snmp_alias(std::string&& value);
  void set_snmp_alias(const char* value);
  void set_snmp_alias(const char* value, size_t size);
  std::string* mutable_snmp_alias();
  std::string* release_snmp_alias();
  void set_allocated_snmp_alias(std::string* snmp_alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_snmp_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snmp_alias(
      std::string* snmp_alias);
  private:
  const std::string& _internal_snmp_alias() const;
  void _internal_set_snmp_alias(const std::string& value);
  std::string* _internal_mutable_snmp_alias();
  public:

  // .kentik.mkp.v202102alpha1.Device devices = 11[json_name = "devices"];
  bool has_devices() const;
  private:
  bool _internal_has_devices() const;
  public:
  void clear_devices();
  const ::kentik::mkp::v202102alpha1::Device& devices() const;
  ::kentik::mkp::v202102alpha1::Device* release_devices();
  ::kentik::mkp::v202102alpha1::Device* mutable_devices();
  void set_allocated_devices(::kentik::mkp::v202102alpha1::Device* devices);
  private:
  const ::kentik::mkp::v202102alpha1::Device& _internal_devices() const;
  ::kentik::mkp::v202102alpha1::Device* _internal_mutable_devices();
  public:
  void unsafe_arena_set_allocated_devices(
      ::kentik::mkp::v202102alpha1::Device* devices);
  ::kentik::mkp::v202102alpha1::Device* unsafe_arena_release_devices();

  // .kentik.mkp.v202102alpha1.Filter filters = 12[json_name = "filters"];
  bool has_filters() const;
  private:
  bool _internal_has_filters() const;
  public:
  void clear_filters();
  const ::kentik::mkp::v202102alpha1::Filter& filters() const;
  ::kentik::mkp::v202102alpha1::Filter* release_filters();
  ::kentik::mkp::v202102alpha1::Filter* mutable_filters();
  void set_allocated_filters(::kentik::mkp::v202102alpha1::Filter* filters);
  private:
  const ::kentik::mkp::v202102alpha1::Filter& _internal_filters() const;
  ::kentik::mkp::v202102alpha1::Filter* _internal_mutable_filters();
  public:
  void unsafe_arena_set_allocated_filters(
      ::kentik::mkp::v202102alpha1::Filter* filters);
  ::kentik::mkp::v202102alpha1::Filter* unsafe_arena_release_filters();

  // .kentik.mkp.v202102alpha1.Asset assets = 15[json_name = "assets"];
  bool has_assets() const;
  private:
  bool _internal_has_assets() const;
  public:
  void clear_assets();
  const ::kentik::mkp::v202102alpha1::Asset& assets() const;
  ::kentik::mkp::v202102alpha1::Asset* release_assets();
  ::kentik::mkp::v202102alpha1::Asset* mutable_assets();
  void set_allocated_assets(::kentik::mkp::v202102alpha1::Asset* assets);
  private:
  const ::kentik::mkp::v202102alpha1::Asset& _internal_assets() const;
  ::kentik::mkp::v202102alpha1::Asset* _internal_mutable_assets();
  public:
  void unsafe_arena_set_allocated_assets(
      ::kentik::mkp::v202102alpha1::Asset* assets);
  ::kentik::mkp::v202102alpha1::Asset* unsafe_arena_release_assets();

  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 company_id = 2[json_name = "companyId"];
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // bool enabled = 6[json_name = "enabled"];
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // uint32 template_id = 18[json_name = "templateId"];
  void clear_template_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 template_id() const;
  void set_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_template_id() const;
  void _internal_set_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.Tenant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert > alerts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::CustomDimension > custom_dimensions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package > packages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::User > users_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cidr_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr interface_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snmp_alias_;
  ::kentik::mkp::v202102alpha1::Device* devices_;
  ::kentik::mkp::v202102alpha1::Filter* filters_;
  ::kentik::mkp::v202102alpha1::Asset* assets_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 company_id_;
  bool enabled_;
  ::PROTOBUF_NAMESPACE_ID::uint32 template_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class ListPackageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.ListPackageRequest) */ {
 public:
  inline ListPackageRequest() : ListPackageRequest(nullptr) {};
  virtual ~ListPackageRequest();

  ListPackageRequest(const ListPackageRequest& from);
  ListPackageRequest(ListPackageRequest&& from) noexcept
    : ListPackageRequest() {
    *this = ::std::move(from);
  }

  inline ListPackageRequest& operator=(const ListPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPackageRequest& operator=(ListPackageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPackageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPackageRequest* internal_default_instance() {
    return reinterpret_cast<const ListPackageRequest*>(
               &_ListPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListPackageRequest& a, ListPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPackageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPackageRequest* New() const final {
    return CreateMaybeMessage<ListPackageRequest>(nullptr);
  }

  ListPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPackageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPackageRequest& from);
  void MergeFrom(const ListPackageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPackageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.ListPackageRequest";
  }
  protected:
  explicit ListPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.ListPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class ListPackageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.ListPackageResponse) */ {
 public:
  inline ListPackageResponse() : ListPackageResponse(nullptr) {};
  virtual ~ListPackageResponse();

  ListPackageResponse(const ListPackageResponse& from);
  ListPackageResponse(ListPackageResponse&& from) noexcept
    : ListPackageResponse() {
    *this = ::std::move(from);
  }

  inline ListPackageResponse& operator=(const ListPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPackageResponse& operator=(ListPackageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListPackageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPackageResponse* internal_default_instance() {
    return reinterpret_cast<const ListPackageResponse*>(
               &_ListPackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListPackageResponse& a, ListPackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPackageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListPackageResponse* New() const final {
    return CreateMaybeMessage<ListPackageResponse>(nullptr);
  }

  ListPackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListPackageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListPackageResponse& from);
  void MergeFrom(const ListPackageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPackageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.ListPackageResponse";
  }
  protected:
  explicit ListPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackagesFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.mkp.v202102alpha1.Package packages = 1[json_name = "packages"];
  int packages_size() const;
  private:
  int _internal_packages_size() const;
  public:
  void clear_packages();
  ::kentik::mkp::v202102alpha1::Package* mutable_packages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package >*
      mutable_packages();
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_packages(int index) const;
  ::kentik::mkp::v202102alpha1::Package* _internal_add_packages();
  public:
  const ::kentik::mkp::v202102alpha1::Package& packages(int index) const;
  ::kentik::mkp::v202102alpha1::Package* add_packages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package >&
      packages() const;

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.ListPackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package > packages_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class GetPackageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.GetPackageRequest) */ {
 public:
  inline GetPackageRequest() : GetPackageRequest(nullptr) {};
  virtual ~GetPackageRequest();

  GetPackageRequest(const GetPackageRequest& from);
  GetPackageRequest(GetPackageRequest&& from) noexcept
    : GetPackageRequest() {
    *this = ::std::move(from);
  }

  inline GetPackageRequest& operator=(const GetPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPackageRequest& operator=(GetPackageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPackageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPackageRequest* internal_default_instance() {
    return reinterpret_cast<const GetPackageRequest*>(
               &_GetPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetPackageRequest& a, GetPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPackageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPackageRequest* New() const final {
    return CreateMaybeMessage<GetPackageRequest>(nullptr);
  }

  GetPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPackageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPackageRequest& from);
  void MergeFrom(const GetPackageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.GetPackageRequest";
  }
  protected:
  explicit GetPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.GetPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class GetPackageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.GetPackageResponse) */ {
 public:
  inline GetPackageResponse() : GetPackageResponse(nullptr) {};
  virtual ~GetPackageResponse();

  GetPackageResponse(const GetPackageResponse& from);
  GetPackageResponse(GetPackageResponse&& from) noexcept
    : GetPackageResponse() {
    *this = ::std::move(from);
  }

  inline GetPackageResponse& operator=(const GetPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPackageResponse& operator=(GetPackageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPackageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPackageResponse* internal_default_instance() {
    return reinterpret_cast<const GetPackageResponse*>(
               &_GetPackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(GetPackageResponse& a, GetPackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPackageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPackageResponse* New() const final {
    return CreateMaybeMessage<GetPackageResponse>(nullptr);
  }

  GetPackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPackageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPackageResponse& from);
  void MergeFrom(const GetPackageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPackageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.GetPackageResponse";
  }
  protected:
  explicit GetPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::kentik::mkp::v202102alpha1::Package& package() const;
  ::kentik::mkp::v202102alpha1::Package* release_package();
  ::kentik::mkp::v202102alpha1::Package* mutable_package();
  void set_allocated_package(::kentik::mkp::v202102alpha1::Package* package);
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_package() const;
  ::kentik::mkp::v202102alpha1::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::kentik::mkp::v202102alpha1::Package* package);
  ::kentik::mkp::v202102alpha1::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.GetPackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Package* package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class CreatePackageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.CreatePackageRequest) */ {
 public:
  inline CreatePackageRequest() : CreatePackageRequest(nullptr) {};
  virtual ~CreatePackageRequest();

  CreatePackageRequest(const CreatePackageRequest& from);
  CreatePackageRequest(CreatePackageRequest&& from) noexcept
    : CreatePackageRequest() {
    *this = ::std::move(from);
  }

  inline CreatePackageRequest& operator=(const CreatePackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePackageRequest& operator=(CreatePackageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePackageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePackageRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePackageRequest*>(
               &_CreatePackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreatePackageRequest& a, CreatePackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePackageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePackageRequest* New() const final {
    return CreateMaybeMessage<CreatePackageRequest>(nullptr);
  }

  CreatePackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePackageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePackageRequest& from);
  void MergeFrom(const CreatePackageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePackageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.CreatePackageRequest";
  }
  protected:
  explicit CreatePackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::kentik::mkp::v202102alpha1::Package& package() const;
  ::kentik::mkp::v202102alpha1::Package* release_package();
  ::kentik::mkp::v202102alpha1::Package* mutable_package();
  void set_allocated_package(::kentik::mkp::v202102alpha1::Package* package);
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_package() const;
  ::kentik::mkp::v202102alpha1::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::kentik::mkp::v202102alpha1::Package* package);
  ::kentik::mkp::v202102alpha1::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.CreatePackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Package* package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class CreatePackageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.CreatePackageResponse) */ {
 public:
  inline CreatePackageResponse() : CreatePackageResponse(nullptr) {};
  virtual ~CreatePackageResponse();

  CreatePackageResponse(const CreatePackageResponse& from);
  CreatePackageResponse(CreatePackageResponse&& from) noexcept
    : CreatePackageResponse() {
    *this = ::std::move(from);
  }

  inline CreatePackageResponse& operator=(const CreatePackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePackageResponse& operator=(CreatePackageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreatePackageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePackageResponse* internal_default_instance() {
    return reinterpret_cast<const CreatePackageResponse*>(
               &_CreatePackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CreatePackageResponse& a, CreatePackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePackageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreatePackageResponse* New() const final {
    return CreateMaybeMessage<CreatePackageResponse>(nullptr);
  }

  CreatePackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreatePackageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreatePackageResponse& from);
  void MergeFrom(const CreatePackageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePackageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.CreatePackageResponse";
  }
  protected:
  explicit CreatePackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::kentik::mkp::v202102alpha1::Package& package() const;
  ::kentik::mkp::v202102alpha1::Package* release_package();
  ::kentik::mkp::v202102alpha1::Package* mutable_package();
  void set_allocated_package(::kentik::mkp::v202102alpha1::Package* package);
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_package() const;
  ::kentik::mkp::v202102alpha1::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::kentik::mkp::v202102alpha1::Package* package);
  ::kentik::mkp::v202102alpha1::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.CreatePackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Package* package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class UpdatePackageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.UpdatePackageRequest) */ {
 public:
  inline UpdatePackageRequest() : UpdatePackageRequest(nullptr) {};
  virtual ~UpdatePackageRequest();

  UpdatePackageRequest(const UpdatePackageRequest& from);
  UpdatePackageRequest(UpdatePackageRequest&& from) noexcept
    : UpdatePackageRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePackageRequest& operator=(const UpdatePackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePackageRequest& operator=(UpdatePackageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePackageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePackageRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePackageRequest*>(
               &_UpdatePackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdatePackageRequest& a, UpdatePackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePackageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePackageRequest* New() const final {
    return CreateMaybeMessage<UpdatePackageRequest>(nullptr);
  }

  UpdatePackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePackageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePackageRequest& from);
  void MergeFrom(const UpdatePackageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePackageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.UpdatePackageRequest";
  }
  protected:
  explicit UpdatePackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::kentik::mkp::v202102alpha1::Package& package() const;
  ::kentik::mkp::v202102alpha1::Package* release_package();
  ::kentik::mkp::v202102alpha1::Package* mutable_package();
  void set_allocated_package(::kentik::mkp::v202102alpha1::Package* package);
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_package() const;
  ::kentik::mkp::v202102alpha1::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::kentik::mkp::v202102alpha1::Package* package);
  ::kentik::mkp::v202102alpha1::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.UpdatePackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Package* package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class UpdatePackageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.UpdatePackageResponse) */ {
 public:
  inline UpdatePackageResponse() : UpdatePackageResponse(nullptr) {};
  virtual ~UpdatePackageResponse();

  UpdatePackageResponse(const UpdatePackageResponse& from);
  UpdatePackageResponse(UpdatePackageResponse&& from) noexcept
    : UpdatePackageResponse() {
    *this = ::std::move(from);
  }

  inline UpdatePackageResponse& operator=(const UpdatePackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePackageResponse& operator=(UpdatePackageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePackageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePackageResponse* internal_default_instance() {
    return reinterpret_cast<const UpdatePackageResponse*>(
               &_UpdatePackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(UpdatePackageResponse& a, UpdatePackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePackageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePackageResponse* New() const final {
    return CreateMaybeMessage<UpdatePackageResponse>(nullptr);
  }

  UpdatePackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePackageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePackageResponse& from);
  void MergeFrom(const UpdatePackageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePackageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.UpdatePackageResponse";
  }
  protected:
  explicit UpdatePackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::kentik::mkp::v202102alpha1::Package& package() const;
  ::kentik::mkp::v202102alpha1::Package* release_package();
  ::kentik::mkp::v202102alpha1::Package* mutable_package();
  void set_allocated_package(::kentik::mkp::v202102alpha1::Package* package);
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_package() const;
  ::kentik::mkp::v202102alpha1::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::kentik::mkp::v202102alpha1::Package* package);
  ::kentik::mkp::v202102alpha1::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.UpdatePackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Package* package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class PatchPackageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.PatchPackageRequest) */ {
 public:
  inline PatchPackageRequest() : PatchPackageRequest(nullptr) {};
  virtual ~PatchPackageRequest();

  PatchPackageRequest(const PatchPackageRequest& from);
  PatchPackageRequest(PatchPackageRequest&& from) noexcept
    : PatchPackageRequest() {
    *this = ::std::move(from);
  }

  inline PatchPackageRequest& operator=(const PatchPackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchPackageRequest& operator=(PatchPackageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchPackageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchPackageRequest* internal_default_instance() {
    return reinterpret_cast<const PatchPackageRequest*>(
               &_PatchPackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(PatchPackageRequest& a, PatchPackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchPackageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchPackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchPackageRequest* New() const final {
    return CreateMaybeMessage<PatchPackageRequest>(nullptr);
  }

  PatchPackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchPackageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchPackageRequest& from);
  void MergeFrom(const PatchPackageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchPackageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.PatchPackageRequest";
  }
  protected:
  explicit PatchPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
    kMaskFieldNumber = 2,
  };
  // .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::kentik::mkp::v202102alpha1::Package& package() const;
  ::kentik::mkp::v202102alpha1::Package* release_package();
  ::kentik::mkp::v202102alpha1::Package* mutable_package();
  void set_allocated_package(::kentik::mkp::v202102alpha1::Package* package);
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_package() const;
  ::kentik::mkp::v202102alpha1::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::kentik::mkp::v202102alpha1::Package* package);
  ::kentik::mkp::v202102alpha1::Package* unsafe_arena_release_package();

  // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.PatchPackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Package* package_;
  PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class PatchPackageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.PatchPackageResponse) */ {
 public:
  inline PatchPackageResponse() : PatchPackageResponse(nullptr) {};
  virtual ~PatchPackageResponse();

  PatchPackageResponse(const PatchPackageResponse& from);
  PatchPackageResponse(PatchPackageResponse&& from) noexcept
    : PatchPackageResponse() {
    *this = ::std::move(from);
  }

  inline PatchPackageResponse& operator=(const PatchPackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchPackageResponse& operator=(PatchPackageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchPackageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchPackageResponse* internal_default_instance() {
    return reinterpret_cast<const PatchPackageResponse*>(
               &_PatchPackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PatchPackageResponse& a, PatchPackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchPackageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchPackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchPackageResponse* New() const final {
    return CreateMaybeMessage<PatchPackageResponse>(nullptr);
  }

  PatchPackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchPackageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchPackageResponse& from);
  void MergeFrom(const PatchPackageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchPackageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.PatchPackageResponse";
  }
  protected:
  explicit PatchPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPackageFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
  bool has_package() const;
  private:
  bool _internal_has_package() const;
  public:
  void clear_package();
  const ::kentik::mkp::v202102alpha1::Package& package() const;
  ::kentik::mkp::v202102alpha1::Package* release_package();
  ::kentik::mkp::v202102alpha1::Package* mutable_package();
  void set_allocated_package(::kentik::mkp::v202102alpha1::Package* package);
  private:
  const ::kentik::mkp::v202102alpha1::Package& _internal_package() const;
  ::kentik::mkp::v202102alpha1::Package* _internal_mutable_package();
  public:
  void unsafe_arena_set_allocated_package(
      ::kentik::mkp::v202102alpha1::Package* package);
  ::kentik::mkp::v202102alpha1::Package* unsafe_arena_release_package();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.PatchPackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Package* package_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class DeletePackageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.DeletePackageRequest) */ {
 public:
  inline DeletePackageRequest() : DeletePackageRequest(nullptr) {};
  virtual ~DeletePackageRequest();

  DeletePackageRequest(const DeletePackageRequest& from);
  DeletePackageRequest(DeletePackageRequest&& from) noexcept
    : DeletePackageRequest() {
    *this = ::std::move(from);
  }

  inline DeletePackageRequest& operator=(const DeletePackageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePackageRequest& operator=(DeletePackageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePackageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePackageRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePackageRequest*>(
               &_DeletePackageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DeletePackageRequest& a, DeletePackageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePackageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePackageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePackageRequest* New() const final {
    return CreateMaybeMessage<DeletePackageRequest>(nullptr);
  }

  DeletePackageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePackageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePackageRequest& from);
  void MergeFrom(const DeletePackageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePackageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.DeletePackageRequest";
  }
  protected:
  explicit DeletePackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.DeletePackageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class DeletePackageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.DeletePackageResponse) */ {
 public:
  inline DeletePackageResponse() : DeletePackageResponse(nullptr) {};
  virtual ~DeletePackageResponse();

  DeletePackageResponse(const DeletePackageResponse& from);
  DeletePackageResponse(DeletePackageResponse&& from) noexcept
    : DeletePackageResponse() {
    *this = ::std::move(from);
  }

  inline DeletePackageResponse& operator=(const DeletePackageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePackageResponse& operator=(DeletePackageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeletePackageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePackageResponse* internal_default_instance() {
    return reinterpret_cast<const DeletePackageResponse*>(
               &_DeletePackageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DeletePackageResponse& a, DeletePackageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePackageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePackageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeletePackageResponse* New() const final {
    return CreateMaybeMessage<DeletePackageResponse>(nullptr);
  }

  DeletePackageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeletePackageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeletePackageResponse& from);
  void MergeFrom(const DeletePackageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePackageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.DeletePackageResponse";
  }
  protected:
  explicit DeletePackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.DeletePackageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class ListTenantRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.ListTenantRequest) */ {
 public:
  inline ListTenantRequest() : ListTenantRequest(nullptr) {};
  virtual ~ListTenantRequest();

  ListTenantRequest(const ListTenantRequest& from);
  ListTenantRequest(ListTenantRequest&& from) noexcept
    : ListTenantRequest() {
    *this = ::std::move(from);
  }

  inline ListTenantRequest& operator=(const ListTenantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTenantRequest& operator=(ListTenantRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTenantRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTenantRequest* internal_default_instance() {
    return reinterpret_cast<const ListTenantRequest*>(
               &_ListTenantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ListTenantRequest& a, ListTenantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTenantRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTenantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTenantRequest* New() const final {
    return CreateMaybeMessage<ListTenantRequest>(nullptr);
  }

  ListTenantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTenantRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTenantRequest& from);
  void MergeFrom(const ListTenantRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTenantRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.ListTenantRequest";
  }
  protected:
  explicit ListTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.ListTenantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class ListTenantResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.ListTenantResponse) */ {
 public:
  inline ListTenantResponse() : ListTenantResponse(nullptr) {};
  virtual ~ListTenantResponse();

  ListTenantResponse(const ListTenantResponse& from);
  ListTenantResponse(ListTenantResponse&& from) noexcept
    : ListTenantResponse() {
    *this = ::std::move(from);
  }

  inline ListTenantResponse& operator=(const ListTenantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTenantResponse& operator=(ListTenantResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTenantResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTenantResponse* internal_default_instance() {
    return reinterpret_cast<const ListTenantResponse*>(
               &_ListTenantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ListTenantResponse& a, ListTenantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTenantResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTenantResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTenantResponse* New() const final {
    return CreateMaybeMessage<ListTenantResponse>(nullptr);
  }

  ListTenantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTenantResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTenantResponse& from);
  void MergeFrom(const ListTenantResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTenantResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.ListTenantResponse";
  }
  protected:
  explicit ListTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.mkp.v202102alpha1.Tenant tenants = 1[json_name = "tenants"];
  int tenants_size() const;
  private:
  int _internal_tenants_size() const;
  public:
  void clear_tenants();
  ::kentik::mkp::v202102alpha1::Tenant* mutable_tenants(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Tenant >*
      mutable_tenants();
  private:
  const ::kentik::mkp::v202102alpha1::Tenant& _internal_tenants(int index) const;
  ::kentik::mkp::v202102alpha1::Tenant* _internal_add_tenants();
  public:
  const ::kentik::mkp::v202102alpha1::Tenant& tenants(int index) const;
  ::kentik::mkp::v202102alpha1::Tenant* add_tenants();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Tenant >&
      tenants() const;

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.ListTenantResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Tenant > tenants_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class GetTenantRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.GetTenantRequest) */ {
 public:
  inline GetTenantRequest() : GetTenantRequest(nullptr) {};
  virtual ~GetTenantRequest();

  GetTenantRequest(const GetTenantRequest& from);
  GetTenantRequest(GetTenantRequest&& from) noexcept
    : GetTenantRequest() {
    *this = ::std::move(from);
  }

  inline GetTenantRequest& operator=(const GetTenantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTenantRequest& operator=(GetTenantRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTenantRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTenantRequest* internal_default_instance() {
    return reinterpret_cast<const GetTenantRequest*>(
               &_GetTenantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetTenantRequest& a, GetTenantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTenantRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTenantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTenantRequest* New() const final {
    return CreateMaybeMessage<GetTenantRequest>(nullptr);
  }

  GetTenantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTenantRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTenantRequest& from);
  void MergeFrom(const GetTenantRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTenantRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.GetTenantRequest";
  }
  protected:
  explicit GetTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.GetTenantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class GetTenantResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.GetTenantResponse) */ {
 public:
  inline GetTenantResponse() : GetTenantResponse(nullptr) {};
  virtual ~GetTenantResponse();

  GetTenantResponse(const GetTenantResponse& from);
  GetTenantResponse(GetTenantResponse&& from) noexcept
    : GetTenantResponse() {
    *this = ::std::move(from);
  }

  inline GetTenantResponse& operator=(const GetTenantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTenantResponse& operator=(GetTenantResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTenantResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTenantResponse* internal_default_instance() {
    return reinterpret_cast<const GetTenantResponse*>(
               &_GetTenantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetTenantResponse& a, GetTenantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTenantResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTenantResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTenantResponse* New() const final {
    return CreateMaybeMessage<GetTenantResponse>(nullptr);
  }

  GetTenantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTenantResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTenantResponse& from);
  void MergeFrom(const GetTenantResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTenantResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.GetTenantResponse";
  }
  protected:
  explicit GetTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
  bool has_tenant() const;
  private:
  bool _internal_has_tenant() const;
  public:
  void clear_tenant();
  const ::kentik::mkp::v202102alpha1::Tenant& tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* release_tenant();
  ::kentik::mkp::v202102alpha1::Tenant* mutable_tenant();
  void set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant);
  private:
  const ::kentik::mkp::v202102alpha1::Tenant& _internal_tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* _internal_mutable_tenant();
  public:
  void unsafe_arena_set_allocated_tenant(
      ::kentik::mkp::v202102alpha1::Tenant* tenant);
  ::kentik::mkp::v202102alpha1::Tenant* unsafe_arena_release_tenant();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.GetTenantResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Tenant* tenant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class CreateTenantRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.CreateTenantRequest) */ {
 public:
  inline CreateTenantRequest() : CreateTenantRequest(nullptr) {};
  virtual ~CreateTenantRequest();

  CreateTenantRequest(const CreateTenantRequest& from);
  CreateTenantRequest(CreateTenantRequest&& from) noexcept
    : CreateTenantRequest() {
    *this = ::std::move(from);
  }

  inline CreateTenantRequest& operator=(const CreateTenantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTenantRequest& operator=(CreateTenantRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTenantRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTenantRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTenantRequest*>(
               &_CreateTenantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CreateTenantRequest& a, CreateTenantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTenantRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTenantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTenantRequest* New() const final {
    return CreateMaybeMessage<CreateTenantRequest>(nullptr);
  }

  CreateTenantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTenantRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTenantRequest& from);
  void MergeFrom(const CreateTenantRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTenantRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.CreateTenantRequest";
  }
  protected:
  explicit CreateTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
  bool has_tenant() const;
  private:
  bool _internal_has_tenant() const;
  public:
  void clear_tenant();
  const ::kentik::mkp::v202102alpha1::Tenant& tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* release_tenant();
  ::kentik::mkp::v202102alpha1::Tenant* mutable_tenant();
  void set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant);
  private:
  const ::kentik::mkp::v202102alpha1::Tenant& _internal_tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* _internal_mutable_tenant();
  public:
  void unsafe_arena_set_allocated_tenant(
      ::kentik::mkp::v202102alpha1::Tenant* tenant);
  ::kentik::mkp::v202102alpha1::Tenant* unsafe_arena_release_tenant();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.CreateTenantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Tenant* tenant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class CreateTenantResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.CreateTenantResponse) */ {
 public:
  inline CreateTenantResponse() : CreateTenantResponse(nullptr) {};
  virtual ~CreateTenantResponse();

  CreateTenantResponse(const CreateTenantResponse& from);
  CreateTenantResponse(CreateTenantResponse&& from) noexcept
    : CreateTenantResponse() {
    *this = ::std::move(from);
  }

  inline CreateTenantResponse& operator=(const CreateTenantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTenantResponse& operator=(CreateTenantResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTenantResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTenantResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTenantResponse*>(
               &_CreateTenantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CreateTenantResponse& a, CreateTenantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTenantResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTenantResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTenantResponse* New() const final {
    return CreateMaybeMessage<CreateTenantResponse>(nullptr);
  }

  CreateTenantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTenantResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTenantResponse& from);
  void MergeFrom(const CreateTenantResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTenantResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.CreateTenantResponse";
  }
  protected:
  explicit CreateTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
  bool has_tenant() const;
  private:
  bool _internal_has_tenant() const;
  public:
  void clear_tenant();
  const ::kentik::mkp::v202102alpha1::Tenant& tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* release_tenant();
  ::kentik::mkp::v202102alpha1::Tenant* mutable_tenant();
  void set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant);
  private:
  const ::kentik::mkp::v202102alpha1::Tenant& _internal_tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* _internal_mutable_tenant();
  public:
  void unsafe_arena_set_allocated_tenant(
      ::kentik::mkp::v202102alpha1::Tenant* tenant);
  ::kentik::mkp::v202102alpha1::Tenant* unsafe_arena_release_tenant();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.CreateTenantResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Tenant* tenant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class UpdateTenantRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.UpdateTenantRequest) */ {
 public:
  inline UpdateTenantRequest() : UpdateTenantRequest(nullptr) {};
  virtual ~UpdateTenantRequest();

  UpdateTenantRequest(const UpdateTenantRequest& from);
  UpdateTenantRequest(UpdateTenantRequest&& from) noexcept
    : UpdateTenantRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTenantRequest& operator=(const UpdateTenantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTenantRequest& operator=(UpdateTenantRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTenantRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTenantRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTenantRequest*>(
               &_UpdateTenantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(UpdateTenantRequest& a, UpdateTenantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTenantRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTenantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTenantRequest* New() const final {
    return CreateMaybeMessage<UpdateTenantRequest>(nullptr);
  }

  UpdateTenantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTenantRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTenantRequest& from);
  void MergeFrom(const UpdateTenantRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTenantRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.UpdateTenantRequest";
  }
  protected:
  explicit UpdateTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
  bool has_tenant() const;
  private:
  bool _internal_has_tenant() const;
  public:
  void clear_tenant();
  const ::kentik::mkp::v202102alpha1::Tenant& tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* release_tenant();
  ::kentik::mkp::v202102alpha1::Tenant* mutable_tenant();
  void set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant);
  private:
  const ::kentik::mkp::v202102alpha1::Tenant& _internal_tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* _internal_mutable_tenant();
  public:
  void unsafe_arena_set_allocated_tenant(
      ::kentik::mkp::v202102alpha1::Tenant* tenant);
  ::kentik::mkp::v202102alpha1::Tenant* unsafe_arena_release_tenant();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.UpdateTenantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Tenant* tenant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class UpdateTenantResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.UpdateTenantResponse) */ {
 public:
  inline UpdateTenantResponse() : UpdateTenantResponse(nullptr) {};
  virtual ~UpdateTenantResponse();

  UpdateTenantResponse(const UpdateTenantResponse& from);
  UpdateTenantResponse(UpdateTenantResponse&& from) noexcept
    : UpdateTenantResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTenantResponse& operator=(const UpdateTenantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTenantResponse& operator=(UpdateTenantResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTenantResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTenantResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTenantResponse*>(
               &_UpdateTenantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(UpdateTenantResponse& a, UpdateTenantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTenantResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTenantResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTenantResponse* New() const final {
    return CreateMaybeMessage<UpdateTenantResponse>(nullptr);
  }

  UpdateTenantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTenantResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTenantResponse& from);
  void MergeFrom(const UpdateTenantResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTenantResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.UpdateTenantResponse";
  }
  protected:
  explicit UpdateTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
  bool has_tenant() const;
  private:
  bool _internal_has_tenant() const;
  public:
  void clear_tenant();
  const ::kentik::mkp::v202102alpha1::Tenant& tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* release_tenant();
  ::kentik::mkp::v202102alpha1::Tenant* mutable_tenant();
  void set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant);
  private:
  const ::kentik::mkp::v202102alpha1::Tenant& _internal_tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* _internal_mutable_tenant();
  public:
  void unsafe_arena_set_allocated_tenant(
      ::kentik::mkp::v202102alpha1::Tenant* tenant);
  ::kentik::mkp::v202102alpha1::Tenant* unsafe_arena_release_tenant();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.UpdateTenantResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Tenant* tenant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class PatchTenantRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.PatchTenantRequest) */ {
 public:
  inline PatchTenantRequest() : PatchTenantRequest(nullptr) {};
  virtual ~PatchTenantRequest();

  PatchTenantRequest(const PatchTenantRequest& from);
  PatchTenantRequest(PatchTenantRequest&& from) noexcept
    : PatchTenantRequest() {
    *this = ::std::move(from);
  }

  inline PatchTenantRequest& operator=(const PatchTenantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchTenantRequest& operator=(PatchTenantRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchTenantRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchTenantRequest* internal_default_instance() {
    return reinterpret_cast<const PatchTenantRequest*>(
               &_PatchTenantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PatchTenantRequest& a, PatchTenantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchTenantRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchTenantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchTenantRequest* New() const final {
    return CreateMaybeMessage<PatchTenantRequest>(nullptr);
  }

  PatchTenantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchTenantRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchTenantRequest& from);
  void MergeFrom(const PatchTenantRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchTenantRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.PatchTenantRequest";
  }
  protected:
  explicit PatchTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantFieldNumber = 1,
    kMaskFieldNumber = 2,
  };
  // .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
  bool has_tenant() const;
  private:
  bool _internal_has_tenant() const;
  public:
  void clear_tenant();
  const ::kentik::mkp::v202102alpha1::Tenant& tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* release_tenant();
  ::kentik::mkp::v202102alpha1::Tenant* mutable_tenant();
  void set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant);
  private:
  const ::kentik::mkp::v202102alpha1::Tenant& _internal_tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* _internal_mutable_tenant();
  public:
  void unsafe_arena_set_allocated_tenant(
      ::kentik::mkp::v202102alpha1::Tenant* tenant);
  ::kentik::mkp::v202102alpha1::Tenant* unsafe_arena_release_tenant();

  // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.PatchTenantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Tenant* tenant_;
  PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class PatchTenantResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.PatchTenantResponse) */ {
 public:
  inline PatchTenantResponse() : PatchTenantResponse(nullptr) {};
  virtual ~PatchTenantResponse();

  PatchTenantResponse(const PatchTenantResponse& from);
  PatchTenantResponse(PatchTenantResponse&& from) noexcept
    : PatchTenantResponse() {
    *this = ::std::move(from);
  }

  inline PatchTenantResponse& operator=(const PatchTenantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchTenantResponse& operator=(PatchTenantResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchTenantResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchTenantResponse* internal_default_instance() {
    return reinterpret_cast<const PatchTenantResponse*>(
               &_PatchTenantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PatchTenantResponse& a, PatchTenantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchTenantResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchTenantResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchTenantResponse* New() const final {
    return CreateMaybeMessage<PatchTenantResponse>(nullptr);
  }

  PatchTenantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchTenantResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchTenantResponse& from);
  void MergeFrom(const PatchTenantResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchTenantResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.PatchTenantResponse";
  }
  protected:
  explicit PatchTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTenantFieldNumber = 1,
  };
  // .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
  bool has_tenant() const;
  private:
  bool _internal_has_tenant() const;
  public:
  void clear_tenant();
  const ::kentik::mkp::v202102alpha1::Tenant& tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* release_tenant();
  ::kentik::mkp::v202102alpha1::Tenant* mutable_tenant();
  void set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant);
  private:
  const ::kentik::mkp::v202102alpha1::Tenant& _internal_tenant() const;
  ::kentik::mkp::v202102alpha1::Tenant* _internal_mutable_tenant();
  public:
  void unsafe_arena_set_allocated_tenant(
      ::kentik::mkp::v202102alpha1::Tenant* tenant);
  ::kentik::mkp::v202102alpha1::Tenant* unsafe_arena_release_tenant();

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.PatchTenantResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::mkp::v202102alpha1::Tenant* tenant_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class DeleteTenantRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.DeleteTenantRequest) */ {
 public:
  inline DeleteTenantRequest() : DeleteTenantRequest(nullptr) {};
  virtual ~DeleteTenantRequest();

  DeleteTenantRequest(const DeleteTenantRequest& from);
  DeleteTenantRequest(DeleteTenantRequest&& from) noexcept
    : DeleteTenantRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTenantRequest& operator=(const DeleteTenantRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTenantRequest& operator=(DeleteTenantRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTenantRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTenantRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTenantRequest*>(
               &_DeleteTenantRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DeleteTenantRequest& a, DeleteTenantRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTenantRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTenantRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTenantRequest* New() const final {
    return CreateMaybeMessage<DeleteTenantRequest>(nullptr);
  }

  DeleteTenantRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTenantRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTenantRequest& from);
  void MergeFrom(const DeleteTenantRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTenantRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.DeleteTenantRequest";
  }
  protected:
  explicit DeleteTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.DeleteTenantRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// -------------------------------------------------------------------

class DeleteTenantResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.mkp.v202102alpha1.DeleteTenantResponse) */ {
 public:
  inline DeleteTenantResponse() : DeleteTenantResponse(nullptr) {};
  virtual ~DeleteTenantResponse();

  DeleteTenantResponse(const DeleteTenantResponse& from);
  DeleteTenantResponse(DeleteTenantResponse&& from) noexcept
    : DeleteTenantResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTenantResponse& operator=(const DeleteTenantResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTenantResponse& operator=(DeleteTenantResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTenantResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTenantResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTenantResponse*>(
               &_DeleteTenantResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(DeleteTenantResponse& a, DeleteTenantResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTenantResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTenantResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTenantResponse* New() const final {
    return CreateMaybeMessage<DeleteTenantResponse>(nullptr);
  }

  DeleteTenantResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTenantResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTenantResponse& from);
  void MergeFrom(const DeleteTenantResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTenantResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.mkp.v202102alpha1.DeleteTenantResponse";
  }
  protected:
  explicit DeleteTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto);
    return ::descriptor_table_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.mkp.v202102alpha1.DeleteTenantResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Alert

// bool saved = 1[json_name = "saved"];
inline void Alert::clear_saved() {
  saved_ = false;
}
inline bool Alert::_internal_saved() const {
  return saved_;
}
inline bool Alert::saved() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Alert.saved)
  return _internal_saved();
}
inline void Alert::_internal_set_saved(bool value) {
  
  saved_ = value;
}
inline void Alert::set_saved(bool value) {
  _internal_set_saved(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Alert.saved)
}

// uint64 policy_id = 2[json_name = "policyId"];
inline void Alert::clear_policy_id() {
  policy_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Alert::_internal_policy_id() const {
  return policy_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Alert::policy_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Alert.policy_id)
  return _internal_policy_id();
}
inline void Alert::_internal_set_policy_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  policy_id_ = value;
}
inline void Alert::set_policy_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_policy_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Alert.policy_id)
}

// repeated .kentik.mkp.v202102alpha1.Threshold thresholds = 3[json_name = "thresholds"];
inline int Alert::_internal_thresholds_size() const {
  return thresholds_.size();
}
inline int Alert::thresholds_size() const {
  return _internal_thresholds_size();
}
inline void Alert::clear_thresholds() {
  thresholds_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Threshold* Alert::mutable_thresholds(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Alert.thresholds)
  return thresholds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Threshold >*
Alert::mutable_thresholds() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Alert.thresholds)
  return &thresholds_;
}
inline const ::kentik::mkp::v202102alpha1::Threshold& Alert::_internal_thresholds(int index) const {
  return thresholds_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Threshold& Alert::thresholds(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Alert.thresholds)
  return _internal_thresholds(index);
}
inline ::kentik::mkp::v202102alpha1::Threshold* Alert::_internal_add_thresholds() {
  return thresholds_.Add();
}
inline ::kentik::mkp::v202102alpha1::Threshold* Alert::add_thresholds() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Alert.thresholds)
  return _internal_add_thresholds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Threshold >&
Alert::thresholds() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Alert.thresholds)
  return thresholds_;
}

// string primary_metric = 4[json_name = "primaryMetric"];
inline void Alert::clear_primary_metric() {
  primary_metric_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alert::primary_metric() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Alert.primary_metric)
  return _internal_primary_metric();
}
inline void Alert::set_primary_metric(const std::string& value) {
  _internal_set_primary_metric(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Alert.primary_metric)
}
inline std::string* Alert::mutable_primary_metric() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Alert.primary_metric)
  return _internal_mutable_primary_metric();
}
inline const std::string& Alert::_internal_primary_metric() const {
  return primary_metric_.Get();
}
inline void Alert::_internal_set_primary_metric(const std::string& value) {
  
  primary_metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alert::set_primary_metric(std::string&& value) {
  
  primary_metric_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Alert.primary_metric)
}
inline void Alert::set_primary_metric(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  primary_metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Alert.primary_metric)
}
inline void Alert::set_primary_metric(const char* value,
    size_t size) {
  
  primary_metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Alert.primary_metric)
}
inline std::string* Alert::_internal_mutable_primary_metric() {
  
  return primary_metric_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alert::release_primary_metric() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Alert.primary_metric)
  return primary_metric_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alert::set_allocated_primary_metric(std::string* primary_metric) {
  if (primary_metric != nullptr) {
    
  } else {
    
  }
  primary_metric_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), primary_metric,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Alert.primary_metric)
}
inline std::string* Alert::unsafe_arena_release_primary_metric() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Alert.primary_metric)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return primary_metric_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alert::unsafe_arena_set_allocated_primary_metric(
    std::string* primary_metric) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (primary_metric != nullptr) {
    
  } else {
    
  }
  primary_metric_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      primary_metric, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Alert.primary_metric)
}

// repeated string secondary_metrics = 5[json_name = "secondaryMetrics"];
inline int Alert::_internal_secondary_metrics_size() const {
  return secondary_metrics_.size();
}
inline int Alert::secondary_metrics_size() const {
  return _internal_secondary_metrics_size();
}
inline void Alert::clear_secondary_metrics() {
  secondary_metrics_.Clear();
}
inline std::string* Alert::add_secondary_metrics() {
  // @@protoc_insertion_point(field_add_mutable:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
  return _internal_add_secondary_metrics();
}
inline const std::string& Alert::_internal_secondary_metrics(int index) const {
  return secondary_metrics_.Get(index);
}
inline const std::string& Alert::secondary_metrics(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
  return _internal_secondary_metrics(index);
}
inline std::string* Alert::mutable_secondary_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
  return secondary_metrics_.Mutable(index);
}
inline void Alert::set_secondary_metrics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
  secondary_metrics_.Mutable(index)->assign(value);
}
inline void Alert::set_secondary_metrics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
  secondary_metrics_.Mutable(index)->assign(std::move(value));
}
inline void Alert::set_secondary_metrics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  secondary_metrics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
}
inline void Alert::set_secondary_metrics(int index, const char* value, size_t size) {
  secondary_metrics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
}
inline std::string* Alert::_internal_add_secondary_metrics() {
  return secondary_metrics_.Add();
}
inline void Alert::add_secondary_metrics(const std::string& value) {
  secondary_metrics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
}
inline void Alert::add_secondary_metrics(std::string&& value) {
  secondary_metrics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
}
inline void Alert::add_secondary_metrics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  secondary_metrics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
}
inline void Alert::add_secondary_metrics(const char* value, size_t size) {
  secondary_metrics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Alert::secondary_metrics() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
  return secondary_metrics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Alert::mutable_secondary_metrics() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Alert.secondary_metrics)
  return &secondary_metrics_;
}

// bool is_template = 6[json_name = "isTemplate"];
inline void Alert::clear_is_template() {
  is_template_ = false;
}
inline bool Alert::_internal_is_template() const {
  return is_template_;
}
inline bool Alert::is_template() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Alert.is_template)
  return _internal_is_template();
}
inline void Alert::_internal_set_is_template(bool value) {
  
  is_template_ = value;
}
inline void Alert::set_is_template(bool value) {
  _internal_set_is_template(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Alert.is_template)
}

// string subpolicy_id = 7[json_name = "subpolicyId"];
inline void Alert::clear_subpolicy_id() {
  subpolicy_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Alert::subpolicy_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
  return _internal_subpolicy_id();
}
inline void Alert::set_subpolicy_id(const std::string& value) {
  _internal_set_subpolicy_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
}
inline std::string* Alert::mutable_subpolicy_id() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
  return _internal_mutable_subpolicy_id();
}
inline const std::string& Alert::_internal_subpolicy_id() const {
  return subpolicy_id_.Get();
}
inline void Alert::_internal_set_subpolicy_id(const std::string& value) {
  
  subpolicy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Alert::set_subpolicy_id(std::string&& value) {
  
  subpolicy_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
}
inline void Alert::set_subpolicy_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subpolicy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
}
inline void Alert::set_subpolicy_id(const char* value,
    size_t size) {
  
  subpolicy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
}
inline std::string* Alert::_internal_mutable_subpolicy_id() {
  
  return subpolicy_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Alert::release_subpolicy_id() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
  return subpolicy_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Alert::set_allocated_subpolicy_id(std::string* subpolicy_id) {
  if (subpolicy_id != nullptr) {
    
  } else {
    
  }
  subpolicy_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subpolicy_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
}
inline std::string* Alert::unsafe_arena_release_subpolicy_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subpolicy_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Alert::unsafe_arena_set_allocated_subpolicy_id(
    std::string* subpolicy_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subpolicy_id != nullptr) {
    
  } else {
    
  }
  subpolicy_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subpolicy_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Alert.subpolicy_id)
}

// -------------------------------------------------------------------

// Asset_Report

// uint64 id = 1[json_name = "id"];
inline void Asset_Report::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Asset_Report::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Asset_Report::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Asset.Report.id)
  return _internal_id();
}
inline void Asset_Report::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Asset_Report::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Asset.Report.id)
}

// string type = 2[json_name = "type"];
inline void Asset_Report::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Asset_Report::type() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Asset.Report.type)
  return _internal_type();
}
inline void Asset_Report::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Asset.Report.type)
}
inline std::string* Asset_Report::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Asset.Report.type)
  return _internal_mutable_type();
}
inline const std::string& Asset_Report::_internal_type() const {
  return type_.Get();
}
inline void Asset_Report::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Asset_Report::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Asset.Report.type)
}
inline void Asset_Report::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Asset.Report.type)
}
inline void Asset_Report::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Asset.Report.type)
}
inline std::string* Asset_Report::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Asset_Report::release_type() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Asset.Report.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Asset_Report::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Asset.Report.type)
}
inline std::string* Asset_Report::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Asset.Report.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Asset_Report::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Asset.Report.type)
}

// -------------------------------------------------------------------

// Asset

// repeated .kentik.mkp.v202102alpha1.Asset.Report reports = 1[json_name = "reports"];
inline int Asset::_internal_reports_size() const {
  return reports_.size();
}
inline int Asset::reports_size() const {
  return _internal_reports_size();
}
inline void Asset::clear_reports() {
  reports_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Asset_Report* Asset::mutable_reports(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Asset.reports)
  return reports_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Asset_Report >*
Asset::mutable_reports() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Asset.reports)
  return &reports_;
}
inline const ::kentik::mkp::v202102alpha1::Asset_Report& Asset::_internal_reports(int index) const {
  return reports_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Asset_Report& Asset::reports(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Asset.reports)
  return _internal_reports(index);
}
inline ::kentik::mkp::v202102alpha1::Asset_Report* Asset::_internal_add_reports() {
  return reports_.Add();
}
inline ::kentik::mkp::v202102alpha1::Asset_Report* Asset::add_reports() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Asset.reports)
  return _internal_add_reports();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Asset_Report >&
Asset::reports() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Asset.reports)
  return reports_;
}

// .kentik.mkp.v202102alpha1.Asset.Report default_report = 2[json_name = "defaultReport"];
inline bool Asset::_internal_has_default_report() const {
  return this != internal_default_instance() && default_report_ != nullptr;
}
inline bool Asset::has_default_report() const {
  return _internal_has_default_report();
}
inline void Asset::clear_default_report() {
  if (GetArena() == nullptr && default_report_ != nullptr) {
    delete default_report_;
  }
  default_report_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Asset_Report& Asset::_internal_default_report() const {
  const ::kentik::mkp::v202102alpha1::Asset_Report* p = default_report_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Asset_Report*>(
      &::kentik::mkp::v202102alpha1::_Asset_Report_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Asset_Report& Asset::default_report() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Asset.default_report)
  return _internal_default_report();
}
inline void Asset::unsafe_arena_set_allocated_default_report(
    ::kentik::mkp::v202102alpha1::Asset_Report* default_report) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(default_report_);
  }
  default_report_ = default_report;
  if (default_report) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Asset.default_report)
}
inline ::kentik::mkp::v202102alpha1::Asset_Report* Asset::release_default_report() {
  auto temp = unsafe_arena_release_default_report();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Asset_Report* Asset::unsafe_arena_release_default_report() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Asset.default_report)
  
  ::kentik::mkp::v202102alpha1::Asset_Report* temp = default_report_;
  default_report_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Asset_Report* Asset::_internal_mutable_default_report() {
  
  if (default_report_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Asset_Report>(GetArena());
    default_report_ = p;
  }
  return default_report_;
}
inline ::kentik::mkp::v202102alpha1::Asset_Report* Asset::mutable_default_report() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Asset.default_report)
  return _internal_mutable_default_report();
}
inline void Asset::set_allocated_default_report(::kentik::mkp::v202102alpha1::Asset_Report* default_report) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete default_report_;
  }
  if (default_report) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(default_report);
    if (message_arena != submessage_arena) {
      default_report = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_report, submessage_arena);
    }
    
  } else {
    
  }
  default_report_ = default_report;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Asset.default_report)
}

// -------------------------------------------------------------------

// Threshold

// uint64 id = 1[json_name = "id"];
inline void Threshold::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Threshold::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Threshold::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.id)
  return _internal_id();
}
inline void Threshold::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Threshold::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Threshold.id)
}

// .kentik.mkp.v202102alpha1.Activate activate = 2[json_name = "activate"];
inline bool Threshold::_internal_has_activate() const {
  return this != internal_default_instance() && activate_ != nullptr;
}
inline bool Threshold::has_activate() const {
  return _internal_has_activate();
}
inline void Threshold::clear_activate() {
  if (GetArena() == nullptr && activate_ != nullptr) {
    delete activate_;
  }
  activate_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Activate& Threshold::_internal_activate() const {
  const ::kentik::mkp::v202102alpha1::Activate* p = activate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Activate*>(
      &::kentik::mkp::v202102alpha1::_Activate_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Activate& Threshold::activate() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.activate)
  return _internal_activate();
}
inline void Threshold::unsafe_arena_set_allocated_activate(
    ::kentik::mkp::v202102alpha1::Activate* activate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activate_);
  }
  activate_ = activate;
  if (activate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Threshold.activate)
}
inline ::kentik::mkp::v202102alpha1::Activate* Threshold::release_activate() {
  auto temp = unsafe_arena_release_activate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Activate* Threshold::unsafe_arena_release_activate() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Threshold.activate)
  
  ::kentik::mkp::v202102alpha1::Activate* temp = activate_;
  activate_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Activate* Threshold::_internal_mutable_activate() {
  
  if (activate_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Activate>(GetArena());
    activate_ = p;
  }
  return activate_;
}
inline ::kentik::mkp::v202102alpha1::Activate* Threshold::mutable_activate() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Threshold.activate)
  return _internal_mutable_activate();
}
inline void Threshold::set_allocated_activate(::kentik::mkp::v202102alpha1::Activate* activate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete activate_;
  }
  if (activate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(activate);
    if (message_arena != submessage_arena) {
      activate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activate, submessage_arena);
    }
    
  } else {
    
  }
  activate_ = activate;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Threshold.activate)
}

// string severity = 3[json_name = "severity"];
inline void Threshold::clear_severity() {
  severity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Threshold::severity() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.severity)
  return _internal_severity();
}
inline void Threshold::set_severity(const std::string& value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Threshold.severity)
}
inline std::string* Threshold::mutable_severity() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Threshold.severity)
  return _internal_mutable_severity();
}
inline const std::string& Threshold::_internal_severity() const {
  return severity_.Get();
}
inline void Threshold::_internal_set_severity(const std::string& value) {
  
  severity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Threshold::set_severity(std::string&& value) {
  
  severity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Threshold.severity)
}
inline void Threshold::set_severity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  severity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Threshold.severity)
}
inline void Threshold::set_severity(const char* value,
    size_t size) {
  
  severity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Threshold.severity)
}
inline std::string* Threshold::_internal_mutable_severity() {
  
  return severity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Threshold::release_severity() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Threshold.severity)
  return severity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Threshold::set_allocated_severity(std::string* severity) {
  if (severity != nullptr) {
    
  } else {
    
  }
  severity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), severity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Threshold.severity)
}
inline std::string* Threshold::unsafe_arena_release_severity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Threshold.severity)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return severity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Threshold::unsafe_arena_set_allocated_severity(
    std::string* severity) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (severity != nullptr) {
    
  } else {
    
  }
  severity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      severity, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Threshold.severity)
}

// repeated .kentik.mkp.v202102alpha1.Condition conditions = 4[json_name = "conditions"];
inline int Threshold::_internal_conditions_size() const {
  return conditions_.size();
}
inline int Threshold::conditions_size() const {
  return _internal_conditions_size();
}
inline void Threshold::clear_conditions() {
  conditions_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Condition* Threshold::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Threshold.conditions)
  return conditions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Condition >*
Threshold::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Threshold.conditions)
  return &conditions_;
}
inline const ::kentik::mkp::v202102alpha1::Condition& Threshold::_internal_conditions(int index) const {
  return conditions_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Condition& Threshold::conditions(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.conditions)
  return _internal_conditions(index);
}
inline ::kentik::mkp::v202102alpha1::Condition* Threshold::_internal_add_conditions() {
  return conditions_.Add();
}
inline ::kentik::mkp::v202102alpha1::Condition* Threshold::add_conditions() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Threshold.conditions)
  return _internal_add_conditions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Condition >&
Threshold::conditions() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Threshold.conditions)
  return conditions_;
}

// repeated .kentik.mkp.v202102alpha1.Mitigation mitigations = 5[json_name = "mitigations"];
inline int Threshold::_internal_mitigations_size() const {
  return mitigations_.size();
}
inline int Threshold::mitigations_size() const {
  return _internal_mitigations_size();
}
inline void Threshold::clear_mitigations() {
  mitigations_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Mitigation* Threshold::mutable_mitigations(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Threshold.mitigations)
  return mitigations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Mitigation >*
Threshold::mutable_mitigations() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Threshold.mitigations)
  return &mitigations_;
}
inline const ::kentik::mkp::v202102alpha1::Mitigation& Threshold::_internal_mitigations(int index) const {
  return mitigations_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Mitigation& Threshold::mitigations(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.mitigations)
  return _internal_mitigations(index);
}
inline ::kentik::mkp::v202102alpha1::Mitigation* Threshold::_internal_add_mitigations() {
  return mitigations_.Add();
}
inline ::kentik::mkp::v202102alpha1::Mitigation* Threshold::add_mitigations() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Threshold.mitigations)
  return _internal_add_mitigations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Mitigation >&
Threshold::mitigations() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Threshold.mitigations)
  return mitigations_;
}

// repeated .kentik.mkp.v202102alpha1.NotificationChannel notification_channels = 6[json_name = "notificationChannels"];
inline int Threshold::_internal_notification_channels_size() const {
  return notification_channels_.size();
}
inline int Threshold::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void Threshold::clear_notification_channels() {
  notification_channels_.Clear();
}
inline ::kentik::mkp::v202102alpha1::NotificationChannel* Threshold::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Threshold.notification_channels)
  return notification_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::NotificationChannel >*
Threshold::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Threshold.notification_channels)
  return &notification_channels_;
}
inline const ::kentik::mkp::v202102alpha1::NotificationChannel& Threshold::_internal_notification_channels(int index) const {
  return notification_channels_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::NotificationChannel& Threshold::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.notification_channels)
  return _internal_notification_channels(index);
}
inline ::kentik::mkp::v202102alpha1::NotificationChannel* Threshold::_internal_add_notification_channels() {
  return notification_channels_.Add();
}
inline ::kentik::mkp::v202102alpha1::NotificationChannel* Threshold::add_notification_channels() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Threshold.notification_channels)
  return _internal_add_notification_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::NotificationChannel >&
Threshold::notification_channels() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Threshold.notification_channels)
  return notification_channels_;
}

// bool threshold_ack_required = 7[json_name = "thresholdAckRequired"];
inline void Threshold::clear_threshold_ack_required() {
  threshold_ack_required_ = false;
}
inline bool Threshold::_internal_threshold_ack_required() const {
  return threshold_ack_required_;
}
inline bool Threshold::threshold_ack_required() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.threshold_ack_required)
  return _internal_threshold_ack_required();
}
inline void Threshold::_internal_set_threshold_ack_required(bool value) {
  
  threshold_ack_required_ = value;
}
inline void Threshold::set_threshold_ack_required(bool value) {
  _internal_set_threshold_ack_required(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Threshold.threshold_ack_required)
}

// bool enable_tenant_notifications = 8[json_name = "enableTenantNotifications"];
inline void Threshold::clear_enable_tenant_notifications() {
  enable_tenant_notifications_ = false;
}
inline bool Threshold::_internal_enable_tenant_notifications() const {
  return enable_tenant_notifications_;
}
inline bool Threshold::enable_tenant_notifications() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.enable_tenant_notifications)
  return _internal_enable_tenant_notifications();
}
inline void Threshold::_internal_set_enable_tenant_notifications(bool value) {
  
  enable_tenant_notifications_ = value;
}
inline void Threshold::set_enable_tenant_notifications(bool value) {
  _internal_set_enable_tenant_notifications(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Threshold.enable_tenant_notifications)
}

// bool receive_landlord_notifications = 9[json_name = "receiveLandlordNotifications"];
inline void Threshold::clear_receive_landlord_notifications() {
  receive_landlord_notifications_ = false;
}
inline bool Threshold::_internal_receive_landlord_notifications() const {
  return receive_landlord_notifications_;
}
inline bool Threshold::receive_landlord_notifications() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Threshold.receive_landlord_notifications)
  return _internal_receive_landlord_notifications();
}
inline void Threshold::_internal_set_receive_landlord_notifications(bool value) {
  
  receive_landlord_notifications_ = value;
}
inline void Threshold::set_receive_landlord_notifications(bool value) {
  _internal_set_receive_landlord_notifications(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Threshold.receive_landlord_notifications)
}

// -------------------------------------------------------------------

// Activate

// uint32 times = 1[json_name = "times"];
inline void Activate::clear_times() {
  times_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activate::_internal_times() const {
  return times_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activate::times() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Activate.times)
  return _internal_times();
}
inline void Activate::_internal_set_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  times_ = value;
}
inline void Activate::set_times(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Activate.times)
}

// string operator = 2[json_name = "operator"];
inline void Activate::clear_operator_() {
  operator__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Activate::operator_() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Activate.operator)
  return _internal_operator_();
}
inline void Activate::set_operator_(const std::string& value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Activate.operator)
}
inline std::string* Activate::mutable_operator_() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Activate.operator)
  return _internal_mutable_operator_();
}
inline const std::string& Activate::_internal_operator_() const {
  return operator__.Get();
}
inline void Activate::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Activate::set_operator_(std::string&& value) {
  
  operator__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Activate.operator)
}
inline void Activate::set_operator_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Activate.operator)
}
inline void Activate::set_operator_(const char* value,
    size_t size) {
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Activate.operator)
}
inline std::string* Activate::_internal_mutable_operator_() {
  
  return operator__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Activate::release_operator_() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Activate.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activate::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Activate.operator)
}
inline std::string* Activate::unsafe_arena_release_operator_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Activate.operator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operator__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Activate::unsafe_arena_set_allocated_operator_(
    std::string* operator_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operator_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Activate.operator)
}

// string time_unit = 3[json_name = "timeUnit"];
inline void Activate::clear_time_unit() {
  time_unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Activate::time_unit() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Activate.time_unit)
  return _internal_time_unit();
}
inline void Activate::set_time_unit(const std::string& value) {
  _internal_set_time_unit(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Activate.time_unit)
}
inline std::string* Activate::mutable_time_unit() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Activate.time_unit)
  return _internal_mutable_time_unit();
}
inline const std::string& Activate::_internal_time_unit() const {
  return time_unit_.Get();
}
inline void Activate::_internal_set_time_unit(const std::string& value) {
  
  time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Activate::set_time_unit(std::string&& value) {
  
  time_unit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Activate.time_unit)
}
inline void Activate::set_time_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Activate.time_unit)
}
inline void Activate::set_time_unit(const char* value,
    size_t size) {
  
  time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Activate.time_unit)
}
inline std::string* Activate::_internal_mutable_time_unit() {
  
  return time_unit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Activate::release_time_unit() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Activate.time_unit)
  return time_unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Activate::set_allocated_time_unit(std::string* time_unit) {
  if (time_unit != nullptr) {
    
  } else {
    
  }
  time_unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Activate.time_unit)
}
inline std::string* Activate::unsafe_arena_release_time_unit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Activate.time_unit)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return time_unit_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Activate::unsafe_arena_set_allocated_time_unit(
    std::string* time_unit) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time_unit != nullptr) {
    
  } else {
    
  }
  time_unit_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time_unit, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Activate.time_unit)
}

// uint32 time_window = 4[json_name = "timeWindow"];
inline void Activate::clear_time_window() {
  time_window_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activate::_internal_time_window() const {
  return time_window_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activate::time_window() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Activate.time_window)
  return _internal_time_window();
}
inline void Activate::_internal_set_time_window(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  time_window_ = value;
}
inline void Activate::set_time_window(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_time_window(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Activate.time_window)
}

// uint32 grace_period = 5[json_name = "gracePeriod"];
inline void Activate::clear_grace_period() {
  grace_period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activate::_internal_grace_period() const {
  return grace_period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Activate::grace_period() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Activate.grace_period)
  return _internal_grace_period();
}
inline void Activate::_internal_set_grace_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  grace_period_ = value;
}
inline void Activate::set_grace_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_grace_period(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Activate.grace_period)
}

// -------------------------------------------------------------------

// Condition

// string type = 1[json_name = "type"];
inline void Condition::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Condition::type() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Condition.type)
  return _internal_type();
}
inline void Condition::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Condition.type)
}
inline std::string* Condition::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Condition.type)
  return _internal_mutable_type();
}
inline const std::string& Condition::_internal_type() const {
  return type_.Get();
}
inline void Condition::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Condition::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Condition.type)
}
inline void Condition::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Condition.type)
}
inline void Condition::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Condition.type)
}
inline std::string* Condition::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Condition::release_type() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Condition.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Condition::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Condition.type)
}
inline std::string* Condition::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Condition.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Condition::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Condition.type)
}

// uint32 value = 2[json_name = "value"];
inline void Condition::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Condition::value() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Condition.value)
  return _internal_value();
}
inline void Condition::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void Condition::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Condition.value)
}

// string metric = 3[json_name = "metric"];
inline void Condition::clear_metric() {
  metric_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Condition::metric() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Condition.metric)
  return _internal_metric();
}
inline void Condition::set_metric(const std::string& value) {
  _internal_set_metric(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Condition.metric)
}
inline std::string* Condition::mutable_metric() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Condition.metric)
  return _internal_mutable_metric();
}
inline const std::string& Condition::_internal_metric() const {
  return metric_.Get();
}
inline void Condition::_internal_set_metric(const std::string& value) {
  
  metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Condition::set_metric(std::string&& value) {
  
  metric_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Condition.metric)
}
inline void Condition::set_metric(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Condition.metric)
}
inline void Condition::set_metric(const char* value,
    size_t size) {
  
  metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Condition.metric)
}
inline std::string* Condition::_internal_mutable_metric() {
  
  return metric_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Condition::release_metric() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Condition.metric)
  return metric_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Condition::set_allocated_metric(std::string* metric) {
  if (metric != nullptr) {
    
  } else {
    
  }
  metric_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), metric,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Condition.metric)
}
inline std::string* Condition::unsafe_arena_release_metric() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Condition.metric)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return metric_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Condition::unsafe_arena_set_allocated_metric(
    std::string* metric) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (metric != nullptr) {
    
  } else {
    
  }
  metric_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      metric, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Condition.metric)
}

// string operator = 4[json_name = "operator"];
inline void Condition::clear_operator_() {
  operator__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Condition::operator_() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Condition.operator)
  return _internal_operator_();
}
inline void Condition::set_operator_(const std::string& value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Condition.operator)
}
inline std::string* Condition::mutable_operator_() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Condition.operator)
  return _internal_mutable_operator_();
}
inline const std::string& Condition::_internal_operator_() const {
  return operator__.Get();
}
inline void Condition::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Condition::set_operator_(std::string&& value) {
  
  operator__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Condition.operator)
}
inline void Condition::set_operator_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Condition.operator)
}
inline void Condition::set_operator_(const char* value,
    size_t size) {
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Condition.operator)
}
inline std::string* Condition::_internal_mutable_operator_() {
  
  return operator__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Condition::release_operator_() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Condition.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Condition::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Condition.operator)
}
inline std::string* Condition::unsafe_arena_release_operator_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Condition.operator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operator__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Condition::unsafe_arena_set_allocated_operator_(
    std::string* operator_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operator_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Condition.operator)
}

// string value_type = 5[json_name = "valueType"];
inline void Condition::clear_value_type() {
  value_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Condition::value_type() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Condition.value_type)
  return _internal_value_type();
}
inline void Condition::set_value_type(const std::string& value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Condition.value_type)
}
inline std::string* Condition::mutable_value_type() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Condition.value_type)
  return _internal_mutable_value_type();
}
inline const std::string& Condition::_internal_value_type() const {
  return value_type_.Get();
}
inline void Condition::_internal_set_value_type(const std::string& value) {
  
  value_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Condition::set_value_type(std::string&& value) {
  
  value_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Condition.value_type)
}
inline void Condition::set_value_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Condition.value_type)
}
inline void Condition::set_value_type(const char* value,
    size_t size) {
  
  value_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Condition.value_type)
}
inline std::string* Condition::_internal_mutable_value_type() {
  
  return value_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Condition::release_value_type() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Condition.value_type)
  return value_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Condition::set_allocated_value_type(std::string* value_type) {
  if (value_type != nullptr) {
    
  } else {
    
  }
  value_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Condition.value_type)
}
inline std::string* Condition::unsafe_arena_release_value_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Condition.value_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Condition::unsafe_arena_set_allocated_value_type(
    std::string* value_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value_type != nullptr) {
    
  } else {
    
  }
  value_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Condition.value_type)
}

// string value_select = 6[json_name = "valueSelect"];
inline void Condition::clear_value_select() {
  value_select_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Condition::value_select() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Condition.value_select)
  return _internal_value_select();
}
inline void Condition::set_value_select(const std::string& value) {
  _internal_set_value_select(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Condition.value_select)
}
inline std::string* Condition::mutable_value_select() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Condition.value_select)
  return _internal_mutable_value_select();
}
inline const std::string& Condition::_internal_value_select() const {
  return value_select_.Get();
}
inline void Condition::_internal_set_value_select(const std::string& value) {
  
  value_select_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Condition::set_value_select(std::string&& value) {
  
  value_select_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Condition.value_select)
}
inline void Condition::set_value_select(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_select_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Condition.value_select)
}
inline void Condition::set_value_select(const char* value,
    size_t size) {
  
  value_select_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Condition.value_select)
}
inline std::string* Condition::_internal_mutable_value_select() {
  
  return value_select_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Condition::release_value_select() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Condition.value_select)
  return value_select_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Condition::set_allocated_value_select(std::string* value_select) {
  if (value_select != nullptr) {
    
  } else {
    
  }
  value_select_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_select,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Condition.value_select)
}
inline std::string* Condition::unsafe_arena_release_value_select() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Condition.value_select)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_select_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Condition::unsafe_arena_set_allocated_value_select(
    std::string* value_select) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value_select != nullptr) {
    
  } else {
    
  }
  value_select_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value_select, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Condition.value_select)
}

// -------------------------------------------------------------------

// Mitigation

// uint64 id = 13[json_name = "id"];
inline void Mitigation::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mitigation::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mitigation::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.id)
  return _internal_id();
}
inline void Mitigation::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Mitigation::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.id)
}

// string status = 1[json_name = "status"];
inline void Mitigation::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mitigation::status() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.status)
  return _internal_status();
}
inline void Mitigation::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.status)
}
inline std::string* Mitigation::mutable_status() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Mitigation.status)
  return _internal_mutable_status();
}
inline const std::string& Mitigation::_internal_status() const {
  return status_.Get();
}
inline void Mitigation::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mitigation::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Mitigation.status)
}
inline void Mitigation::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Mitigation.status)
}
inline void Mitigation::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Mitigation.status)
}
inline std::string* Mitigation::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mitigation::release_status() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Mitigation.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mitigation::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Mitigation.status)
}
inline std::string* Mitigation::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Mitigation.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mitigation::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Mitigation.status)
}

// uint64 company_id = 2[json_name = "companyId"];
inline void Mitigation::clear_company_id() {
  company_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mitigation::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mitigation::company_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.company_id)
  return _internal_company_id();
}
inline void Mitigation::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  company_id_ = value;
}
inline void Mitigation::set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.company_id)
}

// uint64 pairing_id = 3[json_name = "pairingId"];
inline void Mitigation::clear_pairing_id() {
  pairing_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mitigation::_internal_pairing_id() const {
  return pairing_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mitigation::pairing_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.pairing_id)
  return _internal_pairing_id();
}
inline void Mitigation::_internal_set_pairing_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pairing_id_ = value;
}
inline void Mitigation::set_pairing_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pairing_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.pairing_id)
}

// uint64 threshold_id = 4[json_name = "thresholdId"];
inline void Mitigation::clear_threshold_id() {
  threshold_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mitigation::_internal_threshold_id() const {
  return threshold_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Mitigation::threshold_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.threshold_id)
  return _internal_threshold_id();
}
inline void Mitigation::_internal_set_threshold_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  threshold_id_ = value;
}
inline void Mitigation::set_threshold_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_threshold_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.threshold_id)
}

// bool is_method_overridable = 5[json_name = "isMethodOverridable"];
inline void Mitigation::clear_is_method_overridable() {
  is_method_overridable_ = false;
}
inline bool Mitigation::_internal_is_method_overridable() const {
  return is_method_overridable_;
}
inline bool Mitigation::is_method_overridable() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.is_method_overridable)
  return _internal_is_method_overridable();
}
inline void Mitigation::_internal_set_is_method_overridable(bool value) {
  
  is_method_overridable_ = value;
}
inline void Mitigation::set_is_method_overridable(bool value) {
  _internal_set_is_method_overridable(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.is_method_overridable)
}

// string mitigation_apply_type = 6[json_name = "mitigationApplyType"];
inline void Mitigation::clear_mitigation_apply_type() {
  mitigation_apply_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mitigation::mitigation_apply_type() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
  return _internal_mitigation_apply_type();
}
inline void Mitigation::set_mitigation_apply_type(const std::string& value) {
  _internal_set_mitigation_apply_type(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
}
inline std::string* Mitigation::mutable_mitigation_apply_type() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
  return _internal_mutable_mitigation_apply_type();
}
inline const std::string& Mitigation::_internal_mitigation_apply_type() const {
  return mitigation_apply_type_.Get();
}
inline void Mitigation::_internal_set_mitigation_apply_type(const std::string& value) {
  
  mitigation_apply_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mitigation::set_mitigation_apply_type(std::string&& value) {
  
  mitigation_apply_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
}
inline void Mitigation::set_mitigation_apply_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mitigation_apply_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
}
inline void Mitigation::set_mitigation_apply_type(const char* value,
    size_t size) {
  
  mitigation_apply_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
}
inline std::string* Mitigation::_internal_mutable_mitigation_apply_type() {
  
  return mitigation_apply_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mitigation::release_mitigation_apply_type() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
  return mitigation_apply_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mitigation::set_allocated_mitigation_apply_type(std::string* mitigation_apply_type) {
  if (mitigation_apply_type != nullptr) {
    
  } else {
    
  }
  mitigation_apply_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mitigation_apply_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
}
inline std::string* Mitigation::unsafe_arena_release_mitigation_apply_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mitigation_apply_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mitigation::unsafe_arena_set_allocated_mitigation_apply_type(
    std::string* mitigation_apply_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mitigation_apply_type != nullptr) {
    
  } else {
    
  }
  mitigation_apply_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mitigation_apply_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_type)
}

// string mitigation_clear_type = 7[json_name = "mitigationClearType"];
inline void Mitigation::clear_mitigation_clear_type() {
  mitigation_clear_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mitigation::mitigation_clear_type() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
  return _internal_mitigation_clear_type();
}
inline void Mitigation::set_mitigation_clear_type(const std::string& value) {
  _internal_set_mitigation_clear_type(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
}
inline std::string* Mitigation::mutable_mitigation_clear_type() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
  return _internal_mutable_mitigation_clear_type();
}
inline const std::string& Mitigation::_internal_mitigation_clear_type() const {
  return mitigation_clear_type_.Get();
}
inline void Mitigation::_internal_set_mitigation_clear_type(const std::string& value) {
  
  mitigation_clear_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mitigation::set_mitigation_clear_type(std::string&& value) {
  
  mitigation_clear_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
}
inline void Mitigation::set_mitigation_clear_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mitigation_clear_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
}
inline void Mitigation::set_mitigation_clear_type(const char* value,
    size_t size) {
  
  mitigation_clear_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
}
inline std::string* Mitigation::_internal_mutable_mitigation_clear_type() {
  
  return mitigation_clear_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mitigation::release_mitigation_clear_type() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
  return mitigation_clear_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mitigation::set_allocated_mitigation_clear_type(std::string* mitigation_clear_type) {
  if (mitigation_clear_type != nullptr) {
    
  } else {
    
  }
  mitigation_clear_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mitigation_clear_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
}
inline std::string* Mitigation::unsafe_arena_release_mitigation_clear_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mitigation_clear_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mitigation::unsafe_arena_set_allocated_mitigation_clear_type(
    std::string* mitigation_clear_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mitigation_clear_type != nullptr) {
    
  } else {
    
  }
  mitigation_clear_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mitigation_clear_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_type)
}

// uint32 mitigation_apply_timer = 8[json_name = "mitigationApplyTimer"];
inline void Mitigation::clear_mitigation_apply_timer() {
  mitigation_apply_timer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mitigation::_internal_mitigation_apply_timer() const {
  return mitigation_apply_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mitigation::mitigation_apply_timer() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_timer)
  return _internal_mitigation_apply_timer();
}
inline void Mitigation::_internal_set_mitigation_apply_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mitigation_apply_timer_ = value;
}
inline void Mitigation::set_mitigation_apply_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mitigation_apply_timer(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.mitigation_apply_timer)
}

// uint32 mitigation_clear_timer = 9[json_name = "mitigationClearTimer"];
inline void Mitigation::clear_mitigation_clear_timer() {
  mitigation_clear_timer_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mitigation::_internal_mitigation_clear_timer() const {
  return mitigation_clear_timer_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Mitigation::mitigation_clear_timer() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_timer)
  return _internal_mitigation_clear_timer();
}
inline void Mitigation::_internal_set_mitigation_clear_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  mitigation_clear_timer_ = value;
}
inline void Mitigation::set_mitigation_clear_timer(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_mitigation_clear_timer(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.mitigation_clear_timer)
}

// bool is_platform_overridable = 10[json_name = "isPlatformOverridable"];
inline void Mitigation::clear_is_platform_overridable() {
  is_platform_overridable_ = false;
}
inline bool Mitigation::_internal_is_platform_overridable() const {
  return is_platform_overridable_;
}
inline bool Mitigation::is_platform_overridable() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.is_platform_overridable)
  return _internal_is_platform_overridable();
}
inline void Mitigation::_internal_set_is_platform_overridable(bool value) {
  
  is_platform_overridable_ = value;
}
inline void Mitigation::set_is_platform_overridable(bool value) {
  _internal_set_is_platform_overridable(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.is_platform_overridable)
}

// string cdate = 11[json_name = "cdate"];
inline void Mitigation::clear_cdate() {
  cdate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mitigation::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.cdate)
  return _internal_cdate();
}
inline void Mitigation::set_cdate(const std::string& value) {
  _internal_set_cdate(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.cdate)
}
inline std::string* Mitigation::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Mitigation.cdate)
  return _internal_mutable_cdate();
}
inline const std::string& Mitigation::_internal_cdate() const {
  return cdate_.Get();
}
inline void Mitigation::_internal_set_cdate(const std::string& value) {
  
  cdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mitigation::set_cdate(std::string&& value) {
  
  cdate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Mitigation.cdate)
}
inline void Mitigation::set_cdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Mitigation.cdate)
}
inline void Mitigation::set_cdate(const char* value,
    size_t size) {
  
  cdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Mitigation.cdate)
}
inline std::string* Mitigation::_internal_mutable_cdate() {
  
  return cdate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mitigation::release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Mitigation.cdate)
  return cdate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mitigation::set_allocated_cdate(std::string* cdate) {
  if (cdate != nullptr) {
    
  } else {
    
  }
  cdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cdate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Mitigation.cdate)
}
inline std::string* Mitigation::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Mitigation.cdate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cdate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mitigation::unsafe_arena_set_allocated_cdate(
    std::string* cdate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cdate != nullptr) {
    
  } else {
    
  }
  cdate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cdate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Mitigation.cdate)
}

// string edate = 12[json_name = "edate"];
inline void Mitigation::clear_edate() {
  edate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Mitigation::edate() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Mitigation.edate)
  return _internal_edate();
}
inline void Mitigation::set_edate(const std::string& value) {
  _internal_set_edate(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Mitigation.edate)
}
inline std::string* Mitigation::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Mitigation.edate)
  return _internal_mutable_edate();
}
inline const std::string& Mitigation::_internal_edate() const {
  return edate_.Get();
}
inline void Mitigation::_internal_set_edate(const std::string& value) {
  
  edate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Mitigation::set_edate(std::string&& value) {
  
  edate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Mitigation.edate)
}
inline void Mitigation::set_edate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  edate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Mitigation.edate)
}
inline void Mitigation::set_edate(const char* value,
    size_t size) {
  
  edate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Mitigation.edate)
}
inline std::string* Mitigation::_internal_mutable_edate() {
  
  return edate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Mitigation::release_edate() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Mitigation.edate)
  return edate_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Mitigation::set_allocated_edate(std::string* edate) {
  if (edate != nullptr) {
    
  } else {
    
  }
  edate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), edate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Mitigation.edate)
}
inline std::string* Mitigation::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Mitigation.edate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return edate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Mitigation::unsafe_arena_set_allocated_edate(
    std::string* edate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (edate != nullptr) {
    
  } else {
    
  }
  edate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      edate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Mitigation.edate)
}

// -------------------------------------------------------------------

// NotificationChannel

// uint64 id = 1[json_name = "id"];
inline void NotificationChannel::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NotificationChannel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 NotificationChannel::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.NotificationChannel.id)
  return _internal_id();
}
inline void NotificationChannel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void NotificationChannel::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.NotificationChannel.id)
}

// -------------------------------------------------------------------

// User

// uint64 id = 1[json_name = "id"];
inline void User::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.id)
  return _internal_id();
}
inline void User::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void User::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.id)
}

// uint64 company_id = 2[json_name = "companyId"];
inline void User::clear_company_id() {
  company_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::company_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.company_id)
  return _internal_company_id();
}
inline void User::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  company_id_ = value;
}
inline void User::set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.company_id)
}

// string user_email = 3[json_name = "userEmail"];
inline void User::clear_user_email() {
  user_email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::user_email() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.user_email)
  return _internal_user_email();
}
inline void User::set_user_email(const std::string& value) {
  _internal_set_user_email(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.user_email)
}
inline std::string* User::mutable_user_email() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.User.user_email)
  return _internal_mutable_user_email();
}
inline const std::string& User::_internal_user_email() const {
  return user_email_.Get();
}
inline void User::_internal_set_user_email(const std::string& value) {
  
  user_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_user_email(std::string&& value) {
  
  user_email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.User.user_email)
}
inline void User::set_user_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.User.user_email)
}
inline void User::set_user_email(const char* value,
    size_t size) {
  
  user_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.User.user_email)
}
inline std::string* User::_internal_mutable_user_email() {
  
  return user_email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_user_email() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.User.user_email)
  return user_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_user_email(std::string* user_email) {
  if (user_email != nullptr) {
    
  } else {
    
  }
  user_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.User.user_email)
}
inline std::string* User::unsafe_arena_release_user_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.User.user_email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_user_email(
    std::string* user_email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_email != nullptr) {
    
  } else {
    
  }
  user_email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.User.user_email)
}

// string user_name = 4[json_name = "userName"];
inline void User::clear_user_name() {
  user_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::user_name() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.user_name)
  return _internal_user_name();
}
inline void User::set_user_name(const std::string& value) {
  _internal_set_user_name(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.user_name)
}
inline std::string* User::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.User.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& User::_internal_user_name() const {
  return user_name_.Get();
}
inline void User::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_user_name(std::string&& value) {
  
  user_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.User.user_name)
}
inline void User::set_user_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.User.user_name)
}
inline void User::set_user_name(const char* value,
    size_t size) {
  
  user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.User.user_name)
}
inline std::string* User::_internal_mutable_user_name() {
  
  return user_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_user_name() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.User.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.User.user_name)
}
inline std::string* User::unsafe_arena_release_user_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.User.user_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_user_name(
    std::string* user_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.User.user_name)
}

// string user_full_name = 5[json_name = "userFullName"];
inline void User::clear_user_full_name() {
  user_full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::user_full_name() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.user_full_name)
  return _internal_user_full_name();
}
inline void User::set_user_full_name(const std::string& value) {
  _internal_set_user_full_name(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.user_full_name)
}
inline std::string* User::mutable_user_full_name() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.User.user_full_name)
  return _internal_mutable_user_full_name();
}
inline const std::string& User::_internal_user_full_name() const {
  return user_full_name_.Get();
}
inline void User::_internal_set_user_full_name(const std::string& value) {
  
  user_full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_user_full_name(std::string&& value) {
  
  user_full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.User.user_full_name)
}
inline void User::set_user_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.User.user_full_name)
}
inline void User::set_user_full_name(const char* value,
    size_t size) {
  
  user_full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.User.user_full_name)
}
inline std::string* User::_internal_mutable_user_full_name() {
  
  return user_full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_user_full_name() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.User.user_full_name)
  return user_full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_user_full_name(std::string* user_full_name) {
  if (user_full_name != nullptr) {
    
  } else {
    
  }
  user_full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.User.user_full_name)
}
inline std::string* User::unsafe_arena_release_user_full_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.User.user_full_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_full_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_user_full_name(
    std::string* user_full_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user_full_name != nullptr) {
    
  } else {
    
  }
  user_full_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user_full_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.User.user_full_name)
}

// uint64 user_group_id = 6[json_name = "userGroupId"];
inline void User::clear_user_group_id() {
  user_group_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::_internal_user_group_id() const {
  return user_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 User::user_group_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.user_group_id)
  return _internal_user_group_id();
}
inline void User::_internal_set_user_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  user_group_id_ = value;
}
inline void User::set_user_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_user_group_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.user_group_id)
}

// string last_login = 7[json_name = "lastLogin"];
inline void User::clear_last_login() {
  last_login_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::last_login() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.last_login)
  return _internal_last_login();
}
inline void User::set_last_login(const std::string& value) {
  _internal_set_last_login(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.last_login)
}
inline std::string* User::mutable_last_login() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.User.last_login)
  return _internal_mutable_last_login();
}
inline const std::string& User::_internal_last_login() const {
  return last_login_.Get();
}
inline void User::_internal_set_last_login(const std::string& value) {
  
  last_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_last_login(std::string&& value) {
  
  last_login_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.User.last_login)
}
inline void User::set_last_login(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.User.last_login)
}
inline void User::set_last_login(const char* value,
    size_t size) {
  
  last_login_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.User.last_login)
}
inline std::string* User::_internal_mutable_last_login() {
  
  return last_login_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_last_login() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.User.last_login)
  return last_login_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_last_login(std::string* last_login) {
  if (last_login != nullptr) {
    
  } else {
    
  }
  last_login_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_login,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.User.last_login)
}
inline std::string* User::unsafe_arena_release_last_login() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.User.last_login)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return last_login_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_last_login(
    std::string* last_login) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (last_login != nullptr) {
    
  } else {
    
  }
  last_login_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      last_login, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.User.last_login)
}

// bool permission_overrides = 8[json_name = "permissionOverrides"];
inline void User::clear_permission_overrides() {
  permission_overrides_ = false;
}
inline bool User::_internal_permission_overrides() const {
  return permission_overrides_;
}
inline bool User::permission_overrides() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.permission_overrides)
  return _internal_permission_overrides();
}
inline void User::_internal_set_permission_overrides(bool value) {
  
  permission_overrides_ = value;
}
inline void User::set_permission_overrides(bool value) {
  _internal_set_permission_overrides(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.permission_overrides)
}

// string role = 9[json_name = "role"];
inline void User::clear_role() {
  role_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& User::role() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.role)
  return _internal_role();
}
inline void User::set_role(const std::string& value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.role)
}
inline std::string* User::mutable_role() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.User.role)
  return _internal_mutable_role();
}
inline const std::string& User::_internal_role() const {
  return role_.Get();
}
inline void User::_internal_set_role(const std::string& value) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void User::set_role(std::string&& value) {
  
  role_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.User.role)
}
inline void User::set_role(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.User.role)
}
inline void User::set_role(const char* value,
    size_t size) {
  
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.User.role)
}
inline std::string* User::_internal_mutable_role() {
  
  return role_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* User::release_role() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.User.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void User::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.User.role)
}
inline std::string* User::unsafe_arena_release_role() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.User.role)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return role_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void User::unsafe_arena_set_allocated_role(
    std::string* role) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (role != nullptr) {
    
  } else {
    
  }
  role_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      role, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.User.role)
}

// uint32 user_level = 10[json_name = "userLevel"];
inline void User::clear_user_level() {
  user_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::_internal_user_level() const {
  return user_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 User::user_level() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.User.user_level)
  return _internal_user_level();
}
inline void User::_internal_set_user_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_level_ = value;
}
inline void User::set_user_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_level(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.User.user_level)
}

// -------------------------------------------------------------------

// TenantLink

// uint64 id = 1[json_name = "id"];
inline void TenantLink::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TenantLink::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TenantLink::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.TenantLink.id)
  return _internal_id();
}
inline void TenantLink::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void TenantLink::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.TenantLink.id)
}

// uint64 pivot_template_id = 2[json_name = "pivotTemplateId"];
inline void TenantLink::clear_pivot_template_id() {
  pivot_template_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TenantLink::_internal_pivot_template_id() const {
  return pivot_template_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TenantLink::pivot_template_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.TenantLink.pivot_template_id)
  return _internal_pivot_template_id();
}
inline void TenantLink::_internal_set_pivot_template_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pivot_template_id_ = value;
}
inline void TenantLink::set_pivot_template_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pivot_template_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.TenantLink.pivot_template_id)
}

// uint64 pivot_user_group_id = 3[json_name = "pivotUserGroupId"];
inline void TenantLink::clear_pivot_user_group_id() {
  pivot_user_group_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TenantLink::_internal_pivot_user_group_id() const {
  return pivot_user_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TenantLink::pivot_user_group_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.TenantLink.pivot_user_group_id)
  return _internal_pivot_user_group_id();
}
inline void TenantLink::_internal_set_pivot_user_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pivot_user_group_id_ = value;
}
inline void TenantLink::set_pivot_user_group_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_pivot_user_group_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.TenantLink.pivot_user_group_id)
}

// -------------------------------------------------------------------

// Package

// uint64 id = 1[json_name = "id"];
inline void Package::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Package::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Package::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.id)
  return _internal_id();
}
inline void Package::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Package::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Package.id)
}

// uint64 company_id = 2[json_name = "companyId"];
inline void Package::clear_company_id() {
  company_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Package::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Package::company_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.company_id)
  return _internal_company_id();
}
inline void Package::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  company_id_ = value;
}
inline void Package::set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Package.company_id)
}

// string name = 3[json_name = "name"];
inline void Package::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Package::name() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.name)
  return _internal_name();
}
inline void Package::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Package.name)
}
inline std::string* Package::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Package.name)
  return _internal_mutable_name();
}
inline const std::string& Package::_internal_name() const {
  return name_.Get();
}
inline void Package::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Package::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Package.name)
}
inline void Package::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Package.name)
}
inline void Package::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Package.name)
}
inline std::string* Package::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Package::release_name() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Package.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Package::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Package.name)
}
inline std::string* Package::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Package.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Package::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Package.name)
}

// string description = 4[json_name = "description"];
inline void Package::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Package::description() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.description)
  return _internal_description();
}
inline void Package::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Package.description)
}
inline std::string* Package::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Package.description)
  return _internal_mutable_description();
}
inline const std::string& Package::_internal_description() const {
  return description_.Get();
}
inline void Package::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Package::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Package.description)
}
inline void Package::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Package.description)
}
inline void Package::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Package.description)
}
inline std::string* Package::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Package::release_description() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Package.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Package::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Package.description)
}
inline std::string* Package::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Package.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Package::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Package.description)
}

// string icon = 5[json_name = "icon"];
inline void Package::clear_icon() {
  icon_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Package::icon() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.icon)
  return _internal_icon();
}
inline void Package::set_icon(const std::string& value) {
  _internal_set_icon(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Package.icon)
}
inline std::string* Package::mutable_icon() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Package.icon)
  return _internal_mutable_icon();
}
inline const std::string& Package::_internal_icon() const {
  return icon_.Get();
}
inline void Package::_internal_set_icon(const std::string& value) {
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Package::set_icon(std::string&& value) {
  
  icon_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Package.icon)
}
inline void Package::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Package.icon)
}
inline void Package::set_icon(const char* value,
    size_t size) {
  
  icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Package.icon)
}
inline std::string* Package::_internal_mutable_icon() {
  
  return icon_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Package::release_icon() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Package.icon)
  return icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Package::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Package.icon)
}
inline std::string* Package::unsafe_arena_release_icon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Package.icon)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return icon_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Package::unsafe_arena_set_allocated_icon(
    std::string* icon) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      icon, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Package.icon)
}

// string color = 6[json_name = "color"];
inline void Package::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Package::color() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.color)
  return _internal_color();
}
inline void Package::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Package.color)
}
inline std::string* Package::mutable_color() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Package.color)
  return _internal_mutable_color();
}
inline const std::string& Package::_internal_color() const {
  return color_.Get();
}
inline void Package::_internal_set_color(const std::string& value) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Package::set_color(std::string&& value) {
  
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Package.color)
}
inline void Package::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Package.color)
}
inline void Package::set_color(const char* value,
    size_t size) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Package.color)
}
inline std::string* Package::_internal_mutable_color() {
  
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Package::release_color() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Package.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Package::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Package.color)
}
inline std::string* Package::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Package.color)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return color_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Package::unsafe_arena_set_allocated_color(
    std::string* color) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (color != nullptr) {
    
  } else {
    
  }
  color_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      color, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Package.color)
}

// repeated .kentik.mkp.v202102alpha1.Alert alerts = 7[json_name = "alerts"];
inline int Package::_internal_alerts_size() const {
  return alerts_.size();
}
inline int Package::alerts_size() const {
  return _internal_alerts_size();
}
inline void Package::clear_alerts() {
  alerts_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Alert* Package::mutable_alerts(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Package.alerts)
  return alerts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert >*
Package::mutable_alerts() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Package.alerts)
  return &alerts_;
}
inline const ::kentik::mkp::v202102alpha1::Alert& Package::_internal_alerts(int index) const {
  return alerts_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Alert& Package::alerts(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.alerts)
  return _internal_alerts(index);
}
inline ::kentik::mkp::v202102alpha1::Alert* Package::_internal_add_alerts() {
  return alerts_.Add();
}
inline ::kentik::mkp::v202102alpha1::Alert* Package::add_alerts() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Package.alerts)
  return _internal_add_alerts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert >&
Package::alerts() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Package.alerts)
  return alerts_;
}

// .kentik.mkp.v202102alpha1.Asset assets = 8[json_name = "assets"];
inline bool Package::_internal_has_assets() const {
  return this != internal_default_instance() && assets_ != nullptr;
}
inline bool Package::has_assets() const {
  return _internal_has_assets();
}
inline void Package::clear_assets() {
  if (GetArena() == nullptr && assets_ != nullptr) {
    delete assets_;
  }
  assets_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Asset& Package::_internal_assets() const {
  const ::kentik::mkp::v202102alpha1::Asset* p = assets_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Asset*>(
      &::kentik::mkp::v202102alpha1::_Asset_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Asset& Package::assets() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.assets)
  return _internal_assets();
}
inline void Package::unsafe_arena_set_allocated_assets(
    ::kentik::mkp::v202102alpha1::Asset* assets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(assets_);
  }
  assets_ = assets;
  if (assets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Package.assets)
}
inline ::kentik::mkp::v202102alpha1::Asset* Package::release_assets() {
  auto temp = unsafe_arena_release_assets();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Asset* Package::unsafe_arena_release_assets() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Package.assets)
  
  ::kentik::mkp::v202102alpha1::Asset* temp = assets_;
  assets_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Asset* Package::_internal_mutable_assets() {
  
  if (assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Asset>(GetArena());
    assets_ = p;
  }
  return assets_;
}
inline ::kentik::mkp::v202102alpha1::Asset* Package::mutable_assets() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Package.assets)
  return _internal_mutable_assets();
}
inline void Package::set_allocated_assets(::kentik::mkp::v202102alpha1::Asset* assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete assets_;
  }
  if (assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(assets);
    if (message_arena != submessage_arena) {
      assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assets, submessage_arena);
    }
    
  } else {
    
  }
  assets_ = assets;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Package.assets)
}

// bool is_default = 9[json_name = "isDefault"];
inline void Package::clear_is_default() {
  is_default_ = false;
}
inline bool Package::_internal_is_default() const {
  return is_default_;
}
inline bool Package::is_default() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.is_default)
  return _internal_is_default();
}
inline void Package::_internal_set_is_default(bool value) {
  
  is_default_ = value;
}
inline void Package::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Package.is_default)
}

// repeated .kentik.mkp.v202102alpha1.TenantLink tenants = 10[json_name = "tenants"];
inline int Package::_internal_tenants_size() const {
  return tenants_.size();
}
inline int Package::tenants_size() const {
  return _internal_tenants_size();
}
inline void Package::clear_tenants() {
  tenants_.Clear();
}
inline ::kentik::mkp::v202102alpha1::TenantLink* Package::mutable_tenants(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Package.tenants)
  return tenants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::TenantLink >*
Package::mutable_tenants() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Package.tenants)
  return &tenants_;
}
inline const ::kentik::mkp::v202102alpha1::TenantLink& Package::_internal_tenants(int index) const {
  return tenants_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::TenantLink& Package::tenants(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Package.tenants)
  return _internal_tenants(index);
}
inline ::kentik::mkp::v202102alpha1::TenantLink* Package::_internal_add_tenants() {
  return tenants_.Add();
}
inline ::kentik::mkp::v202102alpha1::TenantLink* Package::add_tenants() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Package.tenants)
  return _internal_add_tenants();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::TenantLink >&
Package::tenants() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Package.tenants)
  return tenants_;
}

// -------------------------------------------------------------------

// CustomDimension

// string dimension = 1[json_name = "dimension"];
inline void CustomDimension::clear_dimension() {
  dimension_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomDimension::dimension() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.CustomDimension.dimension)
  return _internal_dimension();
}
inline void CustomDimension::set_dimension(const std::string& value) {
  _internal_set_dimension(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.CustomDimension.dimension)
}
inline std::string* CustomDimension::mutable_dimension() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.CustomDimension.dimension)
  return _internal_mutable_dimension();
}
inline const std::string& CustomDimension::_internal_dimension() const {
  return dimension_.Get();
}
inline void CustomDimension::_internal_set_dimension(const std::string& value) {
  
  dimension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomDimension::set_dimension(std::string&& value) {
  
  dimension_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.CustomDimension.dimension)
}
inline void CustomDimension::set_dimension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dimension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.CustomDimension.dimension)
}
inline void CustomDimension::set_dimension(const char* value,
    size_t size) {
  
  dimension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.CustomDimension.dimension)
}
inline std::string* CustomDimension::_internal_mutable_dimension() {
  
  return dimension_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomDimension::release_dimension() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.CustomDimension.dimension)
  return dimension_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomDimension::set_allocated_dimension(std::string* dimension) {
  if (dimension != nullptr) {
    
  } else {
    
  }
  dimension_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dimension,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.CustomDimension.dimension)
}
inline std::string* CustomDimension::unsafe_arena_release_dimension() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.CustomDimension.dimension)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dimension_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomDimension::unsafe_arena_set_allocated_dimension(
    std::string* dimension) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dimension != nullptr) {
    
  } else {
    
  }
  dimension_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dimension, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.CustomDimension.dimension)
}

// string populator = 2[json_name = "populator"];
inline void CustomDimension::clear_populator() {
  populator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomDimension::populator() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.CustomDimension.populator)
  return _internal_populator();
}
inline void CustomDimension::set_populator(const std::string& value) {
  _internal_set_populator(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.CustomDimension.populator)
}
inline std::string* CustomDimension::mutable_populator() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.CustomDimension.populator)
  return _internal_mutable_populator();
}
inline const std::string& CustomDimension::_internal_populator() const {
  return populator_.Get();
}
inline void CustomDimension::_internal_set_populator(const std::string& value) {
  
  populator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomDimension::set_populator(std::string&& value) {
  
  populator_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.CustomDimension.populator)
}
inline void CustomDimension::set_populator(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  populator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.CustomDimension.populator)
}
inline void CustomDimension::set_populator(const char* value,
    size_t size) {
  
  populator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.CustomDimension.populator)
}
inline std::string* CustomDimension::_internal_mutable_populator() {
  
  return populator_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomDimension::release_populator() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.CustomDimension.populator)
  return populator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomDimension::set_allocated_populator(std::string* populator) {
  if (populator != nullptr) {
    
  } else {
    
  }
  populator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), populator,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.CustomDimension.populator)
}
inline std::string* CustomDimension::unsafe_arena_release_populator() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.CustomDimension.populator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return populator_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomDimension::unsafe_arena_set_allocated_populator(
    std::string* populator) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (populator != nullptr) {
    
  } else {
    
  }
  populator_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      populator, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.CustomDimension.populator)
}

// -------------------------------------------------------------------

// Device

// bool all_devices = 1[json_name = "allDevices"];
inline void Device::clear_all_devices() {
  all_devices_ = false;
}
inline bool Device::_internal_all_devices() const {
  return all_devices_;
}
inline bool Device::all_devices() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Device.all_devices)
  return _internal_all_devices();
}
inline void Device::_internal_set_all_devices(bool value) {
  
  all_devices_ = value;
}
inline void Device::set_all_devices(bool value) {
  _internal_set_all_devices(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Device.all_devices)
}

// repeated string device_types = 2[json_name = "deviceTypes"];
inline int Device::_internal_device_types_size() const {
  return device_types_.size();
}
inline int Device::device_types_size() const {
  return _internal_device_types_size();
}
inline void Device::clear_device_types() {
  device_types_.Clear();
}
inline std::string* Device::add_device_types() {
  // @@protoc_insertion_point(field_add_mutable:kentik.mkp.v202102alpha1.Device.device_types)
  return _internal_add_device_types();
}
inline const std::string& Device::_internal_device_types(int index) const {
  return device_types_.Get(index);
}
inline const std::string& Device::device_types(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Device.device_types)
  return _internal_device_types(index);
}
inline std::string* Device::mutable_device_types(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Device.device_types)
  return device_types_.Mutable(index);
}
inline void Device::set_device_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Device.device_types)
  device_types_.Mutable(index)->assign(value);
}
inline void Device::set_device_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Device.device_types)
  device_types_.Mutable(index)->assign(std::move(value));
}
inline void Device::set_device_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Device.device_types)
}
inline void Device::set_device_types(int index, const char* value, size_t size) {
  device_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Device.device_types)
}
inline std::string* Device::_internal_add_device_types() {
  return device_types_.Add();
}
inline void Device::add_device_types(const std::string& value) {
  device_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Device.device_types)
}
inline void Device::add_device_types(std::string&& value) {
  device_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Device.device_types)
}
inline void Device::add_device_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.mkp.v202102alpha1.Device.device_types)
}
inline void Device::add_device_types(const char* value, size_t size) {
  device_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.mkp.v202102alpha1.Device.device_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Device::device_types() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Device.device_types)
  return device_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Device::mutable_device_types() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Device.device_types)
  return &device_types_;
}

// repeated uint32 device_labels = 3[json_name = "deviceLabels"];
inline int Device::_internal_device_labels_size() const {
  return device_labels_.size();
}
inline int Device::device_labels_size() const {
  return _internal_device_labels_size();
}
inline void Device::clear_device_labels() {
  device_labels_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_device_labels(int index) const {
  return device_labels_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::device_labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Device.device_labels)
  return _internal_device_labels(index);
}
inline void Device::set_device_labels(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  device_labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Device.device_labels)
}
inline void Device::_internal_add_device_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  device_labels_.Add(value);
}
inline void Device::add_device_labels(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_device_labels(value);
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Device.device_labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Device::_internal_device_labels() const {
  return device_labels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Device::device_labels() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Device.device_labels)
  return _internal_device_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Device::_internal_mutable_device_labels() {
  return &device_labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Device::mutable_device_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Device.device_labels)
  return _internal_mutable_device_labels();
}

// repeated uint32 device_sites = 4[json_name = "deviceSites"];
inline int Device::_internal_device_sites_size() const {
  return device_sites_.size();
}
inline int Device::device_sites_size() const {
  return _internal_device_sites_size();
}
inline void Device::clear_device_sites() {
  device_sites_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::_internal_device_sites(int index) const {
  return device_sites_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Device::device_sites(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Device.device_sites)
  return _internal_device_sites(index);
}
inline void Device::set_device_sites(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  device_sites_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Device.device_sites)
}
inline void Device::_internal_add_device_sites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  device_sites_.Add(value);
}
inline void Device::add_device_sites(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_device_sites(value);
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Device.device_sites)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Device::_internal_device_sites() const {
  return device_sites_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Device::device_sites() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Device.device_sites)
  return _internal_device_sites();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Device::_internal_mutable_device_sites() {
  return &device_sites_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Device::mutable_device_sites() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Device.device_sites)
  return _internal_mutable_device_sites();
}

// repeated string device_name = 5[json_name = "deviceName"];
inline int Device::_internal_device_name_size() const {
  return device_name_.size();
}
inline int Device::device_name_size() const {
  return _internal_device_name_size();
}
inline void Device::clear_device_name() {
  device_name_.Clear();
}
inline std::string* Device::add_device_name() {
  // @@protoc_insertion_point(field_add_mutable:kentik.mkp.v202102alpha1.Device.device_name)
  return _internal_add_device_name();
}
inline const std::string& Device::_internal_device_name(int index) const {
  return device_name_.Get(index);
}
inline const std::string& Device::device_name(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Device.device_name)
  return _internal_device_name(index);
}
inline std::string* Device::mutable_device_name(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Device.device_name)
  return device_name_.Mutable(index);
}
inline void Device::set_device_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Device.device_name)
  device_name_.Mutable(index)->assign(value);
}
inline void Device::set_device_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Device.device_name)
  device_name_.Mutable(index)->assign(std::move(value));
}
inline void Device::set_device_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Device.device_name)
}
inline void Device::set_device_name(int index, const char* value, size_t size) {
  device_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Device.device_name)
}
inline std::string* Device::_internal_add_device_name() {
  return device_name_.Add();
}
inline void Device::add_device_name(const std::string& value) {
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Device.device_name)
}
inline void Device::add_device_name(std::string&& value) {
  device_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Device.device_name)
}
inline void Device::add_device_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  device_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.mkp.v202102alpha1.Device.device_name)
}
inline void Device::add_device_name(const char* value, size_t size) {
  device_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.mkp.v202102alpha1.Device.device_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Device::device_name() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Device.device_name)
  return device_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Device::mutable_device_name() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Device.device_name)
  return &device_name_;
}

// -------------------------------------------------------------------

// FilterField

// string filter_field = 1[json_name = "filterField"];
inline void FilterField::clear_filter_field() {
  filter_field_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FilterField::filter_field() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.FilterField.filter_field)
  return _internal_filter_field();
}
inline void FilterField::set_filter_field(const std::string& value) {
  _internal_set_filter_field(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.FilterField.filter_field)
}
inline std::string* FilterField::mutable_filter_field() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.FilterField.filter_field)
  return _internal_mutable_filter_field();
}
inline const std::string& FilterField::_internal_filter_field() const {
  return filter_field_.Get();
}
inline void FilterField::_internal_set_filter_field(const std::string& value) {
  
  filter_field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FilterField::set_filter_field(std::string&& value) {
  
  filter_field_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.FilterField.filter_field)
}
inline void FilterField::set_filter_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.FilterField.filter_field)
}
inline void FilterField::set_filter_field(const char* value,
    size_t size) {
  
  filter_field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.FilterField.filter_field)
}
inline std::string* FilterField::_internal_mutable_filter_field() {
  
  return filter_field_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FilterField::release_filter_field() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.FilterField.filter_field)
  return filter_field_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterField::set_allocated_filter_field(std::string* filter_field) {
  if (filter_field != nullptr) {
    
  } else {
    
  }
  filter_field_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_field,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.FilterField.filter_field)
}
inline std::string* FilterField::unsafe_arena_release_filter_field() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.FilterField.filter_field)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filter_field_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FilterField::unsafe_arena_set_allocated_filter_field(
    std::string* filter_field) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filter_field != nullptr) {
    
  } else {
    
  }
  filter_field_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filter_field, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.FilterField.filter_field)
}

// string operator = 2[json_name = "operator"];
inline void FilterField::clear_operator_() {
  operator__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FilterField::operator_() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.FilterField.operator)
  return _internal_operator_();
}
inline void FilterField::set_operator_(const std::string& value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.FilterField.operator)
}
inline std::string* FilterField::mutable_operator_() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.FilterField.operator)
  return _internal_mutable_operator_();
}
inline const std::string& FilterField::_internal_operator_() const {
  return operator__.Get();
}
inline void FilterField::_internal_set_operator_(const std::string& value) {
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FilterField::set_operator_(std::string&& value) {
  
  operator__.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.FilterField.operator)
}
inline void FilterField::set_operator_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.FilterField.operator)
}
inline void FilterField::set_operator_(const char* value,
    size_t size) {
  
  operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.FilterField.operator)
}
inline std::string* FilterField::_internal_mutable_operator_() {
  
  return operator__.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FilterField::release_operator_() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.FilterField.operator)
  return operator__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterField::set_allocated_operator_(std::string* operator_) {
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operator_,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.FilterField.operator)
}
inline std::string* FilterField::unsafe_arena_release_operator_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.FilterField.operator)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return operator__.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FilterField::unsafe_arena_set_allocated_operator_(
    std::string* operator_) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (operator_ != nullptr) {
    
  } else {
    
  }
  operator__.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operator_, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.FilterField.operator)
}

// string filter_value = 3[json_name = "filterValue"];
inline void FilterField::clear_filter_value() {
  filter_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FilterField::filter_value() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.FilterField.filter_value)
  return _internal_filter_value();
}
inline void FilterField::set_filter_value(const std::string& value) {
  _internal_set_filter_value(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.FilterField.filter_value)
}
inline std::string* FilterField::mutable_filter_value() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.FilterField.filter_value)
  return _internal_mutable_filter_value();
}
inline const std::string& FilterField::_internal_filter_value() const {
  return filter_value_.Get();
}
inline void FilterField::_internal_set_filter_value(const std::string& value) {
  
  filter_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FilterField::set_filter_value(std::string&& value) {
  
  filter_value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.FilterField.filter_value)
}
inline void FilterField::set_filter_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.FilterField.filter_value)
}
inline void FilterField::set_filter_value(const char* value,
    size_t size) {
  
  filter_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.FilterField.filter_value)
}
inline std::string* FilterField::_internal_mutable_filter_value() {
  
  return filter_value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FilterField::release_filter_value() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.FilterField.filter_value)
  return filter_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FilterField::set_allocated_filter_value(std::string* filter_value) {
  if (filter_value != nullptr) {
    
  } else {
    
  }
  filter_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter_value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.FilterField.filter_value)
}
inline std::string* FilterField::unsafe_arena_release_filter_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.FilterField.filter_value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return filter_value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FilterField::unsafe_arena_set_allocated_filter_value(
    std::string* filter_value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (filter_value != nullptr) {
    
  } else {
    
  }
  filter_value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filter_value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.FilterField.filter_value)
}

// -------------------------------------------------------------------

// Filter

// string name = 1[json_name = "name"];
inline void Filter::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Filter::name() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.name)
  return _internal_name();
}
inline void Filter::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.name)
}
inline std::string* Filter::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Filter.name)
  return _internal_mutable_name();
}
inline const std::string& Filter::_internal_name() const {
  return name_.Get();
}
inline void Filter::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Filter::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Filter.name)
}
inline void Filter::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Filter.name)
}
inline void Filter::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Filter.name)
}
inline std::string* Filter::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Filter::release_name() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Filter.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Filter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Filter.name)
}
inline std::string* Filter::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Filter.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Filter::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Filter.name)
}

// bool named = 2[json_name = "named"];
inline void Filter::clear_named() {
  named_ = false;
}
inline bool Filter::_internal_named() const {
  return named_;
}
inline bool Filter::named() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.named)
  return _internal_named();
}
inline void Filter::_internal_set_named(bool value) {
  
  named_ = value;
}
inline void Filter::set_named(bool value) {
  _internal_set_named(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.named)
}

// string connector = 3[json_name = "connector"];
inline void Filter::clear_connector() {
  connector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Filter::connector() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.connector)
  return _internal_connector();
}
inline void Filter::set_connector(const std::string& value) {
  _internal_set_connector(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.connector)
}
inline std::string* Filter::mutable_connector() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Filter.connector)
  return _internal_mutable_connector();
}
inline const std::string& Filter::_internal_connector() const {
  return connector_.Get();
}
inline void Filter::_internal_set_connector(const std::string& value) {
  
  connector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Filter::set_connector(std::string&& value) {
  
  connector_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Filter.connector)
}
inline void Filter::set_connector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Filter.connector)
}
inline void Filter::set_connector(const char* value,
    size_t size) {
  
  connector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Filter.connector)
}
inline std::string* Filter::_internal_mutable_connector() {
  
  return connector_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Filter::release_connector() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Filter.connector)
  return connector_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Filter::set_allocated_connector(std::string* connector) {
  if (connector != nullptr) {
    
  } else {
    
  }
  connector_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connector,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Filter.connector)
}
inline std::string* Filter::unsafe_arena_release_connector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Filter.connector)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return connector_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Filter::unsafe_arena_set_allocated_connector(
    std::string* connector) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (connector != nullptr) {
    
  } else {
    
  }
  connector_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      connector, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Filter.connector)
}

// bool not = 4[json_name = "not"];
inline void Filter::clear_not_() {
  not__ = false;
}
inline bool Filter::_internal_not_() const {
  return not__;
}
inline bool Filter::not_() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.not)
  return _internal_not_();
}
inline void Filter::_internal_set_not_(bool value) {
  
  not__ = value;
}
inline void Filter::set_not_(bool value) {
  _internal_set_not_(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.not)
}

// string auto_added = 5[json_name = "autoAdded"];
inline void Filter::clear_auto_added() {
  auto_added_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Filter::auto_added() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.auto_added)
  return _internal_auto_added();
}
inline void Filter::set_auto_added(const std::string& value) {
  _internal_set_auto_added(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.auto_added)
}
inline std::string* Filter::mutable_auto_added() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Filter.auto_added)
  return _internal_mutable_auto_added();
}
inline const std::string& Filter::_internal_auto_added() const {
  return auto_added_.Get();
}
inline void Filter::_internal_set_auto_added(const std::string& value) {
  
  auto_added_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Filter::set_auto_added(std::string&& value) {
  
  auto_added_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Filter.auto_added)
}
inline void Filter::set_auto_added(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_added_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Filter.auto_added)
}
inline void Filter::set_auto_added(const char* value,
    size_t size) {
  
  auto_added_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Filter.auto_added)
}
inline std::string* Filter::_internal_mutable_auto_added() {
  
  return auto_added_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Filter::release_auto_added() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Filter.auto_added)
  return auto_added_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Filter::set_allocated_auto_added(std::string* auto_added) {
  if (auto_added != nullptr) {
    
  } else {
    
  }
  auto_added_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), auto_added,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Filter.auto_added)
}
inline std::string* Filter::unsafe_arena_release_auto_added() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Filter.auto_added)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return auto_added_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Filter::unsafe_arena_set_allocated_auto_added(
    std::string* auto_added) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (auto_added != nullptr) {
    
  } else {
    
  }
  auto_added_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      auto_added, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Filter.auto_added)
}

// repeated string saved_filters = 6[json_name = "savedFilters"];
inline int Filter::_internal_saved_filters_size() const {
  return saved_filters_.size();
}
inline int Filter::saved_filters_size() const {
  return _internal_saved_filters_size();
}
inline void Filter::clear_saved_filters() {
  saved_filters_.Clear();
}
inline std::string* Filter::add_saved_filters() {
  // @@protoc_insertion_point(field_add_mutable:kentik.mkp.v202102alpha1.Filter.saved_filters)
  return _internal_add_saved_filters();
}
inline const std::string& Filter::_internal_saved_filters(int index) const {
  return saved_filters_.Get(index);
}
inline const std::string& Filter::saved_filters(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.saved_filters)
  return _internal_saved_filters(index);
}
inline std::string* Filter::mutable_saved_filters(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Filter.saved_filters)
  return saved_filters_.Mutable(index);
}
inline void Filter::set_saved_filters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.saved_filters)
  saved_filters_.Mutable(index)->assign(value);
}
inline void Filter::set_saved_filters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.saved_filters)
  saved_filters_.Mutable(index)->assign(std::move(value));
}
inline void Filter::set_saved_filters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  saved_filters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Filter.saved_filters)
}
inline void Filter::set_saved_filters(int index, const char* value, size_t size) {
  saved_filters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Filter.saved_filters)
}
inline std::string* Filter::_internal_add_saved_filters() {
  return saved_filters_.Add();
}
inline void Filter::add_saved_filters(const std::string& value) {
  saved_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Filter.saved_filters)
}
inline void Filter::add_saved_filters(std::string&& value) {
  saved_filters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Filter.saved_filters)
}
inline void Filter::add_saved_filters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  saved_filters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.mkp.v202102alpha1.Filter.saved_filters)
}
inline void Filter::add_saved_filters(const char* value, size_t size) {
  saved_filters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.mkp.v202102alpha1.Filter.saved_filters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::saved_filters() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Filter.saved_filters)
  return saved_filters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_saved_filters() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Filter.saved_filters)
  return &saved_filters_;
}

// repeated .kentik.mkp.v202102alpha1.FilterField filters = 7[json_name = "filters"];
inline int Filter::_internal_filters_size() const {
  return filters_.size();
}
inline int Filter::filters_size() const {
  return _internal_filters_size();
}
inline void Filter::clear_filters() {
  filters_.Clear();
}
inline ::kentik::mkp::v202102alpha1::FilterField* Filter::mutable_filters(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Filter.filters)
  return filters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::FilterField >*
Filter::mutable_filters() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Filter.filters)
  return &filters_;
}
inline const ::kentik::mkp::v202102alpha1::FilterField& Filter::_internal_filters(int index) const {
  return filters_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::FilterField& Filter::filters(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.filters)
  return _internal_filters(index);
}
inline ::kentik::mkp::v202102alpha1::FilterField* Filter::_internal_add_filters() {
  return filters_.Add();
}
inline ::kentik::mkp::v202102alpha1::FilterField* Filter::add_filters() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Filter.filters)
  return _internal_add_filters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::FilterField >&
Filter::filters() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Filter.filters)
  return filters_;
}

// repeated .kentik.mkp.v202102alpha1.Filter filter_groups = 8[json_name = "filterGroups"];
inline int Filter::_internal_filter_groups_size() const {
  return filter_groups_.size();
}
inline int Filter::filter_groups_size() const {
  return _internal_filter_groups_size();
}
inline void Filter::clear_filter_groups() {
  filter_groups_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Filter* Filter::mutable_filter_groups(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Filter.filter_groups)
  return filter_groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Filter >*
Filter::mutable_filter_groups() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Filter.filter_groups)
  return &filter_groups_;
}
inline const ::kentik::mkp::v202102alpha1::Filter& Filter::_internal_filter_groups(int index) const {
  return filter_groups_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Filter& Filter::filter_groups(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.filter_groups)
  return _internal_filter_groups(index);
}
inline ::kentik::mkp::v202102alpha1::Filter* Filter::_internal_add_filter_groups() {
  return filter_groups_.Add();
}
inline ::kentik::mkp::v202102alpha1::Filter* Filter::add_filter_groups() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Filter.filter_groups)
  return _internal_add_filter_groups();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Filter >&
Filter::filter_groups() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Filter.filter_groups)
  return filter_groups_;
}

// repeated string metric = 9[json_name = "metric"];
inline int Filter::_internal_metric_size() const {
  return metric_.size();
}
inline int Filter::metric_size() const {
  return _internal_metric_size();
}
inline void Filter::clear_metric() {
  metric_.Clear();
}
inline std::string* Filter::add_metric() {
  // @@protoc_insertion_point(field_add_mutable:kentik.mkp.v202102alpha1.Filter.metric)
  return _internal_add_metric();
}
inline const std::string& Filter::_internal_metric(int index) const {
  return metric_.Get(index);
}
inline const std::string& Filter::metric(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Filter.metric)
  return _internal_metric(index);
}
inline std::string* Filter::mutable_metric(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Filter.metric)
  return metric_.Mutable(index);
}
inline void Filter::set_metric(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.metric)
  metric_.Mutable(index)->assign(value);
}
inline void Filter::set_metric(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Filter.metric)
  metric_.Mutable(index)->assign(std::move(value));
}
inline void Filter::set_metric(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metric_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Filter.metric)
}
inline void Filter::set_metric(int index, const char* value, size_t size) {
  metric_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Filter.metric)
}
inline std::string* Filter::_internal_add_metric() {
  return metric_.Add();
}
inline void Filter::add_metric(const std::string& value) {
  metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Filter.metric)
}
inline void Filter::add_metric(std::string&& value) {
  metric_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Filter.metric)
}
inline void Filter::add_metric(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  metric_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.mkp.v202102alpha1.Filter.metric)
}
inline void Filter::add_metric(const char* value, size_t size) {
  metric_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.mkp.v202102alpha1.Filter.metric)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::metric() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Filter.metric)
  return metric_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_metric() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Filter.metric)
  return &metric_;
}

// -------------------------------------------------------------------

// Tenant

// uint64 id = 1[json_name = "id"];
inline void Tenant::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tenant::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tenant::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.id)
  return _internal_id();
}
inline void Tenant::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Tenant::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.id)
}

// uint64 company_id = 2[json_name = "companyId"];
inline void Tenant::clear_company_id() {
  company_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tenant::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Tenant::company_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.company_id)
  return _internal_company_id();
}
inline void Tenant::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  company_id_ = value;
}
inline void Tenant::set_company_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.company_id)
}

// string name = 3[json_name = "name"];
inline void Tenant::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tenant::name() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.name)
  return _internal_name();
}
inline void Tenant::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.name)
}
inline std::string* Tenant::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.name)
  return _internal_mutable_name();
}
inline const std::string& Tenant::_internal_name() const {
  return name_.Get();
}
inline void Tenant::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tenant::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Tenant.name)
}
inline void Tenant::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Tenant.name)
}
inline void Tenant::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Tenant.name)
}
inline std::string* Tenant::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tenant::release_name() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tenant::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.name)
}
inline std::string* Tenant::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Tenant.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tenant::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.name)
}

// string description = 4[json_name = "description"];
inline void Tenant::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tenant::description() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.description)
  return _internal_description();
}
inline void Tenant::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.description)
}
inline std::string* Tenant::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.description)
  return _internal_mutable_description();
}
inline const std::string& Tenant::_internal_description() const {
  return description_.Get();
}
inline void Tenant::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tenant::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Tenant.description)
}
inline void Tenant::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Tenant.description)
}
inline void Tenant::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Tenant.description)
}
inline std::string* Tenant::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tenant::release_description() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tenant::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.description)
}
inline std::string* Tenant::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Tenant.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tenant::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.description)
}

// string type = 5[json_name = "type"];
inline void Tenant::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tenant::type() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.type)
  return _internal_type();
}
inline void Tenant::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.type)
}
inline std::string* Tenant::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.type)
  return _internal_mutable_type();
}
inline const std::string& Tenant::_internal_type() const {
  return type_.Get();
}
inline void Tenant::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tenant::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Tenant.type)
}
inline void Tenant::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Tenant.type)
}
inline void Tenant::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Tenant.type)
}
inline std::string* Tenant::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tenant::release_type() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tenant::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.type)
}
inline std::string* Tenant::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Tenant.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tenant::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.type)
}

// bool enabled = 6[json_name = "enabled"];
inline void Tenant::clear_enabled() {
  enabled_ = false;
}
inline bool Tenant::_internal_enabled() const {
  return enabled_;
}
inline bool Tenant::enabled() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.enabled)
  return _internal_enabled();
}
inline void Tenant::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void Tenant::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.enabled)
}

// repeated .kentik.mkp.v202102alpha1.Alert alerts = 7[json_name = "alerts"];
inline int Tenant::_internal_alerts_size() const {
  return alerts_.size();
}
inline int Tenant::alerts_size() const {
  return _internal_alerts_size();
}
inline void Tenant::clear_alerts() {
  alerts_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Alert* Tenant::mutable_alerts(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.alerts)
  return alerts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert >*
Tenant::mutable_alerts() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Tenant.alerts)
  return &alerts_;
}
inline const ::kentik::mkp::v202102alpha1::Alert& Tenant::_internal_alerts(int index) const {
  return alerts_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Alert& Tenant::alerts(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.alerts)
  return _internal_alerts(index);
}
inline ::kentik::mkp::v202102alpha1::Alert* Tenant::_internal_add_alerts() {
  return alerts_.Add();
}
inline ::kentik::mkp::v202102alpha1::Alert* Tenant::add_alerts() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Tenant.alerts)
  return _internal_add_alerts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Alert >&
Tenant::alerts() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Tenant.alerts)
  return alerts_;
}

// .kentik.mkp.v202102alpha1.Asset assets = 15[json_name = "assets"];
inline bool Tenant::_internal_has_assets() const {
  return this != internal_default_instance() && assets_ != nullptr;
}
inline bool Tenant::has_assets() const {
  return _internal_has_assets();
}
inline void Tenant::clear_assets() {
  if (GetArena() == nullptr && assets_ != nullptr) {
    delete assets_;
  }
  assets_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Asset& Tenant::_internal_assets() const {
  const ::kentik::mkp::v202102alpha1::Asset* p = assets_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Asset*>(
      &::kentik::mkp::v202102alpha1::_Asset_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Asset& Tenant::assets() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.assets)
  return _internal_assets();
}
inline void Tenant::unsafe_arena_set_allocated_assets(
    ::kentik::mkp::v202102alpha1::Asset* assets) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(assets_);
  }
  assets_ = assets;
  if (assets) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.assets)
}
inline ::kentik::mkp::v202102alpha1::Asset* Tenant::release_assets() {
  auto temp = unsafe_arena_release_assets();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Asset* Tenant::unsafe_arena_release_assets() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.assets)
  
  ::kentik::mkp::v202102alpha1::Asset* temp = assets_;
  assets_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Asset* Tenant::_internal_mutable_assets() {
  
  if (assets_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Asset>(GetArena());
    assets_ = p;
  }
  return assets_;
}
inline ::kentik::mkp::v202102alpha1::Asset* Tenant::mutable_assets() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.assets)
  return _internal_mutable_assets();
}
inline void Tenant::set_allocated_assets(::kentik::mkp::v202102alpha1::Asset* assets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete assets_;
  }
  if (assets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(assets);
    if (message_arena != submessage_arena) {
      assets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assets, submessage_arena);
    }
    
  } else {
    
  }
  assets_ = assets;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.assets)
}

// string asn = 8[json_name = "asn"];
inline void Tenant::clear_asn() {
  asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tenant::asn() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.asn)
  return _internal_asn();
}
inline void Tenant::set_asn(const std::string& value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.asn)
}
inline std::string* Tenant::mutable_asn() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.asn)
  return _internal_mutable_asn();
}
inline const std::string& Tenant::_internal_asn() const {
  return asn_.Get();
}
inline void Tenant::_internal_set_asn(const std::string& value) {
  
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tenant::set_asn(std::string&& value) {
  
  asn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Tenant.asn)
}
inline void Tenant::set_asn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Tenant.asn)
}
inline void Tenant::set_asn(const char* value,
    size_t size) {
  
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Tenant.asn)
}
inline std::string* Tenant::_internal_mutable_asn() {
  
  return asn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tenant::release_asn() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.asn)
  return asn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tenant::set_allocated_asn(std::string* asn) {
  if (asn != nullptr) {
    
  } else {
    
  }
  asn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.asn)
}
inline std::string* Tenant::unsafe_arena_release_asn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Tenant.asn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return asn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tenant::unsafe_arena_set_allocated_asn(
    std::string* asn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (asn != nullptr) {
    
  } else {
    
  }
  asn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      asn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.asn)
}

// string cidr = 9[json_name = "cidr"];
inline void Tenant::clear_cidr() {
  cidr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tenant::cidr() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.cidr)
  return _internal_cidr();
}
inline void Tenant::set_cidr(const std::string& value) {
  _internal_set_cidr(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.cidr)
}
inline std::string* Tenant::mutable_cidr() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.cidr)
  return _internal_mutable_cidr();
}
inline const std::string& Tenant::_internal_cidr() const {
  return cidr_.Get();
}
inline void Tenant::_internal_set_cidr(const std::string& value) {
  
  cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tenant::set_cidr(std::string&& value) {
  
  cidr_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Tenant.cidr)
}
inline void Tenant::set_cidr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Tenant.cidr)
}
inline void Tenant::set_cidr(const char* value,
    size_t size) {
  
  cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Tenant.cidr)
}
inline std::string* Tenant::_internal_mutable_cidr() {
  
  return cidr_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tenant::release_cidr() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.cidr)
  return cidr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tenant::set_allocated_cidr(std::string* cidr) {
  if (cidr != nullptr) {
    
  } else {
    
  }
  cidr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cidr,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.cidr)
}
inline std::string* Tenant::unsafe_arena_release_cidr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Tenant.cidr)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cidr_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tenant::unsafe_arena_set_allocated_cidr(
    std::string* cidr) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cidr != nullptr) {
    
  } else {
    
  }
  cidr_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cidr, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.cidr)
}

// repeated .kentik.mkp.v202102alpha1.CustomDimension custom_dimensions = 10[json_name = "customDimensions"];
inline int Tenant::_internal_custom_dimensions_size() const {
  return custom_dimensions_.size();
}
inline int Tenant::custom_dimensions_size() const {
  return _internal_custom_dimensions_size();
}
inline void Tenant::clear_custom_dimensions() {
  custom_dimensions_.Clear();
}
inline ::kentik::mkp::v202102alpha1::CustomDimension* Tenant::mutable_custom_dimensions(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.custom_dimensions)
  return custom_dimensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::CustomDimension >*
Tenant::mutable_custom_dimensions() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Tenant.custom_dimensions)
  return &custom_dimensions_;
}
inline const ::kentik::mkp::v202102alpha1::CustomDimension& Tenant::_internal_custom_dimensions(int index) const {
  return custom_dimensions_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::CustomDimension& Tenant::custom_dimensions(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.custom_dimensions)
  return _internal_custom_dimensions(index);
}
inline ::kentik::mkp::v202102alpha1::CustomDimension* Tenant::_internal_add_custom_dimensions() {
  return custom_dimensions_.Add();
}
inline ::kentik::mkp::v202102alpha1::CustomDimension* Tenant::add_custom_dimensions() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Tenant.custom_dimensions)
  return _internal_add_custom_dimensions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::CustomDimension >&
Tenant::custom_dimensions() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Tenant.custom_dimensions)
  return custom_dimensions_;
}

// .kentik.mkp.v202102alpha1.Device devices = 11[json_name = "devices"];
inline bool Tenant::_internal_has_devices() const {
  return this != internal_default_instance() && devices_ != nullptr;
}
inline bool Tenant::has_devices() const {
  return _internal_has_devices();
}
inline void Tenant::clear_devices() {
  if (GetArena() == nullptr && devices_ != nullptr) {
    delete devices_;
  }
  devices_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Device& Tenant::_internal_devices() const {
  const ::kentik::mkp::v202102alpha1::Device* p = devices_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Device*>(
      &::kentik::mkp::v202102alpha1::_Device_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Device& Tenant::devices() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.devices)
  return _internal_devices();
}
inline void Tenant::unsafe_arena_set_allocated_devices(
    ::kentik::mkp::v202102alpha1::Device* devices) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(devices_);
  }
  devices_ = devices;
  if (devices) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.devices)
}
inline ::kentik::mkp::v202102alpha1::Device* Tenant::release_devices() {
  auto temp = unsafe_arena_release_devices();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Device* Tenant::unsafe_arena_release_devices() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.devices)
  
  ::kentik::mkp::v202102alpha1::Device* temp = devices_;
  devices_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Device* Tenant::_internal_mutable_devices() {
  
  if (devices_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Device>(GetArena());
    devices_ = p;
  }
  return devices_;
}
inline ::kentik::mkp::v202102alpha1::Device* Tenant::mutable_devices() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.devices)
  return _internal_mutable_devices();
}
inline void Tenant::set_allocated_devices(::kentik::mkp::v202102alpha1::Device* devices) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete devices_;
  }
  if (devices) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(devices);
    if (message_arena != submessage_arena) {
      devices = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, devices, submessage_arena);
    }
    
  } else {
    
  }
  devices_ = devices;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.devices)
}

// .kentik.mkp.v202102alpha1.Filter filters = 12[json_name = "filters"];
inline bool Tenant::_internal_has_filters() const {
  return this != internal_default_instance() && filters_ != nullptr;
}
inline bool Tenant::has_filters() const {
  return _internal_has_filters();
}
inline void Tenant::clear_filters() {
  if (GetArena() == nullptr && filters_ != nullptr) {
    delete filters_;
  }
  filters_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Filter& Tenant::_internal_filters() const {
  const ::kentik::mkp::v202102alpha1::Filter* p = filters_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Filter*>(
      &::kentik::mkp::v202102alpha1::_Filter_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Filter& Tenant::filters() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.filters)
  return _internal_filters();
}
inline void Tenant::unsafe_arena_set_allocated_filters(
    ::kentik::mkp::v202102alpha1::Filter* filters) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filters_);
  }
  filters_ = filters;
  if (filters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.filters)
}
inline ::kentik::mkp::v202102alpha1::Filter* Tenant::release_filters() {
  auto temp = unsafe_arena_release_filters();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Filter* Tenant::unsafe_arena_release_filters() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.filters)
  
  ::kentik::mkp::v202102alpha1::Filter* temp = filters_;
  filters_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Filter* Tenant::_internal_mutable_filters() {
  
  if (filters_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Filter>(GetArena());
    filters_ = p;
  }
  return filters_;
}
inline ::kentik::mkp::v202102alpha1::Filter* Tenant::mutable_filters() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.filters)
  return _internal_mutable_filters();
}
inline void Tenant::set_allocated_filters(::kentik::mkp::v202102alpha1::Filter* filters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete filters_;
  }
  if (filters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(filters);
    if (message_arena != submessage_arena) {
      filters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filters, submessage_arena);
    }
    
  } else {
    
  }
  filters_ = filters;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.filters)
}

// string interface_name = 13[json_name = "interfaceName"];
inline void Tenant::clear_interface_name() {
  interface_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tenant::interface_name() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.interface_name)
  return _internal_interface_name();
}
inline void Tenant::set_interface_name(const std::string& value) {
  _internal_set_interface_name(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.interface_name)
}
inline std::string* Tenant::mutable_interface_name() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.interface_name)
  return _internal_mutable_interface_name();
}
inline const std::string& Tenant::_internal_interface_name() const {
  return interface_name_.Get();
}
inline void Tenant::_internal_set_interface_name(const std::string& value) {
  
  interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tenant::set_interface_name(std::string&& value) {
  
  interface_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Tenant.interface_name)
}
inline void Tenant::set_interface_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Tenant.interface_name)
}
inline void Tenant::set_interface_name(const char* value,
    size_t size) {
  
  interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Tenant.interface_name)
}
inline std::string* Tenant::_internal_mutable_interface_name() {
  
  return interface_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tenant::release_interface_name() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.interface_name)
  return interface_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tenant::set_allocated_interface_name(std::string* interface_name) {
  if (interface_name != nullptr) {
    
  } else {
    
  }
  interface_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), interface_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.interface_name)
}
inline std::string* Tenant::unsafe_arena_release_interface_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Tenant.interface_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return interface_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tenant::unsafe_arena_set_allocated_interface_name(
    std::string* interface_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (interface_name != nullptr) {
    
  } else {
    
  }
  interface_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      interface_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.interface_name)
}

// string snmp_alias = 14[json_name = "snmpAlias"];
inline void Tenant::clear_snmp_alias() {
  snmp_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Tenant::snmp_alias() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
  return _internal_snmp_alias();
}
inline void Tenant::set_snmp_alias(const std::string& value) {
  _internal_set_snmp_alias(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
}
inline std::string* Tenant::mutable_snmp_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
  return _internal_mutable_snmp_alias();
}
inline const std::string& Tenant::_internal_snmp_alias() const {
  return snmp_alias_.Get();
}
inline void Tenant::_internal_set_snmp_alias(const std::string& value) {
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Tenant::set_snmp_alias(std::string&& value) {
  
  snmp_alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
}
inline void Tenant::set_snmp_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
}
inline void Tenant::set_snmp_alias(const char* value,
    size_t size) {
  
  snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
}
inline std::string* Tenant::_internal_mutable_snmp_alias() {
  
  return snmp_alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Tenant::release_snmp_alias() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
  return snmp_alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Tenant::set_allocated_snmp_alias(std::string* snmp_alias) {
  if (snmp_alias != nullptr) {
    
  } else {
    
  }
  snmp_alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), snmp_alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
}
inline std::string* Tenant::unsafe_arena_release_snmp_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return snmp_alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Tenant::unsafe_arena_set_allocated_snmp_alias(
    std::string* snmp_alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (snmp_alias != nullptr) {
    
  } else {
    
  }
  snmp_alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      snmp_alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.Tenant.snmp_alias)
}

// repeated .kentik.mkp.v202102alpha1.Package packages = 16[json_name = "packages"];
inline int Tenant::_internal_packages_size() const {
  return packages_.size();
}
inline int Tenant::packages_size() const {
  return _internal_packages_size();
}
inline void Tenant::clear_packages() {
  packages_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Package* Tenant::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package >*
Tenant::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Tenant.packages)
  return &packages_;
}
inline const ::kentik::mkp::v202102alpha1::Package& Tenant::_internal_packages(int index) const {
  return packages_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Package& Tenant::packages(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.packages)
  return _internal_packages(index);
}
inline ::kentik::mkp::v202102alpha1::Package* Tenant::_internal_add_packages() {
  return packages_.Add();
}
inline ::kentik::mkp::v202102alpha1::Package* Tenant::add_packages() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Tenant.packages)
  return _internal_add_packages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package >&
Tenant::packages() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Tenant.packages)
  return packages_;
}

// repeated .kentik.mkp.v202102alpha1.User users = 17[json_name = "users"];
inline int Tenant::_internal_users_size() const {
  return users_.size();
}
inline int Tenant::users_size() const {
  return _internal_users_size();
}
inline void Tenant::clear_users() {
  users_.Clear();
}
inline ::kentik::mkp::v202102alpha1::User* Tenant::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.Tenant.users)
  return users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::User >*
Tenant::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.Tenant.users)
  return &users_;
}
inline const ::kentik::mkp::v202102alpha1::User& Tenant::_internal_users(int index) const {
  return users_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::User& Tenant::users(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.users)
  return _internal_users(index);
}
inline ::kentik::mkp::v202102alpha1::User* Tenant::_internal_add_users() {
  return users_.Add();
}
inline ::kentik::mkp::v202102alpha1::User* Tenant::add_users() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.Tenant.users)
  return _internal_add_users();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::User >&
Tenant::users() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.Tenant.users)
  return users_;
}

// uint32 template_id = 18[json_name = "templateId"];
inline void Tenant::clear_template_id() {
  template_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tenant::_internal_template_id() const {
  return template_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Tenant::template_id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.Tenant.template_id)
  return _internal_template_id();
}
inline void Tenant::_internal_set_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  template_id_ = value;
}
inline void Tenant::set_template_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_template_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.Tenant.template_id)
}

// -------------------------------------------------------------------

// ListPackageRequest

// -------------------------------------------------------------------

// ListPackageResponse

// repeated .kentik.mkp.v202102alpha1.Package packages = 1[json_name = "packages"];
inline int ListPackageResponse::_internal_packages_size() const {
  return packages_.size();
}
inline int ListPackageResponse::packages_size() const {
  return _internal_packages_size();
}
inline void ListPackageResponse::clear_packages() {
  packages_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Package* ListPackageResponse::mutable_packages(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.ListPackageResponse.packages)
  return packages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package >*
ListPackageResponse::mutable_packages() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.ListPackageResponse.packages)
  return &packages_;
}
inline const ::kentik::mkp::v202102alpha1::Package& ListPackageResponse::_internal_packages(int index) const {
  return packages_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Package& ListPackageResponse::packages(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.ListPackageResponse.packages)
  return _internal_packages(index);
}
inline ::kentik::mkp::v202102alpha1::Package* ListPackageResponse::_internal_add_packages() {
  return packages_.Add();
}
inline ::kentik::mkp::v202102alpha1::Package* ListPackageResponse::add_packages() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.ListPackageResponse.packages)
  return _internal_add_packages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Package >&
ListPackageResponse::packages() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.ListPackageResponse.packages)
  return packages_;
}

// uint32 invalid_count = 2[json_name = "invalidCount"];
inline void ListPackageResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPackageResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListPackageResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.ListPackageResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListPackageResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListPackageResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.ListPackageResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetPackageRequest

// uint64 id = 1[json_name = "id"];
inline void GetPackageRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPackageRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPackageRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.GetPackageRequest.id)
  return _internal_id();
}
inline void GetPackageRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void GetPackageRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.GetPackageRequest.id)
}

// -------------------------------------------------------------------

// GetPackageResponse

// .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
inline bool GetPackageResponse::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool GetPackageResponse::has_package() const {
  return _internal_has_package();
}
inline void GetPackageResponse::clear_package() {
  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Package& GetPackageResponse::_internal_package() const {
  const ::kentik::mkp::v202102alpha1::Package* p = package_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Package*>(
      &::kentik::mkp::v202102alpha1::_Package_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Package& GetPackageResponse::package() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.GetPackageResponse.package)
  return _internal_package();
}
inline void GetPackageResponse::unsafe_arena_set_allocated_package(
    ::kentik::mkp::v202102alpha1::Package* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.GetPackageResponse.package)
}
inline ::kentik::mkp::v202102alpha1::Package* GetPackageResponse::release_package() {
  auto temp = unsafe_arena_release_package();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* GetPackageResponse::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.GetPackageResponse.package)
  
  ::kentik::mkp::v202102alpha1::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* GetPackageResponse::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Package>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::kentik::mkp::v202102alpha1::Package* GetPackageResponse::mutable_package() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.GetPackageResponse.package)
  return _internal_mutable_package();
}
inline void GetPackageResponse::set_allocated_package(::kentik::mkp::v202102alpha1::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.GetPackageResponse.package)
}

// -------------------------------------------------------------------

// CreatePackageRequest

// .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
inline bool CreatePackageRequest::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool CreatePackageRequest::has_package() const {
  return _internal_has_package();
}
inline void CreatePackageRequest::clear_package() {
  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Package& CreatePackageRequest::_internal_package() const {
  const ::kentik::mkp::v202102alpha1::Package* p = package_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Package*>(
      &::kentik::mkp::v202102alpha1::_Package_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Package& CreatePackageRequest::package() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.CreatePackageRequest.package)
  return _internal_package();
}
inline void CreatePackageRequest::unsafe_arena_set_allocated_package(
    ::kentik::mkp::v202102alpha1::Package* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.CreatePackageRequest.package)
}
inline ::kentik::mkp::v202102alpha1::Package* CreatePackageRequest::release_package() {
  auto temp = unsafe_arena_release_package();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* CreatePackageRequest::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.CreatePackageRequest.package)
  
  ::kentik::mkp::v202102alpha1::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* CreatePackageRequest::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Package>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::kentik::mkp::v202102alpha1::Package* CreatePackageRequest::mutable_package() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.CreatePackageRequest.package)
  return _internal_mutable_package();
}
inline void CreatePackageRequest::set_allocated_package(::kentik::mkp::v202102alpha1::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.CreatePackageRequest.package)
}

// -------------------------------------------------------------------

// CreatePackageResponse

// .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
inline bool CreatePackageResponse::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool CreatePackageResponse::has_package() const {
  return _internal_has_package();
}
inline void CreatePackageResponse::clear_package() {
  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Package& CreatePackageResponse::_internal_package() const {
  const ::kentik::mkp::v202102alpha1::Package* p = package_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Package*>(
      &::kentik::mkp::v202102alpha1::_Package_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Package& CreatePackageResponse::package() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.CreatePackageResponse.package)
  return _internal_package();
}
inline void CreatePackageResponse::unsafe_arena_set_allocated_package(
    ::kentik::mkp::v202102alpha1::Package* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.CreatePackageResponse.package)
}
inline ::kentik::mkp::v202102alpha1::Package* CreatePackageResponse::release_package() {
  auto temp = unsafe_arena_release_package();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* CreatePackageResponse::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.CreatePackageResponse.package)
  
  ::kentik::mkp::v202102alpha1::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* CreatePackageResponse::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Package>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::kentik::mkp::v202102alpha1::Package* CreatePackageResponse::mutable_package() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.CreatePackageResponse.package)
  return _internal_mutable_package();
}
inline void CreatePackageResponse::set_allocated_package(::kentik::mkp::v202102alpha1::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.CreatePackageResponse.package)
}

// -------------------------------------------------------------------

// UpdatePackageRequest

// .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
inline bool UpdatePackageRequest::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool UpdatePackageRequest::has_package() const {
  return _internal_has_package();
}
inline void UpdatePackageRequest::clear_package() {
  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Package& UpdatePackageRequest::_internal_package() const {
  const ::kentik::mkp::v202102alpha1::Package* p = package_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Package*>(
      &::kentik::mkp::v202102alpha1::_Package_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Package& UpdatePackageRequest::package() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.UpdatePackageRequest.package)
  return _internal_package();
}
inline void UpdatePackageRequest::unsafe_arena_set_allocated_package(
    ::kentik::mkp::v202102alpha1::Package* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.UpdatePackageRequest.package)
}
inline ::kentik::mkp::v202102alpha1::Package* UpdatePackageRequest::release_package() {
  auto temp = unsafe_arena_release_package();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* UpdatePackageRequest::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.UpdatePackageRequest.package)
  
  ::kentik::mkp::v202102alpha1::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* UpdatePackageRequest::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Package>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::kentik::mkp::v202102alpha1::Package* UpdatePackageRequest::mutable_package() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.UpdatePackageRequest.package)
  return _internal_mutable_package();
}
inline void UpdatePackageRequest::set_allocated_package(::kentik::mkp::v202102alpha1::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.UpdatePackageRequest.package)
}

// -------------------------------------------------------------------

// UpdatePackageResponse

// .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
inline bool UpdatePackageResponse::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool UpdatePackageResponse::has_package() const {
  return _internal_has_package();
}
inline void UpdatePackageResponse::clear_package() {
  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Package& UpdatePackageResponse::_internal_package() const {
  const ::kentik::mkp::v202102alpha1::Package* p = package_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Package*>(
      &::kentik::mkp::v202102alpha1::_Package_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Package& UpdatePackageResponse::package() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.UpdatePackageResponse.package)
  return _internal_package();
}
inline void UpdatePackageResponse::unsafe_arena_set_allocated_package(
    ::kentik::mkp::v202102alpha1::Package* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.UpdatePackageResponse.package)
}
inline ::kentik::mkp::v202102alpha1::Package* UpdatePackageResponse::release_package() {
  auto temp = unsafe_arena_release_package();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* UpdatePackageResponse::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.UpdatePackageResponse.package)
  
  ::kentik::mkp::v202102alpha1::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* UpdatePackageResponse::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Package>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::kentik::mkp::v202102alpha1::Package* UpdatePackageResponse::mutable_package() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.UpdatePackageResponse.package)
  return _internal_mutable_package();
}
inline void UpdatePackageResponse::set_allocated_package(::kentik::mkp::v202102alpha1::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.UpdatePackageResponse.package)
}

// -------------------------------------------------------------------

// PatchPackageRequest

// .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
inline bool PatchPackageRequest::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool PatchPackageRequest::has_package() const {
  return _internal_has_package();
}
inline void PatchPackageRequest::clear_package() {
  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Package& PatchPackageRequest::_internal_package() const {
  const ::kentik::mkp::v202102alpha1::Package* p = package_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Package*>(
      &::kentik::mkp::v202102alpha1::_Package_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Package& PatchPackageRequest::package() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.PatchPackageRequest.package)
  return _internal_package();
}
inline void PatchPackageRequest::unsafe_arena_set_allocated_package(
    ::kentik::mkp::v202102alpha1::Package* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.PatchPackageRequest.package)
}
inline ::kentik::mkp::v202102alpha1::Package* PatchPackageRequest::release_package() {
  auto temp = unsafe_arena_release_package();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* PatchPackageRequest::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.PatchPackageRequest.package)
  
  ::kentik::mkp::v202102alpha1::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* PatchPackageRequest::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Package>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::kentik::mkp::v202102alpha1::Package* PatchPackageRequest::mutable_package() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.PatchPackageRequest.package)
  return _internal_mutable_package();
}
inline void PatchPackageRequest::set_allocated_package(::kentik::mkp::v202102alpha1::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.PatchPackageRequest.package)
}

// .google.protobuf.FieldMask mask = 2[json_name = "mask"];
inline bool PatchPackageRequest::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool PatchPackageRequest::has_mask() const {
  return _internal_has_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& PatchPackageRequest::_internal_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& PatchPackageRequest::mask() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.PatchPackageRequest.mask)
  return _internal_mask();
}
inline void PatchPackageRequest::unsafe_arena_set_allocated_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.PatchPackageRequest.mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchPackageRequest::release_mask() {
  auto temp = unsafe_arena_release_mask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchPackageRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.PatchPackageRequest.mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchPackageRequest::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchPackageRequest::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.PatchPackageRequest.mask)
  return _internal_mutable_mask();
}
inline void PatchPackageRequest::set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask)->GetArena();
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.PatchPackageRequest.mask)
}

// -------------------------------------------------------------------

// PatchPackageResponse

// .kentik.mkp.v202102alpha1.Package package = 1[json_name = "package"];
inline bool PatchPackageResponse::_internal_has_package() const {
  return this != internal_default_instance() && package_ != nullptr;
}
inline bool PatchPackageResponse::has_package() const {
  return _internal_has_package();
}
inline void PatchPackageResponse::clear_package() {
  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Package& PatchPackageResponse::_internal_package() const {
  const ::kentik::mkp::v202102alpha1::Package* p = package_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Package*>(
      &::kentik::mkp::v202102alpha1::_Package_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Package& PatchPackageResponse::package() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.PatchPackageResponse.package)
  return _internal_package();
}
inline void PatchPackageResponse::unsafe_arena_set_allocated_package(
    ::kentik::mkp::v202102alpha1::Package* package) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(package_);
  }
  package_ = package;
  if (package) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.PatchPackageResponse.package)
}
inline ::kentik::mkp::v202102alpha1::Package* PatchPackageResponse::release_package() {
  auto temp = unsafe_arena_release_package();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* PatchPackageResponse::unsafe_arena_release_package() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.PatchPackageResponse.package)
  
  ::kentik::mkp::v202102alpha1::Package* temp = package_;
  package_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Package* PatchPackageResponse::_internal_mutable_package() {
  
  if (package_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Package>(GetArena());
    package_ = p;
  }
  return package_;
}
inline ::kentik::mkp::v202102alpha1::Package* PatchPackageResponse::mutable_package() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.PatchPackageResponse.package)
  return _internal_mutable_package();
}
inline void PatchPackageResponse::set_allocated_package(::kentik::mkp::v202102alpha1::Package* package) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete package_;
  }
  if (package) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(package);
    if (message_arena != submessage_arena) {
      package = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, package, submessage_arena);
    }
    
  } else {
    
  }
  package_ = package;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.PatchPackageResponse.package)
}

// -------------------------------------------------------------------

// DeletePackageRequest

// uint64 id = 1[json_name = "id"];
inline void DeletePackageRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeletePackageRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeletePackageRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.DeletePackageRequest.id)
  return _internal_id();
}
inline void DeletePackageRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void DeletePackageRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.DeletePackageRequest.id)
}

// -------------------------------------------------------------------

// DeletePackageResponse

// -------------------------------------------------------------------

// ListTenantRequest

// -------------------------------------------------------------------

// ListTenantResponse

// repeated .kentik.mkp.v202102alpha1.Tenant tenants = 1[json_name = "tenants"];
inline int ListTenantResponse::_internal_tenants_size() const {
  return tenants_.size();
}
inline int ListTenantResponse::tenants_size() const {
  return _internal_tenants_size();
}
inline void ListTenantResponse::clear_tenants() {
  tenants_.Clear();
}
inline ::kentik::mkp::v202102alpha1::Tenant* ListTenantResponse::mutable_tenants(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.ListTenantResponse.tenants)
  return tenants_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Tenant >*
ListTenantResponse::mutable_tenants() {
  // @@protoc_insertion_point(field_mutable_list:kentik.mkp.v202102alpha1.ListTenantResponse.tenants)
  return &tenants_;
}
inline const ::kentik::mkp::v202102alpha1::Tenant& ListTenantResponse::_internal_tenants(int index) const {
  return tenants_.Get(index);
}
inline const ::kentik::mkp::v202102alpha1::Tenant& ListTenantResponse::tenants(int index) const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.ListTenantResponse.tenants)
  return _internal_tenants(index);
}
inline ::kentik::mkp::v202102alpha1::Tenant* ListTenantResponse::_internal_add_tenants() {
  return tenants_.Add();
}
inline ::kentik::mkp::v202102alpha1::Tenant* ListTenantResponse::add_tenants() {
  // @@protoc_insertion_point(field_add:kentik.mkp.v202102alpha1.ListTenantResponse.tenants)
  return _internal_add_tenants();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::mkp::v202102alpha1::Tenant >&
ListTenantResponse::tenants() const {
  // @@protoc_insertion_point(field_list:kentik.mkp.v202102alpha1.ListTenantResponse.tenants)
  return tenants_;
}

// uint32 invalid_count = 2[json_name = "invalidCount"];
inline void ListTenantResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTenantResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTenantResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.ListTenantResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListTenantResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListTenantResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.ListTenantResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetTenantRequest

// uint64 id = 1[json_name = "id"];
inline void GetTenantRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTenantRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetTenantRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.GetTenantRequest.id)
  return _internal_id();
}
inline void GetTenantRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void GetTenantRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.GetTenantRequest.id)
}

// -------------------------------------------------------------------

// GetTenantResponse

// .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
inline bool GetTenantResponse::_internal_has_tenant() const {
  return this != internal_default_instance() && tenant_ != nullptr;
}
inline bool GetTenantResponse::has_tenant() const {
  return _internal_has_tenant();
}
inline void GetTenantResponse::clear_tenant() {
  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Tenant& GetTenantResponse::_internal_tenant() const {
  const ::kentik::mkp::v202102alpha1::Tenant* p = tenant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Tenant*>(
      &::kentik::mkp::v202102alpha1::_Tenant_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Tenant& GetTenantResponse::tenant() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.GetTenantResponse.tenant)
  return _internal_tenant();
}
inline void GetTenantResponse::unsafe_arena_set_allocated_tenant(
    ::kentik::mkp::v202102alpha1::Tenant* tenant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tenant_);
  }
  tenant_ = tenant;
  if (tenant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.GetTenantResponse.tenant)
}
inline ::kentik::mkp::v202102alpha1::Tenant* GetTenantResponse::release_tenant() {
  auto temp = unsafe_arena_release_tenant();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* GetTenantResponse::unsafe_arena_release_tenant() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.GetTenantResponse.tenant)
  
  ::kentik::mkp::v202102alpha1::Tenant* temp = tenant_;
  tenant_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* GetTenantResponse::_internal_mutable_tenant() {
  
  if (tenant_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Tenant>(GetArena());
    tenant_ = p;
  }
  return tenant_;
}
inline ::kentik::mkp::v202102alpha1::Tenant* GetTenantResponse::mutable_tenant() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.GetTenantResponse.tenant)
  return _internal_mutable_tenant();
}
inline void GetTenantResponse::set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tenant_;
  }
  if (tenant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tenant);
    if (message_arena != submessage_arena) {
      tenant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tenant, submessage_arena);
    }
    
  } else {
    
  }
  tenant_ = tenant;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.GetTenantResponse.tenant)
}

// -------------------------------------------------------------------

// CreateTenantRequest

// .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
inline bool CreateTenantRequest::_internal_has_tenant() const {
  return this != internal_default_instance() && tenant_ != nullptr;
}
inline bool CreateTenantRequest::has_tenant() const {
  return _internal_has_tenant();
}
inline void CreateTenantRequest::clear_tenant() {
  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Tenant& CreateTenantRequest::_internal_tenant() const {
  const ::kentik::mkp::v202102alpha1::Tenant* p = tenant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Tenant*>(
      &::kentik::mkp::v202102alpha1::_Tenant_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Tenant& CreateTenantRequest::tenant() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.CreateTenantRequest.tenant)
  return _internal_tenant();
}
inline void CreateTenantRequest::unsafe_arena_set_allocated_tenant(
    ::kentik::mkp::v202102alpha1::Tenant* tenant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tenant_);
  }
  tenant_ = tenant;
  if (tenant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.CreateTenantRequest.tenant)
}
inline ::kentik::mkp::v202102alpha1::Tenant* CreateTenantRequest::release_tenant() {
  auto temp = unsafe_arena_release_tenant();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* CreateTenantRequest::unsafe_arena_release_tenant() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.CreateTenantRequest.tenant)
  
  ::kentik::mkp::v202102alpha1::Tenant* temp = tenant_;
  tenant_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* CreateTenantRequest::_internal_mutable_tenant() {
  
  if (tenant_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Tenant>(GetArena());
    tenant_ = p;
  }
  return tenant_;
}
inline ::kentik::mkp::v202102alpha1::Tenant* CreateTenantRequest::mutable_tenant() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.CreateTenantRequest.tenant)
  return _internal_mutable_tenant();
}
inline void CreateTenantRequest::set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tenant_;
  }
  if (tenant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tenant);
    if (message_arena != submessage_arena) {
      tenant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tenant, submessage_arena);
    }
    
  } else {
    
  }
  tenant_ = tenant;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.CreateTenantRequest.tenant)
}

// -------------------------------------------------------------------

// CreateTenantResponse

// .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
inline bool CreateTenantResponse::_internal_has_tenant() const {
  return this != internal_default_instance() && tenant_ != nullptr;
}
inline bool CreateTenantResponse::has_tenant() const {
  return _internal_has_tenant();
}
inline void CreateTenantResponse::clear_tenant() {
  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Tenant& CreateTenantResponse::_internal_tenant() const {
  const ::kentik::mkp::v202102alpha1::Tenant* p = tenant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Tenant*>(
      &::kentik::mkp::v202102alpha1::_Tenant_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Tenant& CreateTenantResponse::tenant() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.CreateTenantResponse.tenant)
  return _internal_tenant();
}
inline void CreateTenantResponse::unsafe_arena_set_allocated_tenant(
    ::kentik::mkp::v202102alpha1::Tenant* tenant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tenant_);
  }
  tenant_ = tenant;
  if (tenant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.CreateTenantResponse.tenant)
}
inline ::kentik::mkp::v202102alpha1::Tenant* CreateTenantResponse::release_tenant() {
  auto temp = unsafe_arena_release_tenant();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* CreateTenantResponse::unsafe_arena_release_tenant() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.CreateTenantResponse.tenant)
  
  ::kentik::mkp::v202102alpha1::Tenant* temp = tenant_;
  tenant_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* CreateTenantResponse::_internal_mutable_tenant() {
  
  if (tenant_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Tenant>(GetArena());
    tenant_ = p;
  }
  return tenant_;
}
inline ::kentik::mkp::v202102alpha1::Tenant* CreateTenantResponse::mutable_tenant() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.CreateTenantResponse.tenant)
  return _internal_mutable_tenant();
}
inline void CreateTenantResponse::set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tenant_;
  }
  if (tenant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tenant);
    if (message_arena != submessage_arena) {
      tenant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tenant, submessage_arena);
    }
    
  } else {
    
  }
  tenant_ = tenant;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.CreateTenantResponse.tenant)
}

// -------------------------------------------------------------------

// UpdateTenantRequest

// .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
inline bool UpdateTenantRequest::_internal_has_tenant() const {
  return this != internal_default_instance() && tenant_ != nullptr;
}
inline bool UpdateTenantRequest::has_tenant() const {
  return _internal_has_tenant();
}
inline void UpdateTenantRequest::clear_tenant() {
  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Tenant& UpdateTenantRequest::_internal_tenant() const {
  const ::kentik::mkp::v202102alpha1::Tenant* p = tenant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Tenant*>(
      &::kentik::mkp::v202102alpha1::_Tenant_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Tenant& UpdateTenantRequest::tenant() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.UpdateTenantRequest.tenant)
  return _internal_tenant();
}
inline void UpdateTenantRequest::unsafe_arena_set_allocated_tenant(
    ::kentik::mkp::v202102alpha1::Tenant* tenant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tenant_);
  }
  tenant_ = tenant;
  if (tenant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.UpdateTenantRequest.tenant)
}
inline ::kentik::mkp::v202102alpha1::Tenant* UpdateTenantRequest::release_tenant() {
  auto temp = unsafe_arena_release_tenant();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* UpdateTenantRequest::unsafe_arena_release_tenant() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.UpdateTenantRequest.tenant)
  
  ::kentik::mkp::v202102alpha1::Tenant* temp = tenant_;
  tenant_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* UpdateTenantRequest::_internal_mutable_tenant() {
  
  if (tenant_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Tenant>(GetArena());
    tenant_ = p;
  }
  return tenant_;
}
inline ::kentik::mkp::v202102alpha1::Tenant* UpdateTenantRequest::mutable_tenant() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.UpdateTenantRequest.tenant)
  return _internal_mutable_tenant();
}
inline void UpdateTenantRequest::set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tenant_;
  }
  if (tenant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tenant);
    if (message_arena != submessage_arena) {
      tenant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tenant, submessage_arena);
    }
    
  } else {
    
  }
  tenant_ = tenant;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.UpdateTenantRequest.tenant)
}

// -------------------------------------------------------------------

// UpdateTenantResponse

// .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
inline bool UpdateTenantResponse::_internal_has_tenant() const {
  return this != internal_default_instance() && tenant_ != nullptr;
}
inline bool UpdateTenantResponse::has_tenant() const {
  return _internal_has_tenant();
}
inline void UpdateTenantResponse::clear_tenant() {
  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Tenant& UpdateTenantResponse::_internal_tenant() const {
  const ::kentik::mkp::v202102alpha1::Tenant* p = tenant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Tenant*>(
      &::kentik::mkp::v202102alpha1::_Tenant_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Tenant& UpdateTenantResponse::tenant() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.UpdateTenantResponse.tenant)
  return _internal_tenant();
}
inline void UpdateTenantResponse::unsafe_arena_set_allocated_tenant(
    ::kentik::mkp::v202102alpha1::Tenant* tenant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tenant_);
  }
  tenant_ = tenant;
  if (tenant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.UpdateTenantResponse.tenant)
}
inline ::kentik::mkp::v202102alpha1::Tenant* UpdateTenantResponse::release_tenant() {
  auto temp = unsafe_arena_release_tenant();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* UpdateTenantResponse::unsafe_arena_release_tenant() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.UpdateTenantResponse.tenant)
  
  ::kentik::mkp::v202102alpha1::Tenant* temp = tenant_;
  tenant_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* UpdateTenantResponse::_internal_mutable_tenant() {
  
  if (tenant_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Tenant>(GetArena());
    tenant_ = p;
  }
  return tenant_;
}
inline ::kentik::mkp::v202102alpha1::Tenant* UpdateTenantResponse::mutable_tenant() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.UpdateTenantResponse.tenant)
  return _internal_mutable_tenant();
}
inline void UpdateTenantResponse::set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tenant_;
  }
  if (tenant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tenant);
    if (message_arena != submessage_arena) {
      tenant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tenant, submessage_arena);
    }
    
  } else {
    
  }
  tenant_ = tenant;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.UpdateTenantResponse.tenant)
}

// -------------------------------------------------------------------

// PatchTenantRequest

// .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
inline bool PatchTenantRequest::_internal_has_tenant() const {
  return this != internal_default_instance() && tenant_ != nullptr;
}
inline bool PatchTenantRequest::has_tenant() const {
  return _internal_has_tenant();
}
inline void PatchTenantRequest::clear_tenant() {
  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Tenant& PatchTenantRequest::_internal_tenant() const {
  const ::kentik::mkp::v202102alpha1::Tenant* p = tenant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Tenant*>(
      &::kentik::mkp::v202102alpha1::_Tenant_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Tenant& PatchTenantRequest::tenant() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.PatchTenantRequest.tenant)
  return _internal_tenant();
}
inline void PatchTenantRequest::unsafe_arena_set_allocated_tenant(
    ::kentik::mkp::v202102alpha1::Tenant* tenant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tenant_);
  }
  tenant_ = tenant;
  if (tenant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.PatchTenantRequest.tenant)
}
inline ::kentik::mkp::v202102alpha1::Tenant* PatchTenantRequest::release_tenant() {
  auto temp = unsafe_arena_release_tenant();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* PatchTenantRequest::unsafe_arena_release_tenant() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.PatchTenantRequest.tenant)
  
  ::kentik::mkp::v202102alpha1::Tenant* temp = tenant_;
  tenant_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* PatchTenantRequest::_internal_mutable_tenant() {
  
  if (tenant_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Tenant>(GetArena());
    tenant_ = p;
  }
  return tenant_;
}
inline ::kentik::mkp::v202102alpha1::Tenant* PatchTenantRequest::mutable_tenant() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.PatchTenantRequest.tenant)
  return _internal_mutable_tenant();
}
inline void PatchTenantRequest::set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tenant_;
  }
  if (tenant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tenant);
    if (message_arena != submessage_arena) {
      tenant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tenant, submessage_arena);
    }
    
  } else {
    
  }
  tenant_ = tenant;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.PatchTenantRequest.tenant)
}

// .google.protobuf.FieldMask mask = 2[json_name = "mask"];
inline bool PatchTenantRequest::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool PatchTenantRequest::has_mask() const {
  return _internal_has_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& PatchTenantRequest::_internal_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& PatchTenantRequest::mask() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.PatchTenantRequest.mask)
  return _internal_mask();
}
inline void PatchTenantRequest::unsafe_arena_set_allocated_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.PatchTenantRequest.mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchTenantRequest::release_mask() {
  auto temp = unsafe_arena_release_mask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchTenantRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.PatchTenantRequest.mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchTenantRequest::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchTenantRequest::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.PatchTenantRequest.mask)
  return _internal_mutable_mask();
}
inline void PatchTenantRequest::set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask)->GetArena();
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.PatchTenantRequest.mask)
}

// -------------------------------------------------------------------

// PatchTenantResponse

// .kentik.mkp.v202102alpha1.Tenant tenant = 1[json_name = "tenant"];
inline bool PatchTenantResponse::_internal_has_tenant() const {
  return this != internal_default_instance() && tenant_ != nullptr;
}
inline bool PatchTenantResponse::has_tenant() const {
  return _internal_has_tenant();
}
inline void PatchTenantResponse::clear_tenant() {
  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
}
inline const ::kentik::mkp::v202102alpha1::Tenant& PatchTenantResponse::_internal_tenant() const {
  const ::kentik::mkp::v202102alpha1::Tenant* p = tenant_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::mkp::v202102alpha1::Tenant*>(
      &::kentik::mkp::v202102alpha1::_Tenant_default_instance_);
}
inline const ::kentik::mkp::v202102alpha1::Tenant& PatchTenantResponse::tenant() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.PatchTenantResponse.tenant)
  return _internal_tenant();
}
inline void PatchTenantResponse::unsafe_arena_set_allocated_tenant(
    ::kentik::mkp::v202102alpha1::Tenant* tenant) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tenant_);
  }
  tenant_ = tenant;
  if (tenant) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.mkp.v202102alpha1.PatchTenantResponse.tenant)
}
inline ::kentik::mkp::v202102alpha1::Tenant* PatchTenantResponse::release_tenant() {
  auto temp = unsafe_arena_release_tenant();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* PatchTenantResponse::unsafe_arena_release_tenant() {
  // @@protoc_insertion_point(field_release:kentik.mkp.v202102alpha1.PatchTenantResponse.tenant)
  
  ::kentik::mkp::v202102alpha1::Tenant* temp = tenant_;
  tenant_ = nullptr;
  return temp;
}
inline ::kentik::mkp::v202102alpha1::Tenant* PatchTenantResponse::_internal_mutable_tenant() {
  
  if (tenant_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::mkp::v202102alpha1::Tenant>(GetArena());
    tenant_ = p;
  }
  return tenant_;
}
inline ::kentik::mkp::v202102alpha1::Tenant* PatchTenantResponse::mutable_tenant() {
  // @@protoc_insertion_point(field_mutable:kentik.mkp.v202102alpha1.PatchTenantResponse.tenant)
  return _internal_mutable_tenant();
}
inline void PatchTenantResponse::set_allocated_tenant(::kentik::mkp::v202102alpha1::Tenant* tenant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tenant_;
  }
  if (tenant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tenant);
    if (message_arena != submessage_arena) {
      tenant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tenant, submessage_arena);
    }
    
  } else {
    
  }
  tenant_ = tenant;
  // @@protoc_insertion_point(field_set_allocated:kentik.mkp.v202102alpha1.PatchTenantResponse.tenant)
}

// -------------------------------------------------------------------

// DeleteTenantRequest

// uint64 id = 1[json_name = "id"];
inline void DeleteTenantRequest::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteTenantRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DeleteTenantRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.mkp.v202102alpha1.DeleteTenantRequest.id)
  return _internal_id();
}
inline void DeleteTenantRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void DeleteTenantRequest::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.mkp.v202102alpha1.DeleteTenantRequest.id)
}

// -------------------------------------------------------------------

// DeleteTenantResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202102alpha1
}  // namespace mkp
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fmkp_2fv202102alpha1_2fmkp_2eproto
