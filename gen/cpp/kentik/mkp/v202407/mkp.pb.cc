// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/mkp/v202407/mkp.proto

#include "kentik/mkp/v202407/mkp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Activate_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Asset_Report_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomDimension_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Devices_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Filter_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterField_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mitigation_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NotificationChannel_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TenantLink_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fmkp_2fv202407_2fmkp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Threshold_kentik_2fmkp_2fv202407_2fmkp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fuser_2fv202211_2fuser_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto;
namespace kentik {
namespace mkp {
namespace v202407 {
class AlertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Alert> _instance;
} _Alert_default_instance_;
class Asset_ReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Asset_Report> _instance;
} _Asset_Report_default_instance_;
class AssetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Asset> _instance;
} _Asset_default_instance_;
class ThresholdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Threshold> _instance;
} _Threshold_default_instance_;
class ActivateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Activate> _instance;
} _Activate_default_instance_;
class ConditionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Condition> _instance;
} _Condition_default_instance_;
class MitigationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mitigation> _instance;
} _Mitigation_default_instance_;
class NotificationChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotificationChannel> _instance;
} _NotificationChannel_default_instance_;
class TenantLinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TenantLink> _instance;
} _TenantLink_default_instance_;
class PackageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Package> _instance;
} _Package_default_instance_;
class CustomDimensionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomDimension> _instance;
} _CustomDimension_default_instance_;
class DevicesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Devices> _instance;
} _Devices_default_instance_;
class FilterFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FilterField> _instance;
} _FilterField_default_instance_;
class FilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Filter> _instance;
} _Filter_default_instance_;
class TenantDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Tenant> _instance;
} _Tenant_default_instance_;
class ListPackageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPackageRequest> _instance;
} _ListPackageRequest_default_instance_;
class ListPackageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListPackageResponse> _instance;
} _ListPackageResponse_default_instance_;
class GetPackageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPackageRequest> _instance;
} _GetPackageRequest_default_instance_;
class GetPackageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPackageResponse> _instance;
} _GetPackageResponse_default_instance_;
class CreatePackageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePackageRequest> _instance;
} _CreatePackageRequest_default_instance_;
class CreatePackageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreatePackageResponse> _instance;
} _CreatePackageResponse_default_instance_;
class UpdatePackageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePackageRequest> _instance;
} _UpdatePackageRequest_default_instance_;
class UpdatePackageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePackageResponse> _instance;
} _UpdatePackageResponse_default_instance_;
class DeletePackageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePackageRequest> _instance;
} _DeletePackageRequest_default_instance_;
class DeletePackageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeletePackageResponse> _instance;
} _DeletePackageResponse_default_instance_;
class ListTenantRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTenantRequest> _instance;
} _ListTenantRequest_default_instance_;
class ListTenantResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTenantResponse> _instance;
} _ListTenantResponse_default_instance_;
class GetTenantRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTenantRequest> _instance;
} _GetTenantRequest_default_instance_;
class GetTenantResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTenantResponse> _instance;
} _GetTenantResponse_default_instance_;
class CreateTenantRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTenantRequest> _instance;
} _CreateTenantRequest_default_instance_;
class CreateTenantResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTenantResponse> _instance;
} _CreateTenantResponse_default_instance_;
class UpdateTenantRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateTenantRequest> _instance;
} _UpdateTenantRequest_default_instance_;
class UpdateTenantResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateTenantResponse> _instance;
} _UpdateTenantResponse_default_instance_;
class DeleteTenantRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTenantRequest> _instance;
} _DeleteTenantRequest_default_instance_;
class DeleteTenantResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTenantResponse> _instance;
} _DeleteTenantResponse_default_instance_;
}  // namespace v202407
}  // namespace mkp
}  // namespace kentik
static void InitDefaultsscc_info_Activate_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Activate_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Activate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Activate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Activate_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Activate_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Alert_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Alert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Alert::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Threshold_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Asset_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Asset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Asset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Asset_Report_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_Asset_Report_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Asset_Report_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Asset_Report();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Asset_Report::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Asset_Report_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Asset_Report_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_Condition_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Condition_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Condition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Condition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Condition_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Condition_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_CreatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_CreatePackageRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::CreatePackageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::CreatePackageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_CreatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_CreatePackageResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::CreatePackageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::CreatePackageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_CreateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_CreateTenantRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::CreateTenantRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::CreateTenantRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_CreateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_CreateTenantResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::CreateTenantResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::CreateTenantResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_CustomDimension_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_CustomDimension_default_instance_;
    new (ptr) ::kentik::mkp::v202407::CustomDimension();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::CustomDimension::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomDimension_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CustomDimension_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_DeletePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_DeletePackageRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::DeletePackageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::DeletePackageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_DeletePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_DeletePackageResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::DeletePackageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::DeletePackageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeletePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeletePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_DeleteTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_DeleteTenantRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::DeleteTenantRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::DeleteTenantRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_DeleteTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_DeleteTenantResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::DeleteTenantResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::DeleteTenantResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_Devices_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Devices_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Devices();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Devices::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Devices_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Devices_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_Filter_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Filter_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Filter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Filter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Filter_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Filter_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_FilterField_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_FilterField_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_FilterField_default_instance_;
    new (ptr) ::kentik::mkp::v202407::FilterField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::FilterField::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FilterField_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FilterField_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_GetPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_GetPackageRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::GetPackageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::GetPackageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_GetPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_GetPackageResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::GetPackageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::GetPackageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_GetTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_GetTenantRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::GetTenantRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::GetTenantRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_GetTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_GetTenantResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::GetTenantResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::GetTenantResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_ListPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_ListPackageRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::ListPackageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::ListPackageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_ListPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_ListPackageResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::ListPackageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::ListPackageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_ListTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_ListTenantRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::ListTenantRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::ListTenantRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_ListTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_ListTenantResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::ListTenantResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::ListTenantResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_Mitigation_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Mitigation_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Mitigation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Mitigation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Mitigation_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Mitigation_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_NotificationChannel_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_NotificationChannel_default_instance_;
    new (ptr) ::kentik::mkp::v202407::NotificationChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::NotificationChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NotificationChannel_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NotificationChannel_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Package_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Package();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Package::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_TenantLink_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Tenant_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Tenant();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Tenant::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_CustomDimension_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_Devices_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_Filter_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_User_kentik_2fuser_2fv202211_2fuser_2eproto.base,}};

static void InitDefaultsscc_info_TenantLink_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_TenantLink_default_instance_;
    new (ptr) ::kentik::mkp::v202407::TenantLink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::TenantLink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TenantLink_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TenantLink_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {}};

static void InitDefaultsscc_info_Threshold_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_Threshold_default_instance_;
    new (ptr) ::kentik::mkp::v202407::Threshold();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::Threshold::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Threshold_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Threshold_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Activate_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_Condition_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_Mitigation_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
      &scc_info_NotificationChannel_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_UpdatePackageRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::UpdatePackageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::UpdatePackageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_UpdatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_UpdatePackageResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::UpdatePackageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::UpdatePackageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_UpdateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_UpdateTenantRequest_default_instance_;
    new (ptr) ::kentik::mkp::v202407::UpdateTenantRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::UpdateTenantRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static void InitDefaultsscc_info_UpdateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::mkp::v202407::_UpdateTenantResponse_default_instance_;
    new (ptr) ::kentik::mkp::v202407::UpdateTenantResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::mkp::v202407::UpdateTenantResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto}, {
      &scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fmkp_2fv202407_2fmkp_2eproto[35];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2fmkp_2fv202407_2fmkp_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fmkp_2fv202407_2fmkp_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fmkp_2fv202407_2fmkp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Alert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Alert, saved_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Alert, policy_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Alert, thresholds_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Alert, primary_metric_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Alert, secondary_metrics_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Alert, is_template_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Alert, subpolicy_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Asset_Report, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Asset_Report, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Asset_Report, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Asset, reports_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Asset, default_report_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, activate_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, severity_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, conditions_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, mitigations_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, notification_channels_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, threshold_ack_required_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, enable_tenant_notifications_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Threshold, receive_landlord_notifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Activate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Activate, times_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Activate, operator__),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Activate, time_window_seconds_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Activate, grace_period_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Condition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Condition, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Condition, value_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Condition, metric_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Condition, operator__),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Condition, value_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Condition, value_select_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, company_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, pairing_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, threshold_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, is_method_overridable_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, mitigation_apply_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, mitigation_clear_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, mitigation_apply_timer_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, mitigation_clear_timer_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Mitigation, is_platform_overridable_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::NotificationChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::NotificationChannel, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::TenantLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::TenantLink, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::TenantLink, pivot_template_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::TenantLink, pivot_user_group_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, company_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, icon_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, color_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, alerts_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, assets_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, is_default_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Package, tenants_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CustomDimension, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CustomDimension, dimension_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CustomDimension, populator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Devices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Devices, all_devices_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Devices, device_types_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Devices, device_labels_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Devices, device_sites_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Devices, device_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::FilterField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::FilterField, filter_field_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::FilterField, operator__),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::FilterField, filter_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, named_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, connector_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, not__),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, auto_added_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, saved_filters_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, filters_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, filter_groups_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Filter, metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, company_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, enabled_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, alerts_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, assets_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, cidr_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, custom_dimensions_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, devices_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, filters_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, interface_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, snmp_alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, packages_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, users_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::Tenant, template_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::ListPackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::ListPackageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::ListPackageResponse, packages_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::ListPackageResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::GetPackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::GetPackageRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::GetPackageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::GetPackageResponse, package_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CreatePackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CreatePackageRequest, package_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CreatePackageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CreatePackageResponse, package_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::UpdatePackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::UpdatePackageRequest, package_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::UpdatePackageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::UpdatePackageResponse, package_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::DeletePackageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::DeletePackageRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::DeletePackageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::ListTenantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::ListTenantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::ListTenantResponse, tenants_),
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::ListTenantResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::GetTenantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::GetTenantRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::GetTenantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::GetTenantResponse, tenant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CreateTenantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CreateTenantRequest, tenant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CreateTenantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::CreateTenantResponse, tenant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::UpdateTenantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::UpdateTenantRequest, tenant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::UpdateTenantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::UpdateTenantResponse, tenant_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::DeleteTenantRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::DeleteTenantRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::mkp::v202407::DeleteTenantResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::mkp::v202407::Alert)},
  { 12, -1, sizeof(::kentik::mkp::v202407::Asset_Report)},
  { 19, -1, sizeof(::kentik::mkp::v202407::Asset)},
  { 26, -1, sizeof(::kentik::mkp::v202407::Threshold)},
  { 40, -1, sizeof(::kentik::mkp::v202407::Activate)},
  { 49, -1, sizeof(::kentik::mkp::v202407::Condition)},
  { 60, -1, sizeof(::kentik::mkp::v202407::Mitigation)},
  { 76, -1, sizeof(::kentik::mkp::v202407::NotificationChannel)},
  { 82, -1, sizeof(::kentik::mkp::v202407::TenantLink)},
  { 90, -1, sizeof(::kentik::mkp::v202407::Package)},
  { 105, -1, sizeof(::kentik::mkp::v202407::CustomDimension)},
  { 112, -1, sizeof(::kentik::mkp::v202407::Devices)},
  { 122, -1, sizeof(::kentik::mkp::v202407::FilterField)},
  { 130, -1, sizeof(::kentik::mkp::v202407::Filter)},
  { 144, -1, sizeof(::kentik::mkp::v202407::Tenant)},
  { 167, -1, sizeof(::kentik::mkp::v202407::ListPackageRequest)},
  { 172, -1, sizeof(::kentik::mkp::v202407::ListPackageResponse)},
  { 179, -1, sizeof(::kentik::mkp::v202407::GetPackageRequest)},
  { 185, -1, sizeof(::kentik::mkp::v202407::GetPackageResponse)},
  { 191, -1, sizeof(::kentik::mkp::v202407::CreatePackageRequest)},
  { 197, -1, sizeof(::kentik::mkp::v202407::CreatePackageResponse)},
  { 203, -1, sizeof(::kentik::mkp::v202407::UpdatePackageRequest)},
  { 209, -1, sizeof(::kentik::mkp::v202407::UpdatePackageResponse)},
  { 215, -1, sizeof(::kentik::mkp::v202407::DeletePackageRequest)},
  { 221, -1, sizeof(::kentik::mkp::v202407::DeletePackageResponse)},
  { 226, -1, sizeof(::kentik::mkp::v202407::ListTenantRequest)},
  { 231, -1, sizeof(::kentik::mkp::v202407::ListTenantResponse)},
  { 238, -1, sizeof(::kentik::mkp::v202407::GetTenantRequest)},
  { 244, -1, sizeof(::kentik::mkp::v202407::GetTenantResponse)},
  { 250, -1, sizeof(::kentik::mkp::v202407::CreateTenantRequest)},
  { 256, -1, sizeof(::kentik::mkp::v202407::CreateTenantResponse)},
  { 262, -1, sizeof(::kentik::mkp::v202407::UpdateTenantRequest)},
  { 268, -1, sizeof(::kentik::mkp::v202407::UpdateTenantResponse)},
  { 274, -1, sizeof(::kentik::mkp::v202407::DeleteTenantRequest)},
  { 280, -1, sizeof(::kentik::mkp::v202407::DeleteTenantResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Alert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Asset_Report_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Threshold_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Activate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Condition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Mitigation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_NotificationChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_TenantLink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Package_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_CustomDimension_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Devices_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_FilterField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_Tenant_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_ListPackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_ListPackageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_GetPackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_GetPackageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_CreatePackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_CreatePackageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_UpdatePackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_UpdatePackageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_DeletePackageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_DeletePackageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_ListTenantRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_ListTenantResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_GetTenantRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_GetTenantResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_CreateTenantRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_CreateTenantResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_UpdateTenantRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_UpdateTenantResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_DeleteTenantRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::mkp::v202407::_DeleteTenantResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fmkp_2fv202407_2fmkp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034kentik/mkp/v202407/mkp.proto\022\022kentik.m"
  "kp.v202407\032\034google/api/annotations.proto"
  "\032\027google/api/client.proto\032\037google/api/fi"
  "eld_behavior.proto\032.protoc-gen-openapiv2"
  "/options/annotations.proto\032%kentik/core/"
  "v202303/annotations.proto\032\036kentik/user/v"
  "202211/user.proto\"\221\002\n\005Alert\022\024\n\005saved\030\001 \001"
  "(\010R\005saved\022\033\n\tpolicy_id\030\002 \001(\tR\010policyId\022="
  "\n\nthresholds\030\003 \003(\0132\035.kentik.mkp.v202407."
  "ThresholdR\nthresholds\022%\n\016primary_metric\030"
  "\004 \001(\tR\rprimaryMetric\022+\n\021secondary_metric"
  "s\030\005 \003(\tR\020secondaryMetrics\022\037\n\013is_template"
  "\030\006 \001(\010R\nisTemplate\022!\n\014subpolicy_id\030\007 \001(\t"
  "R\013subpolicyId\"\272\001\n\005Asset\022:\n\007reports\030\001 \003(\013"
  "2 .kentik.mkp.v202407.Asset.ReportR\007repo"
  "rts\022G\n\016default_report\030\002 \001(\0132 .kentik.mkp"
  ".v202407.Asset.ReportR\rdefaultReport\032,\n\006"
  "Report\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004type\030\002 \001(\tR\004ty"
  "pe\"\214\004\n\tThreshold\022\016\n\002id\030\001 \001(\tR\002id\0228\n\010acti"
  "vate\030\002 \001(\0132\034.kentik.mkp.v202407.Activate"
  "R\010activate\022\032\n\010severity\030\003 \001(\tR\010severity\022="
  "\n\nconditions\030\004 \003(\0132\035.kentik.mkp.v202407."
  "ConditionR\nconditions\022@\n\013mitigations\030\005 \003"
  "(\0132\036.kentik.mkp.v202407.MitigationR\013miti"
  "gations\022\\\n\025notification_channels\030\006 \003(\0132\'"
  ".kentik.mkp.v202407.NotificationChannelR"
  "\024notificationChannels\0224\n\026threshold_ack_r"
  "equired\030\007 \001(\010R\024thresholdAckRequired\022>\n\033e"
  "nable_tenant_notifications\030\010 \001(\010R\031enable"
  "TenantNotifications\022D\n\036receive_landlord_"
  "notifications\030\t \001(\010R\034receiveLandlordNoti"
  "fications\"\236\001\n\010Activate\022\024\n\005times\030\001 \001(\rR\005t"
  "imes\022\032\n\010operator\030\002 \001(\tR\010operator\022.\n\023time"
  "_window_seconds\030\003 \001(\rR\021timeWindowSeconds"
  "\0220\n\024grace_period_seconds\030\004 \001(\rR\022gracePer"
  "iodSeconds\"\253\001\n\tCondition\022\022\n\004type\030\001 \001(\tR\004"
  "type\022\024\n\005value\030\002 \001(\tR\005value\022\026\n\006metric\030\003 \001"
  "(\tR\006metric\022\032\n\010operator\030\004 \001(\tR\010operator\022\035"
  "\n\nvalue_type\030\005 \001(\tR\tvalueType\022!\n\014value_s"
  "elect\030\006 \001(\tR\013valueSelect\"\325\003\n\nMitigation\022"
  "\016\n\002id\030\r \001(\tR\002id\022\026\n\006status\030\001 \001(\tR\006status\022"
  "\035\n\ncompany_id\030\002 \001(\tR\tcompanyId\022\035\n\npairin"
  "g_id\030\003 \001(\tR\tpairingId\022!\n\014threshold_id\030\004 "
  "\001(\tR\013thresholdId\0222\n\025is_method_overridabl"
  "e\030\005 \001(\010R\023isMethodOverridable\0222\n\025mitigati"
  "on_apply_type\030\006 \001(\tR\023mitigationApplyType"
  "\0222\n\025mitigation_clear_type\030\007 \001(\tR\023mitigat"
  "ionClearType\0224\n\026mitigation_apply_timer\030\010"
  " \001(\rR\024mitigationApplyTimer\0224\n\026mitigation"
  "_clear_timer\030\t \001(\rR\024mitigationClearTimer"
  "\0226\n\027is_platform_overridable\030\n \001(\010R\025isPla"
  "tformOverridable\"%\n\023NotificationChannel\022"
  "\016\n\002id\030\001 \001(\tR\002id\"w\n\nTenantLink\022\016\n\002id\030\001 \001("
  "\tR\002id\022*\n\021pivot_template_id\030\002 \001(\tR\017pivotT"
  "emplateId\022-\n\023pivot_user_group_id\030\003 \001(\tR\020"
  "pivotUserGroupId\"\344\005\n\007Package\022I\n\002id\030\001 \001(\t"
  "B9\222A220Unique system assigned identifier"
  " of the package\342A\001\003R\002id\022L\n\ncompany_id\030\002 "
  "\001(\tB-\222A&2$Company id of the associated p"
  "ackage\342A\001\003R\tcompanyId\0225\n\004name\030\003 \001(\tB!\222A\032"
  "2\030Name of package template\342A\001\003R\004name\022J\n\013"
  "description\030\004 \001(\tB(\222A!2\037Description of p"
  "ackage template\342A\001\003R\013description\022,\n\004icon"
  "\030\005 \001(\tB\030\222A\0212\017Icon to display\342A\001\003R\004icon\022,"
  "\n\005color\030\006 \001(\tB\026\222A\0172\rColor of Icon\342A\001\003R\005c"
  "olor\022Y\n\006alerts\030\007 \003(\0132\031.kentik.mkp.v20240"
  "7.AlertB&\222A\0372\035Alert thresholds and polic"
  "ies\342A\001\003R\006alerts\022m\n\006assets\030\010 \001(\0132\031.kentik"
  ".mkp.v202407.AssetB:\222A321Views and Dashb"
  "oards associated with the package.\342A\001\003R\006"
  "assets\022;\n\nis_default\030\t \001(\010B\034\222A\0252\023Is defa"
  "ult template\342A\001\003R\tisDefault\022Z\n\007tenants\030\n"
  " \003(\0132\036.kentik.mkp.v202407.TenantLinkB \222A"
  "\0312\027Tenant link information\342A\001\003R\007tenants\""
  "M\n\017CustomDimension\022\034\n\tdimension\030\001 \001(\tR\td"
  "imension\022\034\n\tpopulator\030\002 \001(\tR\tpopulator\"\266"
  "\001\n\007Devices\022\037\n\013all_devices\030\001 \001(\010R\nallDevi"
  "ces\022!\n\014device_types\030\002 \003(\tR\013deviceTypes\022#"
  "\n\rdevice_labels\030\003 \003(\rR\014deviceLabels\022!\n\014d"
  "evice_sites\030\004 \003(\rR\013deviceSites\022\037\n\013device"
  "_name\030\005 \003(\tR\ndeviceName\"o\n\013FilterField\022!"
  "\n\014filter_field\030\001 \001(\tR\013filterField\022\032\n\010ope"
  "rator\030\002 \001(\tR\010operator\022!\n\014filter_value\030\003 "
  "\001(\tR\013filterValue\"\272\002\n\006Filter\022\022\n\004name\030\001 \001("
  "\tR\004name\022\024\n\005named\030\002 \001(\010R\005named\022\034\n\tconnect"
  "or\030\003 \001(\tR\tconnector\022\020\n\003not\030\004 \001(\010R\003not\022\035\n"
  "\nauto_added\030\005 \001(\tR\tautoAdded\022#\n\rsaved_fi"
  "lters\030\006 \003(\tR\014savedFilters\0229\n\007filters\030\007 \003"
  "(\0132\037.kentik.mkp.v202407.FilterFieldR\007fil"
  "ters\022\?\n\rfilter_groups\030\010 \003(\0132\032.kentik.mkp"
  ".v202407.FilterR\014filterGroups\022\026\n\006metric\030"
  "\t \003(\tR\006metric\"\333\n\n\006Tenant\022H\n\002id\030\001 \001(\tB8\222A"
  "12/Unique system assigned identifier of "
  "the tenant\342A\001\003R\002id\022L\n\ncompany_id\030\002 \001(\tB-"
  "\222A&2$Company id of the associated packag"
  "e\342A\001\003R\tcompanyId\022+\n\004name\030\003 \001(\tB\027\222A\0202\016Nam"
  "e of tenant\342A\001\003R\004name\022@\n\013description\030\004 \001"
  "(\tB\036\222A\0272\025Description of tenant\342A\001\003R\013desc"
  "ription\022&\n\004type\030\005 \001(\tB\022\222A\0132\tSubtenant\342A\001"
  "\003R\004type\022<\n\007enabled\030\006 \001(\010B\"\222A\0332\031Is tenant"
  " actively enable\342A\001\003R\007enabled\022Y\n\006alerts\030"
  "\007 \003(\0132\031.kentik.mkp.v202407.AlertB&\222A\0372\035A"
  "lert thresholds and policies\342A\001\003R\006alerts"
  "\022k\n\006assets\030\017 \001(\0132\031.kentik.mkp.v202407.As"
  "setB8\222A12/Views and Dashboards associate"
  "d with the tenant\342A\001\003R\006assets\022+\n\003asn\030\010 \001"
  "(\tB\031\222A\0222\020ASN data source.\342A\001\003R\003asn\022.\n\004ci"
  "dr\030\t \001(\tB\032\222A\0232\021CIDR data source.\342A\001\003R\004ci"
  "dr\022w\n\021custom_dimensions\030\n \003(\0132#.kentik.m"
  "kp.v202407.CustomDimensionB%\222A\0362\034Custom "
  "dimension data source\342A\001\003R\020customDimensi"
  "ons\022S\n\007devices\030\013 \001(\0132\033.kentik.mkp.v20240"
  "7.DevicesB\034\222A\0252\023Device data source.\342A\001\003R"
  "\007devices\022S\n\007filters\030\014 \001(\0132\032.kentik.mkp.v"
  "202407.FilterB\035\222A\0262\024Data source filters."
  "\342A\001\003R\007filters\022F\n\016interface_name\030\r \001(\tB\037\222"
  "A\0302\026Interface data source.\342A\001\003R\rinterfac"
  "eName\0229\n\nsnmp_alias\030\016 \001(\tB\032\222A\0232\021SNMP dat"
  "a source.\342A\001\003R\tsnmpAlias\022f\n\010packages\030\020 \003"
  "(\0132\033.kentik.mkp.v202407.PackageB-\222A&2$Pa"
  "ckages associated with the tenant.\342A\001\003R\010"
  "packages\022[\n\005users\030\021 \003(\0132\031.kentik.user.v2"
  "02211.UserB*\222A#2!Users associated with t"
  "he tenant.\342A\001\003R\005users\022T\n\013template_id\030\022 \001"
  "(\tB3\222A,2*Package template ID to assign w"
  "ith tenant.\342A\001\003R\ntemplateId\"\024\n\022ListPacka"
  "geRequest\"s\n\023ListPackageResponse\0227\n\010pack"
  "ages\030\001 \003(\0132\033.kentik.mkp.v202407.PackageR"
  "\010packages\022#\n\rinvalid_count\030\002 \001(\rR\014invali"
  "dCount\"#\n\021GetPackageRequest\022\016\n\002id\030\001 \001(\tR"
  "\002id\"K\n\022GetPackageResponse\0225\n\007package\030\001 \001"
  "(\0132\033.kentik.mkp.v202407.PackageR\007package"
  "\"M\n\024CreatePackageRequest\0225\n\007package\030\001 \001("
  "\0132\033.kentik.mkp.v202407.PackageR\007package\""
  "N\n\025CreatePackageResponse\0225\n\007package\030\001 \001("
  "\0132\033.kentik.mkp.v202407.PackageR\007package\""
  "M\n\024UpdatePackageRequest\0225\n\007package\030\001 \001(\013"
  "2\033.kentik.mkp.v202407.PackageR\007package\"N"
  "\n\025UpdatePackageResponse\0225\n\007package\030\001 \001(\013"
  "2\033.kentik.mkp.v202407.PackageR\007package\"&"
  "\n\024DeletePackageRequest\022\016\n\002id\030\001 \001(\tR\002id\"\027"
  "\n\025DeletePackageResponse\"\023\n\021ListTenantReq"
  "uest\"o\n\022ListTenantResponse\0224\n\007tenants\030\001 "
  "\003(\0132\032.kentik.mkp.v202407.TenantR\007tenants"
  "\022#\n\rinvalid_count\030\002 \001(\rR\014invalidCount\"\"\n"
  "\020GetTenantRequest\022\016\n\002id\030\001 \001(\tR\002id\"G\n\021Get"
  "TenantResponse\0222\n\006tenant\030\001 \001(\0132\032.kentik."
  "mkp.v202407.TenantR\006tenant\"I\n\023CreateTena"
  "ntRequest\0222\n\006tenant\030\001 \001(\0132\032.kentik.mkp.v"
  "202407.TenantR\006tenant\"J\n\024CreateTenantRes"
  "ponse\0222\n\006tenant\030\001 \001(\0132\032.kentik.mkp.v2024"
  "07.TenantR\006tenant\"I\n\023UpdateTenantRequest"
  "\0222\n\006tenant\030\001 \001(\0132\032.kentik.mkp.v202407.Te"
  "nantR\006tenant\"J\n\024UpdateTenantResponse\0222\n\006"
  "tenant\030\001 \001(\0132\032.kentik.mkp.v202407.Tenant"
  "R\006tenant\"%\n\023DeleteTenantRequest\022\016\n\002id\030\001 "
  "\001(\tR\002id\"\026\n\024DeleteTenantResponse2\367\t\n\016Pack"
  "ageService\022\324\001\n\013ListPackage\022&.kentik.mkp."
  "v202407.ListPackageRequest\032\'.kentik.mkp."
  "v202407.ListPackageResponse\"t\222AB\022\022List M"
  "KP packages.\032\037Returns a list of MKP pack"
  "ages.*\013PackageList\362\327\002\016admin.mkp:read\202\323\344\223"
  "\002\027\022\025/mkp/v202407/packages\022\372\001\n\nGetPackage"
  "\022%.kentik.mkp.v202407.GetPackageRequest\032"
  "&.kentik.mkp.v202407.GetPackageResponse\""
  "\234\001\222Ae\022!Get information aboout a package."
  "\0324Returns information about package spec"
  "ified with ID.*\nPackageGet\362\327\002\016admin.mkp:"
  "read\202\323\344\223\002\034\022\032/mkp/v202407/packages/{id}\022\377"
  "\001\n\rCreatePackage\022(.kentik.mkp.v202407.Cr"
  "eatePackageRequest\032).kentik.mkp.v202407."
  "CreatePackageResponse\"\230\001\222Ab\022\032Create a pa"
  "ckage template.\0325Create package from req"
  "uest. returns created package.*\rPackageC"
  "reate\362\327\002\017admin.mkp:write\202\323\344\223\002\032\"\025/mkp/v20"
  "2407/packages:\001*\022\372\001\n\rUpdatePackage\022(.ken"
  "tik.mkp.v202407.UpdatePackageRequest\032).k"
  "entik.mkp.v202407.UpdatePackageResponse\""
  "\223\001\222AP\022\021Update a package.\032,Update package"
  " attributes specified with id.*\rPackageU"
  "pdate\362\327\002\017admin.mkp:write\202\323\344\223\002\'\032\"/mkp/v20"
  "2407/packages/{package.id}:\001*\022\351\001\n\rDelete"
  "Package\022(.kentik.mkp.v202407.DeletePacka"
  "geRequest\032).kentik.mkp.v202407.DeletePac"
  "kageResponse\"\202\001\222AJ\022\021Delete a package.\032&D"
  "eletes the package specified with id.*\rP"
  "ackageDelete\362\327\002\017admin.mkp:write\202\323\344\223\002\034*\032/"
  "mkp/v202407/packages/{id}\032&\312A\022mkp.api.ke"
  "ntik.com\352\327\002\tadmin.mkp\220\330\002\0032\310\t\n\rTenantServ"
  "ice\022\315\001\n\nListTenant\022%.kentik.mkp.v202407."
  "ListTenantRequest\032&.kentik.mkp.v202407.L"
  "istTenantResponse\"p\222A\?\022\021List MKP tenants"
  ".\032\036Returns a list of MKP tenants.*\nTenan"
  "tList\362\327\002\016admin.mkp:read\202\323\344\223\002\026\022\024/mkp/v202"
  "407/tenants\022\364\001\n\tGetTenant\022$.kentik.mkp.v"
  "202407.GetTenantRequest\032%.kentik.mkp.v20"
  "2407.GetTenantResponse\"\231\001\222Ac\022 Get inform"
  "ation aboout a tenant.\0324Returns informat"
  "ion about package specified with ID.*\tTe"
  "nantGet\362\327\002\016admin.mkp:read\202\323\344\223\002\033\022\031/mkp/v2"
  "02407/tenants/{id}\022\356\001\n\014CreateTenant\022\'.ke"
  "ntik.mkp.v202407.CreateTenantRequest\032(.k"
  "entik.mkp.v202407.CreateTenantResponse\"\212"
  "\001\222AU\022\020Create a tenant.\0323Create tenant fr"
  "om request. returns created tenant.*\014Ten"
  "antCreate\362\327\002\017admin.mkp:write\202\323\344\223\002\031\"\024/mkp"
  "/v202407/tenants:\001*\022\362\001\n\014UpdateTenant\022\'.k"
  "entik.mkp.v202407.UpdateTenantRequest\032(."
  "kentik.mkp.v202407.UpdateTenantResponse\""
  "\216\001\222AM\022\020Update a tenant.\032+Update tenant a"
  "ttributes specified with id.*\014TenantUpda"
  "te\362\327\002\017admin.mkp:write\202\323\344\223\002%\032 /mkp/v20240"
  "7/tenants/{tenant.id}:\001*\022\341\001\n\014DeleteTenan"
  "t\022\'.kentik.mkp.v202407.DeleteTenantReque"
  "st\032(.kentik.mkp.v202407.DeleteTenantResp"
  "onse\"~\222AG\022\020Delete a tenant.\032%Deletes the"
  " tenant specified with id.*\014TenantDelete"
  "\362\327\002\017admin.mkp:write\202\323\344\223\002\033*\031/mkp/v202407/"
  "tenants/{id}\032&\312A\022mkp.api.kentik.com\352\327\002\ta"
  "dmin.mkp\220\330\002\003B\241\023ZAgithub.com/kentik/api-s"
  "chema-public/gen/go/kentik/mkp/v202407;m"
  "kp\222A\332\022\022\233\021\n\007MKP API\022\277\020# Overview\nMy Kenti"
  "k Portal API enables programmatic access"
  " to tenants and package templates.\n| End"
  "point | Purpose |\n|-----------|---------"
  "|\n| TenantService  | CRUD operations for"
  " MKP tenants. |\n| PackageService | CRUD "
  "operations for MKP templates. |\n\nBoth RE"
  "ST endpoint and gRPC RPCs are provided.\n"
  "\n\n # Tenant Attributes and Settings\n| At"
  "tribute | Access | Purpose |\n|----------"
  "-|--------|---------|\n| id | RO | System"
  "-generated unique identifier of the tena"
  "nt |\n| company_id | RO | System-generate"
  "d unique identifier of the company |\n| n"
  "ame | RW | User specified name for the t"
  "enant |\n| description | RW | User specif"
  "ied description for the tenant |\n| type "
  "| RO | subtenant |\n| enabled | RW | User"
  " specified tenant active status |\n| cdat"
  "e | RO | Creation timestamp |\n| edate | "
  "RO | Last-modification timestamp |\n| ale"
  "rts | RO | Alert policy configurations |"
  "\n| assets | RW | dashboard, views, and t"
  "emplates associate with tenant |\n| asn |"
  " RW | ASN data source |\n| cidr | RW | CI"
  "DR data source |\n| custom_dimensions | R"
  "W | Custom dimension data source |\n| dev"
  "ices | RW | Devices data source |\n| filt"
  "ers | RW | Data source filters |\n| inter"
  "face_name | RW | Interface source filter"
  "s |\n| snmp_alias | RW | SNMP source filt"
  "ers |\n| packages | RO | Package template"
  "s use by the tenant |\n| users | RO | Use"
  "rs assign to the tenant |\n| template_id "
  "| WO | Update tenant\'s packages setting "
  "with package/template id |\n\n\n # Package "
  "Attributes and Settings\n| Attribute | Ac"
  "cess | Purpose |\n|-----------|--------|-"
  "--------|\n| id | RO | System-generated u"
  "nique identifier of the package |\n| comp"
  "any_id | RO | System-generated unique id"
  "entifier of the company |\n| name | RW | "
  "User specified name for the package temp"
  "late |\n| description | RW | User specifi"
  "ed description for the package template "
  "|\n| icon | RO | User specified icon |\n| "
  "color | RW | User specified color of ico"
  "n |\n| alerts | RO | Alert policy configu"
  "rations |\n| assets | RW | dashboard, vie"
  "ws, and templates associate with tenant "
  "|\n| is_default | RW | Default package te"
  "mplate to include for new tenant |\n| ten"
  "ants | RO | Tenants using this package t"
  "emplate |\n\n\n\"E\n\026Kentik API Engineering\022+"
  "https://github.com/kentik/api-schema-pub"
  "lic2\007v202407*\001\0022\020application/json:\020appli"
  "cation/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Em"
  "ail \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Token "
  "\002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r5\n\026More about "
  "Kentik APIs\022\033https://docs.kentik.com/api"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fmkp_2fv202407_2fmkp_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_kentik_2fuser_2fv202211_2fuser_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fmkp_2fv202407_2fmkp_2eproto_sccs[35] = {
  &scc_info_Activate_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Asset_Report_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Condition_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_CreatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_CreatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_CreateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_CreateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_CustomDimension_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_DeletePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_DeletePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_DeleteTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_DeleteTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Devices_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Filter_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_FilterField_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_GetPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_GetPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_GetTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_GetTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_ListPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_ListPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_ListTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_ListTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Mitigation_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_NotificationChannel_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_TenantLink_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_Threshold_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_UpdatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_UpdatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_UpdateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
  &scc_info_UpdateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fmkp_2fv202407_2fmkp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fmkp_2fv202407_2fmkp_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fmkp_2fv202407_2fmkp_2eproto, "kentik/mkp/v202407/mkp.proto", 11248,
  &descriptor_table_kentik_2fmkp_2fv202407_2fmkp_2eproto_once, descriptor_table_kentik_2fmkp_2fv202407_2fmkp_2eproto_sccs, descriptor_table_kentik_2fmkp_2fv202407_2fmkp_2eproto_deps, 35, 6,
  schemas, file_default_instances, TableStruct_kentik_2fmkp_2fv202407_2fmkp_2eproto::offsets,
  file_level_metadata_kentik_2fmkp_2fv202407_2fmkp_2eproto, 35, file_level_enum_descriptors_kentik_2fmkp_2fv202407_2fmkp_2eproto, file_level_service_descriptors_kentik_2fmkp_2fv202407_2fmkp_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fmkp_2fv202407_2fmkp_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fmkp_2fv202407_2fmkp_2eproto)), true);
namespace kentik {
namespace mkp {
namespace v202407 {

// ===================================================================

void Alert::InitAsDefaultInstance() {
}
class Alert::_Internal {
 public:
};

Alert::Alert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  thresholds_(arena),
  secondary_metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Alert)
}
Alert::Alert(const Alert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      thresholds_(from.thresholds_),
      secondary_metrics_(from.secondary_metrics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_policy_id().empty()) {
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_policy_id(),
      GetArena());
  }
  primary_metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_primary_metric().empty()) {
    primary_metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_primary_metric(),
      GetArena());
  }
  subpolicy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subpolicy_id().empty()) {
    subpolicy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subpolicy_id(),
      GetArena());
  }
  ::memcpy(&saved_, &from.saved_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_template_) -
    reinterpret_cast<char*>(&saved_)) + sizeof(is_template_));
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Alert)
}

void Alert::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subpolicy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&saved_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_template_) -
      reinterpret_cast<char*>(&saved_)) + sizeof(is_template_));
}

Alert::~Alert() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Alert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Alert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  policy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  primary_metric_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subpolicy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Alert::ArenaDtor(void* object) {
  Alert* _this = reinterpret_cast< Alert* >(object);
  (void)_this;
}
void Alert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Alert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Alert& Alert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Alert_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Alert::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Alert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  thresholds_.Clear();
  secondary_metrics_.Clear();
  policy_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  primary_metric_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subpolicy_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&saved_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_template_) -
      reinterpret_cast<char*>(&saved_)) + sizeof(is_template_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool saved = 1[json_name = "saved"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          saved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string policy_id = 2[json_name = "policyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_policy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Alert.policy_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.Threshold thresholds = 3[json_name = "thresholds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_thresholds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string primary_metric = 4[json_name = "primaryMetric"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_primary_metric();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Alert.primary_metric"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string secondary_metrics = 5[json_name = "secondaryMetrics"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_secondary_metrics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Alert.secondary_metrics"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_template = 6[json_name = "isTemplate"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_template_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subpolicy_id = 7[json_name = "subpolicyId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_subpolicy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Alert.subpolicy_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Alert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Alert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool saved = 1[json_name = "saved"];
  if (this->saved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_saved(), target);
  }

  // string policy_id = 2[json_name = "policyId"];
  if (this->policy_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy_id().data(), static_cast<int>(this->_internal_policy_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Alert.policy_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_policy_id(), target);
  }

  // repeated .kentik.mkp.v202407.Threshold thresholds = 3[json_name = "thresholds"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_thresholds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_thresholds(i), target, stream);
  }

  // string primary_metric = 4[json_name = "primaryMetric"];
  if (this->primary_metric().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_primary_metric().data(), static_cast<int>(this->_internal_primary_metric().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Alert.primary_metric");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_primary_metric(), target);
  }

  // repeated string secondary_metrics = 5[json_name = "secondaryMetrics"];
  for (int i = 0, n = this->_internal_secondary_metrics_size(); i < n; i++) {
    const auto& s = this->_internal_secondary_metrics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Alert.secondary_metrics");
    target = stream->WriteString(5, s, target);
  }

  // bool is_template = 6[json_name = "isTemplate"];
  if (this->is_template() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_template(), target);
  }

  // string subpolicy_id = 7[json_name = "subpolicyId"];
  if (this->subpolicy_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subpolicy_id().data(), static_cast<int>(this->_internal_subpolicy_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Alert.subpolicy_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_subpolicy_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Alert)
  return target;
}

size_t Alert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Alert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Threshold thresholds = 3[json_name = "thresholds"];
  total_size += 1UL * this->_internal_thresholds_size();
  for (const auto& msg : this->thresholds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string secondary_metrics = 5[json_name = "secondaryMetrics"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(secondary_metrics_.size());
  for (int i = 0, n = secondary_metrics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      secondary_metrics_.Get(i));
  }

  // string policy_id = 2[json_name = "policyId"];
  if (this->policy_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policy_id());
  }

  // string primary_metric = 4[json_name = "primaryMetric"];
  if (this->primary_metric().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_primary_metric());
  }

  // string subpolicy_id = 7[json_name = "subpolicyId"];
  if (this->subpolicy_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subpolicy_id());
  }

  // bool saved = 1[json_name = "saved"];
  if (this->saved() != 0) {
    total_size += 1 + 1;
  }

  // bool is_template = 6[json_name = "isTemplate"];
  if (this->is_template() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Alert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Alert)
  GOOGLE_DCHECK_NE(&from, this);
  const Alert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Alert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Alert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Alert)
    MergeFrom(*source);
  }
}

void Alert::MergeFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Alert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  thresholds_.MergeFrom(from.thresholds_);
  secondary_metrics_.MergeFrom(from.secondary_metrics_);
  if (from.policy_id().size() > 0) {
    _internal_set_policy_id(from._internal_policy_id());
  }
  if (from.primary_metric().size() > 0) {
    _internal_set_primary_metric(from._internal_primary_metric());
  }
  if (from.subpolicy_id().size() > 0) {
    _internal_set_subpolicy_id(from._internal_subpolicy_id());
  }
  if (from.saved() != 0) {
    _internal_set_saved(from._internal_saved());
  }
  if (from.is_template() != 0) {
    _internal_set_is_template(from._internal_is_template());
  }
}

void Alert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Alert::CopyFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {
  return true;
}

void Alert::InternalSwap(Alert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  thresholds_.InternalSwap(&other->thresholds_);
  secondary_metrics_.InternalSwap(&other->secondary_metrics_);
  policy_id_.Swap(&other->policy_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  primary_metric_.Swap(&other->primary_metric_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  subpolicy_id_.Swap(&other->subpolicy_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Alert, is_template_)
      + sizeof(Alert::is_template_)
      - PROTOBUF_FIELD_OFFSET(Alert, saved_)>(
          reinterpret_cast<char*>(&saved_),
          reinterpret_cast<char*>(&other->saved_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Alert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Asset_Report::InitAsDefaultInstance() {
}
class Asset_Report::_Internal {
 public:
};

Asset_Report::Asset_Report(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Asset.Report)
}
Asset_Report::Asset_Report(const Asset_Report& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Asset.Report)
}

void Asset_Report::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Asset_Report_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Asset_Report::~Asset_Report() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Asset.Report)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Asset_Report::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset_Report::ArenaDtor(void* object) {
  Asset_Report* _this = reinterpret_cast< Asset_Report* >(object);
  (void)_this;
}
void Asset_Report::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset_Report::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Asset_Report& Asset_Report::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Asset_Report_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Asset_Report::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Asset.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset_Report::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Asset.Report.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2[json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Asset.Report.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Asset_Report::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Asset.Report)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Asset.Report.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string type = 2[json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Asset.Report.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Asset.Report)
  return target;
}

size_t Asset_Report::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Asset.Report)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string type = 2[json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Asset_Report::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Asset.Report)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset_Report* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Asset_Report>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Asset.Report)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Asset.Report)
    MergeFrom(*source);
  }
}

void Asset_Report::MergeFrom(const Asset_Report& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Asset.Report)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
}

void Asset_Report::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Asset.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset_Report::CopyFrom(const Asset_Report& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Asset.Report)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset_Report::IsInitialized() const {
  return true;
}

void Asset_Report::InternalSwap(Asset_Report* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset_Report::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Asset::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_Asset_default_instance_._instance.get_mutable()->default_report_ = const_cast< ::kentik::mkp::v202407::Asset_Report*>(
      ::kentik::mkp::v202407::Asset_Report::internal_default_instance());
}
class Asset::_Internal {
 public:
  static const ::kentik::mkp::v202407::Asset_Report& default_report(const Asset* msg);
};

const ::kentik::mkp::v202407::Asset_Report&
Asset::_Internal::default_report(const Asset* msg) {
  return *msg->default_report_;
}
Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reports_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reports_(from.reports_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_default_report()) {
    default_report_ = new ::kentik::mkp::v202407::Asset_Report(*from.default_report_);
  } else {
    default_report_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Asset)
}

void Asset::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  default_report_ = nullptr;
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Asset)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete default_report_;
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Asset& Asset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Asset_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reports_.Clear();
  if (GetArena() == nullptr && default_report_ != nullptr) {
    delete default_report_;
  }
  default_report_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.mkp.v202407.Asset.Report reports = 1[json_name = "reports"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reports(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.mkp.v202407.Asset.Report default_report = 2[json_name = "defaultReport"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_report(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Asset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Asset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Asset.Report reports = 1[json_name = "reports"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reports_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_reports(i), target, stream);
  }

  // .kentik.mkp.v202407.Asset.Report default_report = 2[json_name = "defaultReport"];
  if (this->has_default_report()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::default_report(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Asset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Asset.Report reports = 1[json_name = "reports"];
  total_size += 1UL * this->_internal_reports_size();
  for (const auto& msg : this->reports_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kentik.mkp.v202407.Asset.Report default_report = 2[json_name = "defaultReport"];
  if (this->has_default_report()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_report_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Asset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  const Asset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Asset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Asset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Asset)
    MergeFrom(*source);
  }
}

void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reports_.MergeFrom(from.reports_);
  if (from.has_default_report()) {
    _internal_mutable_default_report()->::kentik::mkp::v202407::Asset_Report::MergeFrom(from._internal_default_report());
  }
}

void Asset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reports_.InternalSwap(&other->reports_);
  swap(default_report_, other->default_report_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Threshold::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_Threshold_default_instance_._instance.get_mutable()->activate_ = const_cast< ::kentik::mkp::v202407::Activate*>(
      ::kentik::mkp::v202407::Activate::internal_default_instance());
}
class Threshold::_Internal {
 public:
  static const ::kentik::mkp::v202407::Activate& activate(const Threshold* msg);
};

const ::kentik::mkp::v202407::Activate&
Threshold::_Internal::activate(const Threshold* msg) {
  return *msg->activate_;
}
Threshold::Threshold(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  conditions_(arena),
  mitigations_(arena),
  notification_channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Threshold)
}
Threshold::Threshold(const Threshold& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      conditions_(from.conditions_),
      mitigations_(from.mitigations_),
      notification_channels_(from.notification_channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  severity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_severity().empty()) {
    severity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_severity(),
      GetArena());
  }
  if (from._internal_has_activate()) {
    activate_ = new ::kentik::mkp::v202407::Activate(*from.activate_);
  } else {
    activate_ = nullptr;
  }
  ::memcpy(&threshold_ack_required_, &from.threshold_ack_required_,
    static_cast<size_t>(reinterpret_cast<char*>(&receive_landlord_notifications_) -
    reinterpret_cast<char*>(&threshold_ack_required_)) + sizeof(receive_landlord_notifications_));
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Threshold)
}

void Threshold::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Threshold_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  severity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&activate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receive_landlord_notifications_) -
      reinterpret_cast<char*>(&activate_)) + sizeof(receive_landlord_notifications_));
}

Threshold::~Threshold() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Threshold)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Threshold::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  severity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete activate_;
}

void Threshold::ArenaDtor(void* object) {
  Threshold* _this = reinterpret_cast< Threshold* >(object);
  (void)_this;
}
void Threshold::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Threshold::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Threshold& Threshold::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Threshold_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Threshold::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Threshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  mitigations_.Clear();
  notification_channels_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  severity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && activate_ != nullptr) {
    delete activate_;
  }
  activate_ = nullptr;
  ::memset(&threshold_ack_required_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receive_landlord_notifications_) -
      reinterpret_cast<char*>(&threshold_ack_required_)) + sizeof(receive_landlord_notifications_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Threshold::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Threshold.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.mkp.v202407.Activate activate = 2[json_name = "activate"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_activate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string severity = 3[json_name = "severity"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_severity();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Threshold.severity"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.Condition conditions = 4[json_name = "conditions"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.Mitigation mitigations = 5[json_name = "mitigations"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mitigations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.NotificationChannel notification_channels = 6[json_name = "notificationChannels"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool threshold_ack_required = 7[json_name = "thresholdAckRequired"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          threshold_ack_required_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_tenant_notifications = 8[json_name = "enableTenantNotifications"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          enable_tenant_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool receive_landlord_notifications = 9[json_name = "receiveLandlordNotifications"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          receive_landlord_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Threshold::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Threshold)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Threshold.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .kentik.mkp.v202407.Activate activate = 2[json_name = "activate"];
  if (this->has_activate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::activate(this), target, stream);
  }

  // string severity = 3[json_name = "severity"];
  if (this->severity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_severity().data(), static_cast<int>(this->_internal_severity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Threshold.severity");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_severity(), target);
  }

  // repeated .kentik.mkp.v202407.Condition conditions = 4[json_name = "conditions"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_conditions(i), target, stream);
  }

  // repeated .kentik.mkp.v202407.Mitigation mitigations = 5[json_name = "mitigations"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mitigations_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_mitigations(i), target, stream);
  }

  // repeated .kentik.mkp.v202407.NotificationChannel notification_channels = 6[json_name = "notificationChannels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notification_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_notification_channels(i), target, stream);
  }

  // bool threshold_ack_required = 7[json_name = "thresholdAckRequired"];
  if (this->threshold_ack_required() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_threshold_ack_required(), target);
  }

  // bool enable_tenant_notifications = 8[json_name = "enableTenantNotifications"];
  if (this->enable_tenant_notifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_enable_tenant_notifications(), target);
  }

  // bool receive_landlord_notifications = 9[json_name = "receiveLandlordNotifications"];
  if (this->receive_landlord_notifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_receive_landlord_notifications(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Threshold)
  return target;
}

size_t Threshold::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Threshold)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Condition conditions = 4[json_name = "conditions"];
  total_size += 1UL * this->_internal_conditions_size();
  for (const auto& msg : this->conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.mkp.v202407.Mitigation mitigations = 5[json_name = "mitigations"];
  total_size += 1UL * this->_internal_mitigations_size();
  for (const auto& msg : this->mitigations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.mkp.v202407.NotificationChannel notification_channels = 6[json_name = "notificationChannels"];
  total_size += 1UL * this->_internal_notification_channels_size();
  for (const auto& msg : this->notification_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string severity = 3[json_name = "severity"];
  if (this->severity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_severity());
  }

  // .kentik.mkp.v202407.Activate activate = 2[json_name = "activate"];
  if (this->has_activate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activate_);
  }

  // bool threshold_ack_required = 7[json_name = "thresholdAckRequired"];
  if (this->threshold_ack_required() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_tenant_notifications = 8[json_name = "enableTenantNotifications"];
  if (this->enable_tenant_notifications() != 0) {
    total_size += 1 + 1;
  }

  // bool receive_landlord_notifications = 9[json_name = "receiveLandlordNotifications"];
  if (this->receive_landlord_notifications() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Threshold::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  const Threshold* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Threshold>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Threshold)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Threshold)
    MergeFrom(*source);
  }
}

void Threshold::MergeFrom(const Threshold& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Threshold)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  mitigations_.MergeFrom(from.mitigations_);
  notification_channels_.MergeFrom(from.notification_channels_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.severity().size() > 0) {
    _internal_set_severity(from._internal_severity());
  }
  if (from.has_activate()) {
    _internal_mutable_activate()->::kentik::mkp::v202407::Activate::MergeFrom(from._internal_activate());
  }
  if (from.threshold_ack_required() != 0) {
    _internal_set_threshold_ack_required(from._internal_threshold_ack_required());
  }
  if (from.enable_tenant_notifications() != 0) {
    _internal_set_enable_tenant_notifications(from._internal_enable_tenant_notifications());
  }
  if (from.receive_landlord_notifications() != 0) {
    _internal_set_receive_landlord_notifications(from._internal_receive_landlord_notifications());
  }
}

void Threshold::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Threshold::CopyFrom(const Threshold& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Threshold)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Threshold::IsInitialized() const {
  return true;
}

void Threshold::InternalSwap(Threshold* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  conditions_.InternalSwap(&other->conditions_);
  mitigations_.InternalSwap(&other->mitigations_);
  notification_channels_.InternalSwap(&other->notification_channels_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  severity_.Swap(&other->severity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Threshold, receive_landlord_notifications_)
      + sizeof(Threshold::receive_landlord_notifications_)
      - PROTOBUF_FIELD_OFFSET(Threshold, activate_)>(
          reinterpret_cast<char*>(&activate_),
          reinterpret_cast<char*>(&other->activate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Threshold::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Activate::InitAsDefaultInstance() {
}
class Activate::_Internal {
 public:
};

Activate::Activate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Activate)
}
Activate::Activate(const Activate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_().empty()) {
    operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_(),
      GetArena());
  }
  ::memcpy(&times_, &from.times_,
    static_cast<size_t>(reinterpret_cast<char*>(&grace_period_seconds_) -
    reinterpret_cast<char*>(&times_)) + sizeof(grace_period_seconds_));
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Activate)
}

void Activate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Activate_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grace_period_seconds_) -
      reinterpret_cast<char*>(&times_)) + sizeof(grace_period_seconds_));
}

Activate::~Activate() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Activate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Activate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Activate::ArenaDtor(void* object) {
  Activate* _this = reinterpret_cast< Activate* >(object);
  (void)_this;
}
void Activate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Activate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Activate& Activate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Activate_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Activate::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Activate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operator__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&times_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grace_period_seconds_) -
      reinterpret_cast<char*>(&times_)) + sizeof(grace_period_seconds_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Activate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 times = 1[json_name = "times"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          times_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator = 2[json_name = "operator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Activate.operator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 time_window_seconds = 3[json_name = "timeWindowSeconds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          time_window_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 grace_period_seconds = 4[json_name = "gracePeriodSeconds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          grace_period_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Activate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Activate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 times = 1[json_name = "times"];
  if (this->times() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_times(), target);
  }

  // string operator = 2[json_name = "operator"];
  if (this->operator_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_().data(), static_cast<int>(this->_internal_operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Activate.operator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operator_(), target);
  }

  // uint32 time_window_seconds = 3[json_name = "timeWindowSeconds"];
  if (this->time_window_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_time_window_seconds(), target);
  }

  // uint32 grace_period_seconds = 4[json_name = "gracePeriodSeconds"];
  if (this->grace_period_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_grace_period_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Activate)
  return target;
}

size_t Activate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Activate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operator = 2[json_name = "operator"];
  if (this->operator_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_());
  }

  // uint32 times = 1[json_name = "times"];
  if (this->times() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_times());
  }

  // uint32 time_window_seconds = 3[json_name = "timeWindowSeconds"];
  if (this->time_window_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_window_seconds());
  }

  // uint32 grace_period_seconds = 4[json_name = "gracePeriodSeconds"];
  if (this->grace_period_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_grace_period_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Activate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Activate)
  GOOGLE_DCHECK_NE(&from, this);
  const Activate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Activate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Activate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Activate)
    MergeFrom(*source);
  }
}

void Activate::MergeFrom(const Activate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Activate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operator_().size() > 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.times() != 0) {
    _internal_set_times(from._internal_times());
  }
  if (from.time_window_seconds() != 0) {
    _internal_set_time_window_seconds(from._internal_time_window_seconds());
  }
  if (from.grace_period_seconds() != 0) {
    _internal_set_grace_period_seconds(from._internal_grace_period_seconds());
  }
}

void Activate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Activate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activate::CopyFrom(const Activate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Activate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activate::IsInitialized() const {
  return true;
}

void Activate::InternalSwap(Activate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  operator__.Swap(&other->operator__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Activate, grace_period_seconds_)
      + sizeof(Activate::grace_period_seconds_)
      - PROTOBUF_FIELD_OFFSET(Activate, times_)>(
          reinterpret_cast<char*>(&times_),
          reinterpret_cast<char*>(&other->times_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Activate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Condition::InitAsDefaultInstance() {
}
class Condition::_Internal {
 public:
};

Condition::Condition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Condition)
}
Condition::Condition(const Condition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_metric().empty()) {
    metric_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_metric(),
      GetArena());
  }
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_().empty()) {
    operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_(),
      GetArena());
  }
  value_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_type().empty()) {
    value_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value_type(),
      GetArena());
  }
  value_select_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value_select().empty()) {
    value_select_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value_select(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Condition)
}

void Condition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Condition_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metric_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_select_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Condition::~Condition() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Condition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Condition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metric_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_select_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Condition::ArenaDtor(void* object) {
  Condition* _this = reinterpret_cast< Condition* >(object);
  (void)_this;
}
void Condition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Condition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Condition& Condition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Condition_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Condition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metric_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_select_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Condition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1[json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Condition.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2[json_name = "value"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Condition.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string metric = 3[json_name = "metric"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_metric();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Condition.metric"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator = 4[json_name = "operator"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_operator_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Condition.operator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_type = 5[json_name = "valueType"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_value_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Condition.value_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value_select = 6[json_name = "valueSelect"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_value_select();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Condition.value_select"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Condition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Condition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1[json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Condition.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string value = 2[json_name = "value"];
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Condition.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // string metric = 3[json_name = "metric"];
  if (this->metric().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_metric().data(), static_cast<int>(this->_internal_metric().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Condition.metric");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_metric(), target);
  }

  // string operator = 4[json_name = "operator"];
  if (this->operator_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_().data(), static_cast<int>(this->_internal_operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Condition.operator");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_operator_(), target);
  }

  // string value_type = 5[json_name = "valueType"];
  if (this->value_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_type().data(), static_cast<int>(this->_internal_value_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Condition.value_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_value_type(), target);
  }

  // string value_select = 6[json_name = "valueSelect"];
  if (this->value_select().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value_select().data(), static_cast<int>(this->_internal_value_select().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Condition.value_select");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_value_select(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Condition)
  return target;
}

size_t Condition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Condition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1[json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string value = 2[json_name = "value"];
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string metric = 3[json_name = "metric"];
  if (this->metric().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_metric());
  }

  // string operator = 4[json_name = "operator"];
  if (this->operator_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_());
  }

  // string value_type = 5[json_name = "valueType"];
  if (this->value_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_type());
  }

  // string value_select = 6[json_name = "valueSelect"];
  if (this->value_select().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value_select());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Condition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  const Condition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Condition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Condition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Condition)
    MergeFrom(*source);
  }
}

void Condition::MergeFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Condition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
  if (from.metric().size() > 0) {
    _internal_set_metric(from._internal_metric());
  }
  if (from.operator_().size() > 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.value_type().size() > 0) {
    _internal_set_value_type(from._internal_value_type());
  }
  if (from.value_select().size() > 0) {
    _internal_set_value_select(from._internal_value_select());
  }
}

void Condition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Condition::CopyFrom(const Condition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Condition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Condition::IsInitialized() const {
  return true;
}

void Condition::InternalSwap(Condition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  metric_.Swap(&other->metric_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator__.Swap(&other->operator__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_type_.Swap(&other->value_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_select_.Swap(&other->value_select_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Condition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mitigation::InitAsDefaultInstance() {
}
class Mitigation::_Internal {
 public:
};

Mitigation::Mitigation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Mitigation)
}
Mitigation::Mitigation(const Mitigation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_id().empty()) {
    company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_id(),
      GetArena());
  }
  pairing_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pairing_id().empty()) {
    pairing_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pairing_id(),
      GetArena());
  }
  threshold_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_threshold_id().empty()) {
    threshold_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_threshold_id(),
      GetArena());
  }
  mitigation_apply_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mitigation_apply_type().empty()) {
    mitigation_apply_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mitigation_apply_type(),
      GetArena());
  }
  mitigation_clear_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mitigation_clear_type().empty()) {
    mitigation_clear_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_mitigation_clear_type(),
      GetArena());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&is_method_overridable_, &from.is_method_overridable_,
    static_cast<size_t>(reinterpret_cast<char*>(&mitigation_clear_timer_) -
    reinterpret_cast<char*>(&is_method_overridable_)) + sizeof(mitigation_clear_timer_));
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Mitigation)
}

void Mitigation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mitigation_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairing_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  threshold_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mitigation_apply_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mitigation_clear_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&is_method_overridable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mitigation_clear_timer_) -
      reinterpret_cast<char*>(&is_method_overridable_)) + sizeof(mitigation_clear_timer_));
}

Mitigation::~Mitigation() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Mitigation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mitigation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pairing_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  threshold_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mitigation_apply_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mitigation_clear_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Mitigation::ArenaDtor(void* object) {
  Mitigation* _this = reinterpret_cast< Mitigation* >(object);
  (void)_this;
}
void Mitigation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mitigation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mitigation& Mitigation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mitigation_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Mitigation::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Mitigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pairing_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  threshold_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mitigation_apply_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mitigation_clear_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&is_method_overridable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mitigation_clear_timer_) -
      reinterpret_cast<char*>(&is_method_overridable_)) + sizeof(mitigation_clear_timer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mitigation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string status = 1[json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Mitigation.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_id = 2[json_name = "companyId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_company_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Mitigation.company_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pairing_id = 3[json_name = "pairingId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pairing_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Mitigation.pairing_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string threshold_id = 4[json_name = "thresholdId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_threshold_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Mitigation.threshold_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_method_overridable = 5[json_name = "isMethodOverridable"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_method_overridable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mitigation_apply_type = 6[json_name = "mitigationApplyType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_mitigation_apply_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Mitigation.mitigation_apply_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mitigation_clear_type = 7[json_name = "mitigationClearType"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_mitigation_clear_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Mitigation.mitigation_clear_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mitigation_apply_timer = 8[json_name = "mitigationApplyTimer"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          mitigation_apply_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 mitigation_clear_timer = 9[json_name = "mitigationClearTimer"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          mitigation_clear_timer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_platform_overridable = 10[json_name = "isPlatformOverridable"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          is_platform_overridable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 13[json_name = "id"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Mitigation.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mitigation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Mitigation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1[json_name = "status"];
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Mitigation.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  // string company_id = 2[json_name = "companyId"];
  if (this->company_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_id().data(), static_cast<int>(this->_internal_company_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Mitigation.company_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company_id(), target);
  }

  // string pairing_id = 3[json_name = "pairingId"];
  if (this->pairing_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pairing_id().data(), static_cast<int>(this->_internal_pairing_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Mitigation.pairing_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pairing_id(), target);
  }

  // string threshold_id = 4[json_name = "thresholdId"];
  if (this->threshold_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_threshold_id().data(), static_cast<int>(this->_internal_threshold_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Mitigation.threshold_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_threshold_id(), target);
  }

  // bool is_method_overridable = 5[json_name = "isMethodOverridable"];
  if (this->is_method_overridable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_method_overridable(), target);
  }

  // string mitigation_apply_type = 6[json_name = "mitigationApplyType"];
  if (this->mitigation_apply_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mitigation_apply_type().data(), static_cast<int>(this->_internal_mitigation_apply_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Mitigation.mitigation_apply_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_mitigation_apply_type(), target);
  }

  // string mitigation_clear_type = 7[json_name = "mitigationClearType"];
  if (this->mitigation_clear_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mitigation_clear_type().data(), static_cast<int>(this->_internal_mitigation_clear_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Mitigation.mitigation_clear_type");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_mitigation_clear_type(), target);
  }

  // uint32 mitigation_apply_timer = 8[json_name = "mitigationApplyTimer"];
  if (this->mitigation_apply_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_mitigation_apply_timer(), target);
  }

  // uint32 mitigation_clear_timer = 9[json_name = "mitigationClearTimer"];
  if (this->mitigation_clear_timer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_mitigation_clear_timer(), target);
  }

  // bool is_platform_overridable = 10[json_name = "isPlatformOverridable"];
  if (this->is_platform_overridable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_is_platform_overridable(), target);
  }

  // string id = 13[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Mitigation.id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Mitigation)
  return target;
}

size_t Mitigation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Mitigation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1[json_name = "status"];
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // string company_id = 2[json_name = "companyId"];
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_id());
  }

  // string pairing_id = 3[json_name = "pairingId"];
  if (this->pairing_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pairing_id());
  }

  // string threshold_id = 4[json_name = "thresholdId"];
  if (this->threshold_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_threshold_id());
  }

  // string mitigation_apply_type = 6[json_name = "mitigationApplyType"];
  if (this->mitigation_apply_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mitigation_apply_type());
  }

  // string mitigation_clear_type = 7[json_name = "mitigationClearType"];
  if (this->mitigation_clear_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mitigation_clear_type());
  }

  // string id = 13[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool is_method_overridable = 5[json_name = "isMethodOverridable"];
  if (this->is_method_overridable() != 0) {
    total_size += 1 + 1;
  }

  // bool is_platform_overridable = 10[json_name = "isPlatformOverridable"];
  if (this->is_platform_overridable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 mitigation_apply_timer = 8[json_name = "mitigationApplyTimer"];
  if (this->mitigation_apply_timer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mitigation_apply_timer());
  }

  // uint32 mitigation_clear_timer = 9[json_name = "mitigationClearTimer"];
  if (this->mitigation_clear_timer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_mitigation_clear_timer());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mitigation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Mitigation)
  GOOGLE_DCHECK_NE(&from, this);
  const Mitigation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mitigation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Mitigation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Mitigation)
    MergeFrom(*source);
  }
}

void Mitigation::MergeFrom(const Mitigation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Mitigation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.company_id().size() > 0) {
    _internal_set_company_id(from._internal_company_id());
  }
  if (from.pairing_id().size() > 0) {
    _internal_set_pairing_id(from._internal_pairing_id());
  }
  if (from.threshold_id().size() > 0) {
    _internal_set_threshold_id(from._internal_threshold_id());
  }
  if (from.mitigation_apply_type().size() > 0) {
    _internal_set_mitigation_apply_type(from._internal_mitigation_apply_type());
  }
  if (from.mitigation_clear_type().size() > 0) {
    _internal_set_mitigation_clear_type(from._internal_mitigation_clear_type());
  }
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.is_method_overridable() != 0) {
    _internal_set_is_method_overridable(from._internal_is_method_overridable());
  }
  if (from.is_platform_overridable() != 0) {
    _internal_set_is_platform_overridable(from._internal_is_platform_overridable());
  }
  if (from.mitigation_apply_timer() != 0) {
    _internal_set_mitigation_apply_timer(from._internal_mitigation_apply_timer());
  }
  if (from.mitigation_clear_timer() != 0) {
    _internal_set_mitigation_clear_timer(from._internal_mitigation_clear_timer());
  }
}

void Mitigation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Mitigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mitigation::CopyFrom(const Mitigation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Mitigation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mitigation::IsInitialized() const {
  return true;
}

void Mitigation::InternalSwap(Mitigation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.Swap(&other->company_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pairing_id_.Swap(&other->pairing_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  threshold_id_.Swap(&other->threshold_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mitigation_apply_type_.Swap(&other->mitigation_apply_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  mitigation_clear_type_.Swap(&other->mitigation_clear_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Mitigation, mitigation_clear_timer_)
      + sizeof(Mitigation::mitigation_clear_timer_)
      - PROTOBUF_FIELD_OFFSET(Mitigation, is_method_overridable_)>(
          reinterpret_cast<char*>(&is_method_overridable_),
          reinterpret_cast<char*>(&other->is_method_overridable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Mitigation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NotificationChannel::InitAsDefaultInstance() {
}
class NotificationChannel::_Internal {
 public:
};

NotificationChannel::NotificationChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.NotificationChannel)
}
NotificationChannel::NotificationChannel(const NotificationChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.NotificationChannel)
}

void NotificationChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotificationChannel_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

NotificationChannel::~NotificationChannel() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.NotificationChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotificationChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NotificationChannel::ArenaDtor(void* object) {
  NotificationChannel* _this = reinterpret_cast< NotificationChannel* >(object);
  (void)_this;
}
void NotificationChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotificationChannel& NotificationChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotificationChannel_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void NotificationChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.NotificationChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.NotificationChannel.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotificationChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.NotificationChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.NotificationChannel.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.NotificationChannel)
  return target;
}

size_t NotificationChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.NotificationChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.NotificationChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotificationChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.NotificationChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.NotificationChannel)
    MergeFrom(*source);
  }
}

void NotificationChannel::MergeFrom(const NotificationChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.NotificationChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void NotificationChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.NotificationChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationChannel::CopyFrom(const NotificationChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.NotificationChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationChannel::IsInitialized() const {
  return true;
}

void NotificationChannel::InternalSwap(NotificationChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TenantLink::InitAsDefaultInstance() {
}
class TenantLink::_Internal {
 public:
};

TenantLink::TenantLink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.TenantLink)
}
TenantLink::TenantLink(const TenantLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  pivot_template_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot_template_id().empty()) {
    pivot_template_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot_template_id(),
      GetArena());
  }
  pivot_user_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pivot_user_group_id().empty()) {
    pivot_user_group_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_pivot_user_group_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.TenantLink)
}

void TenantLink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TenantLink_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_template_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_user_group_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TenantLink::~TenantLink() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.TenantLink)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TenantLink::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_template_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pivot_user_group_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TenantLink::ArenaDtor(void* object) {
  TenantLink* _this = reinterpret_cast< TenantLink* >(object);
  (void)_this;
}
void TenantLink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TenantLink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TenantLink& TenantLink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TenantLink_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void TenantLink::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.TenantLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_template_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_user_group_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TenantLink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.TenantLink.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pivot_template_id = 2[json_name = "pivotTemplateId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pivot_template_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.TenantLink.pivot_template_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pivot_user_group_id = 3[json_name = "pivotUserGroupId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pivot_user_group_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.TenantLink.pivot_user_group_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TenantLink::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.TenantLink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.TenantLink.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string pivot_template_id = 2[json_name = "pivotTemplateId"];
  if (this->pivot_template_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_template_id().data(), static_cast<int>(this->_internal_pivot_template_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.TenantLink.pivot_template_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pivot_template_id(), target);
  }

  // string pivot_user_group_id = 3[json_name = "pivotUserGroupId"];
  if (this->pivot_user_group_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_user_group_id().data(), static_cast<int>(this->_internal_pivot_user_group_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.TenantLink.pivot_user_group_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pivot_user_group_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.TenantLink)
  return target;
}

size_t TenantLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.TenantLink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string pivot_template_id = 2[json_name = "pivotTemplateId"];
  if (this->pivot_template_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_template_id());
  }

  // string pivot_user_group_id = 3[json_name = "pivotUserGroupId"];
  if (this->pivot_user_group_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_user_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TenantLink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.TenantLink)
  GOOGLE_DCHECK_NE(&from, this);
  const TenantLink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TenantLink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.TenantLink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.TenantLink)
    MergeFrom(*source);
  }
}

void TenantLink::MergeFrom(const TenantLink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.TenantLink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.pivot_template_id().size() > 0) {
    _internal_set_pivot_template_id(from._internal_pivot_template_id());
  }
  if (from.pivot_user_group_id().size() > 0) {
    _internal_set_pivot_user_group_id(from._internal_pivot_user_group_id());
  }
}

void TenantLink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.TenantLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TenantLink::CopyFrom(const TenantLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.TenantLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TenantLink::IsInitialized() const {
  return true;
}

void TenantLink::InternalSwap(TenantLink* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_template_id_.Swap(&other->pivot_template_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  pivot_user_group_id_.Swap(&other->pivot_user_group_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TenantLink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Package::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_Package_default_instance_._instance.get_mutable()->assets_ = const_cast< ::kentik::mkp::v202407::Asset*>(
      ::kentik::mkp::v202407::Asset::internal_default_instance());
}
class Package::_Internal {
 public:
  static const ::kentik::mkp::v202407::Asset& assets(const Package* msg);
};

const ::kentik::mkp::v202407::Asset&
Package::_Internal::assets(const Package* msg) {
  return *msg->assets_;
}
Package::Package(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alerts_(arena),
  tenants_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Package)
}
Package::Package(const Package& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alerts_(from.alerts_),
      tenants_(from.tenants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_id().empty()) {
    company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_icon().empty()) {
    icon_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_icon(),
      GetArena());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_color(),
      GetArena());
  }
  if (from._internal_has_assets()) {
    assets_ = new ::kentik::mkp::v202407::Asset(*from.assets_);
  } else {
    assets_ = nullptr;
  }
  is_default_ = from.is_default_;
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Package)
}

void Package::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&assets_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_default_) -
      reinterpret_cast<char*>(&assets_)) + sizeof(is_default_));
}

Package::~Package() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Package)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Package::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete assets_;
}

void Package::ArenaDtor(void* object) {
  Package* _this = reinterpret_cast< Package* >(object);
  (void)_this;
}
void Package::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Package::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Package& Package::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Package_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Package::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alerts_.Clear();
  tenants_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && assets_ != nullptr) {
    delete assets_;
  }
  assets_ = nullptr;
  is_default_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Package::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Package.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_company_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Package.company_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Package.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Package.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string icon = 5[json_name = "icon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_icon();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Package.icon"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 6[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Package.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.Alert alerts = 7[json_name = "alerts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alerts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.mkp.v202407.Asset assets = 8[json_name = "assets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_assets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_default = 9[json_name = "isDefault", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          is_default_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.TenantLink tenants = 10[json_name = "tenants", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tenants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Package::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Package)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Package.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_id().data(), static_cast<int>(this->_internal_company_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Package.company_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company_id(), target);
  }

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Package.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Package.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string icon = 5[json_name = "icon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->icon().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_icon().data(), static_cast<int>(this->_internal_icon().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Package.icon");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_icon(), target);
  }

  // string color = 6[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Package.color");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_color(), target);
  }

  // repeated .kentik.mkp.v202407.Alert alerts = 7[json_name = "alerts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alerts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_alerts(i), target, stream);
  }

  // .kentik.mkp.v202407.Asset assets = 8[json_name = "assets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_assets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::assets(this), target, stream);
  }

  // bool is_default = 9[json_name = "isDefault", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->is_default() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_is_default(), target);
  }

  // repeated .kentik.mkp.v202407.TenantLink tenants = 10[json_name = "tenants", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tenants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_tenants(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Package)
  return target;
}

size_t Package::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Package)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Alert alerts = 7[json_name = "alerts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_alerts_size();
  for (const auto& msg : this->alerts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.mkp.v202407.TenantLink tenants = 10[json_name = "tenants", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_tenants_size();
  for (const auto& msg : this->tenants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_id());
  }

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string icon = 5[json_name = "icon", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->icon().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_icon());
  }

  // string color = 6[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // .kentik.mkp.v202407.Asset assets = 8[json_name = "assets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_assets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assets_);
  }

  // bool is_default = 9[json_name = "isDefault", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->is_default() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Package::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Package)
  GOOGLE_DCHECK_NE(&from, this);
  const Package* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Package>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Package)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Package)
    MergeFrom(*source);
  }
}

void Package::MergeFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Package)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alerts_.MergeFrom(from.alerts_);
  tenants_.MergeFrom(from.tenants_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.company_id().size() > 0) {
    _internal_set_company_id(from._internal_company_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.icon().size() > 0) {
    _internal_set_icon(from._internal_icon());
  }
  if (from.color().size() > 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.has_assets()) {
    _internal_mutable_assets()->::kentik::mkp::v202407::Asset::MergeFrom(from._internal_assets());
  }
  if (from.is_default() != 0) {
    _internal_set_is_default(from._internal_is_default());
  }
}

void Package::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Package::CopyFrom(const Package& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Package)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Package::IsInitialized() const {
  return true;
}

void Package::InternalSwap(Package* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alerts_.InternalSwap(&other->alerts_);
  tenants_.InternalSwap(&other->tenants_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.Swap(&other->company_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  icon_.Swap(&other->icon_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Package, is_default_)
      + sizeof(Package::is_default_)
      - PROTOBUF_FIELD_OFFSET(Package, assets_)>(
          reinterpret_cast<char*>(&assets_),
          reinterpret_cast<char*>(&other->assets_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Package::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CustomDimension::InitAsDefaultInstance() {
}
class CustomDimension::_Internal {
 public:
};

CustomDimension::CustomDimension(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.CustomDimension)
}
CustomDimension::CustomDimension(const CustomDimension& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dimension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dimension().empty()) {
    dimension_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dimension(),
      GetArena());
  }
  populator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_populator().empty()) {
    populator_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_populator(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.CustomDimension)
}

void CustomDimension::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomDimension_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  dimension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  populator_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CustomDimension::~CustomDimension() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.CustomDimension)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomDimension::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dimension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  populator_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CustomDimension::ArenaDtor(void* object) {
  CustomDimension* _this = reinterpret_cast< CustomDimension* >(object);
  (void)_this;
}
void CustomDimension::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomDimension::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomDimension& CustomDimension::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomDimension_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void CustomDimension::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.CustomDimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dimension_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  populator_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomDimension::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dimension = 1[json_name = "dimension"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dimension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.CustomDimension.dimension"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string populator = 2[json_name = "populator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_populator();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.CustomDimension.populator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomDimension::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.CustomDimension)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dimension = 1[json_name = "dimension"];
  if (this->dimension().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dimension().data(), static_cast<int>(this->_internal_dimension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.CustomDimension.dimension");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dimension(), target);
  }

  // string populator = 2[json_name = "populator"];
  if (this->populator().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_populator().data(), static_cast<int>(this->_internal_populator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.CustomDimension.populator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_populator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.CustomDimension)
  return target;
}

size_t CustomDimension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.CustomDimension)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dimension = 1[json_name = "dimension"];
  if (this->dimension().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dimension());
  }

  // string populator = 2[json_name = "populator"];
  if (this->populator().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_populator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomDimension::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.CustomDimension)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomDimension* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomDimension>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.CustomDimension)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.CustomDimension)
    MergeFrom(*source);
  }
}

void CustomDimension::MergeFrom(const CustomDimension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.CustomDimension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dimension().size() > 0) {
    _internal_set_dimension(from._internal_dimension());
  }
  if (from.populator().size() > 0) {
    _internal_set_populator(from._internal_populator());
  }
}

void CustomDimension::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.CustomDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomDimension::CopyFrom(const CustomDimension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.CustomDimension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomDimension::IsInitialized() const {
  return true;
}

void CustomDimension::InternalSwap(CustomDimension* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  dimension_.Swap(&other->dimension_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  populator_.Swap(&other->populator_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomDimension::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Devices::InitAsDefaultInstance() {
}
class Devices::_Internal {
 public:
};

Devices::Devices(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  device_types_(arena),
  device_labels_(arena),
  device_sites_(arena),
  device_name_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Devices)
}
Devices::Devices(const Devices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      device_types_(from.device_types_),
      device_labels_(from.device_labels_),
      device_sites_(from.device_sites_),
      device_name_(from.device_name_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  all_devices_ = from.all_devices_;
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Devices)
}

void Devices::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Devices_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  all_devices_ = false;
}

Devices::~Devices() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Devices)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Devices::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Devices::ArenaDtor(void* object) {
  Devices* _this = reinterpret_cast< Devices* >(object);
  (void)_this;
}
void Devices::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Devices::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Devices& Devices::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Devices_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Devices::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Devices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_types_.Clear();
  device_labels_.Clear();
  device_sites_.Clear();
  device_name_.Clear();
  all_devices_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Devices::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool all_devices = 1[json_name = "allDevices"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          all_devices_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_types = 2[json_name = "deviceTypes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Devices.device_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated uint32 device_labels = 3[json_name = "deviceLabels"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_device_labels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_device_labels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 device_sites = 4[json_name = "deviceSites"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_device_sites(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_device_sites(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string device_name = 5[json_name = "deviceName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_name();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Devices.device_name"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Devices::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Devices)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool all_devices = 1[json_name = "allDevices"];
  if (this->all_devices() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_all_devices(), target);
  }

  // repeated string device_types = 2[json_name = "deviceTypes"];
  for (int i = 0, n = this->_internal_device_types_size(); i < n; i++) {
    const auto& s = this->_internal_device_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Devices.device_types");
    target = stream->WriteString(2, s, target);
  }

  // repeated uint32 device_labels = 3[json_name = "deviceLabels"];
  {
    int byte_size = _device_labels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, _internal_device_labels(), byte_size, target);
    }
  }

  // repeated uint32 device_sites = 4[json_name = "deviceSites"];
  {
    int byte_size = _device_sites_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_device_sites(), byte_size, target);
    }
  }

  // repeated string device_name = 5[json_name = "deviceName"];
  for (int i = 0, n = this->_internal_device_name_size(); i < n; i++) {
    const auto& s = this->_internal_device_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Devices.device_name");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Devices)
  return target;
}

size_t Devices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Devices)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_types = 2[json_name = "deviceTypes"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_types_.size());
  for (int i = 0, n = device_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_types_.Get(i));
  }

  // repeated uint32 device_labels = 3[json_name = "deviceLabels"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->device_labels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _device_labels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 device_sites = 4[json_name = "deviceSites"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->device_sites_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _device_sites_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string device_name = 5[json_name = "deviceName"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(device_name_.size());
  for (int i = 0, n = device_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      device_name_.Get(i));
  }

  // bool all_devices = 1[json_name = "allDevices"];
  if (this->all_devices() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Devices::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Devices)
  GOOGLE_DCHECK_NE(&from, this);
  const Devices* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Devices>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Devices)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Devices)
    MergeFrom(*source);
  }
}

void Devices::MergeFrom(const Devices& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Devices)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_types_.MergeFrom(from.device_types_);
  device_labels_.MergeFrom(from.device_labels_);
  device_sites_.MergeFrom(from.device_sites_);
  device_name_.MergeFrom(from.device_name_);
  if (from.all_devices() != 0) {
    _internal_set_all_devices(from._internal_all_devices());
  }
}

void Devices::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Devices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Devices::CopyFrom(const Devices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Devices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Devices::IsInitialized() const {
  return true;
}

void Devices::InternalSwap(Devices* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  device_types_.InternalSwap(&other->device_types_);
  device_labels_.InternalSwap(&other->device_labels_);
  device_sites_.InternalSwap(&other->device_sites_);
  device_name_.InternalSwap(&other->device_name_);
  swap(all_devices_, other->all_devices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Devices::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FilterField::InitAsDefaultInstance() {
}
class FilterField::_Internal {
 public:
};

FilterField::FilterField(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.FilterField)
}
FilterField::FilterField(const FilterField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filter_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter_field().empty()) {
    filter_field_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filter_field(),
      GetArena());
  }
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operator_().empty()) {
    operator__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operator_(),
      GetArena());
  }
  filter_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter_value().empty()) {
    filter_value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filter_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.FilterField)
}

void FilterField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FilterField_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  filter_field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FilterField::~FilterField() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.FilterField)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FilterField::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filter_field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operator__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FilterField::ArenaDtor(void* object) {
  FilterField* _this = reinterpret_cast< FilterField* >(object);
  (void)_this;
}
void FilterField::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FilterField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FilterField& FilterField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FilterField_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void FilterField::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.FilterField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_field_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator__.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filter_value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FilterField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filter_field = 1[json_name = "filterField"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filter_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.FilterField.filter_field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string operator = 2[json_name = "operator"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_operator_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.FilterField.operator"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filter_value = 3[json_name = "filterValue"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_filter_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.FilterField.filter_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FilterField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.FilterField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filter_field = 1[json_name = "filterField"];
  if (this->filter_field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_field().data(), static_cast<int>(this->_internal_filter_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.FilterField.filter_field");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filter_field(), target);
  }

  // string operator = 2[json_name = "operator"];
  if (this->operator_().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operator_().data(), static_cast<int>(this->_internal_operator_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.FilterField.operator");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_operator_(), target);
  }

  // string filter_value = 3[json_name = "filterValue"];
  if (this->filter_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter_value().data(), static_cast<int>(this->_internal_filter_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.FilterField.filter_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filter_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.FilterField)
  return target;
}

size_t FilterField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.FilterField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filter_field = 1[json_name = "filterField"];
  if (this->filter_field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_field());
  }

  // string operator = 2[json_name = "operator"];
  if (this->operator_().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operator_());
  }

  // string filter_value = 3[json_name = "filterValue"];
  if (this->filter_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FilterField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.FilterField)
  GOOGLE_DCHECK_NE(&from, this);
  const FilterField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FilterField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.FilterField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.FilterField)
    MergeFrom(*source);
  }
}

void FilterField::MergeFrom(const FilterField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.FilterField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filter_field().size() > 0) {
    _internal_set_filter_field(from._internal_filter_field());
  }
  if (from.operator_().size() > 0) {
    _internal_set_operator_(from._internal_operator_());
  }
  if (from.filter_value().size() > 0) {
    _internal_set_filter_value(from._internal_filter_value());
  }
}

void FilterField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.FilterField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FilterField::CopyFrom(const FilterField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.FilterField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilterField::IsInitialized() const {
  return true;
}

void FilterField::InternalSwap(FilterField* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filter_field_.Swap(&other->filter_field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  operator__.Swap(&other->operator__, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  filter_value_.Swap(&other->filter_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata FilterField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Filter::InitAsDefaultInstance() {
}
class Filter::_Internal {
 public:
};

Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  saved_filters_(arena),
  filters_(arena),
  filter_groups_(arena),
  metric_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      saved_filters_(from.saved_filters_),
      filters_(from.filters_),
      filter_groups_(from.filter_groups_),
      metric_(from.metric_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  connector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connector().empty()) {
    connector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_connector(),
      GetArena());
  }
  auto_added_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_auto_added().empty()) {
    auto_added_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_auto_added(),
      GetArena());
  }
  ::memcpy(&named_, &from.named_,
    static_cast<size_t>(reinterpret_cast<char*>(&not__) -
    reinterpret_cast<char*>(&named_)) + sizeof(not__));
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Filter)
}

void Filter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Filter_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_added_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&named_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not__) -
      reinterpret_cast<char*>(&named_)) + sizeof(not__));
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  connector_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  auto_added_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Filter::ArenaDtor(void* object) {
  Filter* _this = reinterpret_cast< Filter* >(object);
  (void)_this;
}
void Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Filter& Filter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Filter_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  saved_filters_.Clear();
  filters_.Clear();
  filter_groups_.Clear();
  metric_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auto_added_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&named_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&not__) -
      reinterpret_cast<char*>(&named_)) + sizeof(not__));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Filter.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool named = 2[json_name = "named"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          named_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string connector = 3[json_name = "connector"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_connector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Filter.connector"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool not = 4[json_name = "not"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          not__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string auto_added = 5[json_name = "autoAdded"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_auto_added();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Filter.auto_added"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string saved_filters = 6[json_name = "savedFilters"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_saved_filters();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Filter.saved_filters"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.FilterField filters = 7[json_name = "filters"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.Filter filter_groups = 8[json_name = "filterGroups"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filter_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string metric = 9[json_name = "metric"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_metric();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Filter.metric"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Filter.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool named = 2[json_name = "named"];
  if (this->named() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_named(), target);
  }

  // string connector = 3[json_name = "connector"];
  if (this->connector().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connector().data(), static_cast<int>(this->_internal_connector().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Filter.connector");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_connector(), target);
  }

  // bool not = 4[json_name = "not"];
  if (this->not_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_not_(), target);
  }

  // string auto_added = 5[json_name = "autoAdded"];
  if (this->auto_added().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_auto_added().data(), static_cast<int>(this->_internal_auto_added().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Filter.auto_added");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_auto_added(), target);
  }

  // repeated string saved_filters = 6[json_name = "savedFilters"];
  for (int i = 0, n = this->_internal_saved_filters_size(); i < n; i++) {
    const auto& s = this->_internal_saved_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Filter.saved_filters");
    target = stream->WriteString(6, s, target);
  }

  // repeated .kentik.mkp.v202407.FilterField filters = 7[json_name = "filters"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_filters(i), target, stream);
  }

  // repeated .kentik.mkp.v202407.Filter filter_groups = 8[json_name = "filterGroups"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filter_groups_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_filter_groups(i), target, stream);
  }

  // repeated string metric = 9[json_name = "metric"];
  for (int i = 0, n = this->_internal_metric_size(); i < n; i++) {
    const auto& s = this->_internal_metric(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Filter.metric");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string saved_filters = 6[json_name = "savedFilters"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(saved_filters_.size());
  for (int i = 0, n = saved_filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      saved_filters_.Get(i));
  }

  // repeated .kentik.mkp.v202407.FilterField filters = 7[json_name = "filters"];
  total_size += 1UL * this->_internal_filters_size();
  for (const auto& msg : this->filters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.mkp.v202407.Filter filter_groups = 8[json_name = "filterGroups"];
  total_size += 1UL * this->_internal_filter_groups_size();
  for (const auto& msg : this->filter_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string metric = 9[json_name = "metric"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(metric_.size());
  for (int i = 0, n = metric_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      metric_.Get(i));
  }

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string connector = 3[json_name = "connector"];
  if (this->connector().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connector());
  }

  // string auto_added = 5[json_name = "autoAdded"];
  if (this->auto_added().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_auto_added());
  }

  // bool named = 2[json_name = "named"];
  if (this->named() != 0) {
    total_size += 1 + 1;
  }

  // bool not = 4[json_name = "not"];
  if (this->not_() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Filter)
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  saved_filters_.MergeFrom(from.saved_filters_);
  filters_.MergeFrom(from.filters_);
  filter_groups_.MergeFrom(from.filter_groups_);
  metric_.MergeFrom(from.metric_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.connector().size() > 0) {
    _internal_set_connector(from._internal_connector());
  }
  if (from.auto_added().size() > 0) {
    _internal_set_auto_added(from._internal_auto_added());
  }
  if (from.named() != 0) {
    _internal_set_named(from._internal_named());
  }
  if (from.not_() != 0) {
    _internal_set_not_(from._internal_not_());
  }
}

void Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  saved_filters_.InternalSwap(&other->saved_filters_);
  filters_.InternalSwap(&other->filters_);
  filter_groups_.InternalSwap(&other->filter_groups_);
  metric_.InternalSwap(&other->metric_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  connector_.Swap(&other->connector_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  auto_added_.Swap(&other->auto_added_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Filter, not__)
      + sizeof(Filter::not__)
      - PROTOBUF_FIELD_OFFSET(Filter, named_)>(
          reinterpret_cast<char*>(&named_),
          reinterpret_cast<char*>(&other->named_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Tenant::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_Tenant_default_instance_._instance.get_mutable()->assets_ = const_cast< ::kentik::mkp::v202407::Asset*>(
      ::kentik::mkp::v202407::Asset::internal_default_instance());
  ::kentik::mkp::v202407::_Tenant_default_instance_._instance.get_mutable()->devices_ = const_cast< ::kentik::mkp::v202407::Devices*>(
      ::kentik::mkp::v202407::Devices::internal_default_instance());
  ::kentik::mkp::v202407::_Tenant_default_instance_._instance.get_mutable()->filters_ = const_cast< ::kentik::mkp::v202407::Filter*>(
      ::kentik::mkp::v202407::Filter::internal_default_instance());
}
class Tenant::_Internal {
 public:
  static const ::kentik::mkp::v202407::Asset& assets(const Tenant* msg);
  static const ::kentik::mkp::v202407::Devices& devices(const Tenant* msg);
  static const ::kentik::mkp::v202407::Filter& filters(const Tenant* msg);
};

const ::kentik::mkp::v202407::Asset&
Tenant::_Internal::assets(const Tenant* msg) {
  return *msg->assets_;
}
const ::kentik::mkp::v202407::Devices&
Tenant::_Internal::devices(const Tenant* msg) {
  return *msg->devices_;
}
const ::kentik::mkp::v202407::Filter&
Tenant::_Internal::filters(const Tenant* msg) {
  return *msg->filters_;
}
void Tenant::clear_users() {
  users_.Clear();
}
Tenant::Tenant(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  alerts_(arena),
  custom_dimensions_(arena),
  packages_(arena),
  users_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.Tenant)
}
Tenant::Tenant(const Tenant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      alerts_(from.alerts_),
      custom_dimensions_(from.custom_dimensions_),
      packages_(from.packages_),
      users_(from.users_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_company_id().empty()) {
    company_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_company_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_asn().empty()) {
    asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_asn(),
      GetArena());
  }
  cidr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cidr().empty()) {
    cidr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cidr(),
      GetArena());
  }
  interface_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_interface_name().empty()) {
    interface_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_interface_name(),
      GetArena());
  }
  snmp_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snmp_alias().empty()) {
    snmp_alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snmp_alias(),
      GetArena());
  }
  template_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_template_id().empty()) {
    template_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_template_id(),
      GetArena());
  }
  if (from._internal_has_devices()) {
    devices_ = new ::kentik::mkp::v202407::Devices(*from.devices_);
  } else {
    devices_ = nullptr;
  }
  if (from._internal_has_filters()) {
    filters_ = new ::kentik::mkp::v202407::Filter(*from.filters_);
  } else {
    filters_ = nullptr;
  }
  if (from._internal_has_assets()) {
    assets_ = new ::kentik::mkp::v202407::Asset(*from.assets_);
  } else {
    assets_ = nullptr;
  }
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.Tenant)
}

void Tenant::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cidr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&devices_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&devices_)) + sizeof(enabled_));
}

Tenant::~Tenant() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.Tenant)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Tenant::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  company_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cidr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  interface_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  snmp_alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  template_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete devices_;
  if (this != internal_default_instance()) delete filters_;
  if (this != internal_default_instance()) delete assets_;
}

void Tenant::ArenaDtor(void* object) {
  Tenant* _this = reinterpret_cast< Tenant* >(object);
  (void)_this;
}
void Tenant::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Tenant::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Tenant& Tenant::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Tenant_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void Tenant::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.Tenant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alerts_.Clear();
  custom_dimensions_.Clear();
  packages_.Clear();
  users_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cidr_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  template_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && devices_ != nullptr) {
    delete devices_;
  }
  devices_ = nullptr;
  if (GetArena() == nullptr && filters_ != nullptr) {
    delete filters_;
  }
  filters_ = nullptr;
  if (GetArena() == nullptr && assets_ != nullptr) {
    delete assets_;
  }
  assets_ = nullptr;
  enabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tenant::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_company_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.company_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enabled = 6[json_name = "enabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.Alert alerts = 7[json_name = "alerts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alerts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // string asn = 8[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_asn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.asn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cidr = 9[json_name = "cidr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_cidr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.cidr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.CustomDimension custom_dimensions = 10[json_name = "customDimensions", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_dimensions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.mkp.v202407.Devices devices = 11[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_devices(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.mkp.v202407.Filter filters = 12[json_name = "filters", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_filters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string interface_name = 13[json_name = "interfaceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_interface_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.interface_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snmp_alias = 14[json_name = "snmpAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_snmp_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.snmp_alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.mkp.v202407.Asset assets = 15[json_name = "assets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_assets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.mkp.v202407.Package packages = 16[json_name = "packages", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.user.v202211.User users = 17[json_name = "users", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_users(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // string template_id = 18[json_name = "templateId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_template_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.Tenant.template_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Tenant::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.Tenant)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_company_id().data(), static_cast<int>(this->_internal_company_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.company_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_company_id(), target);
  }

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // bool enabled = 6[json_name = "enabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_enabled(), target);
  }

  // repeated .kentik.mkp.v202407.Alert alerts = 7[json_name = "alerts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alerts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_alerts(i), target, stream);
  }

  // string asn = 8[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->asn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asn().data(), static_cast<int>(this->_internal_asn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.asn");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_asn(), target);
  }

  // string cidr = 9[json_name = "cidr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cidr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cidr().data(), static_cast<int>(this->_internal_cidr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.cidr");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_cidr(), target);
  }

  // repeated .kentik.mkp.v202407.CustomDimension custom_dimensions = 10[json_name = "customDimensions", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_dimensions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_custom_dimensions(i), target, stream);
  }

  // .kentik.mkp.v202407.Devices devices = 11[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_devices()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::devices(this), target, stream);
  }

  // .kentik.mkp.v202407.Filter filters = 12[json_name = "filters", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_filters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::filters(this), target, stream);
  }

  // string interface_name = 13[json_name = "interfaceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->interface_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_interface_name().data(), static_cast<int>(this->_internal_interface_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.interface_name");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_interface_name(), target);
  }

  // string snmp_alias = 14[json_name = "snmpAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snmp_alias().data(), static_cast<int>(this->_internal_snmp_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.snmp_alias");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_snmp_alias(), target);
  }

  // .kentik.mkp.v202407.Asset assets = 15[json_name = "assets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_assets()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::assets(this), target, stream);
  }

  // repeated .kentik.mkp.v202407.Package packages = 16[json_name = "packages", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_packages(i), target, stream);
  }

  // repeated .kentik.user.v202211.User users = 17[json_name = "users", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_users_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_users(i), target, stream);
  }

  // string template_id = 18[json_name = "templateId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->template_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_template_id().data(), static_cast<int>(this->_internal_template_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.Tenant.template_id");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_template_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.Tenant)
  return target;
}

size_t Tenant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.Tenant)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Alert alerts = 7[json_name = "alerts", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_alerts_size();
  for (const auto& msg : this->alerts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.mkp.v202407.CustomDimension custom_dimensions = 10[json_name = "customDimensions", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_custom_dimensions_size();
  for (const auto& msg : this->custom_dimensions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.mkp.v202407.Package packages = 16[json_name = "packages", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2UL * this->_internal_packages_size();
  for (const auto& msg : this->packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.user.v202211.User users = 17[json_name = "users", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2UL * this->_internal_users_size();
  for (const auto& msg : this->users_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string company_id = 2[json_name = "companyId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->company_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_company_id());
  }

  // string name = 3[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 4[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string asn = 8[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->asn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asn());
  }

  // string cidr = 9[json_name = "cidr", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cidr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cidr());
  }

  // string interface_name = 13[json_name = "interfaceName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->interface_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_interface_name());
  }

  // string snmp_alias = 14[json_name = "snmpAlias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->snmp_alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snmp_alias());
  }

  // string template_id = 18[json_name = "templateId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->template_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_template_id());
  }

  // .kentik.mkp.v202407.Devices devices = 11[json_name = "devices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_devices()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *devices_);
  }

  // .kentik.mkp.v202407.Filter filters = 12[json_name = "filters", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_filters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filters_);
  }

  // .kentik.mkp.v202407.Asset assets = 15[json_name = "assets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_assets()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *assets_);
  }

  // bool enabled = 6[json_name = "enabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Tenant::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.Tenant)
  GOOGLE_DCHECK_NE(&from, this);
  const Tenant* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Tenant>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.Tenant)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.Tenant)
    MergeFrom(*source);
  }
}

void Tenant::MergeFrom(const Tenant& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.Tenant)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  alerts_.MergeFrom(from.alerts_);
  custom_dimensions_.MergeFrom(from.custom_dimensions_);
  packages_.MergeFrom(from.packages_);
  users_.MergeFrom(from.users_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.company_id().size() > 0) {
    _internal_set_company_id(from._internal_company_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.asn().size() > 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.cidr().size() > 0) {
    _internal_set_cidr(from._internal_cidr());
  }
  if (from.interface_name().size() > 0) {
    _internal_set_interface_name(from._internal_interface_name());
  }
  if (from.snmp_alias().size() > 0) {
    _internal_set_snmp_alias(from._internal_snmp_alias());
  }
  if (from.template_id().size() > 0) {
    _internal_set_template_id(from._internal_template_id());
  }
  if (from.has_devices()) {
    _internal_mutable_devices()->::kentik::mkp::v202407::Devices::MergeFrom(from._internal_devices());
  }
  if (from.has_filters()) {
    _internal_mutable_filters()->::kentik::mkp::v202407::Filter::MergeFrom(from._internal_filters());
  }
  if (from.has_assets()) {
    _internal_mutable_assets()->::kentik::mkp::v202407::Asset::MergeFrom(from._internal_assets());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void Tenant::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.Tenant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tenant::CopyFrom(const Tenant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.Tenant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tenant::IsInitialized() const {
  return true;
}

void Tenant::InternalSwap(Tenant* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  alerts_.InternalSwap(&other->alerts_);
  custom_dimensions_.InternalSwap(&other->custom_dimensions_);
  packages_.InternalSwap(&other->packages_);
  users_.InternalSwap(&other->users_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  company_id_.Swap(&other->company_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  asn_.Swap(&other->asn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cidr_.Swap(&other->cidr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  interface_name_.Swap(&other->interface_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  snmp_alias_.Swap(&other->snmp_alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  template_id_.Swap(&other->template_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Tenant, enabled_)
      + sizeof(Tenant::enabled_)
      - PROTOBUF_FIELD_OFFSET(Tenant, devices_)>(
          reinterpret_cast<char*>(&devices_),
          reinterpret_cast<char*>(&other->devices_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Tenant::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPackageRequest::InitAsDefaultInstance() {
}
class ListPackageRequest::_Internal {
 public:
};

ListPackageRequest::ListPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.ListPackageRequest)
}
ListPackageRequest::ListPackageRequest(const ListPackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.ListPackageRequest)
}

void ListPackageRequest::SharedCtor() {
}

ListPackageRequest::~ListPackageRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.ListPackageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPackageRequest::ArenaDtor(void* object) {
  ListPackageRequest* _this = reinterpret_cast< ListPackageRequest* >(object);
  (void)_this;
}
void ListPackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPackageRequest& ListPackageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void ListPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.ListPackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPackageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.ListPackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.ListPackageRequest)
  return target;
}

size_t ListPackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.ListPackageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPackageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.ListPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPackageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPackageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.ListPackageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.ListPackageRequest)
    MergeFrom(*source);
  }
}

void ListPackageRequest::MergeFrom(const ListPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.ListPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListPackageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.ListPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPackageRequest::CopyFrom(const ListPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.ListPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPackageRequest::IsInitialized() const {
  return true;
}

void ListPackageRequest::InternalSwap(ListPackageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPackageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListPackageResponse::InitAsDefaultInstance() {
}
class ListPackageResponse::_Internal {
 public:
};

ListPackageResponse::ListPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  packages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.ListPackageResponse)
}
ListPackageResponse::ListPackageResponse(const ListPackageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      packages_(from.packages_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.ListPackageResponse)
}

void ListPackageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  invalid_count_ = 0u;
}

ListPackageResponse::~ListPackageResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.ListPackageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListPackageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListPackageResponse::ArenaDtor(void* object) {
  ListPackageResponse* _this = reinterpret_cast< ListPackageResponse* >(object);
  (void)_this;
}
void ListPackageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPackageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListPackageResponse& ListPackageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void ListPackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.ListPackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  packages_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPackageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.mkp.v202407.Package packages = 1[json_name = "packages"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_packages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPackageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.ListPackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Package packages = 1[json_name = "packages"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_packages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_packages(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.ListPackageResponse)
  return target;
}

size_t ListPackageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.ListPackageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Package packages = 1[json_name = "packages"];
  total_size += 1UL * this->_internal_packages_size();
  for (const auto& msg : this->packages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPackageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.ListPackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListPackageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListPackageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.ListPackageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.ListPackageResponse)
    MergeFrom(*source);
  }
}

void ListPackageResponse::MergeFrom(const ListPackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.ListPackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  packages_.MergeFrom(from.packages_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListPackageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.ListPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListPackageResponse::CopyFrom(const ListPackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.ListPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPackageResponse::IsInitialized() const {
  return true;
}

void ListPackageResponse::InternalSwap(ListPackageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  packages_.InternalSwap(&other->packages_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPackageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPackageRequest::InitAsDefaultInstance() {
}
class GetPackageRequest::_Internal {
 public:
};

GetPackageRequest::GetPackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.GetPackageRequest)
}
GetPackageRequest::GetPackageRequest(const GetPackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.GetPackageRequest)
}

void GetPackageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPackageRequest::~GetPackageRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.GetPackageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPackageRequest::ArenaDtor(void* object) {
  GetPackageRequest* _this = reinterpret_cast< GetPackageRequest* >(object);
  (void)_this;
}
void GetPackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPackageRequest& GetPackageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void GetPackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.GetPackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.GetPackageRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPackageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.GetPackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.GetPackageRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.GetPackageRequest)
  return target;
}

size_t GetPackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.GetPackageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPackageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.GetPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPackageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPackageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.GetPackageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.GetPackageRequest)
    MergeFrom(*source);
  }
}

void GetPackageRequest::MergeFrom(const GetPackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.GetPackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetPackageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.GetPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPackageRequest::CopyFrom(const GetPackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.GetPackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPackageRequest::IsInitialized() const {
  return true;
}

void GetPackageRequest::InternalSwap(GetPackageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPackageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPackageResponse::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_GetPackageResponse_default_instance_._instance.get_mutable()->package_ = const_cast< ::kentik::mkp::v202407::Package*>(
      ::kentik::mkp::v202407::Package::internal_default_instance());
}
class GetPackageResponse::_Internal {
 public:
  static const ::kentik::mkp::v202407::Package& package(const GetPackageResponse* msg);
};

const ::kentik::mkp::v202407::Package&
GetPackageResponse::_Internal::package(const GetPackageResponse* msg) {
  return *msg->package_;
}
GetPackageResponse::GetPackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.GetPackageResponse)
}
GetPackageResponse::GetPackageResponse(const GetPackageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_package()) {
    package_ = new ::kentik::mkp::v202407::Package(*from.package_);
  } else {
    package_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.GetPackageResponse)
}

void GetPackageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  package_ = nullptr;
}

GetPackageResponse::~GetPackageResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.GetPackageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPackageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete package_;
}

void GetPackageResponse::ArenaDtor(void* object) {
  GetPackageResponse* _this = reinterpret_cast< GetPackageResponse* >(object);
  (void)_this;
}
void GetPackageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPackageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPackageResponse& GetPackageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void GetPackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.GetPackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPackageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPackageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.GetPackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::package(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.GetPackageResponse)
  return target;
}

size_t GetPackageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.GetPackageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *package_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPackageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.GetPackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPackageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPackageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.GetPackageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.GetPackageResponse)
    MergeFrom(*source);
  }
}

void GetPackageResponse::MergeFrom(const GetPackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.GetPackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_package()) {
    _internal_mutable_package()->::kentik::mkp::v202407::Package::MergeFrom(from._internal_package());
  }
}

void GetPackageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.GetPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPackageResponse::CopyFrom(const GetPackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.GetPackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPackageResponse::IsInitialized() const {
  return true;
}

void GetPackageResponse::InternalSwap(GetPackageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(package_, other->package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPackageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePackageRequest::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_CreatePackageRequest_default_instance_._instance.get_mutable()->package_ = const_cast< ::kentik::mkp::v202407::Package*>(
      ::kentik::mkp::v202407::Package::internal_default_instance());
}
class CreatePackageRequest::_Internal {
 public:
  static const ::kentik::mkp::v202407::Package& package(const CreatePackageRequest* msg);
};

const ::kentik::mkp::v202407::Package&
CreatePackageRequest::_Internal::package(const CreatePackageRequest* msg) {
  return *msg->package_;
}
CreatePackageRequest::CreatePackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.CreatePackageRequest)
}
CreatePackageRequest::CreatePackageRequest(const CreatePackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_package()) {
    package_ = new ::kentik::mkp::v202407::Package(*from.package_);
  } else {
    package_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.CreatePackageRequest)
}

void CreatePackageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  package_ = nullptr;
}

CreatePackageRequest::~CreatePackageRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.CreatePackageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreatePackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete package_;
}

void CreatePackageRequest::ArenaDtor(void* object) {
  CreatePackageRequest* _this = reinterpret_cast< CreatePackageRequest* >(object);
  (void)_this;
}
void CreatePackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatePackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePackageRequest& CreatePackageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void CreatePackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.CreatePackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePackageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.CreatePackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::package(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.CreatePackageRequest)
  return target;
}

size_t CreatePackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.CreatePackageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *package_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePackageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.CreatePackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePackageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePackageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.CreatePackageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.CreatePackageRequest)
    MergeFrom(*source);
  }
}

void CreatePackageRequest::MergeFrom(const CreatePackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.CreatePackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_package()) {
    _internal_mutable_package()->::kentik::mkp::v202407::Package::MergeFrom(from._internal_package());
  }
}

void CreatePackageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.CreatePackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePackageRequest::CopyFrom(const CreatePackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.CreatePackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePackageRequest::IsInitialized() const {
  return true;
}

void CreatePackageRequest::InternalSwap(CreatePackageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(package_, other->package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePackageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreatePackageResponse::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_CreatePackageResponse_default_instance_._instance.get_mutable()->package_ = const_cast< ::kentik::mkp::v202407::Package*>(
      ::kentik::mkp::v202407::Package::internal_default_instance());
}
class CreatePackageResponse::_Internal {
 public:
  static const ::kentik::mkp::v202407::Package& package(const CreatePackageResponse* msg);
};

const ::kentik::mkp::v202407::Package&
CreatePackageResponse::_Internal::package(const CreatePackageResponse* msg) {
  return *msg->package_;
}
CreatePackageResponse::CreatePackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.CreatePackageResponse)
}
CreatePackageResponse::CreatePackageResponse(const CreatePackageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_package()) {
    package_ = new ::kentik::mkp::v202407::Package(*from.package_);
  } else {
    package_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.CreatePackageResponse)
}

void CreatePackageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  package_ = nullptr;
}

CreatePackageResponse::~CreatePackageResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.CreatePackageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreatePackageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete package_;
}

void CreatePackageResponse::ArenaDtor(void* object) {
  CreatePackageResponse* _this = reinterpret_cast< CreatePackageResponse* >(object);
  (void)_this;
}
void CreatePackageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreatePackageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreatePackageResponse& CreatePackageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void CreatePackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.CreatePackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreatePackageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreatePackageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.CreatePackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::package(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.CreatePackageResponse)
  return target;
}

size_t CreatePackageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.CreatePackageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *package_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreatePackageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.CreatePackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreatePackageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreatePackageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.CreatePackageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.CreatePackageResponse)
    MergeFrom(*source);
  }
}

void CreatePackageResponse::MergeFrom(const CreatePackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.CreatePackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_package()) {
    _internal_mutable_package()->::kentik::mkp::v202407::Package::MergeFrom(from._internal_package());
  }
}

void CreatePackageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.CreatePackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatePackageResponse::CopyFrom(const CreatePackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.CreatePackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatePackageResponse::IsInitialized() const {
  return true;
}

void CreatePackageResponse::InternalSwap(CreatePackageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(package_, other->package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreatePackageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePackageRequest::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_UpdatePackageRequest_default_instance_._instance.get_mutable()->package_ = const_cast< ::kentik::mkp::v202407::Package*>(
      ::kentik::mkp::v202407::Package::internal_default_instance());
}
class UpdatePackageRequest::_Internal {
 public:
  static const ::kentik::mkp::v202407::Package& package(const UpdatePackageRequest* msg);
};

const ::kentik::mkp::v202407::Package&
UpdatePackageRequest::_Internal::package(const UpdatePackageRequest* msg) {
  return *msg->package_;
}
UpdatePackageRequest::UpdatePackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.UpdatePackageRequest)
}
UpdatePackageRequest::UpdatePackageRequest(const UpdatePackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_package()) {
    package_ = new ::kentik::mkp::v202407::Package(*from.package_);
  } else {
    package_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.UpdatePackageRequest)
}

void UpdatePackageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  package_ = nullptr;
}

UpdatePackageRequest::~UpdatePackageRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.UpdatePackageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete package_;
}

void UpdatePackageRequest::ArenaDtor(void* object) {
  UpdatePackageRequest* _this = reinterpret_cast< UpdatePackageRequest* >(object);
  (void)_this;
}
void UpdatePackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePackageRequest& UpdatePackageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.UpdatePackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePackageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.UpdatePackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::package(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.UpdatePackageRequest)
  return target;
}

size_t UpdatePackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.UpdatePackageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *package_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePackageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.UpdatePackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePackageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePackageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.UpdatePackageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.UpdatePackageRequest)
    MergeFrom(*source);
  }
}

void UpdatePackageRequest::MergeFrom(const UpdatePackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.UpdatePackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_package()) {
    _internal_mutable_package()->::kentik::mkp::v202407::Package::MergeFrom(from._internal_package());
  }
}

void UpdatePackageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.UpdatePackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePackageRequest::CopyFrom(const UpdatePackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.UpdatePackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePackageRequest::IsInitialized() const {
  return true;
}

void UpdatePackageRequest::InternalSwap(UpdatePackageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(package_, other->package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePackageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePackageResponse::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_UpdatePackageResponse_default_instance_._instance.get_mutable()->package_ = const_cast< ::kentik::mkp::v202407::Package*>(
      ::kentik::mkp::v202407::Package::internal_default_instance());
}
class UpdatePackageResponse::_Internal {
 public:
  static const ::kentik::mkp::v202407::Package& package(const UpdatePackageResponse* msg);
};

const ::kentik::mkp::v202407::Package&
UpdatePackageResponse::_Internal::package(const UpdatePackageResponse* msg) {
  return *msg->package_;
}
UpdatePackageResponse::UpdatePackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.UpdatePackageResponse)
}
UpdatePackageResponse::UpdatePackageResponse(const UpdatePackageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_package()) {
    package_ = new ::kentik::mkp::v202407::Package(*from.package_);
  } else {
    package_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.UpdatePackageResponse)
}

void UpdatePackageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  package_ = nullptr;
}

UpdatePackageResponse::~UpdatePackageResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.UpdatePackageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdatePackageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete package_;
}

void UpdatePackageResponse::ArenaDtor(void* object) {
  UpdatePackageResponse* _this = reinterpret_cast< UpdatePackageResponse* >(object);
  (void)_this;
}
void UpdatePackageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdatePackageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePackageResponse& UpdatePackageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void UpdatePackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.UpdatePackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && package_ != nullptr) {
    delete package_;
  }
  package_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdatePackageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_package(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePackageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.UpdatePackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::package(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.UpdatePackageResponse)
  return target;
}

size_t UpdatePackageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.UpdatePackageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Package package = 1[json_name = "package"];
  if (this->has_package()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *package_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePackageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.UpdatePackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePackageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePackageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.UpdatePackageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.UpdatePackageResponse)
    MergeFrom(*source);
  }
}

void UpdatePackageResponse::MergeFrom(const UpdatePackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.UpdatePackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_package()) {
    _internal_mutable_package()->::kentik::mkp::v202407::Package::MergeFrom(from._internal_package());
  }
}

void UpdatePackageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.UpdatePackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePackageResponse::CopyFrom(const UpdatePackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.UpdatePackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePackageResponse::IsInitialized() const {
  return true;
}

void UpdatePackageResponse::InternalSwap(UpdatePackageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(package_, other->package_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePackageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePackageRequest::InitAsDefaultInstance() {
}
class DeletePackageRequest::_Internal {
 public:
};

DeletePackageRequest::DeletePackageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.DeletePackageRequest)
}
DeletePackageRequest::DeletePackageRequest(const DeletePackageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.DeletePackageRequest)
}

void DeletePackageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeletePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeletePackageRequest::~DeletePackageRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.DeletePackageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePackageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeletePackageRequest::ArenaDtor(void* object) {
  DeletePackageRequest* _this = reinterpret_cast< DeletePackageRequest* >(object);
  (void)_this;
}
void DeletePackageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePackageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePackageRequest& DeletePackageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePackageRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void DeletePackageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.DeletePackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePackageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.DeletePackageRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePackageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.DeletePackageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.DeletePackageRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.DeletePackageRequest)
  return target;
}

size_t DeletePackageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.DeletePackageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePackageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.DeletePackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePackageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePackageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.DeletePackageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.DeletePackageRequest)
    MergeFrom(*source);
  }
}

void DeletePackageRequest::MergeFrom(const DeletePackageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.DeletePackageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeletePackageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.DeletePackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePackageRequest::CopyFrom(const DeletePackageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.DeletePackageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePackageRequest::IsInitialized() const {
  return true;
}

void DeletePackageRequest::InternalSwap(DeletePackageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePackageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeletePackageResponse::InitAsDefaultInstance() {
}
class DeletePackageResponse::_Internal {
 public:
};

DeletePackageResponse::DeletePackageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.DeletePackageResponse)
}
DeletePackageResponse::DeletePackageResponse(const DeletePackageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.DeletePackageResponse)
}

void DeletePackageResponse::SharedCtor() {
}

DeletePackageResponse::~DeletePackageResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.DeletePackageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeletePackageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeletePackageResponse::ArenaDtor(void* object) {
  DeletePackageResponse* _this = reinterpret_cast< DeletePackageResponse* >(object);
  (void)_this;
}
void DeletePackageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeletePackageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeletePackageResponse& DeletePackageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeletePackageResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void DeletePackageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.DeletePackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeletePackageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeletePackageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.DeletePackageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.DeletePackageResponse)
  return target;
}

size_t DeletePackageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.DeletePackageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeletePackageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.DeletePackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeletePackageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeletePackageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.DeletePackageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.DeletePackageResponse)
    MergeFrom(*source);
  }
}

void DeletePackageResponse::MergeFrom(const DeletePackageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.DeletePackageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeletePackageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.DeletePackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeletePackageResponse::CopyFrom(const DeletePackageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.DeletePackageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeletePackageResponse::IsInitialized() const {
  return true;
}

void DeletePackageResponse::InternalSwap(DeletePackageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeletePackageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTenantRequest::InitAsDefaultInstance() {
}
class ListTenantRequest::_Internal {
 public:
};

ListTenantRequest::ListTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.ListTenantRequest)
}
ListTenantRequest::ListTenantRequest(const ListTenantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.ListTenantRequest)
}

void ListTenantRequest::SharedCtor() {
}

ListTenantRequest::~ListTenantRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.ListTenantRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTenantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListTenantRequest::ArenaDtor(void* object) {
  ListTenantRequest* _this = reinterpret_cast< ListTenantRequest* >(object);
  (void)_this;
}
void ListTenantRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTenantRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTenantRequest& ListTenantRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void ListTenantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.ListTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTenantRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTenantRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.ListTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.ListTenantRequest)
  return target;
}

size_t ListTenantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.ListTenantRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTenantRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.ListTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTenantRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTenantRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.ListTenantRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.ListTenantRequest)
    MergeFrom(*source);
  }
}

void ListTenantRequest::MergeFrom(const ListTenantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.ListTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListTenantRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.ListTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTenantRequest::CopyFrom(const ListTenantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.ListTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTenantRequest::IsInitialized() const {
  return true;
}

void ListTenantRequest::InternalSwap(ListTenantRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTenantRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTenantResponse::InitAsDefaultInstance() {
}
class ListTenantResponse::_Internal {
 public:
};

ListTenantResponse::ListTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tenants_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.ListTenantResponse)
}
ListTenantResponse::ListTenantResponse(const ListTenantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tenants_(from.tenants_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.ListTenantResponse)
}

void ListTenantResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  invalid_count_ = 0u;
}

ListTenantResponse::~ListTenantResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.ListTenantResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTenantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListTenantResponse::ArenaDtor(void* object) {
  ListTenantResponse* _this = reinterpret_cast< ListTenantResponse* >(object);
  (void)_this;
}
void ListTenantResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTenantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTenantResponse& ListTenantResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void ListTenantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.ListTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tenants_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTenantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.mkp.v202407.Tenant tenants = 1[json_name = "tenants"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tenants(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTenantResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.ListTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Tenant tenants = 1[json_name = "tenants"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tenants_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tenants(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.ListTenantResponse)
  return target;
}

size_t ListTenantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.ListTenantResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.mkp.v202407.Tenant tenants = 1[json_name = "tenants"];
  total_size += 1UL * this->_internal_tenants_size();
  for (const auto& msg : this->tenants_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTenantResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.ListTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTenantResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTenantResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.ListTenantResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.ListTenantResponse)
    MergeFrom(*source);
  }
}

void ListTenantResponse::MergeFrom(const ListTenantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.ListTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tenants_.MergeFrom(from.tenants_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListTenantResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.ListTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTenantResponse::CopyFrom(const ListTenantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.ListTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTenantResponse::IsInitialized() const {
  return true;
}

void ListTenantResponse::InternalSwap(ListTenantResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tenants_.InternalSwap(&other->tenants_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTenantResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTenantRequest::InitAsDefaultInstance() {
}
class GetTenantRequest::_Internal {
 public:
};

GetTenantRequest::GetTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.GetTenantRequest)
}
GetTenantRequest::GetTenantRequest(const GetTenantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.GetTenantRequest)
}

void GetTenantRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTenantRequest::~GetTenantRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.GetTenantRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTenantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTenantRequest::ArenaDtor(void* object) {
  GetTenantRequest* _this = reinterpret_cast< GetTenantRequest* >(object);
  (void)_this;
}
void GetTenantRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTenantRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTenantRequest& GetTenantRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void GetTenantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.GetTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTenantRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.GetTenantRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTenantRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.GetTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.GetTenantRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.GetTenantRequest)
  return target;
}

size_t GetTenantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.GetTenantRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTenantRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.GetTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTenantRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTenantRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.GetTenantRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.GetTenantRequest)
    MergeFrom(*source);
  }
}

void GetTenantRequest::MergeFrom(const GetTenantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.GetTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetTenantRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.GetTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTenantRequest::CopyFrom(const GetTenantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.GetTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTenantRequest::IsInitialized() const {
  return true;
}

void GetTenantRequest::InternalSwap(GetTenantRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTenantRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTenantResponse::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_GetTenantResponse_default_instance_._instance.get_mutable()->tenant_ = const_cast< ::kentik::mkp::v202407::Tenant*>(
      ::kentik::mkp::v202407::Tenant::internal_default_instance());
}
class GetTenantResponse::_Internal {
 public:
  static const ::kentik::mkp::v202407::Tenant& tenant(const GetTenantResponse* msg);
};

const ::kentik::mkp::v202407::Tenant&
GetTenantResponse::_Internal::tenant(const GetTenantResponse* msg) {
  return *msg->tenant_;
}
GetTenantResponse::GetTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.GetTenantResponse)
}
GetTenantResponse::GetTenantResponse(const GetTenantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tenant()) {
    tenant_ = new ::kentik::mkp::v202407::Tenant(*from.tenant_);
  } else {
    tenant_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.GetTenantResponse)
}

void GetTenantResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  tenant_ = nullptr;
}

GetTenantResponse::~GetTenantResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.GetTenantResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTenantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tenant_;
}

void GetTenantResponse::ArenaDtor(void* object) {
  GetTenantResponse* _this = reinterpret_cast< GetTenantResponse* >(object);
  (void)_this;
}
void GetTenantResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTenantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTenantResponse& GetTenantResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void GetTenantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.GetTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTenantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tenant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTenantResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.GetTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tenant(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.GetTenantResponse)
  return target;
}

size_t GetTenantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.GetTenantResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tenant_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTenantResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.GetTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTenantResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTenantResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.GetTenantResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.GetTenantResponse)
    MergeFrom(*source);
  }
}

void GetTenantResponse::MergeFrom(const GetTenantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.GetTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tenant()) {
    _internal_mutable_tenant()->::kentik::mkp::v202407::Tenant::MergeFrom(from._internal_tenant());
  }
}

void GetTenantResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.GetTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTenantResponse::CopyFrom(const GetTenantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.GetTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTenantResponse::IsInitialized() const {
  return true;
}

void GetTenantResponse::InternalSwap(GetTenantResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tenant_, other->tenant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTenantResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTenantRequest::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_CreateTenantRequest_default_instance_._instance.get_mutable()->tenant_ = const_cast< ::kentik::mkp::v202407::Tenant*>(
      ::kentik::mkp::v202407::Tenant::internal_default_instance());
}
class CreateTenantRequest::_Internal {
 public:
  static const ::kentik::mkp::v202407::Tenant& tenant(const CreateTenantRequest* msg);
};

const ::kentik::mkp::v202407::Tenant&
CreateTenantRequest::_Internal::tenant(const CreateTenantRequest* msg) {
  return *msg->tenant_;
}
CreateTenantRequest::CreateTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.CreateTenantRequest)
}
CreateTenantRequest::CreateTenantRequest(const CreateTenantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tenant()) {
    tenant_ = new ::kentik::mkp::v202407::Tenant(*from.tenant_);
  } else {
    tenant_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.CreateTenantRequest)
}

void CreateTenantRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  tenant_ = nullptr;
}

CreateTenantRequest::~CreateTenantRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.CreateTenantRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTenantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tenant_;
}

void CreateTenantRequest::ArenaDtor(void* object) {
  CreateTenantRequest* _this = reinterpret_cast< CreateTenantRequest* >(object);
  (void)_this;
}
void CreateTenantRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTenantRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTenantRequest& CreateTenantRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void CreateTenantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.CreateTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTenantRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tenant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTenantRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.CreateTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tenant(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.CreateTenantRequest)
  return target;
}

size_t CreateTenantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.CreateTenantRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tenant_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTenantRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.CreateTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTenantRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTenantRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.CreateTenantRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.CreateTenantRequest)
    MergeFrom(*source);
  }
}

void CreateTenantRequest::MergeFrom(const CreateTenantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.CreateTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tenant()) {
    _internal_mutable_tenant()->::kentik::mkp::v202407::Tenant::MergeFrom(from._internal_tenant());
  }
}

void CreateTenantRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.CreateTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTenantRequest::CopyFrom(const CreateTenantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.CreateTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTenantRequest::IsInitialized() const {
  return true;
}

void CreateTenantRequest::InternalSwap(CreateTenantRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tenant_, other->tenant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTenantRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTenantResponse::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_CreateTenantResponse_default_instance_._instance.get_mutable()->tenant_ = const_cast< ::kentik::mkp::v202407::Tenant*>(
      ::kentik::mkp::v202407::Tenant::internal_default_instance());
}
class CreateTenantResponse::_Internal {
 public:
  static const ::kentik::mkp::v202407::Tenant& tenant(const CreateTenantResponse* msg);
};

const ::kentik::mkp::v202407::Tenant&
CreateTenantResponse::_Internal::tenant(const CreateTenantResponse* msg) {
  return *msg->tenant_;
}
CreateTenantResponse::CreateTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.CreateTenantResponse)
}
CreateTenantResponse::CreateTenantResponse(const CreateTenantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tenant()) {
    tenant_ = new ::kentik::mkp::v202407::Tenant(*from.tenant_);
  } else {
    tenant_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.CreateTenantResponse)
}

void CreateTenantResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  tenant_ = nullptr;
}

CreateTenantResponse::~CreateTenantResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.CreateTenantResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTenantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tenant_;
}

void CreateTenantResponse::ArenaDtor(void* object) {
  CreateTenantResponse* _this = reinterpret_cast< CreateTenantResponse* >(object);
  (void)_this;
}
void CreateTenantResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTenantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTenantResponse& CreateTenantResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void CreateTenantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.CreateTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTenantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tenant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTenantResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.CreateTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tenant(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.CreateTenantResponse)
  return target;
}

size_t CreateTenantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.CreateTenantResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tenant_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTenantResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.CreateTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTenantResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTenantResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.CreateTenantResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.CreateTenantResponse)
    MergeFrom(*source);
  }
}

void CreateTenantResponse::MergeFrom(const CreateTenantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.CreateTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tenant()) {
    _internal_mutable_tenant()->::kentik::mkp::v202407::Tenant::MergeFrom(from._internal_tenant());
  }
}

void CreateTenantResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.CreateTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTenantResponse::CopyFrom(const CreateTenantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.CreateTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTenantResponse::IsInitialized() const {
  return true;
}

void CreateTenantResponse::InternalSwap(CreateTenantResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tenant_, other->tenant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTenantResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateTenantRequest::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_UpdateTenantRequest_default_instance_._instance.get_mutable()->tenant_ = const_cast< ::kentik::mkp::v202407::Tenant*>(
      ::kentik::mkp::v202407::Tenant::internal_default_instance());
}
class UpdateTenantRequest::_Internal {
 public:
  static const ::kentik::mkp::v202407::Tenant& tenant(const UpdateTenantRequest* msg);
};

const ::kentik::mkp::v202407::Tenant&
UpdateTenantRequest::_Internal::tenant(const UpdateTenantRequest* msg) {
  return *msg->tenant_;
}
UpdateTenantRequest::UpdateTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.UpdateTenantRequest)
}
UpdateTenantRequest::UpdateTenantRequest(const UpdateTenantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tenant()) {
    tenant_ = new ::kentik::mkp::v202407::Tenant(*from.tenant_);
  } else {
    tenant_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.UpdateTenantRequest)
}

void UpdateTenantRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  tenant_ = nullptr;
}

UpdateTenantRequest::~UpdateTenantRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.UpdateTenantRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateTenantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tenant_;
}

void UpdateTenantRequest::ArenaDtor(void* object) {
  UpdateTenantRequest* _this = reinterpret_cast< UpdateTenantRequest* >(object);
  (void)_this;
}
void UpdateTenantRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTenantRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTenantRequest& UpdateTenantRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void UpdateTenantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.UpdateTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTenantRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tenant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTenantRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.UpdateTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tenant(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.UpdateTenantRequest)
  return target;
}

size_t UpdateTenantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.UpdateTenantRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tenant_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTenantRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.UpdateTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTenantRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateTenantRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.UpdateTenantRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.UpdateTenantRequest)
    MergeFrom(*source);
  }
}

void UpdateTenantRequest::MergeFrom(const UpdateTenantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.UpdateTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tenant()) {
    _internal_mutable_tenant()->::kentik::mkp::v202407::Tenant::MergeFrom(from._internal_tenant());
  }
}

void UpdateTenantRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.UpdateTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTenantRequest::CopyFrom(const UpdateTenantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.UpdateTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTenantRequest::IsInitialized() const {
  return true;
}

void UpdateTenantRequest::InternalSwap(UpdateTenantRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tenant_, other->tenant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTenantRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateTenantResponse::InitAsDefaultInstance() {
  ::kentik::mkp::v202407::_UpdateTenantResponse_default_instance_._instance.get_mutable()->tenant_ = const_cast< ::kentik::mkp::v202407::Tenant*>(
      ::kentik::mkp::v202407::Tenant::internal_default_instance());
}
class UpdateTenantResponse::_Internal {
 public:
  static const ::kentik::mkp::v202407::Tenant& tenant(const UpdateTenantResponse* msg);
};

const ::kentik::mkp::v202407::Tenant&
UpdateTenantResponse::_Internal::tenant(const UpdateTenantResponse* msg) {
  return *msg->tenant_;
}
UpdateTenantResponse::UpdateTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.UpdateTenantResponse)
}
UpdateTenantResponse::UpdateTenantResponse(const UpdateTenantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tenant()) {
    tenant_ = new ::kentik::mkp::v202407::Tenant(*from.tenant_);
  } else {
    tenant_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.UpdateTenantResponse)
}

void UpdateTenantResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  tenant_ = nullptr;
}

UpdateTenantResponse::~UpdateTenantResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.UpdateTenantResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateTenantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tenant_;
}

void UpdateTenantResponse::ArenaDtor(void* object) {
  UpdateTenantResponse* _this = reinterpret_cast< UpdateTenantResponse* >(object);
  (void)_this;
}
void UpdateTenantResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTenantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTenantResponse& UpdateTenantResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void UpdateTenantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.UpdateTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tenant_ != nullptr) {
    delete tenant_;
  }
  tenant_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTenantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tenant(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTenantResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.UpdateTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tenant(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.UpdateTenantResponse)
  return target;
}

size_t UpdateTenantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.UpdateTenantResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.mkp.v202407.Tenant tenant = 1[json_name = "tenant"];
  if (this->has_tenant()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tenant_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTenantResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.UpdateTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTenantResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateTenantResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.UpdateTenantResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.UpdateTenantResponse)
    MergeFrom(*source);
  }
}

void UpdateTenantResponse::MergeFrom(const UpdateTenantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.UpdateTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tenant()) {
    _internal_mutable_tenant()->::kentik::mkp::v202407::Tenant::MergeFrom(from._internal_tenant());
  }
}

void UpdateTenantResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.UpdateTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTenantResponse::CopyFrom(const UpdateTenantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.UpdateTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTenantResponse::IsInitialized() const {
  return true;
}

void UpdateTenantResponse::InternalSwap(UpdateTenantResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(tenant_, other->tenant_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTenantResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTenantRequest::InitAsDefaultInstance() {
}
class DeleteTenantRequest::_Internal {
 public:
};

DeleteTenantRequest::DeleteTenantRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.DeleteTenantRequest)
}
DeleteTenantRequest::DeleteTenantRequest(const DeleteTenantRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.DeleteTenantRequest)
}

void DeleteTenantRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTenantRequest::~DeleteTenantRequest() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.DeleteTenantRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTenantRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTenantRequest::ArenaDtor(void* object) {
  DeleteTenantRequest* _this = reinterpret_cast< DeleteTenantRequest* >(object);
  (void)_this;
}
void DeleteTenantRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTenantRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTenantRequest& DeleteTenantRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTenantRequest_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void DeleteTenantRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.DeleteTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTenantRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.mkp.v202407.DeleteTenantRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTenantRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.DeleteTenantRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.mkp.v202407.DeleteTenantRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.DeleteTenantRequest)
  return target;
}

size_t DeleteTenantRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.DeleteTenantRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTenantRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.DeleteTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTenantRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTenantRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.DeleteTenantRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.DeleteTenantRequest)
    MergeFrom(*source);
  }
}

void DeleteTenantRequest::MergeFrom(const DeleteTenantRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.DeleteTenantRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteTenantRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.DeleteTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTenantRequest::CopyFrom(const DeleteTenantRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.DeleteTenantRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTenantRequest::IsInitialized() const {
  return true;
}

void DeleteTenantRequest::InternalSwap(DeleteTenantRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTenantRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTenantResponse::InitAsDefaultInstance() {
}
class DeleteTenantResponse::_Internal {
 public:
};

DeleteTenantResponse::DeleteTenantResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.mkp.v202407.DeleteTenantResponse)
}
DeleteTenantResponse::DeleteTenantResponse(const DeleteTenantResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.mkp.v202407.DeleteTenantResponse)
}

void DeleteTenantResponse::SharedCtor() {
}

DeleteTenantResponse::~DeleteTenantResponse() {
  // @@protoc_insertion_point(destructor:kentik.mkp.v202407.DeleteTenantResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTenantResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteTenantResponse::ArenaDtor(void* object) {
  DeleteTenantResponse* _this = reinterpret_cast< DeleteTenantResponse* >(object);
  (void)_this;
}
void DeleteTenantResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTenantResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTenantResponse& DeleteTenantResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTenantResponse_kentik_2fmkp_2fv202407_2fmkp_2eproto.base);
  return *internal_default_instance();
}


void DeleteTenantResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.mkp.v202407.DeleteTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTenantResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTenantResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.mkp.v202407.DeleteTenantResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.mkp.v202407.DeleteTenantResponse)
  return target;
}

size_t DeleteTenantResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.mkp.v202407.DeleteTenantResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTenantResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.mkp.v202407.DeleteTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTenantResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTenantResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.mkp.v202407.DeleteTenantResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.mkp.v202407.DeleteTenantResponse)
    MergeFrom(*source);
  }
}

void DeleteTenantResponse::MergeFrom(const DeleteTenantResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.mkp.v202407.DeleteTenantResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteTenantResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.mkp.v202407.DeleteTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTenantResponse::CopyFrom(const DeleteTenantResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.mkp.v202407.DeleteTenantResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTenantResponse::IsInitialized() const {
  return true;
}

void DeleteTenantResponse::InternalSwap(DeleteTenantResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTenantResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202407
}  // namespace mkp
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Alert* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Alert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Alert >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Asset_Report* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Asset_Report >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Asset_Report >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Asset* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Threshold* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Threshold >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Threshold >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Activate* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Activate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Activate >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Condition* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Condition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Condition >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Mitigation* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Mitigation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Mitigation >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::NotificationChannel* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::NotificationChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::NotificationChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::TenantLink* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::TenantLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::TenantLink >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Package* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Package >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Package >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::CustomDimension* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::CustomDimension >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::CustomDimension >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Devices* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Devices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Devices >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::FilterField* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::FilterField >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::FilterField >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Filter* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::Tenant* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::Tenant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::Tenant >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::ListPackageRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::ListPackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::ListPackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::ListPackageResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::ListPackageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::ListPackageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::GetPackageRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::GetPackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::GetPackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::GetPackageResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::GetPackageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::GetPackageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::CreatePackageRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::CreatePackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::CreatePackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::CreatePackageResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::CreatePackageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::CreatePackageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::UpdatePackageRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::UpdatePackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::UpdatePackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::UpdatePackageResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::UpdatePackageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::UpdatePackageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::DeletePackageRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::DeletePackageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::DeletePackageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::DeletePackageResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::DeletePackageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::DeletePackageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::ListTenantRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::ListTenantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::ListTenantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::ListTenantResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::ListTenantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::ListTenantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::GetTenantRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::GetTenantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::GetTenantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::GetTenantResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::GetTenantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::GetTenantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::CreateTenantRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::CreateTenantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::CreateTenantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::CreateTenantResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::CreateTenantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::CreateTenantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::UpdateTenantRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::UpdateTenantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::UpdateTenantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::UpdateTenantResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::UpdateTenantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::UpdateTenantResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::DeleteTenantRequest* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::DeleteTenantRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::DeleteTenantRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::mkp::v202407::DeleteTenantResponse* Arena::CreateMaybeMessage< ::kentik::mkp::v202407::DeleteTenantResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::mkp::v202407::DeleteTenantResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
