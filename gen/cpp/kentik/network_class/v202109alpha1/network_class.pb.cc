// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/network_class/v202109alpha1/network_class.proto

#include "kentik/network_class/v202109alpha1/network_class.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudSubnet_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto;
namespace kentik {
namespace network_class {
namespace v202109alpha1 {
class CloudSubnetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloudSubnet> _instance;
} _CloudSubnet_default_instance_;
class NetworkClassDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkClass> _instance;
} _NetworkClass_default_instance_;
class GetNetworkClassRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNetworkClassRequest> _instance;
} _GetNetworkClassRequest_default_instance_;
class GetNetworkClassResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNetworkClassResponse> _instance;
} _GetNetworkClassResponse_default_instance_;
class UpdateNetworkClassRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateNetworkClassRequest> _instance;
} _UpdateNetworkClassRequest_default_instance_;
class UpdateNetworkClassResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateNetworkClassResponse> _instance;
} _UpdateNetworkClassResponse_default_instance_;
}  // namespace v202109alpha1
}  // namespace network_class
}  // namespace kentik
static void InitDefaultsscc_info_CloudSubnet_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::network_class::v202109alpha1::_CloudSubnet_default_instance_;
    new (ptr) ::kentik::network_class::v202109alpha1::CloudSubnet();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::network_class::v202109alpha1::CloudSubnet::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloudSubnet_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloudSubnet_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto}, {}};

static void InitDefaultsscc_info_GetNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::network_class::v202109alpha1::_GetNetworkClassRequest_default_instance_;
    new (ptr) ::kentik::network_class::v202109alpha1::GetNetworkClassRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::network_class::v202109alpha1::GetNetworkClassRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto}, {}};

static void InitDefaultsscc_info_GetNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::network_class::v202109alpha1::_GetNetworkClassResponse_default_instance_;
    new (ptr) ::kentik::network_class::v202109alpha1::GetNetworkClassResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::network_class::v202109alpha1::GetNetworkClassResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto}, {
      &scc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,}};

static void InitDefaultsscc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::network_class::v202109alpha1::_NetworkClass_default_instance_;
    new (ptr) ::kentik::network_class::v202109alpha1::NetworkClass();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::network_class::v202109alpha1::NetworkClass::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto}, {
      &scc_info_CloudSubnet_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,}};

static void InitDefaultsscc_info_UpdateNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::network_class::v202109alpha1::_UpdateNetworkClassRequest_default_instance_;
    new (ptr) ::kentik::network_class::v202109alpha1::UpdateNetworkClassRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::network_class::v202109alpha1::UpdateNetworkClassRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto}, {
      &scc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,}};

static void InitDefaultsscc_info_UpdateNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::network_class::v202109alpha1::_UpdateNetworkClassResponse_default_instance_;
    new (ptr) ::kentik::network_class::v202109alpha1::UpdateNetworkClassResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::network_class::v202109alpha1::UpdateNetworkClassResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto}, {
      &scc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::CloudSubnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::CloudSubnet, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::CloudSubnet, subnets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::NetworkClass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::NetworkClass, internal_asns_),
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::NetworkClass, internal_ips_),
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::NetworkClass, use_private_asns_),
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::NetworkClass, use_private_subnets_),
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::NetworkClass, cloud_subnets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::GetNetworkClassRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::GetNetworkClassResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::GetNetworkClassResponse, network_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::UpdateNetworkClassRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::UpdateNetworkClassRequest, network_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::UpdateNetworkClassResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::network_class::v202109alpha1::UpdateNetworkClassResponse, network_class_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::network_class::v202109alpha1::CloudSubnet)},
  { 7, -1, sizeof(::kentik::network_class::v202109alpha1::NetworkClass)},
  { 17, -1, sizeof(::kentik::network_class::v202109alpha1::GetNetworkClassRequest)},
  { 22, -1, sizeof(::kentik::network_class::v202109alpha1::GetNetworkClassResponse)},
  { 28, -1, sizeof(::kentik::network_class::v202109alpha1::UpdateNetworkClassRequest)},
  { 34, -1, sizeof(::kentik::network_class::v202109alpha1::UpdateNetworkClassResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::network_class::v202109alpha1::_CloudSubnet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::network_class::v202109alpha1::_NetworkClass_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::network_class::v202109alpha1::_GetNetworkClassRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::network_class::v202109alpha1::_GetNetworkClassResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::network_class::v202109alpha1::_UpdateNetworkClassRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::network_class::v202109alpha1::_UpdateNetworkClassResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6kentik/network_class/v202109alpha1/net"
  "work_class.proto\022\"kentik.network_class.v"
  "202109alpha1\032\034google/api/annotations.pro"
  "to\032\027google/api/client.proto\032\030google/type"
  "/latlng.proto\032 google/type/postal_addres"
  "s.proto\032.protoc-gen-openapiv2/options/an"
  "notations.proto\032+kentik/core/v202012alph"
  "a1/annotations.proto\"j\n\013CloudSubnet\022A\n\004t"
  "ype\030\001 \001(\0162-.kentik.network_class.v202109"
  "alpha1.CloudTypeR\004type\022\030\n\007subnets\030\002 \003(\tR"
  "\007subnets\"\206\002\n\014NetworkClass\022#\n\rinternal_as"
  "ns\030\001 \003(\tR\014internalAsns\022!\n\014internal_ips\030\002"
  " \003(\tR\013internalIps\022(\n\020use_private_asns\030\003 "
  "\001(\010R\016usePrivateAsns\022.\n\023use_private_subne"
  "ts\030\004 \001(\010R\021usePrivateSubnets\022T\n\rcloud_sub"
  "nets\030\005 \003(\0132/.kentik.network_class.v20210"
  "9alpha1.CloudSubnetR\014cloudSubnets\"\030\n\026Get"
  "NetworkClassRequest\"p\n\027GetNetworkClassRe"
  "sponse\022U\n\rnetwork_class\030\001 \001(\01320.kentik.n"
  "etwork_class.v202109alpha1.NetworkClassR"
  "\014networkClass\"r\n\031UpdateNetworkClassReque"
  "st\022U\n\rnetwork_class\030\001 \001(\01320.kentik.netwo"
  "rk_class.v202109alpha1.NetworkClassR\014net"
  "workClass\"s\n\032UpdateNetworkClassResponse\022"
  "U\n\rnetwork_class\030\001 \001(\01320.kentik.network_"
  "class.v202109alpha1.NetworkClassR\014networ"
  "kClass*y\n\tCloudType\022\032\n\026CLOUD_TYPE_UNSPEC"
  "IFIED\020\000\022\022\n\016CLOUD_TYPE_AWS\020\001\022\024\n\020CLOUD_TYP"
  "E_AZURE\020\002\022\022\n\016CLOUD_TYPE_GCE\020\003\022\022\n\016CLOUD_T"
  "YPE_IBM\020\0042\212\006\n\023NetworkClassService\022\323\002\n\017Ge"
  "tNetworkClass\022:.kentik.network_class.v20"
  "2109alpha1.GetNetworkClassRequest\032;.kent"
  "ik.network_class.v202109alpha1.GetNetwor"
  "kClassResponse\"\306\001\222Au\022\035Get a network clas"
  "sification.\032CReturns information about a"
  " network classification for the company."
  "*\017NetworkClassGet\362\327\002\030admin.network_class"
  ":read\202\323\344\223\002,\022*/network_class/v202109alpha"
  "1/network_class\022\351\002\n\022UpdateNetworkClass\022="
  ".kentik.network_class.v202109alpha1.Upda"
  "teNetworkClassRequest\032>.kentik.network_c"
  "lass.v202109alpha1.UpdateNetworkClassRes"
  "ponse\"\323\001\222A~\022 Update a network classifica"
  "tion.\032FReplaces the entire network class"
  "ification attributes for the company.*\022N"
  "etworkClassUpdate\362\327\002\031admin.network_class"
  ":write\202\323\344\223\002/\"*/network_class/v202109alph"
  "a1/network_class:\001*\0321\312A\023grpc.api.kentik."
  "com\352\327\002\023admin.network_class\220\330\002\003B\334\002ZTgithu"
  "b.com/kentik/api-schema/gen/go/kentik/ne"
  "twork_class/v202109alpha1;network_class\222"
  "A\202\002\022D\n\032Network Classification API\"\030\n\026Ken"
  "tik API Engineering2\014202109alpha1*\001\0022\020ap"
  "plication/json:\020application/jsonZD\n\036\n\005em"
  "ail\022\025\010\002\032\017X-CH-Auth-Email \002\n\"\n\005token\022\031\010\002\032"
  "\023X-CH-Auth-API-Token \002b\026\n\t\n\005email\022\000\n\t\n\005t"
  "oken\022\000r5\n\026More about Kentik APIs\022\033https:"
  "//docs.kentik.com/apib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2ftype_2flatlng_2eproto,
  &::descriptor_table_google_2ftype_2fpostal_5faddress_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202012alpha1_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto_sccs[6] = {
  &scc_info_CloudSubnet_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,
  &scc_info_GetNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,
  &scc_info_GetNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,
  &scc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,
  &scc_info_UpdateNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,
  &scc_info_UpdateNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto, "kentik/network_class/v202109alpha1/network_class.proto", 2309,
  &descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto_once, descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto_sccs, descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto_deps, 6, 6,
  schemas, file_default_instances, TableStruct_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto::offsets,
  file_level_metadata_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto, 6, file_level_enum_descriptors_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto, file_level_service_descriptors_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto)), true);
namespace kentik {
namespace network_class {
namespace v202109alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CloudType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto);
  return file_level_enum_descriptors_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto[0];
}
bool CloudType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CloudSubnet::InitAsDefaultInstance() {
}
class CloudSubnet::_Internal {
 public:
};

CloudSubnet::CloudSubnet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  subnets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.network_class.v202109alpha1.CloudSubnet)
}
CloudSubnet::CloudSubnet(const CloudSubnet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subnets_(from.subnets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kentik.network_class.v202109alpha1.CloudSubnet)
}

void CloudSubnet::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloudSubnet_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  type_ = 0;
}

CloudSubnet::~CloudSubnet() {
  // @@protoc_insertion_point(destructor:kentik.network_class.v202109alpha1.CloudSubnet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloudSubnet::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CloudSubnet::ArenaDtor(void* object) {
  CloudSubnet* _this = reinterpret_cast< CloudSubnet* >(object);
  (void)_this;
}
void CloudSubnet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloudSubnet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloudSubnet& CloudSubnet::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloudSubnet_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  return *internal_default_instance();
}


void CloudSubnet::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.network_class.v202109alpha1.CloudSubnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subnets_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudSubnet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.network_class.v202109alpha1.CloudType type = 1[json_name = "type"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::network_class::v202109alpha1::CloudType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string subnets = 2[json_name = "subnets"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subnets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.network_class.v202109alpha1.CloudSubnet.subnets"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloudSubnet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.network_class.v202109alpha1.CloudSubnet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.network_class.v202109alpha1.CloudType type = 1[json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // repeated string subnets = 2[json_name = "subnets"];
  for (int i = 0, n = this->_internal_subnets_size(); i < n; i++) {
    const auto& s = this->_internal_subnets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.network_class.v202109alpha1.CloudSubnet.subnets");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.network_class.v202109alpha1.CloudSubnet)
  return target;
}

size_t CloudSubnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.network_class.v202109alpha1.CloudSubnet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subnets = 2[json_name = "subnets"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(subnets_.size());
  for (int i = 0, n = subnets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      subnets_.Get(i));
  }

  // .kentik.network_class.v202109alpha1.CloudType type = 1[json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloudSubnet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.network_class.v202109alpha1.CloudSubnet)
  GOOGLE_DCHECK_NE(&from, this);
  const CloudSubnet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloudSubnet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.network_class.v202109alpha1.CloudSubnet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.network_class.v202109alpha1.CloudSubnet)
    MergeFrom(*source);
  }
}

void CloudSubnet::MergeFrom(const CloudSubnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.network_class.v202109alpha1.CloudSubnet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subnets_.MergeFrom(from.subnets_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CloudSubnet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.network_class.v202109alpha1.CloudSubnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloudSubnet::CopyFrom(const CloudSubnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.network_class.v202109alpha1.CloudSubnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudSubnet::IsInitialized() const {
  return true;
}

void CloudSubnet::InternalSwap(CloudSubnet* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  subnets_.InternalSwap(&other->subnets_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudSubnet::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkClass::InitAsDefaultInstance() {
}
class NetworkClass::_Internal {
 public:
};

NetworkClass::NetworkClass(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  internal_asns_(arena),
  internal_ips_(arena),
  cloud_subnets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.network_class.v202109alpha1.NetworkClass)
}
NetworkClass::NetworkClass(const NetworkClass& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      internal_asns_(from.internal_asns_),
      internal_ips_(from.internal_ips_),
      cloud_subnets_(from.cloud_subnets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&use_private_asns_, &from.use_private_asns_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_private_subnets_) -
    reinterpret_cast<char*>(&use_private_asns_)) + sizeof(use_private_subnets_));
  // @@protoc_insertion_point(copy_constructor:kentik.network_class.v202109alpha1.NetworkClass)
}

void NetworkClass::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  ::memset(&use_private_asns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_private_subnets_) -
      reinterpret_cast<char*>(&use_private_asns_)) + sizeof(use_private_subnets_));
}

NetworkClass::~NetworkClass() {
  // @@protoc_insertion_point(destructor:kentik.network_class.v202109alpha1.NetworkClass)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkClass::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkClass::ArenaDtor(void* object) {
  NetworkClass* _this = reinterpret_cast< NetworkClass* >(object);
  (void)_this;
}
void NetworkClass::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkClass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkClass& NetworkClass::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkClass_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  return *internal_default_instance();
}


void NetworkClass::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.network_class.v202109alpha1.NetworkClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  internal_asns_.Clear();
  internal_ips_.Clear();
  cloud_subnets_.Clear();
  ::memset(&use_private_asns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_private_subnets_) -
      reinterpret_cast<char*>(&use_private_asns_)) + sizeof(use_private_subnets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkClass::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string internal_asns = 1[json_name = "internalAsns"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_internal_asns();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.network_class.v202109alpha1.NetworkClass.internal_asns"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string internal_ips = 2[json_name = "internalIps"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_internal_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.network_class.v202109alpha1.NetworkClass.internal_ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // bool use_private_asns = 3[json_name = "usePrivateAsns"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_private_asns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_private_subnets = 4[json_name = "usePrivateSubnets"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          use_private_subnets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.network_class.v202109alpha1.CloudSubnet cloud_subnets = 5[json_name = "cloudSubnets"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cloud_subnets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkClass::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.network_class.v202109alpha1.NetworkClass)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string internal_asns = 1[json_name = "internalAsns"];
  for (int i = 0, n = this->_internal_internal_asns_size(); i < n; i++) {
    const auto& s = this->_internal_internal_asns(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.network_class.v202109alpha1.NetworkClass.internal_asns");
    target = stream->WriteString(1, s, target);
  }

  // repeated string internal_ips = 2[json_name = "internalIps"];
  for (int i = 0, n = this->_internal_internal_ips_size(); i < n; i++) {
    const auto& s = this->_internal_internal_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.network_class.v202109alpha1.NetworkClass.internal_ips");
    target = stream->WriteString(2, s, target);
  }

  // bool use_private_asns = 3[json_name = "usePrivateAsns"];
  if (this->use_private_asns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_private_asns(), target);
  }

  // bool use_private_subnets = 4[json_name = "usePrivateSubnets"];
  if (this->use_private_subnets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_use_private_subnets(), target);
  }

  // repeated .kentik.network_class.v202109alpha1.CloudSubnet cloud_subnets = 5[json_name = "cloudSubnets"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cloud_subnets_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_cloud_subnets(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.network_class.v202109alpha1.NetworkClass)
  return target;
}

size_t NetworkClass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.network_class.v202109alpha1.NetworkClass)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string internal_asns = 1[json_name = "internalAsns"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(internal_asns_.size());
  for (int i = 0, n = internal_asns_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      internal_asns_.Get(i));
  }

  // repeated string internal_ips = 2[json_name = "internalIps"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(internal_ips_.size());
  for (int i = 0, n = internal_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      internal_ips_.Get(i));
  }

  // repeated .kentik.network_class.v202109alpha1.CloudSubnet cloud_subnets = 5[json_name = "cloudSubnets"];
  total_size += 1UL * this->_internal_cloud_subnets_size();
  for (const auto& msg : this->cloud_subnets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool use_private_asns = 3[json_name = "usePrivateAsns"];
  if (this->use_private_asns() != 0) {
    total_size += 1 + 1;
  }

  // bool use_private_subnets = 4[json_name = "usePrivateSubnets"];
  if (this->use_private_subnets() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkClass::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.network_class.v202109alpha1.NetworkClass)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkClass* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkClass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.network_class.v202109alpha1.NetworkClass)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.network_class.v202109alpha1.NetworkClass)
    MergeFrom(*source);
  }
}

void NetworkClass::MergeFrom(const NetworkClass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.network_class.v202109alpha1.NetworkClass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  internal_asns_.MergeFrom(from.internal_asns_);
  internal_ips_.MergeFrom(from.internal_ips_);
  cloud_subnets_.MergeFrom(from.cloud_subnets_);
  if (from.use_private_asns() != 0) {
    _internal_set_use_private_asns(from._internal_use_private_asns());
  }
  if (from.use_private_subnets() != 0) {
    _internal_set_use_private_subnets(from._internal_use_private_subnets());
  }
}

void NetworkClass::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.network_class.v202109alpha1.NetworkClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkClass::CopyFrom(const NetworkClass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.network_class.v202109alpha1.NetworkClass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkClass::IsInitialized() const {
  return true;
}

void NetworkClass::InternalSwap(NetworkClass* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  internal_asns_.InternalSwap(&other->internal_asns_);
  internal_ips_.InternalSwap(&other->internal_ips_);
  cloud_subnets_.InternalSwap(&other->cloud_subnets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetworkClass, use_private_subnets_)
      + sizeof(NetworkClass::use_private_subnets_)
      - PROTOBUF_FIELD_OFFSET(NetworkClass, use_private_asns_)>(
          reinterpret_cast<char*>(&use_private_asns_),
          reinterpret_cast<char*>(&other->use_private_asns_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkClass::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNetworkClassRequest::InitAsDefaultInstance() {
}
class GetNetworkClassRequest::_Internal {
 public:
};

GetNetworkClassRequest::GetNetworkClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
}
GetNetworkClassRequest::GetNetworkClassRequest(const GetNetworkClassRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
}

void GetNetworkClassRequest::SharedCtor() {
}

GetNetworkClassRequest::~GetNetworkClassRequest() {
  // @@protoc_insertion_point(destructor:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkClassRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetNetworkClassRequest::ArenaDtor(void* object) {
  GetNetworkClassRequest* _this = reinterpret_cast< GetNetworkClassRequest* >(object);
  (void)_this;
}
void GetNetworkClassRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkClassRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkClassRequest& GetNetworkClassRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkClassRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkClassRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkClassRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  return target;
}

size_t GetNetworkClassRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkClassRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkClassRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkClassRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
    MergeFrom(*source);
  }
}

void GetNetworkClassRequest::MergeFrom(const GetNetworkClassRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetNetworkClassRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkClassRequest::CopyFrom(const GetNetworkClassRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.network_class.v202109alpha1.GetNetworkClassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkClassRequest::IsInitialized() const {
  return true;
}

void GetNetworkClassRequest::InternalSwap(GetNetworkClassRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkClassRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNetworkClassResponse::InitAsDefaultInstance() {
  ::kentik::network_class::v202109alpha1::_GetNetworkClassResponse_default_instance_._instance.get_mutable()->network_class_ = const_cast< ::kentik::network_class::v202109alpha1::NetworkClass*>(
      ::kentik::network_class::v202109alpha1::NetworkClass::internal_default_instance());
}
class GetNetworkClassResponse::_Internal {
 public:
  static const ::kentik::network_class::v202109alpha1::NetworkClass& network_class(const GetNetworkClassResponse* msg);
};

const ::kentik::network_class::v202109alpha1::NetworkClass&
GetNetworkClassResponse::_Internal::network_class(const GetNetworkClassResponse* msg) {
  return *msg->network_class_;
}
GetNetworkClassResponse::GetNetworkClassResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
}
GetNetworkClassResponse::GetNetworkClassResponse(const GetNetworkClassResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network_class()) {
    network_class_ = new ::kentik::network_class::v202109alpha1::NetworkClass(*from.network_class_);
  } else {
    network_class_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
}

void GetNetworkClassResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  network_class_ = nullptr;
}

GetNetworkClassResponse::~GetNetworkClassResponse() {
  // @@protoc_insertion_point(destructor:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNetworkClassResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete network_class_;
}

void GetNetworkClassResponse::ArenaDtor(void* object) {
  GetNetworkClassResponse* _this = reinterpret_cast< GetNetworkClassResponse* >(object);
  (void)_this;
}
void GetNetworkClassResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNetworkClassResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNetworkClassResponse& GetNetworkClassResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  return *internal_default_instance();
}


void GetNetworkClassResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && network_class_ != nullptr) {
    delete network_class_;
  }
  network_class_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNetworkClassResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_class(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNetworkClassResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
  if (this->has_network_class()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::network_class(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  return target;
}

size_t GetNetworkClassResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
  if (this->has_network_class()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_class_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNetworkClassResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNetworkClassResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNetworkClassResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
    MergeFrom(*source);
  }
}

void GetNetworkClassResponse::MergeFrom(const GetNetworkClassResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_network_class()) {
    _internal_mutable_network_class()->::kentik::network_class::v202109alpha1::NetworkClass::MergeFrom(from._internal_network_class());
  }
}

void GetNetworkClassResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNetworkClassResponse::CopyFrom(const GetNetworkClassResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.network_class.v202109alpha1.GetNetworkClassResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNetworkClassResponse::IsInitialized() const {
  return true;
}

void GetNetworkClassResponse::InternalSwap(GetNetworkClassResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(network_class_, other->network_class_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNetworkClassResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateNetworkClassRequest::InitAsDefaultInstance() {
  ::kentik::network_class::v202109alpha1::_UpdateNetworkClassRequest_default_instance_._instance.get_mutable()->network_class_ = const_cast< ::kentik::network_class::v202109alpha1::NetworkClass*>(
      ::kentik::network_class::v202109alpha1::NetworkClass::internal_default_instance());
}
class UpdateNetworkClassRequest::_Internal {
 public:
  static const ::kentik::network_class::v202109alpha1::NetworkClass& network_class(const UpdateNetworkClassRequest* msg);
};

const ::kentik::network_class::v202109alpha1::NetworkClass&
UpdateNetworkClassRequest::_Internal::network_class(const UpdateNetworkClassRequest* msg) {
  return *msg->network_class_;
}
UpdateNetworkClassRequest::UpdateNetworkClassRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
}
UpdateNetworkClassRequest::UpdateNetworkClassRequest(const UpdateNetworkClassRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network_class()) {
    network_class_ = new ::kentik::network_class::v202109alpha1::NetworkClass(*from.network_class_);
  } else {
    network_class_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
}

void UpdateNetworkClassRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  network_class_ = nullptr;
}

UpdateNetworkClassRequest::~UpdateNetworkClassRequest() {
  // @@protoc_insertion_point(destructor:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateNetworkClassRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete network_class_;
}

void UpdateNetworkClassRequest::ArenaDtor(void* object) {
  UpdateNetworkClassRequest* _this = reinterpret_cast< UpdateNetworkClassRequest* >(object);
  (void)_this;
}
void UpdateNetworkClassRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateNetworkClassRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateNetworkClassRequest& UpdateNetworkClassRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateNetworkClassRequest_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  return *internal_default_instance();
}


void UpdateNetworkClassRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && network_class_ != nullptr) {
    delete network_class_;
  }
  network_class_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNetworkClassRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_class(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateNetworkClassRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
  if (this->has_network_class()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::network_class(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  return target;
}

size_t UpdateNetworkClassRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
  if (this->has_network_class()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_class_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateNetworkClassRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateNetworkClassRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateNetworkClassRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
    MergeFrom(*source);
  }
}

void UpdateNetworkClassRequest::MergeFrom(const UpdateNetworkClassRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_network_class()) {
    _internal_mutable_network_class()->::kentik::network_class::v202109alpha1::NetworkClass::MergeFrom(from._internal_network_class());
  }
}

void UpdateNetworkClassRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateNetworkClassRequest::CopyFrom(const UpdateNetworkClassRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.network_class.v202109alpha1.UpdateNetworkClassRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetworkClassRequest::IsInitialized() const {
  return true;
}

void UpdateNetworkClassRequest::InternalSwap(UpdateNetworkClassRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(network_class_, other->network_class_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNetworkClassRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateNetworkClassResponse::InitAsDefaultInstance() {
  ::kentik::network_class::v202109alpha1::_UpdateNetworkClassResponse_default_instance_._instance.get_mutable()->network_class_ = const_cast< ::kentik::network_class::v202109alpha1::NetworkClass*>(
      ::kentik::network_class::v202109alpha1::NetworkClass::internal_default_instance());
}
class UpdateNetworkClassResponse::_Internal {
 public:
  static const ::kentik::network_class::v202109alpha1::NetworkClass& network_class(const UpdateNetworkClassResponse* msg);
};

const ::kentik::network_class::v202109alpha1::NetworkClass&
UpdateNetworkClassResponse::_Internal::network_class(const UpdateNetworkClassResponse* msg) {
  return *msg->network_class_;
}
UpdateNetworkClassResponse::UpdateNetworkClassResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
}
UpdateNetworkClassResponse::UpdateNetworkClassResponse(const UpdateNetworkClassResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_network_class()) {
    network_class_ = new ::kentik::network_class::v202109alpha1::NetworkClass(*from.network_class_);
  } else {
    network_class_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
}

void UpdateNetworkClassResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  network_class_ = nullptr;
}

UpdateNetworkClassResponse::~UpdateNetworkClassResponse() {
  // @@protoc_insertion_point(destructor:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateNetworkClassResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete network_class_;
}

void UpdateNetworkClassResponse::ArenaDtor(void* object) {
  UpdateNetworkClassResponse* _this = reinterpret_cast< UpdateNetworkClassResponse* >(object);
  (void)_this;
}
void UpdateNetworkClassResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateNetworkClassResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateNetworkClassResponse& UpdateNetworkClassResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateNetworkClassResponse_kentik_2fnetwork_5fclass_2fv202109alpha1_2fnetwork_5fclass_2eproto.base);
  return *internal_default_instance();
}


void UpdateNetworkClassResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && network_class_ != nullptr) {
    delete network_class_;
  }
  network_class_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateNetworkClassResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_class(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateNetworkClassResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
  if (this->has_network_class()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::network_class(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  return target;
}

size_t UpdateNetworkClassResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.network_class.v202109alpha1.NetworkClass network_class = 1[json_name = "networkClass"];
  if (this->has_network_class()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_class_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateNetworkClassResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateNetworkClassResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateNetworkClassResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
    MergeFrom(*source);
  }
}

void UpdateNetworkClassResponse::MergeFrom(const UpdateNetworkClassResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_network_class()) {
    _internal_mutable_network_class()->::kentik::network_class::v202109alpha1::NetworkClass::MergeFrom(from._internal_network_class());
  }
}

void UpdateNetworkClassResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateNetworkClassResponse::CopyFrom(const UpdateNetworkClassResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.network_class.v202109alpha1.UpdateNetworkClassResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateNetworkClassResponse::IsInitialized() const {
  return true;
}

void UpdateNetworkClassResponse::InternalSwap(UpdateNetworkClassResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(network_class_, other->network_class_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateNetworkClassResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202109alpha1
}  // namespace network_class
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::network_class::v202109alpha1::CloudSubnet* Arena::CreateMaybeMessage< ::kentik::network_class::v202109alpha1::CloudSubnet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::network_class::v202109alpha1::CloudSubnet >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::network_class::v202109alpha1::NetworkClass* Arena::CreateMaybeMessage< ::kentik::network_class::v202109alpha1::NetworkClass >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::network_class::v202109alpha1::NetworkClass >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::network_class::v202109alpha1::GetNetworkClassRequest* Arena::CreateMaybeMessage< ::kentik::network_class::v202109alpha1::GetNetworkClassRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::network_class::v202109alpha1::GetNetworkClassRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::network_class::v202109alpha1::GetNetworkClassResponse* Arena::CreateMaybeMessage< ::kentik::network_class::v202109alpha1::GetNetworkClassResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::network_class::v202109alpha1::GetNetworkClassResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::network_class::v202109alpha1::UpdateNetworkClassRequest* Arena::CreateMaybeMessage< ::kentik::network_class::v202109alpha1::UpdateNetworkClassRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::network_class::v202109alpha1::UpdateNetworkClassRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::network_class::v202109alpha1::UpdateNetworkClassResponse* Arena::CreateMaybeMessage< ::kentik::network_class::v202109alpha1::UpdateNetworkClassResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::network_class::v202109alpha1::UpdateNetworkClassResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
