// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/alerting/types/v202303/types.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto_2epb_2eh
#define kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
namespace kentik {
namespace alerting {
namespace types {
namespace v202303 {
class AttributeFilter;
struct AttributeFilterDefaultTypeInternal;
extern AttributeFilterDefaultTypeInternal _AttributeFilter_default_instance_;
class AttributeFilter_StringArray;
struct AttributeFilter_StringArrayDefaultTypeInternal;
extern AttributeFilter_StringArrayDefaultTypeInternal _AttributeFilter_StringArray_default_instance_;
class KeyValue;
struct KeyValueDefaultTypeInternal;
extern KeyValueDefaultTypeInternal _KeyValue_default_instance_;
class KeyValueFilter;
struct KeyValueFilterDefaultTypeInternal;
extern KeyValueFilterDefaultTypeInternal _KeyValueFilter_default_instance_;
class KeyValue_ValueEntry_DoNotUse;
struct KeyValue_ValueEntry_DoNotUseDefaultTypeInternal;
extern KeyValue_ValueEntry_DoNotUseDefaultTypeInternal _KeyValue_ValueEntry_DoNotUse_default_instance_;
class MultiAttributeFilter;
struct MultiAttributeFilterDefaultTypeInternal;
extern MultiAttributeFilterDefaultTypeInternal _MultiAttributeFilter_default_instance_;
class MultiAttributeFilter_FilterEntry_DoNotUse;
struct MultiAttributeFilter_FilterEntry_DoNotUseDefaultTypeInternal;
extern MultiAttributeFilter_FilterEntry_DoNotUseDefaultTypeInternal _MultiAttributeFilter_FilterEntry_DoNotUse_default_instance_;
class PaginationConfig;
struct PaginationConfigDefaultTypeInternal;
extern PaginationConfigDefaultTypeInternal _PaginationConfig_default_instance_;
class PaginationInfo;
struct PaginationInfoDefaultTypeInternal;
extern PaginationInfoDefaultTypeInternal _PaginationInfo_default_instance_;
class SimpleAttributeFilter;
struct SimpleAttributeFilterDefaultTypeInternal;
extern SimpleAttributeFilterDefaultTypeInternal _SimpleAttributeFilter_default_instance_;
class SimpleAttributeFilter_StringArray;
struct SimpleAttributeFilter_StringArrayDefaultTypeInternal;
extern SimpleAttributeFilter_StringArrayDefaultTypeInternal _SimpleAttributeFilter_StringArray_default_instance_;
class SortingConfig;
struct SortingConfigDefaultTypeInternal;
extern SortingConfigDefaultTypeInternal _SortingConfig_default_instance_;
class SortingField;
struct SortingFieldDefaultTypeInternal;
extern SortingFieldDefaultTypeInternal _SortingField_default_instance_;
class TimeRange;
struct TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
}  // namespace v202303
}  // namespace types
}  // namespace alerting
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace alerting {
namespace types {
namespace v202303 {
enum Severity : int {
  SEVERITY_UNSPECIFIED = 0,
  SEVERITY_CLEAR = 1,
  SEVERITY_MINOR = 10,
  SEVERITY_WARNING = 20,
  SEVERITY_MAJOR = 40,
  SEVERITY_SEVERE = 70,
  SEVERITY_CRITICAL = 90,
  Severity_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Severity_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Severity_IsValid(int value);
extern const uint32_t Severity_internal_data_[];
constexpr Severity Severity_MIN = static_cast<Severity>(0);
constexpr Severity Severity_MAX = static_cast<Severity>(90);
constexpr int Severity_ARRAYSIZE = 90 + 1;
const ::google::protobuf::EnumDescriptor*
Severity_descriptor();
template <typename T>
const std::string& Severity_Name(T value) {
  static_assert(std::is_same<T, Severity>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Severity_Name().");
  return ::google::protobuf::internal::NameOfEnum(Severity_descriptor(), value);
}
inline bool Severity_Parse(absl::string_view name, Severity* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Severity>(
      Severity_descriptor(), name, value);
}
enum SortOrder : int {
  SORT_ORDER_UNSPECIFIED = 0,
  SORT_ORDER_ASCENDING = 1,
  SORT_ORDER_DESCENDING = 2,
  SortOrder_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SortOrder_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SortOrder_IsValid(int value);
extern const uint32_t SortOrder_internal_data_[];
constexpr SortOrder SortOrder_MIN = static_cast<SortOrder>(0);
constexpr SortOrder SortOrder_MAX = static_cast<SortOrder>(2);
constexpr int SortOrder_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SortOrder_descriptor();
template <typename T>
const std::string& SortOrder_Name(T value) {
  static_assert(std::is_same<T, SortOrder>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SortOrder_Name().");
  return SortOrder_Name(static_cast<SortOrder>(value));
}
template <>
inline const std::string& SortOrder_Name(SortOrder value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SortOrder_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SortOrder_Parse(absl::string_view name, SortOrder* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SortOrder>(
      SortOrder_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class SortingField final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.SortingField) */ {
 public:
  inline SortingField() : SortingField(nullptr) {}
  ~SortingField() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SortingField* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SortingField));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SortingField(
      ::google::protobuf::internal::ConstantInitialized);

  inline SortingField(const SortingField& from) : SortingField(nullptr, from) {}
  inline SortingField(SortingField&& from) noexcept
      : SortingField(nullptr, std::move(from)) {}
  inline SortingField& operator=(const SortingField& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortingField& operator=(SortingField&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SortingField& default_instance() {
    return *internal_default_instance();
  }
  static inline const SortingField* internal_default_instance() {
    return reinterpret_cast<const SortingField*>(
        &_SortingField_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(SortingField& a, SortingField& b) { a.Swap(&b); }
  inline void Swap(SortingField* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortingField* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SortingField* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SortingField>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SortingField& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SortingField& from) { SortingField::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SortingField* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.SortingField"; }

 protected:
  explicit SortingField(::google::protobuf::Arena* arena);
  SortingField(::google::protobuf::Arena* arena, const SortingField& from);
  SortingField(::google::protobuf::Arena* arena, SortingField&& from) noexcept
      : SortingField(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 3,
    kNameFieldNumber = 1,
    kOrderFieldNumber = 2,
  };
  // repeated string values = 3 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // string name = 1 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .kentik.alerting.types.v202303.SortOrder order = 2 [json_name = "order"];
  void clear_order() ;
  ::kentik::alerting::types::v202303::SortOrder order() const;
  void set_order(::kentik::alerting::types::v202303::SortOrder value);

  private:
  ::kentik::alerting::types::v202303::SortOrder _internal_order() const;
  void _internal_set_order(::kentik::alerting::types::v202303::SortOrder value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.SortingField)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      61, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SortingField& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    int order_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class SimpleAttributeFilter_StringArray final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray) */ {
 public:
  inline SimpleAttributeFilter_StringArray() : SimpleAttributeFilter_StringArray(nullptr) {}
  ~SimpleAttributeFilter_StringArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleAttributeFilter_StringArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleAttributeFilter_StringArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleAttributeFilter_StringArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleAttributeFilter_StringArray(const SimpleAttributeFilter_StringArray& from) : SimpleAttributeFilter_StringArray(nullptr, from) {}
  inline SimpleAttributeFilter_StringArray(SimpleAttributeFilter_StringArray&& from) noexcept
      : SimpleAttributeFilter_StringArray(nullptr, std::move(from)) {}
  inline SimpleAttributeFilter_StringArray& operator=(const SimpleAttributeFilter_StringArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleAttributeFilter_StringArray& operator=(SimpleAttributeFilter_StringArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleAttributeFilter_StringArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleAttributeFilter_StringArray* internal_default_instance() {
    return reinterpret_cast<const SimpleAttributeFilter_StringArray*>(
        &_SimpleAttributeFilter_StringArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(SimpleAttributeFilter_StringArray& a, SimpleAttributeFilter_StringArray& b) { a.Swap(&b); }
  inline void Swap(SimpleAttributeFilter_StringArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleAttributeFilter_StringArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleAttributeFilter_StringArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleAttributeFilter_StringArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleAttributeFilter_StringArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleAttributeFilter_StringArray& from) { SimpleAttributeFilter_StringArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleAttributeFilter_StringArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray"; }

 protected:
  explicit SimpleAttributeFilter_StringArray(::google::protobuf::Arena* arena);
  SimpleAttributeFilter_StringArray(::google::protobuf::Arena* arena, const SimpleAttributeFilter_StringArray& from);
  SimpleAttributeFilter_StringArray(::google::protobuf::Arena* arena, SimpleAttributeFilter_StringArray&& from) noexcept
      : SimpleAttributeFilter_StringArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      78, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleAttributeFilter_StringArray& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class PaginationInfo final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.PaginationInfo) */ {
 public:
  inline PaginationInfo() : PaginationInfo(nullptr) {}
  ~PaginationInfo() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PaginationInfo* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PaginationInfo));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PaginationInfo(
      ::google::protobuf::internal::ConstantInitialized);

  inline PaginationInfo(const PaginationInfo& from) : PaginationInfo(nullptr, from) {}
  inline PaginationInfo(PaginationInfo&& from) noexcept
      : PaginationInfo(nullptr, std::move(from)) {}
  inline PaginationInfo& operator=(const PaginationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaginationInfo& operator=(PaginationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaginationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaginationInfo* internal_default_instance() {
    return reinterpret_cast<const PaginationInfo*>(
        &_PaginationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(PaginationInfo& a, PaginationInfo& b) { a.Swap(&b); }
  inline void Swap(PaginationInfo* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaginationInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaginationInfo* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PaginationInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PaginationInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PaginationInfo& from) { PaginationInfo::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PaginationInfo* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.PaginationInfo"; }

 protected:
  explicit PaginationInfo(::google::protobuf::Arena* arena);
  PaginationInfo(::google::protobuf::Arena* arena, const PaginationInfo& from);
  PaginationInfo(::google::protobuf::Arena* arena, PaginationInfo&& from) noexcept
      : PaginationInfo(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTotalCountFieldNumber = 1,
    kHasMoreResultsFieldNumber = 2,
  };
  // uint64 total_count = 1 [json_name = "totalCount"];
  void clear_total_count() ;
  ::uint64_t total_count() const;
  void set_total_count(::uint64_t value);

  private:
  ::uint64_t _internal_total_count() const;
  void _internal_set_total_count(::uint64_t value);

  public:
  // bool has_more_results = 2 [json_name = "hasMoreResults"];
  void clear_has_more_results() ;
  bool has_more_results() const;
  void set_has_more_results(bool value);

  private:
  bool _internal_has_more_results() const;
  void _internal_set_has_more_results(bool value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.PaginationInfo)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PaginationInfo& from_msg);
    ::uint64_t total_count_;
    bool has_more_results_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class PaginationConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.PaginationConfig) */ {
 public:
  inline PaginationConfig() : PaginationConfig(nullptr) {}
  ~PaginationConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PaginationConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PaginationConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PaginationConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline PaginationConfig(const PaginationConfig& from) : PaginationConfig(nullptr, from) {}
  inline PaginationConfig(PaginationConfig&& from) noexcept
      : PaginationConfig(nullptr, std::move(from)) {}
  inline PaginationConfig& operator=(const PaginationConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaginationConfig& operator=(PaginationConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaginationConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaginationConfig* internal_default_instance() {
    return reinterpret_cast<const PaginationConfig*>(
        &_PaginationConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(PaginationConfig& a, PaginationConfig& b) { a.Swap(&b); }
  inline void Swap(PaginationConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaginationConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaginationConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PaginationConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PaginationConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PaginationConfig& from) { PaginationConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PaginationConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.PaginationConfig"; }

 protected:
  explicit PaginationConfig(::google::protobuf::Arena* arena);
  PaginationConfig(::google::protobuf::Arena* arena, const PaginationConfig& from);
  PaginationConfig(::google::protobuf::Arena* arena, PaginationConfig&& from) noexcept
      : PaginationConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLimitFieldNumber = 1,
    kOffsetFieldNumber = 2,
    kIncludeTotalCountFieldNumber = 3,
  };
  // uint64 limit = 1 [json_name = "limit"];
  void clear_limit() ;
  ::uint64_t limit() const;
  void set_limit(::uint64_t value);

  private:
  ::uint64_t _internal_limit() const;
  void _internal_set_limit(::uint64_t value);

  public:
  // uint64 offset = 2 [json_name = "offset"];
  void clear_offset() ;
  ::uint64_t offset() const;
  void set_offset(::uint64_t value);

  private:
  ::uint64_t _internal_offset() const;
  void _internal_set_offset(::uint64_t value);

  public:
  // bool include_total_count = 3 [json_name = "includeTotalCount"];
  void clear_include_total_count() ;
  bool include_total_count() const;
  void set_include_total_count(bool value);

  private:
  bool _internal_include_total_count() const;
  void _internal_set_include_total_count(bool value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.PaginationConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PaginationConfig& from_msg);
    ::uint64_t limit_;
    ::uint64_t offset_;
    bool include_total_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class KeyValue_ValueEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  KeyValue_ValueEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValue_ValueEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit KeyValue_ValueEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const KeyValue_ValueEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const KeyValue_ValueEntry_DoNotUse*>(
        &_KeyValue_ValueEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class AttributeFilter_StringArray final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.AttributeFilter.StringArray) */ {
 public:
  inline AttributeFilter_StringArray() : AttributeFilter_StringArray(nullptr) {}
  ~AttributeFilter_StringArray() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AttributeFilter_StringArray* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AttributeFilter_StringArray));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeFilter_StringArray(
      ::google::protobuf::internal::ConstantInitialized);

  inline AttributeFilter_StringArray(const AttributeFilter_StringArray& from) : AttributeFilter_StringArray(nullptr, from) {}
  inline AttributeFilter_StringArray(AttributeFilter_StringArray&& from) noexcept
      : AttributeFilter_StringArray(nullptr, std::move(from)) {}
  inline AttributeFilter_StringArray& operator=(const AttributeFilter_StringArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeFilter_StringArray& operator=(AttributeFilter_StringArray&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeFilter_StringArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const AttributeFilter_StringArray* internal_default_instance() {
    return reinterpret_cast<const AttributeFilter_StringArray*>(
        &_AttributeFilter_StringArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(AttributeFilter_StringArray& a, AttributeFilter_StringArray& b) { a.Swap(&b); }
  inline void Swap(AttributeFilter_StringArray* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeFilter_StringArray* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeFilter_StringArray* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AttributeFilter_StringArray>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeFilter_StringArray& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AttributeFilter_StringArray& from) { AttributeFilter_StringArray::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AttributeFilter_StringArray* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.AttributeFilter.StringArray"; }

 protected:
  explicit AttributeFilter_StringArray(::google::protobuf::Arena* arena);
  AttributeFilter_StringArray(::google::protobuf::Arena* arena, const AttributeFilter_StringArray& from);
  AttributeFilter_StringArray(::google::protobuf::Arena* arena, AttributeFilter_StringArray&& from) noexcept
      : AttributeFilter_StringArray(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated string values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;

  public:
  void clear_values() ;
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_values(int index, Arg_&& value, Args_... args);
  std::string* add_values();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_values(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_values();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_values() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_values();

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.AttributeFilter.StringArray)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      72, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AttributeFilter_StringArray& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> values_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class TimeRange final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.TimeRange) */ {
 public:
  inline TimeRange() : TimeRange(nullptr) {}
  ~TimeRange() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TimeRange* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TimeRange));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TimeRange(
      ::google::protobuf::internal::ConstantInitialized);

  inline TimeRange(const TimeRange& from) : TimeRange(nullptr, from) {}
  inline TimeRange(TimeRange&& from) noexcept
      : TimeRange(nullptr, std::move(from)) {}
  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
        &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(TimeRange& a, TimeRange& b) { a.Swap(&b); }
  inline void Swap(TimeRange* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeRange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeRange* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TimeRange>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimeRange& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TimeRange& from) { TimeRange::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TimeRange* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.TimeRange"; }

 protected:
  explicit TimeRange(::google::protobuf::Arena* arena);
  TimeRange(::google::protobuf::Arena* arena, const TimeRange& from);
  TimeRange(::google::protobuf::Arena* arena, TimeRange&& from) noexcept
      : TimeRange(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start = 1 [json_name = "start"];
  bool has_start() const;
  void clear_start() ;
  const ::google::protobuf::Timestamp& start() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_start();
  ::google::protobuf::Timestamp* mutable_start();
  void set_allocated_start(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_start(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_start();

  private:
  const ::google::protobuf::Timestamp& _internal_start() const;
  ::google::protobuf::Timestamp* _internal_mutable_start();

  public:
  // .google.protobuf.Timestamp end = 2 [json_name = "end"];
  bool has_end() const;
  void clear_end() ;
  const ::google::protobuf::Timestamp& end() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_end();
  ::google::protobuf::Timestamp* mutable_end();
  void set_allocated_end(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_end(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_end();

  private:
  const ::google::protobuf::Timestamp& _internal_end() const;
  ::google::protobuf::Timestamp* _internal_mutable_end();

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.TimeRange)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TimeRange& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* start_;
    ::google::protobuf::Timestamp* end_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class SortingConfig final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.SortingConfig) */ {
 public:
  inline SortingConfig() : SortingConfig(nullptr) {}
  ~SortingConfig() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SortingConfig* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SortingConfig));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SortingConfig(
      ::google::protobuf::internal::ConstantInitialized);

  inline SortingConfig(const SortingConfig& from) : SortingConfig(nullptr, from) {}
  inline SortingConfig(SortingConfig&& from) noexcept
      : SortingConfig(nullptr, std::move(from)) {}
  inline SortingConfig& operator=(const SortingConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline SortingConfig& operator=(SortingConfig&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SortingConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const SortingConfig* internal_default_instance() {
    return reinterpret_cast<const SortingConfig*>(
        &_SortingConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SortingConfig& a, SortingConfig& b) { a.Swap(&b); }
  inline void Swap(SortingConfig* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SortingConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SortingConfig* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SortingConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SortingConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SortingConfig& from) { SortingConfig::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SortingConfig* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.SortingConfig"; }

 protected:
  explicit SortingConfig(::google::protobuf::Arena* arena);
  SortingConfig(::google::protobuf::Arena* arena, const SortingConfig& from);
  SortingConfig(::google::protobuf::Arena* arena, SortingConfig&& from) noexcept
      : SortingConfig(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFieldsFieldNumber = 1,
  };
  // repeated .kentik.alerting.types.v202303.SortingField fields = 1 [json_name = "fields"];
  int fields_size() const;
  private:
  int _internal_fields_size() const;

  public:
  void clear_fields() ;
  ::kentik::alerting::types::v202303::SortingField* mutable_fields(int index);
  ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::SortingField>* mutable_fields();

  private:
  const ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::SortingField>& _internal_fields() const;
  ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::SortingField>* _internal_mutable_fields();
  public:
  const ::kentik::alerting::types::v202303::SortingField& fields(int index) const;
  ::kentik::alerting::types::v202303::SortingField* add_fields();
  const ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::SortingField>& fields() const;
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.SortingConfig)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SortingConfig& from_msg);
    ::google::protobuf::RepeatedPtrField< ::kentik::alerting::types::v202303::SortingField > fields_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class SimpleAttributeFilter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.SimpleAttributeFilter) */ {
 public:
  inline SimpleAttributeFilter() : SimpleAttributeFilter(nullptr) {}
  ~SimpleAttributeFilter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SimpleAttributeFilter* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SimpleAttributeFilter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SimpleAttributeFilter(
      ::google::protobuf::internal::ConstantInitialized);

  inline SimpleAttributeFilter(const SimpleAttributeFilter& from) : SimpleAttributeFilter(nullptr, from) {}
  inline SimpleAttributeFilter(SimpleAttributeFilter&& from) noexcept
      : SimpleAttributeFilter(nullptr, std::move(from)) {}
  inline SimpleAttributeFilter& operator=(const SimpleAttributeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleAttributeFilter& operator=(SimpleAttributeFilter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SimpleAttributeFilter& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kEquals = 3,
    kStartsWith = 4,
    kEndsWith = 5,
    kContains = 6,
    kIn = 7,
    kAny = 8,
    VALUE_NOT_SET = 0,
  };
  static inline const SimpleAttributeFilter* internal_default_instance() {
    return reinterpret_cast<const SimpleAttributeFilter*>(
        &_SimpleAttributeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SimpleAttributeFilter& a, SimpleAttributeFilter& b) { a.Swap(&b); }
  inline void Swap(SimpleAttributeFilter* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleAttributeFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleAttributeFilter* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SimpleAttributeFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SimpleAttributeFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SimpleAttributeFilter& from) { SimpleAttributeFilter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SimpleAttributeFilter* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.SimpleAttributeFilter"; }

 protected:
  explicit SimpleAttributeFilter(::google::protobuf::Arena* arena);
  SimpleAttributeFilter(::google::protobuf::Arena* arena, const SimpleAttributeFilter& from);
  SimpleAttributeFilter(::google::protobuf::Arena* arena, SimpleAttributeFilter&& from) noexcept
      : SimpleAttributeFilter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using StringArray = SimpleAttributeFilter_StringArray;

  // accessors -------------------------------------------------------
  enum : int {
    kEqualsFieldNumber = 3,
    kStartsWithFieldNumber = 4,
    kEndsWithFieldNumber = 5,
    kContainsFieldNumber = 6,
    kInFieldNumber = 7,
    kAnyFieldNumber = 8,
  };
  // string equals = 3 [json_name = "equals"];
  bool has_equals() const;
  void clear_equals() ;
  const std::string& equals() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_equals(Arg_&& arg, Args_... args);
  std::string* mutable_equals();
  PROTOBUF_NODISCARD std::string* release_equals();
  void set_allocated_equals(std::string* value);

  private:
  const std::string& _internal_equals() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_equals(
      const std::string& value);
  std::string* _internal_mutable_equals();

  public:
  // string starts_with = 4 [json_name = "startsWith"];
  bool has_starts_with() const;
  void clear_starts_with() ;
  const std::string& starts_with() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_starts_with(Arg_&& arg, Args_... args);
  std::string* mutable_starts_with();
  PROTOBUF_NODISCARD std::string* release_starts_with();
  void set_allocated_starts_with(std::string* value);

  private:
  const std::string& _internal_starts_with() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starts_with(
      const std::string& value);
  std::string* _internal_mutable_starts_with();

  public:
  // string ends_with = 5 [json_name = "endsWith"];
  bool has_ends_with() const;
  void clear_ends_with() ;
  const std::string& ends_with() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ends_with(Arg_&& arg, Args_... args);
  std::string* mutable_ends_with();
  PROTOBUF_NODISCARD std::string* release_ends_with();
  void set_allocated_ends_with(std::string* value);

  private:
  const std::string& _internal_ends_with() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ends_with(
      const std::string& value);
  std::string* _internal_mutable_ends_with();

  public:
  // string contains = 6 [json_name = "contains"];
  bool has_contains() const;
  void clear_contains() ;
  const std::string& contains() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contains(Arg_&& arg, Args_... args);
  std::string* mutable_contains();
  PROTOBUF_NODISCARD std::string* release_contains();
  void set_allocated_contains(std::string* value);

  private:
  const std::string& _internal_contains() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contains(
      const std::string& value);
  std::string* _internal_mutable_contains();

  public:
  // .kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray in = 7 [json_name = "in"];
  bool has_in() const;
  private:
  bool _internal_has_in() const;

  public:
  void clear_in() ;
  const ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray& in() const;
  PROTOBUF_NODISCARD ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* release_in();
  ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* mutable_in();
  void set_allocated_in(::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* value);
  void unsafe_arena_set_allocated_in(::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* value);
  ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* unsafe_arena_release_in();

  private:
  const ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray& _internal_in() const;
  ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* _internal_mutable_in();

  public:
  // bool any = 8 [json_name = "any"];
  bool has_any() const;
  void clear_any() ;
  bool any() const;
  void set_any(bool value);

  private:
  bool _internal_any() const;
  void _internal_set_any(bool value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.SimpleAttributeFilter)
 private:
  class _Internal;
  void set_has_equals();
  void set_has_starts_with();
  void set_has_ends_with();
  void set_has_contains();
  void set_has_in();
  void set_has_any();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 6, 1,
      94, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SimpleAttributeFilter& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr equals_;
      ::google::protobuf::internal::ArenaStringPtr starts_with_;
      ::google::protobuf::internal::ArenaStringPtr ends_with_;
      ::google::protobuf::internal::ArenaStringPtr contains_;
      ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* in_;
      bool any_;
    } value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class KeyValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.KeyValue) */ {
 public:
  inline KeyValue() : KeyValue(nullptr) {}
  ~KeyValue() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KeyValue* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KeyValue));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeyValue(const KeyValue& from) : KeyValue(nullptr, from) {}
  inline KeyValue(KeyValue&& from) noexcept
      : KeyValue(nullptr, std::move(from)) {}
  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValue& operator=(KeyValue&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValue* internal_default_instance() {
    return reinterpret_cast<const KeyValue*>(
        &_KeyValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(KeyValue& a, KeyValue& b) { a.Swap(&b); }
  inline void Swap(KeyValue* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValue* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<KeyValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KeyValue& from) { KeyValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(KeyValue* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.KeyValue"; }

 protected:
  explicit KeyValue(::google::protobuf::Arena* arena);
  KeyValue(::google::protobuf::Arena* arena, const KeyValue& from);
  KeyValue(::google::protobuf::Arena* arena, KeyValue&& from) noexcept
      : KeyValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kValueFieldNumber = 1,
  };
  // map<string, string> value = 1 [json_name = "value"];
  int value_size() const;
  private:
  int _internal_value_size() const;

  public:
  void clear_value() ;
  const ::google::protobuf::Map<std::string, std::string>& value() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_value();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_value() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.KeyValue)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      52, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeyValue& from_msg);
    ::google::protobuf::internal::MapField<KeyValue_ValueEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class AttributeFilter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.AttributeFilter) */ {
 public:
  inline AttributeFilter() : AttributeFilter(nullptr) {}
  ~AttributeFilter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(AttributeFilter* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(AttributeFilter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AttributeFilter(
      ::google::protobuf::internal::ConstantInitialized);

  inline AttributeFilter(const AttributeFilter& from) : AttributeFilter(nullptr, from) {}
  inline AttributeFilter(AttributeFilter&& from) noexcept
      : AttributeFilter(nullptr, std::move(from)) {}
  inline AttributeFilter& operator=(const AttributeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline AttributeFilter& operator=(AttributeFilter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AttributeFilter& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kEmpty = 2,
    kEquals = 3,
    kStartsWith = 4,
    kEndsWith = 5,
    kContains = 6,
    kIn = 7,
    kAny = 8,
    VALUE_NOT_SET = 0,
  };
  static inline const AttributeFilter* internal_default_instance() {
    return reinterpret_cast<const AttributeFilter*>(
        &_AttributeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(AttributeFilter& a, AttributeFilter& b) { a.Swap(&b); }
  inline void Swap(AttributeFilter* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AttributeFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AttributeFilter* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<AttributeFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AttributeFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AttributeFilter& from) { AttributeFilter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(AttributeFilter* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.AttributeFilter"; }

 protected:
  explicit AttributeFilter(::google::protobuf::Arena* arena);
  AttributeFilter(::google::protobuf::Arena* arena, const AttributeFilter& from);
  AttributeFilter(::google::protobuf::Arena* arena, AttributeFilter&& from) noexcept
      : AttributeFilter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using StringArray = AttributeFilter_StringArray;

  // accessors -------------------------------------------------------
  enum : int {
    kNotFieldNumber = 1,
    kEmptyFieldNumber = 2,
    kEqualsFieldNumber = 3,
    kStartsWithFieldNumber = 4,
    kEndsWithFieldNumber = 5,
    kContainsFieldNumber = 6,
    kInFieldNumber = 7,
    kAnyFieldNumber = 8,
  };
  // bool not = 1 [json_name = "not"];
  void clear_not_() ;
  bool not_() const;
  void set_not_(bool value);

  private:
  bool _internal_not_() const;
  void _internal_set_not_(bool value);

  public:
  // bool empty = 2 [json_name = "empty"];
  bool has_empty() const;
  void clear_empty() ;
  bool empty() const;
  void set_empty(bool value);

  private:
  bool _internal_empty() const;
  void _internal_set_empty(bool value);

  public:
  // string equals = 3 [json_name = "equals"];
  bool has_equals() const;
  void clear_equals() ;
  const std::string& equals() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_equals(Arg_&& arg, Args_... args);
  std::string* mutable_equals();
  PROTOBUF_NODISCARD std::string* release_equals();
  void set_allocated_equals(std::string* value);

  private:
  const std::string& _internal_equals() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_equals(
      const std::string& value);
  std::string* _internal_mutable_equals();

  public:
  // string starts_with = 4 [json_name = "startsWith"];
  bool has_starts_with() const;
  void clear_starts_with() ;
  const std::string& starts_with() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_starts_with(Arg_&& arg, Args_... args);
  std::string* mutable_starts_with();
  PROTOBUF_NODISCARD std::string* release_starts_with();
  void set_allocated_starts_with(std::string* value);

  private:
  const std::string& _internal_starts_with() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_starts_with(
      const std::string& value);
  std::string* _internal_mutable_starts_with();

  public:
  // string ends_with = 5 [json_name = "endsWith"];
  bool has_ends_with() const;
  void clear_ends_with() ;
  const std::string& ends_with() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ends_with(Arg_&& arg, Args_... args);
  std::string* mutable_ends_with();
  PROTOBUF_NODISCARD std::string* release_ends_with();
  void set_allocated_ends_with(std::string* value);

  private:
  const std::string& _internal_ends_with() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ends_with(
      const std::string& value);
  std::string* _internal_mutable_ends_with();

  public:
  // string contains = 6 [json_name = "contains"];
  bool has_contains() const;
  void clear_contains() ;
  const std::string& contains() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contains(Arg_&& arg, Args_... args);
  std::string* mutable_contains();
  PROTOBUF_NODISCARD std::string* release_contains();
  void set_allocated_contains(std::string* value);

  private:
  const std::string& _internal_contains() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contains(
      const std::string& value);
  std::string* _internal_mutable_contains();

  public:
  // .kentik.alerting.types.v202303.AttributeFilter.StringArray in = 7 [json_name = "in"];
  bool has_in() const;
  private:
  bool _internal_has_in() const;

  public:
  void clear_in() ;
  const ::kentik::alerting::types::v202303::AttributeFilter_StringArray& in() const;
  PROTOBUF_NODISCARD ::kentik::alerting::types::v202303::AttributeFilter_StringArray* release_in();
  ::kentik::alerting::types::v202303::AttributeFilter_StringArray* mutable_in();
  void set_allocated_in(::kentik::alerting::types::v202303::AttributeFilter_StringArray* value);
  void unsafe_arena_set_allocated_in(::kentik::alerting::types::v202303::AttributeFilter_StringArray* value);
  ::kentik::alerting::types::v202303::AttributeFilter_StringArray* unsafe_arena_release_in();

  private:
  const ::kentik::alerting::types::v202303::AttributeFilter_StringArray& _internal_in() const;
  ::kentik::alerting::types::v202303::AttributeFilter_StringArray* _internal_mutable_in();

  public:
  // bool any = 8 [json_name = "any"];
  bool has_any() const;
  void clear_any() ;
  bool any() const;
  void set_any(bool value);

  private:
  bool _internal_any() const;
  void _internal_set_any(bool value);

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.AttributeFilter)
 private:
  class _Internal;
  void set_has_empty();
  void set_has_equals();
  void set_has_starts_with();
  void set_has_ends_with();
  void set_has_contains();
  void set_has_in();
  void set_has_any();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 8, 1,
      96, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const AttributeFilter& from_msg);
    bool not__;
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      bool empty_;
      ::google::protobuf::internal::ArenaStringPtr equals_;
      ::google::protobuf::internal::ArenaStringPtr starts_with_;
      ::google::protobuf::internal::ArenaStringPtr ends_with_;
      ::google::protobuf::internal::ArenaStringPtr contains_;
      ::kentik::alerting::types::v202303::AttributeFilter_StringArray* in_;
      bool any_;
    } value_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class MultiAttributeFilter_FilterEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  MultiAttributeFilter_FilterEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultiAttributeFilter_FilterEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MultiAttributeFilter_FilterEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const MultiAttributeFilter_FilterEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MultiAttributeFilter_FilterEntry_DoNotUse*>(
        &_MultiAttributeFilter_FilterEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      74, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class KeyValueFilter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.KeyValueFilter) */ {
 public:
  inline KeyValueFilter() : KeyValueFilter(nullptr) {}
  ~KeyValueFilter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(KeyValueFilter* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(KeyValueFilter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR KeyValueFilter(
      ::google::protobuf::internal::ConstantInitialized);

  inline KeyValueFilter(const KeyValueFilter& from) : KeyValueFilter(nullptr, from) {}
  inline KeyValueFilter(KeyValueFilter&& from) noexcept
      : KeyValueFilter(nullptr, std::move(from)) {}
  inline KeyValueFilter& operator=(const KeyValueFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValueFilter& operator=(KeyValueFilter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KeyValueFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValueFilter* internal_default_instance() {
    return reinterpret_cast<const KeyValueFilter*>(
        &_KeyValueFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(KeyValueFilter& a, KeyValueFilter& b) { a.Swap(&b); }
  inline void Swap(KeyValueFilter* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValueFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyValueFilter* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<KeyValueFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const KeyValueFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const KeyValueFilter& from) { KeyValueFilter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(KeyValueFilter* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.KeyValueFilter"; }

 protected:
  explicit KeyValueFilter(::google::protobuf::Arena* arena);
  KeyValueFilter(::google::protobuf::Arena* arena, const KeyValueFilter& from);
  KeyValueFilter(::google::protobuf::Arena* arena, KeyValueFilter&& from) noexcept
      : KeyValueFilter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .kentik.alerting.types.v202303.SimpleAttributeFilter key = 1 [json_name = "key"];
  bool has_key() const;
  void clear_key() ;
  const ::kentik::alerting::types::v202303::SimpleAttributeFilter& key() const;
  PROTOBUF_NODISCARD ::kentik::alerting::types::v202303::SimpleAttributeFilter* release_key();
  ::kentik::alerting::types::v202303::SimpleAttributeFilter* mutable_key();
  void set_allocated_key(::kentik::alerting::types::v202303::SimpleAttributeFilter* value);
  void unsafe_arena_set_allocated_key(::kentik::alerting::types::v202303::SimpleAttributeFilter* value);
  ::kentik::alerting::types::v202303::SimpleAttributeFilter* unsafe_arena_release_key();

  private:
  const ::kentik::alerting::types::v202303::SimpleAttributeFilter& _internal_key() const;
  ::kentik::alerting::types::v202303::SimpleAttributeFilter* _internal_mutable_key();

  public:
  // .kentik.alerting.types.v202303.AttributeFilter value = 2 [json_name = "value"];
  bool has_value() const;
  void clear_value() ;
  const ::kentik::alerting::types::v202303::AttributeFilter& value() const;
  PROTOBUF_NODISCARD ::kentik::alerting::types::v202303::AttributeFilter* release_value();
  ::kentik::alerting::types::v202303::AttributeFilter* mutable_value();
  void set_allocated_value(::kentik::alerting::types::v202303::AttributeFilter* value);
  void unsafe_arena_set_allocated_value(::kentik::alerting::types::v202303::AttributeFilter* value);
  ::kentik::alerting::types::v202303::AttributeFilter* unsafe_arena_release_value();

  private:
  const ::kentik::alerting::types::v202303::AttributeFilter& _internal_value() const;
  ::kentik::alerting::types::v202303::AttributeFilter* _internal_mutable_value();

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.KeyValueFilter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const KeyValueFilter& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kentik::alerting::types::v202303::SimpleAttributeFilter* key_;
    ::kentik::alerting::types::v202303::AttributeFilter* value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class MultiAttributeFilter final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202303.MultiAttributeFilter) */ {
 public:
  inline MultiAttributeFilter() : MultiAttributeFilter(nullptr) {}
  ~MultiAttributeFilter() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MultiAttributeFilter* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MultiAttributeFilter));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MultiAttributeFilter(
      ::google::protobuf::internal::ConstantInitialized);

  inline MultiAttributeFilter(const MultiAttributeFilter& from) : MultiAttributeFilter(nullptr, from) {}
  inline MultiAttributeFilter(MultiAttributeFilter&& from) noexcept
      : MultiAttributeFilter(nullptr, std::move(from)) {}
  inline MultiAttributeFilter& operator=(const MultiAttributeFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiAttributeFilter& operator=(MultiAttributeFilter&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiAttributeFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiAttributeFilter* internal_default_instance() {
    return reinterpret_cast<const MultiAttributeFilter*>(
        &_MultiAttributeFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MultiAttributeFilter& a, MultiAttributeFilter& b) { a.Swap(&b); }
  inline void Swap(MultiAttributeFilter* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiAttributeFilter* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiAttributeFilter* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MultiAttributeFilter>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MultiAttributeFilter& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MultiAttributeFilter& from) { MultiAttributeFilter::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MultiAttributeFilter* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202303.MultiAttributeFilter"; }

 protected:
  explicit MultiAttributeFilter(::google::protobuf::Arena* arena);
  MultiAttributeFilter(::google::protobuf::Arena* arena, const MultiAttributeFilter& from);
  MultiAttributeFilter(::google::protobuf::Arena* arena, MultiAttributeFilter&& from) noexcept
      : MultiAttributeFilter(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilterFieldNumber = 1,
    kFiltersFieldNumber = 2,
  };
  // map<string, .kentik.alerting.types.v202303.AttributeFilter> filter = 1 [json_name = "filter", deprecated = true];
  [[deprecated]]  int filter_size() const;
  private:
  int _internal_filter_size() const;

  public:
  [[deprecated]]  void clear_filter() ;
  [[deprecated]] const ::google::protobuf::Map<std::string, ::kentik::alerting::types::v202303::AttributeFilter>& filter() const;
  [[deprecated]] ::google::protobuf::Map<std::string, ::kentik::alerting::types::v202303::AttributeFilter>* mutable_filter();

  private:
  const ::google::protobuf::Map<std::string, ::kentik::alerting::types::v202303::AttributeFilter>& _internal_filter() const;
  ::google::protobuf::Map<std::string, ::kentik::alerting::types::v202303::AttributeFilter>* _internal_mutable_filter();

  public:
  // repeated .kentik.alerting.types.v202303.KeyValueFilter filters = 2 [json_name = "filters"];
  int filters_size() const;
  private:
  int _internal_filters_size() const;

  public:
  void clear_filters() ;
  ::kentik::alerting::types::v202303::KeyValueFilter* mutable_filters(int index);
  ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::KeyValueFilter>* mutable_filters();

  private:
  const ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::KeyValueFilter>& _internal_filters() const;
  ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::KeyValueFilter>* _internal_mutable_filters();
  public:
  const ::kentik::alerting::types::v202303::KeyValueFilter& filters(int index) const;
  ::kentik::alerting::types::v202303::KeyValueFilter* add_filters();
  const ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::KeyValueFilter>& filters() const;
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202303.MultiAttributeFilter)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 3,
      65, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MultiAttributeFilter& from_msg);
    ::google::protobuf::internal::MapField<MultiAttributeFilter_FilterEntry_DoNotUse, std::string, ::kentik::alerting::types::v202303::AttributeFilter,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        filter_;
    ::google::protobuf::RepeatedPtrField< ::kentik::alerting::types::v202303::KeyValueFilter > filters_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MultiAttributeFilter

// map<string, .kentik.alerting.types.v202303.AttributeFilter> filter = 1 [json_name = "filter", deprecated = true];
inline int MultiAttributeFilter::_internal_filter_size() const {
  return _internal_filter().size();
}
inline int MultiAttributeFilter::filter_size() const {
  return _internal_filter_size();
}
inline void MultiAttributeFilter::clear_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filter_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::kentik::alerting::types::v202303::AttributeFilter>& MultiAttributeFilter::_internal_filter() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filter_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::kentik::alerting::types::v202303::AttributeFilter>& MultiAttributeFilter::filter() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:kentik.alerting.types.v202303.MultiAttributeFilter.filter)
  return _internal_filter();
}
inline ::google::protobuf::Map<std::string, ::kentik::alerting::types::v202303::AttributeFilter>* MultiAttributeFilter::_internal_mutable_filter() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.filter_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::kentik::alerting::types::v202303::AttributeFilter>* MultiAttributeFilter::mutable_filter() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:kentik.alerting.types.v202303.MultiAttributeFilter.filter)
  return _internal_mutable_filter();
}

// repeated .kentik.alerting.types.v202303.KeyValueFilter filters = 2 [json_name = "filters"];
inline int MultiAttributeFilter::_internal_filters_size() const {
  return _internal_filters().size();
}
inline int MultiAttributeFilter::filters_size() const {
  return _internal_filters_size();
}
inline void MultiAttributeFilter::clear_filters() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.filters_.Clear();
}
inline ::kentik::alerting::types::v202303::KeyValueFilter* MultiAttributeFilter::mutable_filters(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.MultiAttributeFilter.filters)
  return _internal_mutable_filters()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::KeyValueFilter>* MultiAttributeFilter::mutable_filters()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.types.v202303.MultiAttributeFilter.filters)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_filters();
}
inline const ::kentik::alerting::types::v202303::KeyValueFilter& MultiAttributeFilter::filters(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.MultiAttributeFilter.filters)
  return _internal_filters().Get(index);
}
inline ::kentik::alerting::types::v202303::KeyValueFilter* MultiAttributeFilter::add_filters() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::kentik::alerting::types::v202303::KeyValueFilter* _add = _internal_mutable_filters()->Add();
  // @@protoc_insertion_point(field_add:kentik.alerting.types.v202303.MultiAttributeFilter.filters)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::KeyValueFilter>& MultiAttributeFilter::filters() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.types.v202303.MultiAttributeFilter.filters)
  return _internal_filters();
}
inline const ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::KeyValueFilter>&
MultiAttributeFilter::_internal_filters() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.filters_;
}
inline ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::KeyValueFilter>*
MultiAttributeFilter::_internal_mutable_filters() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.filters_;
}

// -------------------------------------------------------------------

// AttributeFilter_StringArray

// repeated string values = 1 [json_name = "values"];
inline int AttributeFilter_StringArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int AttributeFilter_StringArray::values_size() const {
  return _internal_values_size();
}
inline void AttributeFilter_StringArray::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* AttributeFilter_StringArray::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:kentik.alerting.types.v202303.AttributeFilter.StringArray.values)
  return _s;
}
inline const std::string& AttributeFilter_StringArray::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.StringArray.values)
  return _internal_values().Get(index);
}
inline std::string* AttributeFilter_StringArray::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.AttributeFilter.StringArray.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void AttributeFilter_StringArray::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.AttributeFilter.StringArray.values)
}
template <typename Arg_, typename... Args_>
inline void AttributeFilter_StringArray::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:kentik.alerting.types.v202303.AttributeFilter.StringArray.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttributeFilter_StringArray::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.types.v202303.AttributeFilter.StringArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttributeFilter_StringArray::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.types.v202303.AttributeFilter.StringArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
AttributeFilter_StringArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
AttributeFilter_StringArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// AttributeFilter

// bool not = 1 [json_name = "not"];
inline void AttributeFilter::clear_not_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.not__ = false;
}
inline bool AttributeFilter::not_() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.not)
  return _internal_not_();
}
inline void AttributeFilter::set_not_(bool value) {
  _internal_set_not_(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.AttributeFilter.not)
}
inline bool AttributeFilter::_internal_not_() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.not__;
}
inline void AttributeFilter::_internal_set_not_(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.not__ = value;
}

// bool empty = 2 [json_name = "empty"];
inline bool AttributeFilter::has_empty() const {
  return value_case() == kEmpty;
}
inline void AttributeFilter::set_has_empty() {
  _impl_._oneof_case_[0] = kEmpty;
}
inline void AttributeFilter::clear_empty() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kEmpty) {
    _impl_.value_.empty_ = false;
    clear_has_value();
  }
}
inline bool AttributeFilter::empty() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.empty)
  return _internal_empty();
}
inline void AttributeFilter::set_empty(bool value) {
  if (value_case() != kEmpty) {
    clear_value();
    set_has_empty();
  }
  _impl_.value_.empty_ = value;
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.AttributeFilter.empty)
}
inline bool AttributeFilter::_internal_empty() const {
  if (value_case() == kEmpty) {
    return _impl_.value_.empty_;
  }
  return false;
}

// string equals = 3 [json_name = "equals"];
inline bool AttributeFilter::has_equals() const {
  return value_case() == kEquals;
}
inline void AttributeFilter::set_has_equals() {
  _impl_._oneof_case_[0] = kEquals;
}
inline void AttributeFilter::clear_equals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kEquals) {
    _impl_.value_.equals_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttributeFilter::equals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.equals)
  return _internal_equals();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeFilter::set_equals(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEquals) {
    clear_value();

    set_has_equals();
    _impl_.value_.equals_.InitDefault();
  }
  _impl_.value_.equals_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.AttributeFilter.equals)
}
inline std::string* AttributeFilter::mutable_equals() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_equals();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.AttributeFilter.equals)
  return _s;
}
inline const std::string& AttributeFilter::_internal_equals() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kEquals) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.equals_.Get();
}
inline void AttributeFilter::_internal_set_equals(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEquals) {
    clear_value();

    set_has_equals();
    _impl_.value_.equals_.InitDefault();
  }
  _impl_.value_.equals_.Set(value, GetArena());
}
inline std::string* AttributeFilter::_internal_mutable_equals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEquals) {
    clear_value();

    set_has_equals();
    _impl_.value_.equals_.InitDefault();
  }
  return _impl_.value_.equals_.Mutable( GetArena());
}
inline std::string* AttributeFilter::release_equals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.AttributeFilter.equals)
  if (value_case() != kEquals) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.equals_.Release();
}
inline void AttributeFilter::set_allocated_equals(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_equals();
    _impl_.value_.equals_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.AttributeFilter.equals)
}

// string starts_with = 4 [json_name = "startsWith"];
inline bool AttributeFilter::has_starts_with() const {
  return value_case() == kStartsWith;
}
inline void AttributeFilter::set_has_starts_with() {
  _impl_._oneof_case_[0] = kStartsWith;
}
inline void AttributeFilter::clear_starts_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStartsWith) {
    _impl_.value_.starts_with_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttributeFilter::starts_with() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.starts_with)
  return _internal_starts_with();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeFilter::set_starts_with(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStartsWith) {
    clear_value();

    set_has_starts_with();
    _impl_.value_.starts_with_.InitDefault();
  }
  _impl_.value_.starts_with_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.AttributeFilter.starts_with)
}
inline std::string* AttributeFilter::mutable_starts_with() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_starts_with();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.AttributeFilter.starts_with)
  return _s;
}
inline const std::string& AttributeFilter::_internal_starts_with() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStartsWith) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.starts_with_.Get();
}
inline void AttributeFilter::_internal_set_starts_with(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStartsWith) {
    clear_value();

    set_has_starts_with();
    _impl_.value_.starts_with_.InitDefault();
  }
  _impl_.value_.starts_with_.Set(value, GetArena());
}
inline std::string* AttributeFilter::_internal_mutable_starts_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStartsWith) {
    clear_value();

    set_has_starts_with();
    _impl_.value_.starts_with_.InitDefault();
  }
  return _impl_.value_.starts_with_.Mutable( GetArena());
}
inline std::string* AttributeFilter::release_starts_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.AttributeFilter.starts_with)
  if (value_case() != kStartsWith) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.starts_with_.Release();
}
inline void AttributeFilter::set_allocated_starts_with(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_starts_with();
    _impl_.value_.starts_with_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.AttributeFilter.starts_with)
}

// string ends_with = 5 [json_name = "endsWith"];
inline bool AttributeFilter::has_ends_with() const {
  return value_case() == kEndsWith;
}
inline void AttributeFilter::set_has_ends_with() {
  _impl_._oneof_case_[0] = kEndsWith;
}
inline void AttributeFilter::clear_ends_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kEndsWith) {
    _impl_.value_.ends_with_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttributeFilter::ends_with() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.ends_with)
  return _internal_ends_with();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeFilter::set_ends_with(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEndsWith) {
    clear_value();

    set_has_ends_with();
    _impl_.value_.ends_with_.InitDefault();
  }
  _impl_.value_.ends_with_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.AttributeFilter.ends_with)
}
inline std::string* AttributeFilter::mutable_ends_with() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ends_with();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.AttributeFilter.ends_with)
  return _s;
}
inline const std::string& AttributeFilter::_internal_ends_with() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kEndsWith) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.ends_with_.Get();
}
inline void AttributeFilter::_internal_set_ends_with(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEndsWith) {
    clear_value();

    set_has_ends_with();
    _impl_.value_.ends_with_.InitDefault();
  }
  _impl_.value_.ends_with_.Set(value, GetArena());
}
inline std::string* AttributeFilter::_internal_mutable_ends_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEndsWith) {
    clear_value();

    set_has_ends_with();
    _impl_.value_.ends_with_.InitDefault();
  }
  return _impl_.value_.ends_with_.Mutable( GetArena());
}
inline std::string* AttributeFilter::release_ends_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.AttributeFilter.ends_with)
  if (value_case() != kEndsWith) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.ends_with_.Release();
}
inline void AttributeFilter::set_allocated_ends_with(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_ends_with();
    _impl_.value_.ends_with_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.AttributeFilter.ends_with)
}

// string contains = 6 [json_name = "contains"];
inline bool AttributeFilter::has_contains() const {
  return value_case() == kContains;
}
inline void AttributeFilter::set_has_contains() {
  _impl_._oneof_case_[0] = kContains;
}
inline void AttributeFilter::clear_contains() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kContains) {
    _impl_.value_.contains_.Destroy();
    clear_has_value();
  }
}
inline const std::string& AttributeFilter::contains() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.contains)
  return _internal_contains();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AttributeFilter::set_contains(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kContains) {
    clear_value();

    set_has_contains();
    _impl_.value_.contains_.InitDefault();
  }
  _impl_.value_.contains_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.AttributeFilter.contains)
}
inline std::string* AttributeFilter::mutable_contains() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contains();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.AttributeFilter.contains)
  return _s;
}
inline const std::string& AttributeFilter::_internal_contains() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kContains) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.contains_.Get();
}
inline void AttributeFilter::_internal_set_contains(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kContains) {
    clear_value();

    set_has_contains();
    _impl_.value_.contains_.InitDefault();
  }
  _impl_.value_.contains_.Set(value, GetArena());
}
inline std::string* AttributeFilter::_internal_mutable_contains() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kContains) {
    clear_value();

    set_has_contains();
    _impl_.value_.contains_.InitDefault();
  }
  return _impl_.value_.contains_.Mutable( GetArena());
}
inline std::string* AttributeFilter::release_contains() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.AttributeFilter.contains)
  if (value_case() != kContains) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.contains_.Release();
}
inline void AttributeFilter::set_allocated_contains(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_contains();
    _impl_.value_.contains_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.AttributeFilter.contains)
}

// .kentik.alerting.types.v202303.AttributeFilter.StringArray in = 7 [json_name = "in"];
inline bool AttributeFilter::has_in() const {
  return value_case() == kIn;
}
inline bool AttributeFilter::_internal_has_in() const {
  return value_case() == kIn;
}
inline void AttributeFilter::set_has_in() {
  _impl_._oneof_case_[0] = kIn;
}
inline void AttributeFilter::clear_in() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIn) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.in_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.in_);
    }
    clear_has_value();
  }
}
inline ::kentik::alerting::types::v202303::AttributeFilter_StringArray* AttributeFilter::release_in() {
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.AttributeFilter.in)
  if (value_case() == kIn) {
    clear_has_value();
    auto* temp = _impl_.value_.in_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.in_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::alerting::types::v202303::AttributeFilter_StringArray& AttributeFilter::_internal_in() const {
  return value_case() == kIn ? *_impl_.value_.in_ : reinterpret_cast<::kentik::alerting::types::v202303::AttributeFilter_StringArray&>(::kentik::alerting::types::v202303::_AttributeFilter_StringArray_default_instance_);
}
inline const ::kentik::alerting::types::v202303::AttributeFilter_StringArray& AttributeFilter::in() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.in)
  return _internal_in();
}
inline ::kentik::alerting::types::v202303::AttributeFilter_StringArray* AttributeFilter::unsafe_arena_release_in() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.alerting.types.v202303.AttributeFilter.in)
  if (value_case() == kIn) {
    clear_has_value();
    auto* temp = _impl_.value_.in_;
    _impl_.value_.in_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AttributeFilter::unsafe_arena_set_allocated_in(::kentik::alerting::types::v202303::AttributeFilter_StringArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_in();
    _impl_.value_.in_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.alerting.types.v202303.AttributeFilter.in)
}
inline ::kentik::alerting::types::v202303::AttributeFilter_StringArray* AttributeFilter::_internal_mutable_in() {
  if (value_case() != kIn) {
    clear_value();
    set_has_in();
    _impl_.value_.in_ =
        ::google::protobuf::Message::DefaultConstruct<::kentik::alerting::types::v202303::AttributeFilter_StringArray>(GetArena());
  }
  return _impl_.value_.in_;
}
inline ::kentik::alerting::types::v202303::AttributeFilter_StringArray* AttributeFilter::mutable_in() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kentik::alerting::types::v202303::AttributeFilter_StringArray* _msg = _internal_mutable_in();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.AttributeFilter.in)
  return _msg;
}

// bool any = 8 [json_name = "any"];
inline bool AttributeFilter::has_any() const {
  return value_case() == kAny;
}
inline void AttributeFilter::set_has_any() {
  _impl_._oneof_case_[0] = kAny;
}
inline void AttributeFilter::clear_any() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kAny) {
    _impl_.value_.any_ = false;
    clear_has_value();
  }
}
inline bool AttributeFilter::any() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.AttributeFilter.any)
  return _internal_any();
}
inline void AttributeFilter::set_any(bool value) {
  if (value_case() != kAny) {
    clear_value();
    set_has_any();
  }
  _impl_.value_.any_ = value;
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.AttributeFilter.any)
}
inline bool AttributeFilter::_internal_any() const {
  if (value_case() == kAny) {
    return _impl_.value_.any_;
  }
  return false;
}

inline bool AttributeFilter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void AttributeFilter::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline AttributeFilter::ValueCase AttributeFilter::value_case() const {
  return AttributeFilter::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SimpleAttributeFilter_StringArray

// repeated string values = 1 [json_name = "values"];
inline int SimpleAttributeFilter_StringArray::_internal_values_size() const {
  return _internal_values().size();
}
inline int SimpleAttributeFilter_StringArray::values_size() const {
  return _internal_values_size();
}
inline void SimpleAttributeFilter_StringArray::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* SimpleAttributeFilter_StringArray::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray.values)
  return _s;
}
inline const std::string& SimpleAttributeFilter_StringArray::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray.values)
  return _internal_values().Get(index);
}
inline std::string* SimpleAttributeFilter_StringArray::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SimpleAttributeFilter_StringArray::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray.values)
}
template <typename Arg_, typename... Args_>
inline void SimpleAttributeFilter_StringArray::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SimpleAttributeFilter_StringArray::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SimpleAttributeFilter_StringArray::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SimpleAttributeFilter_StringArray::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SimpleAttributeFilter_StringArray::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// SimpleAttributeFilter

// string equals = 3 [json_name = "equals"];
inline bool SimpleAttributeFilter::has_equals() const {
  return value_case() == kEquals;
}
inline void SimpleAttributeFilter::set_has_equals() {
  _impl_._oneof_case_[0] = kEquals;
}
inline void SimpleAttributeFilter::clear_equals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kEquals) {
    _impl_.value_.equals_.Destroy();
    clear_has_value();
  }
}
inline const std::string& SimpleAttributeFilter::equals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SimpleAttributeFilter.equals)
  return _internal_equals();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleAttributeFilter::set_equals(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEquals) {
    clear_value();

    set_has_equals();
    _impl_.value_.equals_.InitDefault();
  }
  _impl_.value_.equals_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SimpleAttributeFilter.equals)
}
inline std::string* SimpleAttributeFilter::mutable_equals() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_equals();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SimpleAttributeFilter.equals)
  return _s;
}
inline const std::string& SimpleAttributeFilter::_internal_equals() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kEquals) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.equals_.Get();
}
inline void SimpleAttributeFilter::_internal_set_equals(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEquals) {
    clear_value();

    set_has_equals();
    _impl_.value_.equals_.InitDefault();
  }
  _impl_.value_.equals_.Set(value, GetArena());
}
inline std::string* SimpleAttributeFilter::_internal_mutable_equals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEquals) {
    clear_value();

    set_has_equals();
    _impl_.value_.equals_.InitDefault();
  }
  return _impl_.value_.equals_.Mutable( GetArena());
}
inline std::string* SimpleAttributeFilter::release_equals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.SimpleAttributeFilter.equals)
  if (value_case() != kEquals) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.equals_.Release();
}
inline void SimpleAttributeFilter::set_allocated_equals(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_equals();
    _impl_.value_.equals_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.SimpleAttributeFilter.equals)
}

// string starts_with = 4 [json_name = "startsWith"];
inline bool SimpleAttributeFilter::has_starts_with() const {
  return value_case() == kStartsWith;
}
inline void SimpleAttributeFilter::set_has_starts_with() {
  _impl_._oneof_case_[0] = kStartsWith;
}
inline void SimpleAttributeFilter::clear_starts_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStartsWith) {
    _impl_.value_.starts_with_.Destroy();
    clear_has_value();
  }
}
inline const std::string& SimpleAttributeFilter::starts_with() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SimpleAttributeFilter.starts_with)
  return _internal_starts_with();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleAttributeFilter::set_starts_with(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStartsWith) {
    clear_value();

    set_has_starts_with();
    _impl_.value_.starts_with_.InitDefault();
  }
  _impl_.value_.starts_with_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SimpleAttributeFilter.starts_with)
}
inline std::string* SimpleAttributeFilter::mutable_starts_with() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_starts_with();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SimpleAttributeFilter.starts_with)
  return _s;
}
inline const std::string& SimpleAttributeFilter::_internal_starts_with() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStartsWith) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.starts_with_.Get();
}
inline void SimpleAttributeFilter::_internal_set_starts_with(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStartsWith) {
    clear_value();

    set_has_starts_with();
    _impl_.value_.starts_with_.InitDefault();
  }
  _impl_.value_.starts_with_.Set(value, GetArena());
}
inline std::string* SimpleAttributeFilter::_internal_mutable_starts_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStartsWith) {
    clear_value();

    set_has_starts_with();
    _impl_.value_.starts_with_.InitDefault();
  }
  return _impl_.value_.starts_with_.Mutable( GetArena());
}
inline std::string* SimpleAttributeFilter::release_starts_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.SimpleAttributeFilter.starts_with)
  if (value_case() != kStartsWith) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.starts_with_.Release();
}
inline void SimpleAttributeFilter::set_allocated_starts_with(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_starts_with();
    _impl_.value_.starts_with_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.SimpleAttributeFilter.starts_with)
}

// string ends_with = 5 [json_name = "endsWith"];
inline bool SimpleAttributeFilter::has_ends_with() const {
  return value_case() == kEndsWith;
}
inline void SimpleAttributeFilter::set_has_ends_with() {
  _impl_._oneof_case_[0] = kEndsWith;
}
inline void SimpleAttributeFilter::clear_ends_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kEndsWith) {
    _impl_.value_.ends_with_.Destroy();
    clear_has_value();
  }
}
inline const std::string& SimpleAttributeFilter::ends_with() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SimpleAttributeFilter.ends_with)
  return _internal_ends_with();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleAttributeFilter::set_ends_with(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEndsWith) {
    clear_value();

    set_has_ends_with();
    _impl_.value_.ends_with_.InitDefault();
  }
  _impl_.value_.ends_with_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SimpleAttributeFilter.ends_with)
}
inline std::string* SimpleAttributeFilter::mutable_ends_with() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ends_with();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SimpleAttributeFilter.ends_with)
  return _s;
}
inline const std::string& SimpleAttributeFilter::_internal_ends_with() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kEndsWith) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.ends_with_.Get();
}
inline void SimpleAttributeFilter::_internal_set_ends_with(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEndsWith) {
    clear_value();

    set_has_ends_with();
    _impl_.value_.ends_with_.InitDefault();
  }
  _impl_.value_.ends_with_.Set(value, GetArena());
}
inline std::string* SimpleAttributeFilter::_internal_mutable_ends_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kEndsWith) {
    clear_value();

    set_has_ends_with();
    _impl_.value_.ends_with_.InitDefault();
  }
  return _impl_.value_.ends_with_.Mutable( GetArena());
}
inline std::string* SimpleAttributeFilter::release_ends_with() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.SimpleAttributeFilter.ends_with)
  if (value_case() != kEndsWith) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.ends_with_.Release();
}
inline void SimpleAttributeFilter::set_allocated_ends_with(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_ends_with();
    _impl_.value_.ends_with_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.SimpleAttributeFilter.ends_with)
}

// string contains = 6 [json_name = "contains"];
inline bool SimpleAttributeFilter::has_contains() const {
  return value_case() == kContains;
}
inline void SimpleAttributeFilter::set_has_contains() {
  _impl_._oneof_case_[0] = kContains;
}
inline void SimpleAttributeFilter::clear_contains() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kContains) {
    _impl_.value_.contains_.Destroy();
    clear_has_value();
  }
}
inline const std::string& SimpleAttributeFilter::contains() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SimpleAttributeFilter.contains)
  return _internal_contains();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleAttributeFilter::set_contains(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kContains) {
    clear_value();

    set_has_contains();
    _impl_.value_.contains_.InitDefault();
  }
  _impl_.value_.contains_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SimpleAttributeFilter.contains)
}
inline std::string* SimpleAttributeFilter::mutable_contains() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_contains();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SimpleAttributeFilter.contains)
  return _s;
}
inline const std::string& SimpleAttributeFilter::_internal_contains() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kContains) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.contains_.Get();
}
inline void SimpleAttributeFilter::_internal_set_contains(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kContains) {
    clear_value();

    set_has_contains();
    _impl_.value_.contains_.InitDefault();
  }
  _impl_.value_.contains_.Set(value, GetArena());
}
inline std::string* SimpleAttributeFilter::_internal_mutable_contains() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kContains) {
    clear_value();

    set_has_contains();
    _impl_.value_.contains_.InitDefault();
  }
  return _impl_.value_.contains_.Mutable( GetArena());
}
inline std::string* SimpleAttributeFilter::release_contains() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.SimpleAttributeFilter.contains)
  if (value_case() != kContains) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.contains_.Release();
}
inline void SimpleAttributeFilter::set_allocated_contains(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_contains();
    _impl_.value_.contains_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.SimpleAttributeFilter.contains)
}

// .kentik.alerting.types.v202303.SimpleAttributeFilter.StringArray in = 7 [json_name = "in"];
inline bool SimpleAttributeFilter::has_in() const {
  return value_case() == kIn;
}
inline bool SimpleAttributeFilter::_internal_has_in() const {
  return value_case() == kIn;
}
inline void SimpleAttributeFilter::set_has_in() {
  _impl_._oneof_case_[0] = kIn;
}
inline void SimpleAttributeFilter::clear_in() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kIn) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.in_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.in_);
    }
    clear_has_value();
  }
}
inline ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* SimpleAttributeFilter::release_in() {
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.SimpleAttributeFilter.in)
  if (value_case() == kIn) {
    clear_has_value();
    auto* temp = _impl_.value_.in_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.in_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray& SimpleAttributeFilter::_internal_in() const {
  return value_case() == kIn ? *_impl_.value_.in_ : reinterpret_cast<::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray&>(::kentik::alerting::types::v202303::_SimpleAttributeFilter_StringArray_default_instance_);
}
inline const ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray& SimpleAttributeFilter::in() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SimpleAttributeFilter.in)
  return _internal_in();
}
inline ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* SimpleAttributeFilter::unsafe_arena_release_in() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.alerting.types.v202303.SimpleAttributeFilter.in)
  if (value_case() == kIn) {
    clear_has_value();
    auto* temp = _impl_.value_.in_;
    _impl_.value_.in_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SimpleAttributeFilter::unsafe_arena_set_allocated_in(::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_in();
    _impl_.value_.in_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.alerting.types.v202303.SimpleAttributeFilter.in)
}
inline ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* SimpleAttributeFilter::_internal_mutable_in() {
  if (value_case() != kIn) {
    clear_value();
    set_has_in();
    _impl_.value_.in_ =
        ::google::protobuf::Message::DefaultConstruct<::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray>(GetArena());
  }
  return _impl_.value_.in_;
}
inline ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* SimpleAttributeFilter::mutable_in() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kentik::alerting::types::v202303::SimpleAttributeFilter_StringArray* _msg = _internal_mutable_in();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SimpleAttributeFilter.in)
  return _msg;
}

// bool any = 8 [json_name = "any"];
inline bool SimpleAttributeFilter::has_any() const {
  return value_case() == kAny;
}
inline void SimpleAttributeFilter::set_has_any() {
  _impl_._oneof_case_[0] = kAny;
}
inline void SimpleAttributeFilter::clear_any() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kAny) {
    _impl_.value_.any_ = false;
    clear_has_value();
  }
}
inline bool SimpleAttributeFilter::any() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SimpleAttributeFilter.any)
  return _internal_any();
}
inline void SimpleAttributeFilter::set_any(bool value) {
  if (value_case() != kAny) {
    clear_value();
    set_has_any();
  }
  _impl_.value_.any_ = value;
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SimpleAttributeFilter.any)
}
inline bool SimpleAttributeFilter::_internal_any() const {
  if (value_case() == kAny) {
    return _impl_.value_.any_;
  }
  return false;
}

inline bool SimpleAttributeFilter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SimpleAttributeFilter::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline SimpleAttributeFilter::ValueCase SimpleAttributeFilter::value_case() const {
  return SimpleAttributeFilter::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// KeyValueFilter

// .kentik.alerting.types.v202303.SimpleAttributeFilter key = 1 [json_name = "key"];
inline bool KeyValueFilter::has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline void KeyValueFilter::clear_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.key_ != nullptr) _impl_.key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::alerting::types::v202303::SimpleAttributeFilter& KeyValueFilter::_internal_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::alerting::types::v202303::SimpleAttributeFilter* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::alerting::types::v202303::SimpleAttributeFilter&>(::kentik::alerting::types::v202303::_SimpleAttributeFilter_default_instance_);
}
inline const ::kentik::alerting::types::v202303::SimpleAttributeFilter& KeyValueFilter::key() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.KeyValueFilter.key)
  return _internal_key();
}
inline void KeyValueFilter::unsafe_arena_set_allocated_key(::kentik::alerting::types::v202303::SimpleAttributeFilter* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = reinterpret_cast<::kentik::alerting::types::v202303::SimpleAttributeFilter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.alerting.types.v202303.KeyValueFilter.key)
}
inline ::kentik::alerting::types::v202303::SimpleAttributeFilter* KeyValueFilter::release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::alerting::types::v202303::SimpleAttributeFilter* released = _impl_.key_;
  _impl_.key_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::alerting::types::v202303::SimpleAttributeFilter* KeyValueFilter::unsafe_arena_release_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.KeyValueFilter.key)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::alerting::types::v202303::SimpleAttributeFilter* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::kentik::alerting::types::v202303::SimpleAttributeFilter* KeyValueFilter::_internal_mutable_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.key_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::alerting::types::v202303::SimpleAttributeFilter>(GetArena());
    _impl_.key_ = reinterpret_cast<::kentik::alerting::types::v202303::SimpleAttributeFilter*>(p);
  }
  return _impl_.key_;
}
inline ::kentik::alerting::types::v202303::SimpleAttributeFilter* KeyValueFilter::mutable_key() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kentik::alerting::types::v202303::SimpleAttributeFilter* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.KeyValueFilter.key)
  return _msg;
}
inline void KeyValueFilter::set_allocated_key(::kentik::alerting::types::v202303::SimpleAttributeFilter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.key_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.key_ = reinterpret_cast<::kentik::alerting::types::v202303::SimpleAttributeFilter*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.KeyValueFilter.key)
}

// .kentik.alerting.types.v202303.AttributeFilter value = 2 [json_name = "value"];
inline bool KeyValueFilter::has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline void KeyValueFilter::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::kentik::alerting::types::v202303::AttributeFilter& KeyValueFilter::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::alerting::types::v202303::AttributeFilter* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::alerting::types::v202303::AttributeFilter&>(::kentik::alerting::types::v202303::_AttributeFilter_default_instance_);
}
inline const ::kentik::alerting::types::v202303::AttributeFilter& KeyValueFilter::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.KeyValueFilter.value)
  return _internal_value();
}
inline void KeyValueFilter::unsafe_arena_set_allocated_value(::kentik::alerting::types::v202303::AttributeFilter* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = reinterpret_cast<::kentik::alerting::types::v202303::AttributeFilter*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.alerting.types.v202303.KeyValueFilter.value)
}
inline ::kentik::alerting::types::v202303::AttributeFilter* KeyValueFilter::release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kentik::alerting::types::v202303::AttributeFilter* released = _impl_.value_;
  _impl_.value_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::alerting::types::v202303::AttributeFilter* KeyValueFilter::unsafe_arena_release_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.KeyValueFilter.value)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::kentik::alerting::types::v202303::AttributeFilter* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::kentik::alerting::types::v202303::AttributeFilter* KeyValueFilter::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::alerting::types::v202303::AttributeFilter>(GetArena());
    _impl_.value_ = reinterpret_cast<::kentik::alerting::types::v202303::AttributeFilter*>(p);
  }
  return _impl_.value_;
}
inline ::kentik::alerting::types::v202303::AttributeFilter* KeyValueFilter::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::kentik::alerting::types::v202303::AttributeFilter* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.KeyValueFilter.value)
  return _msg;
}
inline void KeyValueFilter::set_allocated_value(::kentik::alerting::types::v202303::AttributeFilter* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.value_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.value_ = reinterpret_cast<::kentik::alerting::types::v202303::AttributeFilter*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.KeyValueFilter.value)
}

// -------------------------------------------------------------------

// PaginationConfig

// uint64 limit = 1 [json_name = "limit"];
inline void PaginationConfig::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = ::uint64_t{0u};
}
inline ::uint64_t PaginationConfig::limit() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.PaginationConfig.limit)
  return _internal_limit();
}
inline void PaginationConfig::set_limit(::uint64_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.PaginationConfig.limit)
}
inline ::uint64_t PaginationConfig::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void PaginationConfig::_internal_set_limit(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// uint64 offset = 2 [json_name = "offset"];
inline void PaginationConfig::clear_offset() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = ::uint64_t{0u};
}
inline ::uint64_t PaginationConfig::offset() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.PaginationConfig.offset)
  return _internal_offset();
}
inline void PaginationConfig::set_offset(::uint64_t value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.PaginationConfig.offset)
}
inline ::uint64_t PaginationConfig::_internal_offset() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.offset_;
}
inline void PaginationConfig::_internal_set_offset(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.offset_ = value;
}

// bool include_total_count = 3 [json_name = "includeTotalCount"];
inline void PaginationConfig::clear_include_total_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_total_count_ = false;
}
inline bool PaginationConfig::include_total_count() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.PaginationConfig.include_total_count)
  return _internal_include_total_count();
}
inline void PaginationConfig::set_include_total_count(bool value) {
  _internal_set_include_total_count(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.PaginationConfig.include_total_count)
}
inline bool PaginationConfig::_internal_include_total_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.include_total_count_;
}
inline void PaginationConfig::_internal_set_include_total_count(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.include_total_count_ = value;
}

// -------------------------------------------------------------------

// PaginationInfo

// uint64 total_count = 1 [json_name = "totalCount"];
inline void PaginationInfo::clear_total_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = ::uint64_t{0u};
}
inline ::uint64_t PaginationInfo::total_count() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.PaginationInfo.total_count)
  return _internal_total_count();
}
inline void PaginationInfo::set_total_count(::uint64_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.PaginationInfo.total_count)
}
inline ::uint64_t PaginationInfo::_internal_total_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_count_;
}
inline void PaginationInfo::_internal_set_total_count(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_count_ = value;
}

// bool has_more_results = 2 [json_name = "hasMoreResults"];
inline void PaginationInfo::clear_has_more_results() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_more_results_ = false;
}
inline bool PaginationInfo::has_more_results() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.PaginationInfo.has_more_results)
  return _internal_has_more_results();
}
inline void PaginationInfo::set_has_more_results(bool value) {
  _internal_set_has_more_results(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.PaginationInfo.has_more_results)
}
inline bool PaginationInfo::_internal_has_more_results() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.has_more_results_;
}
inline void PaginationInfo::_internal_set_has_more_results(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.has_more_results_ = value;
}

// -------------------------------------------------------------------

// SortingConfig

// repeated .kentik.alerting.types.v202303.SortingField fields = 1 [json_name = "fields"];
inline int SortingConfig::_internal_fields_size() const {
  return _internal_fields().size();
}
inline int SortingConfig::fields_size() const {
  return _internal_fields_size();
}
inline void SortingConfig::clear_fields() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fields_.Clear();
}
inline ::kentik::alerting::types::v202303::SortingField* SortingConfig::mutable_fields(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SortingConfig.fields)
  return _internal_mutable_fields()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::SortingField>* SortingConfig::mutable_fields()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.types.v202303.SortingConfig.fields)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_fields();
}
inline const ::kentik::alerting::types::v202303::SortingField& SortingConfig::fields(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SortingConfig.fields)
  return _internal_fields().Get(index);
}
inline ::kentik::alerting::types::v202303::SortingField* SortingConfig::add_fields() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::kentik::alerting::types::v202303::SortingField* _add = _internal_mutable_fields()->Add();
  // @@protoc_insertion_point(field_add:kentik.alerting.types.v202303.SortingConfig.fields)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::SortingField>& SortingConfig::fields() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.types.v202303.SortingConfig.fields)
  return _internal_fields();
}
inline const ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::SortingField>&
SortingConfig::_internal_fields() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fields_;
}
inline ::google::protobuf::RepeatedPtrField<::kentik::alerting::types::v202303::SortingField>*
SortingConfig::_internal_mutable_fields() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.fields_;
}

// -------------------------------------------------------------------

// SortingField

// string name = 1 [json_name = "name"];
inline void SortingField::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& SortingField::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SortingField.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SortingField::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SortingField.name)
}
inline std::string* SortingField::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SortingField.name)
  return _s;
}
inline const std::string& SortingField::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void SortingField::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* SortingField::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* SortingField::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.SortingField.name)
  return _impl_.name_.Release();
}
inline void SortingField::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.SortingField.name)
}

// .kentik.alerting.types.v202303.SortOrder order = 2 [json_name = "order"];
inline void SortingField::clear_order() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_ = 0;
}
inline ::kentik::alerting::types::v202303::SortOrder SortingField::order() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SortingField.order)
  return _internal_order();
}
inline void SortingField::set_order(::kentik::alerting::types::v202303::SortOrder value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SortingField.order)
}
inline ::kentik::alerting::types::v202303::SortOrder SortingField::_internal_order() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kentik::alerting::types::v202303::SortOrder>(_impl_.order_);
}
inline void SortingField::_internal_set_order(::kentik::alerting::types::v202303::SortOrder value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_ = value;
}

// repeated string values = 3 [json_name = "values"];
inline int SortingField::_internal_values_size() const {
  return _internal_values().size();
}
inline int SortingField::values_size() const {
  return _internal_values_size();
}
inline void SortingField::clear_values() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.values_.Clear();
}
inline std::string* SortingField::add_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_values()->Add();
  // @@protoc_insertion_point(field_add_mutable:kentik.alerting.types.v202303.SortingField.values)
  return _s;
}
inline const std::string& SortingField::values(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.SortingField.values)
  return _internal_values().Get(index);
}
inline std::string* SortingField::mutable_values(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.SortingField.values)
  return _internal_mutable_values()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void SortingField::set_values(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_values()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202303.SortingField.values)
}
template <typename Arg_, typename... Args_>
inline void SortingField::add_values(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_values(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:kentik.alerting.types.v202303.SortingField.values)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SortingField::values() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.types.v202303.SortingField.values)
  return _internal_values();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SortingField::mutable_values() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.types.v202303.SortingField.values)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_values();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
SortingField::_internal_values() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.values_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
SortingField::_internal_mutable_values() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.values_;
}

// -------------------------------------------------------------------

// TimeRange

// .google.protobuf.Timestamp start = 1 [json_name = "start"];
inline bool TimeRange::has_start() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.start_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TimeRange::_internal_start() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TimeRange::start() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.TimeRange.start)
  return _internal_start();
}
inline void TimeRange::unsafe_arena_set_allocated_start(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.alerting.types.v202303.TimeRange.start)
}
inline ::google::protobuf::Timestamp* TimeRange::release_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.start_;
  _impl_.start_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* TimeRange::unsafe_arena_release_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.TimeRange.start)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeRange::_internal_mutable_start() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.start_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.start_;
}
inline ::google::protobuf::Timestamp* TimeRange::mutable_start() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.TimeRange.start)
  return _msg;
}
inline void TimeRange::set_allocated_start(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.start_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.start_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.TimeRange.start)
}

// .google.protobuf.Timestamp end = 2 [json_name = "end"];
inline bool TimeRange::has_end() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TimeRange::_internal_end() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TimeRange::end() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202303.TimeRange.end)
  return _internal_end();
}
inline void TimeRange::unsafe_arena_set_allocated_end(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.alerting.types.v202303.TimeRange.end)
}
inline ::google::protobuf::Timestamp* TimeRange::release_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.end_;
  _impl_.end_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* TimeRange::unsafe_arena_release_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202303.TimeRange.end)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeRange::_internal_mutable_end() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.end_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_;
}
inline ::google::protobuf::Timestamp* TimeRange::mutable_end() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202303.TimeRange.end)
  return _msg;
}
inline void TimeRange::set_allocated_end(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.end_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202303.TimeRange.end)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// KeyValue

// map<string, string> value = 1 [json_name = "value"];
inline int KeyValue::_internal_value_size() const {
  return _internal_value().size();
}
inline int KeyValue::value_size() const {
  return _internal_value_size();
}
inline void KeyValue::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.value_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& KeyValue::_internal_value() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.value_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& KeyValue::value() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:kentik.alerting.types.v202303.KeyValue.value)
  return _internal_value();
}
inline ::google::protobuf::Map<std::string, std::string>* KeyValue::_internal_mutable_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.value_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* KeyValue::mutable_value() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:kentik.alerting.types.v202303.KeyValue.value)
  return _internal_mutable_value();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202303
}  // namespace types
}  // namespace alerting
}  // namespace kentik


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kentik::alerting::types::v202303::Severity> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::alerting::types::v202303::Severity>() {
  return ::kentik::alerting::types::v202303::Severity_descriptor();
}
template <>
struct is_proto_enum<::kentik::alerting::types::v202303::SortOrder> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::alerting::types::v202303::SortOrder>() {
  return ::kentik::alerting::types::v202303::SortOrder_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2falerting_2ftypes_2fv202303_2ftypes_2eproto_2epb_2eh
