// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/alerting/types/v202506/mitigation.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2falerting_2ftypes_2fv202506_2fmitigation_2eproto_2epb_2eh
#define kentik_2falerting_2ftypes_2fv202506_2fmitigation_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "kentik/alerting/types/v202303/types.pb.h"
#include "kentik/ktbgp/v202501/route_service.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2falerting_2ftypes_2fv202506_2fmitigation_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2falerting_2ftypes_2fv202506_2fmitigation_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2falerting_2ftypes_2fv202506_2fmitigation_2eproto;
namespace kentik {
namespace alerting {
namespace types {
namespace v202506 {
class MitigationTarget;
struct MitigationTargetDefaultTypeInternal;
extern MitigationTargetDefaultTypeInternal _MitigationTarget_default_instance_;
}  // namespace v202506
}  // namespace types
}  // namespace alerting
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace alerting {
namespace types {
namespace v202506 {

// ===================================================================


// -------------------------------------------------------------------

class MitigationTarget final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.types.v202506.MitigationTarget) */ {
 public:
  inline MitigationTarget() : MitigationTarget(nullptr) {}
  ~MitigationTarget() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MitigationTarget* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MitigationTarget));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MitigationTarget(
      ::google::protobuf::internal::ConstantInitialized);

  inline MitigationTarget(const MitigationTarget& from) : MitigationTarget(nullptr, from) {}
  inline MitigationTarget(MitigationTarget&& from) noexcept
      : MitigationTarget(nullptr, std::move(from)) {}
  inline MitigationTarget& operator=(const MitigationTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline MitigationTarget& operator=(MitigationTarget&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MitigationTarget& default_instance() {
    return *internal_default_instance();
  }
  enum TargetCase {
    kIpCidr = 1,
    kFlowspec = 2,
    kAdaptiveFlowspec = 3,
    TARGET_NOT_SET = 0,
  };
  static inline const MitigationTarget* internal_default_instance() {
    return reinterpret_cast<const MitigationTarget*>(
        &_MitigationTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MitigationTarget& a, MitigationTarget& b) { a.Swap(&b); }
  inline void Swap(MitigationTarget* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MitigationTarget* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MitigationTarget* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MitigationTarget>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MitigationTarget& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MitigationTarget& from) { MitigationTarget::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MitigationTarget* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.types.v202506.MitigationTarget"; }

 protected:
  explicit MitigationTarget(::google::protobuf::Arena* arena);
  MitigationTarget(::google::protobuf::Arena* arena, const MitigationTarget& from);
  MitigationTarget(::google::protobuf::Arena* arena, MitigationTarget&& from) noexcept
      : MitigationTarget(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpCidrFieldNumber = 1,
    kFlowspecFieldNumber = 2,
    kAdaptiveFlowspecFieldNumber = 3,
  };
  // string ip_cidr = 1 [json_name = "ipCidr"];
  bool has_ip_cidr() const;
  void clear_ip_cidr() ;
  const std::string& ip_cidr() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_cidr(Arg_&& arg, Args_... args);
  std::string* mutable_ip_cidr();
  PROTOBUF_NODISCARD std::string* release_ip_cidr();
  void set_allocated_ip_cidr(std::string* value);

  private:
  const std::string& _internal_ip_cidr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_cidr(
      const std::string& value);
  std::string* _internal_mutable_ip_cidr();

  public:
  // .kentik.ktbgp.v202501.FlowspecMatch flowspec = 2 [json_name = "flowspec"];
  bool has_flowspec() const;
  private:
  bool _internal_has_flowspec() const;

  public:
  void clear_flowspec() ;
  const ::kentik::ktbgp::v202501::FlowspecMatch& flowspec() const;
  PROTOBUF_NODISCARD ::kentik::ktbgp::v202501::FlowspecMatch* release_flowspec();
  ::kentik::ktbgp::v202501::FlowspecMatch* mutable_flowspec();
  void set_allocated_flowspec(::kentik::ktbgp::v202501::FlowspecMatch* value);
  void unsafe_arena_set_allocated_flowspec(::kentik::ktbgp::v202501::FlowspecMatch* value);
  ::kentik::ktbgp::v202501::FlowspecMatch* unsafe_arena_release_flowspec();

  private:
  const ::kentik::ktbgp::v202501::FlowspecMatch& _internal_flowspec() const;
  ::kentik::ktbgp::v202501::FlowspecMatch* _internal_mutable_flowspec();

  public:
  // .kentik.alerting.types.v202303.KeyValue adaptive_flowspec = 3 [json_name = "adaptiveFlowspec"];
  bool has_adaptive_flowspec() const;
  private:
  bool _internal_has_adaptive_flowspec() const;

  public:
  void clear_adaptive_flowspec() ;
  const ::kentik::alerting::types::v202303::KeyValue& adaptive_flowspec() const;
  PROTOBUF_NODISCARD ::kentik::alerting::types::v202303::KeyValue* release_adaptive_flowspec();
  ::kentik::alerting::types::v202303::KeyValue* mutable_adaptive_flowspec();
  void set_allocated_adaptive_flowspec(::kentik::alerting::types::v202303::KeyValue* value);
  void unsafe_arena_set_allocated_adaptive_flowspec(::kentik::alerting::types::v202303::KeyValue* value);
  ::kentik::alerting::types::v202303::KeyValue* unsafe_arena_release_adaptive_flowspec();

  private:
  const ::kentik::alerting::types::v202303::KeyValue& _internal_adaptive_flowspec() const;
  ::kentik::alerting::types::v202303::KeyValue* _internal_mutable_adaptive_flowspec();

  public:
  void clear_target();
  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:kentik.alerting.types.v202506.MitigationTarget)
 private:
  class _Internal;
  void set_has_ip_cidr();
  void set_has_flowspec();
  void set_has_adaptive_flowspec();
  inline bool has_target() const;
  inline void clear_has_target();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 2,
      62, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MitigationTarget& from_msg);
    union TargetUnion {
      constexpr TargetUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr ip_cidr_;
      ::kentik::ktbgp::v202501::FlowspecMatch* flowspec_;
      ::kentik::alerting::types::v202303::KeyValue* adaptive_flowspec_;
    } target_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2ftypes_2fv202506_2fmitigation_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MitigationTarget

// string ip_cidr = 1 [json_name = "ipCidr"];
inline bool MitigationTarget::has_ip_cidr() const {
  return target_case() == kIpCidr;
}
inline void MitigationTarget::set_has_ip_cidr() {
  _impl_._oneof_case_[0] = kIpCidr;
}
inline void MitigationTarget::clear_ip_cidr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (target_case() == kIpCidr) {
    _impl_.target_.ip_cidr_.Destroy();
    clear_has_target();
  }
}
inline const std::string& MitigationTarget::ip_cidr() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202506.MitigationTarget.ip_cidr)
  return _internal_ip_cidr();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MitigationTarget::set_ip_cidr(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (target_case() != kIpCidr) {
    clear_target();

    set_has_ip_cidr();
    _impl_.target_.ip_cidr_.InitDefault();
  }
  _impl_.target_.ip_cidr_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.types.v202506.MitigationTarget.ip_cidr)
}
inline std::string* MitigationTarget::mutable_ip_cidr() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip_cidr();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202506.MitigationTarget.ip_cidr)
  return _s;
}
inline const std::string& MitigationTarget::_internal_ip_cidr() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (target_case() != kIpCidr) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.target_.ip_cidr_.Get();
}
inline void MitigationTarget::_internal_set_ip_cidr(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (target_case() != kIpCidr) {
    clear_target();

    set_has_ip_cidr();
    _impl_.target_.ip_cidr_.InitDefault();
  }
  _impl_.target_.ip_cidr_.Set(value, GetArena());
}
inline std::string* MitigationTarget::_internal_mutable_ip_cidr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (target_case() != kIpCidr) {
    clear_target();

    set_has_ip_cidr();
    _impl_.target_.ip_cidr_.InitDefault();
  }
  return _impl_.target_.ip_cidr_.Mutable( GetArena());
}
inline std::string* MitigationTarget::release_ip_cidr() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202506.MitigationTarget.ip_cidr)
  if (target_case() != kIpCidr) {
    return nullptr;
  }
  clear_has_target();
  return _impl_.target_.ip_cidr_.Release();
}
inline void MitigationTarget::set_allocated_ip_cidr(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_target()) {
    clear_target();
  }
  if (value != nullptr) {
    set_has_ip_cidr();
    _impl_.target_.ip_cidr_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.types.v202506.MitigationTarget.ip_cidr)
}

// .kentik.ktbgp.v202501.FlowspecMatch flowspec = 2 [json_name = "flowspec"];
inline bool MitigationTarget::has_flowspec() const {
  return target_case() == kFlowspec;
}
inline bool MitigationTarget::_internal_has_flowspec() const {
  return target_case() == kFlowspec;
}
inline void MitigationTarget::set_has_flowspec() {
  _impl_._oneof_case_[0] = kFlowspec;
}
inline ::kentik::ktbgp::v202501::FlowspecMatch* MitigationTarget::release_flowspec() {
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202506.MitigationTarget.flowspec)
  if (target_case() == kFlowspec) {
    clear_has_target();
    auto* temp = _impl_.target_.flowspec_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.target_.flowspec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::ktbgp::v202501::FlowspecMatch& MitigationTarget::_internal_flowspec() const {
  return target_case() == kFlowspec ? *_impl_.target_.flowspec_ : reinterpret_cast<::kentik::ktbgp::v202501::FlowspecMatch&>(::kentik::ktbgp::v202501::_FlowspecMatch_default_instance_);
}
inline const ::kentik::ktbgp::v202501::FlowspecMatch& MitigationTarget::flowspec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202506.MitigationTarget.flowspec)
  return _internal_flowspec();
}
inline ::kentik::ktbgp::v202501::FlowspecMatch* MitigationTarget::unsafe_arena_release_flowspec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.alerting.types.v202506.MitigationTarget.flowspec)
  if (target_case() == kFlowspec) {
    clear_has_target();
    auto* temp = _impl_.target_.flowspec_;
    _impl_.target_.flowspec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MitigationTarget::unsafe_arena_set_allocated_flowspec(::kentik::ktbgp::v202501::FlowspecMatch* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_target();
  if (value) {
    set_has_flowspec();
    _impl_.target_.flowspec_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.alerting.types.v202506.MitigationTarget.flowspec)
}
inline ::kentik::ktbgp::v202501::FlowspecMatch* MitigationTarget::_internal_mutable_flowspec() {
  if (target_case() != kFlowspec) {
    clear_target();
    set_has_flowspec();
    _impl_.target_.flowspec_ =
        ::google::protobuf::Message::DefaultConstruct<::kentik::ktbgp::v202501::FlowspecMatch>(GetArena());
  }
  return _impl_.target_.flowspec_;
}
inline ::kentik::ktbgp::v202501::FlowspecMatch* MitigationTarget::mutable_flowspec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kentik::ktbgp::v202501::FlowspecMatch* _msg = _internal_mutable_flowspec();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202506.MitigationTarget.flowspec)
  return _msg;
}

// .kentik.alerting.types.v202303.KeyValue adaptive_flowspec = 3 [json_name = "adaptiveFlowspec"];
inline bool MitigationTarget::has_adaptive_flowspec() const {
  return target_case() == kAdaptiveFlowspec;
}
inline bool MitigationTarget::_internal_has_adaptive_flowspec() const {
  return target_case() == kAdaptiveFlowspec;
}
inline void MitigationTarget::set_has_adaptive_flowspec() {
  _impl_._oneof_case_[0] = kAdaptiveFlowspec;
}
inline ::kentik::alerting::types::v202303::KeyValue* MitigationTarget::release_adaptive_flowspec() {
  // @@protoc_insertion_point(field_release:kentik.alerting.types.v202506.MitigationTarget.adaptive_flowspec)
  if (target_case() == kAdaptiveFlowspec) {
    clear_has_target();
    auto* temp = _impl_.target_.adaptive_flowspec_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.target_.adaptive_flowspec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::alerting::types::v202303::KeyValue& MitigationTarget::_internal_adaptive_flowspec() const {
  return target_case() == kAdaptiveFlowspec ? *_impl_.target_.adaptive_flowspec_ : reinterpret_cast<::kentik::alerting::types::v202303::KeyValue&>(::kentik::alerting::types::v202303::_KeyValue_default_instance_);
}
inline const ::kentik::alerting::types::v202303::KeyValue& MitigationTarget::adaptive_flowspec() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.types.v202506.MitigationTarget.adaptive_flowspec)
  return _internal_adaptive_flowspec();
}
inline ::kentik::alerting::types::v202303::KeyValue* MitigationTarget::unsafe_arena_release_adaptive_flowspec() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.alerting.types.v202506.MitigationTarget.adaptive_flowspec)
  if (target_case() == kAdaptiveFlowspec) {
    clear_has_target();
    auto* temp = _impl_.target_.adaptive_flowspec_;
    _impl_.target_.adaptive_flowspec_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MitigationTarget::unsafe_arena_set_allocated_adaptive_flowspec(::kentik::alerting::types::v202303::KeyValue* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_target();
  if (value) {
    set_has_adaptive_flowspec();
    _impl_.target_.adaptive_flowspec_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.alerting.types.v202506.MitigationTarget.adaptive_flowspec)
}
inline ::kentik::alerting::types::v202303::KeyValue* MitigationTarget::_internal_mutable_adaptive_flowspec() {
  if (target_case() != kAdaptiveFlowspec) {
    clear_target();
    set_has_adaptive_flowspec();
    _impl_.target_.adaptive_flowspec_ =
        ::google::protobuf::Message::DefaultConstruct<::kentik::alerting::types::v202303::KeyValue>(GetArena());
  }
  return _impl_.target_.adaptive_flowspec_;
}
inline ::kentik::alerting::types::v202303::KeyValue* MitigationTarget::mutable_adaptive_flowspec() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::kentik::alerting::types::v202303::KeyValue* _msg = _internal_mutable_adaptive_flowspec();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.types.v202506.MitigationTarget.adaptive_flowspec)
  return _msg;
}

inline bool MitigationTarget::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void MitigationTarget::clear_has_target() {
  _impl_._oneof_case_[0] = TARGET_NOT_SET;
}
inline MitigationTarget::TargetCase MitigationTarget::target_case() const {
  return MitigationTarget::TargetCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202506
}  // namespace types
}  // namespace alerting
}  // namespace kentik


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2falerting_2ftypes_2fv202506_2fmitigation_2eproto_2epb_2eh
