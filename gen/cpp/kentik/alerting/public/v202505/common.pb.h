// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/alerting/public/v202505/common.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2falerting_2fpublic_2fv202505_2fcommon_2eproto_2epb_2eh
#define kentik_2falerting_2fpublic_2fv202505_2fcommon_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/field_behavior.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2falerting_2fpublic_2fv202505_2fcommon_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2falerting_2fpublic_2fv202505_2fcommon_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fcommon_2eproto;
namespace kentik {
namespace alerting {
namespace public_ {
namespace v202505 {
class NotificationChannelAssociation;
struct NotificationChannelAssociationDefaultTypeInternal;
extern NotificationChannelAssociationDefaultTypeInternal _NotificationChannelAssociation_default_instance_;
class Source;
struct SourceDefaultTypeInternal;
extern SourceDefaultTypeInternal _Source_default_instance_;
}  // namespace v202505
}  // namespace public_
}  // namespace alerting
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace alerting {
namespace public_ {
namespace v202505 {
enum PolicyType : int {
  POLICY_TYPE_UNSPECIFIED = 0,
  POLICY_TYPE_AGENT = 1,
  POLICY_TYPE_COMPONENT = 2,
  POLICY_TYPE_DEVICE = 4,
  POLICY_TYPE_EVENT = 5,
  POLICY_TYPE_INTERFACE = 6,
  POLICY_TYPE_CUSTOM = 7,
  POLICY_TYPE_CLOUD = 8,
  POLICY_TYPE_PROTECT = 9,
  POLICY_TYPE_TRAFFIC = 10,
  POLICY_TYPE_KMETRICS = 11,
  PolicyType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  PolicyType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool PolicyType_IsValid(int value);
extern const uint32_t PolicyType_internal_data_[];
constexpr PolicyType PolicyType_MIN = static_cast<PolicyType>(0);
constexpr PolicyType PolicyType_MAX = static_cast<PolicyType>(11);
constexpr int PolicyType_ARRAYSIZE = 11 + 1;
const ::google::protobuf::EnumDescriptor*
PolicyType_descriptor();
template <typename T>
const std::string& PolicyType_Name(T value) {
  static_assert(std::is_same<T, PolicyType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PolicyType_Name().");
  return PolicyType_Name(static_cast<PolicyType>(value));
}
template <>
inline const std::string& PolicyType_Name(PolicyType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<PolicyType_descriptor,
                                                 0, 11>(
      static_cast<int>(value));
}
inline bool PolicyType_Parse(absl::string_view name, PolicyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PolicyType>(
      PolicyType_descriptor(), name, value);
}
enum ActivationMode : int {
  ACTIVATION_MODE_UNSPECIFIED = 0,
  ACTIVATION_MODE_ROLLING_WINDOW = 1,
  ACTIVATION_MODE_TOGGLE = 2,
  ActivationMode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ActivationMode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ActivationMode_IsValid(int value);
extern const uint32_t ActivationMode_internal_data_[];
constexpr ActivationMode ActivationMode_MIN = static_cast<ActivationMode>(0);
constexpr ActivationMode ActivationMode_MAX = static_cast<ActivationMode>(2);
constexpr int ActivationMode_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
ActivationMode_descriptor();
template <typename T>
const std::string& ActivationMode_Name(T value) {
  static_assert(std::is_same<T, ActivationMode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ActivationMode_Name().");
  return ActivationMode_Name(static_cast<ActivationMode>(value));
}
template <>
inline const std::string& ActivationMode_Name(ActivationMode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ActivationMode_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool ActivationMode_Parse(absl::string_view name, ActivationMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ActivationMode>(
      ActivationMode_descriptor(), name, value);
}
enum AggregationType : int {
  AGGREGATION_TYPE_UNSPECIFIED = 0,
  AGGREGATION_TYPE_REL_P05 = 1,
  AGGREGATION_TYPE_REL_P10 = 2,
  AGGREGATION_TYPE_REL_P25 = 3,
  AGGREGATION_TYPE_REL_P50 = 4,
  AGGREGATION_TYPE_REL_P75 = 5,
  AGGREGATION_TYPE_REL_P80 = 6,
  AGGREGATION_TYPE_REL_P90 = 7,
  AGGREGATION_TYPE_REL_P95 = 8,
  AGGREGATION_TYPE_REL_P98 = 9,
  AGGREGATION_TYPE_REL_P99 = 10,
  AGGREGATION_TYPE_REL_MAX = 11,
  AGGREGATION_TYPE_REL_MIN = 12,
  AggregationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  AggregationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool AggregationType_IsValid(int value);
extern const uint32_t AggregationType_internal_data_[];
constexpr AggregationType AggregationType_MIN = static_cast<AggregationType>(0);
constexpr AggregationType AggregationType_MAX = static_cast<AggregationType>(12);
constexpr int AggregationType_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor*
AggregationType_descriptor();
template <typename T>
const std::string& AggregationType_Name(T value) {
  static_assert(std::is_same<T, AggregationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AggregationType_Name().");
  return AggregationType_Name(static_cast<AggregationType>(value));
}
template <>
inline const std::string& AggregationType_Name(AggregationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<AggregationType_descriptor,
                                                 0, 12>(
      static_cast<int>(value));
}
inline bool AggregationType_Parse(absl::string_view name, AggregationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AggregationType>(
      AggregationType_descriptor(), name, value);
}
enum MitigationType : int {
  MITIGATION_TYPE_UNSPECIFIED = 0,
  MITIGATION_TYPE_MANUAL = 1,
  MITIGATION_TYPE_AUTO = 2,
  MitigationType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MitigationType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MitigationType_IsValid(int value);
extern const uint32_t MitigationType_internal_data_[];
constexpr MitigationType MitigationType_MIN = static_cast<MitigationType>(0);
constexpr MitigationType MitigationType_MAX = static_cast<MitigationType>(2);
constexpr int MitigationType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
MitigationType_descriptor();
template <typename T>
const std::string& MitigationType_Name(T value) {
  static_assert(std::is_same<T, MitigationType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MitigationType_Name().");
  return MitigationType_Name(static_cast<MitigationType>(value));
}
template <>
inline const std::string& MitigationType_Name(MitigationType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MitigationType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MitigationType_Parse(absl::string_view name, MitigationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MitigationType>(
      MitigationType_descriptor(), name, value);
}
enum MitigationPlatformType : int {
  MITIGATION_PLATFORM_TYPE_UNSPECIFIED = 0,
  MITIGATION_PLATFORM_TYPE_A10 = 1,
  MITIGATION_PLATFORM_TYPE_FLOWSPEC = 2,
  MITIGATION_PLATFORM_TYPE_RADWARE = 3,
  MITIGATION_PLATFORM_TYPE_RTBH = 4,
  MITIGATION_PLATFORM_TYPE_CFMT = 5,
  MITIGATION_PLATFORM_TYPE_ADAPTIVE_FLOWSPEC = 6,
  MitigationPlatformType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MitigationPlatformType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MitigationPlatformType_IsValid(int value);
extern const uint32_t MitigationPlatformType_internal_data_[];
constexpr MitigationPlatformType MitigationPlatformType_MIN = static_cast<MitigationPlatformType>(0);
constexpr MitigationPlatformType MitigationPlatformType_MAX = static_cast<MitigationPlatformType>(6);
constexpr int MitigationPlatformType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
MitigationPlatformType_descriptor();
template <typename T>
const std::string& MitigationPlatformType_Name(T value) {
  static_assert(std::is_same<T, MitigationPlatformType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MitigationPlatformType_Name().");
  return MitigationPlatformType_Name(static_cast<MitigationPlatformType>(value));
}
template <>
inline const std::string& MitigationPlatformType_Name(MitigationPlatformType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MitigationPlatformType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool MitigationPlatformType_Parse(absl::string_view name, MitigationPlatformType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MitigationPlatformType>(
      MitigationPlatformType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class Source final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.public.v202505.Source) */ {
 public:
  inline Source() : Source(nullptr) {}
  ~Source() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Source* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Source));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Source(
      ::google::protobuf::internal::ConstantInitialized);

  inline Source(const Source& from) : Source(nullptr, from) {}
  inline Source(Source&& from) noexcept
      : Source(nullptr, std::move(from)) {}
  inline Source& operator=(const Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline Source& operator=(Source&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Source& default_instance() {
    return *internal_default_instance();
  }
  static inline const Source* internal_default_instance() {
    return reinterpret_cast<const Source*>(
        &_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Source& a, Source& b) { a.Swap(&b); }
  inline void Swap(Source* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Source* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Source* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Source>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Source& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Source& from) { Source::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Source* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.public.v202505.Source"; }

 protected:
  explicit Source(::google::protobuf::Arena* arena);
  Source(::google::protobuf::Arena* arena, const Source& from);
  Source(::google::protobuf::Arena* arena, Source&& from) noexcept
      : Source(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 2,
    kPolicyTypeFieldNumber = 1,
  };
  // string id = 2 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .kentik.alerting.public.v202505.PolicyType policy_type = 1 [json_name = "policyType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_policy_type() ;
  ::kentik::alerting::public_::v202505::PolicyType policy_type() const;
  void set_policy_type(::kentik::alerting::public_::v202505::PolicyType value);

  private:
  ::kentik::alerting::public_::v202505::PolicyType _internal_policy_type() const;
  void _internal_set_policy_type(::kentik::alerting::public_::v202505::PolicyType value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.public.v202505.Source)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      48, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Source& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    int policy_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2fpublic_2fv202505_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class NotificationChannelAssociation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.public.v202505.NotificationChannelAssociation) */ {
 public:
  inline NotificationChannelAssociation() : NotificationChannelAssociation(nullptr) {}
  ~NotificationChannelAssociation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NotificationChannelAssociation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NotificationChannelAssociation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationChannelAssociation(
      ::google::protobuf::internal::ConstantInitialized);

  inline NotificationChannelAssociation(const NotificationChannelAssociation& from) : NotificationChannelAssociation(nullptr, from) {}
  inline NotificationChannelAssociation(NotificationChannelAssociation&& from) noexcept
      : NotificationChannelAssociation(nullptr, std::move(from)) {}
  inline NotificationChannelAssociation& operator=(const NotificationChannelAssociation& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationChannelAssociation& operator=(NotificationChannelAssociation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationChannelAssociation& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationChannelAssociation* internal_default_instance() {
    return reinterpret_cast<const NotificationChannelAssociation*>(
        &_NotificationChannelAssociation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(NotificationChannelAssociation& a, NotificationChannelAssociation& b) { a.Swap(&b); }
  inline void Swap(NotificationChannelAssociation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationChannelAssociation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationChannelAssociation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NotificationChannelAssociation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationChannelAssociation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NotificationChannelAssociation& from) { NotificationChannelAssociation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NotificationChannelAssociation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.public.v202505.NotificationChannelAssociation"; }

 protected:
  explicit NotificationChannelAssociation(::google::protobuf::Arena* arena);
  NotificationChannelAssociation(::google::protobuf::Arena* arena, const NotificationChannelAssociation& from);
  NotificationChannelAssociation(::google::protobuf::Arena* arena, NotificationChannelAssociation&& from) noexcept
      : NotificationChannelAssociation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelIdFieldNumber = 1,
  };
  // string channel_id = 1 [json_name = "channelId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_channel_id() ;
  const std::string& channel_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_channel_id(Arg_&& arg, Args_... args);
  std::string* mutable_channel_id();
  PROTOBUF_NODISCARD std::string* release_channel_id();
  void set_allocated_channel_id(std::string* value);

  private:
  const std::string& _internal_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_id(
      const std::string& value);
  std::string* _internal_mutable_channel_id();

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.public.v202505.NotificationChannelAssociation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NotificationChannelAssociation& from_msg);
    ::google::protobuf::internal::ArenaStringPtr channel_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2fpublic_2fv202505_2fcommon_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Source

// .kentik.alerting.public.v202505.PolicyType policy_type = 1 [json_name = "policyType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Source::clear_policy_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_type_ = 0;
}
inline ::kentik::alerting::public_::v202505::PolicyType Source::policy_type() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.public.v202505.Source.policy_type)
  return _internal_policy_type();
}
inline void Source::set_policy_type(::kentik::alerting::public_::v202505::PolicyType value) {
  _internal_set_policy_type(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.public.v202505.Source.policy_type)
}
inline ::kentik::alerting::public_::v202505::PolicyType Source::_internal_policy_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kentik::alerting::public_::v202505::PolicyType>(_impl_.policy_type_);
}
inline void Source::_internal_set_policy_type(::kentik::alerting::public_::v202505::PolicyType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.policy_type_ = value;
}

// string id = 2 [json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Source::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Source::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.public.v202505.Source.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Source::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.public.v202505.Source.id)
}
inline std::string* Source::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.public.v202505.Source.id)
  return _s;
}
inline const std::string& Source::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Source::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Source::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Source::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.public.v202505.Source.id)
  return _impl_.id_.Release();
}
inline void Source::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.public.v202505.Source.id)
}

// -------------------------------------------------------------------

// NotificationChannelAssociation

// string channel_id = 1 [json_name = "channelId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NotificationChannelAssociation::clear_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.ClearToEmpty();
}
inline const std::string& NotificationChannelAssociation::channel_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.public.v202505.NotificationChannelAssociation.channel_id)
  return _internal_channel_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationChannelAssociation::set_channel_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.alerting.public.v202505.NotificationChannelAssociation.channel_id)
}
inline std::string* NotificationChannelAssociation::mutable_channel_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_channel_id();
  // @@protoc_insertion_point(field_mutable:kentik.alerting.public.v202505.NotificationChannelAssociation.channel_id)
  return _s;
}
inline const std::string& NotificationChannelAssociation::_internal_channel_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.channel_id_.Get();
}
inline void NotificationChannelAssociation::_internal_set_channel_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.Set(value, GetArena());
}
inline std::string* NotificationChannelAssociation::_internal_mutable_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.channel_id_.Mutable( GetArena());
}
inline std::string* NotificationChannelAssociation::release_channel_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.alerting.public.v202505.NotificationChannelAssociation.channel_id)
  return _impl_.channel_id_.Release();
}
inline void NotificationChannelAssociation::set_allocated_channel_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.channel_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.channel_id_.IsDefault()) {
    _impl_.channel_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.alerting.public.v202505.NotificationChannelAssociation.channel_id)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202505
}  // namespace public_
}  // namespace alerting
}  // namespace kentik


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kentik::alerting::public_::v202505::PolicyType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::alerting::public_::v202505::PolicyType>() {
  return ::kentik::alerting::public_::v202505::PolicyType_descriptor();
}
template <>
struct is_proto_enum<::kentik::alerting::public_::v202505::ActivationMode> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::alerting::public_::v202505::ActivationMode>() {
  return ::kentik::alerting::public_::v202505::ActivationMode_descriptor();
}
template <>
struct is_proto_enum<::kentik::alerting::public_::v202505::AggregationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::alerting::public_::v202505::AggregationType>() {
  return ::kentik::alerting::public_::v202505::AggregationType_descriptor();
}
template <>
struct is_proto_enum<::kentik::alerting::public_::v202505::MitigationType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::alerting::public_::v202505::MitigationType>() {
  return ::kentik::alerting::public_::v202505::MitigationType_descriptor();
}
template <>
struct is_proto_enum<::kentik::alerting::public_::v202505::MitigationPlatformType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::alerting::public_::v202505::MitigationPlatformType>() {
  return ::kentik::alerting::public_::v202505::MitigationPlatformType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2falerting_2fpublic_2fv202505_2fcommon_2eproto_2epb_2eh
