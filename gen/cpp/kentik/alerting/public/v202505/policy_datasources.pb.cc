// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/alerting/public/v202505/policy_datasources.proto
// Protobuf C++ Version: 5.29.3

#include "kentik/alerting/public/v202505/policy_datasources.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kentik {
namespace alerting {
namespace public_ {
namespace v202505 {

inline constexpr PolicyDataSources::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : device_ids_{},
        label_ids_{},
        site_ids_{},
        types_{},
        all_devices_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PolicyDataSources::PolicyDataSources(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PolicyDataSourcesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PolicyDataSourcesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PolicyDataSourcesDefaultTypeInternal() {}
  union {
    PolicyDataSources _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PolicyDataSourcesDefaultTypeInternal _PolicyDataSources_default_instance_;
}  // namespace v202505
}  // namespace public_
}  // namespace alerting
}  // namespace kentik
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto = nullptr;
const ::uint32_t
    TableStruct_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::alerting::public_::v202505::PolicyDataSources, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::alerting::public_::v202505::PolicyDataSources, _impl_.all_devices_),
        PROTOBUF_FIELD_OFFSET(::kentik::alerting::public_::v202505::PolicyDataSources, _impl_.device_ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::alerting::public_::v202505::PolicyDataSources, _impl_.label_ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::alerting::public_::v202505::PolicyDataSources, _impl_.site_ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::alerting::public_::v202505::PolicyDataSources, _impl_.types_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::kentik::alerting::public_::v202505::PolicyDataSources)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kentik::alerting::public_::v202505::_PolicyDataSources_default_instance_._instance,
};
const char descriptor_table_protodef_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n7kentik/alerting/public/v202505/policy_"
    "datasources.proto\022\036kentik.alerting.publi"
    "c.v202505\032\037google/api/field_behavior.pro"
    "to\032.protoc-gen-openapiv2/options/annotat"
    "ions.proto\032%kentik/core/v202303/annotati"
    "ons.proto\"\354\003\n\021PolicyDataSources\022b\n\013all_d"
    "evices\030\001 \001(\010BA\222A>2<If true, all devices "
    "traffic will be included in the policy.R"
    "\nallDevices\022\204\001\n\ndevice_ids\030\002 \003(\tBe\222Ab2`T"
    "he IDs of the devices to include in the "
    "policy. If all_devices is true, this fie"
    "ld is ignored. R\tdeviceIds\022Q\n\tlabel_ids\030"
    "\003 \003(\tB4\222A12/The IDs of the labels to inc"
    "lude in the policy.R\010labelIds\022N\n\010site_id"
    "s\030\004 \003(\tB3\222A02.The IDs of the sites to in"
    "clude in the policy.R\007siteIds\022I\n\005types\030\005"
    " \003(\tB3\222A02.The types of devices to inclu"
    "de in the policy.R\005typesBKZIgithub.com/k"
    "entik/api-schema-public/gen/go/kentik/al"
    "erting/public/v202505b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
        &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
        &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto = {
    false,
    false,
    789,
    descriptor_table_protodef_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto,
    "kentik/alerting/public/v202505/policy_datasources.proto",
    &descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto_once,
    descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto_deps,
    3,
    1,
    schemas,
    file_default_instances,
    TableStruct_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto::offsets,
    file_level_enum_descriptors_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto,
    file_level_service_descriptors_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto,
};
namespace kentik {
namespace alerting {
namespace public_ {
namespace v202505 {
// ===================================================================

class PolicyDataSources::_Internal {
 public:
};

PolicyDataSources::PolicyDataSources(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.alerting.public.v202505.PolicyDataSources)
}
inline PROTOBUF_NDEBUG_INLINE PolicyDataSources::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::alerting::public_::v202505::PolicyDataSources& from_msg)
      : device_ids_{visibility, arena, from.device_ids_},
        label_ids_{visibility, arena, from.label_ids_},
        site_ids_{visibility, arena, from.site_ids_},
        types_{visibility, arena, from.types_},
        _cached_size_{0} {}

PolicyDataSources::PolicyDataSources(
    ::google::protobuf::Arena* arena,
    const PolicyDataSources& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PolicyDataSources* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.all_devices_ = from._impl_.all_devices_;

  // @@protoc_insertion_point(copy_constructor:kentik.alerting.public.v202505.PolicyDataSources)
}
inline PROTOBUF_NDEBUG_INLINE PolicyDataSources::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : device_ids_{visibility, arena},
        label_ids_{visibility, arena},
        site_ids_{visibility, arena},
        types_{visibility, arena},
        _cached_size_{0} {}

inline void PolicyDataSources::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.all_devices_ = {};
}
PolicyDataSources::~PolicyDataSources() {
  // @@protoc_insertion_point(destructor:kentik.alerting.public.v202505.PolicyDataSources)
  SharedDtor(*this);
}
inline void PolicyDataSources::SharedDtor(MessageLite& self) {
  PolicyDataSources& this_ = static_cast<PolicyDataSources&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PolicyDataSources::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PolicyDataSources(arena);
}
constexpr auto PolicyDataSources::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.device_ids_) +
          decltype(PolicyDataSources::_impl_.device_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.label_ids_) +
          decltype(PolicyDataSources::_impl_.label_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.site_ids_) +
          decltype(PolicyDataSources::_impl_.site_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.types_) +
          decltype(PolicyDataSources::_impl_.types_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(PolicyDataSources), alignof(PolicyDataSources), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&PolicyDataSources::PlacementNew_,
                                 sizeof(PolicyDataSources),
                                 alignof(PolicyDataSources));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PolicyDataSources::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PolicyDataSources_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PolicyDataSources::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PolicyDataSources>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PolicyDataSources::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PolicyDataSources>(), &PolicyDataSources::ByteSizeLong,
            &PolicyDataSources::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_._cached_size_),
        false,
    },
    &PolicyDataSources::kDescriptorMethods,
    &descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PolicyDataSources::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 89, 2> PolicyDataSources::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::alerting::public_::v202505::PolicyDataSources>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool all_devices = 1 [json_name = "allDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(PolicyDataSources, _impl_.all_devices_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.all_devices_)}},
    // repeated string device_ids = 2 [json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.device_ids_)}},
    // repeated string label_ids = 3 [json_name = "labelIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.label_ids_)}},
    // repeated string site_ids = 4 [json_name = "siteIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.site_ids_)}},
    // repeated string types = 5 [json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.types_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bool all_devices = 1 [json_name = "allDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.all_devices_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated string device_ids = 2 [json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.device_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string label_ids = 3 [json_name = "labelIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.label_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string site_ids = 4 [json_name = "siteIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.site_ids_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string types = 5 [json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    {PROTOBUF_FIELD_OFFSET(PolicyDataSources, _impl_.types_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\60\0\12\11\10\5\0\0"
    "kentik.alerting.public.v202505.PolicyDataSources"
    "device_ids"
    "label_ids"
    "site_ids"
    "types"
  }},
};

PROTOBUF_NOINLINE void PolicyDataSources::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.alerting.public.v202505.PolicyDataSources)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_ids_.Clear();
  _impl_.label_ids_.Clear();
  _impl_.site_ids_.Clear();
  _impl_.types_.Clear();
  _impl_.all_devices_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PolicyDataSources::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PolicyDataSources& this_ = static_cast<const PolicyDataSources&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PolicyDataSources::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PolicyDataSources& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.alerting.public.v202505.PolicyDataSources)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool all_devices = 1 [json_name = "allDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          if (this_._internal_all_devices() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_all_devices(), target);
          }

          // repeated string device_ids = 2 [json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          for (int i = 0, n = this_._internal_device_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_device_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.alerting.public.v202505.PolicyDataSources.device_ids");
            target = stream->WriteString(2, s, target);
          }

          // repeated string label_ids = 3 [json_name = "labelIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          for (int i = 0, n = this_._internal_label_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_label_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.alerting.public.v202505.PolicyDataSources.label_ids");
            target = stream->WriteString(3, s, target);
          }

          // repeated string site_ids = 4 [json_name = "siteIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          for (int i = 0, n = this_._internal_site_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_site_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.alerting.public.v202505.PolicyDataSources.site_ids");
            target = stream->WriteString(4, s, target);
          }

          // repeated string types = 5 [json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
          for (int i = 0, n = this_._internal_types_size(); i < n; ++i) {
            const auto& s = this_._internal_types().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.alerting.public.v202505.PolicyDataSources.types");
            target = stream->WriteString(5, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.alerting.public.v202505.PolicyDataSources)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PolicyDataSources::ByteSizeLong(const MessageLite& base) {
          const PolicyDataSources& this_ = static_cast<const PolicyDataSources&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PolicyDataSources::ByteSizeLong() const {
          const PolicyDataSources& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.alerting.public.v202505.PolicyDataSources)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string device_ids = 2 [json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_device_ids().size());
              for (int i = 0, n = this_._internal_device_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_device_ids().Get(i));
              }
            }
            // repeated string label_ids = 3 [json_name = "labelIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_label_ids().size());
              for (int i = 0, n = this_._internal_label_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_label_ids().Get(i));
              }
            }
            // repeated string site_ids = 4 [json_name = "siteIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_site_ids().size());
              for (int i = 0, n = this_._internal_site_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_site_ids().Get(i));
              }
            }
            // repeated string types = 5 [json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_types().size());
              for (int i = 0, n = this_._internal_types().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_types().Get(i));
              }
            }
          }
           {
            // bool all_devices = 1 [json_name = "allDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            if (this_._internal_all_devices() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PolicyDataSources::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PolicyDataSources*>(&to_msg);
  auto& from = static_cast<const PolicyDataSources&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.alerting.public.v202505.PolicyDataSources)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_device_ids()->MergeFrom(from._internal_device_ids());
  _this->_internal_mutable_label_ids()->MergeFrom(from._internal_label_ids());
  _this->_internal_mutable_site_ids()->MergeFrom(from._internal_site_ids());
  _this->_internal_mutable_types()->MergeFrom(from._internal_types());
  if (from._internal_all_devices() != 0) {
    _this->_impl_.all_devices_ = from._impl_.all_devices_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyDataSources::CopyFrom(const PolicyDataSources& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.alerting.public.v202505.PolicyDataSources)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PolicyDataSources::InternalSwap(PolicyDataSources* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.device_ids_.InternalSwap(&other->_impl_.device_ids_);
  _impl_.label_ids_.InternalSwap(&other->_impl_.label_ids_);
  _impl_.site_ids_.InternalSwap(&other->_impl_.site_ids_);
  _impl_.types_.InternalSwap(&other->_impl_.types_);
        swap(_impl_.all_devices_, other->_impl_.all_devices_);
}

::google::protobuf::Metadata PolicyDataSources::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v202505
}  // namespace public_
}  // namespace alerting
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
