// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/alerting/public/v202505/policy_datasources.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto_2epb_2eh
#define kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/field_behavior.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto;
namespace kentik {
namespace alerting {
namespace public_ {
namespace v202505 {
class PolicyDataSources;
struct PolicyDataSourcesDefaultTypeInternal;
extern PolicyDataSourcesDefaultTypeInternal _PolicyDataSources_default_instance_;
}  // namespace v202505
}  // namespace public_
}  // namespace alerting
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace alerting {
namespace public_ {
namespace v202505 {

// ===================================================================


// -------------------------------------------------------------------

class PolicyDataSources final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.alerting.public.v202505.PolicyDataSources) */ {
 public:
  inline PolicyDataSources() : PolicyDataSources(nullptr) {}
  ~PolicyDataSources() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PolicyDataSources* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PolicyDataSources));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PolicyDataSources(
      ::google::protobuf::internal::ConstantInitialized);

  inline PolicyDataSources(const PolicyDataSources& from) : PolicyDataSources(nullptr, from) {}
  inline PolicyDataSources(PolicyDataSources&& from) noexcept
      : PolicyDataSources(nullptr, std::move(from)) {}
  inline PolicyDataSources& operator=(const PolicyDataSources& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyDataSources& operator=(PolicyDataSources&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyDataSources& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyDataSources* internal_default_instance() {
    return reinterpret_cast<const PolicyDataSources*>(
        &_PolicyDataSources_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PolicyDataSources& a, PolicyDataSources& b) { a.Swap(&b); }
  inline void Swap(PolicyDataSources* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyDataSources* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyDataSources* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PolicyDataSources>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PolicyDataSources& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PolicyDataSources& from) { PolicyDataSources::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PolicyDataSources* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.alerting.public.v202505.PolicyDataSources"; }

 protected:
  explicit PolicyDataSources(::google::protobuf::Arena* arena);
  PolicyDataSources(::google::protobuf::Arena* arena, const PolicyDataSources& from);
  PolicyDataSources(::google::protobuf::Arena* arena, PolicyDataSources&& from) noexcept
      : PolicyDataSources(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviceIdsFieldNumber = 2,
    kLabelIdsFieldNumber = 3,
    kSiteIdsFieldNumber = 4,
    kTypesFieldNumber = 5,
    kAllDevicesFieldNumber = 1,
  };
  // repeated string device_ids = 2 [json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int device_ids_size() const;
  private:
  int _internal_device_ids_size() const;

  public:
  void clear_device_ids() ;
  const std::string& device_ids(int index) const;
  std::string* mutable_device_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_ids(int index, Arg_&& value, Args_... args);
  std::string* add_device_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_device_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& device_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_device_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_device_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_device_ids();

  public:
  // repeated string label_ids = 3 [json_name = "labelIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int label_ids_size() const;
  private:
  int _internal_label_ids_size() const;

  public:
  void clear_label_ids() ;
  const std::string& label_ids(int index) const;
  std::string* mutable_label_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label_ids(int index, Arg_&& value, Args_... args);
  std::string* add_label_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_label_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& label_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_label_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_label_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_label_ids();

  public:
  // repeated string site_ids = 4 [json_name = "siteIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int site_ids_size() const;
  private:
  int _internal_site_ids_size() const;

  public:
  void clear_site_ids() ;
  const std::string& site_ids(int index) const;
  std::string* mutable_site_ids(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_site_ids(int index, Arg_&& value, Args_... args);
  std::string* add_site_ids();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_site_ids(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& site_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_site_ids();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_site_ids() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_site_ids();

  public:
  // repeated string types = 5 [json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int types_size() const;
  private:
  int _internal_types_size() const;

  public:
  void clear_types() ;
  const std::string& types(int index) const;
  std::string* mutable_types(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_types(int index, Arg_&& value, Args_... args);
  std::string* add_types();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_types(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& types() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_types();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_types() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_types();

  public:
  // bool all_devices = 1 [json_name = "allDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_all_devices() ;
  bool all_devices() const;
  void set_all_devices(bool value);

  private:
  bool _internal_all_devices() const;
  void _internal_set_all_devices(bool value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.alerting.public.v202505.PolicyDataSources)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      89, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PolicyDataSources& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> device_ids_;
    ::google::protobuf::RepeatedPtrField<std::string> label_ids_;
    ::google::protobuf::RepeatedPtrField<std::string> site_ids_;
    ::google::protobuf::RepeatedPtrField<std::string> types_;
    bool all_devices_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PolicyDataSources

// bool all_devices = 1 [json_name = "allDevices", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PolicyDataSources::clear_all_devices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.all_devices_ = false;
}
inline bool PolicyDataSources::all_devices() const {
  // @@protoc_insertion_point(field_get:kentik.alerting.public.v202505.PolicyDataSources.all_devices)
  return _internal_all_devices();
}
inline void PolicyDataSources::set_all_devices(bool value) {
  _internal_set_all_devices(value);
  // @@protoc_insertion_point(field_set:kentik.alerting.public.v202505.PolicyDataSources.all_devices)
}
inline bool PolicyDataSources::_internal_all_devices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.all_devices_;
}
inline void PolicyDataSources::_internal_set_all_devices(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.all_devices_ = value;
}

// repeated string device_ids = 2 [json_name = "deviceIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int PolicyDataSources::_internal_device_ids_size() const {
  return _internal_device_ids().size();
}
inline int PolicyDataSources::device_ids_size() const {
  return _internal_device_ids_size();
}
inline void PolicyDataSources::clear_device_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.device_ids_.Clear();
}
inline std::string* PolicyDataSources::add_device_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_device_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:kentik.alerting.public.v202505.PolicyDataSources.device_ids)
  return _s;
}
inline const std::string& PolicyDataSources::device_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.public.v202505.PolicyDataSources.device_ids)
  return _internal_device_ids().Get(index);
}
inline std::string* PolicyDataSources::mutable_device_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.public.v202505.PolicyDataSources.device_ids)
  return _internal_mutable_device_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PolicyDataSources::set_device_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_device_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:kentik.alerting.public.v202505.PolicyDataSources.device_ids)
}
template <typename Arg_, typename... Args_>
inline void PolicyDataSources::add_device_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_device_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:kentik.alerting.public.v202505.PolicyDataSources.device_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PolicyDataSources::device_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.public.v202505.PolicyDataSources.device_ids)
  return _internal_device_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PolicyDataSources::mutable_device_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.public.v202505.PolicyDataSources.device_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_device_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PolicyDataSources::_internal_device_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.device_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PolicyDataSources::_internal_mutable_device_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.device_ids_;
}

// repeated string label_ids = 3 [json_name = "labelIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int PolicyDataSources::_internal_label_ids_size() const {
  return _internal_label_ids().size();
}
inline int PolicyDataSources::label_ids_size() const {
  return _internal_label_ids_size();
}
inline void PolicyDataSources::clear_label_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.label_ids_.Clear();
}
inline std::string* PolicyDataSources::add_label_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_label_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:kentik.alerting.public.v202505.PolicyDataSources.label_ids)
  return _s;
}
inline const std::string& PolicyDataSources::label_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.public.v202505.PolicyDataSources.label_ids)
  return _internal_label_ids().Get(index);
}
inline std::string* PolicyDataSources::mutable_label_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.public.v202505.PolicyDataSources.label_ids)
  return _internal_mutable_label_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PolicyDataSources::set_label_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_label_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:kentik.alerting.public.v202505.PolicyDataSources.label_ids)
}
template <typename Arg_, typename... Args_>
inline void PolicyDataSources::add_label_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_label_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:kentik.alerting.public.v202505.PolicyDataSources.label_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PolicyDataSources::label_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.public.v202505.PolicyDataSources.label_ids)
  return _internal_label_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PolicyDataSources::mutable_label_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.public.v202505.PolicyDataSources.label_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_label_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PolicyDataSources::_internal_label_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.label_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PolicyDataSources::_internal_mutable_label_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.label_ids_;
}

// repeated string site_ids = 4 [json_name = "siteIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int PolicyDataSources::_internal_site_ids_size() const {
  return _internal_site_ids().size();
}
inline int PolicyDataSources::site_ids_size() const {
  return _internal_site_ids_size();
}
inline void PolicyDataSources::clear_site_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.site_ids_.Clear();
}
inline std::string* PolicyDataSources::add_site_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_site_ids()->Add();
  // @@protoc_insertion_point(field_add_mutable:kentik.alerting.public.v202505.PolicyDataSources.site_ids)
  return _s;
}
inline const std::string& PolicyDataSources::site_ids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.public.v202505.PolicyDataSources.site_ids)
  return _internal_site_ids().Get(index);
}
inline std::string* PolicyDataSources::mutable_site_ids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.public.v202505.PolicyDataSources.site_ids)
  return _internal_mutable_site_ids()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PolicyDataSources::set_site_ids(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_site_ids()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:kentik.alerting.public.v202505.PolicyDataSources.site_ids)
}
template <typename Arg_, typename... Args_>
inline void PolicyDataSources::add_site_ids(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_site_ids(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:kentik.alerting.public.v202505.PolicyDataSources.site_ids)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PolicyDataSources::site_ids() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.public.v202505.PolicyDataSources.site_ids)
  return _internal_site_ids();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PolicyDataSources::mutable_site_ids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.public.v202505.PolicyDataSources.site_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_site_ids();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PolicyDataSources::_internal_site_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.site_ids_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PolicyDataSources::_internal_mutable_site_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.site_ids_;
}

// repeated string types = 5 [json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int PolicyDataSources::_internal_types_size() const {
  return _internal_types().size();
}
inline int PolicyDataSources::types_size() const {
  return _internal_types_size();
}
inline void PolicyDataSources::clear_types() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.types_.Clear();
}
inline std::string* PolicyDataSources::add_types() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_types()->Add();
  // @@protoc_insertion_point(field_add_mutable:kentik.alerting.public.v202505.PolicyDataSources.types)
  return _s;
}
inline const std::string& PolicyDataSources::types(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.alerting.public.v202505.PolicyDataSources.types)
  return _internal_types().Get(index);
}
inline std::string* PolicyDataSources::mutable_types(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.alerting.public.v202505.PolicyDataSources.types)
  return _internal_mutable_types()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void PolicyDataSources::set_types(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_types()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:kentik.alerting.public.v202505.PolicyDataSources.types)
}
template <typename Arg_, typename... Args_>
inline void PolicyDataSources::add_types(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_types(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:kentik.alerting.public.v202505.PolicyDataSources.types)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PolicyDataSources::types() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.alerting.public.v202505.PolicyDataSources.types)
  return _internal_types();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PolicyDataSources::mutable_types() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.alerting.public.v202505.PolicyDataSources.types)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_types();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
PolicyDataSources::_internal_types() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.types_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
PolicyDataSources::_internal_mutable_types() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.types_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202505
}  // namespace public_
}  // namespace alerting
}  // namespace kentik


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2falerting_2fpublic_2fv202505_2fpolicy_5fdatasources_2eproto_2epb_2eh
