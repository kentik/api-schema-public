// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/label/v202203alpha1/label.proto

#include "kentik/label/v202203alpha1/label.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2flabel_2fv202203alpha1_2flabel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
namespace kentik {
namespace label {
namespace v202203alpha1 {
class LabelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Label> _instance;
} _Label_default_instance_;
class ListLabelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLabelsRequest> _instance;
} _ListLabelsRequest_default_instance_;
class ListLabelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListLabelsResponse> _instance;
} _ListLabelsResponse_default_instance_;
class CreateLabelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateLabelRequest> _instance;
} _CreateLabelRequest_default_instance_;
class CreateLabelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateLabelResponse> _instance;
} _CreateLabelResponse_default_instance_;
class UpdateLabelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLabelRequest> _instance;
} _UpdateLabelRequest_default_instance_;
class UpdateLabelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateLabelResponse> _instance;
} _UpdateLabelResponse_default_instance_;
class DeleteLabelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteLabelRequest> _instance;
} _DeleteLabelRequest_default_instance_;
class DeleteLabelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteLabelResponse> _instance;
} _DeleteLabelResponse_default_instance_;
}  // namespace v202203alpha1
}  // namespace label
}  // namespace kentik
static void InitDefaultsscc_info_CreateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_CreateLabelRequest_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::CreateLabelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::CreateLabelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {
      &scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,}};

static void InitDefaultsscc_info_CreateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_CreateLabelResponse_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::CreateLabelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::CreateLabelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {
      &scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,}};

static void InitDefaultsscc_info_DeleteLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_DeleteLabelRequest_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::DeleteLabelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::DeleteLabelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {}};

static void InitDefaultsscc_info_DeleteLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_DeleteLabelResponse_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::DeleteLabelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::DeleteLabelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {}};

static void InitDefaultsscc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_Label_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::Label();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::Label::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ListLabelsRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_ListLabelsRequest_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::ListLabelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::ListLabelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListLabelsRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListLabelsRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {}};

static void InitDefaultsscc_info_ListLabelsResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_ListLabelsResponse_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::ListLabelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::ListLabelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListLabelsResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListLabelsResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {
      &scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_UpdateLabelRequest_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::UpdateLabelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::UpdateLabelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {
      &scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,}};

static void InitDefaultsscc_info_UpdateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::label::v202203alpha1::_UpdateLabelResponse_default_instance_;
    new (ptr) ::kentik::label::v202203alpha1::UpdateLabelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::label::v202203alpha1::UpdateLabelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto}, {
      &scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2flabel_2fv202203alpha1_2flabel_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_kentik_2flabel_2fv202203alpha1_2flabel_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2flabel_2fv202203alpha1_2flabel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::Label, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::Label, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::Label, description_),
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::Label, color_),
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::Label, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::Label, edate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::ListLabelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::ListLabelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::ListLabelsResponse, labels_),
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::ListLabelsResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::CreateLabelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::CreateLabelRequest, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::CreateLabelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::CreateLabelResponse, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::UpdateLabelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::UpdateLabelRequest, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::UpdateLabelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::UpdateLabelResponse, label_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::DeleteLabelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::DeleteLabelRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::label::v202203alpha1::DeleteLabelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::label::v202203alpha1::Label)},
  { 11, -1, sizeof(::kentik::label::v202203alpha1::ListLabelsRequest)},
  { 16, -1, sizeof(::kentik::label::v202203alpha1::ListLabelsResponse)},
  { 23, -1, sizeof(::kentik::label::v202203alpha1::CreateLabelRequest)},
  { 29, -1, sizeof(::kentik::label::v202203alpha1::CreateLabelResponse)},
  { 35, -1, sizeof(::kentik::label::v202203alpha1::UpdateLabelRequest)},
  { 41, -1, sizeof(::kentik::label::v202203alpha1::UpdateLabelResponse)},
  { 47, -1, sizeof(::kentik::label::v202203alpha1::DeleteLabelRequest)},
  { 53, -1, sizeof(::kentik::label::v202203alpha1::DeleteLabelResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_Label_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_ListLabelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_ListLabelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_CreateLabelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_CreateLabelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_UpdateLabelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_UpdateLabelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_DeleteLabelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::label::v202203alpha1::_DeleteLabelResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2flabel_2fv202203alpha1_2flabel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&kentik/label/v202203alpha1/label.proto"
  "\022\032kentik.label.v202203alpha1\032\034google/api"
  "/annotations.proto\032\027google/api/client.pr"
  "oto\032.protoc-gen-openapiv2/options/annota"
  "tions.proto\032+kentik/core/v202012alpha1/a"
  "nnotations.proto\032\037google/protobuf/timest"
  "amp.proto\"\307\001\n\005Label\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004n"
  "ame\030\002 \001(\tR\004name\022 \n\013description\030\003 \001(\tR\013de"
  "scription\022\024\n\005color\030\005 \001(\tR\005color\0220\n\005cdate"
  "\030\006 \001(\0132\032.google.protobuf.TimestampR\005cdat"
  "e\0220\n\005edate\030\007 \001(\0132\032.google.protobuf.Times"
  "tampR\005edate\"\023\n\021ListLabelsRequest\"t\n\022List"
  "LabelsResponse\0229\n\006labels\030\001 \003(\0132!.kentik."
  "label.v202203alpha1.LabelR\006labels\022#\n\rinv"
  "alid_count\030\002 \001(\005R\014invalidCount\"M\n\022Create"
  "LabelRequest\0227\n\005label\030\001 \001(\0132!.kentik.lab"
  "el.v202203alpha1.LabelR\005label\"N\n\023CreateL"
  "abelResponse\0227\n\005label\030\001 \001(\0132!.kentik.lab"
  "el.v202203alpha1.LabelR\005label\"M\n\022UpdateL"
  "abelRequest\0227\n\005label\030\001 \001(\0132!.kentik.labe"
  "l.v202203alpha1.LabelR\005label\"N\n\023UpdateLa"
  "belResponse\0227\n\005label\030\001 \001(\0132!.kentik.labe"
  "l.v202203alpha1.LabelR\005label\"$\n\022DeleteLa"
  "belRequest\022\016\n\002id\030\001 \001(\tR\002id\"\025\n\023DeleteLabe"
  "lResponse2\277\010\n\014LabelService\022\370\001\n\nListLabel"
  "s\022-.kentik.label.v202203alpha1.ListLabel"
  "sRequest\032..kentik.label.v202203alpha1.Li"
  "stLabelsResponse\"\212\001\222AP\022\023Fetch Search Lab"
  "els\032.Return list of labels matches searc"
  "h criteria.*\tListLabel\362\327\002\020admin.label:re"
  "ad\202\323\344\223\002\035\022\033/label/v202203alpha1/labels\022\374\001"
  "\n\013CreateLabel\022..kentik.label.v202203alph"
  "a1.CreateLabelRequest\032/.kentik.label.v20"
  "2203alpha1.CreateLabelResponse\"\213\001\222AM\022\017Cr"
  "eate a label.\032-Create a label from reque"
  "st. returns created.*\013LabelCreate\362\327\002\021adm"
  "in.label:write\202\323\344\223\002 \"\033/label/v202203alph"
  "a1/labels:\001*\022\221\002\n\013UpdateLabel\022..kentik.la"
  "bel.v202203alpha1.UpdateLabelRequest\032/.k"
  "entik.label.v202203alpha1.UpdateLabelRes"
  "ponse\"\240\001\222AW\022\017Update a label.\0327Replaces t"
  "he entire label attributes specified wit"
  "h id.*\013LabelUpdate\362\327\002\021admin.label:write\202"
  "\323\344\223\002+\"&/label/v202203alpha1/labels/{labe"
  "l.id}:\001*\022\365\001\n\013DeleteLabel\022..kentik.label."
  "v202203alpha1.DeleteLabelRequest\032/.kenti"
  "k.label.v202203alpha1.DeleteLabelRespons"
  "e\"\204\001\222AD\022\017Delete a label.\032$Deletes the la"
  "bel specified with id.*\013LabelDelete\362\327\002\021a"
  "dmin.label:write\202\323\344\223\002\"* /label/v202203al"
  "pha1/labels/{id}\032)\312A\023grpc.api.kentik.com"
  "\352\327\002\013admin.label\220\330\002\003B\261\003ZDgithub.com/kenti"
  "k/api-schema/gen/go/kentik/label/v202203"
  "alpha1;label\222A\347\002\022\200\001\n\tLabel API\022K--- This"
  " API has been deprecated and will be rem"
  "oved in the near future ---\"\030\n\026Kentik AP"
  "I Engineering2\014202203alpha1*\001\0022\020applicat"
  "ion/json:\020application/jsonZD\n\036\n\005email\022\025\010"
  "\002\032\017X-CH-Auth-Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-"
  "Auth-API-Token \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000"
  "r]\n%General information about Kentik API"
  "s\0224https://kb.kentik.com/v0/Ab09.htm#Ab0"
  "9-APIs_Overviewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202012alpha1_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto_sccs[9] = {
  &scc_info_CreateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
  &scc_info_CreateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
  &scc_info_DeleteLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
  &scc_info_DeleteLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
  &scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
  &scc_info_ListLabelsRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
  &scc_info_ListLabelsResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
  &scc_info_UpdateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
  &scc_info_UpdateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto = {
  false, false, descriptor_table_protodef_kentik_2flabel_2fv202203alpha1_2flabel_2eproto, "kentik/label/v202203alpha1/label.proto", 2503,
  &descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto_once, descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto_sccs, descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto_deps, 9, 5,
  schemas, file_default_instances, TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto::offsets,
  file_level_metadata_kentik_2flabel_2fv202203alpha1_2flabel_2eproto, 9, file_level_enum_descriptors_kentik_2flabel_2fv202203alpha1_2flabel_2eproto, file_level_service_descriptors_kentik_2flabel_2fv202203alpha1_2flabel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2flabel_2fv202203alpha1_2flabel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto)), true);
namespace kentik {
namespace label {
namespace v202203alpha1 {

// ===================================================================

void Label::InitAsDefaultInstance() {
  ::kentik::label::v202203alpha1::_Label_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::label::v202203alpha1::_Label_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Label::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const Label* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const Label* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Label::_Internal::cdate(const Label* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Label::_Internal::edate(const Label* msg) {
  return *msg->edate_;
}
void Label::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void Label::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
Label::Label(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArena());
  }
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_color().empty()) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_color(),
      GetArena());
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.Label)
}

void Label::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edate_) -
      reinterpret_cast<char*>(&cdate_)) + sizeof(edate_));
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.Label)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Label::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
}

void Label::ArenaDtor(void* object) {
  Label* _this = reinterpret_cast< Label* >(object);
  (void)_this;
}
void Label::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Label::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Label& Label::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Label_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Label::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.label.v202203alpha1.Label.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.label.v202203alpha1.Label.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3[json_name = "description"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.label.v202203alpha1.Label.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string color = 5[json_name = "color"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.label.v202203alpha1.Label.color"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Label::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.Label)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.label.v202203alpha1.Label.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.label.v202203alpha1.Label.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3[json_name = "description"];
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.label.v202203alpha1.Label.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // string color = 5[json_name = "color"];
  if (this->color().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.label.v202203alpha1.Label.color");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_color(), target);
  }

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::edate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.Label)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3[json_name = "description"];
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string color = 5[json_name = "color"];
  if (this->color().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate"];
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 7[json_name = "edate"];
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Label::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.Label)
  GOOGLE_DCHECK_NE(&from, this);
  const Label* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Label>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.Label)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.Label)
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.Label)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.color().size() > 0) {
    _internal_set_color(from._internal_color());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
}

void Label::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  color_.Swap(&other->color_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Label, edate_)
      + sizeof(Label::edate_)
      - PROTOBUF_FIELD_OFFSET(Label, cdate_)>(
          reinterpret_cast<char*>(&cdate_),
          reinterpret_cast<char*>(&other->cdate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLabelsRequest::InitAsDefaultInstance() {
}
class ListLabelsRequest::_Internal {
 public:
};

ListLabelsRequest::ListLabelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.ListLabelsRequest)
}
ListLabelsRequest::ListLabelsRequest(const ListLabelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.ListLabelsRequest)
}

void ListLabelsRequest::SharedCtor() {
}

ListLabelsRequest::~ListLabelsRequest() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.ListLabelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListLabelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListLabelsRequest::ArenaDtor(void* object) {
  ListLabelsRequest* _this = reinterpret_cast< ListLabelsRequest* >(object);
  (void)_this;
}
void ListLabelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLabelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLabelsRequest& ListLabelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLabelsRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void ListLabelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.ListLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLabelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLabelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.ListLabelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.ListLabelsRequest)
  return target;
}

size_t ListLabelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.ListLabelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLabelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.ListLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLabelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLabelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.ListLabelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.ListLabelsRequest)
    MergeFrom(*source);
  }
}

void ListLabelsRequest::MergeFrom(const ListLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.ListLabelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListLabelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.ListLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLabelsRequest::CopyFrom(const ListLabelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.ListLabelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabelsRequest::IsInitialized() const {
  return true;
}

void ListLabelsRequest::InternalSwap(ListLabelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLabelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListLabelsResponse::InitAsDefaultInstance() {
}
class ListLabelsResponse::_Internal {
 public:
};

ListLabelsResponse::ListLabelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.ListLabelsResponse)
}
ListLabelsResponse::ListLabelsResponse(const ListLabelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.ListLabelsResponse)
}

void ListLabelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListLabelsResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  invalid_count_ = 0;
}

ListLabelsResponse::~ListLabelsResponse() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.ListLabelsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListLabelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListLabelsResponse::ArenaDtor(void* object) {
  ListLabelsResponse* _this = reinterpret_cast< ListLabelsResponse* >(object);
  (void)_this;
}
void ListLabelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListLabelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListLabelsResponse& ListLabelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListLabelsResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void ListLabelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.ListLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  invalid_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListLabelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.label.v202203alpha1.Label labels = 1[json_name = "labels"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 invalid_count = 2[json_name = "invalidCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListLabelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.ListLabelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.label.v202203alpha1.Label labels = 1[json_name = "labels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_labels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_labels(i), target, stream);
  }

  // int32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.ListLabelsResponse)
  return target;
}

size_t ListLabelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.ListLabelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.label.v202203alpha1.Label labels = 1[json_name = "labels"];
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListLabelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.ListLabelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListLabelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListLabelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.ListLabelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.ListLabelsResponse)
    MergeFrom(*source);
  }
}

void ListLabelsResponse::MergeFrom(const ListLabelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.ListLabelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListLabelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.ListLabelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListLabelsResponse::CopyFrom(const ListLabelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.ListLabelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListLabelsResponse::IsInitialized() const {
  return true;
}

void ListLabelsResponse::InternalSwap(ListLabelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListLabelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateLabelRequest::InitAsDefaultInstance() {
  ::kentik::label::v202203alpha1::_CreateLabelRequest_default_instance_._instance.get_mutable()->label_ = const_cast< ::kentik::label::v202203alpha1::Label*>(
      ::kentik::label::v202203alpha1::Label::internal_default_instance());
}
class CreateLabelRequest::_Internal {
 public:
  static const ::kentik::label::v202203alpha1::Label& label(const CreateLabelRequest* msg);
};

const ::kentik::label::v202203alpha1::Label&
CreateLabelRequest::_Internal::label(const CreateLabelRequest* msg) {
  return *msg->label_;
}
CreateLabelRequest::CreateLabelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.CreateLabelRequest)
}
CreateLabelRequest::CreateLabelRequest(const CreateLabelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_label()) {
    label_ = new ::kentik::label::v202203alpha1::Label(*from.label_);
  } else {
    label_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.CreateLabelRequest)
}

void CreateLabelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  label_ = nullptr;
}

CreateLabelRequest::~CreateLabelRequest() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.CreateLabelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateLabelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete label_;
}

void CreateLabelRequest::ArenaDtor(void* object) {
  CreateLabelRequest* _this = reinterpret_cast< CreateLabelRequest* >(object);
  (void)_this;
}
void CreateLabelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateLabelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateLabelRequest& CreateLabelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void CreateLabelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.CreateLabelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateLabelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateLabelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.CreateLabelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
  if (this->has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::label(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.CreateLabelRequest)
  return target;
}

size_t CreateLabelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.CreateLabelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
  if (this->has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateLabelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.CreateLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateLabelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateLabelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.CreateLabelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.CreateLabelRequest)
    MergeFrom(*source);
  }
}

void CreateLabelRequest::MergeFrom(const CreateLabelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.CreateLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_label()) {
    _internal_mutable_label()->::kentik::label::v202203alpha1::Label::MergeFrom(from._internal_label());
  }
}

void CreateLabelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.CreateLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateLabelRequest::CopyFrom(const CreateLabelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.CreateLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLabelRequest::IsInitialized() const {
  return true;
}

void CreateLabelRequest::InternalSwap(CreateLabelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateLabelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateLabelResponse::InitAsDefaultInstance() {
  ::kentik::label::v202203alpha1::_CreateLabelResponse_default_instance_._instance.get_mutable()->label_ = const_cast< ::kentik::label::v202203alpha1::Label*>(
      ::kentik::label::v202203alpha1::Label::internal_default_instance());
}
class CreateLabelResponse::_Internal {
 public:
  static const ::kentik::label::v202203alpha1::Label& label(const CreateLabelResponse* msg);
};

const ::kentik::label::v202203alpha1::Label&
CreateLabelResponse::_Internal::label(const CreateLabelResponse* msg) {
  return *msg->label_;
}
CreateLabelResponse::CreateLabelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.CreateLabelResponse)
}
CreateLabelResponse::CreateLabelResponse(const CreateLabelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_label()) {
    label_ = new ::kentik::label::v202203alpha1::Label(*from.label_);
  } else {
    label_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.CreateLabelResponse)
}

void CreateLabelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  label_ = nullptr;
}

CreateLabelResponse::~CreateLabelResponse() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.CreateLabelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateLabelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete label_;
}

void CreateLabelResponse::ArenaDtor(void* object) {
  CreateLabelResponse* _this = reinterpret_cast< CreateLabelResponse* >(object);
  (void)_this;
}
void CreateLabelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateLabelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateLabelResponse& CreateLabelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void CreateLabelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.CreateLabelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateLabelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateLabelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.CreateLabelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
  if (this->has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::label(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.CreateLabelResponse)
  return target;
}

size_t CreateLabelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.CreateLabelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
  if (this->has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateLabelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.CreateLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateLabelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateLabelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.CreateLabelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.CreateLabelResponse)
    MergeFrom(*source);
  }
}

void CreateLabelResponse::MergeFrom(const CreateLabelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.CreateLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_label()) {
    _internal_mutable_label()->::kentik::label::v202203alpha1::Label::MergeFrom(from._internal_label());
  }
}

void CreateLabelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.CreateLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateLabelResponse::CopyFrom(const CreateLabelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.CreateLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateLabelResponse::IsInitialized() const {
  return true;
}

void CreateLabelResponse::InternalSwap(CreateLabelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateLabelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateLabelRequest::InitAsDefaultInstance() {
  ::kentik::label::v202203alpha1::_UpdateLabelRequest_default_instance_._instance.get_mutable()->label_ = const_cast< ::kentik::label::v202203alpha1::Label*>(
      ::kentik::label::v202203alpha1::Label::internal_default_instance());
}
class UpdateLabelRequest::_Internal {
 public:
  static const ::kentik::label::v202203alpha1::Label& label(const UpdateLabelRequest* msg);
};

const ::kentik::label::v202203alpha1::Label&
UpdateLabelRequest::_Internal::label(const UpdateLabelRequest* msg) {
  return *msg->label_;
}
UpdateLabelRequest::UpdateLabelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.UpdateLabelRequest)
}
UpdateLabelRequest::UpdateLabelRequest(const UpdateLabelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_label()) {
    label_ = new ::kentik::label::v202203alpha1::Label(*from.label_);
  } else {
    label_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.UpdateLabelRequest)
}

void UpdateLabelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  label_ = nullptr;
}

UpdateLabelRequest::~UpdateLabelRequest() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.UpdateLabelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLabelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete label_;
}

void UpdateLabelRequest::ArenaDtor(void* object) {
  UpdateLabelRequest* _this = reinterpret_cast< UpdateLabelRequest* >(object);
  (void)_this;
}
void UpdateLabelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLabelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLabelRequest& UpdateLabelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void UpdateLabelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.UpdateLabelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLabelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLabelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.UpdateLabelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
  if (this->has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::label(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.UpdateLabelRequest)
  return target;
}

size_t UpdateLabelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.UpdateLabelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
  if (this->has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLabelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.UpdateLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLabelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLabelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.UpdateLabelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.UpdateLabelRequest)
    MergeFrom(*source);
  }
}

void UpdateLabelRequest::MergeFrom(const UpdateLabelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.UpdateLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_label()) {
    _internal_mutable_label()->::kentik::label::v202203alpha1::Label::MergeFrom(from._internal_label());
  }
}

void UpdateLabelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.UpdateLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLabelRequest::CopyFrom(const UpdateLabelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.UpdateLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLabelRequest::IsInitialized() const {
  return true;
}

void UpdateLabelRequest::InternalSwap(UpdateLabelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLabelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateLabelResponse::InitAsDefaultInstance() {
  ::kentik::label::v202203alpha1::_UpdateLabelResponse_default_instance_._instance.get_mutable()->label_ = const_cast< ::kentik::label::v202203alpha1::Label*>(
      ::kentik::label::v202203alpha1::Label::internal_default_instance());
}
class UpdateLabelResponse::_Internal {
 public:
  static const ::kentik::label::v202203alpha1::Label& label(const UpdateLabelResponse* msg);
};

const ::kentik::label::v202203alpha1::Label&
UpdateLabelResponse::_Internal::label(const UpdateLabelResponse* msg) {
  return *msg->label_;
}
UpdateLabelResponse::UpdateLabelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.UpdateLabelResponse)
}
UpdateLabelResponse::UpdateLabelResponse(const UpdateLabelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_label()) {
    label_ = new ::kentik::label::v202203alpha1::Label(*from.label_);
  } else {
    label_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.UpdateLabelResponse)
}

void UpdateLabelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  label_ = nullptr;
}

UpdateLabelResponse::~UpdateLabelResponse() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.UpdateLabelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateLabelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete label_;
}

void UpdateLabelResponse::ArenaDtor(void* object) {
  UpdateLabelResponse* _this = reinterpret_cast< UpdateLabelResponse* >(object);
  (void)_this;
}
void UpdateLabelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateLabelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateLabelResponse& UpdateLabelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void UpdateLabelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.UpdateLabelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateLabelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_label(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateLabelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.UpdateLabelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
  if (this->has_label()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::label(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.UpdateLabelResponse)
  return target;
}

size_t UpdateLabelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.UpdateLabelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.label.v202203alpha1.Label label = 1[json_name = "label"];
  if (this->has_label()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *label_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateLabelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.UpdateLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateLabelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateLabelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.UpdateLabelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.UpdateLabelResponse)
    MergeFrom(*source);
  }
}

void UpdateLabelResponse::MergeFrom(const UpdateLabelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.UpdateLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_label()) {
    _internal_mutable_label()->::kentik::label::v202203alpha1::Label::MergeFrom(from._internal_label());
  }
}

void UpdateLabelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.UpdateLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLabelResponse::CopyFrom(const UpdateLabelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.UpdateLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLabelResponse::IsInitialized() const {
  return true;
}

void UpdateLabelResponse::InternalSwap(UpdateLabelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(label_, other->label_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateLabelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteLabelRequest::InitAsDefaultInstance() {
}
class DeleteLabelRequest::_Internal {
 public:
};

DeleteLabelRequest::DeleteLabelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.DeleteLabelRequest)
}
DeleteLabelRequest::DeleteLabelRequest(const DeleteLabelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.DeleteLabelRequest)
}

void DeleteLabelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteLabelRequest::~DeleteLabelRequest() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.DeleteLabelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteLabelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteLabelRequest::ArenaDtor(void* object) {
  DeleteLabelRequest* _this = reinterpret_cast< DeleteLabelRequest* >(object);
  (void)_this;
}
void DeleteLabelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteLabelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLabelRequest& DeleteLabelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteLabelRequest_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void DeleteLabelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.DeleteLabelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteLabelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.label.v202203alpha1.DeleteLabelRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteLabelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.DeleteLabelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.label.v202203alpha1.DeleteLabelRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.DeleteLabelRequest)
  return target;
}

size_t DeleteLabelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.DeleteLabelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLabelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.DeleteLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLabelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteLabelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.DeleteLabelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.DeleteLabelRequest)
    MergeFrom(*source);
  }
}

void DeleteLabelRequest::MergeFrom(const DeleteLabelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.DeleteLabelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteLabelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.DeleteLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLabelRequest::CopyFrom(const DeleteLabelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.DeleteLabelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLabelRequest::IsInitialized() const {
  return true;
}

void DeleteLabelRequest::InternalSwap(DeleteLabelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLabelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteLabelResponse::InitAsDefaultInstance() {
}
class DeleteLabelResponse::_Internal {
 public:
};

DeleteLabelResponse::DeleteLabelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.label.v202203alpha1.DeleteLabelResponse)
}
DeleteLabelResponse::DeleteLabelResponse(const DeleteLabelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.label.v202203alpha1.DeleteLabelResponse)
}

void DeleteLabelResponse::SharedCtor() {
}

DeleteLabelResponse::~DeleteLabelResponse() {
  // @@protoc_insertion_point(destructor:kentik.label.v202203alpha1.DeleteLabelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteLabelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteLabelResponse::ArenaDtor(void* object) {
  DeleteLabelResponse* _this = reinterpret_cast< DeleteLabelResponse* >(object);
  (void)_this;
}
void DeleteLabelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteLabelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteLabelResponse& DeleteLabelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteLabelResponse_kentik_2flabel_2fv202203alpha1_2flabel_2eproto.base);
  return *internal_default_instance();
}


void DeleteLabelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.label.v202203alpha1.DeleteLabelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteLabelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteLabelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.label.v202203alpha1.DeleteLabelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.label.v202203alpha1.DeleteLabelResponse)
  return target;
}

size_t DeleteLabelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.label.v202203alpha1.DeleteLabelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteLabelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.label.v202203alpha1.DeleteLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteLabelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteLabelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.label.v202203alpha1.DeleteLabelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.label.v202203alpha1.DeleteLabelResponse)
    MergeFrom(*source);
  }
}

void DeleteLabelResponse::MergeFrom(const DeleteLabelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.label.v202203alpha1.DeleteLabelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteLabelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.label.v202203alpha1.DeleteLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteLabelResponse::CopyFrom(const DeleteLabelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.label.v202203alpha1.DeleteLabelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteLabelResponse::IsInitialized() const {
  return true;
}

void DeleteLabelResponse::InternalSwap(DeleteLabelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteLabelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202203alpha1
}  // namespace label
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::Label* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::Label >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::ListLabelsRequest* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::ListLabelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::ListLabelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::ListLabelsResponse* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::ListLabelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::ListLabelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::CreateLabelRequest* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::CreateLabelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::CreateLabelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::CreateLabelResponse* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::CreateLabelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::CreateLabelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::UpdateLabelRequest* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::UpdateLabelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::UpdateLabelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::UpdateLabelResponse* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::UpdateLabelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::UpdateLabelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::DeleteLabelRequest* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::DeleteLabelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::DeleteLabelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::label::v202203alpha1::DeleteLabelResponse* Arena::CreateMaybeMessage< ::kentik::label::v202203alpha1::DeleteLabelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::label::v202203alpha1::DeleteLabelResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
