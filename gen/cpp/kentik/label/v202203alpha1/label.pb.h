// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/label/v202203alpha1/label.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2flabel_2fv202203alpha1_2flabel_2eproto_2epb_2eh
#define kentik_2flabel_2fv202203alpha1_2flabel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2flabel_2fv202203alpha1_2flabel_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
namespace kentik {
namespace label {
namespace v202203alpha1 {
class CreateLabelRequest;
struct CreateLabelRequestDefaultTypeInternal;
extern CreateLabelRequestDefaultTypeInternal _CreateLabelRequest_default_instance_;
class CreateLabelResponse;
struct CreateLabelResponseDefaultTypeInternal;
extern CreateLabelResponseDefaultTypeInternal _CreateLabelResponse_default_instance_;
class DeleteLabelRequest;
struct DeleteLabelRequestDefaultTypeInternal;
extern DeleteLabelRequestDefaultTypeInternal _DeleteLabelRequest_default_instance_;
class DeleteLabelResponse;
struct DeleteLabelResponseDefaultTypeInternal;
extern DeleteLabelResponseDefaultTypeInternal _DeleteLabelResponse_default_instance_;
class Label;
struct LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class ListLabelsRequest;
struct ListLabelsRequestDefaultTypeInternal;
extern ListLabelsRequestDefaultTypeInternal _ListLabelsRequest_default_instance_;
class ListLabelsResponse;
struct ListLabelsResponseDefaultTypeInternal;
extern ListLabelsResponseDefaultTypeInternal _ListLabelsResponse_default_instance_;
class UpdateLabelRequest;
struct UpdateLabelRequestDefaultTypeInternal;
extern UpdateLabelRequestDefaultTypeInternal _UpdateLabelRequest_default_instance_;
class UpdateLabelResponse;
struct UpdateLabelResponseDefaultTypeInternal;
extern UpdateLabelResponseDefaultTypeInternal _UpdateLabelResponse_default_instance_;
}  // namespace v202203alpha1
}  // namespace label
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace label {
namespace v202203alpha1 {

// ===================================================================


// -------------------------------------------------------------------

class ListLabelsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.ListLabelsRequest) */ {
 public:
  inline ListLabelsRequest() : ListLabelsRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListLabelsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListLabelsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListLabelsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListLabelsRequest(const ListLabelsRequest& from) : ListLabelsRequest(nullptr, from) {}
  inline ListLabelsRequest(ListLabelsRequest&& from) noexcept
      : ListLabelsRequest(nullptr, std::move(from)) {}
  inline ListLabelsRequest& operator=(const ListLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabelsRequest& operator=(ListLabelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLabelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLabelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLabelsRequest*>(
        &_ListLabelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ListLabelsRequest& a, ListLabelsRequest& b) { a.Swap(&b); }
  inline void Swap(ListLabelsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLabelsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLabelsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ListLabelsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListLabelsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListLabelsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.ListLabelsRequest"; }

 protected:
  explicit ListLabelsRequest(::google::protobuf::Arena* arena);
  ListLabelsRequest(::google::protobuf::Arena* arena, const ListLabelsRequest& from);
  ListLabelsRequest(::google::protobuf::Arena* arena, ListLabelsRequest&& from) noexcept
      : ListLabelsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.ListLabelsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListLabelsRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};
// -------------------------------------------------------------------

class DeleteLabelResponse final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.DeleteLabelResponse) */ {
 public:
  inline DeleteLabelResponse() : DeleteLabelResponse(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeleteLabelResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeleteLabelResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteLabelResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteLabelResponse(const DeleteLabelResponse& from) : DeleteLabelResponse(nullptr, from) {}
  inline DeleteLabelResponse(DeleteLabelResponse&& from) noexcept
      : DeleteLabelResponse(nullptr, std::move(from)) {}
  inline DeleteLabelResponse& operator=(const DeleteLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLabelResponse& operator=(DeleteLabelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteLabelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteLabelResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteLabelResponse*>(
        &_DeleteLabelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DeleteLabelResponse& a, DeleteLabelResponse& b) { a.Swap(&b); }
  inline void Swap(DeleteLabelResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLabelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteLabelResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<DeleteLabelResponse>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteLabelResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteLabelResponse& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.DeleteLabelResponse"; }

 protected:
  explicit DeleteLabelResponse(::google::protobuf::Arena* arena);
  DeleteLabelResponse(::google::protobuf::Arena* arena, const DeleteLabelResponse& from);
  DeleteLabelResponse(::google::protobuf::Arena* arena, DeleteLabelResponse&& from) noexcept
      : DeleteLabelResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.DeleteLabelResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteLabelResponse& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};
// -------------------------------------------------------------------

class DeleteLabelRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.DeleteLabelRequest) */ {
 public:
  inline DeleteLabelRequest() : DeleteLabelRequest(nullptr) {}
  ~DeleteLabelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DeleteLabelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DeleteLabelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DeleteLabelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline DeleteLabelRequest(const DeleteLabelRequest& from) : DeleteLabelRequest(nullptr, from) {}
  inline DeleteLabelRequest(DeleteLabelRequest&& from) noexcept
      : DeleteLabelRequest(nullptr, std::move(from)) {}
  inline DeleteLabelRequest& operator=(const DeleteLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLabelRequest& operator=(DeleteLabelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteLabelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteLabelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLabelRequest*>(
        &_DeleteLabelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(DeleteLabelRequest& a, DeleteLabelRequest& b) { a.Swap(&b); }
  inline void Swap(DeleteLabelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLabelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteLabelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DeleteLabelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeleteLabelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DeleteLabelRequest& from) { DeleteLabelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DeleteLabelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.DeleteLabelRequest"; }

 protected:
  explicit DeleteLabelRequest(::google::protobuf::Arena* arena);
  DeleteLabelRequest(::google::protobuf::Arena* arena, const DeleteLabelRequest& from);
  DeleteLabelRequest(::google::protobuf::Arena* arena, DeleteLabelRequest&& from) noexcept
      : DeleteLabelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.DeleteLabelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DeleteLabelRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};
// -------------------------------------------------------------------

class Label final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.Label) */ {
 public:
  inline Label() : Label(nullptr) {}
  ~Label() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Label* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Label));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Label(
      ::google::protobuf::internal::ConstantInitialized);

  inline Label(const Label& from) : Label(nullptr, from) {}
  inline Label(Label&& from) noexcept
      : Label(nullptr, std::move(from)) {}
  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Label& default_instance() {
    return *internal_default_instance();
  }
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
        &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Label& a, Label& b) { a.Swap(&b); }
  inline void Swap(Label* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Label* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Label>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Label& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Label& from) { Label::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Label* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.Label"; }

 protected:
  explicit Label(::google::protobuf::Arena* arena);
  Label(::google::protobuf::Arena* arena, const Label& from);
  Label(::google::protobuf::Arena* arena, Label&& from) noexcept
      : Label(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kColorFieldNumber = 5,
    kCdateFieldNumber = 6,
    kEdateFieldNumber = 7,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string description = 3 [json_name = "description"];
  void clear_description() ;
  const std::string& description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_description(Arg_&& arg, Args_... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* value);

  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(
      const std::string& value);
  std::string* _internal_mutable_description();

  public:
  // string color = 5 [json_name = "color"];
  void clear_color() ;
  const std::string& color() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_color(Arg_&& arg, Args_... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* value);

  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(
      const std::string& value);
  std::string* _internal_mutable_color();

  public:
  // .google.protobuf.Timestamp cdate = 6 [json_name = "cdate"];
  bool has_cdate() const;
  void clear_cdate() ;
  const ::google::protobuf::Timestamp& cdate() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_cdate();
  ::google::protobuf::Timestamp* mutable_cdate();
  void set_allocated_cdate(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_cdate(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_cdate();

  private:
  const ::google::protobuf::Timestamp& _internal_cdate() const;
  ::google::protobuf::Timestamp* _internal_mutable_cdate();

  public:
  // .google.protobuf.Timestamp edate = 7 [json_name = "edate"];
  bool has_edate() const;
  void clear_edate() ;
  const ::google::protobuf::Timestamp& edate() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_edate();
  ::google::protobuf::Timestamp* mutable_edate();
  void set_allocated_edate(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_edate(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_edate();

  private:
  const ::google::protobuf::Timestamp& _internal_edate() const;
  ::google::protobuf::Timestamp* _internal_mutable_edate();

  public:
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.Label)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      63, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Label& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr description_;
    ::google::protobuf::internal::ArenaStringPtr color_;
    ::google::protobuf::Timestamp* cdate_;
    ::google::protobuf::Timestamp* edate_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};
// -------------------------------------------------------------------

class UpdateLabelResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.UpdateLabelResponse) */ {
 public:
  inline UpdateLabelResponse() : UpdateLabelResponse(nullptr) {}
  ~UpdateLabelResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateLabelResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateLabelResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateLabelResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateLabelResponse(const UpdateLabelResponse& from) : UpdateLabelResponse(nullptr, from) {}
  inline UpdateLabelResponse(UpdateLabelResponse&& from) noexcept
      : UpdateLabelResponse(nullptr, std::move(from)) {}
  inline UpdateLabelResponse& operator=(const UpdateLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLabelResponse& operator=(UpdateLabelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateLabelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateLabelResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateLabelResponse*>(
        &_UpdateLabelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(UpdateLabelResponse& a, UpdateLabelResponse& b) { a.Swap(&b); }
  inline void Swap(UpdateLabelResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLabelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateLabelResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateLabelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateLabelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateLabelResponse& from) { UpdateLabelResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateLabelResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.UpdateLabelResponse"; }

 protected:
  explicit UpdateLabelResponse(::google::protobuf::Arena* arena);
  UpdateLabelResponse(::google::protobuf::Arena* arena, const UpdateLabelResponse& from);
  UpdateLabelResponse(::google::protobuf::Arena* arena, UpdateLabelResponse&& from) noexcept
      : UpdateLabelResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelFieldNumber = 1,
  };
  // .kentik.label.v202203alpha1.Label label = 1 [json_name = "label"];
  bool has_label() const;
  void clear_label() ;
  const ::kentik::label::v202203alpha1::Label& label() const;
  PROTOBUF_NODISCARD ::kentik::label::v202203alpha1::Label* release_label();
  ::kentik::label::v202203alpha1::Label* mutable_label();
  void set_allocated_label(::kentik::label::v202203alpha1::Label* value);
  void unsafe_arena_set_allocated_label(::kentik::label::v202203alpha1::Label* value);
  ::kentik::label::v202203alpha1::Label* unsafe_arena_release_label();

  private:
  const ::kentik::label::v202203alpha1::Label& _internal_label() const;
  ::kentik::label::v202203alpha1::Label* _internal_mutable_label();

  public:
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.UpdateLabelResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateLabelResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kentik::label::v202203alpha1::Label* label_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};
// -------------------------------------------------------------------

class UpdateLabelRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.UpdateLabelRequest) */ {
 public:
  inline UpdateLabelRequest() : UpdateLabelRequest(nullptr) {}
  ~UpdateLabelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(UpdateLabelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(UpdateLabelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR UpdateLabelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline UpdateLabelRequest(const UpdateLabelRequest& from) : UpdateLabelRequest(nullptr, from) {}
  inline UpdateLabelRequest(UpdateLabelRequest&& from) noexcept
      : UpdateLabelRequest(nullptr, std::move(from)) {}
  inline UpdateLabelRequest& operator=(const UpdateLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLabelRequest& operator=(UpdateLabelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateLabelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateLabelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLabelRequest*>(
        &_UpdateLabelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(UpdateLabelRequest& a, UpdateLabelRequest& b) { a.Swap(&b); }
  inline void Swap(UpdateLabelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLabelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateLabelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<UpdateLabelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UpdateLabelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const UpdateLabelRequest& from) { UpdateLabelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(UpdateLabelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.UpdateLabelRequest"; }

 protected:
  explicit UpdateLabelRequest(::google::protobuf::Arena* arena);
  UpdateLabelRequest(::google::protobuf::Arena* arena, const UpdateLabelRequest& from);
  UpdateLabelRequest(::google::protobuf::Arena* arena, UpdateLabelRequest&& from) noexcept
      : UpdateLabelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelFieldNumber = 1,
  };
  // .kentik.label.v202203alpha1.Label label = 1 [json_name = "label"];
  bool has_label() const;
  void clear_label() ;
  const ::kentik::label::v202203alpha1::Label& label() const;
  PROTOBUF_NODISCARD ::kentik::label::v202203alpha1::Label* release_label();
  ::kentik::label::v202203alpha1::Label* mutable_label();
  void set_allocated_label(::kentik::label::v202203alpha1::Label* value);
  void unsafe_arena_set_allocated_label(::kentik::label::v202203alpha1::Label* value);
  ::kentik::label::v202203alpha1::Label* unsafe_arena_release_label();

  private:
  const ::kentik::label::v202203alpha1::Label& _internal_label() const;
  ::kentik::label::v202203alpha1::Label* _internal_mutable_label();

  public:
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.UpdateLabelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const UpdateLabelRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kentik::label::v202203alpha1::Label* label_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};
// -------------------------------------------------------------------

class ListLabelsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.ListLabelsResponse) */ {
 public:
  inline ListLabelsResponse() : ListLabelsResponse(nullptr) {}
  ~ListLabelsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListLabelsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListLabelsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListLabelsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListLabelsResponse(const ListLabelsResponse& from) : ListLabelsResponse(nullptr, from) {}
  inline ListLabelsResponse(ListLabelsResponse&& from) noexcept
      : ListLabelsResponse(nullptr, std::move(from)) {}
  inline ListLabelsResponse& operator=(const ListLabelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabelsResponse& operator=(ListLabelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListLabelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListLabelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLabelsResponse*>(
        &_ListLabelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ListLabelsResponse& a, ListLabelsResponse& b) { a.Swap(&b); }
  inline void Swap(ListLabelsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLabelsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListLabelsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ListLabelsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListLabelsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListLabelsResponse& from) { ListLabelsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ListLabelsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.ListLabelsResponse"; }

 protected:
  explicit ListLabelsResponse(::google::protobuf::Arena* arena);
  ListLabelsResponse(::google::protobuf::Arena* arena, const ListLabelsResponse& from);
  ListLabelsResponse(::google::protobuf::Arena* arena, ListLabelsResponse&& from) noexcept
      : ListLabelsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.label.v202203alpha1.Label labels = 1 [json_name = "labels"];
  int labels_size() const;
  private:
  int _internal_labels_size() const;

  public:
  void clear_labels() ;
  ::kentik::label::v202203alpha1::Label* mutable_labels(int index);
  ::google::protobuf::RepeatedPtrField<::kentik::label::v202203alpha1::Label>* mutable_labels();

  private:
  const ::google::protobuf::RepeatedPtrField<::kentik::label::v202203alpha1::Label>& _internal_labels() const;
  ::google::protobuf::RepeatedPtrField<::kentik::label::v202203alpha1::Label>* _internal_mutable_labels();
  public:
  const ::kentik::label::v202203alpha1::Label& labels(int index) const;
  ::kentik::label::v202203alpha1::Label* add_labels();
  const ::google::protobuf::RepeatedPtrField<::kentik::label::v202203alpha1::Label>& labels() const;
  // int32 invalid_count = 2 [json_name = "invalidCount"];
  void clear_invalid_count() ;
  ::int32_t invalid_count() const;
  void set_invalid_count(::int32_t value);

  private:
  ::int32_t _internal_invalid_count() const;
  void _internal_set_invalid_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.ListLabelsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListLabelsResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::kentik::label::v202203alpha1::Label > labels_;
    ::int32_t invalid_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};
// -------------------------------------------------------------------

class CreateLabelResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.CreateLabelResponse) */ {
 public:
  inline CreateLabelResponse() : CreateLabelResponse(nullptr) {}
  ~CreateLabelResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateLabelResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateLabelResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateLabelResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateLabelResponse(const CreateLabelResponse& from) : CreateLabelResponse(nullptr, from) {}
  inline CreateLabelResponse(CreateLabelResponse&& from) noexcept
      : CreateLabelResponse(nullptr, std::move(from)) {}
  inline CreateLabelResponse& operator=(const CreateLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLabelResponse& operator=(CreateLabelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLabelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLabelResponse* internal_default_instance() {
    return reinterpret_cast<const CreateLabelResponse*>(
        &_CreateLabelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CreateLabelResponse& a, CreateLabelResponse& b) { a.Swap(&b); }
  inline void Swap(CreateLabelResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLabelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateLabelResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateLabelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateLabelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateLabelResponse& from) { CreateLabelResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateLabelResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.CreateLabelResponse"; }

 protected:
  explicit CreateLabelResponse(::google::protobuf::Arena* arena);
  CreateLabelResponse(::google::protobuf::Arena* arena, const CreateLabelResponse& from);
  CreateLabelResponse(::google::protobuf::Arena* arena, CreateLabelResponse&& from) noexcept
      : CreateLabelResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelFieldNumber = 1,
  };
  // .kentik.label.v202203alpha1.Label label = 1 [json_name = "label"];
  bool has_label() const;
  void clear_label() ;
  const ::kentik::label::v202203alpha1::Label& label() const;
  PROTOBUF_NODISCARD ::kentik::label::v202203alpha1::Label* release_label();
  ::kentik::label::v202203alpha1::Label* mutable_label();
  void set_allocated_label(::kentik::label::v202203alpha1::Label* value);
  void unsafe_arena_set_allocated_label(::kentik::label::v202203alpha1::Label* value);
  ::kentik::label::v202203alpha1::Label* unsafe_arena_release_label();

  private:
  const ::kentik::label::v202203alpha1::Label& _internal_label() const;
  ::kentik::label::v202203alpha1::Label* _internal_mutable_label();

  public:
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.CreateLabelResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateLabelResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kentik::label::v202203alpha1::Label* label_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};
// -------------------------------------------------------------------

class CreateLabelRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.label.v202203alpha1.CreateLabelRequest) */ {
 public:
  inline CreateLabelRequest() : CreateLabelRequest(nullptr) {}
  ~CreateLabelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CreateLabelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CreateLabelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CreateLabelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CreateLabelRequest(const CreateLabelRequest& from) : CreateLabelRequest(nullptr, from) {}
  inline CreateLabelRequest(CreateLabelRequest&& from) noexcept
      : CreateLabelRequest(nullptr, std::move(from)) {}
  inline CreateLabelRequest& operator=(const CreateLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLabelRequest& operator=(CreateLabelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateLabelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateLabelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLabelRequest*>(
        &_CreateLabelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CreateLabelRequest& a, CreateLabelRequest& b) { a.Swap(&b); }
  inline void Swap(CreateLabelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLabelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateLabelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CreateLabelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CreateLabelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CreateLabelRequest& from) { CreateLabelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CreateLabelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.label.v202203alpha1.CreateLabelRequest"; }

 protected:
  explicit CreateLabelRequest(::google::protobuf::Arena* arena);
  CreateLabelRequest(::google::protobuf::Arena* arena, const CreateLabelRequest& from);
  CreateLabelRequest(::google::protobuf::Arena* arena, CreateLabelRequest&& from) noexcept
      : CreateLabelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLabelFieldNumber = 1,
  };
  // .kentik.label.v202203alpha1.Label label = 1 [json_name = "label"];
  bool has_label() const;
  void clear_label() ;
  const ::kentik::label::v202203alpha1::Label& label() const;
  PROTOBUF_NODISCARD ::kentik::label::v202203alpha1::Label* release_label();
  ::kentik::label::v202203alpha1::Label* mutable_label();
  void set_allocated_label(::kentik::label::v202203alpha1::Label* value);
  void unsafe_arena_set_allocated_label(::kentik::label::v202203alpha1::Label* value);
  ::kentik::label::v202203alpha1::Label* unsafe_arena_release_label();

  private:
  const ::kentik::label::v202203alpha1::Label& _internal_label() const;
  ::kentik::label::v202203alpha1::Label* _internal_mutable_label();

  public:
  // @@protoc_insertion_point(class_scope:kentik.label.v202203alpha1.CreateLabelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CreateLabelRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kentik::label::v202203alpha1::Label* label_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2flabel_2fv202203alpha1_2flabel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Label

// string id = 1 [json_name = "id"];
inline void Label::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Label::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.Label.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Label::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.label.v202203alpha1.Label.id)
}
inline std::string* Label::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.Label.id)
  return _s;
}
inline const std::string& Label::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void Label::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* Label::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* Label::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.Label.id)
  return _impl_.id_.Release();
}
inline void Label::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.Label.id)
}

// string name = 2 [json_name = "name"];
inline void Label::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Label::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.Label.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Label::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.label.v202203alpha1.Label.name)
}
inline std::string* Label::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.Label.name)
  return _s;
}
inline const std::string& Label::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Label::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Label::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Label::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.Label.name)
  return _impl_.name_.Release();
}
inline void Label::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.Label.name)
}

// string description = 3 [json_name = "description"];
inline void Label::clear_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.ClearToEmpty();
}
inline const std::string& Label::description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.Label.description)
  return _internal_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Label::set_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.label.v202203alpha1.Label.description)
}
inline std::string* Label::mutable_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.Label.description)
  return _s;
}
inline const std::string& Label::_internal_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.description_.Get();
}
inline void Label::_internal_set_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.Set(value, GetArena());
}
inline std::string* Label::_internal_mutable_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.description_.Mutable( GetArena());
}
inline std::string* Label::release_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.Label.description)
  return _impl_.description_.Release();
}
inline void Label::set_allocated_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.Label.description)
}

// string color = 5 [json_name = "color"];
inline void Label::clear_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.ClearToEmpty();
}
inline const std::string& Label::color() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.Label.color)
  return _internal_color();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Label::set_color(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.label.v202203alpha1.Label.color)
}
inline std::string* Label::mutable_color() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.Label.color)
  return _s;
}
inline const std::string& Label::_internal_color() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.color_.Get();
}
inline void Label::_internal_set_color(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.Set(value, GetArena());
}
inline std::string* Label::_internal_mutable_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.color_.Mutable( GetArena());
}
inline std::string* Label::release_color() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.Label.color)
  return _impl_.color_.Release();
}
inline void Label::set_allocated_color(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.color_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.Label.color)
}

// .google.protobuf.Timestamp cdate = 6 [json_name = "cdate"];
inline bool Label::has_cdate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cdate_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Label::_internal_cdate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.cdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Label::cdate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.Label.cdate)
  return _internal_cdate();
}
inline void Label::unsafe_arena_set_allocated_cdate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cdate_);
  }
  _impl_.cdate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202203alpha1.Label.cdate)
}
inline ::google::protobuf::Timestamp* Label::release_cdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.cdate_;
  _impl_.cdate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Label::unsafe_arena_release_cdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.Label.cdate)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.cdate_;
  _impl_.cdate_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Label::_internal_mutable_cdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cdate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.cdate_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.cdate_;
}
inline ::google::protobuf::Timestamp* Label::mutable_cdate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_cdate();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.Label.cdate)
  return _msg;
}
inline void Label::set_allocated_cdate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cdate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cdate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.Label.cdate)
}

// .google.protobuf.Timestamp edate = 7 [json_name = "edate"];
inline bool Label::has_edate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edate_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Label::_internal_edate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.edate_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Label::edate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.Label.edate)
  return _internal_edate();
}
inline void Label::unsafe_arena_set_allocated_edate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edate_);
  }
  _impl_.edate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202203alpha1.Label.edate)
}
inline ::google::protobuf::Timestamp* Label::release_edate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.edate_;
  _impl_.edate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Label::unsafe_arena_release_edate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.Label.edate)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.edate_;
  _impl_.edate_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Label::_internal_mutable_edate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.edate_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.edate_;
}
inline ::google::protobuf::Timestamp* Label::mutable_edate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_edate();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.Label.edate)
  return _msg;
}
inline void Label::set_allocated_edate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.edate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.Label.edate)
}

// -------------------------------------------------------------------

// ListLabelsRequest

// -------------------------------------------------------------------

// ListLabelsResponse

// repeated .kentik.label.v202203alpha1.Label labels = 1 [json_name = "labels"];
inline int ListLabelsResponse::_internal_labels_size() const {
  return _internal_labels().size();
}
inline int ListLabelsResponse::labels_size() const {
  return _internal_labels_size();
}
inline void ListLabelsResponse::clear_labels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.labels_.Clear();
}
inline ::kentik::label::v202203alpha1::Label* ListLabelsResponse::mutable_labels(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.ListLabelsResponse.labels)
  return _internal_mutable_labels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::kentik::label::v202203alpha1::Label>* ListLabelsResponse::mutable_labels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.label.v202203alpha1.ListLabelsResponse.labels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_labels();
}
inline const ::kentik::label::v202203alpha1::Label& ListLabelsResponse::labels(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.ListLabelsResponse.labels)
  return _internal_labels().Get(index);
}
inline ::kentik::label::v202203alpha1::Label* ListLabelsResponse::add_labels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::kentik::label::v202203alpha1::Label* _add = _internal_mutable_labels()->Add();
  // @@protoc_insertion_point(field_add:kentik.label.v202203alpha1.ListLabelsResponse.labels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::kentik::label::v202203alpha1::Label>& ListLabelsResponse::labels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.label.v202203alpha1.ListLabelsResponse.labels)
  return _internal_labels();
}
inline const ::google::protobuf::RepeatedPtrField<::kentik::label::v202203alpha1::Label>&
ListLabelsResponse::_internal_labels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.labels_;
}
inline ::google::protobuf::RepeatedPtrField<::kentik::label::v202203alpha1::Label>*
ListLabelsResponse::_internal_mutable_labels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.labels_;
}

// int32 invalid_count = 2 [json_name = "invalidCount"];
inline void ListLabelsResponse::clear_invalid_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.invalid_count_ = 0;
}
inline ::int32_t ListLabelsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.ListLabelsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListLabelsResponse::set_invalid_count(::int32_t value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.label.v202203alpha1.ListLabelsResponse.invalid_count)
}
inline ::int32_t ListLabelsResponse::_internal_invalid_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.invalid_count_;
}
inline void ListLabelsResponse::_internal_set_invalid_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.invalid_count_ = value;
}

// -------------------------------------------------------------------

// CreateLabelRequest

// .kentik.label.v202203alpha1.Label label = 1 [json_name = "label"];
inline bool CreateLabelRequest::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.label_ != nullptr);
  return value;
}
inline void CreateLabelRequest::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_ != nullptr) _impl_.label_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::label::v202203alpha1::Label& CreateLabelRequest::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::label::v202203alpha1::Label* p = _impl_.label_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::label::v202203alpha1::Label&>(::kentik::label::v202203alpha1::_Label_default_instance_);
}
inline const ::kentik::label::v202203alpha1::Label& CreateLabelRequest::label() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.CreateLabelRequest.label)
  return _internal_label();
}
inline void CreateLabelRequest::unsafe_arena_set_allocated_label(::kentik::label::v202203alpha1::Label* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.label_);
  }
  _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202203alpha1.CreateLabelRequest.label)
}
inline ::kentik::label::v202203alpha1::Label* CreateLabelRequest::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::label::v202203alpha1::Label* released = _impl_.label_;
  _impl_.label_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::label::v202203alpha1::Label* CreateLabelRequest::unsafe_arena_release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.CreateLabelRequest.label)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::label::v202203alpha1::Label* temp = _impl_.label_;
  _impl_.label_ = nullptr;
  return temp;
}
inline ::kentik::label::v202203alpha1::Label* CreateLabelRequest::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::label::v202203alpha1::Label>(GetArena());
    _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(p);
  }
  return _impl_.label_;
}
inline ::kentik::label::v202203alpha1::Label* CreateLabelRequest::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kentik::label::v202203alpha1::Label* _msg = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.CreateLabelRequest.label)
  return _msg;
}
inline void CreateLabelRequest::set_allocated_label(::kentik::label::v202203alpha1::Label* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.label_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.CreateLabelRequest.label)
}

// -------------------------------------------------------------------

// CreateLabelResponse

// .kentik.label.v202203alpha1.Label label = 1 [json_name = "label"];
inline bool CreateLabelResponse::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.label_ != nullptr);
  return value;
}
inline void CreateLabelResponse::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_ != nullptr) _impl_.label_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::label::v202203alpha1::Label& CreateLabelResponse::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::label::v202203alpha1::Label* p = _impl_.label_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::label::v202203alpha1::Label&>(::kentik::label::v202203alpha1::_Label_default_instance_);
}
inline const ::kentik::label::v202203alpha1::Label& CreateLabelResponse::label() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.CreateLabelResponse.label)
  return _internal_label();
}
inline void CreateLabelResponse::unsafe_arena_set_allocated_label(::kentik::label::v202203alpha1::Label* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.label_);
  }
  _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202203alpha1.CreateLabelResponse.label)
}
inline ::kentik::label::v202203alpha1::Label* CreateLabelResponse::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::label::v202203alpha1::Label* released = _impl_.label_;
  _impl_.label_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::label::v202203alpha1::Label* CreateLabelResponse::unsafe_arena_release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.CreateLabelResponse.label)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::label::v202203alpha1::Label* temp = _impl_.label_;
  _impl_.label_ = nullptr;
  return temp;
}
inline ::kentik::label::v202203alpha1::Label* CreateLabelResponse::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::label::v202203alpha1::Label>(GetArena());
    _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(p);
  }
  return _impl_.label_;
}
inline ::kentik::label::v202203alpha1::Label* CreateLabelResponse::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kentik::label::v202203alpha1::Label* _msg = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.CreateLabelResponse.label)
  return _msg;
}
inline void CreateLabelResponse::set_allocated_label(::kentik::label::v202203alpha1::Label* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.label_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.CreateLabelResponse.label)
}

// -------------------------------------------------------------------

// UpdateLabelRequest

// .kentik.label.v202203alpha1.Label label = 1 [json_name = "label"];
inline bool UpdateLabelRequest::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.label_ != nullptr);
  return value;
}
inline void UpdateLabelRequest::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_ != nullptr) _impl_.label_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::label::v202203alpha1::Label& UpdateLabelRequest::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::label::v202203alpha1::Label* p = _impl_.label_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::label::v202203alpha1::Label&>(::kentik::label::v202203alpha1::_Label_default_instance_);
}
inline const ::kentik::label::v202203alpha1::Label& UpdateLabelRequest::label() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.UpdateLabelRequest.label)
  return _internal_label();
}
inline void UpdateLabelRequest::unsafe_arena_set_allocated_label(::kentik::label::v202203alpha1::Label* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.label_);
  }
  _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202203alpha1.UpdateLabelRequest.label)
}
inline ::kentik::label::v202203alpha1::Label* UpdateLabelRequest::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::label::v202203alpha1::Label* released = _impl_.label_;
  _impl_.label_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::label::v202203alpha1::Label* UpdateLabelRequest::unsafe_arena_release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.UpdateLabelRequest.label)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::label::v202203alpha1::Label* temp = _impl_.label_;
  _impl_.label_ = nullptr;
  return temp;
}
inline ::kentik::label::v202203alpha1::Label* UpdateLabelRequest::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::label::v202203alpha1::Label>(GetArena());
    _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(p);
  }
  return _impl_.label_;
}
inline ::kentik::label::v202203alpha1::Label* UpdateLabelRequest::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kentik::label::v202203alpha1::Label* _msg = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.UpdateLabelRequest.label)
  return _msg;
}
inline void UpdateLabelRequest::set_allocated_label(::kentik::label::v202203alpha1::Label* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.label_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.UpdateLabelRequest.label)
}

// -------------------------------------------------------------------

// UpdateLabelResponse

// .kentik.label.v202203alpha1.Label label = 1 [json_name = "label"];
inline bool UpdateLabelResponse::has_label() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.label_ != nullptr);
  return value;
}
inline void UpdateLabelResponse::clear_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_ != nullptr) _impl_.label_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::label::v202203alpha1::Label& UpdateLabelResponse::_internal_label() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::label::v202203alpha1::Label* p = _impl_.label_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::label::v202203alpha1::Label&>(::kentik::label::v202203alpha1::_Label_default_instance_);
}
inline const ::kentik::label::v202203alpha1::Label& UpdateLabelResponse::label() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.UpdateLabelResponse.label)
  return _internal_label();
}
inline void UpdateLabelResponse::unsafe_arena_set_allocated_label(::kentik::label::v202203alpha1::Label* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.label_);
  }
  _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202203alpha1.UpdateLabelResponse.label)
}
inline ::kentik::label::v202203alpha1::Label* UpdateLabelResponse::release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::label::v202203alpha1::Label* released = _impl_.label_;
  _impl_.label_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::label::v202203alpha1::Label* UpdateLabelResponse::unsafe_arena_release_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.UpdateLabelResponse.label)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::label::v202203alpha1::Label* temp = _impl_.label_;
  _impl_.label_ = nullptr;
  return temp;
}
inline ::kentik::label::v202203alpha1::Label* UpdateLabelResponse::_internal_mutable_label() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.label_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::label::v202203alpha1::Label>(GetArena());
    _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(p);
  }
  return _impl_.label_;
}
inline ::kentik::label::v202203alpha1::Label* UpdateLabelResponse::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kentik::label::v202203alpha1::Label* _msg = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.UpdateLabelResponse.label)
  return _msg;
}
inline void UpdateLabelResponse::set_allocated_label(::kentik::label::v202203alpha1::Label* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.label_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.label_ = reinterpret_cast<::kentik::label::v202203alpha1::Label*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.UpdateLabelResponse.label)
}

// -------------------------------------------------------------------

// DeleteLabelRequest

// string id = 1 [json_name = "id"];
inline void DeleteLabelRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& DeleteLabelRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.label.v202203alpha1.DeleteLabelRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteLabelRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.label.v202203alpha1.DeleteLabelRequest.id)
}
inline std::string* DeleteLabelRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kentik.label.v202203alpha1.DeleteLabelRequest.id)
  return _s;
}
inline const std::string& DeleteLabelRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void DeleteLabelRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* DeleteLabelRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* DeleteLabelRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.label.v202203alpha1.DeleteLabelRequest.id)
  return _impl_.id_.Release();
}
inline void DeleteLabelRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202203alpha1.DeleteLabelRequest.id)
}

// -------------------------------------------------------------------

// DeleteLabelResponse

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202203alpha1
}  // namespace label
}  // namespace kentik


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2flabel_2fv202203alpha1_2flabel_2eproto_2epb_2eh
