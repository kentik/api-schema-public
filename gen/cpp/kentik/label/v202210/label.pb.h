// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/label/v202210/label.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2flabel_2fv202210_2flabel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2flabel_2fv202210_2flabel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/field_behavior.pb.h"
#include "google/api/client.pb.h"
#include "google/type/latlng.pb.h"
#include "google/type/postal_address.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202012alpha1/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2flabel_2fv202210_2flabel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto;
namespace kentik {
namespace label {
namespace v202210 {
class CreateLabelRequest;
class CreateLabelRequestDefaultTypeInternal;
extern CreateLabelRequestDefaultTypeInternal _CreateLabelRequest_default_instance_;
class CreateLabelResponse;
class CreateLabelResponseDefaultTypeInternal;
extern CreateLabelResponseDefaultTypeInternal _CreateLabelResponse_default_instance_;
class DeleteLabelRequest;
class DeleteLabelRequestDefaultTypeInternal;
extern DeleteLabelRequestDefaultTypeInternal _DeleteLabelRequest_default_instance_;
class DeleteLabelResponse;
class DeleteLabelResponseDefaultTypeInternal;
extern DeleteLabelResponseDefaultTypeInternal _DeleteLabelResponse_default_instance_;
class Label;
class LabelDefaultTypeInternal;
extern LabelDefaultTypeInternal _Label_default_instance_;
class ListLabelsRequest;
class ListLabelsRequestDefaultTypeInternal;
extern ListLabelsRequestDefaultTypeInternal _ListLabelsRequest_default_instance_;
class ListLabelsResponse;
class ListLabelsResponseDefaultTypeInternal;
extern ListLabelsResponseDefaultTypeInternal _ListLabelsResponse_default_instance_;
class UpdateLabelRequest;
class UpdateLabelRequestDefaultTypeInternal;
extern UpdateLabelRequestDefaultTypeInternal _UpdateLabelRequest_default_instance_;
class UpdateLabelResponse;
class UpdateLabelResponseDefaultTypeInternal;
extern UpdateLabelResponseDefaultTypeInternal _UpdateLabelResponse_default_instance_;
}  // namespace v202210
}  // namespace label
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::label::v202210::CreateLabelRequest* Arena::CreateMaybeMessage<::kentik::label::v202210::CreateLabelRequest>(Arena*);
template<> ::kentik::label::v202210::CreateLabelResponse* Arena::CreateMaybeMessage<::kentik::label::v202210::CreateLabelResponse>(Arena*);
template<> ::kentik::label::v202210::DeleteLabelRequest* Arena::CreateMaybeMessage<::kentik::label::v202210::DeleteLabelRequest>(Arena*);
template<> ::kentik::label::v202210::DeleteLabelResponse* Arena::CreateMaybeMessage<::kentik::label::v202210::DeleteLabelResponse>(Arena*);
template<> ::kentik::label::v202210::Label* Arena::CreateMaybeMessage<::kentik::label::v202210::Label>(Arena*);
template<> ::kentik::label::v202210::ListLabelsRequest* Arena::CreateMaybeMessage<::kentik::label::v202210::ListLabelsRequest>(Arena*);
template<> ::kentik::label::v202210::ListLabelsResponse* Arena::CreateMaybeMessage<::kentik::label::v202210::ListLabelsResponse>(Arena*);
template<> ::kentik::label::v202210::UpdateLabelRequest* Arena::CreateMaybeMessage<::kentik::label::v202210::UpdateLabelRequest>(Arena*);
template<> ::kentik::label::v202210::UpdateLabelResponse* Arena::CreateMaybeMessage<::kentik::label::v202210::UpdateLabelResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace label {
namespace v202210 {

// ===================================================================

class Label PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.Label) */ {
 public:
  inline Label() : Label(nullptr) {};
  virtual ~Label();

  Label(const Label& from);
  Label(Label&& from) noexcept
    : Label() {
    *this = ::std::move(from);
  }

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }
  inline Label& operator=(Label&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Label& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Label* internal_default_instance() {
    return reinterpret_cast<const Label*>(
               &_Label_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Label& a, Label& b) {
    a.Swap(&b);
  }
  inline void Swap(Label* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Label* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Label* New() const final {
    return CreateMaybeMessage<Label>(nullptr);
  }

  Label* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Label>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Label* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.Label";
  }
  protected:
  explicit Label(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kColorFieldNumber = 5,
    kCdateFieldNumber = 6,
    kEdateFieldNumber = 7,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string color = 5[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_color();
  const std::string& color() const;
  void set_color(const std::string& value);
  void set_color(std::string&& value);
  void set_color(const char* value);
  void set_color(const char* value, size_t size);
  std::string* mutable_color();
  std::string* release_color();
  void set_allocated_color(std::string* color);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_color();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_color(
      std::string* color);
  private:
  const std::string& _internal_color() const;
  void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // .google.protobuf.Timestamp cdate = 6[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 7[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.Label)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// -------------------------------------------------------------------

class ListLabelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.ListLabelsRequest) */ {
 public:
  inline ListLabelsRequest() : ListLabelsRequest(nullptr) {};
  virtual ~ListLabelsRequest();

  ListLabelsRequest(const ListLabelsRequest& from);
  ListLabelsRequest(ListLabelsRequest&& from) noexcept
    : ListLabelsRequest() {
    *this = ::std::move(from);
  }

  inline ListLabelsRequest& operator=(const ListLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabelsRequest& operator=(ListLabelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLabelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLabelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLabelsRequest*>(
               &_ListLabelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListLabelsRequest& a, ListLabelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLabelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLabelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLabelsRequest* New() const final {
    return CreateMaybeMessage<ListLabelsRequest>(nullptr);
  }

  ListLabelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLabelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLabelsRequest& from);
  void MergeFrom(const ListLabelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLabelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.ListLabelsRequest";
  }
  protected:
  explicit ListLabelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.ListLabelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// -------------------------------------------------------------------

class ListLabelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.ListLabelsResponse) */ {
 public:
  inline ListLabelsResponse() : ListLabelsResponse(nullptr) {};
  virtual ~ListLabelsResponse();

  ListLabelsResponse(const ListLabelsResponse& from);
  ListLabelsResponse(ListLabelsResponse&& from) noexcept
    : ListLabelsResponse() {
    *this = ::std::move(from);
  }

  inline ListLabelsResponse& operator=(const ListLabelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLabelsResponse& operator=(ListLabelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLabelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLabelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLabelsResponse*>(
               &_ListLabelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListLabelsResponse& a, ListLabelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLabelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLabelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLabelsResponse* New() const final {
    return CreateMaybeMessage<ListLabelsResponse>(nullptr);
  }

  ListLabelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLabelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLabelsResponse& from);
  void MergeFrom(const ListLabelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLabelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.ListLabelsResponse";
  }
  protected:
  explicit ListLabelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.label.v202210.Label labels = 1[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  ::kentik::label::v202210::Label* mutable_labels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::label::v202210::Label >*
      mutable_labels();
  private:
  const ::kentik::label::v202210::Label& _internal_labels(int index) const;
  ::kentik::label::v202210::Label* _internal_add_labels();
  public:
  const ::kentik::label::v202210::Label& labels(int index) const;
  ::kentik::label::v202210::Label* add_labels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::label::v202210::Label >&
      labels() const;

  // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.ListLabelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::label::v202210::Label > labels_;
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// -------------------------------------------------------------------

class CreateLabelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.CreateLabelRequest) */ {
 public:
  inline CreateLabelRequest() : CreateLabelRequest(nullptr) {};
  virtual ~CreateLabelRequest();

  CreateLabelRequest(const CreateLabelRequest& from);
  CreateLabelRequest(CreateLabelRequest&& from) noexcept
    : CreateLabelRequest() {
    *this = ::std::move(from);
  }

  inline CreateLabelRequest& operator=(const CreateLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLabelRequest& operator=(CreateLabelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLabelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateLabelRequest* internal_default_instance() {
    return reinterpret_cast<const CreateLabelRequest*>(
               &_CreateLabelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CreateLabelRequest& a, CreateLabelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLabelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLabelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLabelRequest* New() const final {
    return CreateMaybeMessage<CreateLabelRequest>(nullptr);
  }

  CreateLabelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLabelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLabelRequest& from);
  void MergeFrom(const CreateLabelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLabelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.CreateLabelRequest";
  }
  protected:
  explicit CreateLabelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // .kentik.label.v202210.Label label = 1[json_name = "label", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const ::kentik::label::v202210::Label& label() const;
  ::kentik::label::v202210::Label* release_label();
  ::kentik::label::v202210::Label* mutable_label();
  void set_allocated_label(::kentik::label::v202210::Label* label);
  private:
  const ::kentik::label::v202210::Label& _internal_label() const;
  ::kentik::label::v202210::Label* _internal_mutable_label();
  public:
  void unsafe_arena_set_allocated_label(
      ::kentik::label::v202210::Label* label);
  ::kentik::label::v202210::Label* unsafe_arena_release_label();

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.CreateLabelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::label::v202210::Label* label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// -------------------------------------------------------------------

class CreateLabelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.CreateLabelResponse) */ {
 public:
  inline CreateLabelResponse() : CreateLabelResponse(nullptr) {};
  virtual ~CreateLabelResponse();

  CreateLabelResponse(const CreateLabelResponse& from);
  CreateLabelResponse(CreateLabelResponse&& from) noexcept
    : CreateLabelResponse() {
    *this = ::std::move(from);
  }

  inline CreateLabelResponse& operator=(const CreateLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateLabelResponse& operator=(CreateLabelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateLabelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateLabelResponse* internal_default_instance() {
    return reinterpret_cast<const CreateLabelResponse*>(
               &_CreateLabelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CreateLabelResponse& a, CreateLabelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateLabelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateLabelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateLabelResponse* New() const final {
    return CreateMaybeMessage<CreateLabelResponse>(nullptr);
  }

  CreateLabelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateLabelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateLabelResponse& from);
  void MergeFrom(const CreateLabelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateLabelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.CreateLabelResponse";
  }
  protected:
  explicit CreateLabelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // .kentik.label.v202210.Label label = 1[json_name = "label", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const ::kentik::label::v202210::Label& label() const;
  ::kentik::label::v202210::Label* release_label();
  ::kentik::label::v202210::Label* mutable_label();
  void set_allocated_label(::kentik::label::v202210::Label* label);
  private:
  const ::kentik::label::v202210::Label& _internal_label() const;
  ::kentik::label::v202210::Label* _internal_mutable_label();
  public:
  void unsafe_arena_set_allocated_label(
      ::kentik::label::v202210::Label* label);
  ::kentik::label::v202210::Label* unsafe_arena_release_label();

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.CreateLabelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::label::v202210::Label* label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// -------------------------------------------------------------------

class UpdateLabelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.UpdateLabelRequest) */ {
 public:
  inline UpdateLabelRequest() : UpdateLabelRequest(nullptr) {};
  virtual ~UpdateLabelRequest();

  UpdateLabelRequest(const UpdateLabelRequest& from);
  UpdateLabelRequest(UpdateLabelRequest&& from) noexcept
    : UpdateLabelRequest() {
    *this = ::std::move(from);
  }

  inline UpdateLabelRequest& operator=(const UpdateLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLabelRequest& operator=(UpdateLabelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLabelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateLabelRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateLabelRequest*>(
               &_UpdateLabelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateLabelRequest& a, UpdateLabelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLabelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLabelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLabelRequest* New() const final {
    return CreateMaybeMessage<UpdateLabelRequest>(nullptr);
  }

  UpdateLabelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLabelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLabelRequest& from);
  void MergeFrom(const UpdateLabelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLabelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.UpdateLabelRequest";
  }
  protected:
  explicit UpdateLabelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // .kentik.label.v202210.Label label = 1[json_name = "label", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const ::kentik::label::v202210::Label& label() const;
  ::kentik::label::v202210::Label* release_label();
  ::kentik::label::v202210::Label* mutable_label();
  void set_allocated_label(::kentik::label::v202210::Label* label);
  private:
  const ::kentik::label::v202210::Label& _internal_label() const;
  ::kentik::label::v202210::Label* _internal_mutable_label();
  public:
  void unsafe_arena_set_allocated_label(
      ::kentik::label::v202210::Label* label);
  ::kentik::label::v202210::Label* unsafe_arena_release_label();

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.UpdateLabelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::label::v202210::Label* label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// -------------------------------------------------------------------

class UpdateLabelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.UpdateLabelResponse) */ {
 public:
  inline UpdateLabelResponse() : UpdateLabelResponse(nullptr) {};
  virtual ~UpdateLabelResponse();

  UpdateLabelResponse(const UpdateLabelResponse& from);
  UpdateLabelResponse(UpdateLabelResponse&& from) noexcept
    : UpdateLabelResponse() {
    *this = ::std::move(from);
  }

  inline UpdateLabelResponse& operator=(const UpdateLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateLabelResponse& operator=(UpdateLabelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateLabelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateLabelResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateLabelResponse*>(
               &_UpdateLabelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateLabelResponse& a, UpdateLabelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateLabelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateLabelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateLabelResponse* New() const final {
    return CreateMaybeMessage<UpdateLabelResponse>(nullptr);
  }

  UpdateLabelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateLabelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateLabelResponse& from);
  void MergeFrom(const UpdateLabelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateLabelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.UpdateLabelResponse";
  }
  protected:
  explicit UpdateLabelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 1,
  };
  // .kentik.label.v202210.Label label = 1[json_name = "label", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_label() const;
  private:
  bool _internal_has_label() const;
  public:
  void clear_label();
  const ::kentik::label::v202210::Label& label() const;
  ::kentik::label::v202210::Label* release_label();
  ::kentik::label::v202210::Label* mutable_label();
  void set_allocated_label(::kentik::label::v202210::Label* label);
  private:
  const ::kentik::label::v202210::Label& _internal_label() const;
  ::kentik::label::v202210::Label* _internal_mutable_label();
  public:
  void unsafe_arena_set_allocated_label(
      ::kentik::label::v202210::Label* label);
  ::kentik::label::v202210::Label* unsafe_arena_release_label();

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.UpdateLabelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::label::v202210::Label* label_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// -------------------------------------------------------------------

class DeleteLabelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.DeleteLabelRequest) */ {
 public:
  inline DeleteLabelRequest() : DeleteLabelRequest(nullptr) {};
  virtual ~DeleteLabelRequest();

  DeleteLabelRequest(const DeleteLabelRequest& from);
  DeleteLabelRequest(DeleteLabelRequest&& from) noexcept
    : DeleteLabelRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLabelRequest& operator=(const DeleteLabelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLabelRequest& operator=(DeleteLabelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLabelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLabelRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLabelRequest*>(
               &_DeleteLabelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteLabelRequest& a, DeleteLabelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLabelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLabelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLabelRequest* New() const final {
    return CreateMaybeMessage<DeleteLabelRequest>(nullptr);
  }

  DeleteLabelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLabelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLabelRequest& from);
  void MergeFrom(const DeleteLabelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLabelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.DeleteLabelRequest";
  }
  protected:
  explicit DeleteLabelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.DeleteLabelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// -------------------------------------------------------------------

class DeleteLabelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.label.v202210.DeleteLabelResponse) */ {
 public:
  inline DeleteLabelResponse() : DeleteLabelResponse(nullptr) {};
  virtual ~DeleteLabelResponse();

  DeleteLabelResponse(const DeleteLabelResponse& from);
  DeleteLabelResponse(DeleteLabelResponse&& from) noexcept
    : DeleteLabelResponse() {
    *this = ::std::move(from);
  }

  inline DeleteLabelResponse& operator=(const DeleteLabelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLabelResponse& operator=(DeleteLabelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLabelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLabelResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteLabelResponse*>(
               &_DeleteLabelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteLabelResponse& a, DeleteLabelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLabelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLabelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLabelResponse* New() const final {
    return CreateMaybeMessage<DeleteLabelResponse>(nullptr);
  }

  DeleteLabelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLabelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLabelResponse& from);
  void MergeFrom(const DeleteLabelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLabelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.label.v202210.DeleteLabelResponse";
  }
  protected:
  explicit DeleteLabelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto);
    return ::descriptor_table_kentik_2flabel_2fv202210_2flabel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.label.v202210.DeleteLabelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2flabel_2fv202210_2flabel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Label

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::id() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.Label.id)
  return _internal_id();
}
inline void Label::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.label.v202210.Label.id)
}
inline std::string* Label::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.Label.id)
  return _internal_mutable_id();
}
inline const std::string& Label::_internal_id() const {
  return id_.Get();
}
inline void Label::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.label.v202210.Label.id)
}
inline void Label::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.label.v202210.Label.id)
}
inline void Label::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.label.v202210.Label.id)
}
inline std::string* Label::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_id() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.Label.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.Label.id)
}
inline std::string* Label::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.label.v202210.Label.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.Label.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::name() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.Label.name)
  return _internal_name();
}
inline void Label::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.label.v202210.Label.name)
}
inline std::string* Label::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.Label.name)
  return _internal_mutable_name();
}
inline const std::string& Label::_internal_name() const {
  return name_.Get();
}
inline void Label::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.label.v202210.Label.name)
}
inline void Label::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.label.v202210.Label.name)
}
inline void Label::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.label.v202210.Label.name)
}
inline std::string* Label::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_name() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.Label.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.Label.name)
}
inline std::string* Label::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.label.v202210.Label.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.Label.name)
}

// string description = 3[json_name = "description", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::description() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.Label.description)
  return _internal_description();
}
inline void Label::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:kentik.label.v202210.Label.description)
}
inline std::string* Label::mutable_description() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.Label.description)
  return _internal_mutable_description();
}
inline const std::string& Label::_internal_description() const {
  return description_.Get();
}
inline void Label::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.label.v202210.Label.description)
}
inline void Label::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.label.v202210.Label.description)
}
inline void Label::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.label.v202210.Label.description)
}
inline std::string* Label::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_description() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.Label.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.Label.description)
}
inline std::string* Label::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.label.v202210.Label.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.Label.description)
}

// string color = 5[json_name = "color", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Label::clear_color() {
  color_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Label::color() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.Label.color)
  return _internal_color();
}
inline void Label::set_color(const std::string& value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:kentik.label.v202210.Label.color)
}
inline std::string* Label::mutable_color() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.Label.color)
  return _internal_mutable_color();
}
inline const std::string& Label::_internal_color() const {
  return color_.Get();
}
inline void Label::_internal_set_color(const std::string& value) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Label::set_color(std::string&& value) {
  
  color_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.label.v202210.Label.color)
}
inline void Label::set_color(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.label.v202210.Label.color)
}
inline void Label::set_color(const char* value,
    size_t size) {
  
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.label.v202210.Label.color)
}
inline std::string* Label::_internal_mutable_color() {
  
  return color_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Label::release_color() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.Label.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Label::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.Label.color)
}
inline std::string* Label::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.label.v202210.Label.color)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return color_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Label::unsafe_arena_set_allocated_color(
    std::string* color) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (color != nullptr) {
    
  } else {
    
  }
  color_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      color, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.Label.color)
}

// .google.protobuf.Timestamp cdate = 6[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Label::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool Label::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Label::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Label::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.Label.cdate)
  return _internal_cdate();
}
inline void Label::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.Label.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.Label.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.Label.cdate)
  return _internal_mutable_cdate();
}
inline void Label::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.Label.cdate)
}

// .google.protobuf.Timestamp edate = 7[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Label::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool Label::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Label::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Label::edate() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.Label.edate)
  return _internal_edate();
}
inline void Label::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.Label.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.Label.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Label::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.Label.edate)
  return _internal_mutable_edate();
}
inline void Label::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.Label.edate)
}

// -------------------------------------------------------------------

// ListLabelsRequest

// -------------------------------------------------------------------

// ListLabelsResponse

// repeated .kentik.label.v202210.Label labels = 1[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListLabelsResponse::_internal_labels_size() const {
  return labels_.size();
}
inline int ListLabelsResponse::labels_size() const {
  return _internal_labels_size();
}
inline void ListLabelsResponse::clear_labels() {
  labels_.Clear();
}
inline ::kentik::label::v202210::Label* ListLabelsResponse::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.ListLabelsResponse.labels)
  return labels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::label::v202210::Label >*
ListLabelsResponse::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.label.v202210.ListLabelsResponse.labels)
  return &labels_;
}
inline const ::kentik::label::v202210::Label& ListLabelsResponse::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const ::kentik::label::v202210::Label& ListLabelsResponse::labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.ListLabelsResponse.labels)
  return _internal_labels(index);
}
inline ::kentik::label::v202210::Label* ListLabelsResponse::_internal_add_labels() {
  return labels_.Add();
}
inline ::kentik::label::v202210::Label* ListLabelsResponse::add_labels() {
  // @@protoc_insertion_point(field_add:kentik.label.v202210.ListLabelsResponse.labels)
  return _internal_add_labels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::label::v202210::Label >&
ListLabelsResponse::labels() const {
  // @@protoc_insertion_point(field_list:kentik.label.v202210.ListLabelsResponse.labels)
  return labels_;
}

// int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListLabelsResponse::clear_invalid_count() {
  invalid_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLabelsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLabelsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.ListLabelsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListLabelsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invalid_count_ = value;
}
inline void ListLabelsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.label.v202210.ListLabelsResponse.invalid_count)
}

// -------------------------------------------------------------------

// CreateLabelRequest

// .kentik.label.v202210.Label label = 1[json_name = "label", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateLabelRequest::_internal_has_label() const {
  return this != internal_default_instance() && label_ != nullptr;
}
inline bool CreateLabelRequest::has_label() const {
  return _internal_has_label();
}
inline void CreateLabelRequest::clear_label() {
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
inline const ::kentik::label::v202210::Label& CreateLabelRequest::_internal_label() const {
  const ::kentik::label::v202210::Label* p = label_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::label::v202210::Label*>(
      &::kentik::label::v202210::_Label_default_instance_);
}
inline const ::kentik::label::v202210::Label& CreateLabelRequest::label() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.CreateLabelRequest.label)
  return _internal_label();
}
inline void CreateLabelRequest::unsafe_arena_set_allocated_label(
    ::kentik::label::v202210::Label* label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_);
  }
  label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.CreateLabelRequest.label)
}
inline ::kentik::label::v202210::Label* CreateLabelRequest::release_label() {
  auto temp = unsafe_arena_release_label();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::label::v202210::Label* CreateLabelRequest::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.CreateLabelRequest.label)
  
  ::kentik::label::v202210::Label* temp = label_;
  label_ = nullptr;
  return temp;
}
inline ::kentik::label::v202210::Label* CreateLabelRequest::_internal_mutable_label() {
  
  if (label_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::label::v202210::Label>(GetArena());
    label_ = p;
  }
  return label_;
}
inline ::kentik::label::v202210::Label* CreateLabelRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.CreateLabelRequest.label)
  return _internal_mutable_label();
}
inline void CreateLabelRequest::set_allocated_label(::kentik::label::v202210::Label* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete label_;
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label);
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.CreateLabelRequest.label)
}

// -------------------------------------------------------------------

// CreateLabelResponse

// .kentik.label.v202210.Label label = 1[json_name = "label", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateLabelResponse::_internal_has_label() const {
  return this != internal_default_instance() && label_ != nullptr;
}
inline bool CreateLabelResponse::has_label() const {
  return _internal_has_label();
}
inline void CreateLabelResponse::clear_label() {
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
inline const ::kentik::label::v202210::Label& CreateLabelResponse::_internal_label() const {
  const ::kentik::label::v202210::Label* p = label_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::label::v202210::Label*>(
      &::kentik::label::v202210::_Label_default_instance_);
}
inline const ::kentik::label::v202210::Label& CreateLabelResponse::label() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.CreateLabelResponse.label)
  return _internal_label();
}
inline void CreateLabelResponse::unsafe_arena_set_allocated_label(
    ::kentik::label::v202210::Label* label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_);
  }
  label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.CreateLabelResponse.label)
}
inline ::kentik::label::v202210::Label* CreateLabelResponse::release_label() {
  auto temp = unsafe_arena_release_label();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::label::v202210::Label* CreateLabelResponse::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.CreateLabelResponse.label)
  
  ::kentik::label::v202210::Label* temp = label_;
  label_ = nullptr;
  return temp;
}
inline ::kentik::label::v202210::Label* CreateLabelResponse::_internal_mutable_label() {
  
  if (label_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::label::v202210::Label>(GetArena());
    label_ = p;
  }
  return label_;
}
inline ::kentik::label::v202210::Label* CreateLabelResponse::mutable_label() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.CreateLabelResponse.label)
  return _internal_mutable_label();
}
inline void CreateLabelResponse::set_allocated_label(::kentik::label::v202210::Label* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete label_;
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label);
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.CreateLabelResponse.label)
}

// -------------------------------------------------------------------

// UpdateLabelRequest

// .kentik.label.v202210.Label label = 1[json_name = "label", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateLabelRequest::_internal_has_label() const {
  return this != internal_default_instance() && label_ != nullptr;
}
inline bool UpdateLabelRequest::has_label() const {
  return _internal_has_label();
}
inline void UpdateLabelRequest::clear_label() {
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
inline const ::kentik::label::v202210::Label& UpdateLabelRequest::_internal_label() const {
  const ::kentik::label::v202210::Label* p = label_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::label::v202210::Label*>(
      &::kentik::label::v202210::_Label_default_instance_);
}
inline const ::kentik::label::v202210::Label& UpdateLabelRequest::label() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.UpdateLabelRequest.label)
  return _internal_label();
}
inline void UpdateLabelRequest::unsafe_arena_set_allocated_label(
    ::kentik::label::v202210::Label* label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_);
  }
  label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.UpdateLabelRequest.label)
}
inline ::kentik::label::v202210::Label* UpdateLabelRequest::release_label() {
  auto temp = unsafe_arena_release_label();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::label::v202210::Label* UpdateLabelRequest::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.UpdateLabelRequest.label)
  
  ::kentik::label::v202210::Label* temp = label_;
  label_ = nullptr;
  return temp;
}
inline ::kentik::label::v202210::Label* UpdateLabelRequest::_internal_mutable_label() {
  
  if (label_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::label::v202210::Label>(GetArena());
    label_ = p;
  }
  return label_;
}
inline ::kentik::label::v202210::Label* UpdateLabelRequest::mutable_label() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.UpdateLabelRequest.label)
  return _internal_mutable_label();
}
inline void UpdateLabelRequest::set_allocated_label(::kentik::label::v202210::Label* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete label_;
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label);
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.UpdateLabelRequest.label)
}

// -------------------------------------------------------------------

// UpdateLabelResponse

// .kentik.label.v202210.Label label = 1[json_name = "label", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateLabelResponse::_internal_has_label() const {
  return this != internal_default_instance() && label_ != nullptr;
}
inline bool UpdateLabelResponse::has_label() const {
  return _internal_has_label();
}
inline void UpdateLabelResponse::clear_label() {
  if (GetArena() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
inline const ::kentik::label::v202210::Label& UpdateLabelResponse::_internal_label() const {
  const ::kentik::label::v202210::Label* p = label_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::label::v202210::Label*>(
      &::kentik::label::v202210::_Label_default_instance_);
}
inline const ::kentik::label::v202210::Label& UpdateLabelResponse::label() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.UpdateLabelResponse.label)
  return _internal_label();
}
inline void UpdateLabelResponse::unsafe_arena_set_allocated_label(
    ::kentik::label::v202210::Label* label) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(label_);
  }
  label_ = label;
  if (label) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.UpdateLabelResponse.label)
}
inline ::kentik::label::v202210::Label* UpdateLabelResponse::release_label() {
  auto temp = unsafe_arena_release_label();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::label::v202210::Label* UpdateLabelResponse::unsafe_arena_release_label() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.UpdateLabelResponse.label)
  
  ::kentik::label::v202210::Label* temp = label_;
  label_ = nullptr;
  return temp;
}
inline ::kentik::label::v202210::Label* UpdateLabelResponse::_internal_mutable_label() {
  
  if (label_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::label::v202210::Label>(GetArena());
    label_ = p;
  }
  return label_;
}
inline ::kentik::label::v202210::Label* UpdateLabelResponse::mutable_label() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.UpdateLabelResponse.label)
  return _internal_mutable_label();
}
inline void UpdateLabelResponse::set_allocated_label(::kentik::label::v202210::Label* label) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete label_;
  }
  if (label) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(label);
    if (message_arena != submessage_arena) {
      label = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.UpdateLabelResponse.label)
}

// -------------------------------------------------------------------

// DeleteLabelRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeleteLabelRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteLabelRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.label.v202210.DeleteLabelRequest.id)
  return _internal_id();
}
inline void DeleteLabelRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.label.v202210.DeleteLabelRequest.id)
}
inline std::string* DeleteLabelRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.label.v202210.DeleteLabelRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteLabelRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteLabelRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteLabelRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.label.v202210.DeleteLabelRequest.id)
}
inline void DeleteLabelRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.label.v202210.DeleteLabelRequest.id)
}
inline void DeleteLabelRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.label.v202210.DeleteLabelRequest.id)
}
inline std::string* DeleteLabelRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteLabelRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.label.v202210.DeleteLabelRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteLabelRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.label.v202210.DeleteLabelRequest.id)
}
inline std::string* DeleteLabelRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.label.v202210.DeleteLabelRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteLabelRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.label.v202210.DeleteLabelRequest.id)
}

// -------------------------------------------------------------------

// DeleteLabelResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202210
}  // namespace label
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2flabel_2fv202210_2flabel_2eproto
