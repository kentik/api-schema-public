// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/synthetics/v202101beta1/synthetics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202012alpha1/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[79]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
namespace kentik {
namespace synthetics {
namespace v202101beta1 {
class ASN;
class ASNDefaultTypeInternal;
extern ASNDefaultTypeInternal _ASN_default_instance_;
class Agent;
class AgentDefaultTypeInternal;
extern AgentDefaultTypeInternal _Agent_default_instance_;
class AgentHealth;
class AgentHealthDefaultTypeInternal;
extern AgentHealthDefaultTypeInternal _AgentHealth_default_instance_;
class AgentTaskConfig;
class AgentTaskConfigDefaultTypeInternal;
extern AgentTaskConfigDefaultTypeInternal _AgentTaskConfig_default_instance_;
class AgentTest;
class AgentTestDefaultTypeInternal;
extern AgentTestDefaultTypeInternal _AgentTest_default_instance_;
class ApplicationMeshTest;
class ApplicationMeshTestDefaultTypeInternal;
extern ApplicationMeshTestDefaultTypeInternal _ApplicationMeshTest_default_instance_;
class City;
class CityDefaultTypeInternal;
extern CityDefaultTypeInternal _City_default_instance_;
class Country;
class CountryDefaultTypeInternal;
extern CountryDefaultTypeInternal _Country_default_instance_;
class CreateTestRequest;
class CreateTestRequestDefaultTypeInternal;
extern CreateTestRequestDefaultTypeInternal _CreateTestRequest_default_instance_;
class CreateTestResponse;
class CreateTestResponseDefaultTypeInternal;
extern CreateTestResponseDefaultTypeInternal _CreateTestResponse_default_instance_;
class DNS;
class DNSDefaultTypeInternal;
extern DNSDefaultTypeInternal _DNS_default_instance_;
class DNSTaskDefinition;
class DNSTaskDefinitionDefaultTypeInternal;
extern DNSTaskDefinitionDefaultTypeInternal _DNSTaskDefinition_default_instance_;
class DeleteAgentRequest;
class DeleteAgentRequestDefaultTypeInternal;
extern DeleteAgentRequestDefaultTypeInternal _DeleteAgentRequest_default_instance_;
class DeleteAgentResponse;
class DeleteAgentResponseDefaultTypeInternal;
extern DeleteAgentResponseDefaultTypeInternal _DeleteAgentResponse_default_instance_;
class DeleteTestRequest;
class DeleteTestRequestDefaultTypeInternal;
extern DeleteTestRequestDefaultTypeInternal _DeleteTestRequest_default_instance_;
class DeleteTestResponse;
class DeleteTestResponseDefaultTypeInternal;
extern DeleteTestResponseDefaultTypeInternal _DeleteTestResponse_default_instance_;
class DnsGridTest;
class DnsGridTestDefaultTypeInternal;
extern DnsGridTestDefaultTypeInternal _DnsGridTest_default_instance_;
class DnsTest;
class DnsTestDefaultTypeInternal;
extern DnsTestDefaultTypeInternal _DnsTest_default_instance_;
class FlowTest;
class FlowTestDefaultTypeInternal;
extern FlowTestDefaultTypeInternal _FlowTest_default_instance_;
class Geo;
class GeoDefaultTypeInternal;
extern GeoDefaultTypeInternal _Geo_default_instance_;
class GetAgentRequest;
class GetAgentRequestDefaultTypeInternal;
extern GetAgentRequestDefaultTypeInternal _GetAgentRequest_default_instance_;
class GetAgentResponse;
class GetAgentResponseDefaultTypeInternal;
extern GetAgentResponseDefaultTypeInternal _GetAgentResponse_default_instance_;
class GetHealthForTestsRequest;
class GetHealthForTestsRequestDefaultTypeInternal;
extern GetHealthForTestsRequestDefaultTypeInternal _GetHealthForTestsRequest_default_instance_;
class GetHealthForTestsResponse;
class GetHealthForTestsResponseDefaultTypeInternal;
extern GetHealthForTestsResponseDefaultTypeInternal _GetHealthForTestsResponse_default_instance_;
class GetTestRequest;
class GetTestRequestDefaultTypeInternal;
extern GetTestRequestDefaultTypeInternal _GetTestRequest_default_instance_;
class GetTestResponse;
class GetTestResponseDefaultTypeInternal;
extern GetTestResponseDefaultTypeInternal _GetTestResponse_default_instance_;
class GetTraceForTestRequest;
class GetTraceForTestRequestDefaultTypeInternal;
extern GetTraceForTestRequestDefaultTypeInternal _GetTraceForTestRequest_default_instance_;
class GetTraceForTestResponse;
class GetTraceForTestResponseDefaultTypeInternal;
extern GetTraceForTestResponseDefaultTypeInternal _GetTraceForTestResponse_default_instance_;
class GridTest;
class GridTestDefaultTypeInternal;
extern GridTestDefaultTypeInternal _GridTest_default_instance_;
class HTTPConfig;
class HTTPConfigDefaultTypeInternal;
extern HTTPConfigDefaultTypeInternal _HTTPConfig_default_instance_;
class HTTPConfig_CssSelectorsEntry_DoNotUse;
class HTTPConfig_CssSelectorsEntry_DoNotUseDefaultTypeInternal;
extern HTTPConfig_CssSelectorsEntry_DoNotUseDefaultTypeInternal _HTTPConfig_CssSelectorsEntry_DoNotUse_default_instance_;
class HTTPConfig_HeadersEntry_DoNotUse;
class HTTPConfig_HeadersEntry_DoNotUseDefaultTypeInternal;
extern HTTPConfig_HeadersEntry_DoNotUseDefaultTypeInternal _HTTPConfig_HeadersEntry_DoNotUse_default_instance_;
class HTTPTaskDefinition;
class HTTPTaskDefinitionDefaultTypeInternal;
extern HTTPTaskDefinitionDefaultTypeInternal _HTTPTaskDefinition_default_instance_;
class Health;
class HealthDefaultTypeInternal;
extern HealthDefaultTypeInternal _Health_default_instance_;
class HealthMoment;
class HealthMomentDefaultTypeInternal;
extern HealthMomentDefaultTypeInternal _HealthMoment_default_instance_;
class HealthMoment_OtherHealthsEntry_DoNotUse;
class HealthMoment_OtherHealthsEntry_DoNotUseDefaultTypeInternal;
extern HealthMoment_OtherHealthsEntry_DoNotUseDefaultTypeInternal _HealthMoment_OtherHealthsEntry_DoNotUse_default_instance_;
class HealthSettings;
class HealthSettingsDefaultTypeInternal;
extern HealthSettingsDefaultTypeInternal _HealthSettings_default_instance_;
class HostnameTest;
class HostnameTestDefaultTypeInternal;
extern HostnameTestDefaultTypeInternal _HostnameTest_default_instance_;
class IDByIP;
class IDByIPDefaultTypeInternal;
extern IDByIPDefaultTypeInternal _IDByIP_default_instance_;
class IPInfo;
class IPInfoDefaultTypeInternal;
extern IPInfoDefaultTypeInternal _IPInfo_default_instance_;
class IpTest;
class IpTestDefaultTypeInternal;
extern IpTestDefaultTypeInternal _IpTest_default_instance_;
class KnockTaskDefinition;
class KnockTaskDefinitionDefaultTypeInternal;
extern KnockTaskDefinitionDefaultTypeInternal _KnockTaskDefinition_default_instance_;
class ListAgentsRequest;
class ListAgentsRequestDefaultTypeInternal;
extern ListAgentsRequestDefaultTypeInternal _ListAgentsRequest_default_instance_;
class ListAgentsResponse;
class ListAgentsResponseDefaultTypeInternal;
extern ListAgentsResponseDefaultTypeInternal _ListAgentsResponse_default_instance_;
class ListTestsRequest;
class ListTestsRequestDefaultTypeInternal;
extern ListTestsRequestDefaultTypeInternal _ListTestsRequest_default_instance_;
class ListTestsResponse;
class ListTestsResponseDefaultTypeInternal;
extern ListTestsResponseDefaultTypeInternal _ListTestsResponse_default_instance_;
class MeshColumn;
class MeshColumnDefaultTypeInternal;
extern MeshColumnDefaultTypeInternal _MeshColumn_default_instance_;
class MeshMetric;
class MeshMetricDefaultTypeInternal;
extern MeshMetricDefaultTypeInternal _MeshMetric_default_instance_;
class MeshMetrics;
class MeshMetricsDefaultTypeInternal;
extern MeshMetricsDefaultTypeInternal _MeshMetrics_default_instance_;
class MeshResponse;
class MeshResponseDefaultTypeInternal;
extern MeshResponseDefaultTypeInternal _MeshResponse_default_instance_;
class PatchAgentRequest;
class PatchAgentRequestDefaultTypeInternal;
extern PatchAgentRequestDefaultTypeInternal _PatchAgentRequest_default_instance_;
class PatchAgentResponse;
class PatchAgentResponseDefaultTypeInternal;
extern PatchAgentResponseDefaultTypeInternal _PatchAgentResponse_default_instance_;
class PatchTestRequest;
class PatchTestRequestDefaultTypeInternal;
extern PatchTestRequestDefaultTypeInternal _PatchTestRequest_default_instance_;
class PatchTestResponse;
class PatchTestResponseDefaultTypeInternal;
extern PatchTestResponseDefaultTypeInternal _PatchTestResponse_default_instance_;
class PingTaskDefinition;
class PingTaskDefinitionDefaultTypeInternal;
extern PingTaskDefinitionDefaultTypeInternal _PingTaskDefinition_default_instance_;
class Region;
class RegionDefaultTypeInternal;
extern RegionDefaultTypeInternal _Region_default_instance_;
class SetTestStatusRequest;
class SetTestStatusRequestDefaultTypeInternal;
extern SetTestStatusRequestDefaultTypeInternal _SetTestStatusRequest_default_instance_;
class SetTestStatusResponse;
class SetTestStatusResponseDefaultTypeInternal;
extern SetTestStatusResponseDefaultTypeInternal _SetTestStatusResponse_default_instance_;
class ShakeTaskDefinition;
class ShakeTaskDefinitionDefaultTypeInternal;
extern ShakeTaskDefinitionDefaultTypeInternal _ShakeTaskDefinition_default_instance_;
class SiteTest;
class SiteTestDefaultTypeInternal;
extern SiteTestDefaultTypeInternal _SiteTest_default_instance_;
class Stats;
class StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
class TagTest;
class TagTestDefaultTypeInternal;
extern TagTestDefaultTypeInternal _TagTest_default_instance_;
class Task;
class TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskHealth;
class TaskHealthDefaultTypeInternal;
extern TaskHealthDefaultTypeInternal _TaskHealth_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class TestHealth;
class TestHealthDefaultTypeInternal;
extern TestHealthDefaultTypeInternal _TestHealth_default_instance_;
class TestMonitoringSettings;
class TestMonitoringSettingsDefaultTypeInternal;
extern TestMonitoringSettingsDefaultTypeInternal _TestMonitoringSettings_default_instance_;
class TestPingSettings;
class TestPingSettingsDefaultTypeInternal;
extern TestPingSettingsDefaultTypeInternal _TestPingSettings_default_instance_;
class TestSettings;
class TestSettingsDefaultTypeInternal;
extern TestSettingsDefaultTypeInternal _TestSettings_default_instance_;
class TestTraceSettings;
class TestTraceSettingsDefaultTypeInternal;
extern TestTraceSettingsDefaultTypeInternal _TestTraceSettings_default_instance_;
class Trace;
class TraceDefaultTypeInternal;
extern TraceDefaultTypeInternal _Trace_default_instance_;
class TraceHop;
class TraceHopDefaultTypeInternal;
extern TraceHopDefaultTypeInternal _TraceHop_default_instance_;
class TraceProbe;
class TraceProbeDefaultTypeInternal;
extern TraceProbeDefaultTypeInternal _TraceProbe_default_instance_;
class TraceTaskDefinition;
class TraceTaskDefinitionDefaultTypeInternal;
extern TraceTaskDefinitionDefaultTypeInternal _TraceTaskDefinition_default_instance_;
class TracerouteInfo;
class TracerouteInfoDefaultTypeInternal;
extern TracerouteInfoDefaultTypeInternal _TracerouteInfo_default_instance_;
class TracerouteLookup;
class TracerouteLookupDefaultTypeInternal;
extern TracerouteLookupDefaultTypeInternal _TracerouteLookup_default_instance_;
class TracerouteResult;
class TracerouteResultDefaultTypeInternal;
extern TracerouteResultDefaultTypeInternal _TracerouteResult_default_instance_;
class UrlTest;
class UrlTestDefaultTypeInternal;
extern UrlTestDefaultTypeInternal _UrlTest_default_instance_;
class UserInfo;
class UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
}  // namespace v202101beta1
}  // namespace synthetics
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::synthetics::v202101beta1::ASN* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::ASN>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Agent* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Agent>(Arena*);
template<> ::kentik::synthetics::v202101beta1::AgentHealth* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::AgentHealth>(Arena*);
template<> ::kentik::synthetics::v202101beta1::AgentTaskConfig* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::AgentTaskConfig>(Arena*);
template<> ::kentik::synthetics::v202101beta1::AgentTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::AgentTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::ApplicationMeshTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::ApplicationMeshTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::City* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::City>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Country* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Country>(Arena*);
template<> ::kentik::synthetics::v202101beta1::CreateTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::CreateTestRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::CreateTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::CreateTestResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::DNS* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::DNS>(Arena*);
template<> ::kentik::synthetics::v202101beta1::DNSTaskDefinition* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::DNSTaskDefinition>(Arena*);
template<> ::kentik::synthetics::v202101beta1::DeleteAgentRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::DeleteAgentRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::DeleteAgentResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::DeleteAgentResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::DeleteTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::DeleteTestRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::DeleteTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::DeleteTestResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::DnsGridTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::DnsGridTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::DnsTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::DnsTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::FlowTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::FlowTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Geo* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Geo>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GetAgentRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GetAgentRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GetAgentResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GetAgentResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GetHealthForTestsRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GetHealthForTestsRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GetHealthForTestsResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GetHealthForTestsResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GetTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GetTestRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GetTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GetTestResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GetTraceForTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GetTraceForTestRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GetTraceForTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GetTraceForTestResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::GridTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::GridTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::HTTPConfig* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::HTTPConfig>(Arena*);
template<> ::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::HTTPTaskDefinition>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Health* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Health>(Arena*);
template<> ::kentik::synthetics::v202101beta1::HealthMoment* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::HealthMoment>(Arena*);
template<> ::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::HealthSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::HealthSettings>(Arena*);
template<> ::kentik::synthetics::v202101beta1::HostnameTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::HostnameTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::IDByIP* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::IDByIP>(Arena*);
template<> ::kentik::synthetics::v202101beta1::IPInfo* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::IPInfo>(Arena*);
template<> ::kentik::synthetics::v202101beta1::IpTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::IpTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::KnockTaskDefinition* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::KnockTaskDefinition>(Arena*);
template<> ::kentik::synthetics::v202101beta1::ListAgentsRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::ListAgentsRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::ListAgentsResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::ListAgentsResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::ListTestsRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::ListTestsRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::ListTestsResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::ListTestsResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::MeshColumn* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::MeshColumn>(Arena*);
template<> ::kentik::synthetics::v202101beta1::MeshMetric* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::MeshMetric>(Arena*);
template<> ::kentik::synthetics::v202101beta1::MeshMetrics* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::MeshMetrics>(Arena*);
template<> ::kentik::synthetics::v202101beta1::MeshResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::MeshResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::PatchAgentRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::PatchAgentRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::PatchAgentResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::PatchAgentResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::PatchTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::PatchTestRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::PatchTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::PatchTestResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::PingTaskDefinition* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::PingTaskDefinition>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Region* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Region>(Arena*);
template<> ::kentik::synthetics::v202101beta1::SetTestStatusRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::SetTestStatusRequest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::SetTestStatusResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::SetTestStatusResponse>(Arena*);
template<> ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::ShakeTaskDefinition>(Arena*);
template<> ::kentik::synthetics::v202101beta1::SiteTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::SiteTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Stats* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Stats>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TagTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TagTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Task* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Task>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TaskHealth* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TaskHealth>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Test* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Test>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TestHealth* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestHealth>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TestMonitoringSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestMonitoringSettings>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TestPingSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestPingSettings>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TestSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestSettings>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TestTraceSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestTraceSettings>(Arena*);
template<> ::kentik::synthetics::v202101beta1::Trace* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::Trace>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TraceHop* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TraceHop>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TraceProbe* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TraceProbe>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TraceTaskDefinition* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TraceTaskDefinition>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TracerouteInfo* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TracerouteInfo>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TracerouteLookup* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TracerouteLookup>(Arena*);
template<> ::kentik::synthetics::v202101beta1::TracerouteResult* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::TracerouteResult>(Arena*);
template<> ::kentik::synthetics::v202101beta1::UrlTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::UrlTest>(Arena*);
template<> ::kentik::synthetics::v202101beta1::UserInfo* Arena::CreateMaybeMessage<::kentik::synthetics::v202101beta1::UserInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace synthetics {
namespace v202101beta1 {

enum ImplementType : int {
  IMPLEMENT_TYPE_UNSPECIFIED = 0,
  IMPLEMENT_TYPE_RUST = 1,
  IMPLEMENT_TYPE_NODE = 2,
  ImplementType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImplementType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImplementType_IsValid(int value);
constexpr ImplementType ImplementType_MIN = IMPLEMENT_TYPE_UNSPECIFIED;
constexpr ImplementType ImplementType_MAX = IMPLEMENT_TYPE_NODE;
constexpr int ImplementType_ARRAYSIZE = ImplementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImplementType_descriptor();
template<typename T>
inline const std::string& ImplementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImplementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImplementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImplementType_descriptor(), enum_t_value);
}
inline bool ImplementType_Parse(
    const std::string& name, ImplementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImplementType>(
    ImplementType_descriptor(), name, value);
}
enum IPFamily : int {
  IP_FAMILY_UNSPECIFIED = 0,
  IP_FAMILY_V4 = 1,
  IP_FAMILY_V6 = 2,
  IP_FAMILY_DUAL = 3,
  IPFamily_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IPFamily_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IPFamily_IsValid(int value);
constexpr IPFamily IPFamily_MIN = IP_FAMILY_UNSPECIFIED;
constexpr IPFamily IPFamily_MAX = IP_FAMILY_DUAL;
constexpr int IPFamily_ARRAYSIZE = IPFamily_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IPFamily_descriptor();
template<typename T>
inline const std::string& IPFamily_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IPFamily>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IPFamily_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IPFamily_descriptor(), enum_t_value);
}
inline bool IPFamily_Parse(
    const std::string& name, IPFamily* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IPFamily>(
    IPFamily_descriptor(), name, value);
}
enum TestStatus : int {
  TEST_STATUS_UNSPECIFIED = 0,
  TEST_STATUS_ACTIVE = 1,
  TEST_STATUS_PAUSED = 2,
  TEST_STATUS_DELETED = 3,
  TestStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TestStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TestStatus_IsValid(int value);
constexpr TestStatus TestStatus_MIN = TEST_STATUS_UNSPECIFIED;
constexpr TestStatus TestStatus_MAX = TEST_STATUS_DELETED;
constexpr int TestStatus_ARRAYSIZE = TestStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestStatus_descriptor();
template<typename T>
inline const std::string& TestStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestStatus_descriptor(), enum_t_value);
}
inline bool TestStatus_Parse(
    const std::string& name, TestStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestStatus>(
    TestStatus_descriptor(), name, value);
}
enum AgentStatus : int {
  AGENT_STATUS_UNSPECIFIED = 0,
  AGENT_STATUS_OK = 1,
  AGENT_STATUS_WAIT = 2,
  AGENT_STATUS_DELETED = 3,
  AgentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgentStatus_IsValid(int value);
constexpr AgentStatus AgentStatus_MIN = AGENT_STATUS_UNSPECIFIED;
constexpr AgentStatus AgentStatus_MAX = AGENT_STATUS_DELETED;
constexpr int AgentStatus_ARRAYSIZE = AgentStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentStatus_descriptor();
template<typename T>
inline const std::string& AgentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentStatus_descriptor(), enum_t_value);
}
inline bool AgentStatus_Parse(
    const std::string& name, AgentStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentStatus>(
    AgentStatus_descriptor(), name, value);
}
enum TaskState : int {
  TASK_STATE_UNSPECIFIED = 0,
  TASK_STATE_CREATED = 1,
  TASK_STATE_UPDATED = 2,
  TASK_STATE_DELETED = 3,
  TaskState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskState_IsValid(int value);
constexpr TaskState TaskState_MIN = TASK_STATE_UNSPECIFIED;
constexpr TaskState TaskState_MAX = TASK_STATE_DELETED;
constexpr int TaskState_ARRAYSIZE = TaskState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskState_descriptor();
template<typename T>
inline const std::string& TaskState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskState_descriptor(), enum_t_value);
}
inline bool TaskState_Parse(
    const std::string& name, TaskState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskState>(
    TaskState_descriptor(), name, value);
}
enum DNSRecord : int {
  DNS_RECORD_UNSPECIFIED = 0,
  DNS_RECORD_A = 1,
  DNS_RECORD_AAAA = 2,
  DNS_RECORD_CNAME = 3,
  DNS_RECORD_DNAME = 4,
  DNS_RECORD_NS = 5,
  DNS_RECORD_MX = 6,
  DNS_RECORD_PTR = 7,
  DNS_RECORD_SOA = 8,
  DNSRecord_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DNSRecord_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DNSRecord_IsValid(int value);
constexpr DNSRecord DNSRecord_MIN = DNS_RECORD_UNSPECIFIED;
constexpr DNSRecord DNSRecord_MAX = DNS_RECORD_SOA;
constexpr int DNSRecord_ARRAYSIZE = DNSRecord_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DNSRecord_descriptor();
template<typename T>
inline const std::string& DNSRecord_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DNSRecord>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DNSRecord_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DNSRecord_descriptor(), enum_t_value);
}
inline bool DNSRecord_Parse(
    const std::string& name, DNSRecord* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DNSRecord>(
    DNSRecord_descriptor(), name, value);
}
// ===================================================================

class Health PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Health) */ {
 public:
  inline Health() : Health(nullptr) {};
  virtual ~Health();

  Health(const Health& from);
  Health(Health&& from) noexcept
    : Health() {
    *this = ::std::move(from);
  }

  inline Health& operator=(const Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline Health& operator=(Health&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Health& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Health* internal_default_instance() {
    return reinterpret_cast<const Health*>(
               &_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Health& a, Health& b) {
    a.Swap(&b);
  }
  inline void Swap(Health* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Health* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Health* New() const final {
    return CreateMaybeMessage<Health>(nullptr);
  }

  Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Health>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Health& from);
  void MergeFrom(const Health& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Health* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Health";
  }
  protected:
  explicit Health(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string health = 1[json_name = "health"];
  void clear_health();
  const std::string& health() const;
  void set_health(const std::string& value);
  void set_health(std::string&& value);
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  std::string* mutable_health();
  std::string* release_health();
  void set_allocated_health(std::string* health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health(
      std::string* health);
  private:
  const std::string& _internal_health() const;
  void _internal_set_health(const std::string& value);
  std::string* _internal_mutable_health();
  public:

  // .google.protobuf.Timestamp time = 2[json_name = "time"];
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Health)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class AgentTaskConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.AgentTaskConfig) */ {
 public:
  inline AgentTaskConfig() : AgentTaskConfig(nullptr) {};
  virtual ~AgentTaskConfig();

  AgentTaskConfig(const AgentTaskConfig& from);
  AgentTaskConfig(AgentTaskConfig&& from) noexcept
    : AgentTaskConfig() {
    *this = ::std::move(from);
  }

  inline AgentTaskConfig& operator=(const AgentTaskConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentTaskConfig& operator=(AgentTaskConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentTaskConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentTaskConfig* internal_default_instance() {
    return reinterpret_cast<const AgentTaskConfig*>(
               &_AgentTaskConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AgentTaskConfig& a, AgentTaskConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentTaskConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentTaskConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentTaskConfig* New() const final {
    return CreateMaybeMessage<AgentTaskConfig>(nullptr);
  }

  AgentTaskConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentTaskConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentTaskConfig& from);
  void MergeFrom(const AgentTaskConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentTaskConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.AgentTaskConfig";
  }
  protected:
  explicit AgentTaskConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string targets = 2[json_name = "targets"];
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  const std::string& targets(int index) const;
  std::string* mutable_targets(int index);
  void set_targets(int index, const std::string& value);
  void set_targets(int index, std::string&& value);
  void set_targets(int index, const char* value);
  void set_targets(int index, const char* value, size_t size);
  std::string* add_targets();
  void add_targets(const std::string& value);
  void add_targets(std::string&& value);
  void add_targets(const char* value);
  void add_targets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targets();
  private:
  const std::string& _internal_targets(int index) const;
  std::string* _internal_add_targets();
  public:

  // uint64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.AgentTaskConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targets_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestHealth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TestHealth) */ {
 public:
  inline TestHealth() : TestHealth(nullptr) {};
  virtual ~TestHealth();

  TestHealth(const TestHealth& from);
  TestHealth(TestHealth&& from) noexcept
    : TestHealth() {
    *this = ::std::move(from);
  }

  inline TestHealth& operator=(const TestHealth& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestHealth& operator=(TestHealth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestHealth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestHealth* internal_default_instance() {
    return reinterpret_cast<const TestHealth*>(
               &_TestHealth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestHealth& a, TestHealth& b) {
    a.Swap(&b);
  }
  inline void Swap(TestHealth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestHealth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestHealth* New() const final {
    return CreateMaybeMessage<TestHealth>(nullptr);
  }

  TestHealth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestHealth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestHealth& from);
  void MergeFrom(const TestHealth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestHealth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TestHealth";
  }
  protected:
  explicit TestHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 2,
    kHealthTsFieldNumber = 4,
    kAgentTaskConfigFieldNumber = 5,
    kMeshFieldNumber = 6,
    kTestIdFieldNumber = 1,
    kOverallHealthFieldNumber = 3,
  };
  // repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2[json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::kentik::synthetics::v202101beta1::TaskHealth* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TaskHealth >*
      mutable_tasks();
  private:
  const ::kentik::synthetics::v202101beta1::TaskHealth& _internal_tasks(int index) const;
  ::kentik::synthetics::v202101beta1::TaskHealth* _internal_add_tasks();
  public:
  const ::kentik::synthetics::v202101beta1::TaskHealth& tasks(int index) const;
  ::kentik::synthetics::v202101beta1::TaskHealth* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TaskHealth >&
      tasks() const;

  // repeated .kentik.synthetics.v202101beta1.Health health_ts = 4[json_name = "healthTs"];
  int health_ts_size() const;
  private:
  int _internal_health_ts_size() const;
  public:
  void clear_health_ts();
  ::kentik::synthetics::v202101beta1::Health* mutable_health_ts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Health >*
      mutable_health_ts();
  private:
  const ::kentik::synthetics::v202101beta1::Health& _internal_health_ts(int index) const;
  ::kentik::synthetics::v202101beta1::Health* _internal_add_health_ts();
  public:
  const ::kentik::synthetics::v202101beta1::Health& health_ts(int index) const;
  ::kentik::synthetics::v202101beta1::Health* add_health_ts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Health >&
      health_ts() const;

  // repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5[json_name = "agentTaskConfig"];
  int agent_task_config_size() const;
  private:
  int _internal_agent_task_config_size() const;
  public:
  void clear_agent_task_config();
  ::kentik::synthetics::v202101beta1::AgentTaskConfig* mutable_agent_task_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentTaskConfig >*
      mutable_agent_task_config();
  private:
  const ::kentik::synthetics::v202101beta1::AgentTaskConfig& _internal_agent_task_config(int index) const;
  ::kentik::synthetics::v202101beta1::AgentTaskConfig* _internal_add_agent_task_config();
  public:
  const ::kentik::synthetics::v202101beta1::AgentTaskConfig& agent_task_config(int index) const;
  ::kentik::synthetics::v202101beta1::AgentTaskConfig* add_agent_task_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentTaskConfig >&
      agent_task_config() const;

  // repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6[json_name = "mesh"];
  int mesh_size() const;
  private:
  int _internal_mesh_size() const;
  public:
  void clear_mesh();
  ::kentik::synthetics::v202101beta1::MeshResponse* mutable_mesh(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshResponse >*
      mutable_mesh();
  private:
  const ::kentik::synthetics::v202101beta1::MeshResponse& _internal_mesh(int index) const;
  ::kentik::synthetics::v202101beta1::MeshResponse* _internal_add_mesh();
  public:
  const ::kentik::synthetics::v202101beta1::MeshResponse& mesh(int index) const;
  ::kentik::synthetics::v202101beta1::MeshResponse* add_mesh();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshResponse >&
      mesh() const;

  // string test_id = 1[json_name = "testId"];
  void clear_test_id();
  const std::string& test_id() const;
  void set_test_id(const std::string& value);
  void set_test_id(std::string&& value);
  void set_test_id(const char* value);
  void set_test_id(const char* value, size_t size);
  std::string* mutable_test_id();
  std::string* release_test_id();
  void set_allocated_test_id(std::string* test_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_test_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_test_id(
      std::string* test_id);
  private:
  const std::string& _internal_test_id() const;
  void _internal_set_test_id(const std::string& value);
  std::string* _internal_mutable_test_id();
  public:

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  bool has_overall_health() const;
  private:
  bool _internal_has_overall_health() const;
  public:
  void clear_overall_health();
  const ::kentik::synthetics::v202101beta1::Health& overall_health() const;
  ::kentik::synthetics::v202101beta1::Health* release_overall_health();
  ::kentik::synthetics::v202101beta1::Health* mutable_overall_health();
  void set_allocated_overall_health(::kentik::synthetics::v202101beta1::Health* overall_health);
  private:
  const ::kentik::synthetics::v202101beta1::Health& _internal_overall_health() const;
  ::kentik::synthetics::v202101beta1::Health* _internal_mutable_overall_health();
  public:
  void unsafe_arena_set_allocated_overall_health(
      ::kentik::synthetics::v202101beta1::Health* overall_health);
  ::kentik::synthetics::v202101beta1::Health* unsafe_arena_release_overall_health();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TestHealth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TaskHealth > tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Health > health_ts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentTaskConfig > agent_task_config_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshResponse > mesh_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_id_;
  ::kentik::synthetics::v202101beta1::Health* overall_health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TaskHealth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TaskHealth) */ {
 public:
  inline TaskHealth() : TaskHealth(nullptr) {};
  virtual ~TaskHealth();

  TaskHealth(const TaskHealth& from);
  TaskHealth(TaskHealth&& from) noexcept
    : TaskHealth() {
    *this = ::std::move(from);
  }

  inline TaskHealth& operator=(const TaskHealth& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskHealth& operator=(TaskHealth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskHealth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskHealth* internal_default_instance() {
    return reinterpret_cast<const TaskHealth*>(
               &_TaskHealth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TaskHealth& a, TaskHealth& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskHealth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskHealth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskHealth* New() const final {
    return CreateMaybeMessage<TaskHealth>(nullptr);
  }

  TaskHealth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskHealth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskHealth& from);
  void MergeFrom(const TaskHealth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskHealth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TaskHealth";
  }
  protected:
  explicit TaskHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 2,
    kTaskFieldNumber = 1,
    kOverallHealthFieldNumber = 3,
    kTargetAgentFieldNumber = 4,
  };
  // repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2[json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::kentik::synthetics::v202101beta1::AgentHealth* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentHealth >*
      mutable_agents();
  private:
  const ::kentik::synthetics::v202101beta1::AgentHealth& _internal_agents(int index) const;
  ::kentik::synthetics::v202101beta1::AgentHealth* _internal_add_agents();
  public:
  const ::kentik::synthetics::v202101beta1::AgentHealth& agents(int index) const;
  ::kentik::synthetics::v202101beta1::AgentHealth* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentHealth >&
      agents() const;

  // .kentik.synthetics.v202101beta1.Task task = 1[json_name = "task"];
  bool has_task() const;
  private:
  bool _internal_has_task() const;
  public:
  void clear_task();
  const ::kentik::synthetics::v202101beta1::Task& task() const;
  ::kentik::synthetics::v202101beta1::Task* release_task();
  ::kentik::synthetics::v202101beta1::Task* mutable_task();
  void set_allocated_task(::kentik::synthetics::v202101beta1::Task* task);
  private:
  const ::kentik::synthetics::v202101beta1::Task& _internal_task() const;
  ::kentik::synthetics::v202101beta1::Task* _internal_mutable_task();
  public:
  void unsafe_arena_set_allocated_task(
      ::kentik::synthetics::v202101beta1::Task* task);
  ::kentik::synthetics::v202101beta1::Task* unsafe_arena_release_task();

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  bool has_overall_health() const;
  private:
  bool _internal_has_overall_health() const;
  public:
  void clear_overall_health();
  const ::kentik::synthetics::v202101beta1::Health& overall_health() const;
  ::kentik::synthetics::v202101beta1::Health* release_overall_health();
  ::kentik::synthetics::v202101beta1::Health* mutable_overall_health();
  void set_allocated_overall_health(::kentik::synthetics::v202101beta1::Health* overall_health);
  private:
  const ::kentik::synthetics::v202101beta1::Health& _internal_overall_health() const;
  ::kentik::synthetics::v202101beta1::Health* _internal_mutable_overall_health();
  public:
  void unsafe_arena_set_allocated_overall_health(
      ::kentik::synthetics::v202101beta1::Health* overall_health);
  ::kentik::synthetics::v202101beta1::Health* unsafe_arena_release_overall_health();

  // .kentik.synthetics.v202101beta1.Agent target_agent = 4[json_name = "targetAgent"];
  bool has_target_agent() const;
  private:
  bool _internal_has_target_agent() const;
  public:
  void clear_target_agent();
  const ::kentik::synthetics::v202101beta1::Agent& target_agent() const;
  ::kentik::synthetics::v202101beta1::Agent* release_target_agent();
  ::kentik::synthetics::v202101beta1::Agent* mutable_target_agent();
  void set_allocated_target_agent(::kentik::synthetics::v202101beta1::Agent* target_agent);
  private:
  const ::kentik::synthetics::v202101beta1::Agent& _internal_target_agent() const;
  ::kentik::synthetics::v202101beta1::Agent* _internal_mutable_target_agent();
  public:
  void unsafe_arena_set_allocated_target_agent(
      ::kentik::synthetics::v202101beta1::Agent* target_agent);
  ::kentik::synthetics::v202101beta1::Agent* unsafe_arena_release_target_agent();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TaskHealth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentHealth > agents_;
  ::kentik::synthetics::v202101beta1::Task* task_;
  ::kentik::synthetics::v202101beta1::Health* overall_health_;
  ::kentik::synthetics::v202101beta1::Agent* target_agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class AgentHealth PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.AgentHealth) */ {
 public:
  inline AgentHealth() : AgentHealth(nullptr) {};
  virtual ~AgentHealth();

  AgentHealth(const AgentHealth& from);
  AgentHealth(AgentHealth&& from) noexcept
    : AgentHealth() {
    *this = ::std::move(from);
  }

  inline AgentHealth& operator=(const AgentHealth& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentHealth& operator=(AgentHealth&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentHealth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentHealth* internal_default_instance() {
    return reinterpret_cast<const AgentHealth*>(
               &_AgentHealth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AgentHealth& a, AgentHealth& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentHealth* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentHealth* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentHealth* New() const final {
    return CreateMaybeMessage<AgentHealth>(nullptr);
  }

  AgentHealth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentHealth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentHealth& from);
  void MergeFrom(const AgentHealth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentHealth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.AgentHealth";
  }
  protected:
  explicit AgentHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 2,
    kAgentFieldNumber = 1,
    kOverallHealthFieldNumber = 3,
  };
  // repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2[json_name = "health"];
  int health_size() const;
  private:
  int _internal_health_size() const;
  public:
  void clear_health();
  ::kentik::synthetics::v202101beta1::HealthMoment* mutable_health(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::HealthMoment >*
      mutable_health();
  private:
  const ::kentik::synthetics::v202101beta1::HealthMoment& _internal_health(int index) const;
  ::kentik::synthetics::v202101beta1::HealthMoment* _internal_add_health();
  public:
  const ::kentik::synthetics::v202101beta1::HealthMoment& health(int index) const;
  ::kentik::synthetics::v202101beta1::HealthMoment* add_health();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::HealthMoment >&
      health() const;

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202101beta1::Agent& agent() const;
  ::kentik::synthetics::v202101beta1::Agent* release_agent();
  ::kentik::synthetics::v202101beta1::Agent* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202101beta1::Agent* agent);
  private:
  const ::kentik::synthetics::v202101beta1::Agent& _internal_agent() const;
  ::kentik::synthetics::v202101beta1::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202101beta1::Agent* agent);
  ::kentik::synthetics::v202101beta1::Agent* unsafe_arena_release_agent();

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  bool has_overall_health() const;
  private:
  bool _internal_has_overall_health() const;
  public:
  void clear_overall_health();
  const ::kentik::synthetics::v202101beta1::Health& overall_health() const;
  ::kentik::synthetics::v202101beta1::Health* release_overall_health();
  ::kentik::synthetics::v202101beta1::Health* mutable_overall_health();
  void set_allocated_overall_health(::kentik::synthetics::v202101beta1::Health* overall_health);
  private:
  const ::kentik::synthetics::v202101beta1::Health& _internal_overall_health() const;
  ::kentik::synthetics::v202101beta1::Health* _internal_mutable_overall_health();
  public:
  void unsafe_arena_set_allocated_overall_health(
      ::kentik::synthetics::v202101beta1::Health* overall_health);
  ::kentik::synthetics::v202101beta1::Health* unsafe_arena_release_overall_health();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.AgentHealth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::HealthMoment > health_;
  ::kentik::synthetics::v202101beta1::Agent* agent_;
  ::kentik::synthetics::v202101beta1::Health* overall_health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HealthMoment_OtherHealthsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HealthMoment_OtherHealthsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HealthMoment_OtherHealthsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HealthMoment_OtherHealthsEntry_DoNotUse();
  HealthMoment_OtherHealthsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HealthMoment_OtherHealthsEntry_DoNotUse& other);
  static const HealthMoment_OtherHealthsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HealthMoment_OtherHealthsEntry_DoNotUse*>(&_HealthMoment_OtherHealthsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202101beta1.HealthMoment.OtherHealthsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202101beta1.HealthMoment.OtherHealthsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[5];
  }

  public:
};

// -------------------------------------------------------------------

class HealthMoment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.HealthMoment) */ {
 public:
  inline HealthMoment() : HealthMoment(nullptr) {};
  virtual ~HealthMoment();

  HealthMoment(const HealthMoment& from);
  HealthMoment(HealthMoment&& from) noexcept
    : HealthMoment() {
    *this = ::std::move(from);
  }

  inline HealthMoment& operator=(const HealthMoment& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthMoment& operator=(HealthMoment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthMoment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthMoment* internal_default_instance() {
    return reinterpret_cast<const HealthMoment*>(
               &_HealthMoment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HealthMoment& a, HealthMoment& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthMoment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthMoment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthMoment* New() const final {
    return CreateMaybeMessage<HealthMoment>(nullptr);
  }

  HealthMoment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthMoment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthMoment& from);
  void MergeFrom(const HealthMoment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthMoment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.HealthMoment";
  }
  protected:
  explicit HealthMoment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kOtherHealthsFieldNumber = 21,
    kSrcIpFieldNumber = 2,
    kDstIpFieldNumber = 3,
    kLatencyHealthFieldNumber = 10,
    kPacketLossHealthFieldNumber = 11,
    kJitterHealthFieldNumber = 16,
    kDataFieldNumber = 17,
    kTaskTypeFieldNumber = 20,
    kTimeFieldNumber = 1,
    kOverallHealthFieldNumber = 12,
    kPacketLossFieldNumber = 4,
    kAvgLatencyFieldNumber = 5,
    kAvgWeightedLatencyFieldNumber = 6,
    kRollingAvgLatencyFieldNumber = 7,
    kRollingStddevLatencyFieldNumber = 8,
    kRollingAvgWeightedLatencyFieldNumber = 9,
    kAvgJitterFieldNumber = 13,
    kRollingAvgJitterFieldNumber = 14,
    kRollingStdJitterFieldNumber = 15,
    kSizeFieldNumber = 18,
    kStatusFieldNumber = 19,
  };
  // map<string, string> other_healths = 21[json_name = "otherHealths"];
  int other_healths_size() const;
  private:
  int _internal_other_healths_size() const;
  public:
  void clear_other_healths();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_other_healths() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_other_healths();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      other_healths() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_other_healths();

  // string src_ip = 2[json_name = "srcIp"];
  void clear_src_ip();
  const std::string& src_ip() const;
  void set_src_ip(const std::string& value);
  void set_src_ip(std::string&& value);
  void set_src_ip(const char* value);
  void set_src_ip(const char* value, size_t size);
  std::string* mutable_src_ip();
  std::string* release_src_ip();
  void set_allocated_src_ip(std::string* src_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_src_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_src_ip(
      std::string* src_ip);
  private:
  const std::string& _internal_src_ip() const;
  void _internal_set_src_ip(const std::string& value);
  std::string* _internal_mutable_src_ip();
  public:

  // string dst_ip = 3[json_name = "dstIp"];
  void clear_dst_ip();
  const std::string& dst_ip() const;
  void set_dst_ip(const std::string& value);
  void set_dst_ip(std::string&& value);
  void set_dst_ip(const char* value);
  void set_dst_ip(const char* value, size_t size);
  std::string* mutable_dst_ip();
  std::string* release_dst_ip();
  void set_allocated_dst_ip(std::string* dst_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dst_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dst_ip(
      std::string* dst_ip);
  private:
  const std::string& _internal_dst_ip() const;
  void _internal_set_dst_ip(const std::string& value);
  std::string* _internal_mutable_dst_ip();
  public:

  // string latency_health = 10[json_name = "latencyHealth"];
  void clear_latency_health();
  const std::string& latency_health() const;
  void set_latency_health(const std::string& value);
  void set_latency_health(std::string&& value);
  void set_latency_health(const char* value);
  void set_latency_health(const char* value, size_t size);
  std::string* mutable_latency_health();
  std::string* release_latency_health();
  void set_allocated_latency_health(std::string* latency_health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_latency_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_latency_health(
      std::string* latency_health);
  private:
  const std::string& _internal_latency_health() const;
  void _internal_set_latency_health(const std::string& value);
  std::string* _internal_mutable_latency_health();
  public:

  // string packet_loss_health = 11[json_name = "packetLossHealth"];
  void clear_packet_loss_health();
  const std::string& packet_loss_health() const;
  void set_packet_loss_health(const std::string& value);
  void set_packet_loss_health(std::string&& value);
  void set_packet_loss_health(const char* value);
  void set_packet_loss_health(const char* value, size_t size);
  std::string* mutable_packet_loss_health();
  std::string* release_packet_loss_health();
  void set_allocated_packet_loss_health(std::string* packet_loss_health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_packet_loss_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_packet_loss_health(
      std::string* packet_loss_health);
  private:
  const std::string& _internal_packet_loss_health() const;
  void _internal_set_packet_loss_health(const std::string& value);
  std::string* _internal_mutable_packet_loss_health();
  public:

  // string jitter_health = 16[json_name = "jitterHealth"];
  void clear_jitter_health();
  const std::string& jitter_health() const;
  void set_jitter_health(const std::string& value);
  void set_jitter_health(std::string&& value);
  void set_jitter_health(const char* value);
  void set_jitter_health(const char* value, size_t size);
  std::string* mutable_jitter_health();
  std::string* release_jitter_health();
  void set_allocated_jitter_health(std::string* jitter_health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_jitter_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_jitter_health(
      std::string* jitter_health);
  private:
  const std::string& _internal_jitter_health() const;
  void _internal_set_jitter_health(const std::string& value);
  std::string* _internal_mutable_jitter_health();
  public:

  // string data = 17[json_name = "data"];
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // string task_type = 20[json_name = "taskType"];
  void clear_task_type();
  const std::string& task_type() const;
  void set_task_type(const std::string& value);
  void set_task_type(std::string&& value);
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  std::string* mutable_task_type();
  std::string* release_task_type();
  void set_allocated_task_type(std::string* task_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_task_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_task_type(
      std::string* task_type);
  private:
  const std::string& _internal_task_type() const;
  void _internal_set_task_type(const std::string& value);
  std::string* _internal_mutable_task_type();
  public:

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .kentik.synthetics.v202101beta1.Health overall_health = 12[json_name = "overallHealth"];
  bool has_overall_health() const;
  private:
  bool _internal_has_overall_health() const;
  public:
  void clear_overall_health();
  const ::kentik::synthetics::v202101beta1::Health& overall_health() const;
  ::kentik::synthetics::v202101beta1::Health* release_overall_health();
  ::kentik::synthetics::v202101beta1::Health* mutable_overall_health();
  void set_allocated_overall_health(::kentik::synthetics::v202101beta1::Health* overall_health);
  private:
  const ::kentik::synthetics::v202101beta1::Health& _internal_overall_health() const;
  ::kentik::synthetics::v202101beta1::Health* _internal_mutable_overall_health();
  public:
  void unsafe_arena_set_allocated_overall_health(
      ::kentik::synthetics::v202101beta1::Health* overall_health);
  ::kentik::synthetics::v202101beta1::Health* unsafe_arena_release_overall_health();

  // double packet_loss = 4[json_name = "packetLoss"];
  void clear_packet_loss();
  double packet_loss() const;
  void set_packet_loss(double value);
  private:
  double _internal_packet_loss() const;
  void _internal_set_packet_loss(double value);
  public:

  // uint32 avg_latency = 5[json_name = "avgLatency"];
  void clear_avg_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_latency() const;
  void set_avg_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_latency() const;
  void _internal_set_avg_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 avg_weighted_latency = 6[json_name = "avgWeightedLatency"];
  void clear_avg_weighted_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_weighted_latency() const;
  void set_avg_weighted_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_weighted_latency() const;
  void _internal_set_avg_weighted_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rolling_avg_latency = 7[json_name = "rollingAvgLatency"];
  void clear_rolling_avg_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_avg_latency() const;
  void set_rolling_avg_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rolling_avg_latency() const;
  void _internal_set_rolling_avg_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rolling_stddev_latency = 8[json_name = "rollingStddevLatency"];
  void clear_rolling_stddev_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_stddev_latency() const;
  void set_rolling_stddev_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rolling_stddev_latency() const;
  void _internal_set_rolling_stddev_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rolling_avg_weighted_latency = 9[json_name = "rollingAvgWeightedLatency"];
  void clear_rolling_avg_weighted_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_avg_weighted_latency() const;
  void set_rolling_avg_weighted_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rolling_avg_weighted_latency() const;
  void _internal_set_rolling_avg_weighted_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 avg_jitter = 13[json_name = "avgJitter"];
  void clear_avg_jitter();
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_jitter() const;
  void set_avg_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_avg_jitter() const;
  void _internal_set_avg_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rolling_avg_jitter = 14[json_name = "rollingAvgJitter"];
  void clear_rolling_avg_jitter();
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_avg_jitter() const;
  void set_rolling_avg_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rolling_avg_jitter() const;
  void _internal_set_rolling_avg_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rolling_std_jitter = 15[json_name = "rollingStdJitter"];
  void clear_rolling_std_jitter();
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_std_jitter() const;
  void set_rolling_std_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rolling_std_jitter() const;
  void _internal_set_rolling_std_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 18[json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 status = 19[json_name = "status"];
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.HealthMoment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HealthMoment_OtherHealthsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > other_healths_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr latency_health_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr packet_loss_health_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jitter_health_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_type_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::kentik::synthetics::v202101beta1::Health* overall_health_;
  double packet_loss_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_latency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_weighted_latency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_avg_latency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_stddev_latency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_avg_weighted_latency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 avg_jitter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_avg_jitter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_std_jitter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Agent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Agent) */ {
 public:
  inline Agent() : Agent(nullptr) {};
  virtual ~Agent();

  Agent(const Agent& from);
  Agent(Agent&& from) noexcept
    : Agent() {
    *this = ::std::move(from);
  }

  inline Agent& operator=(const Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Agent& operator=(Agent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Agent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Agent* internal_default_instance() {
    return reinterpret_cast<const Agent*>(
               &_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Agent& a, Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(Agent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Agent* New() const final {
    return CreateMaybeMessage<Agent>(nullptr);
  }

  Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Agent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Agent& from);
  void MergeFrom(const Agent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Agent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Agent";
  }
  protected:
  explicit Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestIdsFieldNumber = 19,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAliasFieldNumber = 4,
    kTypeFieldNumber = 5,
    kOsFieldNumber = 6,
    kIpFieldNumber = 7,
    kSiteIdFieldNumber = 13,
    kVersionFieldNumber = 14,
    kChallengeFieldNumber = 15,
    kCityFieldNumber = 16,
    kRegionFieldNumber = 17,
    kCountryFieldNumber = 18,
    kLocalIpFieldNumber = 20,
    kCloudVpcFieldNumber = 21,
    kLastAuthedFieldNumber = 10,
    kStatusFieldNumber = 3,
    kFamilyFieldNumber = 11,
    kLatFieldNumber = 8,
    kLongFieldNumber = 9,
    kAsnFieldNumber = 12,
    kAgentImplFieldNumber = 22,
  };
  // repeated string test_ids = 19[json_name = "testIds"];
  int test_ids_size() const;
  private:
  int _internal_test_ids_size() const;
  public:
  void clear_test_ids();
  const std::string& test_ids(int index) const;
  std::string* mutable_test_ids(int index);
  void set_test_ids(int index, const std::string& value);
  void set_test_ids(int index, std::string&& value);
  void set_test_ids(int index, const char* value);
  void set_test_ids(int index, const char* value, size_t size);
  std::string* add_test_ids();
  void add_test_ids(const std::string& value);
  void add_test_ids(std::string&& value);
  void add_test_ids(const char* value);
  void add_test_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& test_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_test_ids();
  private:
  const std::string& _internal_test_ids(int index) const;
  std::string* _internal_add_test_ids();
  public:

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alias = 4[json_name = "alias"];
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_alias(
      std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string type = 5[json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string os = 6[json_name = "os"];
  void clear_os();
  const std::string& os() const;
  void set_os(const std::string& value);
  void set_os(std::string&& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  std::string* mutable_os();
  std::string* release_os();
  void set_allocated_os(std::string* os);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_os();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_os(
      std::string* os);
  private:
  const std::string& _internal_os() const;
  void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // string ip = 7[json_name = "ip"];
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string site_id = 13[json_name = "siteId"];
  void clear_site_id();
  const std::string& site_id() const;
  void set_site_id(const std::string& value);
  void set_site_id(std::string&& value);
  void set_site_id(const char* value);
  void set_site_id(const char* value, size_t size);
  std::string* mutable_site_id();
  std::string* release_site_id();
  void set_allocated_site_id(std::string* site_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_id(
      std::string* site_id);
  private:
  const std::string& _internal_site_id() const;
  void _internal_set_site_id(const std::string& value);
  std::string* _internal_mutable_site_id();
  public:

  // string version = 14[json_name = "version"];
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string challenge = 15[json_name = "challenge"];
  void clear_challenge();
  const std::string& challenge() const;
  void set_challenge(const std::string& value);
  void set_challenge(std::string&& value);
  void set_challenge(const char* value);
  void set_challenge(const char* value, size_t size);
  std::string* mutable_challenge();
  std::string* release_challenge();
  void set_allocated_challenge(std::string* challenge);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_challenge();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_challenge(
      std::string* challenge);
  private:
  const std::string& _internal_challenge() const;
  void _internal_set_challenge(const std::string& value);
  std::string* _internal_mutable_challenge();
  public:

  // string city = 16[json_name = "city"];
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string region = 17[json_name = "region"];
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_region();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_region(
      std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string country = 18[json_name = "country"];
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string local_ip = 20[json_name = "localIp"];
  void clear_local_ip();
  const std::string& local_ip() const;
  void set_local_ip(const std::string& value);
  void set_local_ip(std::string&& value);
  void set_local_ip(const char* value);
  void set_local_ip(const char* value, size_t size);
  std::string* mutable_local_ip();
  std::string* release_local_ip();
  void set_allocated_local_ip(std::string* local_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_local_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_local_ip(
      std::string* local_ip);
  private:
  const std::string& _internal_local_ip() const;
  void _internal_set_local_ip(const std::string& value);
  std::string* _internal_mutable_local_ip();
  public:

  // string cloud_vpc = 21[json_name = "cloudVpc"];
  void clear_cloud_vpc();
  const std::string& cloud_vpc() const;
  void set_cloud_vpc(const std::string& value);
  void set_cloud_vpc(std::string&& value);
  void set_cloud_vpc(const char* value);
  void set_cloud_vpc(const char* value, size_t size);
  std::string* mutable_cloud_vpc();
  std::string* release_cloud_vpc();
  void set_allocated_cloud_vpc(std::string* cloud_vpc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cloud_vpc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cloud_vpc(
      std::string* cloud_vpc);
  private:
  const std::string& _internal_cloud_vpc() const;
  void _internal_set_cloud_vpc(const std::string& value);
  std::string* _internal_mutable_cloud_vpc();
  public:

  // .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed"];
  bool has_last_authed() const;
  private:
  bool _internal_has_last_authed() const;
  public:
  void clear_last_authed();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_authed() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_authed();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_authed();
  void set_allocated_last_authed(PROTOBUF_NAMESPACE_ID::Timestamp* last_authed);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_authed() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_authed();
  public:
  void unsafe_arena_set_allocated_last_authed(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_authed);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_authed();

  // .kentik.synthetics.v202101beta1.AgentStatus status = 3[json_name = "status"];
  void clear_status();
  ::kentik::synthetics::v202101beta1::AgentStatus status() const;
  void set_status(::kentik::synthetics::v202101beta1::AgentStatus value);
  private:
  ::kentik::synthetics::v202101beta1::AgentStatus _internal_status() const;
  void _internal_set_status(::kentik::synthetics::v202101beta1::AgentStatus value);
  public:

  // .kentik.synthetics.v202101beta1.IPFamily family = 11[json_name = "family"];
  void clear_family();
  ::kentik::synthetics::v202101beta1::IPFamily family() const;
  void set_family(::kentik::synthetics::v202101beta1::IPFamily value);
  private:
  ::kentik::synthetics::v202101beta1::IPFamily _internal_family() const;
  void _internal_set_family(::kentik::synthetics::v202101beta1::IPFamily value);
  public:

  // double lat = 8[json_name = "lat"];
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double long = 9[json_name = "long"];
  void clear_long_();
  double long_() const;
  void set_long_(double value);
  private:
  double _internal_long_() const;
  void _internal_set_long_(double value);
  public:

  // uint32 asn = 12[json_name = "asn"];
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22[json_name = "agentImpl"];
  void clear_agent_impl();
  ::kentik::synthetics::v202101beta1::ImplementType agent_impl() const;
  void set_agent_impl(::kentik::synthetics::v202101beta1::ImplementType value);
  private:
  ::kentik::synthetics::v202101beta1::ImplementType _internal_agent_impl() const;
  void _internal_set_agent_impl(::kentik::synthetics::v202101beta1::ImplementType value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> test_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr challenge_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloud_vpc_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_authed_;
  int status_;
  int family_;
  double lat_;
  double long__;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  int agent_impl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PingTaskDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.PingTaskDefinition) */ {
 public:
  inline PingTaskDefinition() : PingTaskDefinition(nullptr) {};
  virtual ~PingTaskDefinition();

  PingTaskDefinition(const PingTaskDefinition& from);
  PingTaskDefinition(PingTaskDefinition&& from) noexcept
    : PingTaskDefinition() {
    *this = ::std::move(from);
  }

  inline PingTaskDefinition& operator=(const PingTaskDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingTaskDefinition& operator=(PingTaskDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingTaskDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingTaskDefinition* internal_default_instance() {
    return reinterpret_cast<const PingTaskDefinition*>(
               &_PingTaskDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PingTaskDefinition& a, PingTaskDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(PingTaskDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingTaskDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingTaskDefinition* New() const final {
    return CreateMaybeMessage<PingTaskDefinition>(nullptr);
  }

  PingTaskDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingTaskDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingTaskDefinition& from);
  void MergeFrom(const PingTaskDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingTaskDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.PingTaskDefinition";
  }
  protected:
  explicit PingTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kExpiryFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // uint32 period = 2[json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 3[json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 4[json_name = "count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.PingTaskDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TraceTaskDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TraceTaskDefinition) */ {
 public:
  inline TraceTaskDefinition() : TraceTaskDefinition(nullptr) {};
  virtual ~TraceTaskDefinition();

  TraceTaskDefinition(const TraceTaskDefinition& from);
  TraceTaskDefinition(TraceTaskDefinition&& from) noexcept
    : TraceTaskDefinition() {
    *this = ::std::move(from);
  }

  inline TraceTaskDefinition& operator=(const TraceTaskDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceTaskDefinition& operator=(TraceTaskDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceTaskDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceTaskDefinition* internal_default_instance() {
    return reinterpret_cast<const TraceTaskDefinition*>(
               &_TraceTaskDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TraceTaskDefinition& a, TraceTaskDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceTaskDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceTaskDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceTaskDefinition* New() const final {
    return CreateMaybeMessage<TraceTaskDefinition>(nullptr);
  }

  TraceTaskDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceTaskDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceTaskDefinition& from);
  void MergeFrom(const TraceTaskDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceTaskDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TraceTaskDefinition";
  }
  protected:
  explicit TraceTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kExpiryFieldNumber = 3,
    kLimitFieldNumber = 4,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // uint32 period = 2[json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 3[json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 limit = 4[json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TraceTaskDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HTTPTaskDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.HTTPTaskDefinition) */ {
 public:
  inline HTTPTaskDefinition() : HTTPTaskDefinition(nullptr) {};
  virtual ~HTTPTaskDefinition();

  HTTPTaskDefinition(const HTTPTaskDefinition& from);
  HTTPTaskDefinition(HTTPTaskDefinition&& from) noexcept
    : HTTPTaskDefinition() {
    *this = ::std::move(from);
  }

  inline HTTPTaskDefinition& operator=(const HTTPTaskDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPTaskDefinition& operator=(HTTPTaskDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTTPTaskDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPTaskDefinition* internal_default_instance() {
    return reinterpret_cast<const HTTPTaskDefinition*>(
               &_HTTPTaskDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(HTTPTaskDefinition& a, HTTPTaskDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPTaskDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPTaskDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTTPTaskDefinition* New() const final {
    return CreateMaybeMessage<HTTPTaskDefinition>(nullptr);
  }

  HTTPTaskDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTTPTaskDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTTPTaskDefinition& from);
  void MergeFrom(const HTTPTaskDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPTaskDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.HTTPTaskDefinition";
  }
  protected:
  explicit HTTPTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kExpiryFieldNumber = 3,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // uint32 period = 2[json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 3[json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Task PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Task) */ {
 public:
  inline Task() : Task(nullptr) {};
  virtual ~Task();

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Task& default_instance();

  enum DefinitionCase {
    kPing = 9,
    kTraceroute = 10,
    kHttp = 11,
    kKnock = 12,
    kDns = 13,
    kShake = 14,
    DEFINITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return CreateMaybeMessage<Task>(nullptr);
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTestIdFieldNumber = 2,
    kDeviceIdFieldNumber = 3,
    kStatusFieldNumber = 5,
    kStateFieldNumber = 4,
    kFamilyFieldNumber = 6,
    kPingFieldNumber = 9,
    kTracerouteFieldNumber = 10,
    kHttpFieldNumber = 11,
    kKnockFieldNumber = 12,
    kDnsFieldNumber = 13,
    kShakeFieldNumber = 14,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string test_id = 2[json_name = "testId"];
  void clear_test_id();
  const std::string& test_id() const;
  void set_test_id(const std::string& value);
  void set_test_id(std::string&& value);
  void set_test_id(const char* value);
  void set_test_id(const char* value, size_t size);
  std::string* mutable_test_id();
  std::string* release_test_id();
  void set_allocated_test_id(std::string* test_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_test_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_test_id(
      std::string* test_id);
  private:
  const std::string& _internal_test_id() const;
  void _internal_set_test_id(const std::string& value);
  std::string* _internal_mutable_test_id();
  public:

  // string device_id = 3[json_name = "deviceId"];
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string status = 5[json_name = "status"];
  void clear_status();
  const std::string& status() const;
  void set_status(const std::string& value);
  void set_status(std::string&& value);
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  std::string* mutable_status();
  std::string* release_status();
  void set_allocated_status(std::string* status);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_status();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_status(
      std::string* status);
  private:
  const std::string& _internal_status() const;
  void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .kentik.synthetics.v202101beta1.TaskState state = 4[json_name = "state"];
  void clear_state();
  ::kentik::synthetics::v202101beta1::TaskState state() const;
  void set_state(::kentik::synthetics::v202101beta1::TaskState value);
  private:
  ::kentik::synthetics::v202101beta1::TaskState _internal_state() const;
  void _internal_set_state(::kentik::synthetics::v202101beta1::TaskState value);
  public:

  // .kentik.synthetics.v202101beta1.IPFamily family = 6[json_name = "family"];
  void clear_family();
  ::kentik::synthetics::v202101beta1::IPFamily family() const;
  void set_family(::kentik::synthetics::v202101beta1::IPFamily value);
  private:
  ::kentik::synthetics::v202101beta1::IPFamily _internal_family() const;
  void _internal_set_family(::kentik::synthetics::v202101beta1::IPFamily value);
  public:

  // .kentik.synthetics.v202101beta1.PingTaskDefinition ping = 9[json_name = "ping"];
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::kentik::synthetics::v202101beta1::PingTaskDefinition& ping() const;
  ::kentik::synthetics::v202101beta1::PingTaskDefinition* release_ping();
  ::kentik::synthetics::v202101beta1::PingTaskDefinition* mutable_ping();
  void set_allocated_ping(::kentik::synthetics::v202101beta1::PingTaskDefinition* ping);
  private:
  const ::kentik::synthetics::v202101beta1::PingTaskDefinition& _internal_ping() const;
  ::kentik::synthetics::v202101beta1::PingTaskDefinition* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::kentik::synthetics::v202101beta1::PingTaskDefinition* ping);
  ::kentik::synthetics::v202101beta1::PingTaskDefinition* unsafe_arena_release_ping();

  // .kentik.synthetics.v202101beta1.TraceTaskDefinition traceroute = 10[json_name = "traceroute"];
  bool has_traceroute() const;
  private:
  bool _internal_has_traceroute() const;
  public:
  void clear_traceroute();
  const ::kentik::synthetics::v202101beta1::TraceTaskDefinition& traceroute() const;
  ::kentik::synthetics::v202101beta1::TraceTaskDefinition* release_traceroute();
  ::kentik::synthetics::v202101beta1::TraceTaskDefinition* mutable_traceroute();
  void set_allocated_traceroute(::kentik::synthetics::v202101beta1::TraceTaskDefinition* traceroute);
  private:
  const ::kentik::synthetics::v202101beta1::TraceTaskDefinition& _internal_traceroute() const;
  ::kentik::synthetics::v202101beta1::TraceTaskDefinition* _internal_mutable_traceroute();
  public:
  void unsafe_arena_set_allocated_traceroute(
      ::kentik::synthetics::v202101beta1::TraceTaskDefinition* traceroute);
  ::kentik::synthetics::v202101beta1::TraceTaskDefinition* unsafe_arena_release_traceroute();

  // .kentik.synthetics.v202101beta1.HTTPTaskDefinition http = 11[json_name = "http"];
  bool has_http() const;
  private:
  bool _internal_has_http() const;
  public:
  void clear_http();
  const ::kentik::synthetics::v202101beta1::HTTPTaskDefinition& http() const;
  ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* release_http();
  ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* mutable_http();
  void set_allocated_http(::kentik::synthetics::v202101beta1::HTTPTaskDefinition* http);
  private:
  const ::kentik::synthetics::v202101beta1::HTTPTaskDefinition& _internal_http() const;
  ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* _internal_mutable_http();
  public:
  void unsafe_arena_set_allocated_http(
      ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* http);
  ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* unsafe_arena_release_http();

  // .kentik.synthetics.v202101beta1.KnockTaskDefinition knock = 12[json_name = "knock"];
  bool has_knock() const;
  private:
  bool _internal_has_knock() const;
  public:
  void clear_knock();
  const ::kentik::synthetics::v202101beta1::KnockTaskDefinition& knock() const;
  ::kentik::synthetics::v202101beta1::KnockTaskDefinition* release_knock();
  ::kentik::synthetics::v202101beta1::KnockTaskDefinition* mutable_knock();
  void set_allocated_knock(::kentik::synthetics::v202101beta1::KnockTaskDefinition* knock);
  private:
  const ::kentik::synthetics::v202101beta1::KnockTaskDefinition& _internal_knock() const;
  ::kentik::synthetics::v202101beta1::KnockTaskDefinition* _internal_mutable_knock();
  public:
  void unsafe_arena_set_allocated_knock(
      ::kentik::synthetics::v202101beta1::KnockTaskDefinition* knock);
  ::kentik::synthetics::v202101beta1::KnockTaskDefinition* unsafe_arena_release_knock();

  // .kentik.synthetics.v202101beta1.DNSTaskDefinition dns = 13[json_name = "dns"];
  bool has_dns() const;
  private:
  bool _internal_has_dns() const;
  public:
  void clear_dns();
  const ::kentik::synthetics::v202101beta1::DNSTaskDefinition& dns() const;
  ::kentik::synthetics::v202101beta1::DNSTaskDefinition* release_dns();
  ::kentik::synthetics::v202101beta1::DNSTaskDefinition* mutable_dns();
  void set_allocated_dns(::kentik::synthetics::v202101beta1::DNSTaskDefinition* dns);
  private:
  const ::kentik::synthetics::v202101beta1::DNSTaskDefinition& _internal_dns() const;
  ::kentik::synthetics::v202101beta1::DNSTaskDefinition* _internal_mutable_dns();
  public:
  void unsafe_arena_set_allocated_dns(
      ::kentik::synthetics::v202101beta1::DNSTaskDefinition* dns);
  ::kentik::synthetics::v202101beta1::DNSTaskDefinition* unsafe_arena_release_dns();

  // .kentik.synthetics.v202101beta1.ShakeTaskDefinition shake = 14[json_name = "shake"];
  bool has_shake() const;
  private:
  bool _internal_has_shake() const;
  public:
  void clear_shake();
  const ::kentik::synthetics::v202101beta1::ShakeTaskDefinition& shake() const;
  ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* release_shake();
  ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* mutable_shake();
  void set_allocated_shake(::kentik::synthetics::v202101beta1::ShakeTaskDefinition* shake);
  private:
  const ::kentik::synthetics::v202101beta1::ShakeTaskDefinition& _internal_shake() const;
  ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* _internal_mutable_shake();
  public:
  void unsafe_arena_set_allocated_shake(
      ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* shake);
  ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* unsafe_arena_release_shake();

  void clear_definition();
  DefinitionCase definition_case() const;
  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Task)
 private:
  class _Internal;
  void set_has_ping();
  void set_has_traceroute();
  void set_has_http();
  void set_has_knock();
  void set_has_dns();
  void set_has_shake();

  inline bool has_definition() const;
  inline void clear_has_definition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  int state_;
  int family_;
  union DefinitionUnion {
    DefinitionUnion() {}
    ::kentik::synthetics::v202101beta1::PingTaskDefinition* ping_;
    ::kentik::synthetics::v202101beta1::TraceTaskDefinition* traceroute_;
    ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* http_;
    ::kentik::synthetics::v202101beta1::KnockTaskDefinition* knock_;
    ::kentik::synthetics::v202101beta1::DNSTaskDefinition* dns_;
    ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* shake_;
  } definition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class KnockTaskDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.KnockTaskDefinition) */ {
 public:
  inline KnockTaskDefinition() : KnockTaskDefinition(nullptr) {};
  virtual ~KnockTaskDefinition();

  KnockTaskDefinition(const KnockTaskDefinition& from);
  KnockTaskDefinition(KnockTaskDefinition&& from) noexcept
    : KnockTaskDefinition() {
    *this = ::std::move(from);
  }

  inline KnockTaskDefinition& operator=(const KnockTaskDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline KnockTaskDefinition& operator=(KnockTaskDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KnockTaskDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KnockTaskDefinition* internal_default_instance() {
    return reinterpret_cast<const KnockTaskDefinition*>(
               &_KnockTaskDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(KnockTaskDefinition& a, KnockTaskDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(KnockTaskDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KnockTaskDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KnockTaskDefinition* New() const final {
    return CreateMaybeMessage<KnockTaskDefinition>(nullptr);
  }

  KnockTaskDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KnockTaskDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KnockTaskDefinition& from);
  void MergeFrom(const KnockTaskDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KnockTaskDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.KnockTaskDefinition";
  }
  protected:
  explicit KnockTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kPeriodFieldNumber = 2,
    kExpiryFieldNumber = 3,
    kCountFieldNumber = 4,
    kPortFieldNumber = 5,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // uint32 period = 2[json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 3[json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 4[json_name = "count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 5[json_name = "port"];
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.KnockTaskDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DNSTaskDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.DNSTaskDefinition) */ {
 public:
  inline DNSTaskDefinition() : DNSTaskDefinition(nullptr) {};
  virtual ~DNSTaskDefinition();

  DNSTaskDefinition(const DNSTaskDefinition& from);
  DNSTaskDefinition(DNSTaskDefinition&& from) noexcept
    : DNSTaskDefinition() {
    *this = ::std::move(from);
  }

  inline DNSTaskDefinition& operator=(const DNSTaskDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNSTaskDefinition& operator=(DNSTaskDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DNSTaskDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSTaskDefinition* internal_default_instance() {
    return reinterpret_cast<const DNSTaskDefinition*>(
               &_DNSTaskDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DNSTaskDefinition& a, DNSTaskDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(DNSTaskDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DNSTaskDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DNSTaskDefinition* New() const final {
    return CreateMaybeMessage<DNSTaskDefinition>(nullptr);
  }

  DNSTaskDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DNSTaskDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DNSTaskDefinition& from);
  void MergeFrom(const DNSTaskDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSTaskDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.DNSTaskDefinition";
  }
  protected:
  explicit DNSTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kTypeFieldNumber = 6,
    kResolverFieldNumber = 7,
    kPeriodFieldNumber = 2,
    kExpiryFieldNumber = 3,
    kCountFieldNumber = 4,
    kPortFieldNumber = 5,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string type = 6[json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string resolver = 7[json_name = "resolver"];
  void clear_resolver();
  const std::string& resolver() const;
  void set_resolver(const std::string& value);
  void set_resolver(std::string&& value);
  void set_resolver(const char* value);
  void set_resolver(const char* value, size_t size);
  std::string* mutable_resolver();
  std::string* release_resolver();
  void set_allocated_resolver(std::string* resolver);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_resolver();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_resolver(
      std::string* resolver);
  private:
  const std::string& _internal_resolver() const;
  void _internal_set_resolver(const std::string& value);
  std::string* _internal_mutable_resolver();
  public:

  // uint32 period = 2[json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 3[json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 4[json_name = "count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 5[json_name = "port"];
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.DNSTaskDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resolver_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ShakeTaskDefinition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.ShakeTaskDefinition) */ {
 public:
  inline ShakeTaskDefinition() : ShakeTaskDefinition(nullptr) {};
  virtual ~ShakeTaskDefinition();

  ShakeTaskDefinition(const ShakeTaskDefinition& from);
  ShakeTaskDefinition(ShakeTaskDefinition&& from) noexcept
    : ShakeTaskDefinition() {
    *this = ::std::move(from);
  }

  inline ShakeTaskDefinition& operator=(const ShakeTaskDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShakeTaskDefinition& operator=(ShakeTaskDefinition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShakeTaskDefinition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShakeTaskDefinition* internal_default_instance() {
    return reinterpret_cast<const ShakeTaskDefinition*>(
               &_ShakeTaskDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ShakeTaskDefinition& a, ShakeTaskDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(ShakeTaskDefinition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShakeTaskDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShakeTaskDefinition* New() const final {
    return CreateMaybeMessage<ShakeTaskDefinition>(nullptr);
  }

  ShakeTaskDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShakeTaskDefinition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShakeTaskDefinition& from);
  void MergeFrom(const ShakeTaskDefinition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShakeTaskDefinition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.ShakeTaskDefinition";
  }
  protected:
  explicit ShakeTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kPortFieldNumber = 2,
    kPeriodFieldNumber = 3,
    kExpiryFieldNumber = 4,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // uint32 port = 2[json_name = "port"];
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 period = 3[json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 4[json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class UserInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {};
  virtual ~UserInfo();

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserInfo* New() const final {
    return CreateMaybeMessage<UserInfo>(nullptr);
  }

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEmailFieldNumber = 2,
    kFullNameFieldNumber = 3,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string email = 2[json_name = "email"];
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_email();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_email(
      std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // string full_name = 3[json_name = "fullName"];
  void clear_full_name();
  const std::string& full_name() const;
  void set_full_name(const std::string& value);
  void set_full_name(std::string&& value);
  void set_full_name(const char* value);
  void set_full_name(const char* value, size_t size);
  std::string* mutable_full_name();
  std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_full_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_full_name(
      std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Test PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Test) */ {
 public:
  inline Test() : Test(nullptr) {};
  virtual ~Test();

  Test(const Test& from);
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test& operator=(Test&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }
  inline void Swap(Test* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(nullptr);
  }

  Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Test";
  }
  protected:
  explicit Test(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kDeviceIdFieldNumber = 4,
    kSettingsFieldNumber = 6,
    kExpiresOnFieldNumber = 7,
    kCdateFieldNumber = 8,
    kEdateFieldNumber = 9,
    kCreatedByFieldNumber = 10,
    kLastUpdatedByFieldNumber = 11,
    kStatusFieldNumber = 5,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3[json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string device_id = 4[json_name = "deviceId"];
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // .kentik.synthetics.v202101beta1.TestSettings settings = 6[json_name = "settings"];
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::kentik::synthetics::v202101beta1::TestSettings& settings() const;
  ::kentik::synthetics::v202101beta1::TestSettings* release_settings();
  ::kentik::synthetics::v202101beta1::TestSettings* mutable_settings();
  void set_allocated_settings(::kentik::synthetics::v202101beta1::TestSettings* settings);
  private:
  const ::kentik::synthetics::v202101beta1::TestSettings& _internal_settings() const;
  ::kentik::synthetics::v202101beta1::TestSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::kentik::synthetics::v202101beta1::TestSettings* settings);
  ::kentik::synthetics::v202101beta1::TestSettings* unsafe_arena_release_settings();

  // .google.protobuf.Timestamp expires_on = 7[json_name = "expiresOn"];
  bool has_expires_on() const;
  private:
  bool _internal_has_expires_on() const;
  public:
  void clear_expires_on();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_on() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_on();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_on();
  void set_allocated_expires_on(PROTOBUF_NAMESPACE_ID::Timestamp* expires_on);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_on() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_on();
  public:
  void unsafe_arena_set_allocated_expires_on(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_on);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_on();

  // .google.protobuf.Timestamp cdate = 8[json_name = "cdate"];
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 9[json_name = "edate"];
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // .kentik.synthetics.v202101beta1.UserInfo created_by = 10[json_name = "createdBy"];
  bool has_created_by() const;
  private:
  bool _internal_has_created_by() const;
  public:
  void clear_created_by();
  const ::kentik::synthetics::v202101beta1::UserInfo& created_by() const;
  ::kentik::synthetics::v202101beta1::UserInfo* release_created_by();
  ::kentik::synthetics::v202101beta1::UserInfo* mutable_created_by();
  void set_allocated_created_by(::kentik::synthetics::v202101beta1::UserInfo* created_by);
  private:
  const ::kentik::synthetics::v202101beta1::UserInfo& _internal_created_by() const;
  ::kentik::synthetics::v202101beta1::UserInfo* _internal_mutable_created_by();
  public:
  void unsafe_arena_set_allocated_created_by(
      ::kentik::synthetics::v202101beta1::UserInfo* created_by);
  ::kentik::synthetics::v202101beta1::UserInfo* unsafe_arena_release_created_by();

  // .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11[json_name = "lastUpdatedBy"];
  bool has_last_updated_by() const;
  private:
  bool _internal_has_last_updated_by() const;
  public:
  void clear_last_updated_by();
  const ::kentik::synthetics::v202101beta1::UserInfo& last_updated_by() const;
  ::kentik::synthetics::v202101beta1::UserInfo* release_last_updated_by();
  ::kentik::synthetics::v202101beta1::UserInfo* mutable_last_updated_by();
  void set_allocated_last_updated_by(::kentik::synthetics::v202101beta1::UserInfo* last_updated_by);
  private:
  const ::kentik::synthetics::v202101beta1::UserInfo& _internal_last_updated_by() const;
  ::kentik::synthetics::v202101beta1::UserInfo* _internal_mutable_last_updated_by();
  public:
  void unsafe_arena_set_allocated_last_updated_by(
      ::kentik::synthetics::v202101beta1::UserInfo* last_updated_by);
  ::kentik::synthetics::v202101beta1::UserInfo* unsafe_arena_release_last_updated_by();

  // .kentik.synthetics.v202101beta1.TestStatus status = 5[json_name = "status"];
  void clear_status();
  ::kentik::synthetics::v202101beta1::TestStatus status() const;
  void set_status(::kentik::synthetics::v202101beta1::TestStatus value);
  private:
  ::kentik::synthetics::v202101beta1::TestStatus _internal_status() const;
  void _internal_set_status(::kentik::synthetics::v202101beta1::TestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::kentik::synthetics::v202101beta1::TestSettings* settings_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_on_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  ::kentik::synthetics::v202101beta1::UserInfo* created_by_;
  ::kentik::synthetics::v202101beta1::UserInfo* last_updated_by_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HTTPConfig_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HTTPConfig_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HTTPConfig_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPConfig_HeadersEntry_DoNotUse();
  HTTPConfig_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HTTPConfig_HeadersEntry_DoNotUse& other);
  static const HTTPConfig_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPConfig_HeadersEntry_DoNotUse*>(&_HTTPConfig_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202101beta1.HTTPConfig.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202101beta1.HTTPConfig.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class HTTPConfig_CssSelectorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HTTPConfig_CssSelectorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HTTPConfig_CssSelectorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  HTTPConfig_CssSelectorsEntry_DoNotUse();
  HTTPConfig_CssSelectorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HTTPConfig_CssSelectorsEntry_DoNotUse& other);
  static const HTTPConfig_CssSelectorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HTTPConfig_CssSelectorsEntry_DoNotUse*>(&_HTTPConfig_CssSelectorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202101beta1.HTTPConfig.CssSelectorsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202101beta1.HTTPConfig.CssSelectorsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[18];
  }

  public:
};

// -------------------------------------------------------------------

class HTTPConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.HTTPConfig) */ {
 public:
  inline HTTPConfig() : HTTPConfig(nullptr) {};
  virtual ~HTTPConfig();

  HTTPConfig(const HTTPConfig& from);
  HTTPConfig(HTTPConfig&& from) noexcept
    : HTTPConfig() {
    *this = ::std::move(from);
  }

  inline HTTPConfig& operator=(const HTTPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPConfig& operator=(HTTPConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTTPConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPConfig* internal_default_instance() {
    return reinterpret_cast<const HTTPConfig*>(
               &_HTTPConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(HTTPConfig& a, HTTPConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTTPConfig* New() const final {
    return CreateMaybeMessage<HTTPConfig>(nullptr);
  }

  HTTPConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTTPConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTTPConfig& from);
  void MergeFrom(const HTTPConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.HTTPConfig";
  }
  protected:
  explicit HTTPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 4,
    kCssSelectorsFieldNumber = 7,
    kMethodFieldNumber = 3,
    kBodyFieldNumber = 5,
    kPeriodFieldNumber = 1,
    kExpiryFieldNumber = 2,
    kIgnoreTlsErrorsFieldNumber = 6,
  };
  // map<string, string> headers = 4[json_name = "headers"];
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // map<string, string> css_selectors = 7[json_name = "cssSelectors"];
  int css_selectors_size() const;
  private:
  int _internal_css_selectors_size() const;
  public:
  void clear_css_selectors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_css_selectors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_css_selectors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      css_selectors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_css_selectors();

  // string method = 3[json_name = "method"];
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method(
      std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string body = 5[json_name = "body"];
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // uint32 period = 1[json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 2[json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors"];
  void clear_ignore_tls_errors();
  bool ignore_tls_errors() const;
  void set_ignore_tls_errors(bool value);
  private:
  bool _internal_ignore_tls_errors() const;
  void _internal_set_ignore_tls_errors(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.HTTPConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HTTPConfig_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HTTPConfig_CssSelectorsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > css_selectors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  bool ignore_tls_errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TestSettings) */ {
 public:
  inline TestSettings() : TestSettings(nullptr) {};
  virtual ~TestSettings();

  TestSettings(const TestSettings& from);
  TestSettings(TestSettings&& from) noexcept
    : TestSettings() {
    *this = ::std::move(from);
  }

  inline TestSettings& operator=(const TestSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestSettings& operator=(TestSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestSettings& default_instance();

  enum DefinitionCase {
    kHostname = 4,
    kIp = 5,
    kAgent = 6,
    kFlow = 7,
    kSite = 8,
    kTag = 9,
    kDns = 10,
    kUrl = 11,
    kNetworkGrid = 35,
    kPageLoad = 36,
    kDnsGrid = 37,
    kApplicationMesh = 38,
    DEFINITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestSettings* internal_default_instance() {
    return reinterpret_cast<const TestSettings*>(
               &_TestSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TestSettings& a, TestSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TestSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestSettings* New() const final {
    return CreateMaybeMessage<TestSettings>(nullptr);
  }

  TestSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestSettings& from);
  void MergeFrom(const TestSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TestSettings";
  }
  protected:
  explicit TestSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdsFieldNumber = 14,
    kTasksFieldNumber = 19,
    kServersFieldNumber = 30,
    kProtocolFieldNumber = 26,
    kHealthSettingsFieldNumber = 22,
    kMonitoringSettingsFieldNumber = 24,
    kPingFieldNumber = 28,
    kTraceFieldNumber = 29,
    kHttpFieldNumber = 34,
    kPeriodFieldNumber = 15,
    kCountFieldNumber = 16,
    kExpiryFieldNumber = 17,
    kLimitFieldNumber = 18,
    kPortFieldNumber = 23,
    kFamilyFieldNumber = 27,
    kUseLocalIpFieldNumber = 31,
    kReciprocalFieldNumber = 32,
    kRollupLevelFieldNumber = 33,
    kHostnameFieldNumber = 4,
    kIpFieldNumber = 5,
    kAgentFieldNumber = 6,
    kFlowFieldNumber = 7,
    kSiteFieldNumber = 8,
    kTagFieldNumber = 9,
    kDnsFieldNumber = 10,
    kUrlFieldNumber = 11,
    kNetworkGridFieldNumber = 35,
    kPageLoadFieldNumber = 36,
    kDnsGridFieldNumber = 37,
    kApplicationMeshFieldNumber = 38,
  };
  // repeated string agent_ids = 14[json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  const std::string& agent_ids(int index) const;
  std::string* mutable_agent_ids(int index);
  void set_agent_ids(int index, const std::string& value);
  void set_agent_ids(int index, std::string&& value);
  void set_agent_ids(int index, const char* value);
  void set_agent_ids(int index, const char* value, size_t size);
  std::string* add_agent_ids();
  void add_agent_ids(const std::string& value);
  void add_agent_ids(std::string&& value);
  void add_agent_ids(const char* value);
  void add_agent_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_agent_ids();
  private:
  const std::string& _internal_agent_ids(int index) const;
  std::string* _internal_add_agent_ids();
  public:

  // repeated string tasks = 19[json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  const std::string& tasks(int index) const;
  std::string* mutable_tasks(int index);
  void set_tasks(int index, const std::string& value);
  void set_tasks(int index, std::string&& value);
  void set_tasks(int index, const char* value);
  void set_tasks(int index, const char* value, size_t size);
  std::string* add_tasks();
  void add_tasks(const std::string& value);
  void add_tasks(std::string&& value);
  void add_tasks(const char* value);
  void add_tasks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tasks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tasks();
  private:
  const std::string& _internal_tasks(int index) const;
  std::string* _internal_add_tasks();
  public:

  // repeated string servers = 30[json_name = "servers"];
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  const std::string& servers(int index) const;
  std::string* mutable_servers(int index);
  void set_servers(int index, const std::string& value);
  void set_servers(int index, std::string&& value);
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  std::string* add_servers();
  void add_servers(const std::string& value);
  void add_servers(std::string&& value);
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& servers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_servers();
  private:
  const std::string& _internal_servers(int index) const;
  std::string* _internal_add_servers();
  public:

  // string protocol = 26[json_name = "protocol"];
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocol(
      std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22[json_name = "healthSettings"];
  bool has_health_settings() const;
  private:
  bool _internal_has_health_settings() const;
  public:
  void clear_health_settings();
  const ::kentik::synthetics::v202101beta1::HealthSettings& health_settings() const;
  ::kentik::synthetics::v202101beta1::HealthSettings* release_health_settings();
  ::kentik::synthetics::v202101beta1::HealthSettings* mutable_health_settings();
  void set_allocated_health_settings(::kentik::synthetics::v202101beta1::HealthSettings* health_settings);
  private:
  const ::kentik::synthetics::v202101beta1::HealthSettings& _internal_health_settings() const;
  ::kentik::synthetics::v202101beta1::HealthSettings* _internal_mutable_health_settings();
  public:
  void unsafe_arena_set_allocated_health_settings(
      ::kentik::synthetics::v202101beta1::HealthSettings* health_settings);
  ::kentik::synthetics::v202101beta1::HealthSettings* unsafe_arena_release_health_settings();

  // .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24[json_name = "monitoringSettings"];
  bool has_monitoring_settings() const;
  private:
  bool _internal_has_monitoring_settings() const;
  public:
  void clear_monitoring_settings();
  const ::kentik::synthetics::v202101beta1::TestMonitoringSettings& monitoring_settings() const;
  ::kentik::synthetics::v202101beta1::TestMonitoringSettings* release_monitoring_settings();
  ::kentik::synthetics::v202101beta1::TestMonitoringSettings* mutable_monitoring_settings();
  void set_allocated_monitoring_settings(::kentik::synthetics::v202101beta1::TestMonitoringSettings* monitoring_settings);
  private:
  const ::kentik::synthetics::v202101beta1::TestMonitoringSettings& _internal_monitoring_settings() const;
  ::kentik::synthetics::v202101beta1::TestMonitoringSettings* _internal_mutable_monitoring_settings();
  public:
  void unsafe_arena_set_allocated_monitoring_settings(
      ::kentik::synthetics::v202101beta1::TestMonitoringSettings* monitoring_settings);
  ::kentik::synthetics::v202101beta1::TestMonitoringSettings* unsafe_arena_release_monitoring_settings();

  // .kentik.synthetics.v202101beta1.TestPingSettings ping = 28[json_name = "ping"];
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::kentik::synthetics::v202101beta1::TestPingSettings& ping() const;
  ::kentik::synthetics::v202101beta1::TestPingSettings* release_ping();
  ::kentik::synthetics::v202101beta1::TestPingSettings* mutable_ping();
  void set_allocated_ping(::kentik::synthetics::v202101beta1::TestPingSettings* ping);
  private:
  const ::kentik::synthetics::v202101beta1::TestPingSettings& _internal_ping() const;
  ::kentik::synthetics::v202101beta1::TestPingSettings* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::kentik::synthetics::v202101beta1::TestPingSettings* ping);
  ::kentik::synthetics::v202101beta1::TestPingSettings* unsafe_arena_release_ping();

  // .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29[json_name = "trace"];
  bool has_trace() const;
  private:
  bool _internal_has_trace() const;
  public:
  void clear_trace();
  const ::kentik::synthetics::v202101beta1::TestTraceSettings& trace() const;
  ::kentik::synthetics::v202101beta1::TestTraceSettings* release_trace();
  ::kentik::synthetics::v202101beta1::TestTraceSettings* mutable_trace();
  void set_allocated_trace(::kentik::synthetics::v202101beta1::TestTraceSettings* trace);
  private:
  const ::kentik::synthetics::v202101beta1::TestTraceSettings& _internal_trace() const;
  ::kentik::synthetics::v202101beta1::TestTraceSettings* _internal_mutable_trace();
  public:
  void unsafe_arena_set_allocated_trace(
      ::kentik::synthetics::v202101beta1::TestTraceSettings* trace);
  ::kentik::synthetics::v202101beta1::TestTraceSettings* unsafe_arena_release_trace();

  // .kentik.synthetics.v202101beta1.HTTPConfig http = 34[json_name = "http"];
  bool has_http() const;
  private:
  bool _internal_has_http() const;
  public:
  void clear_http();
  const ::kentik::synthetics::v202101beta1::HTTPConfig& http() const;
  ::kentik::synthetics::v202101beta1::HTTPConfig* release_http();
  ::kentik::synthetics::v202101beta1::HTTPConfig* mutable_http();
  void set_allocated_http(::kentik::synthetics::v202101beta1::HTTPConfig* http);
  private:
  const ::kentik::synthetics::v202101beta1::HTTPConfig& _internal_http() const;
  ::kentik::synthetics::v202101beta1::HTTPConfig* _internal_mutable_http();
  public:
  void unsafe_arena_set_allocated_http(
      ::kentik::synthetics::v202101beta1::HTTPConfig* http);
  ::kentik::synthetics::v202101beta1::HTTPConfig* unsafe_arena_release_http();

  // uint32 period = 15[json_name = "period"];
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 count = 16[json_name = "count"];
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 expiry = 17[json_name = "expiry"];
  void clear_expiry();
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry() const;
  void set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expiry() const;
  void _internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 limit = 18[json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 23[json_name = "port"];
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.synthetics.v202101beta1.IPFamily family = 27[json_name = "family"];
  void clear_family();
  ::kentik::synthetics::v202101beta1::IPFamily family() const;
  void set_family(::kentik::synthetics::v202101beta1::IPFamily value);
  private:
  ::kentik::synthetics::v202101beta1::IPFamily _internal_family() const;
  void _internal_set_family(::kentik::synthetics::v202101beta1::IPFamily value);
  public:

  // bool use_local_ip = 31[json_name = "useLocalIp"];
  void clear_use_local_ip();
  bool use_local_ip() const;
  void set_use_local_ip(bool value);
  private:
  bool _internal_use_local_ip() const;
  void _internal_set_use_local_ip(bool value);
  public:

  // bool reciprocal = 32[json_name = "reciprocal"];
  void clear_reciprocal();
  bool reciprocal() const;
  void set_reciprocal(bool value);
  private:
  bool _internal_reciprocal() const;
  void _internal_set_reciprocal(bool value);
  public:

  // uint32 rollup_level = 33[json_name = "rollupLevel"];
  void clear_rollup_level();
  ::PROTOBUF_NAMESPACE_ID::uint32 rollup_level() const;
  void set_rollup_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rollup_level() const;
  void _internal_set_rollup_level(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.synthetics.v202101beta1.HostnameTest hostname = 4[json_name = "hostname"];
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const ::kentik::synthetics::v202101beta1::HostnameTest& hostname() const;
  ::kentik::synthetics::v202101beta1::HostnameTest* release_hostname();
  ::kentik::synthetics::v202101beta1::HostnameTest* mutable_hostname();
  void set_allocated_hostname(::kentik::synthetics::v202101beta1::HostnameTest* hostname);
  private:
  const ::kentik::synthetics::v202101beta1::HostnameTest& _internal_hostname() const;
  ::kentik::synthetics::v202101beta1::HostnameTest* _internal_mutable_hostname();
  public:
  void unsafe_arena_set_allocated_hostname(
      ::kentik::synthetics::v202101beta1::HostnameTest* hostname);
  ::kentik::synthetics::v202101beta1::HostnameTest* unsafe_arena_release_hostname();

  // .kentik.synthetics.v202101beta1.IpTest ip = 5[json_name = "ip"];
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const ::kentik::synthetics::v202101beta1::IpTest& ip() const;
  ::kentik::synthetics::v202101beta1::IpTest* release_ip();
  ::kentik::synthetics::v202101beta1::IpTest* mutable_ip();
  void set_allocated_ip(::kentik::synthetics::v202101beta1::IpTest* ip);
  private:
  const ::kentik::synthetics::v202101beta1::IpTest& _internal_ip() const;
  ::kentik::synthetics::v202101beta1::IpTest* _internal_mutable_ip();
  public:
  void unsafe_arena_set_allocated_ip(
      ::kentik::synthetics::v202101beta1::IpTest* ip);
  ::kentik::synthetics::v202101beta1::IpTest* unsafe_arena_release_ip();

  // .kentik.synthetics.v202101beta1.AgentTest agent = 6[json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202101beta1::AgentTest& agent() const;
  ::kentik::synthetics::v202101beta1::AgentTest* release_agent();
  ::kentik::synthetics::v202101beta1::AgentTest* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202101beta1::AgentTest* agent);
  private:
  const ::kentik::synthetics::v202101beta1::AgentTest& _internal_agent() const;
  ::kentik::synthetics::v202101beta1::AgentTest* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202101beta1::AgentTest* agent);
  ::kentik::synthetics::v202101beta1::AgentTest* unsafe_arena_release_agent();

  // .kentik.synthetics.v202101beta1.FlowTest flow = 7[json_name = "flow"];
  bool has_flow() const;
  private:
  bool _internal_has_flow() const;
  public:
  void clear_flow();
  const ::kentik::synthetics::v202101beta1::FlowTest& flow() const;
  ::kentik::synthetics::v202101beta1::FlowTest* release_flow();
  ::kentik::synthetics::v202101beta1::FlowTest* mutable_flow();
  void set_allocated_flow(::kentik::synthetics::v202101beta1::FlowTest* flow);
  private:
  const ::kentik::synthetics::v202101beta1::FlowTest& _internal_flow() const;
  ::kentik::synthetics::v202101beta1::FlowTest* _internal_mutable_flow();
  public:
  void unsafe_arena_set_allocated_flow(
      ::kentik::synthetics::v202101beta1::FlowTest* flow);
  ::kentik::synthetics::v202101beta1::FlowTest* unsafe_arena_release_flow();

  // .kentik.synthetics.v202101beta1.SiteTest site = 8[json_name = "site"];
  bool has_site() const;
  private:
  bool _internal_has_site() const;
  public:
  void clear_site();
  const ::kentik::synthetics::v202101beta1::SiteTest& site() const;
  ::kentik::synthetics::v202101beta1::SiteTest* release_site();
  ::kentik::synthetics::v202101beta1::SiteTest* mutable_site();
  void set_allocated_site(::kentik::synthetics::v202101beta1::SiteTest* site);
  private:
  const ::kentik::synthetics::v202101beta1::SiteTest& _internal_site() const;
  ::kentik::synthetics::v202101beta1::SiteTest* _internal_mutable_site();
  public:
  void unsafe_arena_set_allocated_site(
      ::kentik::synthetics::v202101beta1::SiteTest* site);
  ::kentik::synthetics::v202101beta1::SiteTest* unsafe_arena_release_site();

  // .kentik.synthetics.v202101beta1.TagTest tag = 9[json_name = "tag"];
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::kentik::synthetics::v202101beta1::TagTest& tag() const;
  ::kentik::synthetics::v202101beta1::TagTest* release_tag();
  ::kentik::synthetics::v202101beta1::TagTest* mutable_tag();
  void set_allocated_tag(::kentik::synthetics::v202101beta1::TagTest* tag);
  private:
  const ::kentik::synthetics::v202101beta1::TagTest& _internal_tag() const;
  ::kentik::synthetics::v202101beta1::TagTest* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::kentik::synthetics::v202101beta1::TagTest* tag);
  ::kentik::synthetics::v202101beta1::TagTest* unsafe_arena_release_tag();

  // .kentik.synthetics.v202101beta1.DnsTest dns = 10[json_name = "dns"];
  bool has_dns() const;
  private:
  bool _internal_has_dns() const;
  public:
  void clear_dns();
  const ::kentik::synthetics::v202101beta1::DnsTest& dns() const;
  ::kentik::synthetics::v202101beta1::DnsTest* release_dns();
  ::kentik::synthetics::v202101beta1::DnsTest* mutable_dns();
  void set_allocated_dns(::kentik::synthetics::v202101beta1::DnsTest* dns);
  private:
  const ::kentik::synthetics::v202101beta1::DnsTest& _internal_dns() const;
  ::kentik::synthetics::v202101beta1::DnsTest* _internal_mutable_dns();
  public:
  void unsafe_arena_set_allocated_dns(
      ::kentik::synthetics::v202101beta1::DnsTest* dns);
  ::kentik::synthetics::v202101beta1::DnsTest* unsafe_arena_release_dns();

  // .kentik.synthetics.v202101beta1.UrlTest url = 11[json_name = "url"];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const ::kentik::synthetics::v202101beta1::UrlTest& url() const;
  ::kentik::synthetics::v202101beta1::UrlTest* release_url();
  ::kentik::synthetics::v202101beta1::UrlTest* mutable_url();
  void set_allocated_url(::kentik::synthetics::v202101beta1::UrlTest* url);
  private:
  const ::kentik::synthetics::v202101beta1::UrlTest& _internal_url() const;
  ::kentik::synthetics::v202101beta1::UrlTest* _internal_mutable_url();
  public:
  void unsafe_arena_set_allocated_url(
      ::kentik::synthetics::v202101beta1::UrlTest* url);
  ::kentik::synthetics::v202101beta1::UrlTest* unsafe_arena_release_url();

  // .kentik.synthetics.v202101beta1.GridTest network_grid = 35[json_name = "networkGrid"];
  bool has_network_grid() const;
  private:
  bool _internal_has_network_grid() const;
  public:
  void clear_network_grid();
  const ::kentik::synthetics::v202101beta1::GridTest& network_grid() const;
  ::kentik::synthetics::v202101beta1::GridTest* release_network_grid();
  ::kentik::synthetics::v202101beta1::GridTest* mutable_network_grid();
  void set_allocated_network_grid(::kentik::synthetics::v202101beta1::GridTest* network_grid);
  private:
  const ::kentik::synthetics::v202101beta1::GridTest& _internal_network_grid() const;
  ::kentik::synthetics::v202101beta1::GridTest* _internal_mutable_network_grid();
  public:
  void unsafe_arena_set_allocated_network_grid(
      ::kentik::synthetics::v202101beta1::GridTest* network_grid);
  ::kentik::synthetics::v202101beta1::GridTest* unsafe_arena_release_network_grid();

  // .kentik.synthetics.v202101beta1.UrlTest page_load = 36[json_name = "pageLoad"];
  bool has_page_load() const;
  private:
  bool _internal_has_page_load() const;
  public:
  void clear_page_load();
  const ::kentik::synthetics::v202101beta1::UrlTest& page_load() const;
  ::kentik::synthetics::v202101beta1::UrlTest* release_page_load();
  ::kentik::synthetics::v202101beta1::UrlTest* mutable_page_load();
  void set_allocated_page_load(::kentik::synthetics::v202101beta1::UrlTest* page_load);
  private:
  const ::kentik::synthetics::v202101beta1::UrlTest& _internal_page_load() const;
  ::kentik::synthetics::v202101beta1::UrlTest* _internal_mutable_page_load();
  public:
  void unsafe_arena_set_allocated_page_load(
      ::kentik::synthetics::v202101beta1::UrlTest* page_load);
  ::kentik::synthetics::v202101beta1::UrlTest* unsafe_arena_release_page_load();

  // .kentik.synthetics.v202101beta1.DnsGridTest dns_grid = 37[json_name = "dnsGrid"];
  bool has_dns_grid() const;
  private:
  bool _internal_has_dns_grid() const;
  public:
  void clear_dns_grid();
  const ::kentik::synthetics::v202101beta1::DnsGridTest& dns_grid() const;
  ::kentik::synthetics::v202101beta1::DnsGridTest* release_dns_grid();
  ::kentik::synthetics::v202101beta1::DnsGridTest* mutable_dns_grid();
  void set_allocated_dns_grid(::kentik::synthetics::v202101beta1::DnsGridTest* dns_grid);
  private:
  const ::kentik::synthetics::v202101beta1::DnsGridTest& _internal_dns_grid() const;
  ::kentik::synthetics::v202101beta1::DnsGridTest* _internal_mutable_dns_grid();
  public:
  void unsafe_arena_set_allocated_dns_grid(
      ::kentik::synthetics::v202101beta1::DnsGridTest* dns_grid);
  ::kentik::synthetics::v202101beta1::DnsGridTest* unsafe_arena_release_dns_grid();

  // .kentik.synthetics.v202101beta1.ApplicationMeshTest application_mesh = 38[json_name = "applicationMesh"];
  bool has_application_mesh() const;
  private:
  bool _internal_has_application_mesh() const;
  public:
  void clear_application_mesh();
  const ::kentik::synthetics::v202101beta1::ApplicationMeshTest& application_mesh() const;
  ::kentik::synthetics::v202101beta1::ApplicationMeshTest* release_application_mesh();
  ::kentik::synthetics::v202101beta1::ApplicationMeshTest* mutable_application_mesh();
  void set_allocated_application_mesh(::kentik::synthetics::v202101beta1::ApplicationMeshTest* application_mesh);
  private:
  const ::kentik::synthetics::v202101beta1::ApplicationMeshTest& _internal_application_mesh() const;
  ::kentik::synthetics::v202101beta1::ApplicationMeshTest* _internal_mutable_application_mesh();
  public:
  void unsafe_arena_set_allocated_application_mesh(
      ::kentik::synthetics::v202101beta1::ApplicationMeshTest* application_mesh);
  ::kentik::synthetics::v202101beta1::ApplicationMeshTest* unsafe_arena_release_application_mesh();

  void clear_definition();
  DefinitionCase definition_case() const;
  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TestSettings)
 private:
  class _Internal;
  void set_has_hostname();
  void set_has_ip();
  void set_has_agent();
  void set_has_flow();
  void set_has_site();
  void set_has_tag();
  void set_has_dns();
  void set_has_url();
  void set_has_network_grid();
  void set_has_page_load();
  void set_has_dns_grid();
  void set_has_application_mesh();

  inline bool has_definition() const;
  inline void clear_has_definition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> agent_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> servers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::kentik::synthetics::v202101beta1::HealthSettings* health_settings_;
  ::kentik::synthetics::v202101beta1::TestMonitoringSettings* monitoring_settings_;
  ::kentik::synthetics::v202101beta1::TestPingSettings* ping_;
  ::kentik::synthetics::v202101beta1::TestTraceSettings* trace_;
  ::kentik::synthetics::v202101beta1::HTTPConfig* http_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expiry_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  int family_;
  bool use_local_ip_;
  bool reciprocal_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rollup_level_;
  union DefinitionUnion {
    DefinitionUnion() {}
    ::kentik::synthetics::v202101beta1::HostnameTest* hostname_;
    ::kentik::synthetics::v202101beta1::IpTest* ip_;
    ::kentik::synthetics::v202101beta1::AgentTest* agent_;
    ::kentik::synthetics::v202101beta1::FlowTest* flow_;
    ::kentik::synthetics::v202101beta1::SiteTest* site_;
    ::kentik::synthetics::v202101beta1::TagTest* tag_;
    ::kentik::synthetics::v202101beta1::DnsTest* dns_;
    ::kentik::synthetics::v202101beta1::UrlTest* url_;
    ::kentik::synthetics::v202101beta1::GridTest* network_grid_;
    ::kentik::synthetics::v202101beta1::UrlTest* page_load_;
    ::kentik::synthetics::v202101beta1::DnsGridTest* dns_grid_;
    ::kentik::synthetics::v202101beta1::ApplicationMeshTest* application_mesh_;
  } definition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestTraceSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TestTraceSettings) */ {
 public:
  inline TestTraceSettings() : TestTraceSettings(nullptr) {};
  virtual ~TestTraceSettings();

  TestTraceSettings(const TestTraceSettings& from);
  TestTraceSettings(TestTraceSettings&& from) noexcept
    : TestTraceSettings() {
    *this = ::std::move(from);
  }

  inline TestTraceSettings& operator=(const TestTraceSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestTraceSettings& operator=(TestTraceSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestTraceSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestTraceSettings* internal_default_instance() {
    return reinterpret_cast<const TestTraceSettings*>(
               &_TestTraceSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TestTraceSettings& a, TestTraceSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TestTraceSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestTraceSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestTraceSettings* New() const final {
    return CreateMaybeMessage<TestTraceSettings>(nullptr);
  }

  TestTraceSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestTraceSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestTraceSettings& from);
  void MergeFrom(const TestTraceSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestTraceSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TestTraceSettings";
  }
  protected:
  explicit TestTraceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 3,
    kPeriodFieldNumber = 1,
    kCountFieldNumber = 2,
    kPortFieldNumber = 4,
    kExpiryFieldNumber = 5,
    kLimitFieldNumber = 6,
    kDelayFieldNumber = 7,
  };
  // string protocol = 3[json_name = "protocol"];
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocol(
      std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // float period = 1[json_name = "period"];
  void clear_period();
  float period() const;
  void set_period(float value);
  private:
  float _internal_period() const;
  void _internal_set_period(float value);
  public:

  // float count = 2[json_name = "count"];
  void clear_count();
  float count() const;
  void set_count(float value);
  private:
  float _internal_count() const;
  void _internal_set_count(float value);
  public:

  // float port = 4[json_name = "port"];
  void clear_port();
  float port() const;
  void set_port(float value);
  private:
  float _internal_port() const;
  void _internal_set_port(float value);
  public:

  // float expiry = 5[json_name = "expiry"];
  void clear_expiry();
  float expiry() const;
  void set_expiry(float value);
  private:
  float _internal_expiry() const;
  void _internal_set_expiry(float value);
  public:

  // float limit = 6[json_name = "limit"];
  void clear_limit();
  float limit() const;
  void set_limit(float value);
  private:
  float _internal_limit() const;
  void _internal_set_limit(float value);
  public:

  // float delay = 7[json_name = "delay"];
  void clear_delay();
  float delay() const;
  void set_delay(float value);
  private:
  float _internal_delay() const;
  void _internal_set_delay(float value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TestTraceSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  float period_;
  float count_;
  float port_;
  float expiry_;
  float limit_;
  float delay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestPingSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TestPingSettings) */ {
 public:
  inline TestPingSettings() : TestPingSettings(nullptr) {};
  virtual ~TestPingSettings();

  TestPingSettings(const TestPingSettings& from);
  TestPingSettings(TestPingSettings&& from) noexcept
    : TestPingSettings() {
    *this = ::std::move(from);
  }

  inline TestPingSettings& operator=(const TestPingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPingSettings& operator=(TestPingSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestPingSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestPingSettings* internal_default_instance() {
    return reinterpret_cast<const TestPingSettings*>(
               &_TestPingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TestPingSettings& a, TestPingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPingSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestPingSettings* New() const final {
    return CreateMaybeMessage<TestPingSettings>(nullptr);
  }

  TestPingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestPingSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestPingSettings& from);
  void MergeFrom(const TestPingSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TestPingSettings";
  }
  protected:
  explicit TestPingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeriodFieldNumber = 1,
    kCountFieldNumber = 2,
    kExpiryFieldNumber = 3,
    kDelayFieldNumber = 4,
  };
  // float period = 1[json_name = "period"];
  void clear_period();
  float period() const;
  void set_period(float value);
  private:
  float _internal_period() const;
  void _internal_set_period(float value);
  public:

  // float count = 2[json_name = "count"];
  void clear_count();
  float count() const;
  void set_count(float value);
  private:
  float _internal_count() const;
  void _internal_set_count(float value);
  public:

  // float expiry = 3[json_name = "expiry"];
  void clear_expiry();
  float expiry() const;
  void set_expiry(float value);
  private:
  float _internal_expiry() const;
  void _internal_set_expiry(float value);
  public:

  // float delay = 4[json_name = "delay"];
  void clear_delay();
  float delay() const;
  void set_delay(float value);
  private:
  float _internal_delay() const;
  void _internal_set_delay(float value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TestPingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float period_;
  float count_;
  float expiry_;
  float delay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestMonitoringSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TestMonitoringSettings) */ {
 public:
  inline TestMonitoringSettings() : TestMonitoringSettings(nullptr) {};
  virtual ~TestMonitoringSettings();

  TestMonitoringSettings(const TestMonitoringSettings& from);
  TestMonitoringSettings(TestMonitoringSettings&& from) noexcept
    : TestMonitoringSettings() {
    *this = ::std::move(from);
  }

  inline TestMonitoringSettings& operator=(const TestMonitoringSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestMonitoringSettings& operator=(TestMonitoringSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestMonitoringSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestMonitoringSettings* internal_default_instance() {
    return reinterpret_cast<const TestMonitoringSettings*>(
               &_TestMonitoringSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TestMonitoringSettings& a, TestMonitoringSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TestMonitoringSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestMonitoringSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestMonitoringSettings* New() const final {
    return CreateMaybeMessage<TestMonitoringSettings>(nullptr);
  }

  TestMonitoringSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestMonitoringSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestMonitoringSettings& from);
  void MergeFrom(const TestMonitoringSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestMonitoringSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TestMonitoringSettings";
  }
  protected:
  explicit TestMonitoringSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationChannelsFieldNumber = 5,
    kActivationGracePeriodFieldNumber = 1,
    kActivationTimeUnitFieldNumber = 2,
    kActivationTimeWindowFieldNumber = 3,
    kActivationTimesFieldNumber = 4,
  };
  // repeated string notification_channels = 5[json_name = "notificationChannels"];
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  const std::string& notification_channels(int index) const;
  std::string* mutable_notification_channels(int index);
  void set_notification_channels(int index, const std::string& value);
  void set_notification_channels(int index, std::string&& value);
  void set_notification_channels(int index, const char* value);
  void set_notification_channels(int index, const char* value, size_t size);
  std::string* add_notification_channels();
  void add_notification_channels(const std::string& value);
  void add_notification_channels(std::string&& value);
  void add_notification_channels(const char* value);
  void add_notification_channels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_channels();
  private:
  const std::string& _internal_notification_channels(int index) const;
  std::string* _internal_add_notification_channels();
  public:

  // string activation_grace_period = 1[json_name = "activationGracePeriod"];
  void clear_activation_grace_period();
  const std::string& activation_grace_period() const;
  void set_activation_grace_period(const std::string& value);
  void set_activation_grace_period(std::string&& value);
  void set_activation_grace_period(const char* value);
  void set_activation_grace_period(const char* value, size_t size);
  std::string* mutable_activation_grace_period();
  std::string* release_activation_grace_period();
  void set_allocated_activation_grace_period(std::string* activation_grace_period);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_activation_grace_period();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_activation_grace_period(
      std::string* activation_grace_period);
  private:
  const std::string& _internal_activation_grace_period() const;
  void _internal_set_activation_grace_period(const std::string& value);
  std::string* _internal_mutable_activation_grace_period();
  public:

  // string activation_time_unit = 2[json_name = "activationTimeUnit"];
  void clear_activation_time_unit();
  const std::string& activation_time_unit() const;
  void set_activation_time_unit(const std::string& value);
  void set_activation_time_unit(std::string&& value);
  void set_activation_time_unit(const char* value);
  void set_activation_time_unit(const char* value, size_t size);
  std::string* mutable_activation_time_unit();
  std::string* release_activation_time_unit();
  void set_allocated_activation_time_unit(std::string* activation_time_unit);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_activation_time_unit();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_activation_time_unit(
      std::string* activation_time_unit);
  private:
  const std::string& _internal_activation_time_unit() const;
  void _internal_set_activation_time_unit(const std::string& value);
  std::string* _internal_mutable_activation_time_unit();
  public:

  // string activation_time_window = 3[json_name = "activationTimeWindow"];
  void clear_activation_time_window();
  const std::string& activation_time_window() const;
  void set_activation_time_window(const std::string& value);
  void set_activation_time_window(std::string&& value);
  void set_activation_time_window(const char* value);
  void set_activation_time_window(const char* value, size_t size);
  std::string* mutable_activation_time_window();
  std::string* release_activation_time_window();
  void set_allocated_activation_time_window(std::string* activation_time_window);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_activation_time_window();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_activation_time_window(
      std::string* activation_time_window);
  private:
  const std::string& _internal_activation_time_window() const;
  void _internal_set_activation_time_window(const std::string& value);
  std::string* _internal_mutable_activation_time_window();
  public:

  // string activation_times = 4[json_name = "activationTimes"];
  void clear_activation_times();
  const std::string& activation_times() const;
  void set_activation_times(const std::string& value);
  void set_activation_times(std::string&& value);
  void set_activation_times(const char* value);
  void set_activation_times(const char* value, size_t size);
  std::string* mutable_activation_times();
  std::string* release_activation_times();
  void set_allocated_activation_times(std::string* activation_times);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_activation_times();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_activation_times(
      std::string* activation_times);
  private:
  const std::string& _internal_activation_times() const;
  void _internal_set_activation_times(const std::string& value);
  std::string* _internal_mutable_activation_times();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TestMonitoringSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_grace_period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_time_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_time_window_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HealthSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.HealthSettings) */ {
 public:
  inline HealthSettings() : HealthSettings(nullptr) {};
  virtual ~HealthSettings();

  HealthSettings(const HealthSettings& from);
  HealthSettings(HealthSettings&& from) noexcept
    : HealthSettings() {
    *this = ::std::move(from);
  }

  inline HealthSettings& operator=(const HealthSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthSettings& operator=(HealthSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthSettings* internal_default_instance() {
    return reinterpret_cast<const HealthSettings*>(
               &_HealthSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(HealthSettings& a, HealthSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthSettings* New() const final {
    return CreateMaybeMessage<HealthSettings>(nullptr);
  }

  HealthSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthSettings& from);
  void MergeFrom(const HealthSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.HealthSettings";
  }
  protected:
  explicit HealthSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHttpValidCodesFieldNumber = 9,
    kDnsValidCodesFieldNumber = 10,
    kLatencyCriticalFieldNumber = 1,
    kLatencyWarningFieldNumber = 2,
    kPacketLossCriticalFieldNumber = 3,
    kPacketLossWarningFieldNumber = 4,
    kJitterCriticalFieldNumber = 5,
    kJitterWarningFieldNumber = 6,
    kHttpLatencyCriticalFieldNumber = 7,
    kHttpLatencyWarningFieldNumber = 8,
    kLatencyCriticalStddevFieldNumber = 11,
    kLatencyWarningStddevFieldNumber = 12,
    kJitterCriticalStddevFieldNumber = 13,
    kJitterWarningStddevFieldNumber = 14,
    kHttpLatencyCriticalStddevFieldNumber = 15,
    kHttpLatencyWarningStddevFieldNumber = 16,
  };
  // repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes"];
  int http_valid_codes_size() const;
  private:
  int _internal_http_valid_codes_size() const;
  public:
  void clear_http_valid_codes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_http_valid_codes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_http_valid_codes() const;
  void _internal_add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_http_valid_codes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 http_valid_codes(int index) const;
  void set_http_valid_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      http_valid_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_http_valid_codes();

  // repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes"];
  int dns_valid_codes_size() const;
  private:
  int _internal_dns_valid_codes_size() const;
  public:
  void clear_dns_valid_codes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dns_valid_codes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dns_valid_codes() const;
  void _internal_add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dns_valid_codes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dns_valid_codes(int index) const;
  void set_dns_valid_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dns_valid_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dns_valid_codes();

  // float latency_critical = 1[json_name = "latencyCritical"];
  void clear_latency_critical();
  float latency_critical() const;
  void set_latency_critical(float value);
  private:
  float _internal_latency_critical() const;
  void _internal_set_latency_critical(float value);
  public:

  // float latency_warning = 2[json_name = "latencyWarning"];
  void clear_latency_warning();
  float latency_warning() const;
  void set_latency_warning(float value);
  private:
  float _internal_latency_warning() const;
  void _internal_set_latency_warning(float value);
  public:

  // float packet_loss_critical = 3[json_name = "packetLossCritical"];
  void clear_packet_loss_critical();
  float packet_loss_critical() const;
  void set_packet_loss_critical(float value);
  private:
  float _internal_packet_loss_critical() const;
  void _internal_set_packet_loss_critical(float value);
  public:

  // float packet_loss_warning = 4[json_name = "packetLossWarning"];
  void clear_packet_loss_warning();
  float packet_loss_warning() const;
  void set_packet_loss_warning(float value);
  private:
  float _internal_packet_loss_warning() const;
  void _internal_set_packet_loss_warning(float value);
  public:

  // float jitter_critical = 5[json_name = "jitterCritical"];
  void clear_jitter_critical();
  float jitter_critical() const;
  void set_jitter_critical(float value);
  private:
  float _internal_jitter_critical() const;
  void _internal_set_jitter_critical(float value);
  public:

  // float jitter_warning = 6[json_name = "jitterWarning"];
  void clear_jitter_warning();
  float jitter_warning() const;
  void set_jitter_warning(float value);
  private:
  float _internal_jitter_warning() const;
  void _internal_set_jitter_warning(float value);
  public:

  // float http_latency_critical = 7[json_name = "httpLatencyCritical"];
  void clear_http_latency_critical();
  float http_latency_critical() const;
  void set_http_latency_critical(float value);
  private:
  float _internal_http_latency_critical() const;
  void _internal_set_http_latency_critical(float value);
  public:

  // float http_latency_warning = 8[json_name = "httpLatencyWarning"];
  void clear_http_latency_warning();
  float http_latency_warning() const;
  void set_http_latency_warning(float value);
  private:
  float _internal_http_latency_warning() const;
  void _internal_set_http_latency_warning(float value);
  public:

  // float latency_critical_stddev = 11[json_name = "latencyCriticalStddev"];
  void clear_latency_critical_stddev();
  float latency_critical_stddev() const;
  void set_latency_critical_stddev(float value);
  private:
  float _internal_latency_critical_stddev() const;
  void _internal_set_latency_critical_stddev(float value);
  public:

  // float latency_warning_stddev = 12[json_name = "latencyWarningStddev"];
  void clear_latency_warning_stddev();
  float latency_warning_stddev() const;
  void set_latency_warning_stddev(float value);
  private:
  float _internal_latency_warning_stddev() const;
  void _internal_set_latency_warning_stddev(float value);
  public:

  // float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev"];
  void clear_jitter_critical_stddev();
  float jitter_critical_stddev() const;
  void set_jitter_critical_stddev(float value);
  private:
  float _internal_jitter_critical_stddev() const;
  void _internal_set_jitter_critical_stddev(float value);
  public:

  // float jitter_warning_stddev = 14[json_name = "jitterWarningStddev"];
  void clear_jitter_warning_stddev();
  float jitter_warning_stddev() const;
  void set_jitter_warning_stddev(float value);
  private:
  float _internal_jitter_warning_stddev() const;
  void _internal_set_jitter_warning_stddev(float value);
  public:

  // float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev"];
  void clear_http_latency_critical_stddev();
  float http_latency_critical_stddev() const;
  void set_http_latency_critical_stddev(float value);
  private:
  float _internal_http_latency_critical_stddev() const;
  void _internal_set_http_latency_critical_stddev(float value);
  public:

  // float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev"];
  void clear_http_latency_warning_stddev();
  float http_latency_warning_stddev() const;
  void set_http_latency_warning_stddev(float value);
  private:
  float _internal_http_latency_warning_stddev() const;
  void _internal_set_http_latency_warning_stddev(float value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.HealthSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > http_valid_codes_;
  mutable std::atomic<int> _http_valid_codes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dns_valid_codes_;
  mutable std::atomic<int> _dns_valid_codes_cached_byte_size_;
  float latency_critical_;
  float latency_warning_;
  float packet_loss_critical_;
  float packet_loss_warning_;
  float jitter_critical_;
  float jitter_warning_;
  float http_latency_critical_;
  float http_latency_warning_;
  float latency_critical_stddev_;
  float latency_warning_stddev_;
  float jitter_critical_stddev_;
  float jitter_warning_stddev_;
  float http_latency_critical_stddev_;
  float http_latency_warning_stddev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HostnameTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.HostnameTest) */ {
 public:
  inline HostnameTest() : HostnameTest(nullptr) {};
  virtual ~HostnameTest();

  HostnameTest(const HostnameTest& from);
  HostnameTest(HostnameTest&& from) noexcept
    : HostnameTest() {
    *this = ::std::move(from);
  }

  inline HostnameTest& operator=(const HostnameTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostnameTest& operator=(HostnameTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostnameTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostnameTest* internal_default_instance() {
    return reinterpret_cast<const HostnameTest*>(
               &_HostnameTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(HostnameTest& a, HostnameTest& b) {
    a.Swap(&b);
  }
  inline void Swap(HostnameTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostnameTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostnameTest* New() const final {
    return CreateMaybeMessage<HostnameTest>(nullptr);
  }

  HostnameTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostnameTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostnameTest& from);
  void MergeFrom(const HostnameTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostnameTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.HostnameTest";
  }
  protected:
  explicit HostnameTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.HostnameTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class IpTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.IpTest) */ {
 public:
  inline IpTest() : IpTest(nullptr) {};
  virtual ~IpTest();

  IpTest(const IpTest& from);
  IpTest(IpTest&& from) noexcept
    : IpTest() {
    *this = ::std::move(from);
  }

  inline IpTest& operator=(const IpTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpTest& operator=(IpTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpTest* internal_default_instance() {
    return reinterpret_cast<const IpTest*>(
               &_IpTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(IpTest& a, IpTest& b) {
    a.Swap(&b);
  }
  inline void Swap(IpTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpTest* New() const final {
    return CreateMaybeMessage<IpTest>(nullptr);
  }

  IpTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpTest& from);
  void MergeFrom(const IpTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.IpTest";
  }
  protected:
  explicit IpTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
  };
  // repeated string targets = 1[json_name = "targets"];
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  const std::string& targets(int index) const;
  std::string* mutable_targets(int index);
  void set_targets(int index, const std::string& value);
  void set_targets(int index, std::string&& value);
  void set_targets(int index, const char* value);
  void set_targets(int index, const char* value, size_t size);
  std::string* add_targets();
  void add_targets(const std::string& value);
  void add_targets(std::string&& value);
  void add_targets(const char* value);
  void add_targets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targets();
  private:
  const std::string& _internal_targets(int index) const;
  std::string* _internal_add_targets();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.IpTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class AgentTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.AgentTest) */ {
 public:
  inline AgentTest() : AgentTest(nullptr) {};
  virtual ~AgentTest();

  AgentTest(const AgentTest& from);
  AgentTest(AgentTest&& from) noexcept
    : AgentTest() {
    *this = ::std::move(from);
  }

  inline AgentTest& operator=(const AgentTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentTest& operator=(AgentTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentTest* internal_default_instance() {
    return reinterpret_cast<const AgentTest*>(
               &_AgentTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AgentTest& a, AgentTest& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentTest* New() const final {
    return CreateMaybeMessage<AgentTest>(nullptr);
  }

  AgentTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentTest& from);
  void MergeFrom(const AgentTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.AgentTest";
  }
  protected:
  explicit AgentTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.AgentTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class FlowTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.FlowTest) */ {
 public:
  inline FlowTest() : FlowTest(nullptr) {};
  virtual ~FlowTest();

  FlowTest(const FlowTest& from);
  FlowTest(FlowTest&& from) noexcept
    : FlowTest() {
    *this = ::std::move(from);
  }

  inline FlowTest& operator=(const FlowTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowTest& operator=(FlowTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowTest* internal_default_instance() {
    return reinterpret_cast<const FlowTest*>(
               &_FlowTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FlowTest& a, FlowTest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowTest* New() const final {
    return CreateMaybeMessage<FlowTest>(nullptr);
  }

  FlowTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowTest& from);
  void MergeFrom(const FlowTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.FlowTest";
  }
  protected:
  explicit FlowTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kTypeFieldNumber = 4,
    kInetDirectionFieldNumber = 5,
    kDirectionFieldNumber = 6,
    kTargetRefreshIntervalMillisFieldNumber = 2,
    kMaxTasksFieldNumber = 3,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string type = 4[json_name = "type"];
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string inet_direction = 5[json_name = "inetDirection"];
  void clear_inet_direction();
  const std::string& inet_direction() const;
  void set_inet_direction(const std::string& value);
  void set_inet_direction(std::string&& value);
  void set_inet_direction(const char* value);
  void set_inet_direction(const char* value, size_t size);
  std::string* mutable_inet_direction();
  std::string* release_inet_direction();
  void set_allocated_inet_direction(std::string* inet_direction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inet_direction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inet_direction(
      std::string* inet_direction);
  private:
  const std::string& _internal_inet_direction() const;
  void _internal_set_inet_direction(const std::string& value);
  std::string* _internal_mutable_inet_direction();
  public:

  // string direction = 6[json_name = "direction"];
  void clear_direction();
  const std::string& direction() const;
  void set_direction(const std::string& value);
  void set_direction(std::string&& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  std::string* mutable_direction();
  std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_direction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_direction(
      std::string* direction);
  private:
  const std::string& _internal_direction() const;
  void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis"];
  void clear_target_refresh_interval_millis();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_refresh_interval_millis() const;
  void set_target_refresh_interval_millis(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_refresh_interval_millis() const;
  void _internal_set_target_refresh_interval_millis(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_tasks = 3[json_name = "maxTasks"];
  void clear_max_tasks();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_tasks() const;
  void set_max_tasks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_tasks() const;
  void _internal_set_max_tasks(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.FlowTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inet_direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_refresh_interval_millis_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_tasks_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class SiteTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.SiteTest) */ {
 public:
  inline SiteTest() : SiteTest(nullptr) {};
  virtual ~SiteTest();

  SiteTest(const SiteTest& from);
  SiteTest(SiteTest&& from) noexcept
    : SiteTest() {
    *this = ::std::move(from);
  }

  inline SiteTest& operator=(const SiteTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SiteTest& operator=(SiteTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SiteTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SiteTest* internal_default_instance() {
    return reinterpret_cast<const SiteTest*>(
               &_SiteTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SiteTest& a, SiteTest& b) {
    a.Swap(&b);
  }
  inline void Swap(SiteTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SiteTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SiteTest* New() const final {
    return CreateMaybeMessage<SiteTest>(nullptr);
  }

  SiteTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SiteTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SiteTest& from);
  void MergeFrom(const SiteTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SiteTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.SiteTest";
  }
  protected:
  explicit SiteTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.SiteTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TagTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TagTest) */ {
 public:
  inline TagTest() : TagTest(nullptr) {};
  virtual ~TagTest();

  TagTest(const TagTest& from);
  TagTest(TagTest&& from) noexcept
    : TagTest() {
    *this = ::std::move(from);
  }

  inline TagTest& operator=(const TagTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagTest& operator=(TagTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TagTest* internal_default_instance() {
    return reinterpret_cast<const TagTest*>(
               &_TagTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TagTest& a, TagTest& b) {
    a.Swap(&b);
  }
  inline void Swap(TagTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagTest* New() const final {
    return CreateMaybeMessage<TagTest>(nullptr);
  }

  TagTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagTest& from);
  void MergeFrom(const TagTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TagTest";
  }
  protected:
  explicit TagTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TagTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DnsTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.DnsTest) */ {
 public:
  inline DnsTest() : DnsTest(nullptr) {};
  virtual ~DnsTest();

  DnsTest(const DnsTest& from);
  DnsTest(DnsTest&& from) noexcept
    : DnsTest() {
    *this = ::std::move(from);
  }

  inline DnsTest& operator=(const DnsTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DnsTest& operator=(DnsTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DnsTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DnsTest* internal_default_instance() {
    return reinterpret_cast<const DnsTest*>(
               &_DnsTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(DnsTest& a, DnsTest& b) {
    a.Swap(&b);
  }
  inline void Swap(DnsTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DnsTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DnsTest* New() const final {
    return CreateMaybeMessage<DnsTest>(nullptr);
  }

  DnsTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DnsTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DnsTest& from);
  void MergeFrom(const DnsTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DnsTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.DnsTest";
  }
  protected:
  explicit DnsTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
  void clear_type();
  ::kentik::synthetics::v202101beta1::DNSRecord type() const;
  void set_type(::kentik::synthetics::v202101beta1::DNSRecord value);
  private:
  ::kentik::synthetics::v202101beta1::DNSRecord _internal_type() const;
  void _internal_set_type(::kentik::synthetics::v202101beta1::DNSRecord value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.DnsTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class UrlTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.UrlTest) */ {
 public:
  inline UrlTest() : UrlTest(nullptr) {};
  virtual ~UrlTest();

  UrlTest(const UrlTest& from);
  UrlTest(UrlTest&& from) noexcept
    : UrlTest() {
    *this = ::std::move(from);
  }

  inline UrlTest& operator=(const UrlTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlTest& operator=(UrlTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UrlTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UrlTest* internal_default_instance() {
    return reinterpret_cast<const UrlTest*>(
               &_UrlTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UrlTest& a, UrlTest& b) {
    a.Swap(&b);
  }
  inline void Swap(UrlTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrlTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UrlTest* New() const final {
    return CreateMaybeMessage<UrlTest>(nullptr);
  }

  UrlTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UrlTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UrlTest& from);
  void MergeFrom(const UrlTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrlTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.UrlTest";
  }
  protected:
  explicit UrlTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // string target = 1[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.UrlTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GridTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GridTest) */ {
 public:
  inline GridTest() : GridTest(nullptr) {};
  virtual ~GridTest();

  GridTest(const GridTest& from);
  GridTest(GridTest&& from) noexcept
    : GridTest() {
    *this = ::std::move(from);
  }

  inline GridTest& operator=(const GridTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridTest& operator=(GridTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GridTest* internal_default_instance() {
    return reinterpret_cast<const GridTest*>(
               &_GridTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GridTest& a, GridTest& b) {
    a.Swap(&b);
  }
  inline void Swap(GridTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridTest* New() const final {
    return CreateMaybeMessage<GridTest>(nullptr);
  }

  GridTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridTest& from);
  void MergeFrom(const GridTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GridTest";
  }
  protected:
  explicit GridTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
  };
  // repeated string targets = 1[json_name = "targets"];
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  const std::string& targets(int index) const;
  std::string* mutable_targets(int index);
  void set_targets(int index, const std::string& value);
  void set_targets(int index, std::string&& value);
  void set_targets(int index, const char* value);
  void set_targets(int index, const char* value, size_t size);
  std::string* add_targets();
  void add_targets(const std::string& value);
  void add_targets(std::string&& value);
  void add_targets(const char* value);
  void add_targets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targets();
  private:
  const std::string& _internal_targets(int index) const;
  std::string* _internal_add_targets();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GridTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DnsGridTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.DnsGridTest) */ {
 public:
  inline DnsGridTest() : DnsGridTest(nullptr) {};
  virtual ~DnsGridTest();

  DnsGridTest(const DnsGridTest& from);
  DnsGridTest(DnsGridTest&& from) noexcept
    : DnsGridTest() {
    *this = ::std::move(from);
  }

  inline DnsGridTest& operator=(const DnsGridTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DnsGridTest& operator=(DnsGridTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DnsGridTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DnsGridTest* internal_default_instance() {
    return reinterpret_cast<const DnsGridTest*>(
               &_DnsGridTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(DnsGridTest& a, DnsGridTest& b) {
    a.Swap(&b);
  }
  inline void Swap(DnsGridTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DnsGridTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DnsGridTest* New() const final {
    return CreateMaybeMessage<DnsGridTest>(nullptr);
  }

  DnsGridTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DnsGridTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DnsGridTest& from);
  void MergeFrom(const DnsGridTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DnsGridTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.DnsGridTest";
  }
  protected:
  explicit DnsGridTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated string targets = 1[json_name = "targets"];
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  const std::string& targets(int index) const;
  std::string* mutable_targets(int index);
  void set_targets(int index, const std::string& value);
  void set_targets(int index, std::string&& value);
  void set_targets(int index, const char* value);
  void set_targets(int index, const char* value, size_t size);
  std::string* add_targets();
  void add_targets(const std::string& value);
  void add_targets(std::string&& value);
  void add_targets(const char* value);
  void add_targets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targets();
  private:
  const std::string& _internal_targets(int index) const;
  std::string* _internal_add_targets();
  public:

  // .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
  void clear_type();
  ::kentik::synthetics::v202101beta1::DNSRecord type() const;
  void set_type(::kentik::synthetics::v202101beta1::DNSRecord value);
  private:
  ::kentik::synthetics::v202101beta1::DNSRecord _internal_type() const;
  void _internal_set_type(::kentik::synthetics::v202101beta1::DNSRecord value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.DnsGridTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targets_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ApplicationMeshTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.ApplicationMeshTest) */ {
 public:
  inline ApplicationMeshTest() : ApplicationMeshTest(nullptr) {};
  virtual ~ApplicationMeshTest();

  ApplicationMeshTest(const ApplicationMeshTest& from);
  ApplicationMeshTest(ApplicationMeshTest&& from) noexcept
    : ApplicationMeshTest() {
    *this = ::std::move(from);
  }

  inline ApplicationMeshTest& operator=(const ApplicationMeshTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplicationMeshTest& operator=(ApplicationMeshTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ApplicationMeshTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ApplicationMeshTest* internal_default_instance() {
    return reinterpret_cast<const ApplicationMeshTest*>(
               &_ApplicationMeshTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ApplicationMeshTest& a, ApplicationMeshTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplicationMeshTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplicationMeshTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ApplicationMeshTest* New() const final {
    return CreateMaybeMessage<ApplicationMeshTest>(nullptr);
  }

  ApplicationMeshTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ApplicationMeshTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ApplicationMeshTest& from);
  void MergeFrom(const ApplicationMeshTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplicationMeshTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.ApplicationMeshTest";
  }
  protected:
  explicit ApplicationMeshTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.ApplicationMeshTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class MeshResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.MeshResponse) */ {
 public:
  inline MeshResponse() : MeshResponse(nullptr) {};
  virtual ~MeshResponse();

  MeshResponse(const MeshResponse& from);
  MeshResponse(MeshResponse&& from) noexcept
    : MeshResponse() {
    *this = ::std::move(from);
  }

  inline MeshResponse& operator=(const MeshResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshResponse& operator=(MeshResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshResponse* internal_default_instance() {
    return reinterpret_cast<const MeshResponse*>(
               &_MeshResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(MeshResponse& a, MeshResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshResponse* New() const final {
    return CreateMaybeMessage<MeshResponse>(nullptr);
  }

  MeshResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshResponse& from);
  void MergeFrom(const MeshResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.MeshResponse";
  }
  protected:
  explicit MeshResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnsFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLocalIpFieldNumber = 3,
    kIpFieldNumber = 4,
    kAliasFieldNumber = 5,
  };
  // repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6[json_name = "columns"];
  int columns_size() const;
  private:
  int _internal_columns_size() const;
  public:
  void clear_columns();
  ::kentik::synthetics::v202101beta1::MeshColumn* mutable_columns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshColumn >*
      mutable_columns();
  private:
  const ::kentik::synthetics::v202101beta1::MeshColumn& _internal_columns(int index) const;
  ::kentik::synthetics::v202101beta1::MeshColumn* _internal_add_columns();
  public:
  const ::kentik::synthetics::v202101beta1::MeshColumn& columns(int index) const;
  ::kentik::synthetics::v202101beta1::MeshColumn* add_columns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshColumn >&
      columns() const;

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string local_ip = 3[json_name = "localIp"];
  void clear_local_ip();
  const std::string& local_ip() const;
  void set_local_ip(const std::string& value);
  void set_local_ip(std::string&& value);
  void set_local_ip(const char* value);
  void set_local_ip(const char* value, size_t size);
  std::string* mutable_local_ip();
  std::string* release_local_ip();
  void set_allocated_local_ip(std::string* local_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_local_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_local_ip(
      std::string* local_ip);
  private:
  const std::string& _internal_local_ip() const;
  void _internal_set_local_ip(const std::string& value);
  std::string* _internal_mutable_local_ip();
  public:

  // string ip = 4[json_name = "ip"];
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string alias = 5[json_name = "alias"];
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_alias(
      std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.MeshResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshColumn > columns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class MeshColumn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.MeshColumn) */ {
 public:
  inline MeshColumn() : MeshColumn(nullptr) {};
  virtual ~MeshColumn();

  MeshColumn(const MeshColumn& from);
  MeshColumn(MeshColumn&& from) noexcept
    : MeshColumn() {
    *this = ::std::move(from);
  }

  inline MeshColumn& operator=(const MeshColumn& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshColumn& operator=(MeshColumn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshColumn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshColumn* internal_default_instance() {
    return reinterpret_cast<const MeshColumn*>(
               &_MeshColumn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(MeshColumn& a, MeshColumn& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshColumn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshColumn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshColumn* New() const final {
    return CreateMaybeMessage<MeshColumn>(nullptr);
  }

  MeshColumn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshColumn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshColumn& from);
  void MergeFrom(const MeshColumn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshColumn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.MeshColumn";
  }
  protected:
  explicit MeshColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kAliasFieldNumber = 3,
    kTargetFieldNumber = 4,
    kMetricsFieldNumber = 5,
  };
  // repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6[json_name = "health"];
  int health_size() const;
  private:
  int _internal_health_size() const;
  public:
  void clear_health();
  ::kentik::synthetics::v202101beta1::MeshMetrics* mutable_health(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshMetrics >*
      mutable_health();
  private:
  const ::kentik::synthetics::v202101beta1::MeshMetrics& _internal_health(int index) const;
  ::kentik::synthetics::v202101beta1::MeshMetrics* _internal_add_health();
  public:
  const ::kentik::synthetics::v202101beta1::MeshMetrics& health(int index) const;
  ::kentik::synthetics::v202101beta1::MeshMetrics* add_health();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshMetrics >&
      health() const;

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string alias = 3[json_name = "alias"];
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_alias(
      std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string target = 4[json_name = "target"];
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5[json_name = "metrics"];
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::kentik::synthetics::v202101beta1::MeshMetrics& metrics() const;
  ::kentik::synthetics::v202101beta1::MeshMetrics* release_metrics();
  ::kentik::synthetics::v202101beta1::MeshMetrics* mutable_metrics();
  void set_allocated_metrics(::kentik::synthetics::v202101beta1::MeshMetrics* metrics);
  private:
  const ::kentik::synthetics::v202101beta1::MeshMetrics& _internal_metrics() const;
  ::kentik::synthetics::v202101beta1::MeshMetrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::kentik::synthetics::v202101beta1::MeshMetrics* metrics);
  ::kentik::synthetics::v202101beta1::MeshMetrics* unsafe_arena_release_metrics();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.MeshColumn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshMetrics > health_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::kentik::synthetics::v202101beta1::MeshMetrics* metrics_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class MeshMetric PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.MeshMetric) */ {
 public:
  inline MeshMetric() : MeshMetric(nullptr) {};
  virtual ~MeshMetric();

  MeshMetric(const MeshMetric& from);
  MeshMetric(MeshMetric&& from) noexcept
    : MeshMetric() {
    *this = ::std::move(from);
  }

  inline MeshMetric& operator=(const MeshMetric& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshMetric& operator=(MeshMetric&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshMetric& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshMetric* internal_default_instance() {
    return reinterpret_cast<const MeshMetric*>(
               &_MeshMetric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(MeshMetric& a, MeshMetric& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshMetric* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshMetric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshMetric* New() const final {
    return CreateMaybeMessage<MeshMetric>(nullptr);
  }

  MeshMetric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshMetric>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshMetric& from);
  void MergeFrom(const MeshMetric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshMetric* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.MeshMetric";
  }
  protected:
  explicit MeshMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kHealthFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string health = 2[json_name = "health"];
  void clear_health();
  const std::string& health() const;
  void set_health(const std::string& value);
  void set_health(std::string&& value);
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  std::string* mutable_health();
  std::string* release_health();
  void set_allocated_health(std::string* health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health(
      std::string* health);
  private:
  const std::string& _internal_health() const;
  void _internal_set_health(const std::string& value);
  std::string* _internal_mutable_health();
  public:

  // int64 value = 3[json_name = "value"];
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.MeshMetric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_;
  ::PROTOBUF_NAMESPACE_ID::int64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class MeshMetrics PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.MeshMetrics) */ {
 public:
  inline MeshMetrics() : MeshMetrics(nullptr) {};
  virtual ~MeshMetrics();

  MeshMetrics(const MeshMetrics& from);
  MeshMetrics(MeshMetrics&& from) noexcept
    : MeshMetrics() {
    *this = ::std::move(from);
  }

  inline MeshMetrics& operator=(const MeshMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshMetrics& operator=(MeshMetrics&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshMetrics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshMetrics* internal_default_instance() {
    return reinterpret_cast<const MeshMetrics*>(
               &_MeshMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(MeshMetrics& a, MeshMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshMetrics* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshMetrics* New() const final {
    return CreateMaybeMessage<MeshMetrics>(nullptr);
  }

  MeshMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshMetrics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshMetrics& from);
  void MergeFrom(const MeshMetrics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshMetrics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.MeshMetrics";
  }
  protected:
  explicit MeshMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kLatencyFieldNumber = 2,
    kPacketLossFieldNumber = 3,
    kJitterFieldNumber = 4,
  };
  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .kentik.synthetics.v202101beta1.MeshMetric latency = 2[json_name = "latency"];
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  const ::kentik::synthetics::v202101beta1::MeshMetric& latency() const;
  ::kentik::synthetics::v202101beta1::MeshMetric* release_latency();
  ::kentik::synthetics::v202101beta1::MeshMetric* mutable_latency();
  void set_allocated_latency(::kentik::synthetics::v202101beta1::MeshMetric* latency);
  private:
  const ::kentik::synthetics::v202101beta1::MeshMetric& _internal_latency() const;
  ::kentik::synthetics::v202101beta1::MeshMetric* _internal_mutable_latency();
  public:
  void unsafe_arena_set_allocated_latency(
      ::kentik::synthetics::v202101beta1::MeshMetric* latency);
  ::kentik::synthetics::v202101beta1::MeshMetric* unsafe_arena_release_latency();

  // .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3[json_name = "packetLoss"];
  bool has_packet_loss() const;
  private:
  bool _internal_has_packet_loss() const;
  public:
  void clear_packet_loss();
  const ::kentik::synthetics::v202101beta1::MeshMetric& packet_loss() const;
  ::kentik::synthetics::v202101beta1::MeshMetric* release_packet_loss();
  ::kentik::synthetics::v202101beta1::MeshMetric* mutable_packet_loss();
  void set_allocated_packet_loss(::kentik::synthetics::v202101beta1::MeshMetric* packet_loss);
  private:
  const ::kentik::synthetics::v202101beta1::MeshMetric& _internal_packet_loss() const;
  ::kentik::synthetics::v202101beta1::MeshMetric* _internal_mutable_packet_loss();
  public:
  void unsafe_arena_set_allocated_packet_loss(
      ::kentik::synthetics::v202101beta1::MeshMetric* packet_loss);
  ::kentik::synthetics::v202101beta1::MeshMetric* unsafe_arena_release_packet_loss();

  // .kentik.synthetics.v202101beta1.MeshMetric jitter = 4[json_name = "jitter"];
  bool has_jitter() const;
  private:
  bool _internal_has_jitter() const;
  public:
  void clear_jitter();
  const ::kentik::synthetics::v202101beta1::MeshMetric& jitter() const;
  ::kentik::synthetics::v202101beta1::MeshMetric* release_jitter();
  ::kentik::synthetics::v202101beta1::MeshMetric* mutable_jitter();
  void set_allocated_jitter(::kentik::synthetics::v202101beta1::MeshMetric* jitter);
  private:
  const ::kentik::synthetics::v202101beta1::MeshMetric& _internal_jitter() const;
  ::kentik::synthetics::v202101beta1::MeshMetric* _internal_mutable_jitter();
  public:
  void unsafe_arena_set_allocated_jitter(
      ::kentik::synthetics::v202101beta1::MeshMetric* jitter);
  ::kentik::synthetics::v202101beta1::MeshMetric* unsafe_arena_release_jitter();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.MeshMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::kentik::synthetics::v202101beta1::MeshMetric* latency_;
  ::kentik::synthetics::v202101beta1::MeshMetric* packet_loss_;
  ::kentik::synthetics::v202101beta1::MeshMetric* jitter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ASN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.ASN) */ {
 public:
  inline ASN() : ASN(nullptr) {};
  virtual ~ASN();

  ASN(const ASN& from);
  ASN(ASN&& from) noexcept
    : ASN() {
    *this = ::std::move(from);
  }

  inline ASN& operator=(const ASN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASN& operator=(ASN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ASN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ASN* internal_default_instance() {
    return reinterpret_cast<const ASN*>(
               &_ASN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(ASN& a, ASN& b) {
    a.Swap(&b);
  }
  inline void Swap(ASN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASN* New() const final {
    return CreateMaybeMessage<ASN>(nullptr);
  }

  ASN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASN& from);
  void MergeFrom(const ASN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.ASN";
  }
  protected:
  explicit ASN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.ASN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Country PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Country) */ {
 public:
  inline Country() : Country(nullptr) {};
  virtual ~Country();

  Country(const Country& from);
  Country(Country&& from) noexcept
    : Country() {
    *this = ::std::move(from);
  }

  inline Country& operator=(const Country& from) {
    CopyFrom(from);
    return *this;
  }
  inline Country& operator=(Country&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Country& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Country* internal_default_instance() {
    return reinterpret_cast<const Country*>(
               &_Country_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(Country& a, Country& b) {
    a.Swap(&b);
  }
  inline void Swap(Country* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Country* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Country* New() const final {
    return CreateMaybeMessage<Country>(nullptr);
  }

  Country* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Country>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Country& from);
  void MergeFrom(const Country& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Country* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Country";
  }
  protected:
  explicit Country(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string code = 1[json_name = "code"];
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_code();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_code(
      std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Country)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Region PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Region) */ {
 public:
  inline Region() : Region(nullptr) {};
  virtual ~Region();

  Region(const Region& from);
  Region(Region&& from) noexcept
    : Region() {
    *this = ::std::move(from);
  }

  inline Region& operator=(const Region& from) {
    CopyFrom(from);
    return *this;
  }
  inline Region& operator=(Region&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Region& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Region* internal_default_instance() {
    return reinterpret_cast<const Region*>(
               &_Region_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(Region& a, Region& b) {
    a.Swap(&b);
  }
  inline void Swap(Region* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Region* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Region* New() const final {
    return CreateMaybeMessage<Region>(nullptr);
  }

  Region* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Region>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Region& from);
  void MergeFrom(const Region& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Region* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Region";
  }
  protected:
  explicit Region(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 id = 1[json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Region)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class City PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.City) */ {
 public:
  inline City() : City(nullptr) {};
  virtual ~City();

  City(const City& from);
  City(City&& from) noexcept
    : City() {
    *this = ::std::move(from);
  }

  inline City& operator=(const City& from) {
    CopyFrom(from);
    return *this;
  }
  inline City& operator=(City&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const City& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const City* internal_default_instance() {
    return reinterpret_cast<const City*>(
               &_City_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(City& a, City& b) {
    a.Swap(&b);
  }
  inline void Swap(City* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(City* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline City* New() const final {
    return CreateMaybeMessage<City>(nullptr);
  }

  City* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<City>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const City& from);
  void MergeFrom(const City& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(City* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.City";
  }
  protected:
  explicit City(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kLatitudeFieldNumber = 8,
    kLongitudeFieldNumber = 9,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double latitude = 8[json_name = "latitude"];
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 9[json_name = "longitude"];
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.City)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Geo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Geo) */ {
 public:
  inline Geo() : Geo(nullptr) {};
  virtual ~Geo();

  Geo(const Geo& from);
  Geo(Geo&& from) noexcept
    : Geo() {
    *this = ::std::move(from);
  }

  inline Geo& operator=(const Geo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geo& operator=(Geo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Geo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Geo* internal_default_instance() {
    return reinterpret_cast<const Geo*>(
               &_Geo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(Geo& a, Geo& b) {
    a.Swap(&b);
  }
  inline void Swap(Geo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Geo* New() const final {
    return CreateMaybeMessage<Geo>(nullptr);
  }

  Geo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Geo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Geo& from);
  void MergeFrom(const Geo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Geo";
  }
  protected:
  explicit Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryFieldNumber = 1,
    kRegionFieldNumber = 2,
    kCityFieldNumber = 3,
  };
  // .kentik.synthetics.v202101beta1.Country country = 1[json_name = "country"];
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const ::kentik::synthetics::v202101beta1::Country& country() const;
  ::kentik::synthetics::v202101beta1::Country* release_country();
  ::kentik::synthetics::v202101beta1::Country* mutable_country();
  void set_allocated_country(::kentik::synthetics::v202101beta1::Country* country);
  private:
  const ::kentik::synthetics::v202101beta1::Country& _internal_country() const;
  ::kentik::synthetics::v202101beta1::Country* _internal_mutable_country();
  public:
  void unsafe_arena_set_allocated_country(
      ::kentik::synthetics::v202101beta1::Country* country);
  ::kentik::synthetics::v202101beta1::Country* unsafe_arena_release_country();

  // .kentik.synthetics.v202101beta1.Region region = 2[json_name = "region"];
  bool has_region() const;
  private:
  bool _internal_has_region() const;
  public:
  void clear_region();
  const ::kentik::synthetics::v202101beta1::Region& region() const;
  ::kentik::synthetics::v202101beta1::Region* release_region();
  ::kentik::synthetics::v202101beta1::Region* mutable_region();
  void set_allocated_region(::kentik::synthetics::v202101beta1::Region* region);
  private:
  const ::kentik::synthetics::v202101beta1::Region& _internal_region() const;
  ::kentik::synthetics::v202101beta1::Region* _internal_mutable_region();
  public:
  void unsafe_arena_set_allocated_region(
      ::kentik::synthetics::v202101beta1::Region* region);
  ::kentik::synthetics::v202101beta1::Region* unsafe_arena_release_region();

  // .kentik.synthetics.v202101beta1.City city = 3[json_name = "city"];
  bool has_city() const;
  private:
  bool _internal_has_city() const;
  public:
  void clear_city();
  const ::kentik::synthetics::v202101beta1::City& city() const;
  ::kentik::synthetics::v202101beta1::City* release_city();
  ::kentik::synthetics::v202101beta1::City* mutable_city();
  void set_allocated_city(::kentik::synthetics::v202101beta1::City* city);
  private:
  const ::kentik::synthetics::v202101beta1::City& _internal_city() const;
  ::kentik::synthetics::v202101beta1::City* _internal_mutable_city();
  public:
  void unsafe_arena_set_allocated_city(
      ::kentik::synthetics::v202101beta1::City* city);
  ::kentik::synthetics::v202101beta1::City* unsafe_arena_release_city();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Geo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Country* country_;
  ::kentik::synthetics::v202101beta1::Region* region_;
  ::kentik::synthetics::v202101beta1::City* city_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DNS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.DNS) */ {
 public:
  inline DNS() : DNS(nullptr) {};
  virtual ~DNS();

  DNS(const DNS& from);
  DNS(DNS&& from) noexcept
    : DNS() {
    *this = ::std::move(from);
  }

  inline DNS& operator=(const DNS& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNS& operator=(DNS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DNS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNS* internal_default_instance() {
    return reinterpret_cast<const DNS*>(
               &_DNS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DNS& a, DNS& b) {
    a.Swap(&b);
  }
  inline void Swap(DNS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DNS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DNS* New() const final {
    return CreateMaybeMessage<DNS>(nullptr);
  }

  DNS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DNS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DNS& from);
  void MergeFrom(const DNS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.DNS";
  }
  protected:
  explicit DNS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1[json_name = "name"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.DNS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class IPInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.IPInfo) */ {
 public:
  inline IPInfo() : IPInfo(nullptr) {};
  virtual ~IPInfo();

  IPInfo(const IPInfo& from);
  IPInfo(IPInfo&& from) noexcept
    : IPInfo() {
    *this = ::std::move(from);
  }

  inline IPInfo& operator=(const IPInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline IPInfo& operator=(IPInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IPInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPInfo* internal_default_instance() {
    return reinterpret_cast<const IPInfo*>(
               &_IPInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(IPInfo& a, IPInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(IPInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IPInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IPInfo* New() const final {
    return CreateMaybeMessage<IPInfo>(nullptr);
  }

  IPInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IPInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IPInfo& from);
  void MergeFrom(const IPInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.IPInfo";
  }
  protected:
  explicit IPInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kDeviceIdFieldNumber = 5,
    kSiteIdFieldNumber = 6,
    kEgressFieldNumber = 7,
    kAsnFieldNumber = 2,
    kGeoFieldNumber = 3,
    kDnsFieldNumber = 4,
  };
  // string ip = 1[json_name = "ip"];
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string device_id = 5[json_name = "deviceId"];
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string site_id = 6[json_name = "siteId"];
  void clear_site_id();
  const std::string& site_id() const;
  void set_site_id(const std::string& value);
  void set_site_id(std::string&& value);
  void set_site_id(const char* value);
  void set_site_id(const char* value, size_t size);
  std::string* mutable_site_id();
  std::string* release_site_id();
  void set_allocated_site_id(std::string* site_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_id(
      std::string* site_id);
  private:
  const std::string& _internal_site_id() const;
  void _internal_set_site_id(const std::string& value);
  std::string* _internal_mutable_site_id();
  public:

  // string egress = 7[json_name = "egress"];
  void clear_egress();
  const std::string& egress() const;
  void set_egress(const std::string& value);
  void set_egress(std::string&& value);
  void set_egress(const char* value);
  void set_egress(const char* value, size_t size);
  std::string* mutable_egress();
  std::string* release_egress();
  void set_allocated_egress(std::string* egress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_egress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_egress(
      std::string* egress);
  private:
  const std::string& _internal_egress() const;
  void _internal_set_egress(const std::string& value);
  std::string* _internal_mutable_egress();
  public:

  // .kentik.synthetics.v202101beta1.ASN asn = 2[json_name = "asn"];
  bool has_asn() const;
  private:
  bool _internal_has_asn() const;
  public:
  void clear_asn();
  const ::kentik::synthetics::v202101beta1::ASN& asn() const;
  ::kentik::synthetics::v202101beta1::ASN* release_asn();
  ::kentik::synthetics::v202101beta1::ASN* mutable_asn();
  void set_allocated_asn(::kentik::synthetics::v202101beta1::ASN* asn);
  private:
  const ::kentik::synthetics::v202101beta1::ASN& _internal_asn() const;
  ::kentik::synthetics::v202101beta1::ASN* _internal_mutable_asn();
  public:
  void unsafe_arena_set_allocated_asn(
      ::kentik::synthetics::v202101beta1::ASN* asn);
  ::kentik::synthetics::v202101beta1::ASN* unsafe_arena_release_asn();

  // .kentik.synthetics.v202101beta1.Geo geo = 3[json_name = "geo"];
  bool has_geo() const;
  private:
  bool _internal_has_geo() const;
  public:
  void clear_geo();
  const ::kentik::synthetics::v202101beta1::Geo& geo() const;
  ::kentik::synthetics::v202101beta1::Geo* release_geo();
  ::kentik::synthetics::v202101beta1::Geo* mutable_geo();
  void set_allocated_geo(::kentik::synthetics::v202101beta1::Geo* geo);
  private:
  const ::kentik::synthetics::v202101beta1::Geo& _internal_geo() const;
  ::kentik::synthetics::v202101beta1::Geo* _internal_mutable_geo();
  public:
  void unsafe_arena_set_allocated_geo(
      ::kentik::synthetics::v202101beta1::Geo* geo);
  ::kentik::synthetics::v202101beta1::Geo* unsafe_arena_release_geo();

  // .kentik.synthetics.v202101beta1.DNS dns = 4[json_name = "dns"];
  bool has_dns() const;
  private:
  bool _internal_has_dns() const;
  public:
  void clear_dns();
  const ::kentik::synthetics::v202101beta1::DNS& dns() const;
  ::kentik::synthetics::v202101beta1::DNS* release_dns();
  ::kentik::synthetics::v202101beta1::DNS* mutable_dns();
  void set_allocated_dns(::kentik::synthetics::v202101beta1::DNS* dns);
  private:
  const ::kentik::synthetics::v202101beta1::DNS& _internal_dns() const;
  ::kentik::synthetics::v202101beta1::DNS* _internal_mutable_dns();
  public:
  void unsafe_arena_set_allocated_dns(
      ::kentik::synthetics::v202101beta1::DNS* dns);
  ::kentik::synthetics::v202101beta1::DNS* unsafe_arena_release_dns();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.IPInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr egress_;
  ::kentik::synthetics::v202101beta1::ASN* asn_;
  ::kentik::synthetics::v202101beta1::Geo* geo_;
  ::kentik::synthetics::v202101beta1::DNS* dns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class IDByIP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.IDByIP) */ {
 public:
  inline IDByIP() : IDByIP(nullptr) {};
  virtual ~IDByIP();

  IDByIP(const IDByIP& from);
  IDByIP(IDByIP&& from) noexcept
    : IDByIP() {
    *this = ::std::move(from);
  }

  inline IDByIP& operator=(const IDByIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline IDByIP& operator=(IDByIP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IDByIP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IDByIP* internal_default_instance() {
    return reinterpret_cast<const IDByIP*>(
               &_IDByIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(IDByIP& a, IDByIP& b) {
    a.Swap(&b);
  }
  inline void Swap(IDByIP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IDByIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IDByIP* New() const final {
    return CreateMaybeMessage<IDByIP>(nullptr);
  }

  IDByIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IDByIP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IDByIP& from);
  void MergeFrom(const IDByIP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IDByIP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.IDByIP";
  }
  protected:
  explicit IDByIP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIpFieldNumber = 2,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string ip = 2[json_name = "ip"];
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.IDByIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TracerouteLookup PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TracerouteLookup) */ {
 public:
  inline TracerouteLookup() : TracerouteLookup(nullptr) {};
  virtual ~TracerouteLookup();

  TracerouteLookup(const TracerouteLookup& from);
  TracerouteLookup(TracerouteLookup&& from) noexcept
    : TracerouteLookup() {
    *this = ::std::move(from);
  }

  inline TracerouteLookup& operator=(const TracerouteLookup& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracerouteLookup& operator=(TracerouteLookup&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TracerouteLookup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracerouteLookup* internal_default_instance() {
    return reinterpret_cast<const TracerouteLookup*>(
               &_TracerouteLookup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(TracerouteLookup& a, TracerouteLookup& b) {
    a.Swap(&b);
  }
  inline void Swap(TracerouteLookup* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracerouteLookup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracerouteLookup* New() const final {
    return CreateMaybeMessage<TracerouteLookup>(nullptr);
  }

  TracerouteLookup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracerouteLookup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TracerouteLookup& from);
  void MergeFrom(const TracerouteLookup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracerouteLookup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TracerouteLookup";
  }
  protected:
  explicit TracerouteLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdByIpFieldNumber = 1,
    kAgentsFieldNumber = 2,
    kAsnsFieldNumber = 3,
    kDeviceIdByIpFieldNumber = 4,
    kSiteIdByIpFieldNumber = 5,
    kIpsFieldNumber = 6,
  };
  // repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1[json_name = "agentIdByIp"];
  int agent_id_by_ip_size() const;
  private:
  int _internal_agent_id_by_ip_size() const;
  public:
  void clear_agent_id_by_ip();
  ::kentik::synthetics::v202101beta1::IDByIP* mutable_agent_id_by_ip(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >*
      mutable_agent_id_by_ip();
  private:
  const ::kentik::synthetics::v202101beta1::IDByIP& _internal_agent_id_by_ip(int index) const;
  ::kentik::synthetics::v202101beta1::IDByIP* _internal_add_agent_id_by_ip();
  public:
  const ::kentik::synthetics::v202101beta1::IDByIP& agent_id_by_ip(int index) const;
  ::kentik::synthetics::v202101beta1::IDByIP* add_agent_id_by_ip();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >&
      agent_id_by_ip() const;

  // repeated .kentik.synthetics.v202101beta1.Agent agents = 2[json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::kentik::synthetics::v202101beta1::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent >*
      mutable_agents();
  private:
  const ::kentik::synthetics::v202101beta1::Agent& _internal_agents(int index) const;
  ::kentik::synthetics::v202101beta1::Agent* _internal_add_agents();
  public:
  const ::kentik::synthetics::v202101beta1::Agent& agents(int index) const;
  ::kentik::synthetics::v202101beta1::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent >&
      agents() const;

  // repeated .kentik.synthetics.v202101beta1.ASN asns = 3[json_name = "asns"];
  int asns_size() const;
  private:
  int _internal_asns_size() const;
  public:
  void clear_asns();
  ::kentik::synthetics::v202101beta1::ASN* mutable_asns(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::ASN >*
      mutable_asns();
  private:
  const ::kentik::synthetics::v202101beta1::ASN& _internal_asns(int index) const;
  ::kentik::synthetics::v202101beta1::ASN* _internal_add_asns();
  public:
  const ::kentik::synthetics::v202101beta1::ASN& asns(int index) const;
  ::kentik::synthetics::v202101beta1::ASN* add_asns();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::ASN >&
      asns() const;

  // repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4[json_name = "deviceIdByIp"];
  int device_id_by_ip_size() const;
  private:
  int _internal_device_id_by_ip_size() const;
  public:
  void clear_device_id_by_ip();
  ::kentik::synthetics::v202101beta1::IDByIP* mutable_device_id_by_ip(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >*
      mutable_device_id_by_ip();
  private:
  const ::kentik::synthetics::v202101beta1::IDByIP& _internal_device_id_by_ip(int index) const;
  ::kentik::synthetics::v202101beta1::IDByIP* _internal_add_device_id_by_ip();
  public:
  const ::kentik::synthetics::v202101beta1::IDByIP& device_id_by_ip(int index) const;
  ::kentik::synthetics::v202101beta1::IDByIP* add_device_id_by_ip();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >&
      device_id_by_ip() const;

  // repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5[json_name = "siteIdByIp"];
  int site_id_by_ip_size() const;
  private:
  int _internal_site_id_by_ip_size() const;
  public:
  void clear_site_id_by_ip();
  ::kentik::synthetics::v202101beta1::IDByIP* mutable_site_id_by_ip(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >*
      mutable_site_id_by_ip();
  private:
  const ::kentik::synthetics::v202101beta1::IDByIP& _internal_site_id_by_ip(int index) const;
  ::kentik::synthetics::v202101beta1::IDByIP* _internal_add_site_id_by_ip();
  public:
  const ::kentik::synthetics::v202101beta1::IDByIP& site_id_by_ip(int index) const;
  ::kentik::synthetics::v202101beta1::IDByIP* add_site_id_by_ip();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >&
      site_id_by_ip() const;

  // repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6[json_name = "ips"];
  int ips_size() const;
  private:
  int _internal_ips_size() const;
  public:
  void clear_ips();
  ::kentik::synthetics::v202101beta1::IPInfo* mutable_ips(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IPInfo >*
      mutable_ips();
  private:
  const ::kentik::synthetics::v202101beta1::IPInfo& _internal_ips(int index) const;
  ::kentik::synthetics::v202101beta1::IPInfo* _internal_add_ips();
  public:
  const ::kentik::synthetics::v202101beta1::IPInfo& ips(int index) const;
  ::kentik::synthetics::v202101beta1::IPInfo* add_ips();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IPInfo >&
      ips() const;

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TracerouteLookup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP > agent_id_by_ip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent > agents_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::ASN > asns_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP > device_id_by_ip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP > site_id_by_ip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IPInfo > ips_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TraceHop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TraceHop) */ {
 public:
  inline TraceHop() : TraceHop(nullptr) {};
  virtual ~TraceHop();

  TraceHop(const TraceHop& from);
  TraceHop(TraceHop&& from) noexcept
    : TraceHop() {
    *this = ::std::move(from);
  }

  inline TraceHop& operator=(const TraceHop& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceHop& operator=(TraceHop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceHop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceHop* internal_default_instance() {
    return reinterpret_cast<const TraceHop*>(
               &_TraceHop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(TraceHop& a, TraceHop& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceHop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceHop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceHop* New() const final {
    return CreateMaybeMessage<TraceHop>(nullptr);
  }

  TraceHop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceHop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceHop& from);
  void MergeFrom(const TraceHop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceHop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TraceHop";
  }
  protected:
  explicit TraceHop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kTtlFieldNumber = 1,
    kLatencyFieldNumber = 4,
    kMinExpectedLatencyFieldNumber = 5,
    kAsnFieldNumber = 6,
    kSiteFieldNumber = 7,
    kTimeoutFieldNumber = 3,
    kTargetFieldNumber = 9,
    kTraceEndFieldNumber = 10,
    kRegionFieldNumber = 8,
  };
  // string ip = 2[json_name = "ip"];
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 ttl = 1[json_name = "ttl"];
  void clear_ttl();
  ::PROTOBUF_NAMESPACE_ID::int32 ttl() const;
  void set_ttl(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ttl() const;
  void _internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 latency = 4[json_name = "latency"];
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::int32 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min_expected_latency = 5[json_name = "minExpectedLatency"];
  void clear_min_expected_latency();
  ::PROTOBUF_NAMESPACE_ID::int32 min_expected_latency() const;
  void set_min_expected_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_expected_latency() const;
  void _internal_set_min_expected_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 asn = 6[json_name = "asn"];
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::int32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 site = 7[json_name = "site"];
  void clear_site();
  ::PROTOBUF_NAMESPACE_ID::int32 site() const;
  void set_site(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_site() const;
  void _internal_set_site(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool timeout = 3[json_name = "timeout"];
  void clear_timeout();
  bool timeout() const;
  void set_timeout(bool value);
  private:
  bool _internal_timeout() const;
  void _internal_set_timeout(bool value);
  public:

  // bool target = 9[json_name = "target"];
  void clear_target();
  bool target() const;
  void set_target(bool value);
  private:
  bool _internal_target() const;
  void _internal_set_target(bool value);
  public:

  // bool trace_end = 10[json_name = "traceEnd"];
  void clear_trace_end();
  bool trace_end() const;
  void set_trace_end(bool value);
  private:
  bool _internal_trace_end() const;
  void _internal_set_trace_end(bool value);
  public:

  // int32 region = 8[json_name = "region"];
  void clear_region();
  ::PROTOBUF_NAMESPACE_ID::int32 region() const;
  void set_region(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_region() const;
  void _internal_set_region(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TraceHop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 ttl_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_expected_latency_;
  ::PROTOBUF_NAMESPACE_ID::int32 asn_;
  ::PROTOBUF_NAMESPACE_ID::int32 site_;
  bool timeout_;
  bool target_;
  bool trace_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 region_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TraceProbe PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TraceProbe) */ {
 public:
  inline TraceProbe() : TraceProbe(nullptr) {};
  virtual ~TraceProbe();

  TraceProbe(const TraceProbe& from);
  TraceProbe(TraceProbe&& from) noexcept
    : TraceProbe() {
    *this = ::std::move(from);
  }

  inline TraceProbe& operator=(const TraceProbe& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceProbe& operator=(TraceProbe&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceProbe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceProbe* internal_default_instance() {
    return reinterpret_cast<const TraceProbe*>(
               &_TraceProbe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(TraceProbe& a, TraceProbe& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceProbe* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceProbe* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceProbe* New() const final {
    return CreateMaybeMessage<TraceProbe>(nullptr);
  }

  TraceProbe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceProbe>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceProbe& from);
  void MergeFrom(const TraceProbe& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceProbe* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TraceProbe";
  }
  protected:
  explicit TraceProbe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsPathFieldNumber = 1,
    kRegionPathFieldNumber = 4,
    kSitePathFieldNumber = 5,
    kHopsFieldNumber = 6,
    kCompletedFieldNumber = 2,
    kHopCountFieldNumber = 3,
  };
  // repeated int32 as_path = 1[json_name = "asPath"];
  int as_path_size() const;
  private:
  int _internal_as_path_size() const;
  public:
  void clear_as_path();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_as_path(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_as_path() const;
  void _internal_add_as_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_as_path();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 as_path(int index) const;
  void set_as_path(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_as_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      as_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_as_path();

  // repeated string region_path = 4[json_name = "regionPath"];
  int region_path_size() const;
  private:
  int _internal_region_path_size() const;
  public:
  void clear_region_path();
  const std::string& region_path(int index) const;
  std::string* mutable_region_path(int index);
  void set_region_path(int index, const std::string& value);
  void set_region_path(int index, std::string&& value);
  void set_region_path(int index, const char* value);
  void set_region_path(int index, const char* value, size_t size);
  std::string* add_region_path();
  void add_region_path(const std::string& value);
  void add_region_path(std::string&& value);
  void add_region_path(const char* value);
  void add_region_path(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& region_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_region_path();
  private:
  const std::string& _internal_region_path(int index) const;
  std::string* _internal_add_region_path();
  public:

  // repeated int32 site_path = 5[json_name = "sitePath"];
  int site_path_size() const;
  private:
  int _internal_site_path_size() const;
  public:
  void clear_site_path();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_site_path(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_site_path() const;
  void _internal_add_site_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_site_path();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 site_path(int index) const;
  void set_site_path(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_site_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      site_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_site_path();

  // repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6[json_name = "hops"];
  int hops_size() const;
  private:
  int _internal_hops_size() const;
  public:
  void clear_hops();
  ::kentik::synthetics::v202101beta1::TraceHop* mutable_hops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceHop >*
      mutable_hops();
  private:
  const ::kentik::synthetics::v202101beta1::TraceHop& _internal_hops(int index) const;
  ::kentik::synthetics::v202101beta1::TraceHop* _internal_add_hops();
  public:
  const ::kentik::synthetics::v202101beta1::TraceHop& hops(int index) const;
  ::kentik::synthetics::v202101beta1::TraceHop* add_hops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceHop >&
      hops() const;

  // bool completed = 2[json_name = "completed"];
  void clear_completed();
  bool completed() const;
  void set_completed(bool value);
  private:
  bool _internal_completed() const;
  void _internal_set_completed(bool value);
  public:

  // int32 hop_count = 3[json_name = "hopCount"];
  void clear_hop_count();
  ::PROTOBUF_NAMESPACE_ID::int32 hop_count() const;
  void set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hop_count() const;
  void _internal_set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TraceProbe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > as_path_;
  mutable std::atomic<int> _as_path_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> region_path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > site_path_;
  mutable std::atomic<int> _site_path_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceHop > hops_;
  bool completed_;
  ::PROTOBUF_NAMESPACE_ID::int32 hop_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Trace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Trace) */ {
 public:
  inline Trace() : Trace(nullptr) {};
  virtual ~Trace();

  Trace(const Trace& from);
  Trace(Trace&& from) noexcept
    : Trace() {
    *this = ::std::move(from);
  }

  inline Trace& operator=(const Trace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trace& operator=(Trace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Trace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Trace* internal_default_instance() {
    return reinterpret_cast<const Trace*>(
               &_Trace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(Trace& a, Trace& b) {
    a.Swap(&b);
  }
  inline void Swap(Trace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trace* New() const final {
    return CreateMaybeMessage<Trace>(nullptr);
  }

  Trace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Trace& from);
  void MergeFrom(const Trace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Trace";
  }
  protected:
  explicit Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProbesFieldNumber = 5,
    kAgentIdFieldNumber = 1,
    kAgentIpFieldNumber = 2,
    kTargetIpFieldNumber = 3,
    kHopCountFieldNumber = 4,
  };
  // repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5[json_name = "probes"];
  int probes_size() const;
  private:
  int _internal_probes_size() const;
  public:
  void clear_probes();
  ::kentik::synthetics::v202101beta1::TraceProbe* mutable_probes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceProbe >*
      mutable_probes();
  private:
  const ::kentik::synthetics::v202101beta1::TraceProbe& _internal_probes(int index) const;
  ::kentik::synthetics::v202101beta1::TraceProbe* _internal_add_probes();
  public:
  const ::kentik::synthetics::v202101beta1::TraceProbe& probes(int index) const;
  ::kentik::synthetics::v202101beta1::TraceProbe* add_probes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceProbe >&
      probes() const;

  // string agent_id = 1[json_name = "agentId"];
  void clear_agent_id();
  const std::string& agent_id() const;
  void set_agent_id(const std::string& value);
  void set_agent_id(std::string&& value);
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  std::string* mutable_agent_id();
  std::string* release_agent_id();
  void set_allocated_agent_id(std::string* agent_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_agent_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_agent_id(
      std::string* agent_id);
  private:
  const std::string& _internal_agent_id() const;
  void _internal_set_agent_id(const std::string& value);
  std::string* _internal_mutable_agent_id();
  public:

  // string agent_ip = 2[json_name = "agentIp"];
  void clear_agent_ip();
  const std::string& agent_ip() const;
  void set_agent_ip(const std::string& value);
  void set_agent_ip(std::string&& value);
  void set_agent_ip(const char* value);
  void set_agent_ip(const char* value, size_t size);
  std::string* mutable_agent_ip();
  std::string* release_agent_ip();
  void set_allocated_agent_ip(std::string* agent_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_agent_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_agent_ip(
      std::string* agent_ip);
  private:
  const std::string& _internal_agent_ip() const;
  void _internal_set_agent_ip(const std::string& value);
  std::string* _internal_mutable_agent_ip();
  public:

  // string target_ip = 3[json_name = "targetIp"];
  void clear_target_ip();
  const std::string& target_ip() const;
  void set_target_ip(const std::string& value);
  void set_target_ip(std::string&& value);
  void set_target_ip(const char* value);
  void set_target_ip(const char* value, size_t size);
  std::string* mutable_target_ip();
  std::string* release_target_ip();
  void set_allocated_target_ip(std::string* target_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_ip(
      std::string* target_ip);
  private:
  const std::string& _internal_target_ip() const;
  void _internal_set_target_ip(const std::string& value);
  std::string* _internal_mutable_target_ip();
  public:

  // int32 hop_count = 4[json_name = "hopCount"];
  void clear_hop_count();
  ::PROTOBUF_NAMESPACE_ID::int32 hop_count() const;
  void set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hop_count() const;
  void _internal_set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Trace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceProbe > probes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 hop_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Stats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.Stats) */ {
 public:
  inline Stats() : Stats(nullptr) {};
  virtual ~Stats();

  Stats(const Stats& from);
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return CreateMaybeMessage<Stats>(nullptr);
  }

  Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.Stats";
  }
  protected:
  explicit Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageFieldNumber = 1,
    kMaxFieldNumber = 2,
    kTotalFieldNumber = 3,
  };
  // int32 average = 1[json_name = "average"];
  void clear_average();
  ::PROTOBUF_NAMESPACE_ID::int32 average() const;
  void set_average(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average() const;
  void _internal_set_average(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max = 2[json_name = "max"];
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total = 3[json_name = "total"];
  void clear_total();
  ::PROTOBUF_NAMESPACE_ID::int32 total() const;
  void set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total() const;
  void _internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TracerouteResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TracerouteResult) */ {
 public:
  inline TracerouteResult() : TracerouteResult(nullptr) {};
  virtual ~TracerouteResult();

  TracerouteResult(const TracerouteResult& from);
  TracerouteResult(TracerouteResult&& from) noexcept
    : TracerouteResult() {
    *this = ::std::move(from);
  }

  inline TracerouteResult& operator=(const TracerouteResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracerouteResult& operator=(TracerouteResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TracerouteResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracerouteResult* internal_default_instance() {
    return reinterpret_cast<const TracerouteResult*>(
               &_TracerouteResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TracerouteResult& a, TracerouteResult& b) {
    a.Swap(&b);
  }
  inline void Swap(TracerouteResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracerouteResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracerouteResult* New() const final {
    return CreateMaybeMessage<TracerouteResult>(nullptr);
  }

  TracerouteResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracerouteResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TracerouteResult& from);
  void MergeFrom(const TracerouteResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracerouteResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TracerouteResult";
  }
  protected:
  explicit TracerouteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracesFieldNumber = 2,
    kTimeFieldNumber = 1,
    kCountFieldNumber = 4,
    kDistanceFieldNumber = 5,
    kHopCountFieldNumber = 3,
  };
  // repeated .kentik.synthetics.v202101beta1.Trace traces = 2[json_name = "traces"];
  int traces_size() const;
  private:
  int _internal_traces_size() const;
  public:
  void clear_traces();
  ::kentik::synthetics::v202101beta1::Trace* mutable_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Trace >*
      mutable_traces();
  private:
  const ::kentik::synthetics::v202101beta1::Trace& _internal_traces(int index) const;
  ::kentik::synthetics::v202101beta1::Trace* _internal_add_traces();
  public:
  const ::kentik::synthetics::v202101beta1::Trace& traces(int index) const;
  ::kentik::synthetics::v202101beta1::Trace* add_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Trace >&
      traces() const;

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .kentik.synthetics.v202101beta1.Stats count = 4[json_name = "count"];
  bool has_count() const;
  private:
  bool _internal_has_count() const;
  public:
  void clear_count();
  const ::kentik::synthetics::v202101beta1::Stats& count() const;
  ::kentik::synthetics::v202101beta1::Stats* release_count();
  ::kentik::synthetics::v202101beta1::Stats* mutable_count();
  void set_allocated_count(::kentik::synthetics::v202101beta1::Stats* count);
  private:
  const ::kentik::synthetics::v202101beta1::Stats& _internal_count() const;
  ::kentik::synthetics::v202101beta1::Stats* _internal_mutable_count();
  public:
  void unsafe_arena_set_allocated_count(
      ::kentik::synthetics::v202101beta1::Stats* count);
  ::kentik::synthetics::v202101beta1::Stats* unsafe_arena_release_count();

  // .kentik.synthetics.v202101beta1.Stats distance = 5[json_name = "distance"];
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  const ::kentik::synthetics::v202101beta1::Stats& distance() const;
  ::kentik::synthetics::v202101beta1::Stats* release_distance();
  ::kentik::synthetics::v202101beta1::Stats* mutable_distance();
  void set_allocated_distance(::kentik::synthetics::v202101beta1::Stats* distance);
  private:
  const ::kentik::synthetics::v202101beta1::Stats& _internal_distance() const;
  ::kentik::synthetics::v202101beta1::Stats* _internal_mutable_distance();
  public:
  void unsafe_arena_set_allocated_distance(
      ::kentik::synthetics::v202101beta1::Stats* distance);
  ::kentik::synthetics::v202101beta1::Stats* unsafe_arena_release_distance();

  // int32 hop_count = 3[json_name = "hopCount"];
  void clear_hop_count();
  ::PROTOBUF_NAMESPACE_ID::int32 hop_count() const;
  void set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hop_count() const;
  void _internal_set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TracerouteResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Trace > traces_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::kentik::synthetics::v202101beta1::Stats* count_;
  ::kentik::synthetics::v202101beta1::Stats* distance_;
  ::PROTOBUF_NAMESPACE_ID::int32 hop_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TracerouteInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.TracerouteInfo) */ {
 public:
  inline TracerouteInfo() : TracerouteInfo(nullptr) {};
  virtual ~TracerouteInfo();

  TracerouteInfo(const TracerouteInfo& from);
  TracerouteInfo(TracerouteInfo&& from) noexcept
    : TracerouteInfo() {
    *this = ::std::move(from);
  }

  inline TracerouteInfo& operator=(const TracerouteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TracerouteInfo& operator=(TracerouteInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TracerouteInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TracerouteInfo* internal_default_instance() {
    return reinterpret_cast<const TracerouteInfo*>(
               &_TracerouteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(TracerouteInfo& a, TracerouteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TracerouteInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TracerouteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TracerouteInfo* New() const final {
    return CreateMaybeMessage<TracerouteInfo>(nullptr);
  }

  TracerouteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TracerouteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TracerouteInfo& from);
  void MergeFrom(const TracerouteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TracerouteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.TracerouteInfo";
  }
  protected:
  explicit TracerouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsTraceRoutesTruncatedFieldNumber = 1,
    kMaxAsnPathCountFieldNumber = 2,
    kMaxSitePathCountFieldNumber = 3,
    kMaxRegionPathCountFieldNumber = 4,
  };
  // bool is_trace_routes_truncated = 1[json_name = "isTraceRoutesTruncated"];
  void clear_is_trace_routes_truncated();
  bool is_trace_routes_truncated() const;
  void set_is_trace_routes_truncated(bool value);
  private:
  bool _internal_is_trace_routes_truncated() const;
  void _internal_set_is_trace_routes_truncated(bool value);
  public:

  // int32 max_asn_path_count = 2[json_name = "maxAsnPathCount"];
  void clear_max_asn_path_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_asn_path_count() const;
  void set_max_asn_path_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_asn_path_count() const;
  void _internal_set_max_asn_path_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_site_path_count = 3[json_name = "maxSitePathCount"];
  void clear_max_site_path_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_site_path_count() const;
  void set_max_site_path_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_site_path_count() const;
  void _internal_set_max_site_path_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_region_path_count = 4[json_name = "maxRegionPathCount"];
  void clear_max_region_path_count();
  ::PROTOBUF_NAMESPACE_ID::int32 max_region_path_count() const;
  void set_max_region_path_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_region_path_count() const;
  void _internal_set_max_region_path_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.TracerouteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_trace_routes_truncated_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_asn_path_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_site_path_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_region_path_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetHealthForTestsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GetHealthForTestsRequest) */ {
 public:
  inline GetHealthForTestsRequest() : GetHealthForTestsRequest(nullptr) {};
  virtual ~GetHealthForTestsRequest();

  GetHealthForTestsRequest(const GetHealthForTestsRequest& from);
  GetHealthForTestsRequest(GetHealthForTestsRequest&& from) noexcept
    : GetHealthForTestsRequest() {
    *this = ::std::move(from);
  }

  inline GetHealthForTestsRequest& operator=(const GetHealthForTestsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHealthForTestsRequest& operator=(GetHealthForTestsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHealthForTestsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHealthForTestsRequest* internal_default_instance() {
    return reinterpret_cast<const GetHealthForTestsRequest*>(
               &_GetHealthForTestsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetHealthForTestsRequest& a, GetHealthForTestsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHealthForTestsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHealthForTestsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHealthForTestsRequest* New() const final {
    return CreateMaybeMessage<GetHealthForTestsRequest>(nullptr);
  }

  GetHealthForTestsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHealthForTestsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHealthForTestsRequest& from);
  void MergeFrom(const GetHealthForTestsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHealthForTestsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GetHealthForTestsRequest";
  }
  protected:
  explicit GetHealthForTestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kAgentIdsFieldNumber = 4,
    kTaskIdsFieldNumber = 5,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kAugmentFieldNumber = 6,
  };
  // repeated string ids = 1[json_name = "ids"];
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string agent_ids = 4[json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  const std::string& agent_ids(int index) const;
  std::string* mutable_agent_ids(int index);
  void set_agent_ids(int index, const std::string& value);
  void set_agent_ids(int index, std::string&& value);
  void set_agent_ids(int index, const char* value);
  void set_agent_ids(int index, const char* value, size_t size);
  std::string* add_agent_ids();
  void add_agent_ids(const std::string& value);
  void add_agent_ids(std::string&& value);
  void add_agent_ids(const char* value);
  void add_agent_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_agent_ids();
  private:
  const std::string& _internal_agent_ids(int index) const;
  std::string* _internal_add_agent_ids();
  public:

  // repeated string task_ids = 5[json_name = "taskIds"];
  int task_ids_size() const;
  private:
  int _internal_task_ids_size() const;
  public:
  void clear_task_ids();
  const std::string& task_ids(int index) const;
  std::string* mutable_task_ids(int index);
  void set_task_ids(int index, const std::string& value);
  void set_task_ids(int index, std::string&& value);
  void set_task_ids(int index, const char* value);
  void set_task_ids(int index, const char* value, size_t size);
  std::string* add_task_ids();
  void add_task_ids(const std::string& value);
  void add_task_ids(std::string&& value);
  void add_task_ids(const char* value);
  void add_task_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& task_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_task_ids();
  private:
  const std::string& _internal_task_ids(int index) const;
  std::string* _internal_add_task_ids();
  public:

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // bool augment = 6[json_name = "augment"];
  void clear_augment();
  bool augment() const;
  void set_augment(bool value);
  private:
  bool _internal_augment() const;
  void _internal_set_augment(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> agent_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> task_ids_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  bool augment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetHealthForTestsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GetHealthForTestsResponse) */ {
 public:
  inline GetHealthForTestsResponse() : GetHealthForTestsResponse(nullptr) {};
  virtual ~GetHealthForTestsResponse();

  GetHealthForTestsResponse(const GetHealthForTestsResponse& from);
  GetHealthForTestsResponse(GetHealthForTestsResponse&& from) noexcept
    : GetHealthForTestsResponse() {
    *this = ::std::move(from);
  }

  inline GetHealthForTestsResponse& operator=(const GetHealthForTestsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHealthForTestsResponse& operator=(GetHealthForTestsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHealthForTestsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHealthForTestsResponse* internal_default_instance() {
    return reinterpret_cast<const GetHealthForTestsResponse*>(
               &_GetHealthForTestsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetHealthForTestsResponse& a, GetHealthForTestsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHealthForTestsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHealthForTestsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHealthForTestsResponse* New() const final {
    return CreateMaybeMessage<GetHealthForTestsResponse>(nullptr);
  }

  GetHealthForTestsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHealthForTestsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHealthForTestsResponse& from);
  void MergeFrom(const GetHealthForTestsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHealthForTestsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GetHealthForTestsResponse";
  }
  protected:
  explicit GetHealthForTestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 1,
  };
  // repeated .kentik.synthetics.v202101beta1.TestHealth health = 1[json_name = "health"];
  int health_size() const;
  private:
  int _internal_health_size() const;
  public:
  void clear_health();
  ::kentik::synthetics::v202101beta1::TestHealth* mutable_health(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TestHealth >*
      mutable_health();
  private:
  const ::kentik::synthetics::v202101beta1::TestHealth& _internal_health(int index) const;
  ::kentik::synthetics::v202101beta1::TestHealth* _internal_add_health();
  public:
  const ::kentik::synthetics::v202101beta1::TestHealth& health(int index) const;
  ::kentik::synthetics::v202101beta1::TestHealth* add_health();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TestHealth >&
      health() const;

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TestHealth > health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetTraceForTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GetTraceForTestRequest) */ {
 public:
  inline GetTraceForTestRequest() : GetTraceForTestRequest(nullptr) {};
  virtual ~GetTraceForTestRequest();

  GetTraceForTestRequest(const GetTraceForTestRequest& from);
  GetTraceForTestRequest(GetTraceForTestRequest&& from) noexcept
    : GetTraceForTestRequest() {
    *this = ::std::move(from);
  }

  inline GetTraceForTestRequest& operator=(const GetTraceForTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTraceForTestRequest& operator=(GetTraceForTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTraceForTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTraceForTestRequest* internal_default_instance() {
    return reinterpret_cast<const GetTraceForTestRequest*>(
               &_GetTraceForTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(GetTraceForTestRequest& a, GetTraceForTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTraceForTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTraceForTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTraceForTestRequest* New() const final {
    return CreateMaybeMessage<GetTraceForTestRequest>(nullptr);
  }

  GetTraceForTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTraceForTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTraceForTestRequest& from);
  void MergeFrom(const GetTraceForTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTraceForTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GetTraceForTestRequest";
  }
  protected:
  explicit GetTraceForTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdsFieldNumber = 4,
    kTargetIpsFieldNumber = 5,
    kIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // repeated string agent_ids = 4[json_name = "agentIds"];
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  const std::string& agent_ids(int index) const;
  std::string* mutable_agent_ids(int index);
  void set_agent_ids(int index, const std::string& value);
  void set_agent_ids(int index, std::string&& value);
  void set_agent_ids(int index, const char* value);
  void set_agent_ids(int index, const char* value, size_t size);
  std::string* add_agent_ids();
  void add_agent_ids(const std::string& value);
  void add_agent_ids(std::string&& value);
  void add_agent_ids(const char* value);
  void add_agent_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_agent_ids();
  private:
  const std::string& _internal_agent_ids(int index) const;
  std::string* _internal_add_agent_ids();
  public:

  // repeated string target_ips = 5[json_name = "targetIps"];
  int target_ips_size() const;
  private:
  int _internal_target_ips_size() const;
  public:
  void clear_target_ips();
  const std::string& target_ips(int index) const;
  std::string* mutable_target_ips(int index);
  void set_target_ips(int index, const std::string& value);
  void set_target_ips(int index, std::string&& value);
  void set_target_ips(int index, const char* value);
  void set_target_ips(int index, const char* value, size_t size);
  std::string* add_target_ips();
  void add_target_ips(const std::string& value);
  void add_target_ips(std::string&& value);
  void add_target_ips(const char* value);
  void add_target_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_ips();
  private:
  const std::string& _internal_target_ips(int index) const;
  std::string* _internal_add_target_ips();
  public:

  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> agent_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_ips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetTraceForTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GetTraceForTestResponse) */ {
 public:
  inline GetTraceForTestResponse() : GetTraceForTestResponse(nullptr) {};
  virtual ~GetTraceForTestResponse();

  GetTraceForTestResponse(const GetTraceForTestResponse& from);
  GetTraceForTestResponse(GetTraceForTestResponse&& from) noexcept
    : GetTraceForTestResponse() {
    *this = ::std::move(from);
  }

  inline GetTraceForTestResponse& operator=(const GetTraceForTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTraceForTestResponse& operator=(GetTraceForTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTraceForTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTraceForTestResponse* internal_default_instance() {
    return reinterpret_cast<const GetTraceForTestResponse*>(
               &_GetTraceForTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(GetTraceForTestResponse& a, GetTraceForTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTraceForTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTraceForTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTraceForTestResponse* New() const final {
    return CreateMaybeMessage<GetTraceForTestResponse>(nullptr);
  }

  GetTraceForTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTraceForTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTraceForTestResponse& from);
  void MergeFrom(const GetTraceForTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTraceForTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GetTraceForTestResponse";
  }
  protected:
  explicit GetTraceForTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTraceRoutesFieldNumber = 2,
    kLookupsFieldNumber = 1,
    kTraceRoutesInfoFieldNumber = 3,
  };
  // repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2[json_name = "traceRoutes"];
  int trace_routes_size() const;
  private:
  int _internal_trace_routes_size() const;
  public:
  void clear_trace_routes();
  ::kentik::synthetics::v202101beta1::TracerouteResult* mutable_trace_routes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TracerouteResult >*
      mutable_trace_routes();
  private:
  const ::kentik::synthetics::v202101beta1::TracerouteResult& _internal_trace_routes(int index) const;
  ::kentik::synthetics::v202101beta1::TracerouteResult* _internal_add_trace_routes();
  public:
  const ::kentik::synthetics::v202101beta1::TracerouteResult& trace_routes(int index) const;
  ::kentik::synthetics::v202101beta1::TracerouteResult* add_trace_routes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TracerouteResult >&
      trace_routes() const;

  // .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1[json_name = "lookups"];
  bool has_lookups() const;
  private:
  bool _internal_has_lookups() const;
  public:
  void clear_lookups();
  const ::kentik::synthetics::v202101beta1::TracerouteLookup& lookups() const;
  ::kentik::synthetics::v202101beta1::TracerouteLookup* release_lookups();
  ::kentik::synthetics::v202101beta1::TracerouteLookup* mutable_lookups();
  void set_allocated_lookups(::kentik::synthetics::v202101beta1::TracerouteLookup* lookups);
  private:
  const ::kentik::synthetics::v202101beta1::TracerouteLookup& _internal_lookups() const;
  ::kentik::synthetics::v202101beta1::TracerouteLookup* _internal_mutable_lookups();
  public:
  void unsafe_arena_set_allocated_lookups(
      ::kentik::synthetics::v202101beta1::TracerouteLookup* lookups);
  ::kentik::synthetics::v202101beta1::TracerouteLookup* unsafe_arena_release_lookups();

  // .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3[json_name = "traceRoutesInfo"];
  bool has_trace_routes_info() const;
  private:
  bool _internal_has_trace_routes_info() const;
  public:
  void clear_trace_routes_info();
  const ::kentik::synthetics::v202101beta1::TracerouteInfo& trace_routes_info() const;
  ::kentik::synthetics::v202101beta1::TracerouteInfo* release_trace_routes_info();
  ::kentik::synthetics::v202101beta1::TracerouteInfo* mutable_trace_routes_info();
  void set_allocated_trace_routes_info(::kentik::synthetics::v202101beta1::TracerouteInfo* trace_routes_info);
  private:
  const ::kentik::synthetics::v202101beta1::TracerouteInfo& _internal_trace_routes_info() const;
  ::kentik::synthetics::v202101beta1::TracerouteInfo* _internal_mutable_trace_routes_info();
  public:
  void unsafe_arena_set_allocated_trace_routes_info(
      ::kentik::synthetics::v202101beta1::TracerouteInfo* trace_routes_info);
  ::kentik::synthetics::v202101beta1::TracerouteInfo* unsafe_arena_release_trace_routes_info();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TracerouteResult > trace_routes_;
  ::kentik::synthetics::v202101beta1::TracerouteLookup* lookups_;
  ::kentik::synthetics::v202101beta1::TracerouteInfo* trace_routes_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ListAgentsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.ListAgentsRequest) */ {
 public:
  inline ListAgentsRequest() : ListAgentsRequest(nullptr) {};
  virtual ~ListAgentsRequest();

  ListAgentsRequest(const ListAgentsRequest& from);
  ListAgentsRequest(ListAgentsRequest&& from) noexcept
    : ListAgentsRequest() {
    *this = ::std::move(from);
  }

  inline ListAgentsRequest& operator=(const ListAgentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAgentsRequest& operator=(ListAgentsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAgentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAgentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAgentsRequest*>(
               &_ListAgentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(ListAgentsRequest& a, ListAgentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAgentsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAgentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAgentsRequest* New() const final {
    return CreateMaybeMessage<ListAgentsRequest>(nullptr);
  }

  ListAgentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAgentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAgentsRequest& from);
  void MergeFrom(const ListAgentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAgentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.ListAgentsRequest";
  }
  protected:
  explicit ListAgentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.ListAgentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ListAgentsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.ListAgentsResponse) */ {
 public:
  inline ListAgentsResponse() : ListAgentsResponse(nullptr) {};
  virtual ~ListAgentsResponse();

  ListAgentsResponse(const ListAgentsResponse& from);
  ListAgentsResponse(ListAgentsResponse&& from) noexcept
    : ListAgentsResponse() {
    *this = ::std::move(from);
  }

  inline ListAgentsResponse& operator=(const ListAgentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAgentsResponse& operator=(ListAgentsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAgentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAgentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAgentsResponse*>(
               &_ListAgentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(ListAgentsResponse& a, ListAgentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAgentsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAgentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAgentsResponse* New() const final {
    return CreateMaybeMessage<ListAgentsResponse>(nullptr);
  }

  ListAgentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAgentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAgentsResponse& from);
  void MergeFrom(const ListAgentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAgentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.ListAgentsResponse";
  }
  protected:
  explicit ListAgentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
    kInvalidAgentsCountFieldNumber = 2,
  };
  // repeated .kentik.synthetics.v202101beta1.Agent agents = 1[json_name = "agents"];
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::kentik::synthetics::v202101beta1::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent >*
      mutable_agents();
  private:
  const ::kentik::synthetics::v202101beta1::Agent& _internal_agents(int index) const;
  ::kentik::synthetics::v202101beta1::Agent* _internal_add_agents();
  public:
  const ::kentik::synthetics::v202101beta1::Agent& agents(int index) const;
  ::kentik::synthetics::v202101beta1::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent >&
      agents() const;

  // uint32 invalid_agents_count = 2[json_name = "invalidAgentsCount"];
  void clear_invalid_agents_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_agents_count() const;
  void set_invalid_agents_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_agents_count() const;
  void _internal_set_invalid_agents_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.ListAgentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent > agents_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_agents_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetAgentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GetAgentRequest) */ {
 public:
  inline GetAgentRequest() : GetAgentRequest(nullptr) {};
  virtual ~GetAgentRequest();

  GetAgentRequest(const GetAgentRequest& from);
  GetAgentRequest(GetAgentRequest&& from) noexcept
    : GetAgentRequest() {
    *this = ::std::move(from);
  }

  inline GetAgentRequest& operator=(const GetAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentRequest& operator=(GetAgentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAgentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAgentRequest* internal_default_instance() {
    return reinterpret_cast<const GetAgentRequest*>(
               &_GetAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GetAgentRequest& a, GetAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAgentRequest* New() const final {
    return CreateMaybeMessage<GetAgentRequest>(nullptr);
  }

  GetAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAgentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAgentRequest& from);
  void MergeFrom(const GetAgentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GetAgentRequest";
  }
  protected:
  explicit GetAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GetAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetAgentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GetAgentResponse) */ {
 public:
  inline GetAgentResponse() : GetAgentResponse(nullptr) {};
  virtual ~GetAgentResponse();

  GetAgentResponse(const GetAgentResponse& from);
  GetAgentResponse(GetAgentResponse&& from) noexcept
    : GetAgentResponse() {
    *this = ::std::move(from);
  }

  inline GetAgentResponse& operator=(const GetAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentResponse& operator=(GetAgentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAgentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAgentResponse* internal_default_instance() {
    return reinterpret_cast<const GetAgentResponse*>(
               &_GetAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GetAgentResponse& a, GetAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAgentResponse* New() const final {
    return CreateMaybeMessage<GetAgentResponse>(nullptr);
  }

  GetAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAgentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAgentResponse& from);
  void MergeFrom(const GetAgentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GetAgentResponse";
  }
  protected:
  explicit GetAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202101beta1::Agent& agent() const;
  ::kentik::synthetics::v202101beta1::Agent* release_agent();
  ::kentik::synthetics::v202101beta1::Agent* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202101beta1::Agent* agent);
  private:
  const ::kentik::synthetics::v202101beta1::Agent& _internal_agent() const;
  ::kentik::synthetics::v202101beta1::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202101beta1::Agent* agent);
  ::kentik::synthetics::v202101beta1::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GetAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Agent* agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PatchAgentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.PatchAgentRequest) */ {
 public:
  inline PatchAgentRequest() : PatchAgentRequest(nullptr) {};
  virtual ~PatchAgentRequest();

  PatchAgentRequest(const PatchAgentRequest& from);
  PatchAgentRequest(PatchAgentRequest&& from) noexcept
    : PatchAgentRequest() {
    *this = ::std::move(from);
  }

  inline PatchAgentRequest& operator=(const PatchAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAgentRequest& operator=(PatchAgentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchAgentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchAgentRequest* internal_default_instance() {
    return reinterpret_cast<const PatchAgentRequest*>(
               &_PatchAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(PatchAgentRequest& a, PatchAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAgentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchAgentRequest* New() const final {
    return CreateMaybeMessage<PatchAgentRequest>(nullptr);
  }

  PatchAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchAgentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchAgentRequest& from);
  void MergeFrom(const PatchAgentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAgentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.PatchAgentRequest";
  }
  protected:
  explicit PatchAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
    kMaskFieldNumber = 2,
  };
  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202101beta1::Agent& agent() const;
  ::kentik::synthetics::v202101beta1::Agent* release_agent();
  ::kentik::synthetics::v202101beta1::Agent* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202101beta1::Agent* agent);
  private:
  const ::kentik::synthetics::v202101beta1::Agent& _internal_agent() const;
  ::kentik::synthetics::v202101beta1::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202101beta1::Agent* agent);
  ::kentik::synthetics::v202101beta1::Agent* unsafe_arena_release_agent();

  // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.PatchAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Agent* agent_;
  PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PatchAgentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.PatchAgentResponse) */ {
 public:
  inline PatchAgentResponse() : PatchAgentResponse(nullptr) {};
  virtual ~PatchAgentResponse();

  PatchAgentResponse(const PatchAgentResponse& from);
  PatchAgentResponse(PatchAgentResponse&& from) noexcept
    : PatchAgentResponse() {
    *this = ::std::move(from);
  }

  inline PatchAgentResponse& operator=(const PatchAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchAgentResponse& operator=(PatchAgentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchAgentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchAgentResponse* internal_default_instance() {
    return reinterpret_cast<const PatchAgentResponse*>(
               &_PatchAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(PatchAgentResponse& a, PatchAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchAgentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchAgentResponse* New() const final {
    return CreateMaybeMessage<PatchAgentResponse>(nullptr);
  }

  PatchAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchAgentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchAgentResponse& from);
  void MergeFrom(const PatchAgentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchAgentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.PatchAgentResponse";
  }
  protected:
  explicit PatchAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202101beta1::Agent& agent() const;
  ::kentik::synthetics::v202101beta1::Agent* release_agent();
  ::kentik::synthetics::v202101beta1::Agent* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202101beta1::Agent* agent);
  private:
  const ::kentik::synthetics::v202101beta1::Agent& _internal_agent() const;
  ::kentik::synthetics::v202101beta1::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202101beta1::Agent* agent);
  ::kentik::synthetics::v202101beta1::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.PatchAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Agent* agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DeleteAgentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.DeleteAgentRequest) */ {
 public:
  inline DeleteAgentRequest() : DeleteAgentRequest(nullptr) {};
  virtual ~DeleteAgentRequest();

  DeleteAgentRequest(const DeleteAgentRequest& from);
  DeleteAgentRequest(DeleteAgentRequest&& from) noexcept
    : DeleteAgentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAgentRequest& operator=(const DeleteAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAgentRequest& operator=(DeleteAgentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAgentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAgentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAgentRequest*>(
               &_DeleteAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(DeleteAgentRequest& a, DeleteAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAgentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAgentRequest* New() const final {
    return CreateMaybeMessage<DeleteAgentRequest>(nullptr);
  }

  DeleteAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAgentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAgentRequest& from);
  void MergeFrom(const DeleteAgentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAgentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.DeleteAgentRequest";
  }
  protected:
  explicit DeleteAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.DeleteAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DeleteAgentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.DeleteAgentResponse) */ {
 public:
  inline DeleteAgentResponse() : DeleteAgentResponse(nullptr) {};
  virtual ~DeleteAgentResponse();

  DeleteAgentResponse(const DeleteAgentResponse& from);
  DeleteAgentResponse(DeleteAgentResponse&& from) noexcept
    : DeleteAgentResponse() {
    *this = ::std::move(from);
  }

  inline DeleteAgentResponse& operator=(const DeleteAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAgentResponse& operator=(DeleteAgentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAgentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAgentResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteAgentResponse*>(
               &_DeleteAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(DeleteAgentResponse& a, DeleteAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAgentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAgentResponse* New() const final {
    return CreateMaybeMessage<DeleteAgentResponse>(nullptr);
  }

  DeleteAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAgentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAgentResponse& from);
  void MergeFrom(const DeleteAgentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAgentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.DeleteAgentResponse";
  }
  protected:
  explicit DeleteAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.DeleteAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ListTestsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.ListTestsRequest) */ {
 public:
  inline ListTestsRequest() : ListTestsRequest(nullptr) {};
  virtual ~ListTestsRequest();

  ListTestsRequest(const ListTestsRequest& from);
  ListTestsRequest(ListTestsRequest&& from) noexcept
    : ListTestsRequest() {
    *this = ::std::move(from);
  }

  inline ListTestsRequest& operator=(const ListTestsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTestsRequest& operator=(ListTestsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTestsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTestsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTestsRequest*>(
               &_ListTestsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ListTestsRequest& a, ListTestsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTestsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTestsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTestsRequest* New() const final {
    return CreateMaybeMessage<ListTestsRequest>(nullptr);
  }

  ListTestsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTestsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTestsRequest& from);
  void MergeFrom(const ListTestsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTestsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.ListTestsRequest";
  }
  protected:
  explicit ListTestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetFieldNumber = 1,
  };
  // bool preset = 1[json_name = "preset"];
  void clear_preset();
  bool preset() const;
  void set_preset(bool value);
  private:
  bool _internal_preset() const;
  void _internal_set_preset(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.ListTestsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool preset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ListTestsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.ListTestsResponse) */ {
 public:
  inline ListTestsResponse() : ListTestsResponse(nullptr) {};
  virtual ~ListTestsResponse();

  ListTestsResponse(const ListTestsResponse& from);
  ListTestsResponse(ListTestsResponse&& from) noexcept
    : ListTestsResponse() {
    *this = ::std::move(from);
  }

  inline ListTestsResponse& operator=(const ListTestsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTestsResponse& operator=(ListTestsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTestsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTestsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTestsResponse*>(
               &_ListTestsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(ListTestsResponse& a, ListTestsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTestsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTestsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTestsResponse* New() const final {
    return CreateMaybeMessage<ListTestsResponse>(nullptr);
  }

  ListTestsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTestsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTestsResponse& from);
  void MergeFrom(const ListTestsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTestsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.ListTestsResponse";
  }
  protected:
  explicit ListTestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestsFieldNumber = 1,
    kInvalidTestsCountFieldNumber = 2,
  };
  // repeated .kentik.synthetics.v202101beta1.Test tests = 1[json_name = "tests"];
  int tests_size() const;
  private:
  int _internal_tests_size() const;
  public:
  void clear_tests();
  ::kentik::synthetics::v202101beta1::Test* mutable_tests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Test >*
      mutable_tests();
  private:
  const ::kentik::synthetics::v202101beta1::Test& _internal_tests(int index) const;
  ::kentik::synthetics::v202101beta1::Test* _internal_add_tests();
  public:
  const ::kentik::synthetics::v202101beta1::Test& tests(int index) const;
  ::kentik::synthetics::v202101beta1::Test* add_tests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Test >&
      tests() const;

  // uint32 invalid_tests_count = 2[json_name = "invalidTestsCount"];
  void clear_invalid_tests_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_tests_count() const;
  void set_invalid_tests_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_tests_count() const;
  void _internal_set_invalid_tests_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.ListTestsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Test > tests_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_tests_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class CreateTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.CreateTestRequest) */ {
 public:
  inline CreateTestRequest() : CreateTestRequest(nullptr) {};
  virtual ~CreateTestRequest();

  CreateTestRequest(const CreateTestRequest& from);
  CreateTestRequest(CreateTestRequest&& from) noexcept
    : CreateTestRequest() {
    *this = ::std::move(from);
  }

  inline CreateTestRequest& operator=(const CreateTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTestRequest& operator=(CreateTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTestRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTestRequest*>(
               &_CreateTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(CreateTestRequest& a, CreateTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTestRequest* New() const final {
    return CreateMaybeMessage<CreateTestRequest>(nullptr);
  }

  CreateTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTestRequest& from);
  void MergeFrom(const CreateTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.CreateTestRequest";
  }
  protected:
  explicit CreateTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202101beta1::Test& test() const;
  ::kentik::synthetics::v202101beta1::Test* release_test();
  ::kentik::synthetics::v202101beta1::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202101beta1::Test* test);
  private:
  const ::kentik::synthetics::v202101beta1::Test& _internal_test() const;
  ::kentik::synthetics::v202101beta1::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202101beta1::Test* test);
  ::kentik::synthetics::v202101beta1::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.CreateTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class CreateTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.CreateTestResponse) */ {
 public:
  inline CreateTestResponse() : CreateTestResponse(nullptr) {};
  virtual ~CreateTestResponse();

  CreateTestResponse(const CreateTestResponse& from);
  CreateTestResponse(CreateTestResponse&& from) noexcept
    : CreateTestResponse() {
    *this = ::std::move(from);
  }

  inline CreateTestResponse& operator=(const CreateTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTestResponse& operator=(CreateTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTestResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTestResponse*>(
               &_CreateTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(CreateTestResponse& a, CreateTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTestResponse* New() const final {
    return CreateMaybeMessage<CreateTestResponse>(nullptr);
  }

  CreateTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTestResponse& from);
  void MergeFrom(const CreateTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.CreateTestResponse";
  }
  protected:
  explicit CreateTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202101beta1::Test& test() const;
  ::kentik::synthetics::v202101beta1::Test* release_test();
  ::kentik::synthetics::v202101beta1::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202101beta1::Test* test);
  private:
  const ::kentik::synthetics::v202101beta1::Test& _internal_test() const;
  ::kentik::synthetics::v202101beta1::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202101beta1::Test* test);
  ::kentik::synthetics::v202101beta1::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.CreateTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GetTestRequest) */ {
 public:
  inline GetTestRequest() : GetTestRequest(nullptr) {};
  virtual ~GetTestRequest();

  GetTestRequest(const GetTestRequest& from);
  GetTestRequest(GetTestRequest&& from) noexcept
    : GetTestRequest() {
    *this = ::std::move(from);
  }

  inline GetTestRequest& operator=(const GetTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTestRequest& operator=(GetTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTestRequest* internal_default_instance() {
    return reinterpret_cast<const GetTestRequest*>(
               &_GetTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GetTestRequest& a, GetTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTestRequest* New() const final {
    return CreateMaybeMessage<GetTestRequest>(nullptr);
  }

  GetTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTestRequest& from);
  void MergeFrom(const GetTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GetTestRequest";
  }
  protected:
  explicit GetTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GetTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.GetTestResponse) */ {
 public:
  inline GetTestResponse() : GetTestResponse(nullptr) {};
  virtual ~GetTestResponse();

  GetTestResponse(const GetTestResponse& from);
  GetTestResponse(GetTestResponse&& from) noexcept
    : GetTestResponse() {
    *this = ::std::move(from);
  }

  inline GetTestResponse& operator=(const GetTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTestResponse& operator=(GetTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTestResponse* internal_default_instance() {
    return reinterpret_cast<const GetTestResponse*>(
               &_GetTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetTestResponse& a, GetTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTestResponse* New() const final {
    return CreateMaybeMessage<GetTestResponse>(nullptr);
  }

  GetTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTestResponse& from);
  void MergeFrom(const GetTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.GetTestResponse";
  }
  protected:
  explicit GetTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202101beta1::Test& test() const;
  ::kentik::synthetics::v202101beta1::Test* release_test();
  ::kentik::synthetics::v202101beta1::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202101beta1::Test* test);
  private:
  const ::kentik::synthetics::v202101beta1::Test& _internal_test() const;
  ::kentik::synthetics::v202101beta1::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202101beta1::Test* test);
  ::kentik::synthetics::v202101beta1::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.GetTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class SetTestStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.SetTestStatusRequest) */ {
 public:
  inline SetTestStatusRequest() : SetTestStatusRequest(nullptr) {};
  virtual ~SetTestStatusRequest();

  SetTestStatusRequest(const SetTestStatusRequest& from);
  SetTestStatusRequest(SetTestStatusRequest&& from) noexcept
    : SetTestStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetTestStatusRequest& operator=(const SetTestStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTestStatusRequest& operator=(SetTestStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTestStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTestStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetTestStatusRequest*>(
               &_SetTestStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(SetTestStatusRequest& a, SetTestStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTestStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTestStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTestStatusRequest* New() const final {
    return CreateMaybeMessage<SetTestStatusRequest>(nullptr);
  }

  SetTestStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTestStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTestStatusRequest& from);
  void MergeFrom(const SetTestStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTestStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.SetTestStatusRequest";
  }
  protected:
  explicit SetTestStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .kentik.synthetics.v202101beta1.TestStatus status = 2[json_name = "status"];
  void clear_status();
  ::kentik::synthetics::v202101beta1::TestStatus status() const;
  void set_status(::kentik::synthetics::v202101beta1::TestStatus value);
  private:
  ::kentik::synthetics::v202101beta1::TestStatus _internal_status() const;
  void _internal_set_status(::kentik::synthetics::v202101beta1::TestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.SetTestStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class SetTestStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.SetTestStatusResponse) */ {
 public:
  inline SetTestStatusResponse() : SetTestStatusResponse(nullptr) {};
  virtual ~SetTestStatusResponse();

  SetTestStatusResponse(const SetTestStatusResponse& from);
  SetTestStatusResponse(SetTestStatusResponse&& from) noexcept
    : SetTestStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetTestStatusResponse& operator=(const SetTestStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTestStatusResponse& operator=(SetTestStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTestStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTestStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetTestStatusResponse*>(
               &_SetTestStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(SetTestStatusResponse& a, SetTestStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTestStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTestStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTestStatusResponse* New() const final {
    return CreateMaybeMessage<SetTestStatusResponse>(nullptr);
  }

  SetTestStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTestStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTestStatusResponse& from);
  void MergeFrom(const SetTestStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTestStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.SetTestStatusResponse";
  }
  protected:
  explicit SetTestStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.SetTestStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PatchTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.PatchTestRequest) */ {
 public:
  inline PatchTestRequest() : PatchTestRequest(nullptr) {};
  virtual ~PatchTestRequest();

  PatchTestRequest(const PatchTestRequest& from);
  PatchTestRequest(PatchTestRequest&& from) noexcept
    : PatchTestRequest() {
    *this = ::std::move(from);
  }

  inline PatchTestRequest& operator=(const PatchTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchTestRequest& operator=(PatchTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchTestRequest* internal_default_instance() {
    return reinterpret_cast<const PatchTestRequest*>(
               &_PatchTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(PatchTestRequest& a, PatchTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchTestRequest* New() const final {
    return CreateMaybeMessage<PatchTestRequest>(nullptr);
  }

  PatchTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchTestRequest& from);
  void MergeFrom(const PatchTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.PatchTestRequest";
  }
  protected:
  explicit PatchTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
    kMaskFieldNumber = 2,
  };
  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202101beta1::Test& test() const;
  ::kentik::synthetics::v202101beta1::Test* release_test();
  ::kentik::synthetics::v202101beta1::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202101beta1::Test* test);
  private:
  const ::kentik::synthetics::v202101beta1::Test& _internal_test() const;
  ::kentik::synthetics::v202101beta1::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202101beta1::Test* test);
  ::kentik::synthetics::v202101beta1::Test* unsafe_arena_release_test();

  // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
  bool has_mask() const;
  private:
  bool _internal_has_mask() const;
  public:
  void clear_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_mask();
  void set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_mask();
  public:
  void unsafe_arena_set_allocated_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_mask();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.PatchTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Test* test_;
  PROTOBUF_NAMESPACE_ID::FieldMask* mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PatchTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.PatchTestResponse) */ {
 public:
  inline PatchTestResponse() : PatchTestResponse(nullptr) {};
  virtual ~PatchTestResponse();

  PatchTestResponse(const PatchTestResponse& from);
  PatchTestResponse(PatchTestResponse&& from) noexcept
    : PatchTestResponse() {
    *this = ::std::move(from);
  }

  inline PatchTestResponse& operator=(const PatchTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PatchTestResponse& operator=(PatchTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PatchTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PatchTestResponse* internal_default_instance() {
    return reinterpret_cast<const PatchTestResponse*>(
               &_PatchTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(PatchTestResponse& a, PatchTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PatchTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PatchTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PatchTestResponse* New() const final {
    return CreateMaybeMessage<PatchTestResponse>(nullptr);
  }

  PatchTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PatchTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PatchTestResponse& from);
  void MergeFrom(const PatchTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PatchTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.PatchTestResponse";
  }
  protected:
  explicit PatchTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202101beta1::Test& test() const;
  ::kentik::synthetics::v202101beta1::Test* release_test();
  ::kentik::synthetics::v202101beta1::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202101beta1::Test* test);
  private:
  const ::kentik::synthetics::v202101beta1::Test& _internal_test() const;
  ::kentik::synthetics::v202101beta1::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202101beta1::Test* test);
  ::kentik::synthetics::v202101beta1::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.PatchTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202101beta1::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DeleteTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.DeleteTestRequest) */ {
 public:
  inline DeleteTestRequest() : DeleteTestRequest(nullptr) {};
  virtual ~DeleteTestRequest();

  DeleteTestRequest(const DeleteTestRequest& from);
  DeleteTestRequest(DeleteTestRequest&& from) noexcept
    : DeleteTestRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTestRequest& operator=(const DeleteTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTestRequest& operator=(DeleteTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTestRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTestRequest*>(
               &_DeleteTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(DeleteTestRequest& a, DeleteTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTestRequest* New() const final {
    return CreateMaybeMessage<DeleteTestRequest>(nullptr);
  }

  DeleteTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTestRequest& from);
  void MergeFrom(const DeleteTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.DeleteTestRequest";
  }
  protected:
  explicit DeleteTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id"];
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.DeleteTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DeleteTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202101beta1.DeleteTestResponse) */ {
 public:
  inline DeleteTestResponse() : DeleteTestResponse(nullptr) {};
  virtual ~DeleteTestResponse();

  DeleteTestResponse(const DeleteTestResponse& from);
  DeleteTestResponse(DeleteTestResponse&& from) noexcept
    : DeleteTestResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTestResponse& operator=(const DeleteTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTestResponse& operator=(DeleteTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTestResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTestResponse*>(
               &_DeleteTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(DeleteTestResponse& a, DeleteTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTestResponse* New() const final {
    return CreateMaybeMessage<DeleteTestResponse>(nullptr);
  }

  DeleteTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTestResponse& from);
  void MergeFrom(const DeleteTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202101beta1.DeleteTestResponse";
  }
  protected:
  explicit DeleteTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202101beta1.DeleteTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Health

// string health = 1[json_name = "health"];
inline void Health::clear_health() {
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Health::health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Health.health)
  return _internal_health();
}
inline void Health::set_health(const std::string& value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Health.health)
}
inline std::string* Health::mutable_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Health.health)
  return _internal_mutable_health();
}
inline const std::string& Health::_internal_health() const {
  return health_.Get();
}
inline void Health::_internal_set_health(const std::string& value) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Health::set_health(std::string&& value) {
  
  health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Health.health)
}
inline void Health::set_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Health.health)
}
inline void Health::set_health(const char* value,
    size_t size) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Health.health)
}
inline std::string* Health::_internal_mutable_health() {
  
  return health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Health::release_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Health.health)
  return health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Health::set_allocated_health(std::string* health) {
  if (health != nullptr) {
    
  } else {
    
  }
  health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Health.health)
}
inline std::string* Health::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Health.health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Health::unsafe_arena_set_allocated_health(
    std::string* health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health != nullptr) {
    
  } else {
    
  }
  health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Health.health)
}

// .google.protobuf.Timestamp time = 2[json_name = "time"];
inline bool Health::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Health::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Health::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Health::time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Health.time)
  return _internal_time();
}
inline void Health::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Health.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Health::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Health::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Health.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Health::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Health::mutable_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Health.time)
  return _internal_mutable_time();
}
inline void Health::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Health.time)
}

// -------------------------------------------------------------------

// AgentTaskConfig

// uint64 id = 1[json_name = "id"];
inline void AgentTaskConfig::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentTaskConfig::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AgentTaskConfig::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.AgentTaskConfig.id)
  return _internal_id();
}
inline void AgentTaskConfig::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void AgentTaskConfig::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.AgentTaskConfig.id)
}

// repeated string targets = 2[json_name = "targets"];
inline int AgentTaskConfig::_internal_targets_size() const {
  return targets_.size();
}
inline int AgentTaskConfig::targets_size() const {
  return _internal_targets_size();
}
inline void AgentTaskConfig::clear_targets() {
  targets_.Clear();
}
inline std::string* AgentTaskConfig::add_targets() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
  return _internal_add_targets();
}
inline const std::string& AgentTaskConfig::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const std::string& AgentTaskConfig::targets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
  return _internal_targets(index);
}
inline std::string* AgentTaskConfig::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
  return targets_.Mutable(index);
}
inline void AgentTaskConfig::set_targets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
  targets_.Mutable(index)->assign(value);
}
inline void AgentTaskConfig::set_targets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
  targets_.Mutable(index)->assign(std::move(value));
}
inline void AgentTaskConfig::set_targets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
}
inline void AgentTaskConfig::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
}
inline std::string* AgentTaskConfig::_internal_add_targets() {
  return targets_.Add();
}
inline void AgentTaskConfig::add_targets(const std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
}
inline void AgentTaskConfig::add_targets(std::string&& value) {
  targets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
}
inline void AgentTaskConfig::add_targets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
}
inline void AgentTaskConfig::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AgentTaskConfig::targets() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
  return targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AgentTaskConfig::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.AgentTaskConfig.targets)
  return &targets_;
}

// -------------------------------------------------------------------

// TestHealth

// string test_id = 1[json_name = "testId"];
inline void TestHealth::clear_test_id() {
  test_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestHealth::test_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestHealth.test_id)
  return _internal_test_id();
}
inline void TestHealth::set_test_id(const std::string& value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestHealth.test_id)
}
inline std::string* TestHealth::mutable_test_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestHealth.test_id)
  return _internal_mutable_test_id();
}
inline const std::string& TestHealth::_internal_test_id() const {
  return test_id_.Get();
}
inline void TestHealth::_internal_set_test_id(const std::string& value) {
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestHealth::set_test_id(std::string&& value) {
  
  test_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TestHealth.test_id)
}
inline void TestHealth::set_test_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestHealth.test_id)
}
inline void TestHealth::set_test_id(const char* value,
    size_t size) {
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestHealth.test_id)
}
inline std::string* TestHealth::_internal_mutable_test_id() {
  
  return test_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestHealth::release_test_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestHealth.test_id)
  return test_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestHealth::set_allocated_test_id(std::string* test_id) {
  if (test_id != nullptr) {
    
  } else {
    
  }
  test_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestHealth.test_id)
}
inline std::string* TestHealth::unsafe_arena_release_test_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestHealth.test_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return test_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestHealth::unsafe_arena_set_allocated_test_id(
    std::string* test_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (test_id != nullptr) {
    
  } else {
    
  }
  test_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      test_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestHealth.test_id)
}

// repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2[json_name = "tasks"];
inline int TestHealth::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TestHealth::tasks_size() const {
  return _internal_tasks_size();
}
inline void TestHealth::clear_tasks() {
  tasks_.Clear();
}
inline ::kentik::synthetics::v202101beta1::TaskHealth* TestHealth::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestHealth.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TaskHealth >*
TestHealth::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TestHealth.tasks)
  return &tasks_;
}
inline const ::kentik::synthetics::v202101beta1::TaskHealth& TestHealth::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::TaskHealth& TestHealth::tasks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestHealth.tasks)
  return _internal_tasks(index);
}
inline ::kentik::synthetics::v202101beta1::TaskHealth* TestHealth::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::kentik::synthetics::v202101beta1::TaskHealth* TestHealth::add_tasks() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestHealth.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TaskHealth >&
TestHealth::tasks() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TestHealth.tasks)
  return tasks_;
}

// .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
inline bool TestHealth::_internal_has_overall_health() const {
  return this != internal_default_instance() && overall_health_ != nullptr;
}
inline bool TestHealth::has_overall_health() const {
  return _internal_has_overall_health();
}
inline void TestHealth::clear_overall_health() {
  if (GetArena() == nullptr && overall_health_ != nullptr) {
    delete overall_health_;
  }
  overall_health_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Health& TestHealth::_internal_overall_health() const {
  const ::kentik::synthetics::v202101beta1::Health* p = overall_health_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Health*>(
      &::kentik::synthetics::v202101beta1::_Health_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Health& TestHealth::overall_health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestHealth.overall_health)
  return _internal_overall_health();
}
inline void TestHealth::unsafe_arena_set_allocated_overall_health(
    ::kentik::synthetics::v202101beta1::Health* overall_health) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overall_health_);
  }
  overall_health_ = overall_health;
  if (overall_health) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestHealth.overall_health)
}
inline ::kentik::synthetics::v202101beta1::Health* TestHealth::release_overall_health() {
  auto temp = unsafe_arena_release_overall_health();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Health* TestHealth::unsafe_arena_release_overall_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestHealth.overall_health)
  
  ::kentik::synthetics::v202101beta1::Health* temp = overall_health_;
  overall_health_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Health* TestHealth::_internal_mutable_overall_health() {
  
  if (overall_health_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Health>(GetArena());
    overall_health_ = p;
  }
  return overall_health_;
}
inline ::kentik::synthetics::v202101beta1::Health* TestHealth::mutable_overall_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestHealth.overall_health)
  return _internal_mutable_overall_health();
}
inline void TestHealth::set_allocated_overall_health(::kentik::synthetics::v202101beta1::Health* overall_health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete overall_health_;
  }
  if (overall_health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(overall_health);
    if (message_arena != submessage_arena) {
      overall_health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overall_health, submessage_arena);
    }
    
  } else {
    
  }
  overall_health_ = overall_health;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestHealth.overall_health)
}

// repeated .kentik.synthetics.v202101beta1.Health health_ts = 4[json_name = "healthTs"];
inline int TestHealth::_internal_health_ts_size() const {
  return health_ts_.size();
}
inline int TestHealth::health_ts_size() const {
  return _internal_health_ts_size();
}
inline void TestHealth::clear_health_ts() {
  health_ts_.Clear();
}
inline ::kentik::synthetics::v202101beta1::Health* TestHealth::mutable_health_ts(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestHealth.health_ts)
  return health_ts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Health >*
TestHealth::mutable_health_ts() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TestHealth.health_ts)
  return &health_ts_;
}
inline const ::kentik::synthetics::v202101beta1::Health& TestHealth::_internal_health_ts(int index) const {
  return health_ts_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::Health& TestHealth::health_ts(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestHealth.health_ts)
  return _internal_health_ts(index);
}
inline ::kentik::synthetics::v202101beta1::Health* TestHealth::_internal_add_health_ts() {
  return health_ts_.Add();
}
inline ::kentik::synthetics::v202101beta1::Health* TestHealth::add_health_ts() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestHealth.health_ts)
  return _internal_add_health_ts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Health >&
TestHealth::health_ts() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TestHealth.health_ts)
  return health_ts_;
}

// repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5[json_name = "agentTaskConfig"];
inline int TestHealth::_internal_agent_task_config_size() const {
  return agent_task_config_.size();
}
inline int TestHealth::agent_task_config_size() const {
  return _internal_agent_task_config_size();
}
inline void TestHealth::clear_agent_task_config() {
  agent_task_config_.Clear();
}
inline ::kentik::synthetics::v202101beta1::AgentTaskConfig* TestHealth::mutable_agent_task_config(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestHealth.agent_task_config)
  return agent_task_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentTaskConfig >*
TestHealth::mutable_agent_task_config() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TestHealth.agent_task_config)
  return &agent_task_config_;
}
inline const ::kentik::synthetics::v202101beta1::AgentTaskConfig& TestHealth::_internal_agent_task_config(int index) const {
  return agent_task_config_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::AgentTaskConfig& TestHealth::agent_task_config(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestHealth.agent_task_config)
  return _internal_agent_task_config(index);
}
inline ::kentik::synthetics::v202101beta1::AgentTaskConfig* TestHealth::_internal_add_agent_task_config() {
  return agent_task_config_.Add();
}
inline ::kentik::synthetics::v202101beta1::AgentTaskConfig* TestHealth::add_agent_task_config() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestHealth.agent_task_config)
  return _internal_add_agent_task_config();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentTaskConfig >&
TestHealth::agent_task_config() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TestHealth.agent_task_config)
  return agent_task_config_;
}

// repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6[json_name = "mesh"];
inline int TestHealth::_internal_mesh_size() const {
  return mesh_.size();
}
inline int TestHealth::mesh_size() const {
  return _internal_mesh_size();
}
inline void TestHealth::clear_mesh() {
  mesh_.Clear();
}
inline ::kentik::synthetics::v202101beta1::MeshResponse* TestHealth::mutable_mesh(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestHealth.mesh)
  return mesh_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshResponse >*
TestHealth::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TestHealth.mesh)
  return &mesh_;
}
inline const ::kentik::synthetics::v202101beta1::MeshResponse& TestHealth::_internal_mesh(int index) const {
  return mesh_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::MeshResponse& TestHealth::mesh(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestHealth.mesh)
  return _internal_mesh(index);
}
inline ::kentik::synthetics::v202101beta1::MeshResponse* TestHealth::_internal_add_mesh() {
  return mesh_.Add();
}
inline ::kentik::synthetics::v202101beta1::MeshResponse* TestHealth::add_mesh() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestHealth.mesh)
  return _internal_add_mesh();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshResponse >&
TestHealth::mesh() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TestHealth.mesh)
  return mesh_;
}

// -------------------------------------------------------------------

// TaskHealth

// .kentik.synthetics.v202101beta1.Task task = 1[json_name = "task"];
inline bool TaskHealth::_internal_has_task() const {
  return this != internal_default_instance() && task_ != nullptr;
}
inline bool TaskHealth::has_task() const {
  return _internal_has_task();
}
inline void TaskHealth::clear_task() {
  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Task& TaskHealth::_internal_task() const {
  const ::kentik::synthetics::v202101beta1::Task* p = task_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Task*>(
      &::kentik::synthetics::v202101beta1::_Task_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Task& TaskHealth::task() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TaskHealth.task)
  return _internal_task();
}
inline void TaskHealth::unsafe_arena_set_allocated_task(
    ::kentik::synthetics::v202101beta1::Task* task) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(task_);
  }
  task_ = task;
  if (task) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TaskHealth.task)
}
inline ::kentik::synthetics::v202101beta1::Task* TaskHealth::release_task() {
  auto temp = unsafe_arena_release_task();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Task* TaskHealth::unsafe_arena_release_task() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TaskHealth.task)
  
  ::kentik::synthetics::v202101beta1::Task* temp = task_;
  task_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Task* TaskHealth::_internal_mutable_task() {
  
  if (task_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Task>(GetArena());
    task_ = p;
  }
  return task_;
}
inline ::kentik::synthetics::v202101beta1::Task* TaskHealth::mutable_task() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TaskHealth.task)
  return _internal_mutable_task();
}
inline void TaskHealth::set_allocated_task(::kentik::synthetics::v202101beta1::Task* task) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete task_;
  }
  if (task) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(task);
    if (message_arena != submessage_arena) {
      task = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    
  } else {
    
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TaskHealth.task)
}

// repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2[json_name = "agents"];
inline int TaskHealth::_internal_agents_size() const {
  return agents_.size();
}
inline int TaskHealth::agents_size() const {
  return _internal_agents_size();
}
inline void TaskHealth::clear_agents() {
  agents_.Clear();
}
inline ::kentik::synthetics::v202101beta1::AgentHealth* TaskHealth::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TaskHealth.agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentHealth >*
TaskHealth::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TaskHealth.agents)
  return &agents_;
}
inline const ::kentik::synthetics::v202101beta1::AgentHealth& TaskHealth::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::AgentHealth& TaskHealth::agents(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TaskHealth.agents)
  return _internal_agents(index);
}
inline ::kentik::synthetics::v202101beta1::AgentHealth* TaskHealth::_internal_add_agents() {
  return agents_.Add();
}
inline ::kentik::synthetics::v202101beta1::AgentHealth* TaskHealth::add_agents() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TaskHealth.agents)
  return _internal_add_agents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::AgentHealth >&
TaskHealth::agents() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TaskHealth.agents)
  return agents_;
}

// .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
inline bool TaskHealth::_internal_has_overall_health() const {
  return this != internal_default_instance() && overall_health_ != nullptr;
}
inline bool TaskHealth::has_overall_health() const {
  return _internal_has_overall_health();
}
inline void TaskHealth::clear_overall_health() {
  if (GetArena() == nullptr && overall_health_ != nullptr) {
    delete overall_health_;
  }
  overall_health_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Health& TaskHealth::_internal_overall_health() const {
  const ::kentik::synthetics::v202101beta1::Health* p = overall_health_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Health*>(
      &::kentik::synthetics::v202101beta1::_Health_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Health& TaskHealth::overall_health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TaskHealth.overall_health)
  return _internal_overall_health();
}
inline void TaskHealth::unsafe_arena_set_allocated_overall_health(
    ::kentik::synthetics::v202101beta1::Health* overall_health) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overall_health_);
  }
  overall_health_ = overall_health;
  if (overall_health) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TaskHealth.overall_health)
}
inline ::kentik::synthetics::v202101beta1::Health* TaskHealth::release_overall_health() {
  auto temp = unsafe_arena_release_overall_health();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Health* TaskHealth::unsafe_arena_release_overall_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TaskHealth.overall_health)
  
  ::kentik::synthetics::v202101beta1::Health* temp = overall_health_;
  overall_health_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Health* TaskHealth::_internal_mutable_overall_health() {
  
  if (overall_health_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Health>(GetArena());
    overall_health_ = p;
  }
  return overall_health_;
}
inline ::kentik::synthetics::v202101beta1::Health* TaskHealth::mutable_overall_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TaskHealth.overall_health)
  return _internal_mutable_overall_health();
}
inline void TaskHealth::set_allocated_overall_health(::kentik::synthetics::v202101beta1::Health* overall_health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete overall_health_;
  }
  if (overall_health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(overall_health);
    if (message_arena != submessage_arena) {
      overall_health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overall_health, submessage_arena);
    }
    
  } else {
    
  }
  overall_health_ = overall_health;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TaskHealth.overall_health)
}

// .kentik.synthetics.v202101beta1.Agent target_agent = 4[json_name = "targetAgent"];
inline bool TaskHealth::_internal_has_target_agent() const {
  return this != internal_default_instance() && target_agent_ != nullptr;
}
inline bool TaskHealth::has_target_agent() const {
  return _internal_has_target_agent();
}
inline void TaskHealth::clear_target_agent() {
  if (GetArena() == nullptr && target_agent_ != nullptr) {
    delete target_agent_;
  }
  target_agent_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Agent& TaskHealth::_internal_target_agent() const {
  const ::kentik::synthetics::v202101beta1::Agent* p = target_agent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Agent*>(
      &::kentik::synthetics::v202101beta1::_Agent_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Agent& TaskHealth::target_agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TaskHealth.target_agent)
  return _internal_target_agent();
}
inline void TaskHealth::unsafe_arena_set_allocated_target_agent(
    ::kentik::synthetics::v202101beta1::Agent* target_agent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_agent_);
  }
  target_agent_ = target_agent;
  if (target_agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TaskHealth.target_agent)
}
inline ::kentik::synthetics::v202101beta1::Agent* TaskHealth::release_target_agent() {
  auto temp = unsafe_arena_release_target_agent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* TaskHealth::unsafe_arena_release_target_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TaskHealth.target_agent)
  
  ::kentik::synthetics::v202101beta1::Agent* temp = target_agent_;
  target_agent_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* TaskHealth::_internal_mutable_target_agent() {
  
  if (target_agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Agent>(GetArena());
    target_agent_ = p;
  }
  return target_agent_;
}
inline ::kentik::synthetics::v202101beta1::Agent* TaskHealth::mutable_target_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TaskHealth.target_agent)
  return _internal_mutable_target_agent();
}
inline void TaskHealth::set_allocated_target_agent(::kentik::synthetics::v202101beta1::Agent* target_agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_agent_;
  }
  if (target_agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target_agent);
    if (message_arena != submessage_arena) {
      target_agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_agent, submessage_arena);
    }
    
  } else {
    
  }
  target_agent_ = target_agent;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TaskHealth.target_agent)
}

// -------------------------------------------------------------------

// AgentHealth

// .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
inline bool AgentHealth::_internal_has_agent() const {
  return this != internal_default_instance() && agent_ != nullptr;
}
inline bool AgentHealth::has_agent() const {
  return _internal_has_agent();
}
inline void AgentHealth::clear_agent() {
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Agent& AgentHealth::_internal_agent() const {
  const ::kentik::synthetics::v202101beta1::Agent* p = agent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Agent*>(
      &::kentik::synthetics::v202101beta1::_Agent_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Agent& AgentHealth::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.AgentHealth.agent)
  return _internal_agent();
}
inline void AgentHealth::unsafe_arena_set_allocated_agent(
    ::kentik::synthetics::v202101beta1::Agent* agent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_);
  }
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.AgentHealth.agent)
}
inline ::kentik::synthetics::v202101beta1::Agent* AgentHealth::release_agent() {
  auto temp = unsafe_arena_release_agent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* AgentHealth::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.AgentHealth.agent)
  
  ::kentik::synthetics::v202101beta1::Agent* temp = agent_;
  agent_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* AgentHealth::_internal_mutable_agent() {
  
  if (agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Agent>(GetArena());
    agent_ = p;
  }
  return agent_;
}
inline ::kentik::synthetics::v202101beta1::Agent* AgentHealth::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.AgentHealth.agent)
  return _internal_mutable_agent();
}
inline void AgentHealth::set_allocated_agent(::kentik::synthetics::v202101beta1::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agent_;
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.AgentHealth.agent)
}

// repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2[json_name = "health"];
inline int AgentHealth::_internal_health_size() const {
  return health_.size();
}
inline int AgentHealth::health_size() const {
  return _internal_health_size();
}
inline void AgentHealth::clear_health() {
  health_.Clear();
}
inline ::kentik::synthetics::v202101beta1::HealthMoment* AgentHealth::mutable_health(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.AgentHealth.health)
  return health_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::HealthMoment >*
AgentHealth::mutable_health() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.AgentHealth.health)
  return &health_;
}
inline const ::kentik::synthetics::v202101beta1::HealthMoment& AgentHealth::_internal_health(int index) const {
  return health_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::HealthMoment& AgentHealth::health(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.AgentHealth.health)
  return _internal_health(index);
}
inline ::kentik::synthetics::v202101beta1::HealthMoment* AgentHealth::_internal_add_health() {
  return health_.Add();
}
inline ::kentik::synthetics::v202101beta1::HealthMoment* AgentHealth::add_health() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.AgentHealth.health)
  return _internal_add_health();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::HealthMoment >&
AgentHealth::health() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.AgentHealth.health)
  return health_;
}

// .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
inline bool AgentHealth::_internal_has_overall_health() const {
  return this != internal_default_instance() && overall_health_ != nullptr;
}
inline bool AgentHealth::has_overall_health() const {
  return _internal_has_overall_health();
}
inline void AgentHealth::clear_overall_health() {
  if (GetArena() == nullptr && overall_health_ != nullptr) {
    delete overall_health_;
  }
  overall_health_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Health& AgentHealth::_internal_overall_health() const {
  const ::kentik::synthetics::v202101beta1::Health* p = overall_health_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Health*>(
      &::kentik::synthetics::v202101beta1::_Health_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Health& AgentHealth::overall_health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.AgentHealth.overall_health)
  return _internal_overall_health();
}
inline void AgentHealth::unsafe_arena_set_allocated_overall_health(
    ::kentik::synthetics::v202101beta1::Health* overall_health) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overall_health_);
  }
  overall_health_ = overall_health;
  if (overall_health) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.AgentHealth.overall_health)
}
inline ::kentik::synthetics::v202101beta1::Health* AgentHealth::release_overall_health() {
  auto temp = unsafe_arena_release_overall_health();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Health* AgentHealth::unsafe_arena_release_overall_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.AgentHealth.overall_health)
  
  ::kentik::synthetics::v202101beta1::Health* temp = overall_health_;
  overall_health_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Health* AgentHealth::_internal_mutable_overall_health() {
  
  if (overall_health_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Health>(GetArena());
    overall_health_ = p;
  }
  return overall_health_;
}
inline ::kentik::synthetics::v202101beta1::Health* AgentHealth::mutable_overall_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.AgentHealth.overall_health)
  return _internal_mutable_overall_health();
}
inline void AgentHealth::set_allocated_overall_health(::kentik::synthetics::v202101beta1::Health* overall_health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete overall_health_;
  }
  if (overall_health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(overall_health);
    if (message_arena != submessage_arena) {
      overall_health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overall_health, submessage_arena);
    }
    
  } else {
    
  }
  overall_health_ = overall_health;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.AgentHealth.overall_health)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HealthMoment

// .google.protobuf.Timestamp time = 1[json_name = "time"];
inline bool HealthMoment::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool HealthMoment::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& HealthMoment::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& HealthMoment::time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.time)
  return _internal_time();
}
inline void HealthMoment::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* HealthMoment::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* HealthMoment::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* HealthMoment::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* HealthMoment::mutable_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.time)
  return _internal_mutable_time();
}
inline void HealthMoment::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.time)
}

// string src_ip = 2[json_name = "srcIp"];
inline void HealthMoment::clear_src_ip() {
  src_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthMoment::src_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
  return _internal_src_ip();
}
inline void HealthMoment::set_src_ip(const std::string& value) {
  _internal_set_src_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
}
inline std::string* HealthMoment::mutable_src_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
  return _internal_mutable_src_ip();
}
inline const std::string& HealthMoment::_internal_src_ip() const {
  return src_ip_.Get();
}
inline void HealthMoment::_internal_set_src_ip(const std::string& value) {
  
  src_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthMoment::set_src_ip(std::string&& value) {
  
  src_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
}
inline void HealthMoment::set_src_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  src_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
}
inline void HealthMoment::set_src_ip(const char* value,
    size_t size) {
  
  src_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
}
inline std::string* HealthMoment::_internal_mutable_src_ip() {
  
  return src_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthMoment::release_src_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
  return src_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthMoment::set_allocated_src_ip(std::string* src_ip) {
  if (src_ip != nullptr) {
    
  } else {
    
  }
  src_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), src_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
}
inline std::string* HealthMoment::unsafe_arena_release_src_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return src_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthMoment::unsafe_arena_set_allocated_src_ip(
    std::string* src_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (src_ip != nullptr) {
    
  } else {
    
  }
  src_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      src_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.src_ip)
}

// string dst_ip = 3[json_name = "dstIp"];
inline void HealthMoment::clear_dst_ip() {
  dst_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthMoment::dst_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
  return _internal_dst_ip();
}
inline void HealthMoment::set_dst_ip(const std::string& value) {
  _internal_set_dst_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
}
inline std::string* HealthMoment::mutable_dst_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
  return _internal_mutable_dst_ip();
}
inline const std::string& HealthMoment::_internal_dst_ip() const {
  return dst_ip_.Get();
}
inline void HealthMoment::_internal_set_dst_ip(const std::string& value) {
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthMoment::set_dst_ip(std::string&& value) {
  
  dst_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
}
inline void HealthMoment::set_dst_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
}
inline void HealthMoment::set_dst_ip(const char* value,
    size_t size) {
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
}
inline std::string* HealthMoment::_internal_mutable_dst_ip() {
  
  return dst_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthMoment::release_dst_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
  return dst_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthMoment::set_allocated_dst_ip(std::string* dst_ip) {
  if (dst_ip != nullptr) {
    
  } else {
    
  }
  dst_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
}
inline std::string* HealthMoment::unsafe_arena_release_dst_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dst_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthMoment::unsafe_arena_set_allocated_dst_ip(
    std::string* dst_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dst_ip != nullptr) {
    
  } else {
    
  }
  dst_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dst_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.dst_ip)
}

// double packet_loss = 4[json_name = "packetLoss"];
inline void HealthMoment::clear_packet_loss() {
  packet_loss_ = 0;
}
inline double HealthMoment::_internal_packet_loss() const {
  return packet_loss_;
}
inline double HealthMoment::packet_loss() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.packet_loss)
  return _internal_packet_loss();
}
inline void HealthMoment::_internal_set_packet_loss(double value) {
  
  packet_loss_ = value;
}
inline void HealthMoment::set_packet_loss(double value) {
  _internal_set_packet_loss(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.packet_loss)
}

// uint32 avg_latency = 5[json_name = "avgLatency"];
inline void HealthMoment::clear_avg_latency() {
  avg_latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_avg_latency() const {
  return avg_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::avg_latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.avg_latency)
  return _internal_avg_latency();
}
inline void HealthMoment::_internal_set_avg_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  avg_latency_ = value;
}
inline void HealthMoment::set_avg_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_latency(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.avg_latency)
}

// uint32 avg_weighted_latency = 6[json_name = "avgWeightedLatency"];
inline void HealthMoment::clear_avg_weighted_latency() {
  avg_weighted_latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_avg_weighted_latency() const {
  return avg_weighted_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::avg_weighted_latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.avg_weighted_latency)
  return _internal_avg_weighted_latency();
}
inline void HealthMoment::_internal_set_avg_weighted_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  avg_weighted_latency_ = value;
}
inline void HealthMoment::set_avg_weighted_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_weighted_latency(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.avg_weighted_latency)
}

// uint32 rolling_avg_latency = 7[json_name = "rollingAvgLatency"];
inline void HealthMoment::clear_rolling_avg_latency() {
  rolling_avg_latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_rolling_avg_latency() const {
  return rolling_avg_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::rolling_avg_latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.rolling_avg_latency)
  return _internal_rolling_avg_latency();
}
inline void HealthMoment::_internal_set_rolling_avg_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rolling_avg_latency_ = value;
}
inline void HealthMoment::set_rolling_avg_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rolling_avg_latency(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.rolling_avg_latency)
}

// uint32 rolling_stddev_latency = 8[json_name = "rollingStddevLatency"];
inline void HealthMoment::clear_rolling_stddev_latency() {
  rolling_stddev_latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_rolling_stddev_latency() const {
  return rolling_stddev_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::rolling_stddev_latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.rolling_stddev_latency)
  return _internal_rolling_stddev_latency();
}
inline void HealthMoment::_internal_set_rolling_stddev_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rolling_stddev_latency_ = value;
}
inline void HealthMoment::set_rolling_stddev_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rolling_stddev_latency(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.rolling_stddev_latency)
}

// uint32 rolling_avg_weighted_latency = 9[json_name = "rollingAvgWeightedLatency"];
inline void HealthMoment::clear_rolling_avg_weighted_latency() {
  rolling_avg_weighted_latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_rolling_avg_weighted_latency() const {
  return rolling_avg_weighted_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::rolling_avg_weighted_latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.rolling_avg_weighted_latency)
  return _internal_rolling_avg_weighted_latency();
}
inline void HealthMoment::_internal_set_rolling_avg_weighted_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rolling_avg_weighted_latency_ = value;
}
inline void HealthMoment::set_rolling_avg_weighted_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rolling_avg_weighted_latency(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.rolling_avg_weighted_latency)
}

// string latency_health = 10[json_name = "latencyHealth"];
inline void HealthMoment::clear_latency_health() {
  latency_health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthMoment::latency_health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
  return _internal_latency_health();
}
inline void HealthMoment::set_latency_health(const std::string& value) {
  _internal_set_latency_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
}
inline std::string* HealthMoment::mutable_latency_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
  return _internal_mutable_latency_health();
}
inline const std::string& HealthMoment::_internal_latency_health() const {
  return latency_health_.Get();
}
inline void HealthMoment::_internal_set_latency_health(const std::string& value) {
  
  latency_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthMoment::set_latency_health(std::string&& value) {
  
  latency_health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
}
inline void HealthMoment::set_latency_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  latency_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
}
inline void HealthMoment::set_latency_health(const char* value,
    size_t size) {
  
  latency_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
}
inline std::string* HealthMoment::_internal_mutable_latency_health() {
  
  return latency_health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthMoment::release_latency_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
  return latency_health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthMoment::set_allocated_latency_health(std::string* latency_health) {
  if (latency_health != nullptr) {
    
  } else {
    
  }
  latency_health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), latency_health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
}
inline std::string* HealthMoment::unsafe_arena_release_latency_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return latency_health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthMoment::unsafe_arena_set_allocated_latency_health(
    std::string* latency_health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (latency_health != nullptr) {
    
  } else {
    
  }
  latency_health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      latency_health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.latency_health)
}

// string packet_loss_health = 11[json_name = "packetLossHealth"];
inline void HealthMoment::clear_packet_loss_health() {
  packet_loss_health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthMoment::packet_loss_health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
  return _internal_packet_loss_health();
}
inline void HealthMoment::set_packet_loss_health(const std::string& value) {
  _internal_set_packet_loss_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
}
inline std::string* HealthMoment::mutable_packet_loss_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
  return _internal_mutable_packet_loss_health();
}
inline const std::string& HealthMoment::_internal_packet_loss_health() const {
  return packet_loss_health_.Get();
}
inline void HealthMoment::_internal_set_packet_loss_health(const std::string& value) {
  
  packet_loss_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthMoment::set_packet_loss_health(std::string&& value) {
  
  packet_loss_health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
}
inline void HealthMoment::set_packet_loss_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  packet_loss_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
}
inline void HealthMoment::set_packet_loss_health(const char* value,
    size_t size) {
  
  packet_loss_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
}
inline std::string* HealthMoment::_internal_mutable_packet_loss_health() {
  
  return packet_loss_health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthMoment::release_packet_loss_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
  return packet_loss_health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthMoment::set_allocated_packet_loss_health(std::string* packet_loss_health) {
  if (packet_loss_health != nullptr) {
    
  } else {
    
  }
  packet_loss_health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), packet_loss_health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
}
inline std::string* HealthMoment::unsafe_arena_release_packet_loss_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return packet_loss_health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthMoment::unsafe_arena_set_allocated_packet_loss_health(
    std::string* packet_loss_health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (packet_loss_health != nullptr) {
    
  } else {
    
  }
  packet_loss_health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      packet_loss_health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health)
}

// .kentik.synthetics.v202101beta1.Health overall_health = 12[json_name = "overallHealth"];
inline bool HealthMoment::_internal_has_overall_health() const {
  return this != internal_default_instance() && overall_health_ != nullptr;
}
inline bool HealthMoment::has_overall_health() const {
  return _internal_has_overall_health();
}
inline void HealthMoment::clear_overall_health() {
  if (GetArena() == nullptr && overall_health_ != nullptr) {
    delete overall_health_;
  }
  overall_health_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Health& HealthMoment::_internal_overall_health() const {
  const ::kentik::synthetics::v202101beta1::Health* p = overall_health_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Health*>(
      &::kentik::synthetics::v202101beta1::_Health_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Health& HealthMoment::overall_health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.overall_health)
  return _internal_overall_health();
}
inline void HealthMoment::unsafe_arena_set_allocated_overall_health(
    ::kentik::synthetics::v202101beta1::Health* overall_health) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(overall_health_);
  }
  overall_health_ = overall_health;
  if (overall_health) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.overall_health)
}
inline ::kentik::synthetics::v202101beta1::Health* HealthMoment::release_overall_health() {
  auto temp = unsafe_arena_release_overall_health();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Health* HealthMoment::unsafe_arena_release_overall_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.overall_health)
  
  ::kentik::synthetics::v202101beta1::Health* temp = overall_health_;
  overall_health_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Health* HealthMoment::_internal_mutable_overall_health() {
  
  if (overall_health_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Health>(GetArena());
    overall_health_ = p;
  }
  return overall_health_;
}
inline ::kentik::synthetics::v202101beta1::Health* HealthMoment::mutable_overall_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.overall_health)
  return _internal_mutable_overall_health();
}
inline void HealthMoment::set_allocated_overall_health(::kentik::synthetics::v202101beta1::Health* overall_health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete overall_health_;
  }
  if (overall_health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(overall_health);
    if (message_arena != submessage_arena) {
      overall_health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, overall_health, submessage_arena);
    }
    
  } else {
    
  }
  overall_health_ = overall_health;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.overall_health)
}

// uint32 avg_jitter = 13[json_name = "avgJitter"];
inline void HealthMoment::clear_avg_jitter() {
  avg_jitter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_avg_jitter() const {
  return avg_jitter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::avg_jitter() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.avg_jitter)
  return _internal_avg_jitter();
}
inline void HealthMoment::_internal_set_avg_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  avg_jitter_ = value;
}
inline void HealthMoment::set_avg_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_avg_jitter(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.avg_jitter)
}

// uint32 rolling_avg_jitter = 14[json_name = "rollingAvgJitter"];
inline void HealthMoment::clear_rolling_avg_jitter() {
  rolling_avg_jitter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_rolling_avg_jitter() const {
  return rolling_avg_jitter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::rolling_avg_jitter() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.rolling_avg_jitter)
  return _internal_rolling_avg_jitter();
}
inline void HealthMoment::_internal_set_rolling_avg_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rolling_avg_jitter_ = value;
}
inline void HealthMoment::set_rolling_avg_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rolling_avg_jitter(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.rolling_avg_jitter)
}

// uint32 rolling_std_jitter = 15[json_name = "rollingStdJitter"];
inline void HealthMoment::clear_rolling_std_jitter() {
  rolling_std_jitter_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_rolling_std_jitter() const {
  return rolling_std_jitter_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::rolling_std_jitter() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.rolling_std_jitter)
  return _internal_rolling_std_jitter();
}
inline void HealthMoment::_internal_set_rolling_std_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rolling_std_jitter_ = value;
}
inline void HealthMoment::set_rolling_std_jitter(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rolling_std_jitter(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.rolling_std_jitter)
}

// string jitter_health = 16[json_name = "jitterHealth"];
inline void HealthMoment::clear_jitter_health() {
  jitter_health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthMoment::jitter_health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
  return _internal_jitter_health();
}
inline void HealthMoment::set_jitter_health(const std::string& value) {
  _internal_set_jitter_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
}
inline std::string* HealthMoment::mutable_jitter_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
  return _internal_mutable_jitter_health();
}
inline const std::string& HealthMoment::_internal_jitter_health() const {
  return jitter_health_.Get();
}
inline void HealthMoment::_internal_set_jitter_health(const std::string& value) {
  
  jitter_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthMoment::set_jitter_health(std::string&& value) {
  
  jitter_health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
}
inline void HealthMoment::set_jitter_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jitter_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
}
inline void HealthMoment::set_jitter_health(const char* value,
    size_t size) {
  
  jitter_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
}
inline std::string* HealthMoment::_internal_mutable_jitter_health() {
  
  return jitter_health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthMoment::release_jitter_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
  return jitter_health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthMoment::set_allocated_jitter_health(std::string* jitter_health) {
  if (jitter_health != nullptr) {
    
  } else {
    
  }
  jitter_health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jitter_health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
}
inline std::string* HealthMoment::unsafe_arena_release_jitter_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return jitter_health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthMoment::unsafe_arena_set_allocated_jitter_health(
    std::string* jitter_health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (jitter_health != nullptr) {
    
  } else {
    
  }
  jitter_health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      jitter_health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.jitter_health)
}

// string data = 17[json_name = "data"];
inline void HealthMoment::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthMoment::data() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.data)
  return _internal_data();
}
inline void HealthMoment::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.data)
}
inline std::string* HealthMoment::mutable_data() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.data)
  return _internal_mutable_data();
}
inline const std::string& HealthMoment::_internal_data() const {
  return data_.Get();
}
inline void HealthMoment::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthMoment::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HealthMoment.data)
}
inline void HealthMoment::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HealthMoment.data)
}
inline void HealthMoment::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HealthMoment.data)
}
inline std::string* HealthMoment::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthMoment::release_data() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthMoment::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.data)
}
inline std::string* HealthMoment::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HealthMoment.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthMoment::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.data)
}

// uint32 size = 18[json_name = "size"];
inline void HealthMoment::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::size() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.size)
  return _internal_size();
}
inline void HealthMoment::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void HealthMoment::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.size)
}

// uint32 status = 19[json_name = "status"];
inline void HealthMoment::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthMoment::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.status)
  return _internal_status();
}
inline void HealthMoment::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void HealthMoment::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.status)
}

// string task_type = 20[json_name = "taskType"];
inline void HealthMoment::clear_task_type() {
  task_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthMoment::task_type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthMoment.task_type)
  return _internal_task_type();
}
inline void HealthMoment::set_task_type(const std::string& value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthMoment.task_type)
}
inline std::string* HealthMoment::mutable_task_type() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HealthMoment.task_type)
  return _internal_mutable_task_type();
}
inline const std::string& HealthMoment::_internal_task_type() const {
  return task_type_.Get();
}
inline void HealthMoment::_internal_set_task_type(const std::string& value) {
  
  task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthMoment::set_task_type(std::string&& value) {
  
  task_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HealthMoment.task_type)
}
inline void HealthMoment::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HealthMoment.task_type)
}
inline void HealthMoment::set_task_type(const char* value,
    size_t size) {
  
  task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HealthMoment.task_type)
}
inline std::string* HealthMoment::_internal_mutable_task_type() {
  
  return task_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthMoment::release_task_type() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HealthMoment.task_type)
  return task_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthMoment::set_allocated_task_type(std::string* task_type) {
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.task_type)
}
inline std::string* HealthMoment::unsafe_arena_release_task_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HealthMoment.task_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return task_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthMoment::unsafe_arena_set_allocated_task_type(
    std::string* task_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (task_type != nullptr) {
    
  } else {
    
  }
  task_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      task_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HealthMoment.task_type)
}

// map<string, string> other_healths = 21[json_name = "otherHealths"];
inline int HealthMoment::_internal_other_healths_size() const {
  return other_healths_.size();
}
inline int HealthMoment::other_healths_size() const {
  return _internal_other_healths_size();
}
inline void HealthMoment::clear_other_healths() {
  other_healths_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HealthMoment::_internal_other_healths() const {
  return other_healths_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HealthMoment::other_healths() const {
  // @@protoc_insertion_point(field_map:kentik.synthetics.v202101beta1.HealthMoment.other_healths)
  return _internal_other_healths();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HealthMoment::_internal_mutable_other_healths() {
  return other_healths_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HealthMoment::mutable_other_healths() {
  // @@protoc_insertion_point(field_mutable_map:kentik.synthetics.v202101beta1.HealthMoment.other_healths)
  return _internal_mutable_other_healths();
}

// -------------------------------------------------------------------

// Agent

// string id = 1[json_name = "id"];
inline void Agent::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.id)
  return _internal_id();
}
inline void Agent::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.id)
}
inline std::string* Agent::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.id)
  return _internal_mutable_id();
}
inline const std::string& Agent::_internal_id() const {
  return id_.Get();
}
inline void Agent::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.id)
}
inline void Agent::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.id)
}
inline void Agent::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.id)
}
inline std::string* Agent::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.id)
}
inline std::string* Agent::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.id)
}

// string name = 2[json_name = "name"];
inline void Agent::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.name)
  return _internal_name();
}
inline void Agent::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.name)
}
inline std::string* Agent::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.name)
  return _internal_mutable_name();
}
inline const std::string& Agent::_internal_name() const {
  return name_.Get();
}
inline void Agent::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.name)
}
inline void Agent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.name)
}
inline void Agent::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.name)
}
inline std::string* Agent::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.name)
}
inline std::string* Agent::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.name)
}

// .kentik.synthetics.v202101beta1.AgentStatus status = 3[json_name = "status"];
inline void Agent::clear_status() {
  status_ = 0;
}
inline ::kentik::synthetics::v202101beta1::AgentStatus Agent::_internal_status() const {
  return static_cast< ::kentik::synthetics::v202101beta1::AgentStatus >(status_);
}
inline ::kentik::synthetics::v202101beta1::AgentStatus Agent::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.status)
  return _internal_status();
}
inline void Agent::_internal_set_status(::kentik::synthetics::v202101beta1::AgentStatus value) {
  
  status_ = value;
}
inline void Agent::set_status(::kentik::synthetics::v202101beta1::AgentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.status)
}

// string alias = 4[json_name = "alias"];
inline void Agent::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::alias() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.alias)
  return _internal_alias();
}
inline void Agent::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.alias)
}
inline std::string* Agent::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.alias)
  return _internal_mutable_alias();
}
inline const std::string& Agent::_internal_alias() const {
  return alias_.Get();
}
inline void Agent::_internal_set_alias(const std::string& value) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_alias(std::string&& value) {
  
  alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.alias)
}
inline void Agent::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.alias)
}
inline void Agent::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.alias)
}
inline std::string* Agent::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_alias() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.alias)
}
inline std::string* Agent::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_alias(
    std::string* alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.alias)
}

// string type = 5[json_name = "type"];
inline void Agent::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.type)
  return _internal_type();
}
inline void Agent::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.type)
}
inline std::string* Agent::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.type)
  return _internal_mutable_type();
}
inline const std::string& Agent::_internal_type() const {
  return type_.Get();
}
inline void Agent::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.type)
}
inline void Agent::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.type)
}
inline void Agent::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.type)
}
inline std::string* Agent::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_type() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.type)
}
inline std::string* Agent::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.type)
}

// string os = 6[json_name = "os"];
inline void Agent::clear_os() {
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::os() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.os)
  return _internal_os();
}
inline void Agent::set_os(const std::string& value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.os)
}
inline std::string* Agent::mutable_os() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.os)
  return _internal_mutable_os();
}
inline const std::string& Agent::_internal_os() const {
  return os_.Get();
}
inline void Agent::_internal_set_os(const std::string& value) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_os(std::string&& value) {
  
  os_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.os)
}
inline void Agent::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.os)
}
inline void Agent::set_os(const char* value,
    size_t size) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.os)
}
inline std::string* Agent::_internal_mutable_os() {
  
  return os_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_os() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.os)
  return os_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    
  } else {
    
  }
  os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.os)
}
inline std::string* Agent::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.os)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return os_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_os(
    std::string* os) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (os != nullptr) {
    
  } else {
    
  }
  os_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      os, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.os)
}

// string ip = 7[json_name = "ip"];
inline void Agent::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.ip)
  return _internal_ip();
}
inline void Agent::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.ip)
}
inline std::string* Agent::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.ip)
  return _internal_mutable_ip();
}
inline const std::string& Agent::_internal_ip() const {
  return ip_.Get();
}
inline void Agent::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.ip)
}
inline void Agent::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.ip)
}
inline void Agent::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.ip)
}
inline std::string* Agent::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.ip)
}
inline std::string* Agent::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.ip)
}

// double lat = 8[json_name = "lat"];
inline void Agent::clear_lat() {
  lat_ = 0;
}
inline double Agent::_internal_lat() const {
  return lat_;
}
inline double Agent::lat() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.lat)
  return _internal_lat();
}
inline void Agent::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Agent::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.lat)
}

// double long = 9[json_name = "long"];
inline void Agent::clear_long_() {
  long__ = 0;
}
inline double Agent::_internal_long_() const {
  return long__;
}
inline double Agent::long_() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.long)
  return _internal_long_();
}
inline void Agent::_internal_set_long_(double value) {
  
  long__ = value;
}
inline void Agent::set_long_(double value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.long)
}

// .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed"];
inline bool Agent::_internal_has_last_authed() const {
  return this != internal_default_instance() && last_authed_ != nullptr;
}
inline bool Agent::has_last_authed() const {
  return _internal_has_last_authed();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Agent::_internal_last_authed() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_authed_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Agent::last_authed() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.last_authed)
  return _internal_last_authed();
}
inline void Agent::unsafe_arena_set_allocated_last_authed(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_authed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_authed_);
  }
  last_authed_ = last_authed;
  if (last_authed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.last_authed)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Agent::release_last_authed() {
  auto temp = unsafe_arena_release_last_authed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Agent::unsafe_arena_release_last_authed() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.last_authed)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_authed_;
  last_authed_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Agent::_internal_mutable_last_authed() {
  
  if (last_authed_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_authed_ = p;
  }
  return last_authed_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Agent::mutable_last_authed() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.last_authed)
  return _internal_mutable_last_authed();
}
inline void Agent::set_allocated_last_authed(PROTOBUF_NAMESPACE_ID::Timestamp* last_authed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_authed_);
  }
  if (last_authed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_authed)->GetArena();
    if (message_arena != submessage_arena) {
      last_authed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_authed, submessage_arena);
    }
    
  } else {
    
  }
  last_authed_ = last_authed;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.last_authed)
}

// .kentik.synthetics.v202101beta1.IPFamily family = 11[json_name = "family"];
inline void Agent::clear_family() {
  family_ = 0;
}
inline ::kentik::synthetics::v202101beta1::IPFamily Agent::_internal_family() const {
  return static_cast< ::kentik::synthetics::v202101beta1::IPFamily >(family_);
}
inline ::kentik::synthetics::v202101beta1::IPFamily Agent::family() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.family)
  return _internal_family();
}
inline void Agent::_internal_set_family(::kentik::synthetics::v202101beta1::IPFamily value) {
  
  family_ = value;
}
inline void Agent::set_family(::kentik::synthetics::v202101beta1::IPFamily value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.family)
}

// uint32 asn = 12[json_name = "asn"];
inline void Agent::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Agent::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Agent::asn() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.asn)
  return _internal_asn();
}
inline void Agent::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void Agent::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.asn)
}

// string site_id = 13[json_name = "siteId"];
inline void Agent::clear_site_id() {
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::site_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.site_id)
  return _internal_site_id();
}
inline void Agent::set_site_id(const std::string& value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.site_id)
}
inline std::string* Agent::mutable_site_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.site_id)
  return _internal_mutable_site_id();
}
inline const std::string& Agent::_internal_site_id() const {
  return site_id_.Get();
}
inline void Agent::_internal_set_site_id(const std::string& value) {
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_site_id(std::string&& value) {
  
  site_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.site_id)
}
inline void Agent::set_site_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.site_id)
}
inline void Agent::set_site_id(const char* value,
    size_t size) {
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.site_id)
}
inline std::string* Agent::_internal_mutable_site_id() {
  
  return site_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_site_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.site_id)
  return site_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_site_id(std::string* site_id) {
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.site_id)
}
inline std::string* Agent::unsafe_arena_release_site_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.site_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return site_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_site_id(
    std::string* site_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.site_id)
}

// string version = 14[json_name = "version"];
inline void Agent::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::version() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.version)
  return _internal_version();
}
inline void Agent::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.version)
}
inline std::string* Agent::mutable_version() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.version)
  return _internal_mutable_version();
}
inline const std::string& Agent::_internal_version() const {
  return version_.Get();
}
inline void Agent::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.version)
}
inline void Agent::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.version)
}
inline void Agent::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.version)
}
inline std::string* Agent::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_version() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.version)
}
inline std::string* Agent::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.version)
}

// string challenge = 15[json_name = "challenge"];
inline void Agent::clear_challenge() {
  challenge_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::challenge() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.challenge)
  return _internal_challenge();
}
inline void Agent::set_challenge(const std::string& value) {
  _internal_set_challenge(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.challenge)
}
inline std::string* Agent::mutable_challenge() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.challenge)
  return _internal_mutable_challenge();
}
inline const std::string& Agent::_internal_challenge() const {
  return challenge_.Get();
}
inline void Agent::_internal_set_challenge(const std::string& value) {
  
  challenge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_challenge(std::string&& value) {
  
  challenge_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.challenge)
}
inline void Agent::set_challenge(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  challenge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.challenge)
}
inline void Agent::set_challenge(const char* value,
    size_t size) {
  
  challenge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.challenge)
}
inline std::string* Agent::_internal_mutable_challenge() {
  
  return challenge_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_challenge() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.challenge)
  return challenge_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_challenge(std::string* challenge) {
  if (challenge != nullptr) {
    
  } else {
    
  }
  challenge_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), challenge,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.challenge)
}
inline std::string* Agent::unsafe_arena_release_challenge() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.challenge)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return challenge_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_challenge(
    std::string* challenge) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (challenge != nullptr) {
    
  } else {
    
  }
  challenge_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      challenge, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.challenge)
}

// string city = 16[json_name = "city"];
inline void Agent::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::city() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.city)
  return _internal_city();
}
inline void Agent::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.city)
}
inline std::string* Agent::mutable_city() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.city)
  return _internal_mutable_city();
}
inline const std::string& Agent::_internal_city() const {
  return city_.Get();
}
inline void Agent::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.city)
}
inline void Agent::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.city)
}
inline void Agent::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.city)
}
inline std::string* Agent::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_city() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.city)
}
inline std::string* Agent::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    
  } else {
    
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.city)
}

// string region = 17[json_name = "region"];
inline void Agent::clear_region() {
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::region() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.region)
  return _internal_region();
}
inline void Agent::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.region)
}
inline std::string* Agent::mutable_region() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.region)
  return _internal_mutable_region();
}
inline const std::string& Agent::_internal_region() const {
  return region_.Get();
}
inline void Agent::_internal_set_region(const std::string& value) {
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_region(std::string&& value) {
  
  region_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.region)
}
inline void Agent::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.region)
}
inline void Agent::set_region(const char* value,
    size_t size) {
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.region)
}
inline std::string* Agent::_internal_mutable_region() {
  
  return region_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_region() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.region)
  return region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.region)
}
inline std::string* Agent::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.region)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return region_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_region(
    std::string* region) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (region != nullptr) {
    
  } else {
    
  }
  region_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      region, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.region)
}

// string country = 18[json_name = "country"];
inline void Agent::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::country() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.country)
  return _internal_country();
}
inline void Agent::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.country)
}
inline std::string* Agent::mutable_country() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.country)
  return _internal_mutable_country();
}
inline const std::string& Agent::_internal_country() const {
  return country_.Get();
}
inline void Agent::_internal_set_country(const std::string& value) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_country(std::string&& value) {
  
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.country)
}
inline void Agent::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.country)
}
inline void Agent::set_country(const char* value,
    size_t size) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.country)
}
inline std::string* Agent::_internal_mutable_country() {
  
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_country() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.country)
}
inline std::string* Agent::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.country)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country != nullptr) {
    
  } else {
    
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.country)
}

// repeated string test_ids = 19[json_name = "testIds"];
inline int Agent::_internal_test_ids_size() const {
  return test_ids_.size();
}
inline int Agent::test_ids_size() const {
  return _internal_test_ids_size();
}
inline void Agent::clear_test_ids() {
  test_ids_.Clear();
}
inline std::string* Agent::add_test_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.Agent.test_ids)
  return _internal_add_test_ids();
}
inline const std::string& Agent::_internal_test_ids(int index) const {
  return test_ids_.Get(index);
}
inline const std::string& Agent::test_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.test_ids)
  return _internal_test_ids(index);
}
inline std::string* Agent::mutable_test_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.test_ids)
  return test_ids_.Mutable(index);
}
inline void Agent::set_test_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.test_ids)
  test_ids_.Mutable(index)->assign(value);
}
inline void Agent::set_test_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.test_ids)
  test_ids_.Mutable(index)->assign(std::move(value));
}
inline void Agent::set_test_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  test_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.test_ids)
}
inline void Agent::set_test_ids(int index, const char* value, size_t size) {
  test_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.test_ids)
}
inline std::string* Agent::_internal_add_test_ids() {
  return test_ids_.Add();
}
inline void Agent::add_test_ids(const std::string& value) {
  test_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.Agent.test_ids)
}
inline void Agent::add_test_ids(std::string&& value) {
  test_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.Agent.test_ids)
}
inline void Agent::add_test_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  test_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.Agent.test_ids)
}
inline void Agent::add_test_ids(const char* value, size_t size) {
  test_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.Agent.test_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Agent::test_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.Agent.test_ids)
  return test_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Agent::mutable_test_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.Agent.test_ids)
  return &test_ids_;
}

// string local_ip = 20[json_name = "localIp"];
inline void Agent::clear_local_ip() {
  local_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::local_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.local_ip)
  return _internal_local_ip();
}
inline void Agent::set_local_ip(const std::string& value) {
  _internal_set_local_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.local_ip)
}
inline std::string* Agent::mutable_local_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.local_ip)
  return _internal_mutable_local_ip();
}
inline const std::string& Agent::_internal_local_ip() const {
  return local_ip_.Get();
}
inline void Agent::_internal_set_local_ip(const std::string& value) {
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_local_ip(std::string&& value) {
  
  local_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.local_ip)
}
inline void Agent::set_local_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.local_ip)
}
inline void Agent::set_local_ip(const char* value,
    size_t size) {
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.local_ip)
}
inline std::string* Agent::_internal_mutable_local_ip() {
  
  return local_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_local_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.local_ip)
  return local_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_local_ip(std::string* local_ip) {
  if (local_ip != nullptr) {
    
  } else {
    
  }
  local_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.local_ip)
}
inline std::string* Agent::unsafe_arena_release_local_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.local_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return local_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_local_ip(
    std::string* local_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (local_ip != nullptr) {
    
  } else {
    
  }
  local_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      local_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.local_ip)
}

// string cloud_vpc = 21[json_name = "cloudVpc"];
inline void Agent::clear_cloud_vpc() {
  cloud_vpc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::cloud_vpc() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
  return _internal_cloud_vpc();
}
inline void Agent::set_cloud_vpc(const std::string& value) {
  _internal_set_cloud_vpc(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
}
inline std::string* Agent::mutable_cloud_vpc() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
  return _internal_mutable_cloud_vpc();
}
inline const std::string& Agent::_internal_cloud_vpc() const {
  return cloud_vpc_.Get();
}
inline void Agent::_internal_set_cloud_vpc(const std::string& value) {
  
  cloud_vpc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_cloud_vpc(std::string&& value) {
  
  cloud_vpc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
}
inline void Agent::set_cloud_vpc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloud_vpc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
}
inline void Agent::set_cloud_vpc(const char* value,
    size_t size) {
  
  cloud_vpc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
}
inline std::string* Agent::_internal_mutable_cloud_vpc() {
  
  return cloud_vpc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_cloud_vpc() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
  return cloud_vpc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_cloud_vpc(std::string* cloud_vpc) {
  if (cloud_vpc != nullptr) {
    
  } else {
    
  }
  cloud_vpc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloud_vpc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
}
inline std::string* Agent::unsafe_arena_release_cloud_vpc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cloud_vpc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_cloud_vpc(
    std::string* cloud_vpc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cloud_vpc != nullptr) {
    
  } else {
    
  }
  cloud_vpc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cloud_vpc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Agent.cloud_vpc)
}

// .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22[json_name = "agentImpl"];
inline void Agent::clear_agent_impl() {
  agent_impl_ = 0;
}
inline ::kentik::synthetics::v202101beta1::ImplementType Agent::_internal_agent_impl() const {
  return static_cast< ::kentik::synthetics::v202101beta1::ImplementType >(agent_impl_);
}
inline ::kentik::synthetics::v202101beta1::ImplementType Agent::agent_impl() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Agent.agent_impl)
  return _internal_agent_impl();
}
inline void Agent::_internal_set_agent_impl(::kentik::synthetics::v202101beta1::ImplementType value) {
  
  agent_impl_ = value;
}
inline void Agent::set_agent_impl(::kentik::synthetics::v202101beta1::ImplementType value) {
  _internal_set_agent_impl(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Agent.agent_impl)
}

// -------------------------------------------------------------------

// PingTaskDefinition

// string target = 1[json_name = "target"];
inline void PingTaskDefinition::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PingTaskDefinition::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
  return _internal_target();
}
inline void PingTaskDefinition::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
}
inline std::string* PingTaskDefinition::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
  return _internal_mutable_target();
}
inline const std::string& PingTaskDefinition::_internal_target() const {
  return target_.Get();
}
inline void PingTaskDefinition::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PingTaskDefinition::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
}
inline void PingTaskDefinition::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
}
inline void PingTaskDefinition::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
}
inline std::string* PingTaskDefinition::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PingTaskDefinition::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PingTaskDefinition::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
}
inline std::string* PingTaskDefinition::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PingTaskDefinition::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.PingTaskDefinition.target)
}

// uint32 period = 2[json_name = "period"];
inline void PingTaskDefinition::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingTaskDefinition::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingTaskDefinition::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PingTaskDefinition.period)
  return _internal_period();
}
inline void PingTaskDefinition::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void PingTaskDefinition::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.PingTaskDefinition.period)
}

// uint32 expiry = 3[json_name = "expiry"];
inline void PingTaskDefinition::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingTaskDefinition::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingTaskDefinition::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PingTaskDefinition.expiry)
  return _internal_expiry();
}
inline void PingTaskDefinition::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void PingTaskDefinition::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.PingTaskDefinition.expiry)
}

// uint32 count = 4[json_name = "count"];
inline void PingTaskDefinition::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingTaskDefinition::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PingTaskDefinition::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PingTaskDefinition.count)
  return _internal_count();
}
inline void PingTaskDefinition::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void PingTaskDefinition::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.PingTaskDefinition.count)
}

// -------------------------------------------------------------------

// TraceTaskDefinition

// string target = 1[json_name = "target"];
inline void TraceTaskDefinition::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TraceTaskDefinition::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
  return _internal_target();
}
inline void TraceTaskDefinition::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
}
inline std::string* TraceTaskDefinition::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
  return _internal_mutable_target();
}
inline const std::string& TraceTaskDefinition::_internal_target() const {
  return target_.Get();
}
inline void TraceTaskDefinition::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TraceTaskDefinition::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
}
inline void TraceTaskDefinition::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
}
inline void TraceTaskDefinition::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
}
inline std::string* TraceTaskDefinition::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TraceTaskDefinition::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceTaskDefinition::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
}
inline std::string* TraceTaskDefinition::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TraceTaskDefinition::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TraceTaskDefinition.target)
}

// uint32 period = 2[json_name = "period"];
inline void TraceTaskDefinition::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceTaskDefinition::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceTaskDefinition::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceTaskDefinition.period)
  return _internal_period();
}
inline void TraceTaskDefinition::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void TraceTaskDefinition::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceTaskDefinition.period)
}

// uint32 expiry = 3[json_name = "expiry"];
inline void TraceTaskDefinition::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceTaskDefinition::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceTaskDefinition::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceTaskDefinition.expiry)
  return _internal_expiry();
}
inline void TraceTaskDefinition::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void TraceTaskDefinition::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceTaskDefinition.expiry)
}

// uint32 limit = 4[json_name = "limit"];
inline void TraceTaskDefinition::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceTaskDefinition::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TraceTaskDefinition::limit() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceTaskDefinition.limit)
  return _internal_limit();
}
inline void TraceTaskDefinition::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void TraceTaskDefinition::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceTaskDefinition.limit)
}

// -------------------------------------------------------------------

// HTTPTaskDefinition

// string target = 1[json_name = "target"];
inline void HTTPTaskDefinition::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPTaskDefinition::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
  return _internal_target();
}
inline void HTTPTaskDefinition::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
}
inline std::string* HTTPTaskDefinition::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
  return _internal_mutable_target();
}
inline const std::string& HTTPTaskDefinition::_internal_target() const {
  return target_.Get();
}
inline void HTTPTaskDefinition::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPTaskDefinition::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
}
inline void HTTPTaskDefinition::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
}
inline void HTTPTaskDefinition::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
}
inline std::string* HTTPTaskDefinition::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPTaskDefinition::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPTaskDefinition::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
}
inline std::string* HTTPTaskDefinition::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPTaskDefinition::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HTTPTaskDefinition.target)
}

// uint32 period = 2[json_name = "period"];
inline void HTTPTaskDefinition::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPTaskDefinition::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPTaskDefinition::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HTTPTaskDefinition.period)
  return _internal_period();
}
inline void HTTPTaskDefinition::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void HTTPTaskDefinition::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HTTPTaskDefinition.period)
}

// uint32 expiry = 3[json_name = "expiry"];
inline void HTTPTaskDefinition::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPTaskDefinition::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPTaskDefinition::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HTTPTaskDefinition.expiry)
  return _internal_expiry();
}
inline void HTTPTaskDefinition::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void HTTPTaskDefinition::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HTTPTaskDefinition.expiry)
}

// -------------------------------------------------------------------

// Task

// string id = 1[json_name = "id"];
inline void Task::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.id)
  return _internal_id();
}
inline void Task::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Task.id)
}
inline std::string* Task::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.id)
  return _internal_mutable_id();
}
inline const std::string& Task::_internal_id() const {
  return id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Task.id)
}
inline void Task::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Task.id)
}
inline void Task::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Task.id)
}
inline std::string* Task::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.id)
}
inline std::string* Task::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.id)
}

// string test_id = 2[json_name = "testId"];
inline void Task::clear_test_id() {
  test_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::test_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.test_id)
  return _internal_test_id();
}
inline void Task::set_test_id(const std::string& value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Task.test_id)
}
inline std::string* Task::mutable_test_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.test_id)
  return _internal_mutable_test_id();
}
inline const std::string& Task::_internal_test_id() const {
  return test_id_.Get();
}
inline void Task::_internal_set_test_id(const std::string& value) {
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_test_id(std::string&& value) {
  
  test_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Task.test_id)
}
inline void Task::set_test_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Task.test_id)
}
inline void Task::set_test_id(const char* value,
    size_t size) {
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Task.test_id)
}
inline std::string* Task::_internal_mutable_test_id() {
  
  return test_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_test_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.test_id)
  return test_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_test_id(std::string* test_id) {
  if (test_id != nullptr) {
    
  } else {
    
  }
  test_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.test_id)
}
inline std::string* Task::unsafe_arena_release_test_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.test_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return test_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_test_id(
    std::string* test_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (test_id != nullptr) {
    
  } else {
    
  }
  test_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      test_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.test_id)
}

// string device_id = 3[json_name = "deviceId"];
inline void Task::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.device_id)
  return _internal_device_id();
}
inline void Task::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Task.device_id)
}
inline std::string* Task::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& Task::_internal_device_id() const {
  return device_id_.Get();
}
inline void Task::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Task.device_id)
}
inline void Task::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Task.device_id)
}
inline void Task::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Task.device_id)
}
inline std::string* Task::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.device_id)
}
inline std::string* Task::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.device_id)
}

// .kentik.synthetics.v202101beta1.TaskState state = 4[json_name = "state"];
inline void Task::clear_state() {
  state_ = 0;
}
inline ::kentik::synthetics::v202101beta1::TaskState Task::_internal_state() const {
  return static_cast< ::kentik::synthetics::v202101beta1::TaskState >(state_);
}
inline ::kentik::synthetics::v202101beta1::TaskState Task::state() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.state)
  return _internal_state();
}
inline void Task::_internal_set_state(::kentik::synthetics::v202101beta1::TaskState value) {
  
  state_ = value;
}
inline void Task::set_state(::kentik::synthetics::v202101beta1::TaskState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Task.state)
}

// string status = 5[json_name = "status"];
inline void Task::clear_status() {
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Task::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.status)
  return _internal_status();
}
inline void Task::set_status(const std::string& value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Task.status)
}
inline std::string* Task::mutable_status() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.status)
  return _internal_mutable_status();
}
inline const std::string& Task::_internal_status() const {
  return status_.Get();
}
inline void Task::_internal_set_status(const std::string& value) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Task::set_status(std::string&& value) {
  
  status_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Task.status)
}
inline void Task::set_status(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Task.status)
}
inline void Task::set_status(const char* value,
    size_t size) {
  
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Task.status)
}
inline std::string* Task::_internal_mutable_status() {
  
  return status_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Task::release_status() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Task::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.status)
}
inline std::string* Task::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.status)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return status_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Task::unsafe_arena_set_allocated_status(
    std::string* status) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (status != nullptr) {
    
  } else {
    
  }
  status_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      status, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.status)
}

// .kentik.synthetics.v202101beta1.IPFamily family = 6[json_name = "family"];
inline void Task::clear_family() {
  family_ = 0;
}
inline ::kentik::synthetics::v202101beta1::IPFamily Task::_internal_family() const {
  return static_cast< ::kentik::synthetics::v202101beta1::IPFamily >(family_);
}
inline ::kentik::synthetics::v202101beta1::IPFamily Task::family() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.family)
  return _internal_family();
}
inline void Task::_internal_set_family(::kentik::synthetics::v202101beta1::IPFamily value) {
  
  family_ = value;
}
inline void Task::set_family(::kentik::synthetics::v202101beta1::IPFamily value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Task.family)
}

// .kentik.synthetics.v202101beta1.PingTaskDefinition ping = 9[json_name = "ping"];
inline bool Task::_internal_has_ping() const {
  return definition_case() == kPing;
}
inline bool Task::has_ping() const {
  return _internal_has_ping();
}
inline void Task::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void Task::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArena() == nullptr) {
      delete definition_.ping_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::PingTaskDefinition* Task::release_ping() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.ping)
  if (_internal_has_ping()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::PingTaskDefinition* temp = definition_.ping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::PingTaskDefinition& Task::_internal_ping() const {
  return _internal_has_ping()
      ? *definition_.ping_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::PingTaskDefinition*>(&::kentik::synthetics::v202101beta1::_PingTaskDefinition_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::PingTaskDefinition& Task::ping() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.ping)
  return _internal_ping();
}
inline ::kentik::synthetics::v202101beta1::PingTaskDefinition* Task::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.ping)
  if (_internal_has_ping()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::PingTaskDefinition* temp = definition_.ping_;
    definition_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_ping(::kentik::synthetics::v202101beta1::PingTaskDefinition* ping) {
  clear_definition();
  if (ping) {
    set_has_ping();
    definition_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.ping)
}
inline ::kentik::synthetics::v202101beta1::PingTaskDefinition* Task::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_definition();
    set_has_ping();
    definition_.ping_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::PingTaskDefinition >(GetArena());
  }
  return definition_.ping_;
}
inline ::kentik::synthetics::v202101beta1::PingTaskDefinition* Task::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.ping)
  return _internal_mutable_ping();
}

// .kentik.synthetics.v202101beta1.TraceTaskDefinition traceroute = 10[json_name = "traceroute"];
inline bool Task::_internal_has_traceroute() const {
  return definition_case() == kTraceroute;
}
inline bool Task::has_traceroute() const {
  return _internal_has_traceroute();
}
inline void Task::set_has_traceroute() {
  _oneof_case_[0] = kTraceroute;
}
inline void Task::clear_traceroute() {
  if (_internal_has_traceroute()) {
    if (GetArena() == nullptr) {
      delete definition_.traceroute_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::TraceTaskDefinition* Task::release_traceroute() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.traceroute)
  if (_internal_has_traceroute()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::TraceTaskDefinition* temp = definition_.traceroute_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.traceroute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::TraceTaskDefinition& Task::_internal_traceroute() const {
  return _internal_has_traceroute()
      ? *definition_.traceroute_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::TraceTaskDefinition*>(&::kentik::synthetics::v202101beta1::_TraceTaskDefinition_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::TraceTaskDefinition& Task::traceroute() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.traceroute)
  return _internal_traceroute();
}
inline ::kentik::synthetics::v202101beta1::TraceTaskDefinition* Task::unsafe_arena_release_traceroute() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.traceroute)
  if (_internal_has_traceroute()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::TraceTaskDefinition* temp = definition_.traceroute_;
    definition_.traceroute_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_traceroute(::kentik::synthetics::v202101beta1::TraceTaskDefinition* traceroute) {
  clear_definition();
  if (traceroute) {
    set_has_traceroute();
    definition_.traceroute_ = traceroute;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.traceroute)
}
inline ::kentik::synthetics::v202101beta1::TraceTaskDefinition* Task::_internal_mutable_traceroute() {
  if (!_internal_has_traceroute()) {
    clear_definition();
    set_has_traceroute();
    definition_.traceroute_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TraceTaskDefinition >(GetArena());
  }
  return definition_.traceroute_;
}
inline ::kentik::synthetics::v202101beta1::TraceTaskDefinition* Task::mutable_traceroute() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.traceroute)
  return _internal_mutable_traceroute();
}

// .kentik.synthetics.v202101beta1.HTTPTaskDefinition http = 11[json_name = "http"];
inline bool Task::_internal_has_http() const {
  return definition_case() == kHttp;
}
inline bool Task::has_http() const {
  return _internal_has_http();
}
inline void Task::set_has_http() {
  _oneof_case_[0] = kHttp;
}
inline void Task::clear_http() {
  if (_internal_has_http()) {
    if (GetArena() == nullptr) {
      delete definition_.http_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* Task::release_http() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.http)
  if (_internal_has_http()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* temp = definition_.http_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.http_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::HTTPTaskDefinition& Task::_internal_http() const {
  return _internal_has_http()
      ? *definition_.http_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::HTTPTaskDefinition*>(&::kentik::synthetics::v202101beta1::_HTTPTaskDefinition_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::HTTPTaskDefinition& Task::http() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.http)
  return _internal_http();
}
inline ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* Task::unsafe_arena_release_http() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.http)
  if (_internal_has_http()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* temp = definition_.http_;
    definition_.http_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_http(::kentik::synthetics::v202101beta1::HTTPTaskDefinition* http) {
  clear_definition();
  if (http) {
    set_has_http();
    definition_.http_ = http;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.http)
}
inline ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* Task::_internal_mutable_http() {
  if (!_internal_has_http()) {
    clear_definition();
    set_has_http();
    definition_.http_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HTTPTaskDefinition >(GetArena());
  }
  return definition_.http_;
}
inline ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* Task::mutable_http() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.http)
  return _internal_mutable_http();
}

// .kentik.synthetics.v202101beta1.KnockTaskDefinition knock = 12[json_name = "knock"];
inline bool Task::_internal_has_knock() const {
  return definition_case() == kKnock;
}
inline bool Task::has_knock() const {
  return _internal_has_knock();
}
inline void Task::set_has_knock() {
  _oneof_case_[0] = kKnock;
}
inline void Task::clear_knock() {
  if (_internal_has_knock()) {
    if (GetArena() == nullptr) {
      delete definition_.knock_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::KnockTaskDefinition* Task::release_knock() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.knock)
  if (_internal_has_knock()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::KnockTaskDefinition* temp = definition_.knock_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.knock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::KnockTaskDefinition& Task::_internal_knock() const {
  return _internal_has_knock()
      ? *definition_.knock_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::KnockTaskDefinition*>(&::kentik::synthetics::v202101beta1::_KnockTaskDefinition_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::KnockTaskDefinition& Task::knock() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.knock)
  return _internal_knock();
}
inline ::kentik::synthetics::v202101beta1::KnockTaskDefinition* Task::unsafe_arena_release_knock() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.knock)
  if (_internal_has_knock()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::KnockTaskDefinition* temp = definition_.knock_;
    definition_.knock_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_knock(::kentik::synthetics::v202101beta1::KnockTaskDefinition* knock) {
  clear_definition();
  if (knock) {
    set_has_knock();
    definition_.knock_ = knock;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.knock)
}
inline ::kentik::synthetics::v202101beta1::KnockTaskDefinition* Task::_internal_mutable_knock() {
  if (!_internal_has_knock()) {
    clear_definition();
    set_has_knock();
    definition_.knock_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::KnockTaskDefinition >(GetArena());
  }
  return definition_.knock_;
}
inline ::kentik::synthetics::v202101beta1::KnockTaskDefinition* Task::mutable_knock() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.knock)
  return _internal_mutable_knock();
}

// .kentik.synthetics.v202101beta1.DNSTaskDefinition dns = 13[json_name = "dns"];
inline bool Task::_internal_has_dns() const {
  return definition_case() == kDns;
}
inline bool Task::has_dns() const {
  return _internal_has_dns();
}
inline void Task::set_has_dns() {
  _oneof_case_[0] = kDns;
}
inline void Task::clear_dns() {
  if (_internal_has_dns()) {
    if (GetArena() == nullptr) {
      delete definition_.dns_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::DNSTaskDefinition* Task::release_dns() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.dns)
  if (_internal_has_dns()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::DNSTaskDefinition* temp = definition_.dns_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.dns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::DNSTaskDefinition& Task::_internal_dns() const {
  return _internal_has_dns()
      ? *definition_.dns_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::DNSTaskDefinition*>(&::kentik::synthetics::v202101beta1::_DNSTaskDefinition_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::DNSTaskDefinition& Task::dns() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.dns)
  return _internal_dns();
}
inline ::kentik::synthetics::v202101beta1::DNSTaskDefinition* Task::unsafe_arena_release_dns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.dns)
  if (_internal_has_dns()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::DNSTaskDefinition* temp = definition_.dns_;
    definition_.dns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_dns(::kentik::synthetics::v202101beta1::DNSTaskDefinition* dns) {
  clear_definition();
  if (dns) {
    set_has_dns();
    definition_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.dns)
}
inline ::kentik::synthetics::v202101beta1::DNSTaskDefinition* Task::_internal_mutable_dns() {
  if (!_internal_has_dns()) {
    clear_definition();
    set_has_dns();
    definition_.dns_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DNSTaskDefinition >(GetArena());
  }
  return definition_.dns_;
}
inline ::kentik::synthetics::v202101beta1::DNSTaskDefinition* Task::mutable_dns() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.dns)
  return _internal_mutable_dns();
}

// .kentik.synthetics.v202101beta1.ShakeTaskDefinition shake = 14[json_name = "shake"];
inline bool Task::_internal_has_shake() const {
  return definition_case() == kShake;
}
inline bool Task::has_shake() const {
  return _internal_has_shake();
}
inline void Task::set_has_shake() {
  _oneof_case_[0] = kShake;
}
inline void Task::clear_shake() {
  if (_internal_has_shake()) {
    if (GetArena() == nullptr) {
      delete definition_.shake_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* Task::release_shake() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Task.shake)
  if (_internal_has_shake()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* temp = definition_.shake_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.shake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::ShakeTaskDefinition& Task::_internal_shake() const {
  return _internal_has_shake()
      ? *definition_.shake_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::ShakeTaskDefinition*>(&::kentik::synthetics::v202101beta1::_ShakeTaskDefinition_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::ShakeTaskDefinition& Task::shake() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Task.shake)
  return _internal_shake();
}
inline ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* Task::unsafe_arena_release_shake() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Task.shake)
  if (_internal_has_shake()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* temp = definition_.shake_;
    definition_.shake_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Task::unsafe_arena_set_allocated_shake(::kentik::synthetics::v202101beta1::ShakeTaskDefinition* shake) {
  clear_definition();
  if (shake) {
    set_has_shake();
    definition_.shake_ = shake;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Task.shake)
}
inline ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* Task::_internal_mutable_shake() {
  if (!_internal_has_shake()) {
    clear_definition();
    set_has_shake();
    definition_.shake_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ShakeTaskDefinition >(GetArena());
  }
  return definition_.shake_;
}
inline ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* Task::mutable_shake() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Task.shake)
  return _internal_mutable_shake();
}

inline bool Task::has_definition() const {
  return definition_case() != DEFINITION_NOT_SET;
}
inline void Task::clear_has_definition() {
  _oneof_case_[0] = DEFINITION_NOT_SET;
}
inline Task::DefinitionCase Task::definition_case() const {
  return Task::DefinitionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// KnockTaskDefinition

// string target = 1[json_name = "target"];
inline void KnockTaskDefinition::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& KnockTaskDefinition::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
  return _internal_target();
}
inline void KnockTaskDefinition::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
}
inline std::string* KnockTaskDefinition::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
  return _internal_mutable_target();
}
inline const std::string& KnockTaskDefinition::_internal_target() const {
  return target_.Get();
}
inline void KnockTaskDefinition::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void KnockTaskDefinition::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
}
inline void KnockTaskDefinition::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
}
inline void KnockTaskDefinition::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
}
inline std::string* KnockTaskDefinition::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* KnockTaskDefinition::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KnockTaskDefinition::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
}
inline std::string* KnockTaskDefinition::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void KnockTaskDefinition::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.KnockTaskDefinition.target)
}

// uint32 period = 2[json_name = "period"];
inline void KnockTaskDefinition::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KnockTaskDefinition::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KnockTaskDefinition::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.KnockTaskDefinition.period)
  return _internal_period();
}
inline void KnockTaskDefinition::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void KnockTaskDefinition::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.KnockTaskDefinition.period)
}

// uint32 expiry = 3[json_name = "expiry"];
inline void KnockTaskDefinition::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KnockTaskDefinition::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KnockTaskDefinition::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.KnockTaskDefinition.expiry)
  return _internal_expiry();
}
inline void KnockTaskDefinition::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void KnockTaskDefinition::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.KnockTaskDefinition.expiry)
}

// uint32 count = 4[json_name = "count"];
inline void KnockTaskDefinition::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KnockTaskDefinition::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KnockTaskDefinition::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.KnockTaskDefinition.count)
  return _internal_count();
}
inline void KnockTaskDefinition::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void KnockTaskDefinition::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.KnockTaskDefinition.count)
}

// uint32 port = 5[json_name = "port"];
inline void KnockTaskDefinition::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KnockTaskDefinition::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 KnockTaskDefinition::port() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.KnockTaskDefinition.port)
  return _internal_port();
}
inline void KnockTaskDefinition::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void KnockTaskDefinition::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.KnockTaskDefinition.port)
}

// -------------------------------------------------------------------

// DNSTaskDefinition

// string target = 1[json_name = "target"];
inline void DNSTaskDefinition::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DNSTaskDefinition::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
  return _internal_target();
}
inline void DNSTaskDefinition::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
}
inline std::string* DNSTaskDefinition::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
  return _internal_mutable_target();
}
inline const std::string& DNSTaskDefinition::_internal_target() const {
  return target_.Get();
}
inline void DNSTaskDefinition::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DNSTaskDefinition::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
}
inline void DNSTaskDefinition::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
}
inline void DNSTaskDefinition::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
}
inline std::string* DNSTaskDefinition::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DNSTaskDefinition::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DNSTaskDefinition::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
}
inline std::string* DNSTaskDefinition::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DNSTaskDefinition::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.DNSTaskDefinition.target)
}

// uint32 period = 2[json_name = "period"];
inline void DNSTaskDefinition::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSTaskDefinition::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSTaskDefinition::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DNSTaskDefinition.period)
  return _internal_period();
}
inline void DNSTaskDefinition::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void DNSTaskDefinition::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DNSTaskDefinition.period)
}

// uint32 expiry = 3[json_name = "expiry"];
inline void DNSTaskDefinition::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSTaskDefinition::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSTaskDefinition::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DNSTaskDefinition.expiry)
  return _internal_expiry();
}
inline void DNSTaskDefinition::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void DNSTaskDefinition::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DNSTaskDefinition.expiry)
}

// uint32 count = 4[json_name = "count"];
inline void DNSTaskDefinition::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSTaskDefinition::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSTaskDefinition::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DNSTaskDefinition.count)
  return _internal_count();
}
inline void DNSTaskDefinition::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void DNSTaskDefinition::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DNSTaskDefinition.count)
}

// uint32 port = 5[json_name = "port"];
inline void DNSTaskDefinition::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSTaskDefinition::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSTaskDefinition::port() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DNSTaskDefinition.port)
  return _internal_port();
}
inline void DNSTaskDefinition::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void DNSTaskDefinition::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DNSTaskDefinition.port)
}

// string type = 6[json_name = "type"];
inline void DNSTaskDefinition::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DNSTaskDefinition::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
  return _internal_type();
}
inline void DNSTaskDefinition::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
}
inline std::string* DNSTaskDefinition::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
  return _internal_mutable_type();
}
inline const std::string& DNSTaskDefinition::_internal_type() const {
  return type_.Get();
}
inline void DNSTaskDefinition::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DNSTaskDefinition::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
}
inline void DNSTaskDefinition::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
}
inline void DNSTaskDefinition::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
}
inline std::string* DNSTaskDefinition::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DNSTaskDefinition::release_type() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DNSTaskDefinition::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
}
inline std::string* DNSTaskDefinition::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DNSTaskDefinition::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.DNSTaskDefinition.type)
}

// string resolver = 7[json_name = "resolver"];
inline void DNSTaskDefinition::clear_resolver() {
  resolver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DNSTaskDefinition::resolver() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
  return _internal_resolver();
}
inline void DNSTaskDefinition::set_resolver(const std::string& value) {
  _internal_set_resolver(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
}
inline std::string* DNSTaskDefinition::mutable_resolver() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
  return _internal_mutable_resolver();
}
inline const std::string& DNSTaskDefinition::_internal_resolver() const {
  return resolver_.Get();
}
inline void DNSTaskDefinition::_internal_set_resolver(const std::string& value) {
  
  resolver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DNSTaskDefinition::set_resolver(std::string&& value) {
  
  resolver_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
}
inline void DNSTaskDefinition::set_resolver(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resolver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
}
inline void DNSTaskDefinition::set_resolver(const char* value,
    size_t size) {
  
  resolver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
}
inline std::string* DNSTaskDefinition::_internal_mutable_resolver() {
  
  return resolver_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DNSTaskDefinition::release_resolver() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
  return resolver_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DNSTaskDefinition::set_allocated_resolver(std::string* resolver) {
  if (resolver != nullptr) {
    
  } else {
    
  }
  resolver_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resolver,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
}
inline std::string* DNSTaskDefinition::unsafe_arena_release_resolver() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return resolver_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DNSTaskDefinition::unsafe_arena_set_allocated_resolver(
    std::string* resolver) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (resolver != nullptr) {
    
  } else {
    
  }
  resolver_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      resolver, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver)
}

// -------------------------------------------------------------------

// ShakeTaskDefinition

// string target = 1[json_name = "target"];
inline void ShakeTaskDefinition::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ShakeTaskDefinition::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
  return _internal_target();
}
inline void ShakeTaskDefinition::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
}
inline std::string* ShakeTaskDefinition::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
  return _internal_mutable_target();
}
inline const std::string& ShakeTaskDefinition::_internal_target() const {
  return target_.Get();
}
inline void ShakeTaskDefinition::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShakeTaskDefinition::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
}
inline void ShakeTaskDefinition::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
}
inline void ShakeTaskDefinition::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
}
inline std::string* ShakeTaskDefinition::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShakeTaskDefinition::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShakeTaskDefinition::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
}
inline std::string* ShakeTaskDefinition::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShakeTaskDefinition::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.ShakeTaskDefinition.target)
}

// uint32 port = 2[json_name = "port"];
inline void ShakeTaskDefinition::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShakeTaskDefinition::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShakeTaskDefinition::port() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ShakeTaskDefinition.port)
  return _internal_port();
}
inline void ShakeTaskDefinition::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void ShakeTaskDefinition::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ShakeTaskDefinition.port)
}

// uint32 period = 3[json_name = "period"];
inline void ShakeTaskDefinition::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShakeTaskDefinition::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShakeTaskDefinition::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ShakeTaskDefinition.period)
  return _internal_period();
}
inline void ShakeTaskDefinition::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void ShakeTaskDefinition::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ShakeTaskDefinition.period)
}

// uint32 expiry = 4[json_name = "expiry"];
inline void ShakeTaskDefinition::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShakeTaskDefinition::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShakeTaskDefinition::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ShakeTaskDefinition.expiry)
  return _internal_expiry();
}
inline void ShakeTaskDefinition::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void ShakeTaskDefinition::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ShakeTaskDefinition.expiry)
}

// -------------------------------------------------------------------

// UserInfo

// string id = 1[json_name = "id"];
inline void UserInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.UserInfo.id)
  return _internal_id();
}
inline void UserInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.UserInfo.id)
}
inline std::string* UserInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.UserInfo.id)
  return _internal_mutable_id();
}
inline const std::string& UserInfo::_internal_id() const {
  return id_.Get();
}
inline void UserInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.UserInfo.id)
}
inline void UserInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.UserInfo.id)
}
inline void UserInfo::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.UserInfo.id)
}
inline std::string* UserInfo::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.UserInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.UserInfo.id)
}
inline std::string* UserInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.UserInfo.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfo::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.UserInfo.id)
}

// string email = 2[json_name = "email"];
inline void UserInfo::clear_email() {
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::email() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.UserInfo.email)
  return _internal_email();
}
inline void UserInfo::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.UserInfo.email)
}
inline std::string* UserInfo::mutable_email() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.UserInfo.email)
  return _internal_mutable_email();
}
inline const std::string& UserInfo::_internal_email() const {
  return email_.Get();
}
inline void UserInfo::_internal_set_email(const std::string& value) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_email(std::string&& value) {
  
  email_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.UserInfo.email)
}
inline void UserInfo::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.UserInfo.email)
}
inline void UserInfo::set_email(const char* value,
    size_t size) {
  
  email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.UserInfo.email)
}
inline std::string* UserInfo::_internal_mutable_email() {
  
  return email_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_email() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.UserInfo.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.UserInfo.email)
}
inline std::string* UserInfo::unsafe_arena_release_email() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.UserInfo.email)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return email_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfo::unsafe_arena_set_allocated_email(
    std::string* email) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (email != nullptr) {
    
  } else {
    
  }
  email_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      email, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.UserInfo.email)
}

// string full_name = 3[json_name = "fullName"];
inline void UserInfo::clear_full_name() {
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UserInfo::full_name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.UserInfo.full_name)
  return _internal_full_name();
}
inline void UserInfo::set_full_name(const std::string& value) {
  _internal_set_full_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.UserInfo.full_name)
}
inline std::string* UserInfo::mutable_full_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.UserInfo.full_name)
  return _internal_mutable_full_name();
}
inline const std::string& UserInfo::_internal_full_name() const {
  return full_name_.Get();
}
inline void UserInfo::_internal_set_full_name(const std::string& value) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UserInfo::set_full_name(std::string&& value) {
  
  full_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.UserInfo.full_name)
}
inline void UserInfo::set_full_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.UserInfo.full_name)
}
inline void UserInfo::set_full_name(const char* value,
    size_t size) {
  
  full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.UserInfo.full_name)
}
inline std::string* UserInfo::_internal_mutable_full_name() {
  
  return full_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UserInfo::release_full_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.UserInfo.full_name)
  return full_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserInfo::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), full_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.UserInfo.full_name)
}
inline std::string* UserInfo::unsafe_arena_release_full_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.UserInfo.full_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return full_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UserInfo::unsafe_arena_set_allocated_full_name(
    std::string* full_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (full_name != nullptr) {
    
  } else {
    
  }
  full_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      full_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.UserInfo.full_name)
}

// -------------------------------------------------------------------

// Test

// string id = 1[json_name = "id"];
inline void Test::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.id)
  return _internal_id();
}
inline void Test::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Test.id)
}
inline std::string* Test::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.id)
  return _internal_mutable_id();
}
inline const std::string& Test::_internal_id() const {
  return id_.Get();
}
inline void Test::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Test.id)
}
inline void Test::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Test.id)
}
inline void Test::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Test.id)
}
inline std::string* Test::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.id)
}
inline std::string* Test::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Test.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Test::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.id)
}

// string name = 2[json_name = "name"];
inline void Test::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.name)
  return _internal_name();
}
inline void Test::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Test.name)
}
inline std::string* Test::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.name)
  return _internal_mutable_name();
}
inline const std::string& Test::_internal_name() const {
  return name_.Get();
}
inline void Test::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Test.name)
}
inline void Test::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Test.name)
}
inline void Test::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Test.name)
}
inline std::string* Test::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.name)
}
inline std::string* Test::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Test.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Test::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.name)
}

// string type = 3[json_name = "type"];
inline void Test::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.type)
  return _internal_type();
}
inline void Test::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Test.type)
}
inline std::string* Test::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.type)
  return _internal_mutable_type();
}
inline const std::string& Test::_internal_type() const {
  return type_.Get();
}
inline void Test::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Test.type)
}
inline void Test::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Test.type)
}
inline void Test::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Test.type)
}
inline std::string* Test::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test::release_type() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.type)
}
inline std::string* Test::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Test.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Test::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.type)
}

// string device_id = 4[json_name = "deviceId"];
inline void Test::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.device_id)
  return _internal_device_id();
}
inline void Test::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Test.device_id)
}
inline std::string* Test::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& Test::_internal_device_id() const {
  return device_id_.Get();
}
inline void Test::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Test.device_id)
}
inline void Test::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Test.device_id)
}
inline void Test::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Test.device_id)
}
inline std::string* Test::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.device_id)
}
inline std::string* Test::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Test.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Test::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.device_id)
}

// .kentik.synthetics.v202101beta1.TestStatus status = 5[json_name = "status"];
inline void Test::clear_status() {
  status_ = 0;
}
inline ::kentik::synthetics::v202101beta1::TestStatus Test::_internal_status() const {
  return static_cast< ::kentik::synthetics::v202101beta1::TestStatus >(status_);
}
inline ::kentik::synthetics::v202101beta1::TestStatus Test::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.status)
  return _internal_status();
}
inline void Test::_internal_set_status(::kentik::synthetics::v202101beta1::TestStatus value) {
  
  status_ = value;
}
inline void Test::set_status(::kentik::synthetics::v202101beta1::TestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Test.status)
}

// .kentik.synthetics.v202101beta1.TestSettings settings = 6[json_name = "settings"];
inline bool Test::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool Test::has_settings() const {
  return _internal_has_settings();
}
inline void Test::clear_settings() {
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::TestSettings& Test::_internal_settings() const {
  const ::kentik::synthetics::v202101beta1::TestSettings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::TestSettings*>(
      &::kentik::synthetics::v202101beta1::_TestSettings_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::TestSettings& Test::settings() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.settings)
  return _internal_settings();
}
inline void Test::unsafe_arena_set_allocated_settings(
    ::kentik::synthetics::v202101beta1::TestSettings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.settings)
}
inline ::kentik::synthetics::v202101beta1::TestSettings* Test::release_settings() {
  auto temp = unsafe_arena_release_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TestSettings* Test::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.settings)
  
  ::kentik::synthetics::v202101beta1::TestSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TestSettings* Test::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestSettings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::kentik::synthetics::v202101beta1::TestSettings* Test::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.settings)
  return _internal_mutable_settings();
}
inline void Test::set_allocated_settings(::kentik::synthetics::v202101beta1::TestSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.settings)
}

// .google.protobuf.Timestamp expires_on = 7[json_name = "expiresOn"];
inline bool Test::_internal_has_expires_on() const {
  return this != internal_default_instance() && expires_on_ != nullptr;
}
inline bool Test::has_expires_on() const {
  return _internal_has_expires_on();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::_internal_expires_on() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_on_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::expires_on() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.expires_on)
  return _internal_expires_on();
}
inline void Test::unsafe_arena_set_allocated_expires_on(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_on) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_on_);
  }
  expires_on_ = expires_on;
  if (expires_on) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.expires_on)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::release_expires_on() {
  auto temp = unsafe_arena_release_expires_on();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::unsafe_arena_release_expires_on() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.expires_on)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_on_;
  expires_on_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::_internal_mutable_expires_on() {
  
  if (expires_on_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_on_ = p;
  }
  return expires_on_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::mutable_expires_on() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.expires_on)
  return _internal_mutable_expires_on();
}
inline void Test::set_allocated_expires_on(PROTOBUF_NAMESPACE_ID::Timestamp* expires_on) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_on_);
  }
  if (expires_on) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_on)->GetArena();
    if (message_arena != submessage_arena) {
      expires_on = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_on, submessage_arena);
    }
    
  } else {
    
  }
  expires_on_ = expires_on;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.expires_on)
}

// .google.protobuf.Timestamp cdate = 8[json_name = "cdate"];
inline bool Test::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool Test::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.cdate)
  return _internal_cdate();
}
inline void Test::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.cdate)
  return _internal_mutable_cdate();
}
inline void Test::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.cdate)
}

// .google.protobuf.Timestamp edate = 9[json_name = "edate"];
inline bool Test::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool Test::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::edate() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.edate)
  return _internal_edate();
}
inline void Test::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.edate)
  return _internal_mutable_edate();
}
inline void Test::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.edate)
}

// .kentik.synthetics.v202101beta1.UserInfo created_by = 10[json_name = "createdBy"];
inline bool Test::_internal_has_created_by() const {
  return this != internal_default_instance() && created_by_ != nullptr;
}
inline bool Test::has_created_by() const {
  return _internal_has_created_by();
}
inline void Test::clear_created_by() {
  if (GetArena() == nullptr && created_by_ != nullptr) {
    delete created_by_;
  }
  created_by_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::UserInfo& Test::_internal_created_by() const {
  const ::kentik::synthetics::v202101beta1::UserInfo* p = created_by_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::UserInfo*>(
      &::kentik::synthetics::v202101beta1::_UserInfo_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::UserInfo& Test::created_by() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.created_by)
  return _internal_created_by();
}
inline void Test::unsafe_arena_set_allocated_created_by(
    ::kentik::synthetics::v202101beta1::UserInfo* created_by) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by_);
  }
  created_by_ = created_by;
  if (created_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.created_by)
}
inline ::kentik::synthetics::v202101beta1::UserInfo* Test::release_created_by() {
  auto temp = unsafe_arena_release_created_by();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::UserInfo* Test::unsafe_arena_release_created_by() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.created_by)
  
  ::kentik::synthetics::v202101beta1::UserInfo* temp = created_by_;
  created_by_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::UserInfo* Test::_internal_mutable_created_by() {
  
  if (created_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::UserInfo>(GetArena());
    created_by_ = p;
  }
  return created_by_;
}
inline ::kentik::synthetics::v202101beta1::UserInfo* Test::mutable_created_by() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.created_by)
  return _internal_mutable_created_by();
}
inline void Test::set_allocated_created_by(::kentik::synthetics::v202101beta1::UserInfo* created_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete created_by_;
  }
  if (created_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(created_by);
    if (message_arena != submessage_arena) {
      created_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_by, submessage_arena);
    }
    
  } else {
    
  }
  created_by_ = created_by;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.created_by)
}

// .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11[json_name = "lastUpdatedBy"];
inline bool Test::_internal_has_last_updated_by() const {
  return this != internal_default_instance() && last_updated_by_ != nullptr;
}
inline bool Test::has_last_updated_by() const {
  return _internal_has_last_updated_by();
}
inline void Test::clear_last_updated_by() {
  if (GetArena() == nullptr && last_updated_by_ != nullptr) {
    delete last_updated_by_;
  }
  last_updated_by_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::UserInfo& Test::_internal_last_updated_by() const {
  const ::kentik::synthetics::v202101beta1::UserInfo* p = last_updated_by_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::UserInfo*>(
      &::kentik::synthetics::v202101beta1::_UserInfo_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::UserInfo& Test::last_updated_by() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Test.last_updated_by)
  return _internal_last_updated_by();
}
inline void Test::unsafe_arena_set_allocated_last_updated_by(
    ::kentik::synthetics::v202101beta1::UserInfo* last_updated_by) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_by_);
  }
  last_updated_by_ = last_updated_by;
  if (last_updated_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Test.last_updated_by)
}
inline ::kentik::synthetics::v202101beta1::UserInfo* Test::release_last_updated_by() {
  auto temp = unsafe_arena_release_last_updated_by();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::UserInfo* Test::unsafe_arena_release_last_updated_by() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Test.last_updated_by)
  
  ::kentik::synthetics::v202101beta1::UserInfo* temp = last_updated_by_;
  last_updated_by_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::UserInfo* Test::_internal_mutable_last_updated_by() {
  
  if (last_updated_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::UserInfo>(GetArena());
    last_updated_by_ = p;
  }
  return last_updated_by_;
}
inline ::kentik::synthetics::v202101beta1::UserInfo* Test::mutable_last_updated_by() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Test.last_updated_by)
  return _internal_mutable_last_updated_by();
}
inline void Test::set_allocated_last_updated_by(::kentik::synthetics::v202101beta1::UserInfo* last_updated_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete last_updated_by_;
  }
  if (last_updated_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(last_updated_by);
    if (message_arena != submessage_arena) {
      last_updated_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated_by, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_by_ = last_updated_by;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Test.last_updated_by)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HTTPConfig

// uint32 period = 1[json_name = "period"];
inline void HTTPConfig::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPConfig::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPConfig::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HTTPConfig.period)
  return _internal_period();
}
inline void HTTPConfig::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void HTTPConfig::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HTTPConfig.period)
}

// uint32 expiry = 2[json_name = "expiry"];
inline void HTTPConfig::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPConfig::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPConfig::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HTTPConfig.expiry)
  return _internal_expiry();
}
inline void HTTPConfig::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void HTTPConfig::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HTTPConfig.expiry)
}

// string method = 3[json_name = "method"];
inline void HTTPConfig::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPConfig::method() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HTTPConfig.method)
  return _internal_method();
}
inline void HTTPConfig::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HTTPConfig.method)
}
inline std::string* HTTPConfig::mutable_method() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HTTPConfig.method)
  return _internal_mutable_method();
}
inline const std::string& HTTPConfig::_internal_method() const {
  return method_.Get();
}
inline void HTTPConfig::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPConfig::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HTTPConfig.method)
}
inline void HTTPConfig::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HTTPConfig.method)
}
inline void HTTPConfig::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HTTPConfig.method)
}
inline std::string* HTTPConfig::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPConfig::release_method() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HTTPConfig.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPConfig::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HTTPConfig.method)
}
inline std::string* HTTPConfig::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HTTPConfig.method)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPConfig::unsafe_arena_set_allocated_method(
    std::string* method) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method != nullptr) {
    
  } else {
    
  }
  method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HTTPConfig.method)
}

// map<string, string> headers = 4[json_name = "headers"];
inline int HTTPConfig::_internal_headers_size() const {
  return headers_.size();
}
inline int HTTPConfig::headers_size() const {
  return _internal_headers_size();
}
inline void HTTPConfig::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HTTPConfig::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HTTPConfig::headers() const {
  // @@protoc_insertion_point(field_map:kentik.synthetics.v202101beta1.HTTPConfig.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HTTPConfig::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HTTPConfig::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:kentik.synthetics.v202101beta1.HTTPConfig.headers)
  return _internal_mutable_headers();
}

// string body = 5[json_name = "body"];
inline void HTTPConfig::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPConfig::body() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HTTPConfig.body)
  return _internal_body();
}
inline void HTTPConfig::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HTTPConfig.body)
}
inline std::string* HTTPConfig::mutable_body() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HTTPConfig.body)
  return _internal_mutable_body();
}
inline const std::string& HTTPConfig::_internal_body() const {
  return body_.Get();
}
inline void HTTPConfig::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPConfig::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HTTPConfig.body)
}
inline void HTTPConfig::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HTTPConfig.body)
}
inline void HTTPConfig::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HTTPConfig.body)
}
inline std::string* HTTPConfig::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPConfig::release_body() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HTTPConfig.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPConfig::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HTTPConfig.body)
}
inline std::string* HTTPConfig::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HTTPConfig.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPConfig::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HTTPConfig.body)
}

// bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors"];
inline void HTTPConfig::clear_ignore_tls_errors() {
  ignore_tls_errors_ = false;
}
inline bool HTTPConfig::_internal_ignore_tls_errors() const {
  return ignore_tls_errors_;
}
inline bool HTTPConfig::ignore_tls_errors() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HTTPConfig.ignore_tls_errors)
  return _internal_ignore_tls_errors();
}
inline void HTTPConfig::_internal_set_ignore_tls_errors(bool value) {
  
  ignore_tls_errors_ = value;
}
inline void HTTPConfig::set_ignore_tls_errors(bool value) {
  _internal_set_ignore_tls_errors(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HTTPConfig.ignore_tls_errors)
}

// map<string, string> css_selectors = 7[json_name = "cssSelectors"];
inline int HTTPConfig::_internal_css_selectors_size() const {
  return css_selectors_.size();
}
inline int HTTPConfig::css_selectors_size() const {
  return _internal_css_selectors_size();
}
inline void HTTPConfig::clear_css_selectors() {
  css_selectors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HTTPConfig::_internal_css_selectors() const {
  return css_selectors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
HTTPConfig::css_selectors() const {
  // @@protoc_insertion_point(field_map:kentik.synthetics.v202101beta1.HTTPConfig.css_selectors)
  return _internal_css_selectors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HTTPConfig::_internal_mutable_css_selectors() {
  return css_selectors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
HTTPConfig::mutable_css_selectors() {
  // @@protoc_insertion_point(field_mutable_map:kentik.synthetics.v202101beta1.HTTPConfig.css_selectors)
  return _internal_mutable_css_selectors();
}

// -------------------------------------------------------------------

// TestSettings

// .kentik.synthetics.v202101beta1.HostnameTest hostname = 4[json_name = "hostname"];
inline bool TestSettings::_internal_has_hostname() const {
  return definition_case() == kHostname;
}
inline bool TestSettings::has_hostname() const {
  return _internal_has_hostname();
}
inline void TestSettings::set_has_hostname() {
  _oneof_case_[0] = kHostname;
}
inline void TestSettings::clear_hostname() {
  if (_internal_has_hostname()) {
    if (GetArena() == nullptr) {
      delete definition_.hostname_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::HostnameTest* TestSettings::release_hostname() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.hostname)
  if (_internal_has_hostname()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::HostnameTest* temp = definition_.hostname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.hostname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::HostnameTest& TestSettings::_internal_hostname() const {
  return _internal_has_hostname()
      ? *definition_.hostname_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::HostnameTest*>(&::kentik::synthetics::v202101beta1::_HostnameTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::HostnameTest& TestSettings::hostname() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.hostname)
  return _internal_hostname();
}
inline ::kentik::synthetics::v202101beta1::HostnameTest* TestSettings::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.hostname)
  if (_internal_has_hostname()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::HostnameTest* temp = definition_.hostname_;
    definition_.hostname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_hostname(::kentik::synthetics::v202101beta1::HostnameTest* hostname) {
  clear_definition();
  if (hostname) {
    set_has_hostname();
    definition_.hostname_ = hostname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.hostname)
}
inline ::kentik::synthetics::v202101beta1::HostnameTest* TestSettings::_internal_mutable_hostname() {
  if (!_internal_has_hostname()) {
    clear_definition();
    set_has_hostname();
    definition_.hostname_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HostnameTest >(GetArena());
  }
  return definition_.hostname_;
}
inline ::kentik::synthetics::v202101beta1::HostnameTest* TestSettings::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.hostname)
  return _internal_mutable_hostname();
}

// .kentik.synthetics.v202101beta1.IpTest ip = 5[json_name = "ip"];
inline bool TestSettings::_internal_has_ip() const {
  return definition_case() == kIp;
}
inline bool TestSettings::has_ip() const {
  return _internal_has_ip();
}
inline void TestSettings::set_has_ip() {
  _oneof_case_[0] = kIp;
}
inline void TestSettings::clear_ip() {
  if (_internal_has_ip()) {
    if (GetArena() == nullptr) {
      delete definition_.ip_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::IpTest* TestSettings::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.ip)
  if (_internal_has_ip()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::IpTest* temp = definition_.ip_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.ip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::IpTest& TestSettings::_internal_ip() const {
  return _internal_has_ip()
      ? *definition_.ip_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::IpTest*>(&::kentik::synthetics::v202101beta1::_IpTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::IpTest& TestSettings::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.ip)
  return _internal_ip();
}
inline ::kentik::synthetics::v202101beta1::IpTest* TestSettings::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.ip)
  if (_internal_has_ip()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::IpTest* temp = definition_.ip_;
    definition_.ip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_ip(::kentik::synthetics::v202101beta1::IpTest* ip) {
  clear_definition();
  if (ip) {
    set_has_ip();
    definition_.ip_ = ip;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.ip)
}
inline ::kentik::synthetics::v202101beta1::IpTest* TestSettings::_internal_mutable_ip() {
  if (!_internal_has_ip()) {
    clear_definition();
    set_has_ip();
    definition_.ip_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::IpTest >(GetArena());
  }
  return definition_.ip_;
}
inline ::kentik::synthetics::v202101beta1::IpTest* TestSettings::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.ip)
  return _internal_mutable_ip();
}

// .kentik.synthetics.v202101beta1.AgentTest agent = 6[json_name = "agent"];
inline bool TestSettings::_internal_has_agent() const {
  return definition_case() == kAgent;
}
inline bool TestSettings::has_agent() const {
  return _internal_has_agent();
}
inline void TestSettings::set_has_agent() {
  _oneof_case_[0] = kAgent;
}
inline void TestSettings::clear_agent() {
  if (_internal_has_agent()) {
    if (GetArena() == nullptr) {
      delete definition_.agent_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::AgentTest* TestSettings::release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.agent)
  if (_internal_has_agent()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::AgentTest* temp = definition_.agent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.agent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::AgentTest& TestSettings::_internal_agent() const {
  return _internal_has_agent()
      ? *definition_.agent_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::AgentTest*>(&::kentik::synthetics::v202101beta1::_AgentTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::AgentTest& TestSettings::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.agent)
  return _internal_agent();
}
inline ::kentik::synthetics::v202101beta1::AgentTest* TestSettings::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.agent)
  if (_internal_has_agent()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::AgentTest* temp = definition_.agent_;
    definition_.agent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_agent(::kentik::synthetics::v202101beta1::AgentTest* agent) {
  clear_definition();
  if (agent) {
    set_has_agent();
    definition_.agent_ = agent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.agent)
}
inline ::kentik::synthetics::v202101beta1::AgentTest* TestSettings::_internal_mutable_agent() {
  if (!_internal_has_agent()) {
    clear_definition();
    set_has_agent();
    definition_.agent_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::AgentTest >(GetArena());
  }
  return definition_.agent_;
}
inline ::kentik::synthetics::v202101beta1::AgentTest* TestSettings::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.agent)
  return _internal_mutable_agent();
}

// .kentik.synthetics.v202101beta1.FlowTest flow = 7[json_name = "flow"];
inline bool TestSettings::_internal_has_flow() const {
  return definition_case() == kFlow;
}
inline bool TestSettings::has_flow() const {
  return _internal_has_flow();
}
inline void TestSettings::set_has_flow() {
  _oneof_case_[0] = kFlow;
}
inline void TestSettings::clear_flow() {
  if (_internal_has_flow()) {
    if (GetArena() == nullptr) {
      delete definition_.flow_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::FlowTest* TestSettings::release_flow() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.flow)
  if (_internal_has_flow()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::FlowTest* temp = definition_.flow_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.flow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::FlowTest& TestSettings::_internal_flow() const {
  return _internal_has_flow()
      ? *definition_.flow_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::FlowTest*>(&::kentik::synthetics::v202101beta1::_FlowTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::FlowTest& TestSettings::flow() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.flow)
  return _internal_flow();
}
inline ::kentik::synthetics::v202101beta1::FlowTest* TestSettings::unsafe_arena_release_flow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.flow)
  if (_internal_has_flow()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::FlowTest* temp = definition_.flow_;
    definition_.flow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_flow(::kentik::synthetics::v202101beta1::FlowTest* flow) {
  clear_definition();
  if (flow) {
    set_has_flow();
    definition_.flow_ = flow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.flow)
}
inline ::kentik::synthetics::v202101beta1::FlowTest* TestSettings::_internal_mutable_flow() {
  if (!_internal_has_flow()) {
    clear_definition();
    set_has_flow();
    definition_.flow_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::FlowTest >(GetArena());
  }
  return definition_.flow_;
}
inline ::kentik::synthetics::v202101beta1::FlowTest* TestSettings::mutable_flow() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.flow)
  return _internal_mutable_flow();
}

// .kentik.synthetics.v202101beta1.SiteTest site = 8[json_name = "site"];
inline bool TestSettings::_internal_has_site() const {
  return definition_case() == kSite;
}
inline bool TestSettings::has_site() const {
  return _internal_has_site();
}
inline void TestSettings::set_has_site() {
  _oneof_case_[0] = kSite;
}
inline void TestSettings::clear_site() {
  if (_internal_has_site()) {
    if (GetArena() == nullptr) {
      delete definition_.site_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::SiteTest* TestSettings::release_site() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.site)
  if (_internal_has_site()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::SiteTest* temp = definition_.site_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.site_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::SiteTest& TestSettings::_internal_site() const {
  return _internal_has_site()
      ? *definition_.site_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::SiteTest*>(&::kentik::synthetics::v202101beta1::_SiteTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::SiteTest& TestSettings::site() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.site)
  return _internal_site();
}
inline ::kentik::synthetics::v202101beta1::SiteTest* TestSettings::unsafe_arena_release_site() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.site)
  if (_internal_has_site()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::SiteTest* temp = definition_.site_;
    definition_.site_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_site(::kentik::synthetics::v202101beta1::SiteTest* site) {
  clear_definition();
  if (site) {
    set_has_site();
    definition_.site_ = site;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.site)
}
inline ::kentik::synthetics::v202101beta1::SiteTest* TestSettings::_internal_mutable_site() {
  if (!_internal_has_site()) {
    clear_definition();
    set_has_site();
    definition_.site_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::SiteTest >(GetArena());
  }
  return definition_.site_;
}
inline ::kentik::synthetics::v202101beta1::SiteTest* TestSettings::mutable_site() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.site)
  return _internal_mutable_site();
}

// .kentik.synthetics.v202101beta1.TagTest tag = 9[json_name = "tag"];
inline bool TestSettings::_internal_has_tag() const {
  return definition_case() == kTag;
}
inline bool TestSettings::has_tag() const {
  return _internal_has_tag();
}
inline void TestSettings::set_has_tag() {
  _oneof_case_[0] = kTag;
}
inline void TestSettings::clear_tag() {
  if (_internal_has_tag()) {
    if (GetArena() == nullptr) {
      delete definition_.tag_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::TagTest* TestSettings::release_tag() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.tag)
  if (_internal_has_tag()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::TagTest* temp = definition_.tag_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::TagTest& TestSettings::_internal_tag() const {
  return _internal_has_tag()
      ? *definition_.tag_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::TagTest*>(&::kentik::synthetics::v202101beta1::_TagTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::TagTest& TestSettings::tag() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.tag)
  return _internal_tag();
}
inline ::kentik::synthetics::v202101beta1::TagTest* TestSettings::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.tag)
  if (_internal_has_tag()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::TagTest* temp = definition_.tag_;
    definition_.tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_tag(::kentik::synthetics::v202101beta1::TagTest* tag) {
  clear_definition();
  if (tag) {
    set_has_tag();
    definition_.tag_ = tag;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.tag)
}
inline ::kentik::synthetics::v202101beta1::TagTest* TestSettings::_internal_mutable_tag() {
  if (!_internal_has_tag()) {
    clear_definition();
    set_has_tag();
    definition_.tag_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TagTest >(GetArena());
  }
  return definition_.tag_;
}
inline ::kentik::synthetics::v202101beta1::TagTest* TestSettings::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.tag)
  return _internal_mutable_tag();
}

// .kentik.synthetics.v202101beta1.DnsTest dns = 10[json_name = "dns"];
inline bool TestSettings::_internal_has_dns() const {
  return definition_case() == kDns;
}
inline bool TestSettings::has_dns() const {
  return _internal_has_dns();
}
inline void TestSettings::set_has_dns() {
  _oneof_case_[0] = kDns;
}
inline void TestSettings::clear_dns() {
  if (_internal_has_dns()) {
    if (GetArena() == nullptr) {
      delete definition_.dns_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::DnsTest* TestSettings::release_dns() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.dns)
  if (_internal_has_dns()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::DnsTest* temp = definition_.dns_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.dns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::DnsTest& TestSettings::_internal_dns() const {
  return _internal_has_dns()
      ? *definition_.dns_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::DnsTest*>(&::kentik::synthetics::v202101beta1::_DnsTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::DnsTest& TestSettings::dns() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.dns)
  return _internal_dns();
}
inline ::kentik::synthetics::v202101beta1::DnsTest* TestSettings::unsafe_arena_release_dns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.dns)
  if (_internal_has_dns()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::DnsTest* temp = definition_.dns_;
    definition_.dns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_dns(::kentik::synthetics::v202101beta1::DnsTest* dns) {
  clear_definition();
  if (dns) {
    set_has_dns();
    definition_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.dns)
}
inline ::kentik::synthetics::v202101beta1::DnsTest* TestSettings::_internal_mutable_dns() {
  if (!_internal_has_dns()) {
    clear_definition();
    set_has_dns();
    definition_.dns_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DnsTest >(GetArena());
  }
  return definition_.dns_;
}
inline ::kentik::synthetics::v202101beta1::DnsTest* TestSettings::mutable_dns() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.dns)
  return _internal_mutable_dns();
}

// .kentik.synthetics.v202101beta1.UrlTest url = 11[json_name = "url"];
inline bool TestSettings::_internal_has_url() const {
  return definition_case() == kUrl;
}
inline bool TestSettings::has_url() const {
  return _internal_has_url();
}
inline void TestSettings::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void TestSettings::clear_url() {
  if (_internal_has_url()) {
    if (GetArena() == nullptr) {
      delete definition_.url_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::UrlTest* TestSettings::release_url() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.url)
  if (_internal_has_url()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::UrlTest* temp = definition_.url_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::UrlTest& TestSettings::_internal_url() const {
  return _internal_has_url()
      ? *definition_.url_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::UrlTest*>(&::kentik::synthetics::v202101beta1::_UrlTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::UrlTest& TestSettings::url() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.url)
  return _internal_url();
}
inline ::kentik::synthetics::v202101beta1::UrlTest* TestSettings::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.url)
  if (_internal_has_url()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::UrlTest* temp = definition_.url_;
    definition_.url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_url(::kentik::synthetics::v202101beta1::UrlTest* url) {
  clear_definition();
  if (url) {
    set_has_url();
    definition_.url_ = url;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.url)
}
inline ::kentik::synthetics::v202101beta1::UrlTest* TestSettings::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_definition();
    set_has_url();
    definition_.url_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::UrlTest >(GetArena());
  }
  return definition_.url_;
}
inline ::kentik::synthetics::v202101beta1::UrlTest* TestSettings::mutable_url() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.url)
  return _internal_mutable_url();
}

// .kentik.synthetics.v202101beta1.GridTest network_grid = 35[json_name = "networkGrid"];
inline bool TestSettings::_internal_has_network_grid() const {
  return definition_case() == kNetworkGrid;
}
inline bool TestSettings::has_network_grid() const {
  return _internal_has_network_grid();
}
inline void TestSettings::set_has_network_grid() {
  _oneof_case_[0] = kNetworkGrid;
}
inline void TestSettings::clear_network_grid() {
  if (_internal_has_network_grid()) {
    if (GetArena() == nullptr) {
      delete definition_.network_grid_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::GridTest* TestSettings::release_network_grid() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.network_grid)
  if (_internal_has_network_grid()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::GridTest* temp = definition_.network_grid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.network_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::GridTest& TestSettings::_internal_network_grid() const {
  return _internal_has_network_grid()
      ? *definition_.network_grid_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::GridTest*>(&::kentik::synthetics::v202101beta1::_GridTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::GridTest& TestSettings::network_grid() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.network_grid)
  return _internal_network_grid();
}
inline ::kentik::synthetics::v202101beta1::GridTest* TestSettings::unsafe_arena_release_network_grid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.network_grid)
  if (_internal_has_network_grid()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::GridTest* temp = definition_.network_grid_;
    definition_.network_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_network_grid(::kentik::synthetics::v202101beta1::GridTest* network_grid) {
  clear_definition();
  if (network_grid) {
    set_has_network_grid();
    definition_.network_grid_ = network_grid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.network_grid)
}
inline ::kentik::synthetics::v202101beta1::GridTest* TestSettings::_internal_mutable_network_grid() {
  if (!_internal_has_network_grid()) {
    clear_definition();
    set_has_network_grid();
    definition_.network_grid_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GridTest >(GetArena());
  }
  return definition_.network_grid_;
}
inline ::kentik::synthetics::v202101beta1::GridTest* TestSettings::mutable_network_grid() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.network_grid)
  return _internal_mutable_network_grid();
}

// .kentik.synthetics.v202101beta1.UrlTest page_load = 36[json_name = "pageLoad"];
inline bool TestSettings::_internal_has_page_load() const {
  return definition_case() == kPageLoad;
}
inline bool TestSettings::has_page_load() const {
  return _internal_has_page_load();
}
inline void TestSettings::set_has_page_load() {
  _oneof_case_[0] = kPageLoad;
}
inline void TestSettings::clear_page_load() {
  if (_internal_has_page_load()) {
    if (GetArena() == nullptr) {
      delete definition_.page_load_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::UrlTest* TestSettings::release_page_load() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.page_load)
  if (_internal_has_page_load()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::UrlTest* temp = definition_.page_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.page_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::UrlTest& TestSettings::_internal_page_load() const {
  return _internal_has_page_load()
      ? *definition_.page_load_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::UrlTest*>(&::kentik::synthetics::v202101beta1::_UrlTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::UrlTest& TestSettings::page_load() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.page_load)
  return _internal_page_load();
}
inline ::kentik::synthetics::v202101beta1::UrlTest* TestSettings::unsafe_arena_release_page_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.page_load)
  if (_internal_has_page_load()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::UrlTest* temp = definition_.page_load_;
    definition_.page_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_page_load(::kentik::synthetics::v202101beta1::UrlTest* page_load) {
  clear_definition();
  if (page_load) {
    set_has_page_load();
    definition_.page_load_ = page_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.page_load)
}
inline ::kentik::synthetics::v202101beta1::UrlTest* TestSettings::_internal_mutable_page_load() {
  if (!_internal_has_page_load()) {
    clear_definition();
    set_has_page_load();
    definition_.page_load_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::UrlTest >(GetArena());
  }
  return definition_.page_load_;
}
inline ::kentik::synthetics::v202101beta1::UrlTest* TestSettings::mutable_page_load() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.page_load)
  return _internal_mutable_page_load();
}

// .kentik.synthetics.v202101beta1.DnsGridTest dns_grid = 37[json_name = "dnsGrid"];
inline bool TestSettings::_internal_has_dns_grid() const {
  return definition_case() == kDnsGrid;
}
inline bool TestSettings::has_dns_grid() const {
  return _internal_has_dns_grid();
}
inline void TestSettings::set_has_dns_grid() {
  _oneof_case_[0] = kDnsGrid;
}
inline void TestSettings::clear_dns_grid() {
  if (_internal_has_dns_grid()) {
    if (GetArena() == nullptr) {
      delete definition_.dns_grid_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::DnsGridTest* TestSettings::release_dns_grid() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.dns_grid)
  if (_internal_has_dns_grid()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::DnsGridTest* temp = definition_.dns_grid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.dns_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::DnsGridTest& TestSettings::_internal_dns_grid() const {
  return _internal_has_dns_grid()
      ? *definition_.dns_grid_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::DnsGridTest*>(&::kentik::synthetics::v202101beta1::_DnsGridTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::DnsGridTest& TestSettings::dns_grid() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.dns_grid)
  return _internal_dns_grid();
}
inline ::kentik::synthetics::v202101beta1::DnsGridTest* TestSettings::unsafe_arena_release_dns_grid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.dns_grid)
  if (_internal_has_dns_grid()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::DnsGridTest* temp = definition_.dns_grid_;
    definition_.dns_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_dns_grid(::kentik::synthetics::v202101beta1::DnsGridTest* dns_grid) {
  clear_definition();
  if (dns_grid) {
    set_has_dns_grid();
    definition_.dns_grid_ = dns_grid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.dns_grid)
}
inline ::kentik::synthetics::v202101beta1::DnsGridTest* TestSettings::_internal_mutable_dns_grid() {
  if (!_internal_has_dns_grid()) {
    clear_definition();
    set_has_dns_grid();
    definition_.dns_grid_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DnsGridTest >(GetArena());
  }
  return definition_.dns_grid_;
}
inline ::kentik::synthetics::v202101beta1::DnsGridTest* TestSettings::mutable_dns_grid() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.dns_grid)
  return _internal_mutable_dns_grid();
}

// .kentik.synthetics.v202101beta1.ApplicationMeshTest application_mesh = 38[json_name = "applicationMesh"];
inline bool TestSettings::_internal_has_application_mesh() const {
  return definition_case() == kApplicationMesh;
}
inline bool TestSettings::has_application_mesh() const {
  return _internal_has_application_mesh();
}
inline void TestSettings::set_has_application_mesh() {
  _oneof_case_[0] = kApplicationMesh;
}
inline void TestSettings::clear_application_mesh() {
  if (_internal_has_application_mesh()) {
    if (GetArena() == nullptr) {
      delete definition_.application_mesh_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202101beta1::ApplicationMeshTest* TestSettings::release_application_mesh() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.application_mesh)
  if (_internal_has_application_mesh()) {
    clear_has_definition();
      ::kentik::synthetics::v202101beta1::ApplicationMeshTest* temp = definition_.application_mesh_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.application_mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202101beta1::ApplicationMeshTest& TestSettings::_internal_application_mesh() const {
  return _internal_has_application_mesh()
      ? *definition_.application_mesh_
      : *reinterpret_cast< ::kentik::synthetics::v202101beta1::ApplicationMeshTest*>(&::kentik::synthetics::v202101beta1::_ApplicationMeshTest_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::ApplicationMeshTest& TestSettings::application_mesh() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.application_mesh)
  return _internal_application_mesh();
}
inline ::kentik::synthetics::v202101beta1::ApplicationMeshTest* TestSettings::unsafe_arena_release_application_mesh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.application_mesh)
  if (_internal_has_application_mesh()) {
    clear_has_definition();
    ::kentik::synthetics::v202101beta1::ApplicationMeshTest* temp = definition_.application_mesh_;
    definition_.application_mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_application_mesh(::kentik::synthetics::v202101beta1::ApplicationMeshTest* application_mesh) {
  clear_definition();
  if (application_mesh) {
    set_has_application_mesh();
    definition_.application_mesh_ = application_mesh;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.application_mesh)
}
inline ::kentik::synthetics::v202101beta1::ApplicationMeshTest* TestSettings::_internal_mutable_application_mesh() {
  if (!_internal_has_application_mesh()) {
    clear_definition();
    set_has_application_mesh();
    definition_.application_mesh_ = CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ApplicationMeshTest >(GetArena());
  }
  return definition_.application_mesh_;
}
inline ::kentik::synthetics::v202101beta1::ApplicationMeshTest* TestSettings::mutable_application_mesh() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.application_mesh)
  return _internal_mutable_application_mesh();
}

// repeated string agent_ids = 14[json_name = "agentIds"];
inline int TestSettings::_internal_agent_ids_size() const {
  return agent_ids_.size();
}
inline int TestSettings::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void TestSettings::clear_agent_ids() {
  agent_ids_.Clear();
}
inline std::string* TestSettings::add_agent_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
  return _internal_add_agent_ids();
}
inline const std::string& TestSettings::_internal_agent_ids(int index) const {
  return agent_ids_.Get(index);
}
inline const std::string& TestSettings::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
  return _internal_agent_ids(index);
}
inline std::string* TestSettings::mutable_agent_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
  return agent_ids_.Mutable(index);
}
inline void TestSettings::set_agent_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
  agent_ids_.Mutable(index)->assign(value);
}
inline void TestSettings::set_agent_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
  agent_ids_.Mutable(index)->assign(std::move(value));
}
inline void TestSettings::set_agent_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
}
inline void TestSettings::set_agent_ids(int index, const char* value, size_t size) {
  agent_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
}
inline std::string* TestSettings::_internal_add_agent_ids() {
  return agent_ids_.Add();
}
inline void TestSettings::add_agent_ids(const std::string& value) {
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
}
inline void TestSettings::add_agent_ids(std::string&& value) {
  agent_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
}
inline void TestSettings::add_agent_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
}
inline void TestSettings::add_agent_ids(const char* value, size_t size) {
  agent_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestSettings::agent_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
  return agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestSettings::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TestSettings.agent_ids)
  return &agent_ids_;
}

// uint32 period = 15[json_name = "period"];
inline void TestSettings::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.period)
  return _internal_period();
}
inline void TestSettings::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void TestSettings::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.period)
}

// uint32 count = 16[json_name = "count"];
inline void TestSettings::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.count)
  return _internal_count();
}
inline void TestSettings::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void TestSettings::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.count)
}

// uint32 expiry = 17[json_name = "expiry"];
inline void TestSettings::clear_expiry() {
  expiry_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::_internal_expiry() const {
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.expiry)
  return _internal_expiry();
}
inline void TestSettings::_internal_set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  expiry_ = value;
}
inline void TestSettings::set_expiry(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.expiry)
}

// uint32 limit = 18[json_name = "limit"];
inline void TestSettings::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::limit() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.limit)
  return _internal_limit();
}
inline void TestSettings::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void TestSettings::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.limit)
}

// repeated string tasks = 19[json_name = "tasks"];
inline int TestSettings::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TestSettings::tasks_size() const {
  return _internal_tasks_size();
}
inline void TestSettings::clear_tasks() {
  tasks_.Clear();
}
inline std::string* TestSettings::add_tasks() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.TestSettings.tasks)
  return _internal_add_tasks();
}
inline const std::string& TestSettings::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const std::string& TestSettings::tasks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.tasks)
  return _internal_tasks(index);
}
inline std::string* TestSettings::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.tasks)
  return tasks_.Mutable(index);
}
inline void TestSettings::set_tasks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.tasks)
  tasks_.Mutable(index)->assign(value);
}
inline void TestSettings::set_tasks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.tasks)
  tasks_.Mutable(index)->assign(std::move(value));
}
inline void TestSettings::set_tasks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestSettings.tasks)
}
inline void TestSettings::set_tasks(int index, const char* value, size_t size) {
  tasks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestSettings.tasks)
}
inline std::string* TestSettings::_internal_add_tasks() {
  return tasks_.Add();
}
inline void TestSettings::add_tasks(const std::string& value) {
  tasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestSettings.tasks)
}
inline void TestSettings::add_tasks(std::string&& value) {
  tasks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestSettings.tasks)
}
inline void TestSettings::add_tasks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.TestSettings.tasks)
}
inline void TestSettings::add_tasks(const char* value, size_t size) {
  tasks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.TestSettings.tasks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestSettings::tasks() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TestSettings.tasks)
  return tasks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestSettings::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TestSettings.tasks)
  return &tasks_;
}

// .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22[json_name = "healthSettings"];
inline bool TestSettings::_internal_has_health_settings() const {
  return this != internal_default_instance() && health_settings_ != nullptr;
}
inline bool TestSettings::has_health_settings() const {
  return _internal_has_health_settings();
}
inline void TestSettings::clear_health_settings() {
  if (GetArena() == nullptr && health_settings_ != nullptr) {
    delete health_settings_;
  }
  health_settings_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::HealthSettings& TestSettings::_internal_health_settings() const {
  const ::kentik::synthetics::v202101beta1::HealthSettings* p = health_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::HealthSettings*>(
      &::kentik::synthetics::v202101beta1::_HealthSettings_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::HealthSettings& TestSettings::health_settings() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.health_settings)
  return _internal_health_settings();
}
inline void TestSettings::unsafe_arena_set_allocated_health_settings(
    ::kentik::synthetics::v202101beta1::HealthSettings* health_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(health_settings_);
  }
  health_settings_ = health_settings;
  if (health_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.health_settings)
}
inline ::kentik::synthetics::v202101beta1::HealthSettings* TestSettings::release_health_settings() {
  auto temp = unsafe_arena_release_health_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::HealthSettings* TestSettings::unsafe_arena_release_health_settings() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.health_settings)
  
  ::kentik::synthetics::v202101beta1::HealthSettings* temp = health_settings_;
  health_settings_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::HealthSettings* TestSettings::_internal_mutable_health_settings() {
  
  if (health_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::HealthSettings>(GetArena());
    health_settings_ = p;
  }
  return health_settings_;
}
inline ::kentik::synthetics::v202101beta1::HealthSettings* TestSettings::mutable_health_settings() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.health_settings)
  return _internal_mutable_health_settings();
}
inline void TestSettings::set_allocated_health_settings(::kentik::synthetics::v202101beta1::HealthSettings* health_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete health_settings_;
  }
  if (health_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(health_settings);
    if (message_arena != submessage_arena) {
      health_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health_settings, submessage_arena);
    }
    
  } else {
    
  }
  health_settings_ = health_settings;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.health_settings)
}

// .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24[json_name = "monitoringSettings"];
inline bool TestSettings::_internal_has_monitoring_settings() const {
  return this != internal_default_instance() && monitoring_settings_ != nullptr;
}
inline bool TestSettings::has_monitoring_settings() const {
  return _internal_has_monitoring_settings();
}
inline void TestSettings::clear_monitoring_settings() {
  if (GetArena() == nullptr && monitoring_settings_ != nullptr) {
    delete monitoring_settings_;
  }
  monitoring_settings_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::TestMonitoringSettings& TestSettings::_internal_monitoring_settings() const {
  const ::kentik::synthetics::v202101beta1::TestMonitoringSettings* p = monitoring_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::TestMonitoringSettings*>(
      &::kentik::synthetics::v202101beta1::_TestMonitoringSettings_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::TestMonitoringSettings& TestSettings::monitoring_settings() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.monitoring_settings)
  return _internal_monitoring_settings();
}
inline void TestSettings::unsafe_arena_set_allocated_monitoring_settings(
    ::kentik::synthetics::v202101beta1::TestMonitoringSettings* monitoring_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(monitoring_settings_);
  }
  monitoring_settings_ = monitoring_settings;
  if (monitoring_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.monitoring_settings)
}
inline ::kentik::synthetics::v202101beta1::TestMonitoringSettings* TestSettings::release_monitoring_settings() {
  auto temp = unsafe_arena_release_monitoring_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TestMonitoringSettings* TestSettings::unsafe_arena_release_monitoring_settings() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.monitoring_settings)
  
  ::kentik::synthetics::v202101beta1::TestMonitoringSettings* temp = monitoring_settings_;
  monitoring_settings_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TestMonitoringSettings* TestSettings::_internal_mutable_monitoring_settings() {
  
  if (monitoring_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestMonitoringSettings>(GetArena());
    monitoring_settings_ = p;
  }
  return monitoring_settings_;
}
inline ::kentik::synthetics::v202101beta1::TestMonitoringSettings* TestSettings::mutable_monitoring_settings() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.monitoring_settings)
  return _internal_mutable_monitoring_settings();
}
inline void TestSettings::set_allocated_monitoring_settings(::kentik::synthetics::v202101beta1::TestMonitoringSettings* monitoring_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete monitoring_settings_;
  }
  if (monitoring_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(monitoring_settings);
    if (message_arena != submessage_arena) {
      monitoring_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, monitoring_settings, submessage_arena);
    }
    
  } else {
    
  }
  monitoring_settings_ = monitoring_settings;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.monitoring_settings)
}

// .kentik.synthetics.v202101beta1.TestPingSettings ping = 28[json_name = "ping"];
inline bool TestSettings::_internal_has_ping() const {
  return this != internal_default_instance() && ping_ != nullptr;
}
inline bool TestSettings::has_ping() const {
  return _internal_has_ping();
}
inline void TestSettings::clear_ping() {
  if (GetArena() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::TestPingSettings& TestSettings::_internal_ping() const {
  const ::kentik::synthetics::v202101beta1::TestPingSettings* p = ping_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::TestPingSettings*>(
      &::kentik::synthetics::v202101beta1::_TestPingSettings_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::TestPingSettings& TestSettings::ping() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.ping)
  return _internal_ping();
}
inline void TestSettings::unsafe_arena_set_allocated_ping(
    ::kentik::synthetics::v202101beta1::TestPingSettings* ping) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_);
  }
  ping_ = ping;
  if (ping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.ping)
}
inline ::kentik::synthetics::v202101beta1::TestPingSettings* TestSettings::release_ping() {
  auto temp = unsafe_arena_release_ping();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TestPingSettings* TestSettings::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.ping)
  
  ::kentik::synthetics::v202101beta1::TestPingSettings* temp = ping_;
  ping_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TestPingSettings* TestSettings::_internal_mutable_ping() {
  
  if (ping_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestPingSettings>(GetArena());
    ping_ = p;
  }
  return ping_;
}
inline ::kentik::synthetics::v202101beta1::TestPingSettings* TestSettings::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.ping)
  return _internal_mutable_ping();
}
inline void TestSettings::set_allocated_ping(::kentik::synthetics::v202101beta1::TestPingSettings* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ping_;
  }
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    
  } else {
    
  }
  ping_ = ping;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.ping)
}

// .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29[json_name = "trace"];
inline bool TestSettings::_internal_has_trace() const {
  return this != internal_default_instance() && trace_ != nullptr;
}
inline bool TestSettings::has_trace() const {
  return _internal_has_trace();
}
inline void TestSettings::clear_trace() {
  if (GetArena() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::TestTraceSettings& TestSettings::_internal_trace() const {
  const ::kentik::synthetics::v202101beta1::TestTraceSettings* p = trace_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::TestTraceSettings*>(
      &::kentik::synthetics::v202101beta1::_TestTraceSettings_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::TestTraceSettings& TestSettings::trace() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.trace)
  return _internal_trace();
}
inline void TestSettings::unsafe_arena_set_allocated_trace(
    ::kentik::synthetics::v202101beta1::TestTraceSettings* trace) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_);
  }
  trace_ = trace;
  if (trace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.trace)
}
inline ::kentik::synthetics::v202101beta1::TestTraceSettings* TestSettings::release_trace() {
  auto temp = unsafe_arena_release_trace();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TestTraceSettings* TestSettings::unsafe_arena_release_trace() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.trace)
  
  ::kentik::synthetics::v202101beta1::TestTraceSettings* temp = trace_;
  trace_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TestTraceSettings* TestSettings::_internal_mutable_trace() {
  
  if (trace_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::TestTraceSettings>(GetArena());
    trace_ = p;
  }
  return trace_;
}
inline ::kentik::synthetics::v202101beta1::TestTraceSettings* TestSettings::mutable_trace() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.trace)
  return _internal_mutable_trace();
}
inline void TestSettings::set_allocated_trace(::kentik::synthetics::v202101beta1::TestTraceSettings* trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trace_;
  }
  if (trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trace);
    if (message_arena != submessage_arena) {
      trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace, submessage_arena);
    }
    
  } else {
    
  }
  trace_ = trace;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.trace)
}

// uint32 port = 23[json_name = "port"];
inline void TestSettings::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::port() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.port)
  return _internal_port();
}
inline void TestSettings::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void TestSettings::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.port)
}

// string protocol = 26[json_name = "protocol"];
inline void TestSettings::clear_protocol() {
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestSettings::protocol() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.protocol)
  return _internal_protocol();
}
inline void TestSettings::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.protocol)
}
inline std::string* TestSettings::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& TestSettings::_internal_protocol() const {
  return protocol_.Get();
}
inline void TestSettings::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestSettings::set_protocol(std::string&& value) {
  
  protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TestSettings.protocol)
}
inline void TestSettings::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestSettings.protocol)
}
inline void TestSettings::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestSettings.protocol)
}
inline std::string* TestSettings::_internal_mutable_protocol() {
  
  return protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestSettings::release_protocol() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestSettings::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.protocol)
}
inline std::string* TestSettings::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestSettings.protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestSettings::unsafe_arena_set_allocated_protocol(
    std::string* protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.protocol)
}

// .kentik.synthetics.v202101beta1.IPFamily family = 27[json_name = "family"];
inline void TestSettings::clear_family() {
  family_ = 0;
}
inline ::kentik::synthetics::v202101beta1::IPFamily TestSettings::_internal_family() const {
  return static_cast< ::kentik::synthetics::v202101beta1::IPFamily >(family_);
}
inline ::kentik::synthetics::v202101beta1::IPFamily TestSettings::family() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.family)
  return _internal_family();
}
inline void TestSettings::_internal_set_family(::kentik::synthetics::v202101beta1::IPFamily value) {
  
  family_ = value;
}
inline void TestSettings::set_family(::kentik::synthetics::v202101beta1::IPFamily value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.family)
}

// repeated string servers = 30[json_name = "servers"];
inline int TestSettings::_internal_servers_size() const {
  return servers_.size();
}
inline int TestSettings::servers_size() const {
  return _internal_servers_size();
}
inline void TestSettings::clear_servers() {
  servers_.Clear();
}
inline std::string* TestSettings::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.TestSettings.servers)
  return _internal_add_servers();
}
inline const std::string& TestSettings::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const std::string& TestSettings::servers(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.servers)
  return _internal_servers(index);
}
inline std::string* TestSettings::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.servers)
  return servers_.Mutable(index);
}
inline void TestSettings::set_servers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.servers)
  servers_.Mutable(index)->assign(value);
}
inline void TestSettings::set_servers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
inline void TestSettings::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestSettings.servers)
}
inline void TestSettings::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestSettings.servers)
}
inline std::string* TestSettings::_internal_add_servers() {
  return servers_.Add();
}
inline void TestSettings::add_servers(const std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestSettings.servers)
}
inline void TestSettings::add_servers(std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestSettings.servers)
}
inline void TestSettings::add_servers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.TestSettings.servers)
}
inline void TestSettings::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.TestSettings.servers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestSettings::servers() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TestSettings.servers)
  return servers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestSettings::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TestSettings.servers)
  return &servers_;
}

// bool use_local_ip = 31[json_name = "useLocalIp"];
inline void TestSettings::clear_use_local_ip() {
  use_local_ip_ = false;
}
inline bool TestSettings::_internal_use_local_ip() const {
  return use_local_ip_;
}
inline bool TestSettings::use_local_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.use_local_ip)
  return _internal_use_local_ip();
}
inline void TestSettings::_internal_set_use_local_ip(bool value) {
  
  use_local_ip_ = value;
}
inline void TestSettings::set_use_local_ip(bool value) {
  _internal_set_use_local_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.use_local_ip)
}

// bool reciprocal = 32[json_name = "reciprocal"];
inline void TestSettings::clear_reciprocal() {
  reciprocal_ = false;
}
inline bool TestSettings::_internal_reciprocal() const {
  return reciprocal_;
}
inline bool TestSettings::reciprocal() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.reciprocal)
  return _internal_reciprocal();
}
inline void TestSettings::_internal_set_reciprocal(bool value) {
  
  reciprocal_ = value;
}
inline void TestSettings::set_reciprocal(bool value) {
  _internal_set_reciprocal(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.reciprocal)
}

// uint32 rollup_level = 33[json_name = "rollupLevel"];
inline void TestSettings::clear_rollup_level() {
  rollup_level_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::_internal_rollup_level() const {
  return rollup_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::rollup_level() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.rollup_level)
  return _internal_rollup_level();
}
inline void TestSettings::_internal_set_rollup_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rollup_level_ = value;
}
inline void TestSettings::set_rollup_level(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rollup_level(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestSettings.rollup_level)
}

// .kentik.synthetics.v202101beta1.HTTPConfig http = 34[json_name = "http"];
inline bool TestSettings::_internal_has_http() const {
  return this != internal_default_instance() && http_ != nullptr;
}
inline bool TestSettings::has_http() const {
  return _internal_has_http();
}
inline void TestSettings::clear_http() {
  if (GetArena() == nullptr && http_ != nullptr) {
    delete http_;
  }
  http_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::HTTPConfig& TestSettings::_internal_http() const {
  const ::kentik::synthetics::v202101beta1::HTTPConfig* p = http_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::HTTPConfig*>(
      &::kentik::synthetics::v202101beta1::_HTTPConfig_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::HTTPConfig& TestSettings::http() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestSettings.http)
  return _internal_http();
}
inline void TestSettings::unsafe_arena_set_allocated_http(
    ::kentik::synthetics::v202101beta1::HTTPConfig* http) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(http_);
  }
  http_ = http;
  if (http) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestSettings.http)
}
inline ::kentik::synthetics::v202101beta1::HTTPConfig* TestSettings::release_http() {
  auto temp = unsafe_arena_release_http();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::HTTPConfig* TestSettings::unsafe_arena_release_http() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestSettings.http)
  
  ::kentik::synthetics::v202101beta1::HTTPConfig* temp = http_;
  http_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::HTTPConfig* TestSettings::_internal_mutable_http() {
  
  if (http_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::HTTPConfig>(GetArena());
    http_ = p;
  }
  return http_;
}
inline ::kentik::synthetics::v202101beta1::HTTPConfig* TestSettings::mutable_http() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestSettings.http)
  return _internal_mutable_http();
}
inline void TestSettings::set_allocated_http(::kentik::synthetics::v202101beta1::HTTPConfig* http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete http_;
  }
  if (http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(http);
    if (message_arena != submessage_arena) {
      http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http, submessage_arena);
    }
    
  } else {
    
  }
  http_ = http;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.http)
}

inline bool TestSettings::has_definition() const {
  return definition_case() != DEFINITION_NOT_SET;
}
inline void TestSettings::clear_has_definition() {
  _oneof_case_[0] = DEFINITION_NOT_SET;
}
inline TestSettings::DefinitionCase TestSettings::definition_case() const {
  return TestSettings::DefinitionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestTraceSettings

// float period = 1[json_name = "period"];
inline void TestTraceSettings::clear_period() {
  period_ = 0;
}
inline float TestTraceSettings::_internal_period() const {
  return period_;
}
inline float TestTraceSettings::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestTraceSettings.period)
  return _internal_period();
}
inline void TestTraceSettings::_internal_set_period(float value) {
  
  period_ = value;
}
inline void TestTraceSettings::set_period(float value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestTraceSettings.period)
}

// float count = 2[json_name = "count"];
inline void TestTraceSettings::clear_count() {
  count_ = 0;
}
inline float TestTraceSettings::_internal_count() const {
  return count_;
}
inline float TestTraceSettings::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestTraceSettings.count)
  return _internal_count();
}
inline void TestTraceSettings::_internal_set_count(float value) {
  
  count_ = value;
}
inline void TestTraceSettings::set_count(float value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestTraceSettings.count)
}

// string protocol = 3[json_name = "protocol"];
inline void TestTraceSettings::clear_protocol() {
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestTraceSettings::protocol() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
  return _internal_protocol();
}
inline void TestTraceSettings::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
}
inline std::string* TestTraceSettings::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& TestTraceSettings::_internal_protocol() const {
  return protocol_.Get();
}
inline void TestTraceSettings::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestTraceSettings::set_protocol(std::string&& value) {
  
  protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
}
inline void TestTraceSettings::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
}
inline void TestTraceSettings::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
}
inline std::string* TestTraceSettings::_internal_mutable_protocol() {
  
  return protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestTraceSettings::release_protocol() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestTraceSettings::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
}
inline std::string* TestTraceSettings::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestTraceSettings::unsafe_arena_set_allocated_protocol(
    std::string* protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestTraceSettings.protocol)
}

// float port = 4[json_name = "port"];
inline void TestTraceSettings::clear_port() {
  port_ = 0;
}
inline float TestTraceSettings::_internal_port() const {
  return port_;
}
inline float TestTraceSettings::port() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestTraceSettings.port)
  return _internal_port();
}
inline void TestTraceSettings::_internal_set_port(float value) {
  
  port_ = value;
}
inline void TestTraceSettings::set_port(float value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestTraceSettings.port)
}

// float expiry = 5[json_name = "expiry"];
inline void TestTraceSettings::clear_expiry() {
  expiry_ = 0;
}
inline float TestTraceSettings::_internal_expiry() const {
  return expiry_;
}
inline float TestTraceSettings::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestTraceSettings.expiry)
  return _internal_expiry();
}
inline void TestTraceSettings::_internal_set_expiry(float value) {
  
  expiry_ = value;
}
inline void TestTraceSettings::set_expiry(float value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestTraceSettings.expiry)
}

// float limit = 6[json_name = "limit"];
inline void TestTraceSettings::clear_limit() {
  limit_ = 0;
}
inline float TestTraceSettings::_internal_limit() const {
  return limit_;
}
inline float TestTraceSettings::limit() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestTraceSettings.limit)
  return _internal_limit();
}
inline void TestTraceSettings::_internal_set_limit(float value) {
  
  limit_ = value;
}
inline void TestTraceSettings::set_limit(float value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestTraceSettings.limit)
}

// float delay = 7[json_name = "delay"];
inline void TestTraceSettings::clear_delay() {
  delay_ = 0;
}
inline float TestTraceSettings::_internal_delay() const {
  return delay_;
}
inline float TestTraceSettings::delay() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestTraceSettings.delay)
  return _internal_delay();
}
inline void TestTraceSettings::_internal_set_delay(float value) {
  
  delay_ = value;
}
inline void TestTraceSettings::set_delay(float value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestTraceSettings.delay)
}

// -------------------------------------------------------------------

// TestPingSettings

// float period = 1[json_name = "period"];
inline void TestPingSettings::clear_period() {
  period_ = 0;
}
inline float TestPingSettings::_internal_period() const {
  return period_;
}
inline float TestPingSettings::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestPingSettings.period)
  return _internal_period();
}
inline void TestPingSettings::_internal_set_period(float value) {
  
  period_ = value;
}
inline void TestPingSettings::set_period(float value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestPingSettings.period)
}

// float count = 2[json_name = "count"];
inline void TestPingSettings::clear_count() {
  count_ = 0;
}
inline float TestPingSettings::_internal_count() const {
  return count_;
}
inline float TestPingSettings::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestPingSettings.count)
  return _internal_count();
}
inline void TestPingSettings::_internal_set_count(float value) {
  
  count_ = value;
}
inline void TestPingSettings::set_count(float value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestPingSettings.count)
}

// float expiry = 3[json_name = "expiry"];
inline void TestPingSettings::clear_expiry() {
  expiry_ = 0;
}
inline float TestPingSettings::_internal_expiry() const {
  return expiry_;
}
inline float TestPingSettings::expiry() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestPingSettings.expiry)
  return _internal_expiry();
}
inline void TestPingSettings::_internal_set_expiry(float value) {
  
  expiry_ = value;
}
inline void TestPingSettings::set_expiry(float value) {
  _internal_set_expiry(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestPingSettings.expiry)
}

// float delay = 4[json_name = "delay"];
inline void TestPingSettings::clear_delay() {
  delay_ = 0;
}
inline float TestPingSettings::_internal_delay() const {
  return delay_;
}
inline float TestPingSettings::delay() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestPingSettings.delay)
  return _internal_delay();
}
inline void TestPingSettings::_internal_set_delay(float value) {
  
  delay_ = value;
}
inline void TestPingSettings::set_delay(float value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestPingSettings.delay)
}

// -------------------------------------------------------------------

// TestMonitoringSettings

// string activation_grace_period = 1[json_name = "activationGracePeriod"];
inline void TestMonitoringSettings::clear_activation_grace_period() {
  activation_grace_period_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestMonitoringSettings::activation_grace_period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
  return _internal_activation_grace_period();
}
inline void TestMonitoringSettings::set_activation_grace_period(const std::string& value) {
  _internal_set_activation_grace_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
}
inline std::string* TestMonitoringSettings::mutable_activation_grace_period() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
  return _internal_mutable_activation_grace_period();
}
inline const std::string& TestMonitoringSettings::_internal_activation_grace_period() const {
  return activation_grace_period_.Get();
}
inline void TestMonitoringSettings::_internal_set_activation_grace_period(const std::string& value) {
  
  activation_grace_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestMonitoringSettings::set_activation_grace_period(std::string&& value) {
  
  activation_grace_period_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
}
inline void TestMonitoringSettings::set_activation_grace_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  activation_grace_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
}
inline void TestMonitoringSettings::set_activation_grace_period(const char* value,
    size_t size) {
  
  activation_grace_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
}
inline std::string* TestMonitoringSettings::_internal_mutable_activation_grace_period() {
  
  return activation_grace_period_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestMonitoringSettings::release_activation_grace_period() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
  return activation_grace_period_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestMonitoringSettings::set_allocated_activation_grace_period(std::string* activation_grace_period) {
  if (activation_grace_period != nullptr) {
    
  } else {
    
  }
  activation_grace_period_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation_grace_period,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
}
inline std::string* TestMonitoringSettings::unsafe_arena_release_activation_grace_period() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return activation_grace_period_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestMonitoringSettings::unsafe_arena_set_allocated_activation_grace_period(
    std::string* activation_grace_period) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (activation_grace_period != nullptr) {
    
  } else {
    
  }
  activation_grace_period_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      activation_grace_period, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period)
}

// string activation_time_unit = 2[json_name = "activationTimeUnit"];
inline void TestMonitoringSettings::clear_activation_time_unit() {
  activation_time_unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestMonitoringSettings::activation_time_unit() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
  return _internal_activation_time_unit();
}
inline void TestMonitoringSettings::set_activation_time_unit(const std::string& value) {
  _internal_set_activation_time_unit(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
}
inline std::string* TestMonitoringSettings::mutable_activation_time_unit() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
  return _internal_mutable_activation_time_unit();
}
inline const std::string& TestMonitoringSettings::_internal_activation_time_unit() const {
  return activation_time_unit_.Get();
}
inline void TestMonitoringSettings::_internal_set_activation_time_unit(const std::string& value) {
  
  activation_time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestMonitoringSettings::set_activation_time_unit(std::string&& value) {
  
  activation_time_unit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
}
inline void TestMonitoringSettings::set_activation_time_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  activation_time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
}
inline void TestMonitoringSettings::set_activation_time_unit(const char* value,
    size_t size) {
  
  activation_time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
}
inline std::string* TestMonitoringSettings::_internal_mutable_activation_time_unit() {
  
  return activation_time_unit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestMonitoringSettings::release_activation_time_unit() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
  return activation_time_unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestMonitoringSettings::set_allocated_activation_time_unit(std::string* activation_time_unit) {
  if (activation_time_unit != nullptr) {
    
  } else {
    
  }
  activation_time_unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation_time_unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
}
inline std::string* TestMonitoringSettings::unsafe_arena_release_activation_time_unit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return activation_time_unit_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestMonitoringSettings::unsafe_arena_set_allocated_activation_time_unit(
    std::string* activation_time_unit) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (activation_time_unit != nullptr) {
    
  } else {
    
  }
  activation_time_unit_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      activation_time_unit, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit)
}

// string activation_time_window = 3[json_name = "activationTimeWindow"];
inline void TestMonitoringSettings::clear_activation_time_window() {
  activation_time_window_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestMonitoringSettings::activation_time_window() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
  return _internal_activation_time_window();
}
inline void TestMonitoringSettings::set_activation_time_window(const std::string& value) {
  _internal_set_activation_time_window(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
}
inline std::string* TestMonitoringSettings::mutable_activation_time_window() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
  return _internal_mutable_activation_time_window();
}
inline const std::string& TestMonitoringSettings::_internal_activation_time_window() const {
  return activation_time_window_.Get();
}
inline void TestMonitoringSettings::_internal_set_activation_time_window(const std::string& value) {
  
  activation_time_window_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestMonitoringSettings::set_activation_time_window(std::string&& value) {
  
  activation_time_window_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
}
inline void TestMonitoringSettings::set_activation_time_window(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  activation_time_window_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
}
inline void TestMonitoringSettings::set_activation_time_window(const char* value,
    size_t size) {
  
  activation_time_window_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
}
inline std::string* TestMonitoringSettings::_internal_mutable_activation_time_window() {
  
  return activation_time_window_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestMonitoringSettings::release_activation_time_window() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
  return activation_time_window_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestMonitoringSettings::set_allocated_activation_time_window(std::string* activation_time_window) {
  if (activation_time_window != nullptr) {
    
  } else {
    
  }
  activation_time_window_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation_time_window,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
}
inline std::string* TestMonitoringSettings::unsafe_arena_release_activation_time_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return activation_time_window_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestMonitoringSettings::unsafe_arena_set_allocated_activation_time_window(
    std::string* activation_time_window) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (activation_time_window != nullptr) {
    
  } else {
    
  }
  activation_time_window_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      activation_time_window, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window)
}

// string activation_times = 4[json_name = "activationTimes"];
inline void TestMonitoringSettings::clear_activation_times() {
  activation_times_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestMonitoringSettings::activation_times() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
  return _internal_activation_times();
}
inline void TestMonitoringSettings::set_activation_times(const std::string& value) {
  _internal_set_activation_times(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
}
inline std::string* TestMonitoringSettings::mutable_activation_times() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
  return _internal_mutable_activation_times();
}
inline const std::string& TestMonitoringSettings::_internal_activation_times() const {
  return activation_times_.Get();
}
inline void TestMonitoringSettings::_internal_set_activation_times(const std::string& value) {
  
  activation_times_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestMonitoringSettings::set_activation_times(std::string&& value) {
  
  activation_times_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
}
inline void TestMonitoringSettings::set_activation_times(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  activation_times_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
}
inline void TestMonitoringSettings::set_activation_times(const char* value,
    size_t size) {
  
  activation_times_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
}
inline std::string* TestMonitoringSettings::_internal_mutable_activation_times() {
  
  return activation_times_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestMonitoringSettings::release_activation_times() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
  return activation_times_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestMonitoringSettings::set_allocated_activation_times(std::string* activation_times) {
  if (activation_times != nullptr) {
    
  } else {
    
  }
  activation_times_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activation_times,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
}
inline std::string* TestMonitoringSettings::unsafe_arena_release_activation_times() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return activation_times_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestMonitoringSettings::unsafe_arena_set_allocated_activation_times(
    std::string* activation_times) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (activation_times != nullptr) {
    
  } else {
    
  }
  activation_times_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      activation_times, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times)
}

// repeated string notification_channels = 5[json_name = "notificationChannels"];
inline int TestMonitoringSettings::_internal_notification_channels_size() const {
  return notification_channels_.size();
}
inline int TestMonitoringSettings::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void TestMonitoringSettings::clear_notification_channels() {
  notification_channels_.Clear();
}
inline std::string* TestMonitoringSettings::add_notification_channels() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
  return _internal_add_notification_channels();
}
inline const std::string& TestMonitoringSettings::_internal_notification_channels(int index) const {
  return notification_channels_.Get(index);
}
inline const std::string& TestMonitoringSettings::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
  return _internal_notification_channels(index);
}
inline std::string* TestMonitoringSettings::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
  return notification_channels_.Mutable(index);
}
inline void TestMonitoringSettings::set_notification_channels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
  notification_channels_.Mutable(index)->assign(value);
}
inline void TestMonitoringSettings::set_notification_channels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
  notification_channels_.Mutable(index)->assign(std::move(value));
}
inline void TestMonitoringSettings::set_notification_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
}
inline void TestMonitoringSettings::set_notification_channels(int index, const char* value, size_t size) {
  notification_channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
}
inline std::string* TestMonitoringSettings::_internal_add_notification_channels() {
  return notification_channels_.Add();
}
inline void TestMonitoringSettings::add_notification_channels(const std::string& value) {
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
}
inline void TestMonitoringSettings::add_notification_channels(std::string&& value) {
  notification_channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
}
inline void TestMonitoringSettings::add_notification_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
}
inline void TestMonitoringSettings::add_notification_channels(const char* value, size_t size) {
  notification_channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestMonitoringSettings::notification_channels() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
  return notification_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestMonitoringSettings::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels)
  return &notification_channels_;
}

// -------------------------------------------------------------------

// HealthSettings

// float latency_critical = 1[json_name = "latencyCritical"];
inline void HealthSettings::clear_latency_critical() {
  latency_critical_ = 0;
}
inline float HealthSettings::_internal_latency_critical() const {
  return latency_critical_;
}
inline float HealthSettings::latency_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.latency_critical)
  return _internal_latency_critical();
}
inline void HealthSettings::_internal_set_latency_critical(float value) {
  
  latency_critical_ = value;
}
inline void HealthSettings::set_latency_critical(float value) {
  _internal_set_latency_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.latency_critical)
}

// float latency_warning = 2[json_name = "latencyWarning"];
inline void HealthSettings::clear_latency_warning() {
  latency_warning_ = 0;
}
inline float HealthSettings::_internal_latency_warning() const {
  return latency_warning_;
}
inline float HealthSettings::latency_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.latency_warning)
  return _internal_latency_warning();
}
inline void HealthSettings::_internal_set_latency_warning(float value) {
  
  latency_warning_ = value;
}
inline void HealthSettings::set_latency_warning(float value) {
  _internal_set_latency_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.latency_warning)
}

// float packet_loss_critical = 3[json_name = "packetLossCritical"];
inline void HealthSettings::clear_packet_loss_critical() {
  packet_loss_critical_ = 0;
}
inline float HealthSettings::_internal_packet_loss_critical() const {
  return packet_loss_critical_;
}
inline float HealthSettings::packet_loss_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.packet_loss_critical)
  return _internal_packet_loss_critical();
}
inline void HealthSettings::_internal_set_packet_loss_critical(float value) {
  
  packet_loss_critical_ = value;
}
inline void HealthSettings::set_packet_loss_critical(float value) {
  _internal_set_packet_loss_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.packet_loss_critical)
}

// float packet_loss_warning = 4[json_name = "packetLossWarning"];
inline void HealthSettings::clear_packet_loss_warning() {
  packet_loss_warning_ = 0;
}
inline float HealthSettings::_internal_packet_loss_warning() const {
  return packet_loss_warning_;
}
inline float HealthSettings::packet_loss_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.packet_loss_warning)
  return _internal_packet_loss_warning();
}
inline void HealthSettings::_internal_set_packet_loss_warning(float value) {
  
  packet_loss_warning_ = value;
}
inline void HealthSettings::set_packet_loss_warning(float value) {
  _internal_set_packet_loss_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.packet_loss_warning)
}

// float jitter_critical = 5[json_name = "jitterCritical"];
inline void HealthSettings::clear_jitter_critical() {
  jitter_critical_ = 0;
}
inline float HealthSettings::_internal_jitter_critical() const {
  return jitter_critical_;
}
inline float HealthSettings::jitter_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.jitter_critical)
  return _internal_jitter_critical();
}
inline void HealthSettings::_internal_set_jitter_critical(float value) {
  
  jitter_critical_ = value;
}
inline void HealthSettings::set_jitter_critical(float value) {
  _internal_set_jitter_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.jitter_critical)
}

// float jitter_warning = 6[json_name = "jitterWarning"];
inline void HealthSettings::clear_jitter_warning() {
  jitter_warning_ = 0;
}
inline float HealthSettings::_internal_jitter_warning() const {
  return jitter_warning_;
}
inline float HealthSettings::jitter_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.jitter_warning)
  return _internal_jitter_warning();
}
inline void HealthSettings::_internal_set_jitter_warning(float value) {
  
  jitter_warning_ = value;
}
inline void HealthSettings::set_jitter_warning(float value) {
  _internal_set_jitter_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.jitter_warning)
}

// float http_latency_critical = 7[json_name = "httpLatencyCritical"];
inline void HealthSettings::clear_http_latency_critical() {
  http_latency_critical_ = 0;
}
inline float HealthSettings::_internal_http_latency_critical() const {
  return http_latency_critical_;
}
inline float HealthSettings::http_latency_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.http_latency_critical)
  return _internal_http_latency_critical();
}
inline void HealthSettings::_internal_set_http_latency_critical(float value) {
  
  http_latency_critical_ = value;
}
inline void HealthSettings::set_http_latency_critical(float value) {
  _internal_set_http_latency_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.http_latency_critical)
}

// float http_latency_warning = 8[json_name = "httpLatencyWarning"];
inline void HealthSettings::clear_http_latency_warning() {
  http_latency_warning_ = 0;
}
inline float HealthSettings::_internal_http_latency_warning() const {
  return http_latency_warning_;
}
inline float HealthSettings::http_latency_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.http_latency_warning)
  return _internal_http_latency_warning();
}
inline void HealthSettings::_internal_set_http_latency_warning(float value) {
  
  http_latency_warning_ = value;
}
inline void HealthSettings::set_http_latency_warning(float value) {
  _internal_set_http_latency_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.http_latency_warning)
}

// repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes"];
inline int HealthSettings::_internal_http_valid_codes_size() const {
  return http_valid_codes_.size();
}
inline int HealthSettings::http_valid_codes_size() const {
  return _internal_http_valid_codes_size();
}
inline void HealthSettings::clear_http_valid_codes() {
  http_valid_codes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::_internal_http_valid_codes(int index) const {
  return http_valid_codes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::http_valid_codes(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.http_valid_codes)
  return _internal_http_valid_codes(index);
}
inline void HealthSettings::set_http_valid_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  http_valid_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.http_valid_codes)
}
inline void HealthSettings::_internal_add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  http_valid_codes_.Add(value);
}
inline void HealthSettings::add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_http_valid_codes(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.HealthSettings.http_valid_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HealthSettings::_internal_http_valid_codes() const {
  return http_valid_codes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HealthSettings::http_valid_codes() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.HealthSettings.http_valid_codes)
  return _internal_http_valid_codes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HealthSettings::_internal_mutable_http_valid_codes() {
  return &http_valid_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HealthSettings::mutable_http_valid_codes() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.HealthSettings.http_valid_codes)
  return _internal_mutable_http_valid_codes();
}

// repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes"];
inline int HealthSettings::_internal_dns_valid_codes_size() const {
  return dns_valid_codes_.size();
}
inline int HealthSettings::dns_valid_codes_size() const {
  return _internal_dns_valid_codes_size();
}
inline void HealthSettings::clear_dns_valid_codes() {
  dns_valid_codes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::_internal_dns_valid_codes(int index) const {
  return dns_valid_codes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::dns_valid_codes(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.dns_valid_codes)
  return _internal_dns_valid_codes(index);
}
inline void HealthSettings::set_dns_valid_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dns_valid_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.dns_valid_codes)
}
inline void HealthSettings::_internal_add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dns_valid_codes_.Add(value);
}
inline void HealthSettings::add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dns_valid_codes(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.HealthSettings.dns_valid_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HealthSettings::_internal_dns_valid_codes() const {
  return dns_valid_codes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HealthSettings::dns_valid_codes() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.HealthSettings.dns_valid_codes)
  return _internal_dns_valid_codes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HealthSettings::_internal_mutable_dns_valid_codes() {
  return &dns_valid_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HealthSettings::mutable_dns_valid_codes() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.HealthSettings.dns_valid_codes)
  return _internal_mutable_dns_valid_codes();
}

// float latency_critical_stddev = 11[json_name = "latencyCriticalStddev"];
inline void HealthSettings::clear_latency_critical_stddev() {
  latency_critical_stddev_ = 0;
}
inline float HealthSettings::_internal_latency_critical_stddev() const {
  return latency_critical_stddev_;
}
inline float HealthSettings::latency_critical_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.latency_critical_stddev)
  return _internal_latency_critical_stddev();
}
inline void HealthSettings::_internal_set_latency_critical_stddev(float value) {
  
  latency_critical_stddev_ = value;
}
inline void HealthSettings::set_latency_critical_stddev(float value) {
  _internal_set_latency_critical_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.latency_critical_stddev)
}

// float latency_warning_stddev = 12[json_name = "latencyWarningStddev"];
inline void HealthSettings::clear_latency_warning_stddev() {
  latency_warning_stddev_ = 0;
}
inline float HealthSettings::_internal_latency_warning_stddev() const {
  return latency_warning_stddev_;
}
inline float HealthSettings::latency_warning_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.latency_warning_stddev)
  return _internal_latency_warning_stddev();
}
inline void HealthSettings::_internal_set_latency_warning_stddev(float value) {
  
  latency_warning_stddev_ = value;
}
inline void HealthSettings::set_latency_warning_stddev(float value) {
  _internal_set_latency_warning_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.latency_warning_stddev)
}

// float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev"];
inline void HealthSettings::clear_jitter_critical_stddev() {
  jitter_critical_stddev_ = 0;
}
inline float HealthSettings::_internal_jitter_critical_stddev() const {
  return jitter_critical_stddev_;
}
inline float HealthSettings::jitter_critical_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.jitter_critical_stddev)
  return _internal_jitter_critical_stddev();
}
inline void HealthSettings::_internal_set_jitter_critical_stddev(float value) {
  
  jitter_critical_stddev_ = value;
}
inline void HealthSettings::set_jitter_critical_stddev(float value) {
  _internal_set_jitter_critical_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.jitter_critical_stddev)
}

// float jitter_warning_stddev = 14[json_name = "jitterWarningStddev"];
inline void HealthSettings::clear_jitter_warning_stddev() {
  jitter_warning_stddev_ = 0;
}
inline float HealthSettings::_internal_jitter_warning_stddev() const {
  return jitter_warning_stddev_;
}
inline float HealthSettings::jitter_warning_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.jitter_warning_stddev)
  return _internal_jitter_warning_stddev();
}
inline void HealthSettings::_internal_set_jitter_warning_stddev(float value) {
  
  jitter_warning_stddev_ = value;
}
inline void HealthSettings::set_jitter_warning_stddev(float value) {
  _internal_set_jitter_warning_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.jitter_warning_stddev)
}

// float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev"];
inline void HealthSettings::clear_http_latency_critical_stddev() {
  http_latency_critical_stddev_ = 0;
}
inline float HealthSettings::_internal_http_latency_critical_stddev() const {
  return http_latency_critical_stddev_;
}
inline float HealthSettings::http_latency_critical_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.http_latency_critical_stddev)
  return _internal_http_latency_critical_stddev();
}
inline void HealthSettings::_internal_set_http_latency_critical_stddev(float value) {
  
  http_latency_critical_stddev_ = value;
}
inline void HealthSettings::set_http_latency_critical_stddev(float value) {
  _internal_set_http_latency_critical_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.http_latency_critical_stddev)
}

// float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev"];
inline void HealthSettings::clear_http_latency_warning_stddev() {
  http_latency_warning_stddev_ = 0;
}
inline float HealthSettings::_internal_http_latency_warning_stddev() const {
  return http_latency_warning_stddev_;
}
inline float HealthSettings::http_latency_warning_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HealthSettings.http_latency_warning_stddev)
  return _internal_http_latency_warning_stddev();
}
inline void HealthSettings::_internal_set_http_latency_warning_stddev(float value) {
  
  http_latency_warning_stddev_ = value;
}
inline void HealthSettings::set_http_latency_warning_stddev(float value) {
  _internal_set_http_latency_warning_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HealthSettings.http_latency_warning_stddev)
}

// -------------------------------------------------------------------

// HostnameTest

// string target = 1[json_name = "target"];
inline void HostnameTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostnameTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.HostnameTest.target)
  return _internal_target();
}
inline void HostnameTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.HostnameTest.target)
}
inline std::string* HostnameTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.HostnameTest.target)
  return _internal_mutable_target();
}
inline const std::string& HostnameTest::_internal_target() const {
  return target_.Get();
}
inline void HostnameTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostnameTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.HostnameTest.target)
}
inline void HostnameTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.HostnameTest.target)
}
inline void HostnameTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.HostnameTest.target)
}
inline std::string* HostnameTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostnameTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.HostnameTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostnameTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.HostnameTest.target)
}
inline std::string* HostnameTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.HostnameTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostnameTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.HostnameTest.target)
}

// -------------------------------------------------------------------

// IpTest

// repeated string targets = 1[json_name = "targets"];
inline int IpTest::_internal_targets_size() const {
  return targets_.size();
}
inline int IpTest::targets_size() const {
  return _internal_targets_size();
}
inline void IpTest::clear_targets() {
  targets_.Clear();
}
inline std::string* IpTest::add_targets() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.IpTest.targets)
  return _internal_add_targets();
}
inline const std::string& IpTest::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const std::string& IpTest::targets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IpTest.targets)
  return _internal_targets(index);
}
inline std::string* IpTest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IpTest.targets)
  return targets_.Mutable(index);
}
inline void IpTest::set_targets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.IpTest.targets)
  targets_.Mutable(index)->assign(value);
}
inline void IpTest::set_targets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.IpTest.targets)
  targets_.Mutable(index)->assign(std::move(value));
}
inline void IpTest::set_targets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.IpTest.targets)
}
inline void IpTest::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.IpTest.targets)
}
inline std::string* IpTest::_internal_add_targets() {
  return targets_.Add();
}
inline void IpTest::add_targets(const std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.IpTest.targets)
}
inline void IpTest::add_targets(std::string&& value) {
  targets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.IpTest.targets)
}
inline void IpTest::add_targets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.IpTest.targets)
}
inline void IpTest::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.IpTest.targets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IpTest::targets() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.IpTest.targets)
  return targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IpTest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.IpTest.targets)
  return &targets_;
}

// -------------------------------------------------------------------

// AgentTest

// string target = 1[json_name = "target"];
inline void AgentTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AgentTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.AgentTest.target)
  return _internal_target();
}
inline void AgentTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.AgentTest.target)
}
inline std::string* AgentTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.AgentTest.target)
  return _internal_mutable_target();
}
inline const std::string& AgentTest::_internal_target() const {
  return target_.Get();
}
inline void AgentTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.AgentTest.target)
}
inline void AgentTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.AgentTest.target)
}
inline void AgentTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.AgentTest.target)
}
inline std::string* AgentTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.AgentTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.AgentTest.target)
}
inline std::string* AgentTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.AgentTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AgentTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.AgentTest.target)
}

// -------------------------------------------------------------------

// FlowTest

// string target = 1[json_name = "target"];
inline void FlowTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.FlowTest.target)
  return _internal_target();
}
inline void FlowTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.FlowTest.target)
}
inline std::string* FlowTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.FlowTest.target)
  return _internal_mutable_target();
}
inline const std::string& FlowTest::_internal_target() const {
  return target_.Get();
}
inline void FlowTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.FlowTest.target)
}
inline void FlowTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.FlowTest.target)
}
inline void FlowTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.FlowTest.target)
}
inline std::string* FlowTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.FlowTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.FlowTest.target)
}
inline std::string* FlowTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.FlowTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlowTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.FlowTest.target)
}

// uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis"];
inline void FlowTest::clear_target_refresh_interval_millis() {
  target_refresh_interval_millis_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::_internal_target_refresh_interval_millis() const {
  return target_refresh_interval_millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::target_refresh_interval_millis() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.FlowTest.target_refresh_interval_millis)
  return _internal_target_refresh_interval_millis();
}
inline void FlowTest::_internal_set_target_refresh_interval_millis(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_refresh_interval_millis_ = value;
}
inline void FlowTest::set_target_refresh_interval_millis(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_refresh_interval_millis(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.FlowTest.target_refresh_interval_millis)
}

// uint32 max_tasks = 3[json_name = "maxTasks"];
inline void FlowTest::clear_max_tasks() {
  max_tasks_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::_internal_max_tasks() const {
  return max_tasks_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::max_tasks() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.FlowTest.max_tasks)
  return _internal_max_tasks();
}
inline void FlowTest::_internal_set_max_tasks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_tasks_ = value;
}
inline void FlowTest::set_max_tasks(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_tasks(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.FlowTest.max_tasks)
}

// string type = 4[json_name = "type"];
inline void FlowTest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowTest::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.FlowTest.type)
  return _internal_type();
}
inline void FlowTest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.FlowTest.type)
}
inline std::string* FlowTest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.FlowTest.type)
  return _internal_mutable_type();
}
inline const std::string& FlowTest::_internal_type() const {
  return type_.Get();
}
inline void FlowTest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowTest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.FlowTest.type)
}
inline void FlowTest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.FlowTest.type)
}
inline void FlowTest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.FlowTest.type)
}
inline std::string* FlowTest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowTest::release_type() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.FlowTest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowTest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.FlowTest.type)
}
inline std::string* FlowTest::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.FlowTest.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlowTest::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.FlowTest.type)
}

// string inet_direction = 5[json_name = "inetDirection"];
inline void FlowTest::clear_inet_direction() {
  inet_direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowTest::inet_direction() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
  return _internal_inet_direction();
}
inline void FlowTest::set_inet_direction(const std::string& value) {
  _internal_set_inet_direction(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
}
inline std::string* FlowTest::mutable_inet_direction() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
  return _internal_mutable_inet_direction();
}
inline const std::string& FlowTest::_internal_inet_direction() const {
  return inet_direction_.Get();
}
inline void FlowTest::_internal_set_inet_direction(const std::string& value) {
  
  inet_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowTest::set_inet_direction(std::string&& value) {
  
  inet_direction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
}
inline void FlowTest::set_inet_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inet_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
}
inline void FlowTest::set_inet_direction(const char* value,
    size_t size) {
  
  inet_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
}
inline std::string* FlowTest::_internal_mutable_inet_direction() {
  
  return inet_direction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowTest::release_inet_direction() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
  return inet_direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowTest::set_allocated_inet_direction(std::string* inet_direction) {
  if (inet_direction != nullptr) {
    
  } else {
    
  }
  inet_direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inet_direction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
}
inline std::string* FlowTest::unsafe_arena_release_inet_direction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return inet_direction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlowTest::unsafe_arena_set_allocated_inet_direction(
    std::string* inet_direction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inet_direction != nullptr) {
    
  } else {
    
  }
  inet_direction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inet_direction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.FlowTest.inet_direction)
}

// string direction = 6[json_name = "direction"];
inline void FlowTest::clear_direction() {
  direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowTest::direction() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.FlowTest.direction)
  return _internal_direction();
}
inline void FlowTest::set_direction(const std::string& value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.FlowTest.direction)
}
inline std::string* FlowTest::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.FlowTest.direction)
  return _internal_mutable_direction();
}
inline const std::string& FlowTest::_internal_direction() const {
  return direction_.Get();
}
inline void FlowTest::_internal_set_direction(const std::string& value) {
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowTest::set_direction(std::string&& value) {
  
  direction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.FlowTest.direction)
}
inline void FlowTest::set_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.FlowTest.direction)
}
inline void FlowTest::set_direction(const char* value,
    size_t size) {
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.FlowTest.direction)
}
inline std::string* FlowTest::_internal_mutable_direction() {
  
  return direction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowTest::release_direction() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.FlowTest.direction)
  return direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowTest::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.FlowTest.direction)
}
inline std::string* FlowTest::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.FlowTest.direction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return direction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlowTest::unsafe_arena_set_allocated_direction(
    std::string* direction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      direction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.FlowTest.direction)
}

// -------------------------------------------------------------------

// SiteTest

// string target = 1[json_name = "target"];
inline void SiteTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SiteTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.SiteTest.target)
  return _internal_target();
}
inline void SiteTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.SiteTest.target)
}
inline std::string* SiteTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.SiteTest.target)
  return _internal_mutable_target();
}
inline const std::string& SiteTest::_internal_target() const {
  return target_.Get();
}
inline void SiteTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SiteTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.SiteTest.target)
}
inline void SiteTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.SiteTest.target)
}
inline void SiteTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.SiteTest.target)
}
inline std::string* SiteTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SiteTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.SiteTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SiteTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.SiteTest.target)
}
inline std::string* SiteTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.SiteTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SiteTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.SiteTest.target)
}

// -------------------------------------------------------------------

// TagTest

// string target = 1[json_name = "target"];
inline void TagTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TagTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TagTest.target)
  return _internal_target();
}
inline void TagTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TagTest.target)
}
inline std::string* TagTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TagTest.target)
  return _internal_mutable_target();
}
inline const std::string& TagTest::_internal_target() const {
  return target_.Get();
}
inline void TagTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TagTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TagTest.target)
}
inline void TagTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TagTest.target)
}
inline void TagTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TagTest.target)
}
inline std::string* TagTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TagTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TagTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TagTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TagTest.target)
}
inline std::string* TagTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TagTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TagTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TagTest.target)
}

// -------------------------------------------------------------------

// DnsTest

// string target = 1[json_name = "target"];
inline void DnsTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DnsTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DnsTest.target)
  return _internal_target();
}
inline void DnsTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DnsTest.target)
}
inline std::string* DnsTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.DnsTest.target)
  return _internal_mutable_target();
}
inline const std::string& DnsTest::_internal_target() const {
  return target_.Get();
}
inline void DnsTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DnsTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.DnsTest.target)
}
inline void DnsTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.DnsTest.target)
}
inline void DnsTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.DnsTest.target)
}
inline std::string* DnsTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DnsTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.DnsTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DnsTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.DnsTest.target)
}
inline std::string* DnsTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.DnsTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DnsTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.DnsTest.target)
}

// .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
inline void DnsTest::clear_type() {
  type_ = 0;
}
inline ::kentik::synthetics::v202101beta1::DNSRecord DnsTest::_internal_type() const {
  return static_cast< ::kentik::synthetics::v202101beta1::DNSRecord >(type_);
}
inline ::kentik::synthetics::v202101beta1::DNSRecord DnsTest::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DnsTest.type)
  return _internal_type();
}
inline void DnsTest::_internal_set_type(::kentik::synthetics::v202101beta1::DNSRecord value) {
  
  type_ = value;
}
inline void DnsTest::set_type(::kentik::synthetics::v202101beta1::DNSRecord value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DnsTest.type)
}

// -------------------------------------------------------------------

// UrlTest

// string target = 1[json_name = "target"];
inline void UrlTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UrlTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.UrlTest.target)
  return _internal_target();
}
inline void UrlTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.UrlTest.target)
}
inline std::string* UrlTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.UrlTest.target)
  return _internal_mutable_target();
}
inline const std::string& UrlTest::_internal_target() const {
  return target_.Get();
}
inline void UrlTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UrlTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.UrlTest.target)
}
inline void UrlTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.UrlTest.target)
}
inline void UrlTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.UrlTest.target)
}
inline std::string* UrlTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UrlTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.UrlTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UrlTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.UrlTest.target)
}
inline std::string* UrlTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.UrlTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UrlTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.UrlTest.target)
}

// -------------------------------------------------------------------

// GridTest

// repeated string targets = 1[json_name = "targets"];
inline int GridTest::_internal_targets_size() const {
  return targets_.size();
}
inline int GridTest::targets_size() const {
  return _internal_targets_size();
}
inline void GridTest::clear_targets() {
  targets_.Clear();
}
inline std::string* GridTest::add_targets() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.GridTest.targets)
  return _internal_add_targets();
}
inline const std::string& GridTest::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const std::string& GridTest::targets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GridTest.targets)
  return _internal_targets(index);
}
inline std::string* GridTest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GridTest.targets)
  return targets_.Mutable(index);
}
inline void GridTest::set_targets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GridTest.targets)
  targets_.Mutable(index)->assign(value);
}
inline void GridTest::set_targets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GridTest.targets)
  targets_.Mutable(index)->assign(std::move(value));
}
inline void GridTest::set_targets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GridTest.targets)
}
inline void GridTest::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GridTest.targets)
}
inline std::string* GridTest::_internal_add_targets() {
  return targets_.Add();
}
inline void GridTest::add_targets(const std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GridTest.targets)
}
inline void GridTest::add_targets(std::string&& value) {
  targets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GridTest.targets)
}
inline void GridTest::add_targets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.GridTest.targets)
}
inline void GridTest::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.GridTest.targets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GridTest::targets() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.GridTest.targets)
  return targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GridTest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.GridTest.targets)
  return &targets_;
}

// -------------------------------------------------------------------

// DnsGridTest

// repeated string targets = 1[json_name = "targets"];
inline int DnsGridTest::_internal_targets_size() const {
  return targets_.size();
}
inline int DnsGridTest::targets_size() const {
  return _internal_targets_size();
}
inline void DnsGridTest::clear_targets() {
  targets_.Clear();
}
inline std::string* DnsGridTest::add_targets() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.DnsGridTest.targets)
  return _internal_add_targets();
}
inline const std::string& DnsGridTest::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const std::string& DnsGridTest::targets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DnsGridTest.targets)
  return _internal_targets(index);
}
inline std::string* DnsGridTest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.DnsGridTest.targets)
  return targets_.Mutable(index);
}
inline void DnsGridTest::set_targets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DnsGridTest.targets)
  targets_.Mutable(index)->assign(value);
}
inline void DnsGridTest::set_targets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DnsGridTest.targets)
  targets_.Mutable(index)->assign(std::move(value));
}
inline void DnsGridTest::set_targets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.DnsGridTest.targets)
}
inline void DnsGridTest::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.DnsGridTest.targets)
}
inline std::string* DnsGridTest::_internal_add_targets() {
  return targets_.Add();
}
inline void DnsGridTest::add_targets(const std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.DnsGridTest.targets)
}
inline void DnsGridTest::add_targets(std::string&& value) {
  targets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.DnsGridTest.targets)
}
inline void DnsGridTest::add_targets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.DnsGridTest.targets)
}
inline void DnsGridTest::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.DnsGridTest.targets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DnsGridTest::targets() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.DnsGridTest.targets)
  return targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DnsGridTest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.DnsGridTest.targets)
  return &targets_;
}

// .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
inline void DnsGridTest::clear_type() {
  type_ = 0;
}
inline ::kentik::synthetics::v202101beta1::DNSRecord DnsGridTest::_internal_type() const {
  return static_cast< ::kentik::synthetics::v202101beta1::DNSRecord >(type_);
}
inline ::kentik::synthetics::v202101beta1::DNSRecord DnsGridTest::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DnsGridTest.type)
  return _internal_type();
}
inline void DnsGridTest::_internal_set_type(::kentik::synthetics::v202101beta1::DNSRecord value) {
  
  type_ = value;
}
inline void DnsGridTest::set_type(::kentik::synthetics::v202101beta1::DNSRecord value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DnsGridTest.type)
}

// -------------------------------------------------------------------

// ApplicationMeshTest

// -------------------------------------------------------------------

// MeshResponse

// string id = 1[json_name = "id"];
inline void MeshResponse::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshResponse::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshResponse.id)
  return _internal_id();
}
inline void MeshResponse::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshResponse.id)
}
inline std::string* MeshResponse::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshResponse.id)
  return _internal_mutable_id();
}
inline const std::string& MeshResponse::_internal_id() const {
  return id_.Get();
}
inline void MeshResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshResponse::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshResponse.id)
}
inline void MeshResponse::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshResponse.id)
}
inline void MeshResponse::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshResponse.id)
}
inline std::string* MeshResponse::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshResponse::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.id)
}
inline std::string* MeshResponse::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshResponse.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshResponse::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.id)
}

// string name = 2[json_name = "name"];
inline void MeshResponse::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshResponse::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshResponse.name)
  return _internal_name();
}
inline void MeshResponse::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshResponse.name)
}
inline std::string* MeshResponse::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshResponse.name)
  return _internal_mutable_name();
}
inline const std::string& MeshResponse::_internal_name() const {
  return name_.Get();
}
inline void MeshResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshResponse::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshResponse.name)
}
inline void MeshResponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshResponse.name)
}
inline void MeshResponse::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshResponse.name)
}
inline std::string* MeshResponse::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshResponse::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.name)
}
inline std::string* MeshResponse::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshResponse.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshResponse::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.name)
}

// string local_ip = 3[json_name = "localIp"];
inline void MeshResponse::clear_local_ip() {
  local_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshResponse::local_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
  return _internal_local_ip();
}
inline void MeshResponse::set_local_ip(const std::string& value) {
  _internal_set_local_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
}
inline std::string* MeshResponse::mutable_local_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
  return _internal_mutable_local_ip();
}
inline const std::string& MeshResponse::_internal_local_ip() const {
  return local_ip_.Get();
}
inline void MeshResponse::_internal_set_local_ip(const std::string& value) {
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshResponse::set_local_ip(std::string&& value) {
  
  local_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
}
inline void MeshResponse::set_local_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
}
inline void MeshResponse::set_local_ip(const char* value,
    size_t size) {
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
}
inline std::string* MeshResponse::_internal_mutable_local_ip() {
  
  return local_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshResponse::release_local_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
  return local_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshResponse::set_allocated_local_ip(std::string* local_ip) {
  if (local_ip != nullptr) {
    
  } else {
    
  }
  local_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
}
inline std::string* MeshResponse::unsafe_arena_release_local_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return local_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshResponse::unsafe_arena_set_allocated_local_ip(
    std::string* local_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (local_ip != nullptr) {
    
  } else {
    
  }
  local_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      local_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.local_ip)
}

// string ip = 4[json_name = "ip"];
inline void MeshResponse::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshResponse::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshResponse.ip)
  return _internal_ip();
}
inline void MeshResponse::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshResponse.ip)
}
inline std::string* MeshResponse::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshResponse.ip)
  return _internal_mutable_ip();
}
inline const std::string& MeshResponse::_internal_ip() const {
  return ip_.Get();
}
inline void MeshResponse::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshResponse::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshResponse.ip)
}
inline void MeshResponse::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshResponse.ip)
}
inline void MeshResponse::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshResponse.ip)
}
inline std::string* MeshResponse::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshResponse::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshResponse.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshResponse::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.ip)
}
inline std::string* MeshResponse::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshResponse.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshResponse::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.ip)
}

// string alias = 5[json_name = "alias"];
inline void MeshResponse::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshResponse::alias() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshResponse.alias)
  return _internal_alias();
}
inline void MeshResponse::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshResponse.alias)
}
inline std::string* MeshResponse::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshResponse.alias)
  return _internal_mutable_alias();
}
inline const std::string& MeshResponse::_internal_alias() const {
  return alias_.Get();
}
inline void MeshResponse::_internal_set_alias(const std::string& value) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshResponse::set_alias(std::string&& value) {
  
  alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshResponse.alias)
}
inline void MeshResponse::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshResponse.alias)
}
inline void MeshResponse::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshResponse.alias)
}
inline std::string* MeshResponse::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshResponse::release_alias() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshResponse.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshResponse::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.alias)
}
inline std::string* MeshResponse::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshResponse.alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshResponse::unsafe_arena_set_allocated_alias(
    std::string* alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshResponse.alias)
}

// repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6[json_name = "columns"];
inline int MeshResponse::_internal_columns_size() const {
  return columns_.size();
}
inline int MeshResponse::columns_size() const {
  return _internal_columns_size();
}
inline void MeshResponse::clear_columns() {
  columns_.Clear();
}
inline ::kentik::synthetics::v202101beta1::MeshColumn* MeshResponse::mutable_columns(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshResponse.columns)
  return columns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshColumn >*
MeshResponse::mutable_columns() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.MeshResponse.columns)
  return &columns_;
}
inline const ::kentik::synthetics::v202101beta1::MeshColumn& MeshResponse::_internal_columns(int index) const {
  return columns_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::MeshColumn& MeshResponse::columns(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshResponse.columns)
  return _internal_columns(index);
}
inline ::kentik::synthetics::v202101beta1::MeshColumn* MeshResponse::_internal_add_columns() {
  return columns_.Add();
}
inline ::kentik::synthetics::v202101beta1::MeshColumn* MeshResponse::add_columns() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.MeshResponse.columns)
  return _internal_add_columns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshColumn >&
MeshResponse::columns() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.MeshResponse.columns)
  return columns_;
}

// -------------------------------------------------------------------

// MeshColumn

// string id = 1[json_name = "id"];
inline void MeshColumn::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshColumn::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshColumn.id)
  return _internal_id();
}
inline void MeshColumn::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshColumn.id)
}
inline std::string* MeshColumn::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshColumn.id)
  return _internal_mutable_id();
}
inline const std::string& MeshColumn::_internal_id() const {
  return id_.Get();
}
inline void MeshColumn::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshColumn::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshColumn.id)
}
inline void MeshColumn::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshColumn.id)
}
inline void MeshColumn::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshColumn.id)
}
inline std::string* MeshColumn::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshColumn::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshColumn.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshColumn::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.id)
}
inline std::string* MeshColumn::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshColumn.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshColumn::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.id)
}

// string name = 2[json_name = "name"];
inline void MeshColumn::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshColumn::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshColumn.name)
  return _internal_name();
}
inline void MeshColumn::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshColumn.name)
}
inline std::string* MeshColumn::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshColumn.name)
  return _internal_mutable_name();
}
inline const std::string& MeshColumn::_internal_name() const {
  return name_.Get();
}
inline void MeshColumn::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshColumn::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshColumn.name)
}
inline void MeshColumn::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshColumn.name)
}
inline void MeshColumn::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshColumn.name)
}
inline std::string* MeshColumn::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshColumn::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshColumn.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshColumn::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.name)
}
inline std::string* MeshColumn::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshColumn.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshColumn::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.name)
}

// string alias = 3[json_name = "alias"];
inline void MeshColumn::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshColumn::alias() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshColumn.alias)
  return _internal_alias();
}
inline void MeshColumn::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshColumn.alias)
}
inline std::string* MeshColumn::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshColumn.alias)
  return _internal_mutable_alias();
}
inline const std::string& MeshColumn::_internal_alias() const {
  return alias_.Get();
}
inline void MeshColumn::_internal_set_alias(const std::string& value) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshColumn::set_alias(std::string&& value) {
  
  alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshColumn.alias)
}
inline void MeshColumn::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshColumn.alias)
}
inline void MeshColumn::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshColumn.alias)
}
inline std::string* MeshColumn::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshColumn::release_alias() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshColumn.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshColumn::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.alias)
}
inline std::string* MeshColumn::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshColumn.alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshColumn::unsafe_arena_set_allocated_alias(
    std::string* alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.alias)
}

// string target = 4[json_name = "target"];
inline void MeshColumn::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshColumn::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshColumn.target)
  return _internal_target();
}
inline void MeshColumn::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshColumn.target)
}
inline std::string* MeshColumn::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshColumn.target)
  return _internal_mutable_target();
}
inline const std::string& MeshColumn::_internal_target() const {
  return target_.Get();
}
inline void MeshColumn::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshColumn::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshColumn.target)
}
inline void MeshColumn::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshColumn.target)
}
inline void MeshColumn::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshColumn.target)
}
inline std::string* MeshColumn::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshColumn::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshColumn.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshColumn::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.target)
}
inline std::string* MeshColumn::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshColumn.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshColumn::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.target)
}

// .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5[json_name = "metrics"];
inline bool MeshColumn::_internal_has_metrics() const {
  return this != internal_default_instance() && metrics_ != nullptr;
}
inline bool MeshColumn::has_metrics() const {
  return _internal_has_metrics();
}
inline void MeshColumn::clear_metrics() {
  if (GetArena() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::MeshMetrics& MeshColumn::_internal_metrics() const {
  const ::kentik::synthetics::v202101beta1::MeshMetrics* p = metrics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::MeshMetrics*>(
      &::kentik::synthetics::v202101beta1::_MeshMetrics_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::MeshMetrics& MeshColumn::metrics() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshColumn.metrics)
  return _internal_metrics();
}
inline void MeshColumn::unsafe_arena_set_allocated_metrics(
    ::kentik::synthetics::v202101beta1::MeshMetrics* metrics) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_);
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.metrics)
}
inline ::kentik::synthetics::v202101beta1::MeshMetrics* MeshColumn::release_metrics() {
  auto temp = unsafe_arena_release_metrics();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::MeshMetrics* MeshColumn::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshColumn.metrics)
  
  ::kentik::synthetics::v202101beta1::MeshMetrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::MeshMetrics* MeshColumn::_internal_mutable_metrics() {
  
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::MeshMetrics>(GetArena());
    metrics_ = p;
  }
  return metrics_;
}
inline ::kentik::synthetics::v202101beta1::MeshMetrics* MeshColumn::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshColumn.metrics)
  return _internal_mutable_metrics();
}
inline void MeshColumn::set_allocated_metrics(::kentik::synthetics::v202101beta1::MeshMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metrics);
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshColumn.metrics)
}

// repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6[json_name = "health"];
inline int MeshColumn::_internal_health_size() const {
  return health_.size();
}
inline int MeshColumn::health_size() const {
  return _internal_health_size();
}
inline void MeshColumn::clear_health() {
  health_.Clear();
}
inline ::kentik::synthetics::v202101beta1::MeshMetrics* MeshColumn::mutable_health(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshColumn.health)
  return health_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshMetrics >*
MeshColumn::mutable_health() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.MeshColumn.health)
  return &health_;
}
inline const ::kentik::synthetics::v202101beta1::MeshMetrics& MeshColumn::_internal_health(int index) const {
  return health_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::MeshMetrics& MeshColumn::health(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshColumn.health)
  return _internal_health(index);
}
inline ::kentik::synthetics::v202101beta1::MeshMetrics* MeshColumn::_internal_add_health() {
  return health_.Add();
}
inline ::kentik::synthetics::v202101beta1::MeshMetrics* MeshColumn::add_health() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.MeshColumn.health)
  return _internal_add_health();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::MeshMetrics >&
MeshColumn::health() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.MeshColumn.health)
  return health_;
}

// -------------------------------------------------------------------

// MeshMetric

// string name = 1[json_name = "name"];
inline void MeshMetric::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshMetric::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshMetric.name)
  return _internal_name();
}
inline void MeshMetric::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshMetric.name)
}
inline std::string* MeshMetric::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshMetric.name)
  return _internal_mutable_name();
}
inline const std::string& MeshMetric::_internal_name() const {
  return name_.Get();
}
inline void MeshMetric::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshMetric::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshMetric.name)
}
inline void MeshMetric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshMetric.name)
}
inline void MeshMetric::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshMetric.name)
}
inline std::string* MeshMetric::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshMetric::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshMetric.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshMetric::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshMetric.name)
}
inline std::string* MeshMetric::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshMetric.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshMetric::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshMetric.name)
}

// string health = 2[json_name = "health"];
inline void MeshMetric::clear_health() {
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MeshMetric::health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshMetric.health)
  return _internal_health();
}
inline void MeshMetric::set_health(const std::string& value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshMetric.health)
}
inline std::string* MeshMetric::mutable_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshMetric.health)
  return _internal_mutable_health();
}
inline const std::string& MeshMetric::_internal_health() const {
  return health_.Get();
}
inline void MeshMetric::_internal_set_health(const std::string& value) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MeshMetric::set_health(std::string&& value) {
  
  health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.MeshMetric.health)
}
inline void MeshMetric::set_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.MeshMetric.health)
}
inline void MeshMetric::set_health(const char* value,
    size_t size) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.MeshMetric.health)
}
inline std::string* MeshMetric::_internal_mutable_health() {
  
  return health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MeshMetric::release_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshMetric.health)
  return health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MeshMetric::set_allocated_health(std::string* health) {
  if (health != nullptr) {
    
  } else {
    
  }
  health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshMetric.health)
}
inline std::string* MeshMetric::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.MeshMetric.health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MeshMetric::unsafe_arena_set_allocated_health(
    std::string* health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health != nullptr) {
    
  } else {
    
  }
  health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshMetric.health)
}

// int64 value = 3[json_name = "value"];
inline void MeshMetric::clear_value() {
  value_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeshMetric::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MeshMetric::value() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshMetric.value)
  return _internal_value();
}
inline void MeshMetric::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  value_ = value;
}
inline void MeshMetric::set_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.MeshMetric.value)
}

// -------------------------------------------------------------------

// MeshMetrics

// .google.protobuf.Timestamp time = 1[json_name = "time"];
inline bool MeshMetrics::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool MeshMetrics::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MeshMetrics::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MeshMetrics::time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshMetrics.time)
  return _internal_time();
}
inline void MeshMetrics::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshMetrics.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MeshMetrics::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MeshMetrics::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshMetrics.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MeshMetrics::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MeshMetrics::mutable_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshMetrics.time)
  return _internal_mutable_time();
}
inline void MeshMetrics::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshMetrics.time)
}

// .kentik.synthetics.v202101beta1.MeshMetric latency = 2[json_name = "latency"];
inline bool MeshMetrics::_internal_has_latency() const {
  return this != internal_default_instance() && latency_ != nullptr;
}
inline bool MeshMetrics::has_latency() const {
  return _internal_has_latency();
}
inline void MeshMetrics::clear_latency() {
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::MeshMetric& MeshMetrics::_internal_latency() const {
  const ::kentik::synthetics::v202101beta1::MeshMetric* p = latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::MeshMetric*>(
      &::kentik::synthetics::v202101beta1::_MeshMetric_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::MeshMetric& MeshMetrics::latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshMetrics.latency)
  return _internal_latency();
}
inline void MeshMetrics::unsafe_arena_set_allocated_latency(
    ::kentik::synthetics::v202101beta1::MeshMetric* latency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_);
  }
  latency_ = latency;
  if (latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshMetrics.latency)
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::release_latency() {
  auto temp = unsafe_arena_release_latency();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::unsafe_arena_release_latency() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshMetrics.latency)
  
  ::kentik::synthetics::v202101beta1::MeshMetric* temp = latency_;
  latency_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::_internal_mutable_latency() {
  
  if (latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::MeshMetric>(GetArena());
    latency_ = p;
  }
  return latency_;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::mutable_latency() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshMetrics.latency)
  return _internal_mutable_latency();
}
inline void MeshMetrics::set_allocated_latency(::kentik::synthetics::v202101beta1::MeshMetric* latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete latency_;
  }
  if (latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latency);
    if (message_arena != submessage_arena) {
      latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshMetrics.latency)
}

// .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3[json_name = "packetLoss"];
inline bool MeshMetrics::_internal_has_packet_loss() const {
  return this != internal_default_instance() && packet_loss_ != nullptr;
}
inline bool MeshMetrics::has_packet_loss() const {
  return _internal_has_packet_loss();
}
inline void MeshMetrics::clear_packet_loss() {
  if (GetArena() == nullptr && packet_loss_ != nullptr) {
    delete packet_loss_;
  }
  packet_loss_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::MeshMetric& MeshMetrics::_internal_packet_loss() const {
  const ::kentik::synthetics::v202101beta1::MeshMetric* p = packet_loss_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::MeshMetric*>(
      &::kentik::synthetics::v202101beta1::_MeshMetric_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::MeshMetric& MeshMetrics::packet_loss() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshMetrics.packet_loss)
  return _internal_packet_loss();
}
inline void MeshMetrics::unsafe_arena_set_allocated_packet_loss(
    ::kentik::synthetics::v202101beta1::MeshMetric* packet_loss) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_loss_);
  }
  packet_loss_ = packet_loss;
  if (packet_loss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshMetrics.packet_loss)
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::release_packet_loss() {
  auto temp = unsafe_arena_release_packet_loss();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::unsafe_arena_release_packet_loss() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshMetrics.packet_loss)
  
  ::kentik::synthetics::v202101beta1::MeshMetric* temp = packet_loss_;
  packet_loss_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::_internal_mutable_packet_loss() {
  
  if (packet_loss_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::MeshMetric>(GetArena());
    packet_loss_ = p;
  }
  return packet_loss_;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::mutable_packet_loss() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshMetrics.packet_loss)
  return _internal_mutable_packet_loss();
}
inline void MeshMetrics::set_allocated_packet_loss(::kentik::synthetics::v202101beta1::MeshMetric* packet_loss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete packet_loss_;
  }
  if (packet_loss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(packet_loss);
    if (message_arena != submessage_arena) {
      packet_loss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_loss, submessage_arena);
    }
    
  } else {
    
  }
  packet_loss_ = packet_loss;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshMetrics.packet_loss)
}

// .kentik.synthetics.v202101beta1.MeshMetric jitter = 4[json_name = "jitter"];
inline bool MeshMetrics::_internal_has_jitter() const {
  return this != internal_default_instance() && jitter_ != nullptr;
}
inline bool MeshMetrics::has_jitter() const {
  return _internal_has_jitter();
}
inline void MeshMetrics::clear_jitter() {
  if (GetArena() == nullptr && jitter_ != nullptr) {
    delete jitter_;
  }
  jitter_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::MeshMetric& MeshMetrics::_internal_jitter() const {
  const ::kentik::synthetics::v202101beta1::MeshMetric* p = jitter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::MeshMetric*>(
      &::kentik::synthetics::v202101beta1::_MeshMetric_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::MeshMetric& MeshMetrics::jitter() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.MeshMetrics.jitter)
  return _internal_jitter();
}
inline void MeshMetrics::unsafe_arena_set_allocated_jitter(
    ::kentik::synthetics::v202101beta1::MeshMetric* jitter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jitter_);
  }
  jitter_ = jitter;
  if (jitter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.MeshMetrics.jitter)
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::release_jitter() {
  auto temp = unsafe_arena_release_jitter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::unsafe_arena_release_jitter() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.MeshMetrics.jitter)
  
  ::kentik::synthetics::v202101beta1::MeshMetric* temp = jitter_;
  jitter_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::_internal_mutable_jitter() {
  
  if (jitter_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::MeshMetric>(GetArena());
    jitter_ = p;
  }
  return jitter_;
}
inline ::kentik::synthetics::v202101beta1::MeshMetric* MeshMetrics::mutable_jitter() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.MeshMetrics.jitter)
  return _internal_mutable_jitter();
}
inline void MeshMetrics::set_allocated_jitter(::kentik::synthetics::v202101beta1::MeshMetric* jitter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete jitter_;
  }
  if (jitter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(jitter);
    if (message_arena != submessage_arena) {
      jitter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jitter, submessage_arena);
    }
    
  } else {
    
  }
  jitter_ = jitter;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.MeshMetrics.jitter)
}

// -------------------------------------------------------------------

// ASN

// uint32 id = 1[json_name = "id"];
inline void ASN::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASN::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASN::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ASN.id)
  return _internal_id();
}
inline void ASN::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void ASN::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ASN.id)
}

// string name = 2[json_name = "name"];
inline void ASN::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ASN::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ASN.name)
  return _internal_name();
}
inline void ASN::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ASN.name)
}
inline std::string* ASN::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.ASN.name)
  return _internal_mutable_name();
}
inline const std::string& ASN::_internal_name() const {
  return name_.Get();
}
inline void ASN::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ASN::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.ASN.name)
}
inline void ASN::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.ASN.name)
}
inline void ASN::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.ASN.name)
}
inline std::string* ASN::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ASN::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.ASN.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASN::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.ASN.name)
}
inline std::string* ASN::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.ASN.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ASN::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.ASN.name)
}

// -------------------------------------------------------------------

// Country

// string code = 1[json_name = "code"];
inline void Country::clear_code() {
  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Country::code() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Country.code)
  return _internal_code();
}
inline void Country::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Country.code)
}
inline std::string* Country::mutable_code() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Country.code)
  return _internal_mutable_code();
}
inline const std::string& Country::_internal_code() const {
  return code_.Get();
}
inline void Country::_internal_set_code(const std::string& value) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Country::set_code(std::string&& value) {
  
  code_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Country.code)
}
inline void Country::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Country.code)
}
inline void Country::set_code(const char* value,
    size_t size) {
  
  code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Country.code)
}
inline std::string* Country::_internal_mutable_code() {
  
  return code_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Country::release_code() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Country.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Country::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Country.code)
}
inline std::string* Country::unsafe_arena_release_code() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Country.code)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return code_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Country::unsafe_arena_set_allocated_code(
    std::string* code) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (code != nullptr) {
    
  } else {
    
  }
  code_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      code, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Country.code)
}

// string name = 2[json_name = "name"];
inline void Country::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Country::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Country.name)
  return _internal_name();
}
inline void Country::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Country.name)
}
inline std::string* Country::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Country.name)
  return _internal_mutable_name();
}
inline const std::string& Country::_internal_name() const {
  return name_.Get();
}
inline void Country::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Country::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Country.name)
}
inline void Country::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Country.name)
}
inline void Country::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Country.name)
}
inline std::string* Country::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Country::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Country.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Country::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Country.name)
}
inline std::string* Country::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Country.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Country::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Country.name)
}

// -------------------------------------------------------------------

// Region

// int64 id = 1[json_name = "id"];
inline void Region::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Region::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Region::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Region.id)
  return _internal_id();
}
inline void Region::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void Region::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Region.id)
}

// string name = 2[json_name = "name"];
inline void Region::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Region::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Region.name)
  return _internal_name();
}
inline void Region::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Region.name)
}
inline std::string* Region::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Region.name)
  return _internal_mutable_name();
}
inline const std::string& Region::_internal_name() const {
  return name_.Get();
}
inline void Region::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Region::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Region.name)
}
inline void Region::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Region.name)
}
inline void Region::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Region.name)
}
inline std::string* Region::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Region::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Region.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Region::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Region.name)
}
inline std::string* Region::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Region.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Region::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Region.name)
}

// -------------------------------------------------------------------

// City

// string id = 1[json_name = "id"];
inline void City::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& City::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.City.id)
  return _internal_id();
}
inline void City::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.City.id)
}
inline std::string* City::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.City.id)
  return _internal_mutable_id();
}
inline const std::string& City::_internal_id() const {
  return id_.Get();
}
inline void City::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void City::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.City.id)
}
inline void City::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.City.id)
}
inline void City::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.City.id)
}
inline std::string* City::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* City::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.City.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void City::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.City.id)
}
inline std::string* City::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.City.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void City::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.City.id)
}

// string name = 2[json_name = "name"];
inline void City::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& City::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.City.name)
  return _internal_name();
}
inline void City::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.City.name)
}
inline std::string* City::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.City.name)
  return _internal_mutable_name();
}
inline const std::string& City::_internal_name() const {
  return name_.Get();
}
inline void City::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void City::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.City.name)
}
inline void City::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.City.name)
}
inline void City::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.City.name)
}
inline std::string* City::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* City::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.City.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void City::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.City.name)
}
inline std::string* City::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.City.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void City::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.City.name)
}

// double latitude = 8[json_name = "latitude"];
inline void City::clear_latitude() {
  latitude_ = 0;
}
inline double City::_internal_latitude() const {
  return latitude_;
}
inline double City::latitude() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.City.latitude)
  return _internal_latitude();
}
inline void City::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void City::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.City.latitude)
}

// double longitude = 9[json_name = "longitude"];
inline void City::clear_longitude() {
  longitude_ = 0;
}
inline double City::_internal_longitude() const {
  return longitude_;
}
inline double City::longitude() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.City.longitude)
  return _internal_longitude();
}
inline void City::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void City::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.City.longitude)
}

// -------------------------------------------------------------------

// Geo

// .kentik.synthetics.v202101beta1.Country country = 1[json_name = "country"];
inline bool Geo::_internal_has_country() const {
  return this != internal_default_instance() && country_ != nullptr;
}
inline bool Geo::has_country() const {
  return _internal_has_country();
}
inline void Geo::clear_country() {
  if (GetArena() == nullptr && country_ != nullptr) {
    delete country_;
  }
  country_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Country& Geo::_internal_country() const {
  const ::kentik::synthetics::v202101beta1::Country* p = country_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Country*>(
      &::kentik::synthetics::v202101beta1::_Country_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Country& Geo::country() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Geo.country)
  return _internal_country();
}
inline void Geo::unsafe_arena_set_allocated_country(
    ::kentik::synthetics::v202101beta1::Country* country) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(country_);
  }
  country_ = country;
  if (country) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Geo.country)
}
inline ::kentik::synthetics::v202101beta1::Country* Geo::release_country() {
  auto temp = unsafe_arena_release_country();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Country* Geo::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Geo.country)
  
  ::kentik::synthetics::v202101beta1::Country* temp = country_;
  country_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Country* Geo::_internal_mutable_country() {
  
  if (country_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Country>(GetArena());
    country_ = p;
  }
  return country_;
}
inline ::kentik::synthetics::v202101beta1::Country* Geo::mutable_country() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Geo.country)
  return _internal_mutable_country();
}
inline void Geo::set_allocated_country(::kentik::synthetics::v202101beta1::Country* country) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete country_;
  }
  if (country) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(country);
    if (message_arena != submessage_arena) {
      country = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, country, submessage_arena);
    }
    
  } else {
    
  }
  country_ = country;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Geo.country)
}

// .kentik.synthetics.v202101beta1.Region region = 2[json_name = "region"];
inline bool Geo::_internal_has_region() const {
  return this != internal_default_instance() && region_ != nullptr;
}
inline bool Geo::has_region() const {
  return _internal_has_region();
}
inline void Geo::clear_region() {
  if (GetArena() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Region& Geo::_internal_region() const {
  const ::kentik::synthetics::v202101beta1::Region* p = region_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Region*>(
      &::kentik::synthetics::v202101beta1::_Region_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Region& Geo::region() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Geo.region)
  return _internal_region();
}
inline void Geo::unsafe_arena_set_allocated_region(
    ::kentik::synthetics::v202101beta1::Region* region) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(region_);
  }
  region_ = region;
  if (region) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Geo.region)
}
inline ::kentik::synthetics::v202101beta1::Region* Geo::release_region() {
  auto temp = unsafe_arena_release_region();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Region* Geo::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Geo.region)
  
  ::kentik::synthetics::v202101beta1::Region* temp = region_;
  region_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Region* Geo::_internal_mutable_region() {
  
  if (region_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Region>(GetArena());
    region_ = p;
  }
  return region_;
}
inline ::kentik::synthetics::v202101beta1::Region* Geo::mutable_region() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Geo.region)
  return _internal_mutable_region();
}
inline void Geo::set_allocated_region(::kentik::synthetics::v202101beta1::Region* region) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete region_;
  }
  if (region) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(region);
    if (message_arena != submessage_arena) {
      region = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, region, submessage_arena);
    }
    
  } else {
    
  }
  region_ = region;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Geo.region)
}

// .kentik.synthetics.v202101beta1.City city = 3[json_name = "city"];
inline bool Geo::_internal_has_city() const {
  return this != internal_default_instance() && city_ != nullptr;
}
inline bool Geo::has_city() const {
  return _internal_has_city();
}
inline void Geo::clear_city() {
  if (GetArena() == nullptr && city_ != nullptr) {
    delete city_;
  }
  city_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::City& Geo::_internal_city() const {
  const ::kentik::synthetics::v202101beta1::City* p = city_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::City*>(
      &::kentik::synthetics::v202101beta1::_City_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::City& Geo::city() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Geo.city)
  return _internal_city();
}
inline void Geo::unsafe_arena_set_allocated_city(
    ::kentik::synthetics::v202101beta1::City* city) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(city_);
  }
  city_ = city;
  if (city) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Geo.city)
}
inline ::kentik::synthetics::v202101beta1::City* Geo::release_city() {
  auto temp = unsafe_arena_release_city();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::City* Geo::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Geo.city)
  
  ::kentik::synthetics::v202101beta1::City* temp = city_;
  city_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::City* Geo::_internal_mutable_city() {
  
  if (city_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::City>(GetArena());
    city_ = p;
  }
  return city_;
}
inline ::kentik::synthetics::v202101beta1::City* Geo::mutable_city() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Geo.city)
  return _internal_mutable_city();
}
inline void Geo::set_allocated_city(::kentik::synthetics::v202101beta1::City* city) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete city_;
  }
  if (city) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(city);
    if (message_arena != submessage_arena) {
      city = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, city, submessage_arena);
    }
    
  } else {
    
  }
  city_ = city;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Geo.city)
}

// -------------------------------------------------------------------

// DNS

// string name = 1[json_name = "name"];
inline void DNS::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DNS::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DNS.name)
  return _internal_name();
}
inline void DNS::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DNS.name)
}
inline std::string* DNS::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.DNS.name)
  return _internal_mutable_name();
}
inline const std::string& DNS::_internal_name() const {
  return name_.Get();
}
inline void DNS::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DNS::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.DNS.name)
}
inline void DNS::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.DNS.name)
}
inline void DNS::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.DNS.name)
}
inline std::string* DNS::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DNS::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.DNS.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DNS::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.DNS.name)
}
inline std::string* DNS::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.DNS.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DNS::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.DNS.name)
}

// -------------------------------------------------------------------

// IPInfo

// string ip = 1[json_name = "ip"];
inline void IPInfo::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPInfo::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IPInfo.ip)
  return _internal_ip();
}
inline void IPInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.IPInfo.ip)
}
inline std::string* IPInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IPInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& IPInfo::_internal_ip() const {
  return ip_.Get();
}
inline void IPInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPInfo::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.IPInfo.ip)
}
inline void IPInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.IPInfo.ip)
}
inline void IPInfo::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.IPInfo.ip)
}
inline std::string* IPInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPInfo::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IPInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IPInfo.ip)
}
inline std::string* IPInfo::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.IPInfo.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IPInfo::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IPInfo.ip)
}

// .kentik.synthetics.v202101beta1.ASN asn = 2[json_name = "asn"];
inline bool IPInfo::_internal_has_asn() const {
  return this != internal_default_instance() && asn_ != nullptr;
}
inline bool IPInfo::has_asn() const {
  return _internal_has_asn();
}
inline void IPInfo::clear_asn() {
  if (GetArena() == nullptr && asn_ != nullptr) {
    delete asn_;
  }
  asn_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::ASN& IPInfo::_internal_asn() const {
  const ::kentik::synthetics::v202101beta1::ASN* p = asn_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::ASN*>(
      &::kentik::synthetics::v202101beta1::_ASN_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::ASN& IPInfo::asn() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IPInfo.asn)
  return _internal_asn();
}
inline void IPInfo::unsafe_arena_set_allocated_asn(
    ::kentik::synthetics::v202101beta1::ASN* asn) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asn_);
  }
  asn_ = asn;
  if (asn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IPInfo.asn)
}
inline ::kentik::synthetics::v202101beta1::ASN* IPInfo::release_asn() {
  auto temp = unsafe_arena_release_asn();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::ASN* IPInfo::unsafe_arena_release_asn() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IPInfo.asn)
  
  ::kentik::synthetics::v202101beta1::ASN* temp = asn_;
  asn_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::ASN* IPInfo::_internal_mutable_asn() {
  
  if (asn_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::ASN>(GetArena());
    asn_ = p;
  }
  return asn_;
}
inline ::kentik::synthetics::v202101beta1::ASN* IPInfo::mutable_asn() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IPInfo.asn)
  return _internal_mutable_asn();
}
inline void IPInfo::set_allocated_asn(::kentik::synthetics::v202101beta1::ASN* asn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete asn_;
  }
  if (asn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asn);
    if (message_arena != submessage_arena) {
      asn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asn, submessage_arena);
    }
    
  } else {
    
  }
  asn_ = asn;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IPInfo.asn)
}

// .kentik.synthetics.v202101beta1.Geo geo = 3[json_name = "geo"];
inline bool IPInfo::_internal_has_geo() const {
  return this != internal_default_instance() && geo_ != nullptr;
}
inline bool IPInfo::has_geo() const {
  return _internal_has_geo();
}
inline void IPInfo::clear_geo() {
  if (GetArena() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Geo& IPInfo::_internal_geo() const {
  const ::kentik::synthetics::v202101beta1::Geo* p = geo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Geo*>(
      &::kentik::synthetics::v202101beta1::_Geo_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Geo& IPInfo::geo() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IPInfo.geo)
  return _internal_geo();
}
inline void IPInfo::unsafe_arena_set_allocated_geo(
    ::kentik::synthetics::v202101beta1::Geo* geo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geo_);
  }
  geo_ = geo;
  if (geo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IPInfo.geo)
}
inline ::kentik::synthetics::v202101beta1::Geo* IPInfo::release_geo() {
  auto temp = unsafe_arena_release_geo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Geo* IPInfo::unsafe_arena_release_geo() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IPInfo.geo)
  
  ::kentik::synthetics::v202101beta1::Geo* temp = geo_;
  geo_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Geo* IPInfo::_internal_mutable_geo() {
  
  if (geo_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Geo>(GetArena());
    geo_ = p;
  }
  return geo_;
}
inline ::kentik::synthetics::v202101beta1::Geo* IPInfo::mutable_geo() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IPInfo.geo)
  return _internal_mutable_geo();
}
inline void IPInfo::set_allocated_geo(::kentik::synthetics::v202101beta1::Geo* geo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete geo_;
  }
  if (geo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(geo);
    if (message_arena != submessage_arena) {
      geo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo, submessage_arena);
    }
    
  } else {
    
  }
  geo_ = geo;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IPInfo.geo)
}

// .kentik.synthetics.v202101beta1.DNS dns = 4[json_name = "dns"];
inline bool IPInfo::_internal_has_dns() const {
  return this != internal_default_instance() && dns_ != nullptr;
}
inline bool IPInfo::has_dns() const {
  return _internal_has_dns();
}
inline void IPInfo::clear_dns() {
  if (GetArena() == nullptr && dns_ != nullptr) {
    delete dns_;
  }
  dns_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::DNS& IPInfo::_internal_dns() const {
  const ::kentik::synthetics::v202101beta1::DNS* p = dns_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::DNS*>(
      &::kentik::synthetics::v202101beta1::_DNS_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::DNS& IPInfo::dns() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IPInfo.dns)
  return _internal_dns();
}
inline void IPInfo::unsafe_arena_set_allocated_dns(
    ::kentik::synthetics::v202101beta1::DNS* dns) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dns_);
  }
  dns_ = dns;
  if (dns) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IPInfo.dns)
}
inline ::kentik::synthetics::v202101beta1::DNS* IPInfo::release_dns() {
  auto temp = unsafe_arena_release_dns();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::DNS* IPInfo::unsafe_arena_release_dns() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IPInfo.dns)
  
  ::kentik::synthetics::v202101beta1::DNS* temp = dns_;
  dns_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::DNS* IPInfo::_internal_mutable_dns() {
  
  if (dns_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::DNS>(GetArena());
    dns_ = p;
  }
  return dns_;
}
inline ::kentik::synthetics::v202101beta1::DNS* IPInfo::mutable_dns() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IPInfo.dns)
  return _internal_mutable_dns();
}
inline void IPInfo::set_allocated_dns(::kentik::synthetics::v202101beta1::DNS* dns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dns_;
  }
  if (dns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dns);
    if (message_arena != submessage_arena) {
      dns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns, submessage_arena);
    }
    
  } else {
    
  }
  dns_ = dns;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IPInfo.dns)
}

// string device_id = 5[json_name = "deviceId"];
inline void IPInfo::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPInfo::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IPInfo.device_id)
  return _internal_device_id();
}
inline void IPInfo::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.IPInfo.device_id)
}
inline std::string* IPInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IPInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& IPInfo::_internal_device_id() const {
  return device_id_.Get();
}
inline void IPInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPInfo::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.IPInfo.device_id)
}
inline void IPInfo::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.IPInfo.device_id)
}
inline void IPInfo::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.IPInfo.device_id)
}
inline std::string* IPInfo::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IPInfo.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IPInfo.device_id)
}
inline std::string* IPInfo::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.IPInfo.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IPInfo::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IPInfo.device_id)
}

// string site_id = 6[json_name = "siteId"];
inline void IPInfo::clear_site_id() {
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPInfo::site_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IPInfo.site_id)
  return _internal_site_id();
}
inline void IPInfo::set_site_id(const std::string& value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.IPInfo.site_id)
}
inline std::string* IPInfo::mutable_site_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IPInfo.site_id)
  return _internal_mutable_site_id();
}
inline const std::string& IPInfo::_internal_site_id() const {
  return site_id_.Get();
}
inline void IPInfo::_internal_set_site_id(const std::string& value) {
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPInfo::set_site_id(std::string&& value) {
  
  site_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.IPInfo.site_id)
}
inline void IPInfo::set_site_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.IPInfo.site_id)
}
inline void IPInfo::set_site_id(const char* value,
    size_t size) {
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.IPInfo.site_id)
}
inline std::string* IPInfo::_internal_mutable_site_id() {
  
  return site_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPInfo::release_site_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IPInfo.site_id)
  return site_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPInfo::set_allocated_site_id(std::string* site_id) {
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IPInfo.site_id)
}
inline std::string* IPInfo::unsafe_arena_release_site_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.IPInfo.site_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return site_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IPInfo::unsafe_arena_set_allocated_site_id(
    std::string* site_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IPInfo.site_id)
}

// string egress = 7[json_name = "egress"];
inline void IPInfo::clear_egress() {
  egress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IPInfo::egress() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IPInfo.egress)
  return _internal_egress();
}
inline void IPInfo::set_egress(const std::string& value) {
  _internal_set_egress(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.IPInfo.egress)
}
inline std::string* IPInfo::mutable_egress() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IPInfo.egress)
  return _internal_mutable_egress();
}
inline const std::string& IPInfo::_internal_egress() const {
  return egress_.Get();
}
inline void IPInfo::_internal_set_egress(const std::string& value) {
  
  egress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IPInfo::set_egress(std::string&& value) {
  
  egress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.IPInfo.egress)
}
inline void IPInfo::set_egress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  egress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.IPInfo.egress)
}
inline void IPInfo::set_egress(const char* value,
    size_t size) {
  
  egress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.IPInfo.egress)
}
inline std::string* IPInfo::_internal_mutable_egress() {
  
  return egress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IPInfo::release_egress() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IPInfo.egress)
  return egress_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IPInfo::set_allocated_egress(std::string* egress) {
  if (egress != nullptr) {
    
  } else {
    
  }
  egress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), egress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IPInfo.egress)
}
inline std::string* IPInfo::unsafe_arena_release_egress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.IPInfo.egress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return egress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IPInfo::unsafe_arena_set_allocated_egress(
    std::string* egress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (egress != nullptr) {
    
  } else {
    
  }
  egress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      egress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IPInfo.egress)
}

// -------------------------------------------------------------------

// IDByIP

// string id = 1[json_name = "id"];
inline void IDByIP::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IDByIP::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IDByIP.id)
  return _internal_id();
}
inline void IDByIP::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.IDByIP.id)
}
inline std::string* IDByIP::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IDByIP.id)
  return _internal_mutable_id();
}
inline const std::string& IDByIP::_internal_id() const {
  return id_.Get();
}
inline void IDByIP::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IDByIP::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.IDByIP.id)
}
inline void IDByIP::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.IDByIP.id)
}
inline void IDByIP::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.IDByIP.id)
}
inline std::string* IDByIP::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IDByIP::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IDByIP.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDByIP::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IDByIP.id)
}
inline std::string* IDByIP::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.IDByIP.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IDByIP::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IDByIP.id)
}

// string ip = 2[json_name = "ip"];
inline void IDByIP::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IDByIP::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.IDByIP.ip)
  return _internal_ip();
}
inline void IDByIP::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.IDByIP.ip)
}
inline std::string* IDByIP::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.IDByIP.ip)
  return _internal_mutable_ip();
}
inline const std::string& IDByIP::_internal_ip() const {
  return ip_.Get();
}
inline void IDByIP::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IDByIP::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.IDByIP.ip)
}
inline void IDByIP::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.IDByIP.ip)
}
inline void IDByIP::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.IDByIP.ip)
}
inline std::string* IDByIP::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IDByIP::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.IDByIP.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IDByIP::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.IDByIP.ip)
}
inline std::string* IDByIP::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.IDByIP.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IDByIP::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.IDByIP.ip)
}

// -------------------------------------------------------------------

// TracerouteLookup

// repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1[json_name = "agentIdByIp"];
inline int TracerouteLookup::_internal_agent_id_by_ip_size() const {
  return agent_id_by_ip_.size();
}
inline int TracerouteLookup::agent_id_by_ip_size() const {
  return _internal_agent_id_by_ip_size();
}
inline void TracerouteLookup::clear_agent_id_by_ip() {
  agent_id_by_ip_.Clear();
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::mutable_agent_id_by_ip(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteLookup.agent_id_by_ip)
  return agent_id_by_ip_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >*
TracerouteLookup::mutable_agent_id_by_ip() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TracerouteLookup.agent_id_by_ip)
  return &agent_id_by_ip_;
}
inline const ::kentik::synthetics::v202101beta1::IDByIP& TracerouteLookup::_internal_agent_id_by_ip(int index) const {
  return agent_id_by_ip_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::IDByIP& TracerouteLookup::agent_id_by_ip(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteLookup.agent_id_by_ip)
  return _internal_agent_id_by_ip(index);
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::_internal_add_agent_id_by_ip() {
  return agent_id_by_ip_.Add();
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::add_agent_id_by_ip() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TracerouteLookup.agent_id_by_ip)
  return _internal_add_agent_id_by_ip();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >&
TracerouteLookup::agent_id_by_ip() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TracerouteLookup.agent_id_by_ip)
  return agent_id_by_ip_;
}

// repeated .kentik.synthetics.v202101beta1.Agent agents = 2[json_name = "agents"];
inline int TracerouteLookup::_internal_agents_size() const {
  return agents_.size();
}
inline int TracerouteLookup::agents_size() const {
  return _internal_agents_size();
}
inline void TracerouteLookup::clear_agents() {
  agents_.Clear();
}
inline ::kentik::synthetics::v202101beta1::Agent* TracerouteLookup::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteLookup.agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent >*
TracerouteLookup::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TracerouteLookup.agents)
  return &agents_;
}
inline const ::kentik::synthetics::v202101beta1::Agent& TracerouteLookup::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::Agent& TracerouteLookup::agents(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteLookup.agents)
  return _internal_agents(index);
}
inline ::kentik::synthetics::v202101beta1::Agent* TracerouteLookup::_internal_add_agents() {
  return agents_.Add();
}
inline ::kentik::synthetics::v202101beta1::Agent* TracerouteLookup::add_agents() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TracerouteLookup.agents)
  return _internal_add_agents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent >&
TracerouteLookup::agents() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TracerouteLookup.agents)
  return agents_;
}

// repeated .kentik.synthetics.v202101beta1.ASN asns = 3[json_name = "asns"];
inline int TracerouteLookup::_internal_asns_size() const {
  return asns_.size();
}
inline int TracerouteLookup::asns_size() const {
  return _internal_asns_size();
}
inline void TracerouteLookup::clear_asns() {
  asns_.Clear();
}
inline ::kentik::synthetics::v202101beta1::ASN* TracerouteLookup::mutable_asns(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteLookup.asns)
  return asns_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::ASN >*
TracerouteLookup::mutable_asns() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TracerouteLookup.asns)
  return &asns_;
}
inline const ::kentik::synthetics::v202101beta1::ASN& TracerouteLookup::_internal_asns(int index) const {
  return asns_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::ASN& TracerouteLookup::asns(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteLookup.asns)
  return _internal_asns(index);
}
inline ::kentik::synthetics::v202101beta1::ASN* TracerouteLookup::_internal_add_asns() {
  return asns_.Add();
}
inline ::kentik::synthetics::v202101beta1::ASN* TracerouteLookup::add_asns() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TracerouteLookup.asns)
  return _internal_add_asns();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::ASN >&
TracerouteLookup::asns() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TracerouteLookup.asns)
  return asns_;
}

// repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4[json_name = "deviceIdByIp"];
inline int TracerouteLookup::_internal_device_id_by_ip_size() const {
  return device_id_by_ip_.size();
}
inline int TracerouteLookup::device_id_by_ip_size() const {
  return _internal_device_id_by_ip_size();
}
inline void TracerouteLookup::clear_device_id_by_ip() {
  device_id_by_ip_.Clear();
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::mutable_device_id_by_ip(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteLookup.device_id_by_ip)
  return device_id_by_ip_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >*
TracerouteLookup::mutable_device_id_by_ip() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TracerouteLookup.device_id_by_ip)
  return &device_id_by_ip_;
}
inline const ::kentik::synthetics::v202101beta1::IDByIP& TracerouteLookup::_internal_device_id_by_ip(int index) const {
  return device_id_by_ip_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::IDByIP& TracerouteLookup::device_id_by_ip(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteLookup.device_id_by_ip)
  return _internal_device_id_by_ip(index);
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::_internal_add_device_id_by_ip() {
  return device_id_by_ip_.Add();
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::add_device_id_by_ip() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TracerouteLookup.device_id_by_ip)
  return _internal_add_device_id_by_ip();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >&
TracerouteLookup::device_id_by_ip() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TracerouteLookup.device_id_by_ip)
  return device_id_by_ip_;
}

// repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5[json_name = "siteIdByIp"];
inline int TracerouteLookup::_internal_site_id_by_ip_size() const {
  return site_id_by_ip_.size();
}
inline int TracerouteLookup::site_id_by_ip_size() const {
  return _internal_site_id_by_ip_size();
}
inline void TracerouteLookup::clear_site_id_by_ip() {
  site_id_by_ip_.Clear();
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::mutable_site_id_by_ip(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteLookup.site_id_by_ip)
  return site_id_by_ip_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >*
TracerouteLookup::mutable_site_id_by_ip() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TracerouteLookup.site_id_by_ip)
  return &site_id_by_ip_;
}
inline const ::kentik::synthetics::v202101beta1::IDByIP& TracerouteLookup::_internal_site_id_by_ip(int index) const {
  return site_id_by_ip_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::IDByIP& TracerouteLookup::site_id_by_ip(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteLookup.site_id_by_ip)
  return _internal_site_id_by_ip(index);
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::_internal_add_site_id_by_ip() {
  return site_id_by_ip_.Add();
}
inline ::kentik::synthetics::v202101beta1::IDByIP* TracerouteLookup::add_site_id_by_ip() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TracerouteLookup.site_id_by_ip)
  return _internal_add_site_id_by_ip();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IDByIP >&
TracerouteLookup::site_id_by_ip() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TracerouteLookup.site_id_by_ip)
  return site_id_by_ip_;
}

// repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6[json_name = "ips"];
inline int TracerouteLookup::_internal_ips_size() const {
  return ips_.size();
}
inline int TracerouteLookup::ips_size() const {
  return _internal_ips_size();
}
inline void TracerouteLookup::clear_ips() {
  ips_.Clear();
}
inline ::kentik::synthetics::v202101beta1::IPInfo* TracerouteLookup::mutable_ips(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteLookup.ips)
  return ips_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IPInfo >*
TracerouteLookup::mutable_ips() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TracerouteLookup.ips)
  return &ips_;
}
inline const ::kentik::synthetics::v202101beta1::IPInfo& TracerouteLookup::_internal_ips(int index) const {
  return ips_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::IPInfo& TracerouteLookup::ips(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteLookup.ips)
  return _internal_ips(index);
}
inline ::kentik::synthetics::v202101beta1::IPInfo* TracerouteLookup::_internal_add_ips() {
  return ips_.Add();
}
inline ::kentik::synthetics::v202101beta1::IPInfo* TracerouteLookup::add_ips() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TracerouteLookup.ips)
  return _internal_add_ips();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::IPInfo >&
TracerouteLookup::ips() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TracerouteLookup.ips)
  return ips_;
}

// -------------------------------------------------------------------

// TraceHop

// int32 ttl = 1[json_name = "ttl"];
inline void TraceHop::clear_ttl() {
  ttl_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::_internal_ttl() const {
  return ttl_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::ttl() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.ttl)
  return _internal_ttl();
}
inline void TraceHop::_internal_set_ttl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ttl_ = value;
}
inline void TraceHop::set_ttl(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ttl(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.ttl)
}

// string ip = 2[json_name = "ip"];
inline void TraceHop::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TraceHop::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.ip)
  return _internal_ip();
}
inline void TraceHop::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.ip)
}
inline std::string* TraceHop::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TraceHop.ip)
  return _internal_mutable_ip();
}
inline const std::string& TraceHop::_internal_ip() const {
  return ip_.Get();
}
inline void TraceHop::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TraceHop::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.TraceHop.ip)
}
inline void TraceHop::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TraceHop.ip)
}
inline void TraceHop::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TraceHop.ip)
}
inline std::string* TraceHop::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TraceHop::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TraceHop.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceHop::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TraceHop.ip)
}
inline std::string* TraceHop::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.TraceHop.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TraceHop::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TraceHop.ip)
}

// bool timeout = 3[json_name = "timeout"];
inline void TraceHop::clear_timeout() {
  timeout_ = false;
}
inline bool TraceHop::_internal_timeout() const {
  return timeout_;
}
inline bool TraceHop::timeout() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.timeout)
  return _internal_timeout();
}
inline void TraceHop::_internal_set_timeout(bool value) {
  
  timeout_ = value;
}
inline void TraceHop::set_timeout(bool value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.timeout)
}

// int32 latency = 4[json_name = "latency"];
inline void TraceHop::clear_latency() {
  latency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.latency)
  return _internal_latency();
}
inline void TraceHop::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latency_ = value;
}
inline void TraceHop::set_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.latency)
}

// int32 min_expected_latency = 5[json_name = "minExpectedLatency"];
inline void TraceHop::clear_min_expected_latency() {
  min_expected_latency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::_internal_min_expected_latency() const {
  return min_expected_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::min_expected_latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.min_expected_latency)
  return _internal_min_expected_latency();
}
inline void TraceHop::_internal_set_min_expected_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_expected_latency_ = value;
}
inline void TraceHop::set_min_expected_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_expected_latency(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.min_expected_latency)
}

// int32 asn = 6[json_name = "asn"];
inline void TraceHop::clear_asn() {
  asn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::asn() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.asn)
  return _internal_asn();
}
inline void TraceHop::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  asn_ = value;
}
inline void TraceHop::set_asn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.asn)
}

// int32 site = 7[json_name = "site"];
inline void TraceHop::clear_site() {
  site_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::_internal_site() const {
  return site_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::site() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.site)
  return _internal_site();
}
inline void TraceHop::_internal_set_site(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  site_ = value;
}
inline void TraceHop::set_site(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_site(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.site)
}

// int32 region = 8[json_name = "region"];
inline void TraceHop::clear_region() {
  region_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::_internal_region() const {
  return region_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::region() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.region)
  return _internal_region();
}
inline void TraceHop::_internal_set_region(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  region_ = value;
}
inline void TraceHop::set_region(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.region)
}

// bool target = 9[json_name = "target"];
inline void TraceHop::clear_target() {
  target_ = false;
}
inline bool TraceHop::_internal_target() const {
  return target_;
}
inline bool TraceHop::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.target)
  return _internal_target();
}
inline void TraceHop::_internal_set_target(bool value) {
  
  target_ = value;
}
inline void TraceHop::set_target(bool value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.target)
}

// bool trace_end = 10[json_name = "traceEnd"];
inline void TraceHop::clear_trace_end() {
  trace_end_ = false;
}
inline bool TraceHop::_internal_trace_end() const {
  return trace_end_;
}
inline bool TraceHop::trace_end() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceHop.trace_end)
  return _internal_trace_end();
}
inline void TraceHop::_internal_set_trace_end(bool value) {
  
  trace_end_ = value;
}
inline void TraceHop::set_trace_end(bool value) {
  _internal_set_trace_end(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceHop.trace_end)
}

// -------------------------------------------------------------------

// TraceProbe

// repeated int32 as_path = 1[json_name = "asPath"];
inline int TraceProbe::_internal_as_path_size() const {
  return as_path_.size();
}
inline int TraceProbe::as_path_size() const {
  return _internal_as_path_size();
}
inline void TraceProbe::clear_as_path() {
  as_path_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceProbe::_internal_as_path(int index) const {
  return as_path_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceProbe::as_path(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceProbe.as_path)
  return _internal_as_path(index);
}
inline void TraceProbe::set_as_path(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  as_path_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceProbe.as_path)
}
inline void TraceProbe::_internal_add_as_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  as_path_.Add(value);
}
inline void TraceProbe::add_as_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_as_path(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TraceProbe.as_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TraceProbe::_internal_as_path() const {
  return as_path_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TraceProbe::as_path() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TraceProbe.as_path)
  return _internal_as_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TraceProbe::_internal_mutable_as_path() {
  return &as_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TraceProbe::mutable_as_path() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TraceProbe.as_path)
  return _internal_mutable_as_path();
}

// bool completed = 2[json_name = "completed"];
inline void TraceProbe::clear_completed() {
  completed_ = false;
}
inline bool TraceProbe::_internal_completed() const {
  return completed_;
}
inline bool TraceProbe::completed() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceProbe.completed)
  return _internal_completed();
}
inline void TraceProbe::_internal_set_completed(bool value) {
  
  completed_ = value;
}
inline void TraceProbe::set_completed(bool value) {
  _internal_set_completed(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceProbe.completed)
}

// int32 hop_count = 3[json_name = "hopCount"];
inline void TraceProbe::clear_hop_count() {
  hop_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceProbe::_internal_hop_count() const {
  return hop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceProbe::hop_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceProbe.hop_count)
  return _internal_hop_count();
}
inline void TraceProbe::_internal_set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hop_count_ = value;
}
inline void TraceProbe::set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hop_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceProbe.hop_count)
}

// repeated string region_path = 4[json_name = "regionPath"];
inline int TraceProbe::_internal_region_path_size() const {
  return region_path_.size();
}
inline int TraceProbe::region_path_size() const {
  return _internal_region_path_size();
}
inline void TraceProbe::clear_region_path() {
  region_path_.Clear();
}
inline std::string* TraceProbe::add_region_path() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.TraceProbe.region_path)
  return _internal_add_region_path();
}
inline const std::string& TraceProbe::_internal_region_path(int index) const {
  return region_path_.Get(index);
}
inline const std::string& TraceProbe::region_path(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceProbe.region_path)
  return _internal_region_path(index);
}
inline std::string* TraceProbe::mutable_region_path(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TraceProbe.region_path)
  return region_path_.Mutable(index);
}
inline void TraceProbe::set_region_path(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceProbe.region_path)
  region_path_.Mutable(index)->assign(value);
}
inline void TraceProbe::set_region_path(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceProbe.region_path)
  region_path_.Mutable(index)->assign(std::move(value));
}
inline void TraceProbe::set_region_path(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  region_path_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.TraceProbe.region_path)
}
inline void TraceProbe::set_region_path(int index, const char* value, size_t size) {
  region_path_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.TraceProbe.region_path)
}
inline std::string* TraceProbe::_internal_add_region_path() {
  return region_path_.Add();
}
inline void TraceProbe::add_region_path(const std::string& value) {
  region_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TraceProbe.region_path)
}
inline void TraceProbe::add_region_path(std::string&& value) {
  region_path_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TraceProbe.region_path)
}
inline void TraceProbe::add_region_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  region_path_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.TraceProbe.region_path)
}
inline void TraceProbe::add_region_path(const char* value, size_t size) {
  region_path_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.TraceProbe.region_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TraceProbe::region_path() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TraceProbe.region_path)
  return region_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TraceProbe::mutable_region_path() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TraceProbe.region_path)
  return &region_path_;
}

// repeated int32 site_path = 5[json_name = "sitePath"];
inline int TraceProbe::_internal_site_path_size() const {
  return site_path_.size();
}
inline int TraceProbe::site_path_size() const {
  return _internal_site_path_size();
}
inline void TraceProbe::clear_site_path() {
  site_path_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceProbe::_internal_site_path(int index) const {
  return site_path_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceProbe::site_path(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceProbe.site_path)
  return _internal_site_path(index);
}
inline void TraceProbe::set_site_path(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  site_path_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TraceProbe.site_path)
}
inline void TraceProbe::_internal_add_site_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  site_path_.Add(value);
}
inline void TraceProbe::add_site_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_site_path(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TraceProbe.site_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TraceProbe::_internal_site_path() const {
  return site_path_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TraceProbe::site_path() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TraceProbe.site_path)
  return _internal_site_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TraceProbe::_internal_mutable_site_path() {
  return &site_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TraceProbe::mutable_site_path() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TraceProbe.site_path)
  return _internal_mutable_site_path();
}

// repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6[json_name = "hops"];
inline int TraceProbe::_internal_hops_size() const {
  return hops_.size();
}
inline int TraceProbe::hops_size() const {
  return _internal_hops_size();
}
inline void TraceProbe::clear_hops() {
  hops_.Clear();
}
inline ::kentik::synthetics::v202101beta1::TraceHop* TraceProbe::mutable_hops(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TraceProbe.hops)
  return hops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceHop >*
TraceProbe::mutable_hops() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TraceProbe.hops)
  return &hops_;
}
inline const ::kentik::synthetics::v202101beta1::TraceHop& TraceProbe::_internal_hops(int index) const {
  return hops_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::TraceHop& TraceProbe::hops(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TraceProbe.hops)
  return _internal_hops(index);
}
inline ::kentik::synthetics::v202101beta1::TraceHop* TraceProbe::_internal_add_hops() {
  return hops_.Add();
}
inline ::kentik::synthetics::v202101beta1::TraceHop* TraceProbe::add_hops() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TraceProbe.hops)
  return _internal_add_hops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceHop >&
TraceProbe::hops() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TraceProbe.hops)
  return hops_;
}

// -------------------------------------------------------------------

// Trace

// string agent_id = 1[json_name = "agentId"];
inline void Trace::clear_agent_id() {
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trace::agent_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Trace.agent_id)
  return _internal_agent_id();
}
inline void Trace::set_agent_id(const std::string& value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Trace.agent_id)
}
inline std::string* Trace::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Trace.agent_id)
  return _internal_mutable_agent_id();
}
inline const std::string& Trace::_internal_agent_id() const {
  return agent_id_.Get();
}
inline void Trace::_internal_set_agent_id(const std::string& value) {
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trace::set_agent_id(std::string&& value) {
  
  agent_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Trace.agent_id)
}
inline void Trace::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Trace.agent_id)
}
inline void Trace::set_agent_id(const char* value,
    size_t size) {
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Trace.agent_id)
}
inline std::string* Trace::_internal_mutable_agent_id() {
  
  return agent_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trace::release_agent_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Trace.agent_id)
  return agent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trace::set_allocated_agent_id(std::string* agent_id) {
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Trace.agent_id)
}
inline std::string* Trace::unsafe_arena_release_agent_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Trace.agent_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return agent_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trace::unsafe_arena_set_allocated_agent_id(
    std::string* agent_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agent_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Trace.agent_id)
}

// string agent_ip = 2[json_name = "agentIp"];
inline void Trace::clear_agent_ip() {
  agent_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trace::agent_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Trace.agent_ip)
  return _internal_agent_ip();
}
inline void Trace::set_agent_ip(const std::string& value) {
  _internal_set_agent_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Trace.agent_ip)
}
inline std::string* Trace::mutable_agent_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Trace.agent_ip)
  return _internal_mutable_agent_ip();
}
inline const std::string& Trace::_internal_agent_ip() const {
  return agent_ip_.Get();
}
inline void Trace::_internal_set_agent_ip(const std::string& value) {
  
  agent_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trace::set_agent_ip(std::string&& value) {
  
  agent_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Trace.agent_ip)
}
inline void Trace::set_agent_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Trace.agent_ip)
}
inline void Trace::set_agent_ip(const char* value,
    size_t size) {
  
  agent_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Trace.agent_ip)
}
inline std::string* Trace::_internal_mutable_agent_ip() {
  
  return agent_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trace::release_agent_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Trace.agent_ip)
  return agent_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trace::set_allocated_agent_ip(std::string* agent_ip) {
  if (agent_ip != nullptr) {
    
  } else {
    
  }
  agent_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Trace.agent_ip)
}
inline std::string* Trace::unsafe_arena_release_agent_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Trace.agent_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return agent_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trace::unsafe_arena_set_allocated_agent_ip(
    std::string* agent_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agent_ip != nullptr) {
    
  } else {
    
  }
  agent_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agent_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Trace.agent_ip)
}

// string target_ip = 3[json_name = "targetIp"];
inline void Trace::clear_target_ip() {
  target_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Trace::target_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Trace.target_ip)
  return _internal_target_ip();
}
inline void Trace::set_target_ip(const std::string& value) {
  _internal_set_target_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Trace.target_ip)
}
inline std::string* Trace::mutable_target_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Trace.target_ip)
  return _internal_mutable_target_ip();
}
inline const std::string& Trace::_internal_target_ip() const {
  return target_ip_.Get();
}
inline void Trace::_internal_set_target_ip(const std::string& value) {
  
  target_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Trace::set_target_ip(std::string&& value) {
  
  target_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.Trace.target_ip)
}
inline void Trace::set_target_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.Trace.target_ip)
}
inline void Trace::set_target_ip(const char* value,
    size_t size) {
  
  target_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.Trace.target_ip)
}
inline std::string* Trace::_internal_mutable_target_ip() {
  
  return target_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Trace::release_target_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.Trace.target_ip)
  return target_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Trace::set_allocated_target_ip(std::string* target_ip) {
  if (target_ip != nullptr) {
    
  } else {
    
  }
  target_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Trace.target_ip)
}
inline std::string* Trace::unsafe_arena_release_target_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.Trace.target_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Trace::unsafe_arena_set_allocated_target_ip(
    std::string* target_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_ip != nullptr) {
    
  } else {
    
  }
  target_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.Trace.target_ip)
}

// int32 hop_count = 4[json_name = "hopCount"];
inline void Trace::clear_hop_count() {
  hop_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trace::_internal_hop_count() const {
  return hop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trace::hop_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Trace.hop_count)
  return _internal_hop_count();
}
inline void Trace::_internal_set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hop_count_ = value;
}
inline void Trace::set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hop_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Trace.hop_count)
}

// repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5[json_name = "probes"];
inline int Trace::_internal_probes_size() const {
  return probes_.size();
}
inline int Trace::probes_size() const {
  return _internal_probes_size();
}
inline void Trace::clear_probes() {
  probes_.Clear();
}
inline ::kentik::synthetics::v202101beta1::TraceProbe* Trace::mutable_probes(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.Trace.probes)
  return probes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceProbe >*
Trace::mutable_probes() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.Trace.probes)
  return &probes_;
}
inline const ::kentik::synthetics::v202101beta1::TraceProbe& Trace::_internal_probes(int index) const {
  return probes_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::TraceProbe& Trace::probes(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Trace.probes)
  return _internal_probes(index);
}
inline ::kentik::synthetics::v202101beta1::TraceProbe* Trace::_internal_add_probes() {
  return probes_.Add();
}
inline ::kentik::synthetics::v202101beta1::TraceProbe* Trace::add_probes() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.Trace.probes)
  return _internal_add_probes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TraceProbe >&
Trace::probes() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.Trace.probes)
  return probes_;
}

// -------------------------------------------------------------------

// Stats

// int32 average = 1[json_name = "average"];
inline void Stats::clear_average() {
  average_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::_internal_average() const {
  return average_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::average() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Stats.average)
  return _internal_average();
}
inline void Stats::_internal_set_average(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_ = value;
}
inline void Stats::set_average(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Stats.average)
}

// int32 max = 2[json_name = "max"];
inline void Stats::clear_max() {
  max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::max() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Stats.max)
  return _internal_max();
}
inline void Stats::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_ = value;
}
inline void Stats::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Stats.max)
}

// int32 total = 3[json_name = "total"];
inline void Stats::clear_total() {
  total_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::_internal_total() const {
  return total_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::total() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.Stats.total)
  return _internal_total();
}
inline void Stats::_internal_set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_ = value;
}
inline void Stats::set_total(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.Stats.total)
}

// -------------------------------------------------------------------

// TracerouteResult

// .google.protobuf.Timestamp time = 1[json_name = "time"];
inline bool TracerouteResult::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool TracerouteResult::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TracerouteResult::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TracerouteResult::time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteResult.time)
  return _internal_time();
}
inline void TracerouteResult::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TracerouteResult.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TracerouteResult::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TracerouteResult::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TracerouteResult.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TracerouteResult::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TracerouteResult::mutable_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteResult.time)
  return _internal_mutable_time();
}
inline void TracerouteResult::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TracerouteResult.time)
}

// repeated .kentik.synthetics.v202101beta1.Trace traces = 2[json_name = "traces"];
inline int TracerouteResult::_internal_traces_size() const {
  return traces_.size();
}
inline int TracerouteResult::traces_size() const {
  return _internal_traces_size();
}
inline void TracerouteResult::clear_traces() {
  traces_.Clear();
}
inline ::kentik::synthetics::v202101beta1::Trace* TracerouteResult::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteResult.traces)
  return traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Trace >*
TracerouteResult::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.TracerouteResult.traces)
  return &traces_;
}
inline const ::kentik::synthetics::v202101beta1::Trace& TracerouteResult::_internal_traces(int index) const {
  return traces_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::Trace& TracerouteResult::traces(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteResult.traces)
  return _internal_traces(index);
}
inline ::kentik::synthetics::v202101beta1::Trace* TracerouteResult::_internal_add_traces() {
  return traces_.Add();
}
inline ::kentik::synthetics::v202101beta1::Trace* TracerouteResult::add_traces() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.TracerouteResult.traces)
  return _internal_add_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Trace >&
TracerouteResult::traces() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.TracerouteResult.traces)
  return traces_;
}

// int32 hop_count = 3[json_name = "hopCount"];
inline void TracerouteResult::clear_hop_count() {
  hop_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracerouteResult::_internal_hop_count() const {
  return hop_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracerouteResult::hop_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteResult.hop_count)
  return _internal_hop_count();
}
inline void TracerouteResult::_internal_set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hop_count_ = value;
}
inline void TracerouteResult::set_hop_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hop_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TracerouteResult.hop_count)
}

// .kentik.synthetics.v202101beta1.Stats count = 4[json_name = "count"];
inline bool TracerouteResult::_internal_has_count() const {
  return this != internal_default_instance() && count_ != nullptr;
}
inline bool TracerouteResult::has_count() const {
  return _internal_has_count();
}
inline void TracerouteResult::clear_count() {
  if (GetArena() == nullptr && count_ != nullptr) {
    delete count_;
  }
  count_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Stats& TracerouteResult::_internal_count() const {
  const ::kentik::synthetics::v202101beta1::Stats* p = count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Stats*>(
      &::kentik::synthetics::v202101beta1::_Stats_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Stats& TracerouteResult::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteResult.count)
  return _internal_count();
}
inline void TracerouteResult::unsafe_arena_set_allocated_count(
    ::kentik::synthetics::v202101beta1::Stats* count) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(count_);
  }
  count_ = count;
  if (count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TracerouteResult.count)
}
inline ::kentik::synthetics::v202101beta1::Stats* TracerouteResult::release_count() {
  auto temp = unsafe_arena_release_count();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Stats* TracerouteResult::unsafe_arena_release_count() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TracerouteResult.count)
  
  ::kentik::synthetics::v202101beta1::Stats* temp = count_;
  count_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Stats* TracerouteResult::_internal_mutable_count() {
  
  if (count_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Stats>(GetArena());
    count_ = p;
  }
  return count_;
}
inline ::kentik::synthetics::v202101beta1::Stats* TracerouteResult::mutable_count() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteResult.count)
  return _internal_mutable_count();
}
inline void TracerouteResult::set_allocated_count(::kentik::synthetics::v202101beta1::Stats* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete count_;
  }
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(count);
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    
  } else {
    
  }
  count_ = count;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TracerouteResult.count)
}

// .kentik.synthetics.v202101beta1.Stats distance = 5[json_name = "distance"];
inline bool TracerouteResult::_internal_has_distance() const {
  return this != internal_default_instance() && distance_ != nullptr;
}
inline bool TracerouteResult::has_distance() const {
  return _internal_has_distance();
}
inline void TracerouteResult::clear_distance() {
  if (GetArena() == nullptr && distance_ != nullptr) {
    delete distance_;
  }
  distance_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Stats& TracerouteResult::_internal_distance() const {
  const ::kentik::synthetics::v202101beta1::Stats* p = distance_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Stats*>(
      &::kentik::synthetics::v202101beta1::_Stats_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Stats& TracerouteResult::distance() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteResult.distance)
  return _internal_distance();
}
inline void TracerouteResult::unsafe_arena_set_allocated_distance(
    ::kentik::synthetics::v202101beta1::Stats* distance) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distance_);
  }
  distance_ = distance;
  if (distance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.TracerouteResult.distance)
}
inline ::kentik::synthetics::v202101beta1::Stats* TracerouteResult::release_distance() {
  auto temp = unsafe_arena_release_distance();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Stats* TracerouteResult::unsafe_arena_release_distance() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.TracerouteResult.distance)
  
  ::kentik::synthetics::v202101beta1::Stats* temp = distance_;
  distance_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Stats* TracerouteResult::_internal_mutable_distance() {
  
  if (distance_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Stats>(GetArena());
    distance_ = p;
  }
  return distance_;
}
inline ::kentik::synthetics::v202101beta1::Stats* TracerouteResult::mutable_distance() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.TracerouteResult.distance)
  return _internal_mutable_distance();
}
inline void TracerouteResult::set_allocated_distance(::kentik::synthetics::v202101beta1::Stats* distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete distance_;
  }
  if (distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(distance);
    if (message_arena != submessage_arena) {
      distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distance, submessage_arena);
    }
    
  } else {
    
  }
  distance_ = distance;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TracerouteResult.distance)
}

// -------------------------------------------------------------------

// TracerouteInfo

// bool is_trace_routes_truncated = 1[json_name = "isTraceRoutesTruncated"];
inline void TracerouteInfo::clear_is_trace_routes_truncated() {
  is_trace_routes_truncated_ = false;
}
inline bool TracerouteInfo::_internal_is_trace_routes_truncated() const {
  return is_trace_routes_truncated_;
}
inline bool TracerouteInfo::is_trace_routes_truncated() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteInfo.is_trace_routes_truncated)
  return _internal_is_trace_routes_truncated();
}
inline void TracerouteInfo::_internal_set_is_trace_routes_truncated(bool value) {
  
  is_trace_routes_truncated_ = value;
}
inline void TracerouteInfo::set_is_trace_routes_truncated(bool value) {
  _internal_set_is_trace_routes_truncated(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TracerouteInfo.is_trace_routes_truncated)
}

// int32 max_asn_path_count = 2[json_name = "maxAsnPathCount"];
inline void TracerouteInfo::clear_max_asn_path_count() {
  max_asn_path_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracerouteInfo::_internal_max_asn_path_count() const {
  return max_asn_path_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracerouteInfo::max_asn_path_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteInfo.max_asn_path_count)
  return _internal_max_asn_path_count();
}
inline void TracerouteInfo::_internal_set_max_asn_path_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_asn_path_count_ = value;
}
inline void TracerouteInfo::set_max_asn_path_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_asn_path_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TracerouteInfo.max_asn_path_count)
}

// int32 max_site_path_count = 3[json_name = "maxSitePathCount"];
inline void TracerouteInfo::clear_max_site_path_count() {
  max_site_path_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracerouteInfo::_internal_max_site_path_count() const {
  return max_site_path_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracerouteInfo::max_site_path_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteInfo.max_site_path_count)
  return _internal_max_site_path_count();
}
inline void TracerouteInfo::_internal_set_max_site_path_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_site_path_count_ = value;
}
inline void TracerouteInfo::set_max_site_path_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_site_path_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TracerouteInfo.max_site_path_count)
}

// int32 max_region_path_count = 4[json_name = "maxRegionPathCount"];
inline void TracerouteInfo::clear_max_region_path_count() {
  max_region_path_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracerouteInfo::_internal_max_region_path_count() const {
  return max_region_path_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TracerouteInfo::max_region_path_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.TracerouteInfo.max_region_path_count)
  return _internal_max_region_path_count();
}
inline void TracerouteInfo::_internal_set_max_region_path_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_region_path_count_ = value;
}
inline void TracerouteInfo::set_max_region_path_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_region_path_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.TracerouteInfo.max_region_path_count)
}

// -------------------------------------------------------------------

// GetHealthForTestsRequest

// repeated string ids = 1[json_name = "ids"];
inline int GetHealthForTestsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int GetHealthForTestsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void GetHealthForTestsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* GetHealthForTestsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& GetHealthForTestsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& GetHealthForTestsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
  return _internal_ids(index);
}
inline std::string* GetHealthForTestsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
  return ids_.Mutable(index);
}
inline void GetHealthForTestsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void GetHealthForTestsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void GetHealthForTestsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
}
inline void GetHealthForTestsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
}
inline std::string* GetHealthForTestsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void GetHealthForTestsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
}
inline void GetHealthForTestsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
}
inline void GetHealthForTestsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
}
inline void GetHealthForTestsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetHealthForTestsRequest::ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetHealthForTestsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids)
  return &ids_;
}

// .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
inline bool GetHealthForTestsRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool GetHealthForTestsRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetHealthForTestsRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetHealthForTestsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.start_time)
  return _internal_start_time();
}
inline void GetHealthForTestsRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetHealthForTestsRequest::release_start_time() {
  auto temp = unsafe_arena_release_start_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetHealthForTestsRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetHealthForTestsRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetHealthForTestsRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.start_time)
  return _internal_mutable_start_time();
}
inline void GetHealthForTestsRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
inline bool GetHealthForTestsRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool GetHealthForTestsRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetHealthForTestsRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetHealthForTestsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.end_time)
  return _internal_end_time();
}
inline void GetHealthForTestsRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetHealthForTestsRequest::release_end_time() {
  auto temp = unsafe_arena_release_end_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetHealthForTestsRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetHealthForTestsRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetHealthForTestsRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.end_time)
  return _internal_mutable_end_time();
}
inline void GetHealthForTestsRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.end_time)
}

// repeated string agent_ids = 4[json_name = "agentIds"];
inline int GetHealthForTestsRequest::_internal_agent_ids_size() const {
  return agent_ids_.size();
}
inline int GetHealthForTestsRequest::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void GetHealthForTestsRequest::clear_agent_ids() {
  agent_ids_.Clear();
}
inline std::string* GetHealthForTestsRequest::add_agent_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
  return _internal_add_agent_ids();
}
inline const std::string& GetHealthForTestsRequest::_internal_agent_ids(int index) const {
  return agent_ids_.Get(index);
}
inline const std::string& GetHealthForTestsRequest::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
  return _internal_agent_ids(index);
}
inline std::string* GetHealthForTestsRequest::mutable_agent_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
  return agent_ids_.Mutable(index);
}
inline void GetHealthForTestsRequest::set_agent_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
  agent_ids_.Mutable(index)->assign(value);
}
inline void GetHealthForTestsRequest::set_agent_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
  agent_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetHealthForTestsRequest::set_agent_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
}
inline void GetHealthForTestsRequest::set_agent_ids(int index, const char* value, size_t size) {
  agent_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
}
inline std::string* GetHealthForTestsRequest::_internal_add_agent_ids() {
  return agent_ids_.Add();
}
inline void GetHealthForTestsRequest::add_agent_ids(const std::string& value) {
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
}
inline void GetHealthForTestsRequest::add_agent_ids(std::string&& value) {
  agent_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
}
inline void GetHealthForTestsRequest::add_agent_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
}
inline void GetHealthForTestsRequest::add_agent_ids(const char* value, size_t size) {
  agent_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetHealthForTestsRequest::agent_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
  return agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetHealthForTestsRequest::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids)
  return &agent_ids_;
}

// repeated string task_ids = 5[json_name = "taskIds"];
inline int GetHealthForTestsRequest::_internal_task_ids_size() const {
  return task_ids_.size();
}
inline int GetHealthForTestsRequest::task_ids_size() const {
  return _internal_task_ids_size();
}
inline void GetHealthForTestsRequest::clear_task_ids() {
  task_ids_.Clear();
}
inline std::string* GetHealthForTestsRequest::add_task_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
  return _internal_add_task_ids();
}
inline const std::string& GetHealthForTestsRequest::_internal_task_ids(int index) const {
  return task_ids_.Get(index);
}
inline const std::string& GetHealthForTestsRequest::task_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
  return _internal_task_ids(index);
}
inline std::string* GetHealthForTestsRequest::mutable_task_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
  return task_ids_.Mutable(index);
}
inline void GetHealthForTestsRequest::set_task_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
  task_ids_.Mutable(index)->assign(value);
}
inline void GetHealthForTestsRequest::set_task_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
  task_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetHealthForTestsRequest::set_task_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
}
inline void GetHealthForTestsRequest::set_task_ids(int index, const char* value, size_t size) {
  task_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
}
inline std::string* GetHealthForTestsRequest::_internal_add_task_ids() {
  return task_ids_.Add();
}
inline void GetHealthForTestsRequest::add_task_ids(const std::string& value) {
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
}
inline void GetHealthForTestsRequest::add_task_ids(std::string&& value) {
  task_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
}
inline void GetHealthForTestsRequest::add_task_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
}
inline void GetHealthForTestsRequest::add_task_ids(const char* value, size_t size) {
  task_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetHealthForTestsRequest::task_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
  return task_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetHealthForTestsRequest::mutable_task_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids)
  return &task_ids_;
}

// bool augment = 6[json_name = "augment"];
inline void GetHealthForTestsRequest::clear_augment() {
  augment_ = false;
}
inline bool GetHealthForTestsRequest::_internal_augment() const {
  return augment_;
}
inline bool GetHealthForTestsRequest::augment() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.augment)
  return _internal_augment();
}
inline void GetHealthForTestsRequest::_internal_set_augment(bool value) {
  
  augment_ = value;
}
inline void GetHealthForTestsRequest::set_augment(bool value) {
  _internal_set_augment(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetHealthForTestsRequest.augment)
}

// -------------------------------------------------------------------

// GetHealthForTestsResponse

// repeated .kentik.synthetics.v202101beta1.TestHealth health = 1[json_name = "health"];
inline int GetHealthForTestsResponse::_internal_health_size() const {
  return health_.size();
}
inline int GetHealthForTestsResponse::health_size() const {
  return _internal_health_size();
}
inline void GetHealthForTestsResponse::clear_health() {
  health_.Clear();
}
inline ::kentik::synthetics::v202101beta1::TestHealth* GetHealthForTestsResponse::mutable_health(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetHealthForTestsResponse.health)
  return health_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TestHealth >*
GetHealthForTestsResponse::mutable_health() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.GetHealthForTestsResponse.health)
  return &health_;
}
inline const ::kentik::synthetics::v202101beta1::TestHealth& GetHealthForTestsResponse::_internal_health(int index) const {
  return health_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::TestHealth& GetHealthForTestsResponse::health(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetHealthForTestsResponse.health)
  return _internal_health(index);
}
inline ::kentik::synthetics::v202101beta1::TestHealth* GetHealthForTestsResponse::_internal_add_health() {
  return health_.Add();
}
inline ::kentik::synthetics::v202101beta1::TestHealth* GetHealthForTestsResponse::add_health() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetHealthForTestsResponse.health)
  return _internal_add_health();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TestHealth >&
GetHealthForTestsResponse::health() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.GetHealthForTestsResponse.health)
  return health_;
}

// -------------------------------------------------------------------

// GetTraceForTestRequest

// string id = 1[json_name = "id"];
inline void GetTraceForTestRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetTraceForTestRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
  return _internal_id();
}
inline void GetTraceForTestRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
}
inline std::string* GetTraceForTestRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetTraceForTestRequest::_internal_id() const {
  return id_.Get();
}
inline void GetTraceForTestRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetTraceForTestRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
}
inline void GetTraceForTestRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
}
inline void GetTraceForTestRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
}
inline std::string* GetTraceForTestRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetTraceForTestRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTraceForTestRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
}
inline std::string* GetTraceForTestRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetTraceForTestRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestRequest.id)
}

// .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
inline bool GetTraceForTestRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool GetTraceForTestRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceForTestRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceForTestRequest::start_time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTraceForTestRequest.start_time)
  return _internal_start_time();
}
inline void GetTraceForTestRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::release_start_time() {
  auto temp = unsafe_arena_release_start_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetTraceForTestRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTraceForTestRequest.start_time)
  return _internal_mutable_start_time();
}
inline void GetTraceForTestRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
inline bool GetTraceForTestRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool GetTraceForTestRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceForTestRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceForTestRequest::end_time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTraceForTestRequest.end_time)
  return _internal_end_time();
}
inline void GetTraceForTestRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::release_end_time() {
  auto temp = unsafe_arena_release_end_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetTraceForTestRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTraceForTestRequest.end_time)
  return _internal_mutable_end_time();
}
inline void GetTraceForTestRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestRequest.end_time)
}

// repeated string agent_ids = 4[json_name = "agentIds"];
inline int GetTraceForTestRequest::_internal_agent_ids_size() const {
  return agent_ids_.size();
}
inline int GetTraceForTestRequest::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void GetTraceForTestRequest::clear_agent_ids() {
  agent_ids_.Clear();
}
inline std::string* GetTraceForTestRequest::add_agent_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
  return _internal_add_agent_ids();
}
inline const std::string& GetTraceForTestRequest::_internal_agent_ids(int index) const {
  return agent_ids_.Get(index);
}
inline const std::string& GetTraceForTestRequest::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
  return _internal_agent_ids(index);
}
inline std::string* GetTraceForTestRequest::mutable_agent_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
  return agent_ids_.Mutable(index);
}
inline void GetTraceForTestRequest::set_agent_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
  agent_ids_.Mutable(index)->assign(value);
}
inline void GetTraceForTestRequest::set_agent_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
  agent_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetTraceForTestRequest::set_agent_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
}
inline void GetTraceForTestRequest::set_agent_ids(int index, const char* value, size_t size) {
  agent_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
}
inline std::string* GetTraceForTestRequest::_internal_add_agent_ids() {
  return agent_ids_.Add();
}
inline void GetTraceForTestRequest::add_agent_ids(const std::string& value) {
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
}
inline void GetTraceForTestRequest::add_agent_ids(std::string&& value) {
  agent_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
}
inline void GetTraceForTestRequest::add_agent_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
}
inline void GetTraceForTestRequest::add_agent_ids(const char* value, size_t size) {
  agent_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTraceForTestRequest::agent_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
  return agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTraceForTestRequest::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids)
  return &agent_ids_;
}

// repeated string target_ips = 5[json_name = "targetIps"];
inline int GetTraceForTestRequest::_internal_target_ips_size() const {
  return target_ips_.size();
}
inline int GetTraceForTestRequest::target_ips_size() const {
  return _internal_target_ips_size();
}
inline void GetTraceForTestRequest::clear_target_ips() {
  target_ips_.Clear();
}
inline std::string* GetTraceForTestRequest::add_target_ips() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
  return _internal_add_target_ips();
}
inline const std::string& GetTraceForTestRequest::_internal_target_ips(int index) const {
  return target_ips_.Get(index);
}
inline const std::string& GetTraceForTestRequest::target_ips(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
  return _internal_target_ips(index);
}
inline std::string* GetTraceForTestRequest::mutable_target_ips(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
  return target_ips_.Mutable(index);
}
inline void GetTraceForTestRequest::set_target_ips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
  target_ips_.Mutable(index)->assign(value);
}
inline void GetTraceForTestRequest::set_target_ips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
  target_ips_.Mutable(index)->assign(std::move(value));
}
inline void GetTraceForTestRequest::set_target_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
}
inline void GetTraceForTestRequest::set_target_ips(int index, const char* value, size_t size) {
  target_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
}
inline std::string* GetTraceForTestRequest::_internal_add_target_ips() {
  return target_ips_.Add();
}
inline void GetTraceForTestRequest::add_target_ips(const std::string& value) {
  target_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
}
inline void GetTraceForTestRequest::add_target_ips(std::string&& value) {
  target_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
}
inline void GetTraceForTestRequest::add_target_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
}
inline void GetTraceForTestRequest::add_target_ips(const char* value, size_t size) {
  target_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTraceForTestRequest::target_ips() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
  return target_ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTraceForTestRequest::mutable_target_ips() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips)
  return &target_ips_;
}

// -------------------------------------------------------------------

// GetTraceForTestResponse

// .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1[json_name = "lookups"];
inline bool GetTraceForTestResponse::_internal_has_lookups() const {
  return this != internal_default_instance() && lookups_ != nullptr;
}
inline bool GetTraceForTestResponse::has_lookups() const {
  return _internal_has_lookups();
}
inline void GetTraceForTestResponse::clear_lookups() {
  if (GetArena() == nullptr && lookups_ != nullptr) {
    delete lookups_;
  }
  lookups_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::TracerouteLookup& GetTraceForTestResponse::_internal_lookups() const {
  const ::kentik::synthetics::v202101beta1::TracerouteLookup* p = lookups_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::TracerouteLookup*>(
      &::kentik::synthetics::v202101beta1::_TracerouteLookup_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::TracerouteLookup& GetTraceForTestResponse::lookups() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTraceForTestResponse.lookups)
  return _internal_lookups();
}
inline void GetTraceForTestResponse::unsafe_arena_set_allocated_lookups(
    ::kentik::synthetics::v202101beta1::TracerouteLookup* lookups) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lookups_);
  }
  lookups_ = lookups;
  if (lookups) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestResponse.lookups)
}
inline ::kentik::synthetics::v202101beta1::TracerouteLookup* GetTraceForTestResponse::release_lookups() {
  auto temp = unsafe_arena_release_lookups();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TracerouteLookup* GetTraceForTestResponse::unsafe_arena_release_lookups() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetTraceForTestResponse.lookups)
  
  ::kentik::synthetics::v202101beta1::TracerouteLookup* temp = lookups_;
  lookups_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TracerouteLookup* GetTraceForTestResponse::_internal_mutable_lookups() {
  
  if (lookups_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::TracerouteLookup>(GetArena());
    lookups_ = p;
  }
  return lookups_;
}
inline ::kentik::synthetics::v202101beta1::TracerouteLookup* GetTraceForTestResponse::mutable_lookups() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTraceForTestResponse.lookups)
  return _internal_mutable_lookups();
}
inline void GetTraceForTestResponse::set_allocated_lookups(::kentik::synthetics::v202101beta1::TracerouteLookup* lookups) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete lookups_;
  }
  if (lookups) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lookups);
    if (message_arena != submessage_arena) {
      lookups = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lookups, submessage_arena);
    }
    
  } else {
    
  }
  lookups_ = lookups;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestResponse.lookups)
}

// repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2[json_name = "traceRoutes"];
inline int GetTraceForTestResponse::_internal_trace_routes_size() const {
  return trace_routes_.size();
}
inline int GetTraceForTestResponse::trace_routes_size() const {
  return _internal_trace_routes_size();
}
inline void GetTraceForTestResponse::clear_trace_routes() {
  trace_routes_.Clear();
}
inline ::kentik::synthetics::v202101beta1::TracerouteResult* GetTraceForTestResponse::mutable_trace_routes(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes)
  return trace_routes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TracerouteResult >*
GetTraceForTestResponse::mutable_trace_routes() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes)
  return &trace_routes_;
}
inline const ::kentik::synthetics::v202101beta1::TracerouteResult& GetTraceForTestResponse::_internal_trace_routes(int index) const {
  return trace_routes_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::TracerouteResult& GetTraceForTestResponse::trace_routes(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes)
  return _internal_trace_routes(index);
}
inline ::kentik::synthetics::v202101beta1::TracerouteResult* GetTraceForTestResponse::_internal_add_trace_routes() {
  return trace_routes_.Add();
}
inline ::kentik::synthetics::v202101beta1::TracerouteResult* GetTraceForTestResponse::add_trace_routes() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes)
  return _internal_add_trace_routes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::TracerouteResult >&
GetTraceForTestResponse::trace_routes() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes)
  return trace_routes_;
}

// .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3[json_name = "traceRoutesInfo"];
inline bool GetTraceForTestResponse::_internal_has_trace_routes_info() const {
  return this != internal_default_instance() && trace_routes_info_ != nullptr;
}
inline bool GetTraceForTestResponse::has_trace_routes_info() const {
  return _internal_has_trace_routes_info();
}
inline void GetTraceForTestResponse::clear_trace_routes_info() {
  if (GetArena() == nullptr && trace_routes_info_ != nullptr) {
    delete trace_routes_info_;
  }
  trace_routes_info_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::TracerouteInfo& GetTraceForTestResponse::_internal_trace_routes_info() const {
  const ::kentik::synthetics::v202101beta1::TracerouteInfo* p = trace_routes_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::TracerouteInfo*>(
      &::kentik::synthetics::v202101beta1::_TracerouteInfo_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::TracerouteInfo& GetTraceForTestResponse::trace_routes_info() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes_info)
  return _internal_trace_routes_info();
}
inline void GetTraceForTestResponse::unsafe_arena_set_allocated_trace_routes_info(
    ::kentik::synthetics::v202101beta1::TracerouteInfo* trace_routes_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_routes_info_);
  }
  trace_routes_info_ = trace_routes_info;
  if (trace_routes_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes_info)
}
inline ::kentik::synthetics::v202101beta1::TracerouteInfo* GetTraceForTestResponse::release_trace_routes_info() {
  auto temp = unsafe_arena_release_trace_routes_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TracerouteInfo* GetTraceForTestResponse::unsafe_arena_release_trace_routes_info() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes_info)
  
  ::kentik::synthetics::v202101beta1::TracerouteInfo* temp = trace_routes_info_;
  trace_routes_info_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::TracerouteInfo* GetTraceForTestResponse::_internal_mutable_trace_routes_info() {
  
  if (trace_routes_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::TracerouteInfo>(GetArena());
    trace_routes_info_ = p;
  }
  return trace_routes_info_;
}
inline ::kentik::synthetics::v202101beta1::TracerouteInfo* GetTraceForTestResponse::mutable_trace_routes_info() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes_info)
  return _internal_mutable_trace_routes_info();
}
inline void GetTraceForTestResponse::set_allocated_trace_routes_info(::kentik::synthetics::v202101beta1::TracerouteInfo* trace_routes_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trace_routes_info_;
  }
  if (trace_routes_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trace_routes_info);
    if (message_arena != submessage_arena) {
      trace_routes_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace_routes_info, submessage_arena);
    }
    
  } else {
    
  }
  trace_routes_info_ = trace_routes_info;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetTraceForTestResponse.trace_routes_info)
}

// -------------------------------------------------------------------

// ListAgentsRequest

// -------------------------------------------------------------------

// ListAgentsResponse

// repeated .kentik.synthetics.v202101beta1.Agent agents = 1[json_name = "agents"];
inline int ListAgentsResponse::_internal_agents_size() const {
  return agents_.size();
}
inline int ListAgentsResponse::agents_size() const {
  return _internal_agents_size();
}
inline void ListAgentsResponse::clear_agents() {
  agents_.Clear();
}
inline ::kentik::synthetics::v202101beta1::Agent* ListAgentsResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.ListAgentsResponse.agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent >*
ListAgentsResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.ListAgentsResponse.agents)
  return &agents_;
}
inline const ::kentik::synthetics::v202101beta1::Agent& ListAgentsResponse::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::Agent& ListAgentsResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ListAgentsResponse.agents)
  return _internal_agents(index);
}
inline ::kentik::synthetics::v202101beta1::Agent* ListAgentsResponse::_internal_add_agents() {
  return agents_.Add();
}
inline ::kentik::synthetics::v202101beta1::Agent* ListAgentsResponse::add_agents() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.ListAgentsResponse.agents)
  return _internal_add_agents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Agent >&
ListAgentsResponse::agents() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.ListAgentsResponse.agents)
  return agents_;
}

// uint32 invalid_agents_count = 2[json_name = "invalidAgentsCount"];
inline void ListAgentsResponse::clear_invalid_agents_count() {
  invalid_agents_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAgentsResponse::_internal_invalid_agents_count() const {
  return invalid_agents_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAgentsResponse::invalid_agents_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ListAgentsResponse.invalid_agents_count)
  return _internal_invalid_agents_count();
}
inline void ListAgentsResponse::_internal_set_invalid_agents_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_agents_count_ = value;
}
inline void ListAgentsResponse::set_invalid_agents_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_agents_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ListAgentsResponse.invalid_agents_count)
}

// -------------------------------------------------------------------

// GetAgentRequest

// string id = 1[json_name = "id"];
inline void GetAgentRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAgentRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetAgentRequest.id)
  return _internal_id();
}
inline void GetAgentRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetAgentRequest.id)
}
inline std::string* GetAgentRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetAgentRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetAgentRequest::_internal_id() const {
  return id_.Get();
}
inline void GetAgentRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAgentRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.GetAgentRequest.id)
}
inline void GetAgentRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GetAgentRequest.id)
}
inline void GetAgentRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GetAgentRequest.id)
}
inline std::string* GetAgentRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAgentRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetAgentRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAgentRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetAgentRequest.id)
}
inline std::string* GetAgentRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.GetAgentRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetAgentRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetAgentRequest.id)
}

// -------------------------------------------------------------------

// GetAgentResponse

// .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
inline bool GetAgentResponse::_internal_has_agent() const {
  return this != internal_default_instance() && agent_ != nullptr;
}
inline bool GetAgentResponse::has_agent() const {
  return _internal_has_agent();
}
inline void GetAgentResponse::clear_agent() {
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Agent& GetAgentResponse::_internal_agent() const {
  const ::kentik::synthetics::v202101beta1::Agent* p = agent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Agent*>(
      &::kentik::synthetics::v202101beta1::_Agent_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Agent& GetAgentResponse::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetAgentResponse.agent)
  return _internal_agent();
}
inline void GetAgentResponse::unsafe_arena_set_allocated_agent(
    ::kentik::synthetics::v202101beta1::Agent* agent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_);
  }
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetAgentResponse.agent)
}
inline ::kentik::synthetics::v202101beta1::Agent* GetAgentResponse::release_agent() {
  auto temp = unsafe_arena_release_agent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* GetAgentResponse::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetAgentResponse.agent)
  
  ::kentik::synthetics::v202101beta1::Agent* temp = agent_;
  agent_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* GetAgentResponse::_internal_mutable_agent() {
  
  if (agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Agent>(GetArena());
    agent_ = p;
  }
  return agent_;
}
inline ::kentik::synthetics::v202101beta1::Agent* GetAgentResponse::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetAgentResponse.agent)
  return _internal_mutable_agent();
}
inline void GetAgentResponse::set_allocated_agent(::kentik::synthetics::v202101beta1::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agent_;
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetAgentResponse.agent)
}

// -------------------------------------------------------------------

// PatchAgentRequest

// .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
inline bool PatchAgentRequest::_internal_has_agent() const {
  return this != internal_default_instance() && agent_ != nullptr;
}
inline bool PatchAgentRequest::has_agent() const {
  return _internal_has_agent();
}
inline void PatchAgentRequest::clear_agent() {
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Agent& PatchAgentRequest::_internal_agent() const {
  const ::kentik::synthetics::v202101beta1::Agent* p = agent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Agent*>(
      &::kentik::synthetics::v202101beta1::_Agent_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Agent& PatchAgentRequest::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PatchAgentRequest.agent)
  return _internal_agent();
}
inline void PatchAgentRequest::unsafe_arena_set_allocated_agent(
    ::kentik::synthetics::v202101beta1::Agent* agent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_);
  }
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.PatchAgentRequest.agent)
}
inline ::kentik::synthetics::v202101beta1::Agent* PatchAgentRequest::release_agent() {
  auto temp = unsafe_arena_release_agent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* PatchAgentRequest::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.PatchAgentRequest.agent)
  
  ::kentik::synthetics::v202101beta1::Agent* temp = agent_;
  agent_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* PatchAgentRequest::_internal_mutable_agent() {
  
  if (agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Agent>(GetArena());
    agent_ = p;
  }
  return agent_;
}
inline ::kentik::synthetics::v202101beta1::Agent* PatchAgentRequest::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.PatchAgentRequest.agent)
  return _internal_mutable_agent();
}
inline void PatchAgentRequest::set_allocated_agent(::kentik::synthetics::v202101beta1::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agent_;
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.PatchAgentRequest.agent)
}

// .google.protobuf.FieldMask mask = 2[json_name = "mask"];
inline bool PatchAgentRequest::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool PatchAgentRequest::has_mask() const {
  return _internal_has_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& PatchAgentRequest::_internal_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& PatchAgentRequest::mask() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PatchAgentRequest.mask)
  return _internal_mask();
}
inline void PatchAgentRequest::unsafe_arena_set_allocated_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.PatchAgentRequest.mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchAgentRequest::release_mask() {
  auto temp = unsafe_arena_release_mask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchAgentRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.PatchAgentRequest.mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchAgentRequest::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchAgentRequest::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.PatchAgentRequest.mask)
  return _internal_mutable_mask();
}
inline void PatchAgentRequest::set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask)->GetArena();
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.PatchAgentRequest.mask)
}

// -------------------------------------------------------------------

// PatchAgentResponse

// .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
inline bool PatchAgentResponse::_internal_has_agent() const {
  return this != internal_default_instance() && agent_ != nullptr;
}
inline bool PatchAgentResponse::has_agent() const {
  return _internal_has_agent();
}
inline void PatchAgentResponse::clear_agent() {
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Agent& PatchAgentResponse::_internal_agent() const {
  const ::kentik::synthetics::v202101beta1::Agent* p = agent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Agent*>(
      &::kentik::synthetics::v202101beta1::_Agent_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Agent& PatchAgentResponse::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PatchAgentResponse.agent)
  return _internal_agent();
}
inline void PatchAgentResponse::unsafe_arena_set_allocated_agent(
    ::kentik::synthetics::v202101beta1::Agent* agent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_);
  }
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.PatchAgentResponse.agent)
}
inline ::kentik::synthetics::v202101beta1::Agent* PatchAgentResponse::release_agent() {
  auto temp = unsafe_arena_release_agent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* PatchAgentResponse::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.PatchAgentResponse.agent)
  
  ::kentik::synthetics::v202101beta1::Agent* temp = agent_;
  agent_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Agent* PatchAgentResponse::_internal_mutable_agent() {
  
  if (agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Agent>(GetArena());
    agent_ = p;
  }
  return agent_;
}
inline ::kentik::synthetics::v202101beta1::Agent* PatchAgentResponse::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.PatchAgentResponse.agent)
  return _internal_mutable_agent();
}
inline void PatchAgentResponse::set_allocated_agent(::kentik::synthetics::v202101beta1::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agent_;
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.PatchAgentResponse.agent)
}

// -------------------------------------------------------------------

// DeleteAgentRequest

// string id = 1[json_name = "id"];
inline void DeleteAgentRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteAgentRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
  return _internal_id();
}
inline void DeleteAgentRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
}
inline std::string* DeleteAgentRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteAgentRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteAgentRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteAgentRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
}
inline void DeleteAgentRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
}
inline void DeleteAgentRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
}
inline std::string* DeleteAgentRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteAgentRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteAgentRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
}
inline std::string* DeleteAgentRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteAgentRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.DeleteAgentRequest.id)
}

// -------------------------------------------------------------------

// DeleteAgentResponse

// -------------------------------------------------------------------

// ListTestsRequest

// bool preset = 1[json_name = "preset"];
inline void ListTestsRequest::clear_preset() {
  preset_ = false;
}
inline bool ListTestsRequest::_internal_preset() const {
  return preset_;
}
inline bool ListTestsRequest::preset() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ListTestsRequest.preset)
  return _internal_preset();
}
inline void ListTestsRequest::_internal_set_preset(bool value) {
  
  preset_ = value;
}
inline void ListTestsRequest::set_preset(bool value) {
  _internal_set_preset(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ListTestsRequest.preset)
}

// -------------------------------------------------------------------

// ListTestsResponse

// repeated .kentik.synthetics.v202101beta1.Test tests = 1[json_name = "tests"];
inline int ListTestsResponse::_internal_tests_size() const {
  return tests_.size();
}
inline int ListTestsResponse::tests_size() const {
  return _internal_tests_size();
}
inline void ListTestsResponse::clear_tests() {
  tests_.Clear();
}
inline ::kentik::synthetics::v202101beta1::Test* ListTestsResponse::mutable_tests(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.ListTestsResponse.tests)
  return tests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Test >*
ListTestsResponse::mutable_tests() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202101beta1.ListTestsResponse.tests)
  return &tests_;
}
inline const ::kentik::synthetics::v202101beta1::Test& ListTestsResponse::_internal_tests(int index) const {
  return tests_.Get(index);
}
inline const ::kentik::synthetics::v202101beta1::Test& ListTestsResponse::tests(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ListTestsResponse.tests)
  return _internal_tests(index);
}
inline ::kentik::synthetics::v202101beta1::Test* ListTestsResponse::_internal_add_tests() {
  return tests_.Add();
}
inline ::kentik::synthetics::v202101beta1::Test* ListTestsResponse::add_tests() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202101beta1.ListTestsResponse.tests)
  return _internal_add_tests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202101beta1::Test >&
ListTestsResponse::tests() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202101beta1.ListTestsResponse.tests)
  return tests_;
}

// uint32 invalid_tests_count = 2[json_name = "invalidTestsCount"];
inline void ListTestsResponse::clear_invalid_tests_count() {
  invalid_tests_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTestsResponse::_internal_invalid_tests_count() const {
  return invalid_tests_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTestsResponse::invalid_tests_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.ListTestsResponse.invalid_tests_count)
  return _internal_invalid_tests_count();
}
inline void ListTestsResponse::_internal_set_invalid_tests_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_tests_count_ = value;
}
inline void ListTestsResponse::set_invalid_tests_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_tests_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.ListTestsResponse.invalid_tests_count)
}

// -------------------------------------------------------------------

// CreateTestRequest

// .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
inline bool CreateTestRequest::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool CreateTestRequest::has_test() const {
  return _internal_has_test();
}
inline void CreateTestRequest::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Test& CreateTestRequest::_internal_test() const {
  const ::kentik::synthetics::v202101beta1::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Test*>(
      &::kentik::synthetics::v202101beta1::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Test& CreateTestRequest::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.CreateTestRequest.test)
  return _internal_test();
}
inline void CreateTestRequest::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202101beta1::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.CreateTestRequest.test)
}
inline ::kentik::synthetics::v202101beta1::Test* CreateTestRequest::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* CreateTestRequest::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.CreateTestRequest.test)
  
  ::kentik::synthetics::v202101beta1::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* CreateTestRequest::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202101beta1::Test* CreateTestRequest::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.CreateTestRequest.test)
  return _internal_mutable_test();
}
inline void CreateTestRequest::set_allocated_test(::kentik::synthetics::v202101beta1::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.CreateTestRequest.test)
}

// -------------------------------------------------------------------

// CreateTestResponse

// .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
inline bool CreateTestResponse::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool CreateTestResponse::has_test() const {
  return _internal_has_test();
}
inline void CreateTestResponse::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Test& CreateTestResponse::_internal_test() const {
  const ::kentik::synthetics::v202101beta1::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Test*>(
      &::kentik::synthetics::v202101beta1::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Test& CreateTestResponse::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.CreateTestResponse.test)
  return _internal_test();
}
inline void CreateTestResponse::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202101beta1::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.CreateTestResponse.test)
}
inline ::kentik::synthetics::v202101beta1::Test* CreateTestResponse::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* CreateTestResponse::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.CreateTestResponse.test)
  
  ::kentik::synthetics::v202101beta1::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* CreateTestResponse::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202101beta1::Test* CreateTestResponse::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.CreateTestResponse.test)
  return _internal_mutable_test();
}
inline void CreateTestResponse::set_allocated_test(::kentik::synthetics::v202101beta1::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.CreateTestResponse.test)
}

// -------------------------------------------------------------------

// GetTestRequest

// string id = 1[json_name = "id"];
inline void GetTestRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetTestRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTestRequest.id)
  return _internal_id();
}
inline void GetTestRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.GetTestRequest.id)
}
inline std::string* GetTestRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTestRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetTestRequest::_internal_id() const {
  return id_.Get();
}
inline void GetTestRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetTestRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.GetTestRequest.id)
}
inline void GetTestRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.GetTestRequest.id)
}
inline void GetTestRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.GetTestRequest.id)
}
inline std::string* GetTestRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetTestRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetTestRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTestRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetTestRequest.id)
}
inline std::string* GetTestRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.GetTestRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetTestRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetTestRequest.id)
}

// -------------------------------------------------------------------

// GetTestResponse

// .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
inline bool GetTestResponse::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool GetTestResponse::has_test() const {
  return _internal_has_test();
}
inline void GetTestResponse::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Test& GetTestResponse::_internal_test() const {
  const ::kentik::synthetics::v202101beta1::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Test*>(
      &::kentik::synthetics::v202101beta1::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Test& GetTestResponse::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.GetTestResponse.test)
  return _internal_test();
}
inline void GetTestResponse::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202101beta1::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.GetTestResponse.test)
}
inline ::kentik::synthetics::v202101beta1::Test* GetTestResponse::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* GetTestResponse::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.GetTestResponse.test)
  
  ::kentik::synthetics::v202101beta1::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* GetTestResponse::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202101beta1::Test* GetTestResponse::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.GetTestResponse.test)
  return _internal_mutable_test();
}
inline void GetTestResponse::set_allocated_test(::kentik::synthetics::v202101beta1::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.GetTestResponse.test)
}

// -------------------------------------------------------------------

// SetTestStatusRequest

// string id = 1[json_name = "id"];
inline void SetTestStatusRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetTestStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
  return _internal_id();
}
inline void SetTestStatusRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
}
inline std::string* SetTestStatusRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
  return _internal_mutable_id();
}
inline const std::string& SetTestStatusRequest::_internal_id() const {
  return id_.Get();
}
inline void SetTestStatusRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetTestStatusRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
}
inline void SetTestStatusRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
}
inline void SetTestStatusRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
}
inline std::string* SetTestStatusRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetTestStatusRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTestStatusRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
}
inline std::string* SetTestStatusRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetTestStatusRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.SetTestStatusRequest.id)
}

// .kentik.synthetics.v202101beta1.TestStatus status = 2[json_name = "status"];
inline void SetTestStatusRequest::clear_status() {
  status_ = 0;
}
inline ::kentik::synthetics::v202101beta1::TestStatus SetTestStatusRequest::_internal_status() const {
  return static_cast< ::kentik::synthetics::v202101beta1::TestStatus >(status_);
}
inline ::kentik::synthetics::v202101beta1::TestStatus SetTestStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.SetTestStatusRequest.status)
  return _internal_status();
}
inline void SetTestStatusRequest::_internal_set_status(::kentik::synthetics::v202101beta1::TestStatus value) {
  
  status_ = value;
}
inline void SetTestStatusRequest::set_status(::kentik::synthetics::v202101beta1::TestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.SetTestStatusRequest.status)
}

// -------------------------------------------------------------------

// SetTestStatusResponse

// -------------------------------------------------------------------

// PatchTestRequest

// .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
inline bool PatchTestRequest::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool PatchTestRequest::has_test() const {
  return _internal_has_test();
}
inline void PatchTestRequest::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Test& PatchTestRequest::_internal_test() const {
  const ::kentik::synthetics::v202101beta1::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Test*>(
      &::kentik::synthetics::v202101beta1::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Test& PatchTestRequest::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PatchTestRequest.test)
  return _internal_test();
}
inline void PatchTestRequest::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202101beta1::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.PatchTestRequest.test)
}
inline ::kentik::synthetics::v202101beta1::Test* PatchTestRequest::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* PatchTestRequest::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.PatchTestRequest.test)
  
  ::kentik::synthetics::v202101beta1::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* PatchTestRequest::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202101beta1::Test* PatchTestRequest::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.PatchTestRequest.test)
  return _internal_mutable_test();
}
inline void PatchTestRequest::set_allocated_test(::kentik::synthetics::v202101beta1::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.PatchTestRequest.test)
}

// .google.protobuf.FieldMask mask = 2[json_name = "mask"];
inline bool PatchTestRequest::_internal_has_mask() const {
  return this != internal_default_instance() && mask_ != nullptr;
}
inline bool PatchTestRequest::has_mask() const {
  return _internal_has_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& PatchTestRequest::_internal_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& PatchTestRequest::mask() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PatchTestRequest.mask)
  return _internal_mask();
}
inline void PatchTestRequest::unsafe_arena_set_allocated_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  mask_ = mask;
  if (mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.PatchTestRequest.mask)
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchTestRequest::release_mask() {
  auto temp = unsafe_arena_release_mask();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchTestRequest::unsafe_arena_release_mask() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.PatchTestRequest.mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = mask_;
  mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchTestRequest::_internal_mutable_mask() {
  
  if (mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArena());
    mask_ = p;
  }
  return mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* PatchTestRequest::mutable_mask() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.PatchTestRequest.mask)
  return _internal_mutable_mask();
}
inline void PatchTestRequest::set_allocated_mask(PROTOBUF_NAMESPACE_ID::FieldMask* mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask_);
  }
  if (mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mask)->GetArena();
    if (message_arena != submessage_arena) {
      mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mask, submessage_arena);
    }
    
  } else {
    
  }
  mask_ = mask;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.PatchTestRequest.mask)
}

// -------------------------------------------------------------------

// PatchTestResponse

// .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
inline bool PatchTestResponse::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool PatchTestResponse::has_test() const {
  return _internal_has_test();
}
inline void PatchTestResponse::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202101beta1::Test& PatchTestResponse::_internal_test() const {
  const ::kentik::synthetics::v202101beta1::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202101beta1::Test*>(
      &::kentik::synthetics::v202101beta1::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202101beta1::Test& PatchTestResponse::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.PatchTestResponse.test)
  return _internal_test();
}
inline void PatchTestResponse::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202101beta1::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.PatchTestResponse.test)
}
inline ::kentik::synthetics::v202101beta1::Test* PatchTestResponse::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* PatchTestResponse::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.PatchTestResponse.test)
  
  ::kentik::synthetics::v202101beta1::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202101beta1::Test* PatchTestResponse::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202101beta1::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202101beta1::Test* PatchTestResponse::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.PatchTestResponse.test)
  return _internal_mutable_test();
}
inline void PatchTestResponse::set_allocated_test(::kentik::synthetics::v202101beta1::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.PatchTestResponse.test)
}

// -------------------------------------------------------------------

// DeleteTestRequest

// string id = 1[json_name = "id"];
inline void DeleteTestRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteTestRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
  return _internal_id();
}
inline void DeleteTestRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
}
inline std::string* DeleteTestRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteTestRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteTestRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteTestRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
}
inline void DeleteTestRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
}
inline void DeleteTestRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
}
inline std::string* DeleteTestRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteTestRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteTestRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
}
inline std::string* DeleteTestRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteTestRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202101beta1.DeleteTestRequest.id)
}

// -------------------------------------------------------------------

// DeleteTestResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202101beta1
}  // namespace synthetics
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::synthetics::v202101beta1::ImplementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202101beta1::ImplementType>() {
  return ::kentik::synthetics::v202101beta1::ImplementType_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202101beta1::IPFamily> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202101beta1::IPFamily>() {
  return ::kentik::synthetics::v202101beta1::IPFamily_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202101beta1::TestStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202101beta1::TestStatus>() {
  return ::kentik::synthetics::v202101beta1::TestStatus_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202101beta1::AgentStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202101beta1::AgentStatus>() {
  return ::kentik::synthetics::v202101beta1::AgentStatus_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202101beta1::TaskState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202101beta1::TaskState>() {
  return ::kentik::synthetics::v202101beta1::TaskState_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202101beta1::DNSRecord> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202101beta1::DNSRecord>() {
  return ::kentik::synthetics::v202101beta1::DNSRecord_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto
