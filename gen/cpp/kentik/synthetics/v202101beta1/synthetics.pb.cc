// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/synthetics/v202101beta1/synthetics.proto
// Protobuf C++ Version: 5.29.3

#include "kentik/synthetics/v202101beta1/synthetics.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace kentik {
namespace synthetics {
namespace v202101beta1 {

inline constexpr UserInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        email_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        full_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UserInfo::UserInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UserInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserInfoDefaultTypeInternal() {}
  union {
    UserInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserInfoDefaultTypeInternal _UserInfo_default_instance_;

inline constexpr UrlTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR UrlTest::UrlTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct UrlTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlTestDefaultTypeInternal() {}
  union {
    UrlTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlTestDefaultTypeInternal _UrlTest_default_instance_;

inline constexpr TracerouteInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : is_trace_routes_truncated_{false},
        max_asn_path_count_{0},
        max_site_path_count_{0},
        max_region_path_count_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TracerouteInfo::TracerouteInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TracerouteInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracerouteInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracerouteInfoDefaultTypeInternal() {}
  union {
    TracerouteInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracerouteInfoDefaultTypeInternal _TracerouteInfo_default_instance_;

inline constexpr TraceTaskDefinition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        period_{0u},
        expiry_{0u},
        limit_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TraceTaskDefinition::TraceTaskDefinition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TraceTaskDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceTaskDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceTaskDefinitionDefaultTypeInternal() {}
  union {
    TraceTaskDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceTaskDefinitionDefaultTypeInternal _TraceTaskDefinition_default_instance_;

inline constexpr TraceHop::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ttl_{0},
        latency_{0},
        min_expected_latency_{0},
        asn_{0},
        site_{0},
        timeout_{false},
        target_{false},
        trace_end_{false},
        region_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TraceHop::TraceHop(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TraceHopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceHopDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceHopDefaultTypeInternal() {}
  union {
    TraceHop _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceHopDefaultTypeInternal _TraceHop_default_instance_;

inline constexpr TestTraceSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : protocol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        period_{0},
        count_{0},
        port_{0},
        expiry_{0},
        limit_{0},
        delay_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestTraceSettings::TestTraceSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestTraceSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestTraceSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestTraceSettingsDefaultTypeInternal() {}
  union {
    TestTraceSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestTraceSettingsDefaultTypeInternal _TestTraceSettings_default_instance_;

inline constexpr TestPingSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : period_{0},
        count_{0},
        expiry_{0},
        delay_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestPingSettings::TestPingSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestPingSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestPingSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestPingSettingsDefaultTypeInternal() {}
  union {
    TestPingSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestPingSettingsDefaultTypeInternal _TestPingSettings_default_instance_;

inline constexpr TestMonitoringSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : notification_channels_{},
        activation_grace_period_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        activation_time_unit_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        activation_time_window_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        activation_times_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TestMonitoringSettings::TestMonitoringSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestMonitoringSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestMonitoringSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestMonitoringSettingsDefaultTypeInternal() {}
  union {
    TestMonitoringSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestMonitoringSettingsDefaultTypeInternal _TestMonitoringSettings_default_instance_;

inline constexpr TagTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TagTest::TagTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TagTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TagTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TagTestDefaultTypeInternal() {}
  union {
    TagTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TagTestDefaultTypeInternal _TagTest_default_instance_;

inline constexpr Stats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : average_{0},
        max_{0},
        total_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Stats::Stats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatsDefaultTypeInternal() {}
  union {
    Stats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatsDefaultTypeInternal _Stats_default_instance_;

inline constexpr SiteTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SiteTest::SiteTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SiteTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteTestDefaultTypeInternal() {}
  union {
    SiteTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteTestDefaultTypeInternal _SiteTest_default_instance_;

inline constexpr ShakeTaskDefinition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        port_{0u},
        period_{0u},
        expiry_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ShakeTaskDefinition::ShakeTaskDefinition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ShakeTaskDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShakeTaskDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShakeTaskDefinitionDefaultTypeInternal() {}
  union {
    ShakeTaskDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShakeTaskDefinitionDefaultTypeInternal _ShakeTaskDefinition_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR SetTestStatusResponse::SetTestStatusResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct SetTestStatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTestStatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTestStatusResponseDefaultTypeInternal() {}
  union {
    SetTestStatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTestStatusResponseDefaultTypeInternal _SetTestStatusResponse_default_instance_;

inline constexpr SetTestStatusRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{static_cast< ::kentik::synthetics::v202101beta1::TestStatus >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SetTestStatusRequest::SetTestStatusRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SetTestStatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTestStatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTestStatusRequestDefaultTypeInternal() {}
  union {
    SetTestStatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTestStatusRequestDefaultTypeInternal _SetTestStatusRequest_default_instance_;

inline constexpr Region::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Region::Region(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct RegionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegionDefaultTypeInternal() {}
  union {
    Region _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegionDefaultTypeInternal _Region_default_instance_;

inline constexpr PingTaskDefinition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        period_{0u},
        expiry_{0u},
        count_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PingTaskDefinition::PingTaskDefinition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PingTaskDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingTaskDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingTaskDefinitionDefaultTypeInternal() {}
  union {
    PingTaskDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingTaskDefinitionDefaultTypeInternal _PingTaskDefinition_default_instance_;

inline constexpr MeshMetric::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        health_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        value_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MeshMetric::MeshMetric(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MeshMetricDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshMetricDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshMetricDefaultTypeInternal() {}
  union {
    MeshMetric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshMetricDefaultTypeInternal _MeshMetric_default_instance_;

inline constexpr ListTestsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : preset_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ListTestsRequest::ListTestsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ListTestsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTestsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTestsRequestDefaultTypeInternal() {}
  union {
    ListTestsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTestsRequestDefaultTypeInternal _ListTestsRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ListAgentsRequest::ListAgentsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ListAgentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAgentsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAgentsRequestDefaultTypeInternal() {}
  union {
    ListAgentsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAgentsRequestDefaultTypeInternal _ListAgentsRequest_default_instance_;

inline constexpr KnockTaskDefinition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        period_{0u},
        expiry_{0u},
        count_{0u},
        port_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR KnockTaskDefinition::KnockTaskDefinition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct KnockTaskDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KnockTaskDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~KnockTaskDefinitionDefaultTypeInternal() {}
  union {
    KnockTaskDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KnockTaskDefinitionDefaultTypeInternal _KnockTaskDefinition_default_instance_;

inline constexpr IpTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : targets_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IpTest::IpTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IpTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IpTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IpTestDefaultTypeInternal() {}
  union {
    IpTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IpTestDefaultTypeInternal _IpTest_default_instance_;

inline constexpr IDByIP::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IDByIP::IDByIP(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IDByIPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IDByIPDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IDByIPDefaultTypeInternal() {}
  union {
    IDByIP _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IDByIPDefaultTypeInternal _IDByIP_default_instance_;

inline constexpr HostnameTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HostnameTest::HostnameTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HostnameTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostnameTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostnameTestDefaultTypeInternal() {}
  union {
    HostnameTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostnameTestDefaultTypeInternal _HostnameTest_default_instance_;

inline constexpr HealthSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : http_valid_codes_{},
        _http_valid_codes_cached_byte_size_{0},
        dns_valid_codes_{},
        _dns_valid_codes_cached_byte_size_{0},
        latency_critical_{0},
        latency_warning_{0},
        packet_loss_critical_{0},
        packet_loss_warning_{0},
        jitter_critical_{0},
        jitter_warning_{0},
        http_latency_critical_{0},
        http_latency_warning_{0},
        latency_critical_stddev_{0},
        latency_warning_stddev_{0},
        jitter_critical_stddev_{0},
        jitter_warning_stddev_{0},
        http_latency_critical_stddev_{0},
        http_latency_warning_stddev_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HealthSettings::HealthSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthSettingsDefaultTypeInternal() {}
  union {
    HealthSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthSettingsDefaultTypeInternal _HealthSettings_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HealthMoment_OtherHealthsEntry_DoNotUse::HealthMoment_OtherHealthsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : HealthMoment_OtherHealthsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : HealthMoment_OtherHealthsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HealthMoment_OtherHealthsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthMoment_OtherHealthsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthMoment_OtherHealthsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HealthMoment_OtherHealthsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthMoment_OtherHealthsEntry_DoNotUseDefaultTypeInternal _HealthMoment_OtherHealthsEntry_DoNotUse_default_instance_;

inline constexpr HTTPTaskDefinition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        period_{0u},
        expiry_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HTTPTaskDefinition::HTTPTaskDefinition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HTTPTaskDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HTTPTaskDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HTTPTaskDefinitionDefaultTypeInternal() {}
  union {
    HTTPTaskDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HTTPTaskDefinitionDefaultTypeInternal _HTTPTaskDefinition_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HTTPConfig_HeadersEntry_DoNotUse::HTTPConfig_HeadersEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : HTTPConfig_HeadersEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : HTTPConfig_HeadersEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HTTPConfig_HeadersEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HTTPConfig_HeadersEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HTTPConfig_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HTTPConfig_HeadersEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HTTPConfig_HeadersEntry_DoNotUseDefaultTypeInternal _HTTPConfig_HeadersEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR HTTPConfig_CssSelectorsEntry_DoNotUse::HTTPConfig_CssSelectorsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : HTTPConfig_CssSelectorsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : HTTPConfig_CssSelectorsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct HTTPConfig_CssSelectorsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HTTPConfig_CssSelectorsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HTTPConfig_CssSelectorsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HTTPConfig_CssSelectorsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HTTPConfig_CssSelectorsEntry_DoNotUseDefaultTypeInternal _HTTPConfig_CssSelectorsEntry_DoNotUse_default_instance_;

inline constexpr GridTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : targets_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GridTest::GridTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GridTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GridTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GridTestDefaultTypeInternal() {}
  union {
    GridTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GridTestDefaultTypeInternal _GridTest_default_instance_;

inline constexpr GetTestRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetTestRequest::GetTestRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetTestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTestRequestDefaultTypeInternal() {}
  union {
    GetTestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTestRequestDefaultTypeInternal _GetTestRequest_default_instance_;

inline constexpr GetAgentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAgentRequest::GetAgentRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAgentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAgentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAgentRequestDefaultTypeInternal() {}
  union {
    GetAgentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAgentRequestDefaultTypeInternal _GetAgentRequest_default_instance_;

inline constexpr FlowTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        inet_direction_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        direction_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_refresh_interval_millis_{0u},
        max_tasks_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FlowTest::FlowTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FlowTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlowTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlowTestDefaultTypeInternal() {}
  union {
    FlowTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlowTestDefaultTypeInternal _FlowTest_default_instance_;

inline constexpr DnsTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::kentik::synthetics::v202101beta1::DNSRecord >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DnsTest::DnsTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DnsTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DnsTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DnsTestDefaultTypeInternal() {}
  union {
    DnsTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DnsTestDefaultTypeInternal _DnsTest_default_instance_;

inline constexpr DnsGridTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : targets_{},
        type_{static_cast< ::kentik::synthetics::v202101beta1::DNSRecord >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DnsGridTest::DnsGridTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DnsGridTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DnsGridTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DnsGridTestDefaultTypeInternal() {}
  union {
    DnsGridTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DnsGridTestDefaultTypeInternal _DnsGridTest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DeleteTestResponse::DeleteTestResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DeleteTestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteTestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteTestResponseDefaultTypeInternal() {}
  union {
    DeleteTestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteTestResponseDefaultTypeInternal _DeleteTestResponse_default_instance_;

inline constexpr DeleteTestRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DeleteTestRequest::DeleteTestRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeleteTestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteTestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteTestRequestDefaultTypeInternal() {}
  union {
    DeleteTestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteTestRequestDefaultTypeInternal _DeleteTestRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR DeleteAgentResponse::DeleteAgentResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct DeleteAgentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAgentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAgentResponseDefaultTypeInternal() {}
  union {
    DeleteAgentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAgentResponseDefaultTypeInternal _DeleteAgentResponse_default_instance_;

inline constexpr DeleteAgentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DeleteAgentRequest::DeleteAgentRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DeleteAgentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteAgentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteAgentRequestDefaultTypeInternal() {}
  union {
    DeleteAgentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteAgentRequestDefaultTypeInternal _DeleteAgentRequest_default_instance_;

inline constexpr DNSTaskDefinition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        resolver_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        period_{0u},
        expiry_{0u},
        count_{0u},
        port_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DNSTaskDefinition::DNSTaskDefinition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DNSTaskDefinitionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DNSTaskDefinitionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DNSTaskDefinitionDefaultTypeInternal() {}
  union {
    DNSTaskDefinition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DNSTaskDefinitionDefaultTypeInternal _DNSTaskDefinition_default_instance_;

inline constexpr DNS::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DNS::DNS(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DNSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DNSDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DNSDefaultTypeInternal() {}
  union {
    DNS _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DNSDefaultTypeInternal _DNS_default_instance_;

inline constexpr Country::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Country::Country(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CountryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountryDefaultTypeInternal() {}
  union {
    Country _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountryDefaultTypeInternal _Country_default_instance_;

inline constexpr City::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        latitude_{0},
        longitude_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR City::City(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CityDefaultTypeInternal() {}
  union {
    City _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CityDefaultTypeInternal _City_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR ApplicationMeshTest::ApplicationMeshTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct ApplicationMeshTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplicationMeshTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplicationMeshTestDefaultTypeInternal() {}
  union {
    ApplicationMeshTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplicationMeshTestDefaultTypeInternal _ApplicationMeshTest_default_instance_;

inline constexpr AgentTest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AgentTest::AgentTest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AgentTestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentTestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentTestDefaultTypeInternal() {}
  union {
    AgentTest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentTestDefaultTypeInternal _AgentTest_default_instance_;

inline constexpr AgentTaskConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : targets_{},
        id_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AgentTaskConfig::AgentTaskConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AgentTaskConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentTaskConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentTaskConfigDefaultTypeInternal() {}
  union {
    AgentTaskConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentTaskConfigDefaultTypeInternal _AgentTaskConfig_default_instance_;

inline constexpr ASN::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ASN::ASN(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ASNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ASNDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ASNDefaultTypeInternal() {}
  union {
    ASN _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ASNDefaultTypeInternal _ASN_default_instance_;

inline constexpr TraceProbe::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : as_path_{},
        _as_path_cached_byte_size_{0},
        region_path_{},
        site_path_{},
        _site_path_cached_byte_size_{0},
        hops_{},
        completed_{false},
        hop_count_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TraceProbe::TraceProbe(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TraceProbeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceProbeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceProbeDefaultTypeInternal() {}
  union {
    TraceProbe _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceProbeDefaultTypeInternal _TraceProbe_default_instance_;

inline constexpr Task::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        test_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        state_{static_cast< ::kentik::synthetics::v202101beta1::TaskState >(0)},
        family_{static_cast< ::kentik::synthetics::v202101beta1::IPFamily >(0)},
        definition_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR Task::Task(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDefaultTypeInternal() {}
  union {
    Task _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDefaultTypeInternal _Task_default_instance_;

inline constexpr MeshMetrics::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        time_{nullptr},
        latency_{nullptr},
        packet_loss_{nullptr},
        jitter_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MeshMetrics::MeshMetrics(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MeshMetricsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshMetricsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshMetricsDefaultTypeInternal() {}
  union {
    MeshMetrics _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshMetricsDefaultTypeInternal _MeshMetrics_default_instance_;

inline constexpr Health::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        health_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Health::Health(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthDefaultTypeInternal() {}
  union {
    Health _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthDefaultTypeInternal _Health_default_instance_;

inline constexpr HTTPConfig::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : headers_{},
        css_selectors_{},
        method_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        body_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        period_{0u},
        expiry_{0u},
        ignore_tls_errors_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR HTTPConfig::HTTPConfig(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HTTPConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HTTPConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HTTPConfigDefaultTypeInternal() {}
  union {
    HTTPConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HTTPConfigDefaultTypeInternal _HTTPConfig_default_instance_;

inline constexpr GetTraceForTestRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        agent_ids_{},
        target_ips_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_time_{nullptr},
        end_time_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetTraceForTestRequest::GetTraceForTestRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetTraceForTestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTraceForTestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTraceForTestRequestDefaultTypeInternal() {}
  union {
    GetTraceForTestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTraceForTestRequestDefaultTypeInternal _GetTraceForTestRequest_default_instance_;

inline constexpr GetHealthForTestsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ids_{},
        agent_ids_{},
        task_ids_{},
        start_time_{nullptr},
        end_time_{nullptr},
        augment_{false} {}

template <typename>
PROTOBUF_CONSTEXPR GetHealthForTestsRequest::GetHealthForTestsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetHealthForTestsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHealthForTestsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHealthForTestsRequestDefaultTypeInternal() {}
  union {
    GetHealthForTestsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHealthForTestsRequestDefaultTypeInternal _GetHealthForTestsRequest_default_instance_;

inline constexpr Geo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        country_{nullptr},
        region_{nullptr},
        city_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Geo::Geo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GeoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoDefaultTypeInternal() {}
  union {
    Geo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoDefaultTypeInternal _Geo_default_instance_;

inline constexpr Agent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        test_ids_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        alias_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        os_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        site_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        version_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        challenge_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        city_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        region_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        local_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cloud_vpc_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_authed_{nullptr},
        status_{static_cast< ::kentik::synthetics::v202101beta1::AgentStatus >(0)},
        family_{static_cast< ::kentik::synthetics::v202101beta1::IPFamily >(0)},
        lat_{0},
        long__{0},
        asn_{0u},
        agent_impl_{static_cast< ::kentik::synthetics::v202101beta1::ImplementType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Agent::Agent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AgentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentDefaultTypeInternal() {}
  union {
    Agent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentDefaultTypeInternal _Agent_default_instance_;

inline constexpr Trace::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : probes_{},
        agent_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        agent_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        hop_count_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Trace::Trace(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TraceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TraceDefaultTypeInternal() {}
  union {
    Trace _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TraceDefaultTypeInternal _Trace_default_instance_;

inline constexpr TestSettings::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        agent_ids_{},
        tasks_{},
        servers_{},
        protocol_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        health_settings_{nullptr},
        monitoring_settings_{nullptr},
        ping_{nullptr},
        trace_{nullptr},
        http_{nullptr},
        period_{0u},
        count_{0u},
        expiry_{0u},
        limit_{0u},
        port_{0u},
        family_{static_cast< ::kentik::synthetics::v202101beta1::IPFamily >(0)},
        use_local_ip_{false},
        reciprocal_{false},
        rollup_level_{0u},
        definition_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR TestSettings::TestSettings(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestSettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestSettingsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestSettingsDefaultTypeInternal() {}
  union {
    TestSettings _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestSettingsDefaultTypeInternal _TestSettings_default_instance_;

inline constexpr PatchAgentResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        agent_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PatchAgentResponse::PatchAgentResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PatchAgentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAgentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAgentResponseDefaultTypeInternal() {}
  union {
    PatchAgentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAgentResponseDefaultTypeInternal _PatchAgentResponse_default_instance_;

inline constexpr PatchAgentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        agent_{nullptr},
        mask_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PatchAgentRequest::PatchAgentRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PatchAgentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchAgentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchAgentRequestDefaultTypeInternal() {}
  union {
    PatchAgentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchAgentRequestDefaultTypeInternal _PatchAgentRequest_default_instance_;

inline constexpr MeshColumn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        health_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        alias_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        target_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        metrics_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MeshColumn::MeshColumn(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MeshColumnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshColumnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshColumnDefaultTypeInternal() {}
  union {
    MeshColumn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshColumnDefaultTypeInternal _MeshColumn_default_instance_;

inline constexpr ListAgentsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : agents_{},
        invalid_agents_count_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ListAgentsResponse::ListAgentsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ListAgentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListAgentsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListAgentsResponseDefaultTypeInternal() {}
  union {
    ListAgentsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListAgentsResponseDefaultTypeInternal _ListAgentsResponse_default_instance_;

inline constexpr IPInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        site_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        egress_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asn_{nullptr},
        geo_{nullptr},
        dns_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR IPInfo::IPInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IPInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IPInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IPInfoDefaultTypeInternal() {}
  union {
    IPInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IPInfoDefaultTypeInternal _IPInfo_default_instance_;

inline constexpr HealthMoment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        other_healths_{},
        src_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dst_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        latency_health_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        packet_loss_health_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        jitter_health_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        task_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        overall_health_{nullptr},
        packet_loss_{0},
        avg_latency_{0u},
        avg_weighted_latency_{0u},
        rolling_avg_latency_{0u},
        rolling_stddev_latency_{0u},
        rolling_avg_weighted_latency_{0u},
        avg_jitter_{0u},
        rolling_avg_jitter_{0u},
        rolling_std_jitter_{0u},
        size_{0u},
        status_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR HealthMoment::HealthMoment(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct HealthMomentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HealthMomentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HealthMomentDefaultTypeInternal() {}
  union {
    HealthMoment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HealthMomentDefaultTypeInternal _HealthMoment_default_instance_;

inline constexpr GetAgentResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        agent_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetAgentResponse::GetAgentResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAgentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAgentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAgentResponseDefaultTypeInternal() {}
  union {
    GetAgentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAgentResponseDefaultTypeInternal _GetAgentResponse_default_instance_;

inline constexpr TracerouteResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        traces_{},
        time_{nullptr},
        count_{nullptr},
        distance_{nullptr},
        hop_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TracerouteResult::TracerouteResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TracerouteResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracerouteResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracerouteResultDefaultTypeInternal() {}
  union {
    TracerouteResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracerouteResultDefaultTypeInternal _TracerouteResult_default_instance_;

inline constexpr TracerouteLookup::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : agent_id_by_ip_{},
        agents_{},
        asns_{},
        device_id_by_ip_{},
        site_id_by_ip_{},
        ips_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TracerouteLookup::TracerouteLookup(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TracerouteLookupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TracerouteLookupDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TracerouteLookupDefaultTypeInternal() {}
  union {
    TracerouteLookup _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TracerouteLookupDefaultTypeInternal _TracerouteLookup_default_instance_;

inline constexpr Test::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        device_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        settings_{nullptr},
        expires_on_{nullptr},
        cdate_{nullptr},
        edate_{nullptr},
        created_by_{nullptr},
        last_updated_by_{nullptr},
        status_{static_cast< ::kentik::synthetics::v202101beta1::TestStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Test::Test(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestDefaultTypeInternal() {}
  union {
    Test _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestDefaultTypeInternal _Test_default_instance_;

inline constexpr MeshResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : columns_{},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        local_ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ip_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        alias_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MeshResponse::MeshResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MeshResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MeshResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MeshResponseDefaultTypeInternal() {}
  union {
    MeshResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MeshResponseDefaultTypeInternal _MeshResponse_default_instance_;

inline constexpr AgentHealth::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        health_{},
        agent_{nullptr},
        overall_health_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AgentHealth::AgentHealth(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AgentHealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentHealthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentHealthDefaultTypeInternal() {}
  union {
    AgentHealth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentHealthDefaultTypeInternal _AgentHealth_default_instance_;

inline constexpr TaskHealth::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        agents_{},
        task_{nullptr},
        overall_health_{nullptr},
        target_agent_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TaskHealth::TaskHealth(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TaskHealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskHealthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskHealthDefaultTypeInternal() {}
  union {
    TaskHealth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskHealthDefaultTypeInternal _TaskHealth_default_instance_;

inline constexpr PatchTestResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        test_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PatchTestResponse::PatchTestResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PatchTestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchTestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchTestResponseDefaultTypeInternal() {}
  union {
    PatchTestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchTestResponseDefaultTypeInternal _PatchTestResponse_default_instance_;

inline constexpr PatchTestRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        test_{nullptr},
        mask_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR PatchTestRequest::PatchTestRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PatchTestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PatchTestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PatchTestRequestDefaultTypeInternal() {}
  union {
    PatchTestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PatchTestRequestDefaultTypeInternal _PatchTestRequest_default_instance_;

inline constexpr ListTestsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : tests_{},
        invalid_tests_count_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR ListTestsResponse::ListTestsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ListTestsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListTestsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListTestsResponseDefaultTypeInternal() {}
  union {
    ListTestsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListTestsResponseDefaultTypeInternal _ListTestsResponse_default_instance_;

inline constexpr GetTraceForTestResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        trace_routes_{},
        lookups_{nullptr},
        trace_routes_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetTraceForTestResponse::GetTraceForTestResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetTraceForTestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTraceForTestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTraceForTestResponseDefaultTypeInternal() {}
  union {
    GetTraceForTestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTraceForTestResponseDefaultTypeInternal _GetTraceForTestResponse_default_instance_;

inline constexpr GetTestResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        test_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetTestResponse::GetTestResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetTestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTestResponseDefaultTypeInternal() {}
  union {
    GetTestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTestResponseDefaultTypeInternal _GetTestResponse_default_instance_;

inline constexpr CreateTestResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        test_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CreateTestResponse::CreateTestResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CreateTestResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTestResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTestResponseDefaultTypeInternal() {}
  union {
    CreateTestResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTestResponseDefaultTypeInternal _CreateTestResponse_default_instance_;

inline constexpr CreateTestRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        test_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CreateTestRequest::CreateTestRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CreateTestRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateTestRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateTestRequestDefaultTypeInternal() {}
  union {
    CreateTestRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateTestRequestDefaultTypeInternal _CreateTestRequest_default_instance_;

inline constexpr TestHealth::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        tasks_{},
        health_ts_{},
        agent_task_config_{},
        mesh_{},
        test_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        overall_health_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TestHealth::TestHealth(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TestHealthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestHealthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestHealthDefaultTypeInternal() {}
  union {
    TestHealth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestHealthDefaultTypeInternal _TestHealth_default_instance_;

inline constexpr GetHealthForTestsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : health_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetHealthForTestsResponse::GetHealthForTestsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetHealthForTestsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetHealthForTestsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetHealthForTestsResponseDefaultTypeInternal() {}
  union {
    GetHealthForTestsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetHealthForTestsResponseDefaultTypeInternal _GetHealthForTestsResponse_default_instance_;
}  // namespace v202101beta1
}  // namespace synthetics
}  // namespace kentik
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[6];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto = nullptr;
const ::uint32_t
    TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Health, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Health, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Health, _impl_.health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Health, _impl_.time_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTaskConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTaskConfig, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTaskConfig, _impl_.targets_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _impl_.test_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _impl_.tasks_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _impl_.overall_health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _impl_.health_ts_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _impl_.agent_task_config_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _impl_.mesh_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, _impl_.task_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, _impl_.agents_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, _impl_.overall_health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, _impl_.target_agent_),
        0,
        ~0u,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, _impl_.agent_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, _impl_.health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, _impl_.overall_health_),
        0,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.src_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.dst_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.packet_loss_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.avg_latency_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.avg_weighted_latency_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.rolling_avg_latency_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.rolling_stddev_latency_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.rolling_avg_weighted_latency_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.latency_health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.packet_loss_health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.overall_health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.avg_jitter_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.rolling_avg_jitter_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.rolling_std_jitter_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.jitter_health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.data_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.size_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.task_type_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _impl_.other_healths_),
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.alias_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.os_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.lat_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.long__),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.last_authed_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.family_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.asn_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.site_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.challenge_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.city_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.country_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.test_ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.local_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.cloud_vpc_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _impl_.agent_impl_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, _impl_.expiry_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, _impl_.count_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, _impl_.expiry_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, _impl_.limit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPTaskDefinition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPTaskDefinition, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPTaskDefinition, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPTaskDefinition, _impl_.expiry_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_.test_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_.device_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_.family_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_.definition_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, _impl_.expiry_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, _impl_.port_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _impl_.expiry_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _impl_.resolver_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, _impl_.expiry_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UserInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UserInfo, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UserInfo, _impl_.email_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UserInfo, _impl_.full_name_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.device_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.settings_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.expires_on_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.cdate_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.edate_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.created_by_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _impl_.last_updated_by_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse, _impl_.value_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _impl_.expiry_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _impl_.method_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _impl_.headers_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _impl_.body_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _impl_.ignore_tls_errors_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _impl_.css_selectors_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.agent_ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.expiry_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.limit_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.tasks_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.health_settings_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.monitoring_settings_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.ping_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.trace_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.family_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.servers_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.use_local_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.reciprocal_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.rollup_level_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.http_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_.definition_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        4,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _impl_.expiry_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _impl_.limit_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _impl_.delay_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, _impl_.period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, _impl_.expiry_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, _impl_.delay_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, _impl_.activation_grace_period_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, _impl_.activation_time_unit_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, _impl_.activation_time_window_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, _impl_.activation_times_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, _impl_.notification_channels_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.latency_critical_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.latency_warning_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.packet_loss_critical_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.packet_loss_warning_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.jitter_critical_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.jitter_warning_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.http_latency_critical_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.http_latency_warning_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.http_valid_codes_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.dns_valid_codes_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.latency_critical_stddev_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.latency_warning_stddev_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.jitter_critical_stddev_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.jitter_warning_stddev_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.http_latency_critical_stddev_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _impl_.http_latency_warning_stddev_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HostnameTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HostnameTest, _impl_.target_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IpTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IpTest, _impl_.targets_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTest, _impl_.target_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, _impl_.target_refresh_interval_millis_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, _impl_.max_tasks_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, _impl_.inet_direction_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, _impl_.direction_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SiteTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SiteTest, _impl_.target_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TagTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TagTest, _impl_.target_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsTest, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsTest, _impl_.type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UrlTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UrlTest, _impl_.target_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GridTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GridTest, _impl_.targets_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsGridTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsGridTest, _impl_.targets_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsGridTest, _impl_.type_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ApplicationMeshTest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, _impl_.local_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, _impl_.alias_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, _impl_.columns_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _impl_.alias_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _impl_.metrics_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _impl_.health_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetric, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetric, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetric, _impl_.health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetric, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, _impl_.latency_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, _impl_.packet_loss_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, _impl_.jitter_),
        0,
        1,
        2,
        3,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ASN, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ASN, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ASN, _impl_.name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Country, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Country, _impl_.code_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Country, _impl_.name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Region, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Region, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Region, _impl_.name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, _impl_.latitude_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, _impl_.longitude_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, _impl_.country_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, _impl_.city_),
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNS, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNS, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _impl_.asn_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _impl_.geo_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _impl_.dns_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _impl_.device_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _impl_.site_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _impl_.egress_),
        ~0u,
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IDByIP, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IDByIP, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IDByIP, _impl_.ip_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, _impl_.agent_id_by_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, _impl_.agents_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, _impl_.asns_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, _impl_.device_id_by_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, _impl_.site_id_by_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, _impl_.ips_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.ttl_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.timeout_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.latency_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.min_expected_latency_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.asn_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.site_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.region_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.target_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _impl_.trace_end_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, _impl_.as_path_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, _impl_.completed_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, _impl_.hop_count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, _impl_.region_path_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, _impl_.site_path_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, _impl_.hops_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, _impl_.agent_id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, _impl_.agent_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, _impl_.target_ip_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, _impl_.hop_count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, _impl_.probes_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Stats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Stats, _impl_.average_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Stats, _impl_.max_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Stats, _impl_.total_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, _impl_.traces_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, _impl_.hop_count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, _impl_.count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, _impl_.distance_),
        0,
        ~0u,
        ~0u,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, _impl_.is_trace_routes_truncated_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, _impl_.max_asn_path_count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, _impl_.max_site_path_count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, _impl_.max_region_path_count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _impl_.ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _impl_.agent_ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _impl_.task_ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _impl_.augment_),
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsResponse, _impl_.health_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, _impl_.agent_ids_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, _impl_.target_ips_),
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, _impl_.lookups_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, _impl_.trace_routes_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, _impl_.trace_routes_info_),
        0,
        ~0u,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListAgentsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListAgentsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListAgentsResponse, _impl_.agents_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListAgentsResponse, _impl_.invalid_agents_count_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentResponse, _impl_.agent_),
        0,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentRequest, _impl_.agent_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentRequest, _impl_.mask_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentResponse, _impl_.agent_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteAgentRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteAgentRequest, _impl_.id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteAgentResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsRequest, _impl_.preset_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsResponse, _impl_.tests_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsResponse, _impl_.invalid_tests_count_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestRequest, _impl_.test_),
        0,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestResponse, _impl_.test_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestResponse, _impl_.test_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SetTestStatusRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SetTestStatusRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SetTestStatusRequest, _impl_.status_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SetTestStatusResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestRequest, _impl_.test_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestRequest, _impl_.mask_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestResponse, _impl_.test_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteTestRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteTestRequest, _impl_.id_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteTestResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::kentik::synthetics::v202101beta1::Health)},
        {12, -1, -1, sizeof(::kentik::synthetics::v202101beta1::AgentTaskConfig)},
        {22, 36, -1, sizeof(::kentik::synthetics::v202101beta1::TestHealth)},
        {42, 54, -1, sizeof(::kentik::synthetics::v202101beta1::TaskHealth)},
        {58, 69, -1, sizeof(::kentik::synthetics::v202101beta1::AgentHealth)},
        {72, 82, -1, sizeof(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse)},
        {84, 113, -1, sizeof(::kentik::synthetics::v202101beta1::HealthMoment)},
        {134, 164, -1, sizeof(::kentik::synthetics::v202101beta1::Agent)},
        {186, -1, -1, sizeof(::kentik::synthetics::v202101beta1::PingTaskDefinition)},
        {198, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TraceTaskDefinition)},
        {210, -1, -1, sizeof(::kentik::synthetics::v202101beta1::HTTPTaskDefinition)},
        {221, -1, -1, sizeof(::kentik::synthetics::v202101beta1::Task)},
        {242, -1, -1, sizeof(::kentik::synthetics::v202101beta1::KnockTaskDefinition)},
        {255, -1, -1, sizeof(::kentik::synthetics::v202101beta1::DNSTaskDefinition)},
        {270, -1, -1, sizeof(::kentik::synthetics::v202101beta1::ShakeTaskDefinition)},
        {282, -1, -1, sizeof(::kentik::synthetics::v202101beta1::UserInfo)},
        {293, 312, -1, sizeof(::kentik::synthetics::v202101beta1::Test)},
        {323, 333, -1, sizeof(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse)},
        {335, 345, -1, sizeof(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse)},
        {347, -1, -1, sizeof(::kentik::synthetics::v202101beta1::HTTPConfig)},
        {362, 401, -1, sizeof(::kentik::synthetics::v202101beta1::TestSettings)},
        {431, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TestTraceSettings)},
        {446, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TestPingSettings)},
        {458, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TestMonitoringSettings)},
        {471, -1, -1, sizeof(::kentik::synthetics::v202101beta1::HealthSettings)},
        {495, -1, -1, sizeof(::kentik::synthetics::v202101beta1::HostnameTest)},
        {504, -1, -1, sizeof(::kentik::synthetics::v202101beta1::IpTest)},
        {513, -1, -1, sizeof(::kentik::synthetics::v202101beta1::AgentTest)},
        {522, -1, -1, sizeof(::kentik::synthetics::v202101beta1::FlowTest)},
        {536, -1, -1, sizeof(::kentik::synthetics::v202101beta1::SiteTest)},
        {545, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TagTest)},
        {554, -1, -1, sizeof(::kentik::synthetics::v202101beta1::DnsTest)},
        {564, -1, -1, sizeof(::kentik::synthetics::v202101beta1::UrlTest)},
        {573, -1, -1, sizeof(::kentik::synthetics::v202101beta1::GridTest)},
        {582, -1, -1, sizeof(::kentik::synthetics::v202101beta1::DnsGridTest)},
        {592, -1, -1, sizeof(::kentik::synthetics::v202101beta1::ApplicationMeshTest)},
        {600, -1, -1, sizeof(::kentik::synthetics::v202101beta1::MeshResponse)},
        {614, 628, -1, sizeof(::kentik::synthetics::v202101beta1::MeshColumn)},
        {634, -1, -1, sizeof(::kentik::synthetics::v202101beta1::MeshMetric)},
        {645, 657, -1, sizeof(::kentik::synthetics::v202101beta1::MeshMetrics)},
        {661, -1, -1, sizeof(::kentik::synthetics::v202101beta1::ASN)},
        {671, -1, -1, sizeof(::kentik::synthetics::v202101beta1::Country)},
        {681, -1, -1, sizeof(::kentik::synthetics::v202101beta1::Region)},
        {691, -1, -1, sizeof(::kentik::synthetics::v202101beta1::City)},
        {703, 714, -1, sizeof(::kentik::synthetics::v202101beta1::Geo)},
        {717, -1, -1, sizeof(::kentik::synthetics::v202101beta1::DNS)},
        {726, 741, -1, sizeof(::kentik::synthetics::v202101beta1::IPInfo)},
        {748, -1, -1, sizeof(::kentik::synthetics::v202101beta1::IDByIP)},
        {758, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TracerouteLookup)},
        {772, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TraceHop)},
        {790, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TraceProbe)},
        {804, -1, -1, sizeof(::kentik::synthetics::v202101beta1::Trace)},
        {817, -1, -1, sizeof(::kentik::synthetics::v202101beta1::Stats)},
        {828, 841, -1, sizeof(::kentik::synthetics::v202101beta1::TracerouteResult)},
        {846, -1, -1, sizeof(::kentik::synthetics::v202101beta1::TracerouteInfo)},
        {858, 872, -1, sizeof(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest)},
        {878, -1, -1, sizeof(::kentik::synthetics::v202101beta1::GetHealthForTestsResponse)},
        {887, 900, -1, sizeof(::kentik::synthetics::v202101beta1::GetTraceForTestRequest)},
        {905, 916, -1, sizeof(::kentik::synthetics::v202101beta1::GetTraceForTestResponse)},
        {919, -1, -1, sizeof(::kentik::synthetics::v202101beta1::ListAgentsRequest)},
        {927, -1, -1, sizeof(::kentik::synthetics::v202101beta1::ListAgentsResponse)},
        {937, -1, -1, sizeof(::kentik::synthetics::v202101beta1::GetAgentRequest)},
        {946, 955, -1, sizeof(::kentik::synthetics::v202101beta1::GetAgentResponse)},
        {956, 966, -1, sizeof(::kentik::synthetics::v202101beta1::PatchAgentRequest)},
        {968, 977, -1, sizeof(::kentik::synthetics::v202101beta1::PatchAgentResponse)},
        {978, -1, -1, sizeof(::kentik::synthetics::v202101beta1::DeleteAgentRequest)},
        {987, -1, -1, sizeof(::kentik::synthetics::v202101beta1::DeleteAgentResponse)},
        {995, -1, -1, sizeof(::kentik::synthetics::v202101beta1::ListTestsRequest)},
        {1004, -1, -1, sizeof(::kentik::synthetics::v202101beta1::ListTestsResponse)},
        {1014, 1023, -1, sizeof(::kentik::synthetics::v202101beta1::CreateTestRequest)},
        {1024, 1033, -1, sizeof(::kentik::synthetics::v202101beta1::CreateTestResponse)},
        {1034, -1, -1, sizeof(::kentik::synthetics::v202101beta1::GetTestRequest)},
        {1043, 1052, -1, sizeof(::kentik::synthetics::v202101beta1::GetTestResponse)},
        {1053, -1, -1, sizeof(::kentik::synthetics::v202101beta1::SetTestStatusRequest)},
        {1063, -1, -1, sizeof(::kentik::synthetics::v202101beta1::SetTestStatusResponse)},
        {1071, 1081, -1, sizeof(::kentik::synthetics::v202101beta1::PatchTestRequest)},
        {1083, 1092, -1, sizeof(::kentik::synthetics::v202101beta1::PatchTestResponse)},
        {1093, -1, -1, sizeof(::kentik::synthetics::v202101beta1::DeleteTestRequest)},
        {1102, -1, -1, sizeof(::kentik::synthetics::v202101beta1::DeleteTestResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::kentik::synthetics::v202101beta1::_Health_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_AgentTaskConfig_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TestHealth_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TaskHealth_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_AgentHealth_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_HealthMoment_OtherHealthsEntry_DoNotUse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_HealthMoment_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_Agent_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_PingTaskDefinition_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TraceTaskDefinition_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_HTTPTaskDefinition_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_Task_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_KnockTaskDefinition_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_DNSTaskDefinition_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_ShakeTaskDefinition_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_UserInfo_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_Test_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_HTTPConfig_HeadersEntry_DoNotUse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_HTTPConfig_CssSelectorsEntry_DoNotUse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_HTTPConfig_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TestSettings_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TestTraceSettings_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TestPingSettings_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TestMonitoringSettings_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_HealthSettings_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_HostnameTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_IpTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_AgentTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_FlowTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_SiteTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TagTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_DnsTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_UrlTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GridTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_DnsGridTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_ApplicationMeshTest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_MeshResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_MeshColumn_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_MeshMetric_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_MeshMetrics_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_ASN_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_Country_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_Region_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_City_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_Geo_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_DNS_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_IPInfo_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_IDByIP_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TracerouteLookup_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TraceHop_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TraceProbe_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_Trace_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_Stats_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TracerouteResult_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_TracerouteInfo_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GetHealthForTestsRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GetHealthForTestsResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GetTraceForTestRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GetTraceForTestResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_ListAgentsRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_ListAgentsResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GetAgentRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GetAgentResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_PatchAgentRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_PatchAgentResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_DeleteAgentRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_DeleteAgentResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_ListTestsRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_ListTestsResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_CreateTestRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_CreateTestResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GetTestRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_GetTestResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_SetTestStatusRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_SetTestStatusResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_PatchTestRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_PatchTestResponse_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_DeleteTestRequest_default_instance_._instance,
    &::kentik::synthetics::v202101beta1::_DeleteTestResponse_default_instance_._instance,
};
const char descriptor_table_protodef_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n/kentik/synthetics/v202101beta1/synthet"
    "ics.proto\022\036kentik.synthetics.v202101beta"
    "1\032\034google/api/annotations.proto\032\027google/"
    "api/client.proto\032 google/protobuf/field_"
    "mask.proto\032\037google/protobuf/timestamp.pr"
    "oto\032.protoc-gen-openapiv2/options/annota"
    "tions.proto\032%kentik/core/v202303/annotat"
    "ions.proto\"P\n\006Health\022\026\n\006health\030\001 \001(\tR\006he"
    "alth\022.\n\004time\030\002 \001(\0132\032.google.protobuf.Tim"
    "estampR\004time\";\n\017AgentTaskConfig\022\016\n\002id\030\001 "
    "\001(\004R\002id\022\030\n\007targets\030\002 \003(\tR\007targets\"\232\003\n\nTe"
    "stHealth\022\027\n\007test_id\030\001 \001(\tR\006testId\022@\n\005tas"
    "ks\030\002 \003(\0132*.kentik.synthetics.v202101beta"
    "1.TaskHealthR\005tasks\022M\n\016overall_health\030\003 "
    "\001(\0132&.kentik.synthetics.v202101beta1.Hea"
    "lthR\roverallHealth\022C\n\thealth_ts\030\004 \003(\0132&."
    "kentik.synthetics.v202101beta1.HealthR\010h"
    "ealthTs\022[\n\021agent_task_config\030\005 \003(\0132/.ken"
    "tik.synthetics.v202101beta1.AgentTaskCon"
    "figR\017agentTaskConfig\022@\n\004mesh\030\006 \003(\0132,.ken"
    "tik.synthetics.v202101beta1.MeshResponse"
    "R\004mesh\"\244\002\n\nTaskHealth\0228\n\004task\030\001 \001(\0132$.ke"
    "ntik.synthetics.v202101beta1.TaskR\004task\022"
    "C\n\006agents\030\002 \003(\0132+.kentik.synthetics.v202"
    "101beta1.AgentHealthR\006agents\022M\n\016overall_"
    "health\030\003 \001(\0132&.kentik.synthetics.v202101"
    "beta1.HealthR\roverallHealth\022H\n\014target_ag"
    "ent\030\004 \001(\0132%.kentik.synthetics.v202101bet"
    "a1.AgentR\013targetAgent\"\337\001\n\013AgentHealth\022;\n"
    "\005agent\030\001 \001(\0132%.kentik.synthetics.v202101"
    "beta1.AgentR\005agent\022D\n\006health\030\002 \003(\0132,.ken"
    "tik.synthetics.v202101beta1.HealthMoment"
    "R\006health\022M\n\016overall_health\030\003 \001(\0132&.kenti"
    "k.synthetics.v202101beta1.HealthR\roveral"
    "lHealth\"\316\007\n\014HealthMoment\022.\n\004time\030\001 \001(\0132\032"
    ".google.protobuf.TimestampR\004time\022\025\n\006src_"
    "ip\030\002 \001(\tR\005srcIp\022\025\n\006dst_ip\030\003 \001(\tR\005dstIp\022\037"
    "\n\013packet_loss\030\004 \001(\001R\npacketLoss\022\037\n\013avg_l"
    "atency\030\005 \001(\rR\navgLatency\0220\n\024avg_weighted"
    "_latency\030\006 \001(\rR\022avgWeightedLatency\022.\n\023ro"
    "lling_avg_latency\030\007 \001(\rR\021rollingAvgLaten"
    "cy\0224\n\026rolling_stddev_latency\030\010 \001(\rR\024roll"
    "ingStddevLatency\022\?\n\034rolling_avg_weighted"
    "_latency\030\t \001(\rR\031rollingAvgWeightedLatenc"
    "y\022%\n\016latency_health\030\n \001(\tR\rlatencyHealth"
    "\022,\n\022packet_loss_health\030\013 \001(\tR\020packetLoss"
    "Health\022M\n\016overall_health\030\014 \001(\0132&.kentik."
    "synthetics.v202101beta1.HealthR\roverallH"
    "ealth\022\035\n\navg_jitter\030\r \001(\rR\tavgJitter\022,\n\022"
    "rolling_avg_jitter\030\016 \001(\rR\020rollingAvgJitt"
    "er\022,\n\022rolling_std_jitter\030\017 \001(\rR\020rollingS"
    "tdJitter\022#\n\rjitter_health\030\020 \001(\tR\014jitterH"
    "ealth\022\022\n\004data\030\021 \001(\tR\004data\022\022\n\004size\030\022 \001(\rR"
    "\004size\022\026\n\006status\030\023 \001(\rR\006status\022\033\n\ttask_ty"
    "pe\030\024 \001(\tR\010taskType\022c\n\rother_healths\030\025 \003("
    "\0132>.kentik.synthetics.v202101beta1.Healt"
    "hMoment.OtherHealthsEntryR\014otherHealths\032"
    "\?\n\021OtherHealthsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024"
    "\n\005value\030\002 \001(\tR\005value:\0028\001\"\251\005\n\005Agent\022\016\n\002id"
    "\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022C\n\006status"
    "\030\003 \001(\0162+.kentik.synthetics.v202101beta1."
    "AgentStatusR\006status\022\024\n\005alias\030\004 \001(\tR\005alia"
    "s\022\022\n\004type\030\005 \001(\tR\004type\022\016\n\002os\030\006 \001(\tR\002os\022\016\n"
    "\002ip\030\007 \001(\tR\002ip\022\020\n\003lat\030\010 \001(\001R\003lat\022\022\n\004long\030"
    "\t \001(\001R\004long\022;\n\013last_authed\030\n \001(\0132\032.googl"
    "e.protobuf.TimestampR\nlastAuthed\022@\n\006fami"
    "ly\030\013 \001(\0162(.kentik.synthetics.v202101beta"
    "1.IPFamilyR\006family\022\020\n\003asn\030\014 \001(\rR\003asn\022\027\n\007"
    "site_id\030\r \001(\tR\006siteId\022\030\n\007version\030\016 \001(\tR\007"
    "version\022\034\n\tchallenge\030\017 \001(\tR\tchallenge\022\022\n"
    "\004city\030\020 \001(\tR\004city\022\026\n\006region\030\021 \001(\tR\006regio"
    "n\022\030\n\007country\030\022 \001(\tR\007country\022\031\n\010test_ids\030"
    "\023 \003(\tR\007testIds\022\031\n\010local_ip\030\024 \001(\tR\007localI"
    "p\022\033\n\tcloud_vpc\030\025 \001(\tR\010cloudVpc\022L\n\nagent_"
    "impl\030\026 \001(\0162-.kentik.synthetics.v202101be"
    "ta1.ImplementTypeR\tagentImpl\"r\n\022PingTask"
    "Definition\022\026\n\006target\030\001 \001(\tR\006target\022\026\n\006pe"
    "riod\030\002 \001(\rR\006period\022\026\n\006expiry\030\003 \001(\rR\006expi"
    "ry\022\024\n\005count\030\004 \001(\rR\005count\"s\n\023TraceTaskDef"
    "inition\022\026\n\006target\030\001 \001(\tR\006target\022\026\n\006perio"
    "d\030\002 \001(\rR\006period\022\026\n\006expiry\030\003 \001(\rR\006expiry\022"
    "\024\n\005limit\030\004 \001(\rR\005limit\"\\\n\022HTTPTaskDefinit"
    "ion\022\026\n\006target\030\001 \001(\tR\006target\022\026\n\006period\030\002 "
    "\001(\rR\006period\022\026\n\006expiry\030\003 \001(\rR\006expiry\"\301\005\n\004"
    "Task\022\016\n\002id\030\001 \001(\tR\002id\022\027\n\007test_id\030\002 \001(\tR\006t"
    "estId\022\033\n\tdevice_id\030\003 \001(\tR\010deviceId\022\?\n\005st"
    "ate\030\004 \001(\0162).kentik.synthetics.v202101bet"
    "a1.TaskStateR\005state\022\026\n\006status\030\005 \001(\tR\006sta"
    "tus\022@\n\006family\030\006 \001(\0162(.kentik.synthetics."
    "v202101beta1.IPFamilyR\006family\022H\n\004ping\030\t "
    "\001(\01322.kentik.synthetics.v202101beta1.Pin"
    "gTaskDefinitionH\000R\004ping\022U\n\ntraceroute\030\n "
    "\001(\01323.kentik.synthetics.v202101beta1.Tra"
    "ceTaskDefinitionH\000R\ntraceroute\022H\n\004http\030\013"
    " \001(\01322.kentik.synthetics.v202101beta1.HT"
    "TPTaskDefinitionH\000R\004http\022K\n\005knock\030\014 \001(\0132"
    "3.kentik.synthetics.v202101beta1.KnockTa"
    "skDefinitionH\000R\005knock\022E\n\003dns\030\r \001(\01321.ken"
    "tik.synthetics.v202101beta1.DNSTaskDefin"
    "itionH\000R\003dns\022K\n\005shake\030\016 \001(\01323.kentik.syn"
    "thetics.v202101beta1.ShakeTaskDefinition"
    "H\000R\005shakeB\014\n\ndefinition\"\207\001\n\023KnockTaskDef"
    "inition\022\026\n\006target\030\001 \001(\tR\006target\022\026\n\006perio"
    "d\030\002 \001(\rR\006period\022\026\n\006expiry\030\003 \001(\rR\006expiry\022"
    "\024\n\005count\030\004 \001(\rR\005count\022\022\n\004port\030\005 \001(\rR\004por"
    "t\"\265\001\n\021DNSTaskDefinition\022\026\n\006target\030\001 \001(\tR"
    "\006target\022\026\n\006period\030\002 \001(\rR\006period\022\026\n\006expir"
    "y\030\003 \001(\rR\006expiry\022\024\n\005count\030\004 \001(\rR\005count\022\022\n"
    "\004port\030\005 \001(\rR\004port\022\022\n\004type\030\006 \001(\tR\004type\022\032\n"
    "\010resolver\030\007 \001(\tR\010resolver\"q\n\023ShakeTaskDe"
    "finition\022\026\n\006target\030\001 \001(\tR\006target\022\022\n\004port"
    "\030\002 \001(\rR\004port\022\026\n\006period\030\003 \001(\rR\006period\022\026\n\006"
    "expiry\030\004 \001(\rR\006expiry\"M\n\010UserInfo\022\016\n\002id\030\001"
    " \001(\tR\002id\022\024\n\005email\030\002 \001(\tR\005email\022\033\n\tfull_n"
    "ame\030\003 \001(\tR\010fullName\"\243\004\n\004Test\022\016\n\002id\030\001 \001(\t"
    "R\002id\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004type\030\003 \001(\tR\004"
    "type\022\033\n\tdevice_id\030\004 \001(\tR\010deviceId\022B\n\006sta"
    "tus\030\005 \001(\0162*.kentik.synthetics.v202101bet"
    "a1.TestStatusR\006status\022H\n\010settings\030\006 \001(\0132"
    ",.kentik.synthetics.v202101beta1.TestSet"
    "tingsR\010settings\0229\n\nexpires_on\030\007 \001(\0132\032.go"
    "ogle.protobuf.TimestampR\texpiresOn\0220\n\005cd"
    "ate\030\010 \001(\0132\032.google.protobuf.TimestampR\005c"
    "date\0220\n\005edate\030\t \001(\0132\032.google.protobuf.Ti"
    "mestampR\005edate\022G\n\ncreated_by\030\n \001(\0132(.ken"
    "tik.synthetics.v202101beta1.UserInfoR\tcr"
    "eatedBy\022P\n\017last_updated_by\030\013 \001(\0132(.kenti"
    "k.synthetics.v202101beta1.UserInfoR\rlast"
    "UpdatedBy\"\307\003\n\nHTTPConfig\022\026\n\006period\030\001 \001(\r"
    "R\006period\022\026\n\006expiry\030\002 \001(\rR\006expiry\022\026\n\006meth"
    "od\030\003 \001(\tR\006method\022Q\n\007headers\030\004 \003(\01327.kent"
    "ik.synthetics.v202101beta1.HTTPConfig.He"
    "adersEntryR\007headers\022\022\n\004body\030\005 \001(\tR\004body\022"
    "*\n\021ignore_tls_errors\030\006 \001(\010R\017ignoreTlsErr"
    "ors\022a\n\rcss_selectors\030\007 \003(\0132<.kentik.synt"
    "hetics.v202101beta1.HTTPConfig.CssSelect"
    "orsEntryR\014cssSelectors\032:\n\014HeadersEntry\022\020"
    "\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\002"
    "8\001\032\?\n\021CssSelectorsEntry\022\020\n\003key\030\001 \001(\tR\003ke"
    "y\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"\360\014\n\014TestSett"
    "ings\022J\n\010hostname\030\004 \001(\0132,.kentik.syntheti"
    "cs.v202101beta1.HostnameTestH\000R\010hostname"
    "\0228\n\002ip\030\005 \001(\0132&.kentik.synthetics.v202101"
    "beta1.IpTestH\000R\002ip\022A\n\005agent\030\006 \001(\0132).kent"
    "ik.synthetics.v202101beta1.AgentTestH\000R\005"
    "agent\022>\n\004flow\030\007 \001(\0132(.kentik.synthetics."
    "v202101beta1.FlowTestH\000R\004flow\022>\n\004site\030\010 "
    "\001(\0132(.kentik.synthetics.v202101beta1.Sit"
    "eTestH\000R\004site\022;\n\003tag\030\t \001(\0132\'.kentik.synt"
    "hetics.v202101beta1.TagTestH\000R\003tag\022;\n\003dn"
    "s\030\n \001(\0132\'.kentik.synthetics.v202101beta1"
    ".DnsTestH\000R\003dns\022;\n\003url\030\013 \001(\0132\'.kentik.sy"
    "nthetics.v202101beta1.UrlTestH\000R\003url\022M\n\014"
    "network_grid\030# \001(\0132(.kentik.synthetics.v"
    "202101beta1.GridTestH\000R\013networkGrid\022F\n\tp"
    "age_load\030$ \001(\0132\'.kentik.synthetics.v2021"
    "01beta1.UrlTestH\000R\010pageLoad\022H\n\010dns_grid\030"
    "% \001(\0132+.kentik.synthetics.v202101beta1.D"
    "nsGridTestH\000R\007dnsGrid\022`\n\020application_mes"
    "h\030& \001(\01323.kentik.synthetics.v202101beta1"
    ".ApplicationMeshTestH\000R\017applicationMesh\022"
    "\033\n\tagent_ids\030\016 \003(\tR\010agentIds\022\026\n\006period\030\017"
    " \001(\rR\006period\022\024\n\005count\030\020 \001(\rR\005count\022\026\n\006ex"
    "piry\030\021 \001(\rR\006expiry\022\024\n\005limit\030\022 \001(\rR\005limit"
    "\022\024\n\005tasks\030\023 \003(\tR\005tasks\022W\n\017health_setting"
    "s\030\026 \001(\0132..kentik.synthetics.v202101beta1"
    ".HealthSettingsR\016healthSettings\022g\n\023monit"
    "oring_settings\030\030 \001(\01326.kentik.synthetics"
    ".v202101beta1.TestMonitoringSettingsR\022mo"
    "nitoringSettings\022D\n\004ping\030\034 \001(\01320.kentik."
    "synthetics.v202101beta1.TestPingSettings"
    "R\004ping\022G\n\005trace\030\035 \001(\01321.kentik.synthetic"
    "s.v202101beta1.TestTraceSettingsR\005trace\022"
    "\022\n\004port\030\027 \001(\rR\004port\022\032\n\010protocol\030\032 \001(\tR\010p"
    "rotocol\022@\n\006family\030\033 \001(\0162(.kentik.synthet"
    "ics.v202101beta1.IPFamilyR\006family\022\030\n\007ser"
    "vers\030\036 \003(\tR\007servers\022 \n\014use_local_ip\030\037 \001("
    "\010R\nuseLocalIp\022\036\n\nreciprocal\030  \001(\010R\nrecip"
    "rocal\022!\n\014rollup_level\030! \001(\rR\013rollupLevel"
    "\022>\n\004http\030\" \001(\0132*.kentik.synthetics.v2021"
    "01beta1.HTTPConfigR\004httpB\014\n\ndefinition\"\265"
    "\001\n\021TestTraceSettings\022\026\n\006period\030\001 \001(\002R\006pe"
    "riod\022\024\n\005count\030\002 \001(\002R\005count\022\032\n\010protocol\030\003"
    " \001(\tR\010protocol\022\022\n\004port\030\004 \001(\002R\004port\022\026\n\006ex"
    "piry\030\005 \001(\002R\006expiry\022\024\n\005limit\030\006 \001(\002R\005limit"
    "\022\024\n\005delay\030\007 \001(\002R\005delay\"n\n\020TestPingSettin"
    "gs\022\026\n\006period\030\001 \001(\002R\006period\022\024\n\005count\030\002 \001("
    "\002R\005count\022\026\n\006expiry\030\003 \001(\002R\006expiry\022\024\n\005dela"
    "y\030\004 \001(\002R\005delay\"\230\002\n\026TestMonitoringSetting"
    "s\0226\n\027activation_grace_period\030\001 \001(\tR\025acti"
    "vationGracePeriod\0220\n\024activation_time_uni"
    "t\030\002 \001(\tR\022activationTimeUnit\0224\n\026activatio"
    "n_time_window\030\003 \001(\tR\024activationTimeWindo"
    "w\022)\n\020activation_times\030\004 \001(\tR\017activationT"
    "imes\0223\n\025notification_channels\030\005 \003(\tR\024not"
    "ificationChannels\"\246\006\n\016HealthSettings\022)\n\020"
    "latency_critical\030\001 \001(\002R\017latencyCritical\022"
    "\'\n\017latency_warning\030\002 \001(\002R\016latencyWarning"
    "\0220\n\024packet_loss_critical\030\003 \001(\002R\022packetLo"
    "ssCritical\022.\n\023packet_loss_warning\030\004 \001(\002R"
    "\021packetLossWarning\022\'\n\017jitter_critical\030\005 "
    "\001(\002R\016jitterCritical\022%\n\016jitter_warning\030\006 "
    "\001(\002R\rjitterWarning\0222\n\025http_latency_criti"
    "cal\030\007 \001(\002R\023httpLatencyCritical\0220\n\024http_l"
    "atency_warning\030\010 \001(\002R\022httpLatencyWarning"
    "\022(\n\020http_valid_codes\030\t \003(\rR\016httpValidCod"
    "es\022&\n\017dns_valid_codes\030\n \003(\rR\rdnsValidCod"
    "es\0226\n\027latency_critical_stddev\030\013 \001(\002R\025lat"
    "encyCriticalStddev\0224\n\026latency_warning_st"
    "ddev\030\014 \001(\002R\024latencyWarningStddev\0224\n\026jitt"
    "er_critical_stddev\030\r \001(\002R\024jitterCritical"
    "Stddev\0222\n\025jitter_warning_stddev\030\016 \001(\002R\023j"
    "itterWarningStddev\022\?\n\034http_latency_criti"
    "cal_stddev\030\017 \001(\002R\031httpLatencyCriticalStd"
    "dev\022=\n\033http_latency_warning_stddev\030\020 \001(\002"
    "R\030httpLatencyWarningStddev\"&\n\014HostnameTe"
    "st\022\026\n\006target\030\001 \001(\tR\006target\"\"\n\006IpTest\022\030\n\007"
    "targets\030\001 \003(\tR\007targets\"#\n\tAgentTest\022\026\n\006t"
    "arget\030\001 \001(\tR\006target\"\335\001\n\010FlowTest\022\026\n\006targ"
    "et\030\001 \001(\tR\006target\022C\n\036target_refresh_inter"
    "val_millis\030\002 \001(\rR\033targetRefreshIntervalM"
    "illis\022\033\n\tmax_tasks\030\003 \001(\rR\010maxTasks\022\022\n\004ty"
    "pe\030\004 \001(\tR\004type\022%\n\016inet_direction\030\005 \001(\tR\r"
    "inetDirection\022\034\n\tdirection\030\006 \001(\tR\tdirect"
    "ion\"\"\n\010SiteTest\022\026\n\006target\030\001 \001(\tR\006target\""
    "!\n\007TagTest\022\026\n\006target\030\001 \001(\tR\006target\"`\n\007Dn"
    "sTest\022\026\n\006target\030\001 \001(\tR\006target\022=\n\004type\030\002 "
    "\001(\0162).kentik.synthetics.v202101beta1.DNS"
    "RecordR\004type\"!\n\007UrlTest\022\026\n\006target\030\001 \001(\tR"
    "\006target\"$\n\010GridTest\022\030\n\007targets\030\001 \003(\tR\007ta"
    "rgets\"f\n\013DnsGridTest\022\030\n\007targets\030\001 \003(\tR\007t"
    "argets\022=\n\004type\030\002 \001(\0162).kentik.synthetics"
    ".v202101beta1.DNSRecordR\004type\"\025\n\023Applica"
    "tionMeshTest\"\271\001\n\014MeshResponse\022\016\n\002id\030\001 \001("
    "\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022\031\n\010local_ip\030\003 "
    "\001(\tR\007localIp\022\016\n\002ip\030\004 \001(\tR\002ip\022\024\n\005alias\030\005 "
    "\001(\tR\005alias\022D\n\007columns\030\006 \003(\0132*.kentik.syn"
    "thetics.v202101beta1.MeshColumnR\007columns"
    "\"\352\001\n\nMeshColumn\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030"
    "\002 \001(\tR\004name\022\024\n\005alias\030\003 \001(\tR\005alias\022\026\n\006tar"
    "get\030\004 \001(\tR\006target\022E\n\007metrics\030\005 \001(\0132+.ken"
    "tik.synthetics.v202101beta1.MeshMetricsR"
    "\007metrics\022C\n\006health\030\006 \003(\0132+.kentik.synthe"
    "tics.v202101beta1.MeshMetricsR\006health\"N\n"
    "\nMeshMetric\022\022\n\004name\030\001 \001(\tR\004name\022\026\n\006healt"
    "h\030\002 \001(\tR\006health\022\024\n\005value\030\003 \001(\003R\005value\"\224\002"
    "\n\013MeshMetrics\022.\n\004time\030\001 \001(\0132\032.google.pro"
    "tobuf.TimestampR\004time\022D\n\007latency\030\002 \001(\0132*"
    ".kentik.synthetics.v202101beta1.MeshMetr"
    "icR\007latency\022K\n\013packet_loss\030\003 \001(\0132*.kenti"
    "k.synthetics.v202101beta1.MeshMetricR\npa"
    "cketLoss\022B\n\006jitter\030\004 \001(\0132*.kentik.synthe"
    "tics.v202101beta1.MeshMetricR\006jitter\")\n\003"
    "ASN\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004name\""
    "1\n\007Country\022\022\n\004code\030\001 \001(\tR\004code\022\022\n\004name\030\002"
    " \001(\tR\004name\",\n\006Region\022\016\n\002id\030\001 \001(\003R\002id\022\022\n\004"
    "name\030\002 \001(\tR\004name\"d\n\004City\022\016\n\002id\030\001 \001(\tR\002id"
    "\022\022\n\004name\030\002 \001(\tR\004name\022\032\n\010latitude\030\010 \001(\001R\010"
    "latitude\022\034\n\tlongitude\030\t \001(\001R\tlongitude\"\302"
    "\001\n\003Geo\022A\n\007country\030\001 \001(\0132\'.kentik.synthet"
    "ics.v202101beta1.CountryR\007country\022>\n\006reg"
    "ion\030\002 \001(\0132&.kentik.synthetics.v202101bet"
    "a1.RegionR\006region\0228\n\004city\030\003 \001(\0132$.kentik"
    ".synthetics.v202101beta1.CityR\004city\"\031\n\003D"
    "NS\022\022\n\004name\030\001 \001(\tR\004name\"\213\002\n\006IPInfo\022\016\n\002ip\030"
    "\001 \001(\tR\002ip\0225\n\003asn\030\002 \001(\0132#.kentik.syntheti"
    "cs.v202101beta1.ASNR\003asn\0225\n\003geo\030\003 \001(\0132#."
    "kentik.synthetics.v202101beta1.GeoR\003geo\022"
    "5\n\003dns\030\004 \001(\0132#.kentik.synthetics.v202101"
    "beta1.DNSR\003dns\022\033\n\tdevice_id\030\005 \001(\tR\010devic"
    "eId\022\027\n\007site_id\030\006 \001(\tR\006siteId\022\026\n\006egress\030\007"
    " \001(\tR\006egress\"(\n\006IDByIP\022\016\n\002id\030\001 \001(\tR\002id\022\016"
    "\n\002ip\030\002 \001(\tR\002ip\"\253\003\n\020TracerouteLookup\022K\n\016a"
    "gent_id_by_ip\030\001 \003(\0132&.kentik.synthetics."
    "v202101beta1.IDByIPR\013agentIdByIp\022=\n\006agen"
    "ts\030\002 \003(\0132%.kentik.synthetics.v202101beta"
    "1.AgentR\006agents\0227\n\004asns\030\003 \003(\0132#.kentik.s"
    "ynthetics.v202101beta1.ASNR\004asns\022M\n\017devi"
    "ce_id_by_ip\030\004 \003(\0132&.kentik.synthetics.v2"
    "02101beta1.IDByIPR\014deviceIdByIp\022I\n\rsite_"
    "id_by_ip\030\005 \003(\0132&.kentik.synthetics.v2021"
    "01beta1.IDByIPR\nsiteIdByIp\0228\n\003ips\030\006 \003(\0132"
    "&.kentik.synthetics.v202101beta1.IPInfoR"
    "\003ips\"\205\002\n\010TraceHop\022\020\n\003ttl\030\001 \001(\005R\003ttl\022\016\n\002i"
    "p\030\002 \001(\tR\002ip\022\030\n\007timeout\030\003 \001(\010R\007timeout\022\030\n"
    "\007latency\030\004 \001(\005R\007latency\0220\n\024min_expected_"
    "latency\030\005 \001(\005R\022minExpectedLatency\022\020\n\003asn"
    "\030\006 \001(\005R\003asn\022\022\n\004site\030\007 \001(\005R\004site\022\026\n\006regio"
    "n\030\010 \001(\005R\006region\022\026\n\006target\030\t \001(\010R\006target\022"
    "\033\n\ttrace_end\030\n \001(\010R\010traceEnd\"\334\001\n\nTracePr"
    "obe\022\027\n\007as_path\030\001 \003(\005R\006asPath\022\034\n\tcomplete"
    "d\030\002 \001(\010R\tcompleted\022\033\n\thop_count\030\003 \001(\005R\010h"
    "opCount\022\037\n\013region_path\030\004 \003(\tR\nregionPath"
    "\022\033\n\tsite_path\030\005 \003(\005R\010sitePath\022<\n\004hops\030\006 "
    "\003(\0132(.kentik.synthetics.v202101beta1.Tra"
    "ceHopR\004hops\"\273\001\n\005Trace\022\031\n\010agent_id\030\001 \001(\tR"
    "\007agentId\022\031\n\010agent_ip\030\002 \001(\tR\007agentIp\022\033\n\tt"
    "arget_ip\030\003 \001(\tR\010targetIp\022\033\n\thop_count\030\004 "
    "\001(\005R\010hopCount\022B\n\006probes\030\005 \003(\0132*.kentik.s"
    "ynthetics.v202101beta1.TraceProbeR\006probe"
    "s\"I\n\005Stats\022\030\n\007average\030\001 \001(\005R\007average\022\020\n\003"
    "max\030\002 \001(\005R\003max\022\024\n\005total\030\003 \001(\005R\005total\"\236\002\n"
    "\020TracerouteResult\022.\n\004time\030\001 \001(\0132\032.google"
    ".protobuf.TimestampR\004time\022=\n\006traces\030\002 \003("
    "\0132%.kentik.synthetics.v202101beta1.Trace"
    "R\006traces\022\033\n\thop_count\030\003 \001(\005R\010hopCount\022;\n"
    "\005count\030\004 \001(\0132%.kentik.synthetics.v202101"
    "beta1.StatsR\005count\022A\n\010distance\030\005 \001(\0132%.k"
    "entik.synthetics.v202101beta1.StatsR\010dis"
    "tance\"\332\001\n\016TracerouteInfo\0229\n\031is_trace_rou"
    "tes_truncated\030\001 \001(\010R\026isTraceRoutesTrunca"
    "ted\022+\n\022max_asn_path_count\030\002 \001(\005R\017maxAsnP"
    "athCount\022-\n\023max_site_path_count\030\003 \001(\005R\020m"
    "axSitePathCount\0221\n\025max_region_path_count"
    "\030\004 \001(\005R\022maxRegionPathCount\"\360\001\n\030GetHealth"
    "ForTestsRequest\022\020\n\003ids\030\001 \003(\tR\003ids\0229\n\nsta"
    "rt_time\030\002 \001(\0132\032.google.protobuf.Timestam"
    "pR\tstartTime\0225\n\010end_time\030\003 \001(\0132\032.google."
    "protobuf.TimestampR\007endTime\022\033\n\tagent_ids"
    "\030\004 \003(\tR\010agentIds\022\031\n\010task_ids\030\005 \003(\tR\007task"
    "Ids\022\030\n\007augment\030\006 \001(\010R\007augment\"_\n\031GetHeal"
    "thForTestsResponse\022B\n\006health\030\001 \003(\0132*.ken"
    "tik.synthetics.v202101beta1.TestHealthR\006"
    "health\"\326\001\n\026GetTraceForTestRequest\022\016\n\002id\030"
    "\001 \001(\tR\002id\0229\n\nstart_time\030\002 \001(\0132\032.google.p"
    "rotobuf.TimestampR\tstartTime\0225\n\010end_time"
    "\030\003 \001(\0132\032.google.protobuf.TimestampR\007endT"
    "ime\022\033\n\tagent_ids\030\004 \003(\tR\010agentIds\022\035\n\ntarg"
    "et_ips\030\005 \003(\tR\ttargetIps\"\226\002\n\027GetTraceForT"
    "estResponse\022J\n\007lookups\030\001 \001(\01320.kentik.sy"
    "nthetics.v202101beta1.TracerouteLookupR\007"
    "lookups\022S\n\014trace_routes\030\002 \003(\01320.kentik.s"
    "ynthetics.v202101beta1.TracerouteResultR"
    "\013traceRoutes\022Z\n\021trace_routes_info\030\003 \001(\0132"
    "..kentik.synthetics.v202101beta1.Tracero"
    "uteInfoR\017traceRoutesInfo\"\023\n\021ListAgentsRe"
    "quest\"\205\001\n\022ListAgentsResponse\022=\n\006agents\030\001"
    " \003(\0132%.kentik.synthetics.v202101beta1.Ag"
    "entR\006agents\0220\n\024invalid_agents_count\030\002 \001("
    "\rR\022invalidAgentsCount\"!\n\017GetAgentRequest"
    "\022\016\n\002id\030\001 \001(\tR\002id\"O\n\020GetAgentResponse\022;\n\005"
    "agent\030\001 \001(\0132%.kentik.synthetics.v202101b"
    "eta1.AgentR\005agent\"\200\001\n\021PatchAgentRequest\022"
    ";\n\005agent\030\001 \001(\0132%.kentik.synthetics.v2021"
    "01beta1.AgentR\005agent\022.\n\004mask\030\002 \001(\0132\032.goo"
    "gle.protobuf.FieldMaskR\004mask\"Q\n\022PatchAge"
    "ntResponse\022;\n\005agent\030\001 \001(\0132%.kentik.synth"
    "etics.v202101beta1.AgentR\005agent\"$\n\022Delet"
    "eAgentRequest\022\016\n\002id\030\001 \001(\tR\002id\"\025\n\023DeleteA"
    "gentResponse\"*\n\020ListTestsRequest\022\026\n\006pres"
    "et\030\001 \001(\010R\006preset\"\177\n\021ListTestsResponse\022:\n"
    "\005tests\030\001 \003(\0132$.kentik.synthetics.v202101"
    "beta1.TestR\005tests\022.\n\023invalid_tests_count"
    "\030\002 \001(\rR\021invalidTestsCount\"M\n\021CreateTestR"
    "equest\0228\n\004test\030\001 \001(\0132$.kentik.synthetics"
    ".v202101beta1.TestR\004test\"N\n\022CreateTestRe"
    "sponse\0228\n\004test\030\001 \001(\0132$.kentik.synthetics"
    ".v202101beta1.TestR\004test\" \n\016GetTestReque"
    "st\022\016\n\002id\030\001 \001(\tR\002id\"K\n\017GetTestResponse\0228\n"
    "\004test\030\001 \001(\0132$.kentik.synthetics.v202101b"
    "eta1.TestR\004test\"j\n\024SetTestStatusRequest\022"
    "\016\n\002id\030\001 \001(\tR\002id\022B\n\006status\030\002 \001(\0162*.kentik"
    ".synthetics.v202101beta1.TestStatusR\006sta"
    "tus\"\027\n\025SetTestStatusResponse\"|\n\020PatchTes"
    "tRequest\0228\n\004test\030\001 \001(\0132$.kentik.syntheti"
    "cs.v202101beta1.TestR\004test\022.\n\004mask\030\002 \001(\013"
    "2\032.google.protobuf.FieldMaskR\004mask\"M\n\021Pa"
    "tchTestResponse\0228\n\004test\030\001 \001(\0132$.kentik.s"
    "ynthetics.v202101beta1.TestR\004test\"#\n\021Del"
    "eteTestRequest\022\016\n\002id\030\001 \001(\tR\002id\"\024\n\022Delete"
    "TestResponse*a\n\rImplementType\022\036\n\032IMPLEME"
    "NT_TYPE_UNSPECIFIED\020\000\022\027\n\023IMPLEMENT_TYPE_"
    "RUST\020\001\022\027\n\023IMPLEMENT_TYPE_NODE\020\002*]\n\010IPFam"
    "ily\022\031\n\025IP_FAMILY_UNSPECIFIED\020\000\022\020\n\014IP_FAM"
    "ILY_V4\020\001\022\020\n\014IP_FAMILY_V6\020\002\022\022\n\016IP_FAMILY_"
    "DUAL\020\003*r\n\nTestStatus\022\033\n\027TEST_STATUS_UNSP"
    "ECIFIED\020\000\022\026\n\022TEST_STATUS_ACTIVE\020\001\022\026\n\022TES"
    "T_STATUS_PAUSED\020\002\022\027\n\023TEST_STATUS_DELETED"
    "\020\003*q\n\013AgentStatus\022\034\n\030AGENT_STATUS_UNSPEC"
    "IFIED\020\000\022\023\n\017AGENT_STATUS_OK\020\001\022\025\n\021AGENT_ST"
    "ATUS_WAIT\020\002\022\030\n\024AGENT_STATUS_DELETED\020\003*o\n"
    "\tTaskState\022\032\n\026TASK_STATE_UNSPECIFIED\020\000\022\026"
    "\n\022TASK_STATE_CREATED\020\001\022\026\n\022TASK_STATE_UPD"
    "ATED\020\002\022\026\n\022TASK_STATE_DELETED\020\003*\310\001\n\tDNSRe"
    "cord\022\032\n\026DNS_RECORD_UNSPECIFIED\020\000\022\020\n\014DNS_"
    "RECORD_A\020\001\022\023\n\017DNS_RECORD_AAAA\020\002\022\024\n\020DNS_R"
    "ECORD_CNAME\020\003\022\024\n\020DNS_RECORD_DNAME\020\004\022\021\n\rD"
    "NS_RECORD_NS\020\005\022\021\n\rDNS_RECORD_MX\020\006\022\022\n\016DNS"
    "_RECORD_PTR\020\007\022\022\n\016DNS_RECORD_SOA\020\0102\330\005\n\025Sy"
    "ntheticsDataService\022\334\002\n\021GetHealthForTest"
    "s\0228.kentik.synthetics.v202101beta1.GetHe"
    "althForTestsRequest\0329.kentik.synthetics."
    "v202101beta1.GetHealthForTestsResponse\"\321"
    "\001\222A\212\001\022&Get health status for synthetics "
    "test.\032MGet synthetics health test for lo"
    "gin user. Also returns mesh data on requ"
    "est.*\021GetHealthForTests\362\327\002\017synthetics:re"
    "ad\202\323\344\223\002*\"%/synthetics/v202101beta1/healt"
    "h/tests:\001*\022\257\002\n\017GetTraceForTest\0226.kentik."
    "synthetics.v202101beta1.GetTraceForTestR"
    "equest\0327.kentik.synthetics.v202101beta1."
    "GetTraceForTestResponse\"\252\001\222AX\022\025Get trace"
    " route data.\032.Get trace route data for t"
    "he specific test id.*\017GetTraceForTest\362\327\002"
    "\017synthetics:read\202\323\344\223\0026\"1/synthetics/v202"
    "101beta1/tests/{id}/results/trace:\001*\032.\312A"
    "\031synthetics.api.kentik.com\352\327\002\nsynthetics"
    "\220\330\002\0032\355\026\n\026SyntheticsAdminService\022\355\001\n\nList"
    "Agents\0221.kentik.synthetics.v202101beta1."
    "ListAgentsRequest\0322.kentik.synthetics.v2"
    "02101beta1.ListAgentsResponse\"x\222A5\022\014List"
    " Agents.\032\031Returns a list of agents.*\nAge"
    "ntsList\362\327\002\025admin.synthetics:read\202\323\344\223\002!\022\037"
    "/synthetics/v202101beta1/agents\022\233\002\n\010GetA"
    "gent\022/.kentik.synthetics.v202101beta1.Ge"
    "tAgentRequest\0320.kentik.synthetics.v20210"
    "1beta1.GetAgentResponse\"\253\001\222Ac\022\037Get infor"
    "mation about an agent.\0326Returns informat"
    "ion about the agent specified with id.*\010"
    "AgentGet\362\327\002\025admin.synthetics:read\202\323\344\223\002&\022"
    "$/synthetics/v202101beta1/agents/{id}\022\272\002"
    "\n\nPatchAgent\0221.kentik.synthetics.v202101"
    "beta1.PatchAgentRequest\0322.kentik.synthet"
    "ics.v202101beta1.PatchAgentResponse\"\304\001\222A"
    "r\022\017Patch an agent.\032SPartially Updates th"
    "e attributes of agent specified with id "
    "and update_mask fields.*\nAgentPatch\362\327\002\026a"
    "dmin.synthetics:write\202\323\344\223\002/2*/synthetics"
    "/v202101beta1/agents/{agent.id}:\001*\022\207\002\n\013D"
    "eleteAgent\0222.kentik.synthetics.v202101be"
    "ta1.DeleteAgentRequest\0323.kentik.syntheti"
    "cs.v202101beta1.DeleteAgentResponse\"\216\001\222A"
    "E\022\020Delete an agent.\032$Deletes the agent s"
    "pecified with id.*\013AgentDelete\362\327\002\026admin."
    "synthetics:write\202\323\344\223\002&*$/synthetics/v202"
    "101beta1/agents/{id}\022\375\001\n\tListTests\0220.ken"
    "tik.synthetics.v202101beta1.ListTestsReq"
    "uest\0321.kentik.synthetics.v202101beta1.Li"
    "stTestsResponse\"\212\001\222AH\022\026List Synthetics T"
    "ests.\032#Returns a list of syntehtics test"
    "s.*\tTestsList\362\327\002\025admin.synthetics:read\202\323"
    "\344\223\002 \022\036/synthetics/v202101beta1/tests\022\235\002\n"
    "\nCreateTest\0221.kentik.synthetics.v202101b"
    "eta1.CreateTestRequest\0322.kentik.syntheti"
    "cs.v202101beta1.CreateTestResponse\"\247\001\222Aa"
    "\022\027Create Synthetics Test.\032:Create synthe"
    "tics test from request. Returns created "
    "test.*\nTestCreate\362\327\002\026admin.synthetics:wr"
    "ite\202\323\344\223\002#\"\036/synthetics/v202101beta1/test"
    "s:\001*\022\250\002\n\007GetTest\022..kentik.synthetics.v20"
    "2101beta1.GetTestRequest\032/.kentik.synthe"
    "tics.v202101beta1.GetTestResponse\"\273\001\222At\022"
    "&Get information about Synthetics Test.\032"
    "AReturns information about synthetics te"
    "st specified with test ID.*\007TestGet\362\327\002\025a"
    "dmin.synthetics:read\202\323\344\223\002%\022#/synthetics/"
    "v202101beta1/tests/{id}\022\230\002\n\rSetTestStatu"
    "s\0224.kentik.synthetics.v202101beta1.SetTe"
    "stStatusRequest\0325.kentik.synthetics.v202"
    "101beta1.SetTestStatusResponse\"\231\001\222AG\022\025Up"
    "date a test status.\032\034Update the status o"
    "f a test.*\020TestStatusUpdate\362\327\002\026admin.syn"
    "thetics:write\202\323\344\223\002/\032*/synthetics/v202101"
    "beta1/tests/{id}/status:\001*\022\310\002\n\tPatchTest"
    "\0220.kentik.synthetics.v202101beta1.PatchT"
    "estRequest\0321.kentik.synthetics.v202101be"
    "ta1.PatchTestResponse\"\325\001\222A\204\001\022\030Patch a Sy"
    "nthetics Test.\032]Partially Updates the at"
    "tributes of synthetics test specified wi"
    "th id and update_mask fields.*\tTestPatch"
    "\362\327\002\026admin.synthetics:write\202\323\344\223\002-2(/synth"
    "etics/v202101beta1/tests/{test.id}:\001*\022\226\002"
    "\n\nDeleteTest\0221.kentik.synthetics.v202101"
    "beta1.DeleteTestRequest\0322.kentik.synthet"
    "ics.v202101beta1.DeleteTestResponse\"\240\001\222A"
    "X\022\032Delete an Synthetics Test.\032.Deletes t"
    "he synthetics test specified with id.*\nT"
    "estDelete\362\327\002\026admin.synthetics:write\202\323\344\223\002"
    "%*#/synthetics/v202101beta1/tests/{id}\0324"
    "\312A\031synthetics.api.kentik.com\352\327\002\020admin.sy"
    "nthetics\220\330\002\003B\362\003ZTgithub.com/kentik/api-s"
    "chema-public/gen/go/kentik/synthetics/v2"
    "02101beta1;synthetics\222A\230\003\022\256\001\n\031Synthetics"
    " Monitoring API\022K--- This API has been d"
    "eprecated and will be removed in the nea"
    "r future ---\"7\n\026Kentik API Engineering\022\035"
    "https://github.com/kentik/api2\013202101bet"
    "a1*\001\0022\020application/json:\020application/jso"
    "nZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Email \002\n\"\n\005t"
    "oken\022\031\010\002\032\023X-CH-Auth-API-Token \002b\026\n\t\n\005ema"
    "il\022\000\n\t\n\005token\022\000r`\n\"Kentik synthetic moni"
    "toring system\022:https://kb.kentik.com/v4/"
    "Ma00.htm#Ma00-Synthetics_Overviewb\006proto"
    "3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_deps[6] =
    {
        &::descriptor_table_google_2fapi_2fannotations_2eproto,
        &::descriptor_table_google_2fapi_2fclient_2eproto,
        &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
        &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::absl::once_flag descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto = {
    false,
    false,
    19721,
    descriptor_table_protodef_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    "kentik/synthetics/v202101beta1/synthetics.proto",
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_once,
    descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_deps,
    6,
    79,
    schemas,
    file_default_instances,
    TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto::offsets,
    file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    file_level_service_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
};
namespace kentik {
namespace synthetics {
namespace v202101beta1 {
const ::google::protobuf::EnumDescriptor* ImplementType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t ImplementType_internal_data_[] = {
    196608u, 0u, };
bool ImplementType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* IPFamily_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t IPFamily_internal_data_[] = {
    262144u, 0u, };
bool IPFamily_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* TestStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t TestStatus_internal_data_[] = {
    262144u, 0u, };
bool TestStatus_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* AgentStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t AgentStatus_internal_data_[] = {
    262144u, 0u, };
bool AgentStatus_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* TaskState_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t TaskState_internal_data_[] = {
    262144u, 0u, };
bool TaskState_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* DNSRecord_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t DNSRecord_internal_data_[] = {
    589824u, 0u, };
bool DNSRecord_IsValid(int value) {
  return 0 <= value && value <= 8;
}
// ===================================================================

class Health::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Health>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Health, _impl_._has_bits_);
};

void Health::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Health::Health(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Health)
}
inline PROTOBUF_NDEBUG_INLINE Health::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::Health& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        health_(arena, from.health_) {}

Health::Health(
    ::google::protobuf::Arena* arena,
    const Health& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Health* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Health)
}
inline PROTOBUF_NDEBUG_INLINE Health::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        health_(arena) {}

inline void Health::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.time_ = {};
}
Health::~Health() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Health)
  SharedDtor(*this);
}
inline void Health::SharedDtor(MessageLite& self) {
  Health& this_ = static_cast<Health&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.health_.Destroy();
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* Health::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Health(arena);
}
constexpr auto Health::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Health),
                                            alignof(Health));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Health::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Health_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Health::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Health>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Health::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Health>(), &Health::ByteSizeLong,
            &Health::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Health, _impl_._cached_size_),
        false,
    },
    &Health::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Health::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 52, 2> Health::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Health, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Health>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Timestamp time = 2 [json_name = "time"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.time_)}},
    // string health = 1 [json_name = "health"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Health, _impl_.health_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string health = 1 [json_name = "health"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.health_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp time = 2 [json_name = "time"];
    {PROTOBUF_FIELD_OFFSET(Health, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\45\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.Health"
    "health"
  }},
};

PROTOBUF_NOINLINE void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Health)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.health_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Health::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Health& this_ = static_cast<const Health&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Health::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Health& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Health)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string health = 1 [json_name = "health"];
          if (!this_._internal_health().empty()) {
            const std::string& _s = this_._internal_health();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Health.health");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 2 [json_name = "time"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Health)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Health::ByteSizeLong(const MessageLite& base) {
          const Health& this_ = static_cast<const Health&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Health::ByteSizeLong() const {
          const Health& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Health)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string health = 1 [json_name = "health"];
            if (!this_._internal_health().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_health());
            }
          }
           {
            // .google.protobuf.Timestamp time = 2 [json_name = "time"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Health::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Health*>(&to_msg);
  auto& from = static_cast<const Health&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Health)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_health().empty()) {
    _this->_internal_set_health(from._internal_health());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.time_ != nullptr);
    if (_this->_impl_.time_ == nullptr) {
      _this->_impl_.time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
    } else {
      _this->_impl_.time_->MergeFrom(*from._impl_.time_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Health::InternalSwap(Health* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.health_, &other->_impl_.health_, arena);
  swap(_impl_.time_, other->_impl_.time_);
}

::google::protobuf::Metadata Health::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AgentTaskConfig::_Internal {
 public:
};

AgentTaskConfig::AgentTaskConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.AgentTaskConfig)
}
inline PROTOBUF_NDEBUG_INLINE AgentTaskConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::AgentTaskConfig& from_msg)
      : targets_{visibility, arena, from.targets_},
        _cached_size_{0} {}

AgentTaskConfig::AgentTaskConfig(
    ::google::protobuf::Arena* arena,
    const AgentTaskConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AgentTaskConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.AgentTaskConfig)
}
inline PROTOBUF_NDEBUG_INLINE AgentTaskConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : targets_{visibility, arena},
        _cached_size_{0} {}

inline void AgentTaskConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
AgentTaskConfig::~AgentTaskConfig() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.AgentTaskConfig)
  SharedDtor(*this);
}
inline void AgentTaskConfig::SharedDtor(MessageLite& self) {
  AgentTaskConfig& this_ = static_cast<AgentTaskConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* AgentTaskConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AgentTaskConfig(arena);
}
constexpr auto AgentTaskConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AgentTaskConfig, _impl_.targets_) +
          decltype(AgentTaskConfig::_impl_.targets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AgentTaskConfig), alignof(AgentTaskConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AgentTaskConfig::PlacementNew_,
                                 sizeof(AgentTaskConfig),
                                 alignof(AgentTaskConfig));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AgentTaskConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AgentTaskConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AgentTaskConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AgentTaskConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AgentTaskConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AgentTaskConfig>(), &AgentTaskConfig::ByteSizeLong,
            &AgentTaskConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AgentTaskConfig, _impl_._cached_size_),
        false,
    },
    &AgentTaskConfig::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AgentTaskConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 62, 2> AgentTaskConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::AgentTaskConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string targets = 2 [json_name = "targets"];
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AgentTaskConfig, _impl_.targets_)}},
    // uint64 id = 1 [json_name = "id"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AgentTaskConfig, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AgentTaskConfig, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(AgentTaskConfig, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // repeated string targets = 2 [json_name = "targets"];
    {PROTOBUF_FIELD_OFFSET(AgentTaskConfig, _impl_.targets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\56\0\7\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.AgentTaskConfig"
    "targets"
  }},
};

PROTOBUF_NOINLINE void AgentTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  _impl_.id_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AgentTaskConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AgentTaskConfig& this_ = static_cast<const AgentTaskConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AgentTaskConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AgentTaskConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 id = 1 [json_name = "id"];
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_id(), target);
          }

          // repeated string targets = 2 [json_name = "targets"];
          for (int i = 0, n = this_._internal_targets_size(); i < n; ++i) {
            const auto& s = this_._internal_targets().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.AgentTaskConfig.targets");
            target = stream->WriteString(2, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.AgentTaskConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AgentTaskConfig::ByteSizeLong(const MessageLite& base) {
          const AgentTaskConfig& this_ = static_cast<const AgentTaskConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AgentTaskConfig::ByteSizeLong() const {
          const AgentTaskConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string targets = 2 [json_name = "targets"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_targets().size());
              for (int i = 0, n = this_._internal_targets().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_targets().Get(i));
              }
            }
          }
           {
            // uint64 id = 1 [json_name = "id"];
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AgentTaskConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AgentTaskConfig*>(&to_msg);
  auto& from = static_cast<const AgentTaskConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_targets()->MergeFrom(from._internal_targets());
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AgentTaskConfig::CopyFrom(const AgentTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AgentTaskConfig::InternalSwap(AgentTaskConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata AgentTaskConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestHealth::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TestHealth>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TestHealth, _impl_._has_bits_);
};

TestHealth::TestHealth(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestHealth)
}
inline PROTOBUF_NDEBUG_INLINE TestHealth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TestHealth& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        tasks_{visibility, arena, from.tasks_},
        health_ts_{visibility, arena, from.health_ts_},
        agent_task_config_{visibility, arena, from.agent_task_config_},
        mesh_{visibility, arena, from.mesh_},
        test_id_(arena, from.test_id_) {}

TestHealth::TestHealth(
    ::google::protobuf::Arena* arena,
    const TestHealth& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestHealth* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.overall_health_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Health>(
                              arena, *from._impl_.overall_health_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestHealth)
}
inline PROTOBUF_NDEBUG_INLINE TestHealth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        tasks_{visibility, arena},
        health_ts_{visibility, arena},
        agent_task_config_{visibility, arena},
        mesh_{visibility, arena},
        test_id_(arena) {}

inline void TestHealth::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.overall_health_ = {};
}
TestHealth::~TestHealth() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestHealth)
  SharedDtor(*this);
}
inline void TestHealth::SharedDtor(MessageLite& self) {
  TestHealth& this_ = static_cast<TestHealth&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.test_id_.Destroy();
  delete this_._impl_.overall_health_;
  this_._impl_.~Impl_();
}

inline void* TestHealth::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestHealth(arena);
}
constexpr auto TestHealth::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.tasks_) +
          decltype(TestHealth::_impl_.tasks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.health_ts_) +
          decltype(TestHealth::_impl_.health_ts_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.agent_task_config_) +
          decltype(TestHealth::_impl_.agent_task_config_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.mesh_) +
          decltype(TestHealth::_impl_.mesh_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TestHealth), alignof(TestHealth), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TestHealth::PlacementNew_,
                                 sizeof(TestHealth),
                                 alignof(TestHealth));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestHealth::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestHealth_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestHealth::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestHealth>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestHealth::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestHealth>(), &TestHealth::ByteSizeLong,
            &TestHealth::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestHealth, _impl_._cached_size_),
        false,
    },
    &TestHealth::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestHealth::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 5, 57, 2> TestHealth::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestHealth, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestHealth>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string test_id = 1 [json_name = "testId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.test_id_)}},
    // repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2 [json_name = "tasks"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.tasks_)}},
    // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 1, PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.overall_health_)}},
    // repeated .kentik.synthetics.v202101beta1.Health health_ts = 4 [json_name = "healthTs"];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 2, PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.health_ts_)}},
    // repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5 [json_name = "agentTaskConfig"];
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 3, PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.agent_task_config_)}},
    // repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6 [json_name = "mesh"];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 4, PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.mesh_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string test_id = 1 [json_name = "testId"];
    {PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.test_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2 [json_name = "tasks"];
    {PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.tasks_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
    {PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.overall_health_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.Health health_ts = 4 [json_name = "healthTs"];
    {PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.health_ts_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5 [json_name = "agentTaskConfig"];
    {PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.agent_task_config_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6 [json_name = "mesh"];
    {PROTOBUF_FIELD_OFFSET(TestHealth, _impl_.mesh_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TaskHealth>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Health>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Health>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::AgentTaskConfig>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshResponse>()},
  }}, {{
    "\51\7\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.TestHealth"
    "test_id"
  }},
};

PROTOBUF_NOINLINE void TestHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestHealth)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.health_ts_.Clear();
  _impl_.agent_task_config_.Clear();
  _impl_.mesh_.Clear();
  _impl_.test_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.overall_health_ != nullptr);
    _impl_.overall_health_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestHealth::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestHealth& this_ = static_cast<const TestHealth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestHealth::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestHealth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestHealth)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string test_id = 1 [json_name = "testId"];
          if (!this_._internal_test_id().empty()) {
            const std::string& _s = this_._internal_test_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestHealth.test_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2 [json_name = "tasks"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_tasks_size());
               i < n; i++) {
            const auto& repfield = this_._internal_tasks().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.overall_health_, this_._impl_.overall_health_->GetCachedSize(), target,
                stream);
          }

          // repeated .kentik.synthetics.v202101beta1.Health health_ts = 4 [json_name = "healthTs"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_health_ts_size());
               i < n; i++) {
            const auto& repfield = this_._internal_health_ts().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5 [json_name = "agentTaskConfig"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_agent_task_config_size());
               i < n; i++) {
            const auto& repfield = this_._internal_agent_task_config().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6 [json_name = "mesh"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_mesh_size());
               i < n; i++) {
            const auto& repfield = this_._internal_mesh().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestHealth)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestHealth::ByteSizeLong(const MessageLite& base) {
          const TestHealth& this_ = static_cast<const TestHealth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestHealth::ByteSizeLong() const {
          const TestHealth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestHealth)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2 [json_name = "tasks"];
            {
              total_size += 1UL * this_._internal_tasks_size();
              for (const auto& msg : this_._internal_tasks()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kentik.synthetics.v202101beta1.Health health_ts = 4 [json_name = "healthTs"];
            {
              total_size += 1UL * this_._internal_health_ts_size();
              for (const auto& msg : this_._internal_health_ts()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5 [json_name = "agentTaskConfig"];
            {
              total_size += 1UL * this_._internal_agent_task_config_size();
              for (const auto& msg : this_._internal_agent_task_config()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6 [json_name = "mesh"];
            {
              total_size += 1UL * this_._internal_mesh_size();
              for (const auto& msg : this_._internal_mesh()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string test_id = 1 [json_name = "testId"];
            if (!this_._internal_test_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_test_id());
            }
          }
           {
            // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.overall_health_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestHealth::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestHealth*>(&to_msg);
  auto& from = static_cast<const TestHealth&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestHealth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tasks()->MergeFrom(
      from._internal_tasks());
  _this->_internal_mutable_health_ts()->MergeFrom(
      from._internal_health_ts());
  _this->_internal_mutable_agent_task_config()->MergeFrom(
      from._internal_agent_task_config());
  _this->_internal_mutable_mesh()->MergeFrom(
      from._internal_mesh());
  if (!from._internal_test_id().empty()) {
    _this->_internal_set_test_id(from._internal_test_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.overall_health_ != nullptr);
    if (_this->_impl_.overall_health_ == nullptr) {
      _this->_impl_.overall_health_ =
          ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Health>(arena, *from._impl_.overall_health_);
    } else {
      _this->_impl_.overall_health_->MergeFrom(*from._impl_.overall_health_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestHealth::CopyFrom(const TestHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestHealth::InternalSwap(TestHealth* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  _impl_.health_ts_.InternalSwap(&other->_impl_.health_ts_);
  _impl_.agent_task_config_.InternalSwap(&other->_impl_.agent_task_config_);
  _impl_.mesh_.InternalSwap(&other->_impl_.mesh_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.test_id_, &other->_impl_.test_id_, arena);
  swap(_impl_.overall_health_, other->_impl_.overall_health_);
}

::google::protobuf::Metadata TestHealth::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TaskHealth::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TaskHealth>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_._has_bits_);
};

TaskHealth::TaskHealth(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TaskHealth)
}
inline PROTOBUF_NDEBUG_INLINE TaskHealth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TaskHealth& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        agents_{visibility, arena, from.agents_} {}

TaskHealth::TaskHealth(
    ::google::protobuf::Arena* arena,
    const TaskHealth& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TaskHealth* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.task_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Task>(
                              arena, *from._impl_.task_)
                        : nullptr;
  _impl_.overall_health_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Health>(
                              arena, *from._impl_.overall_health_)
                        : nullptr;
  _impl_.target_agent_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(
                              arena, *from._impl_.target_agent_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TaskHealth)
}
inline PROTOBUF_NDEBUG_INLINE TaskHealth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        agents_{visibility, arena} {}

inline void TaskHealth::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, task_),
           0,
           offsetof(Impl_, target_agent_) -
               offsetof(Impl_, task_) +
               sizeof(Impl_::target_agent_));
}
TaskHealth::~TaskHealth() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TaskHealth)
  SharedDtor(*this);
}
inline void TaskHealth::SharedDtor(MessageLite& self) {
  TaskHealth& this_ = static_cast<TaskHealth&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.task_;
  delete this_._impl_.overall_health_;
  delete this_._impl_.target_agent_;
  this_._impl_.~Impl_();
}

inline void* TaskHealth::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TaskHealth(arena);
}
constexpr auto TaskHealth::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.agents_) +
          decltype(TaskHealth::_impl_.agents_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TaskHealth), alignof(TaskHealth), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TaskHealth::PlacementNew_,
                                 sizeof(TaskHealth),
                                 alignof(TaskHealth));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TaskHealth::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TaskHealth_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TaskHealth::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TaskHealth>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TaskHealth::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TaskHealth>(), &TaskHealth::ByteSizeLong,
            &TaskHealth::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_._cached_size_),
        false,
    },
    &TaskHealth::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TaskHealth::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> TaskHealth::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TaskHealth>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.Agent target_agent = 4 [json_name = "targetAgent"];
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 3, PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.target_agent_)}},
    // .kentik.synthetics.v202101beta1.Task task = 1 [json_name = "task"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.task_)}},
    // repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2 [json_name = "agents"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.agents_)}},
    // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.overall_health_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Task task = 1 [json_name = "task"];
    {PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.task_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2 [json_name = "agents"];
    {PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.agents_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
    {PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.overall_health_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.Agent target_agent = 4 [json_name = "targetAgent"];
    {PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.target_agent_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Task>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::AgentHealth>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Health>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Agent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TaskHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TaskHealth)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agents_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.task_ != nullptr);
      _impl_.task_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.overall_health_ != nullptr);
      _impl_.overall_health_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.target_agent_ != nullptr);
      _impl_.target_agent_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TaskHealth::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TaskHealth& this_ = static_cast<const TaskHealth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TaskHealth::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TaskHealth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TaskHealth)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Task task = 1 [json_name = "task"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.task_, this_._impl_.task_->GetCachedSize(), target,
                stream);
          }

          // repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2 [json_name = "agents"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_agents_size());
               i < n; i++) {
            const auto& repfield = this_._internal_agents().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.overall_health_, this_._impl_.overall_health_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.Agent target_agent = 4 [json_name = "targetAgent"];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.target_agent_, this_._impl_.target_agent_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TaskHealth)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TaskHealth::ByteSizeLong(const MessageLite& base) {
          const TaskHealth& this_ = static_cast<const TaskHealth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TaskHealth::ByteSizeLong() const {
          const TaskHealth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TaskHealth)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2 [json_name = "agents"];
            {
              total_size += 1UL * this_._internal_agents_size();
              for (const auto& msg : this_._internal_agents()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kentik.synthetics.v202101beta1.Task task = 1 [json_name = "task"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.task_);
            }
            // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.overall_health_);
            }
            // .kentik.synthetics.v202101beta1.Agent target_agent = 4 [json_name = "targetAgent"];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_agent_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TaskHealth::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TaskHealth*>(&to_msg);
  auto& from = static_cast<const TaskHealth&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TaskHealth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_agents()->MergeFrom(
      from._internal_agents());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.task_ != nullptr);
      if (_this->_impl_.task_ == nullptr) {
        _this->_impl_.task_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Task>(arena, *from._impl_.task_);
      } else {
        _this->_impl_.task_->MergeFrom(*from._impl_.task_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.overall_health_ != nullptr);
      if (_this->_impl_.overall_health_ == nullptr) {
        _this->_impl_.overall_health_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Health>(arena, *from._impl_.overall_health_);
      } else {
        _this->_impl_.overall_health_->MergeFrom(*from._impl_.overall_health_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.target_agent_ != nullptr);
      if (_this->_impl_.target_agent_ == nullptr) {
        _this->_impl_.target_agent_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(arena, *from._impl_.target_agent_);
      } else {
        _this->_impl_.target_agent_->MergeFrom(*from._impl_.target_agent_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TaskHealth::CopyFrom(const TaskHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TaskHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TaskHealth::InternalSwap(TaskHealth* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.agents_.InternalSwap(&other->_impl_.agents_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.target_agent_)
      + sizeof(TaskHealth::_impl_.target_agent_)
      - PROTOBUF_FIELD_OFFSET(TaskHealth, _impl_.task_)>(
          reinterpret_cast<char*>(&_impl_.task_),
          reinterpret_cast<char*>(&other->_impl_.task_));
}

::google::protobuf::Metadata TaskHealth::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AgentHealth::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AgentHealth>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_._has_bits_);
};

AgentHealth::AgentHealth(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.AgentHealth)
}
inline PROTOBUF_NDEBUG_INLINE AgentHealth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::AgentHealth& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        health_{visibility, arena, from.health_} {}

AgentHealth::AgentHealth(
    ::google::protobuf::Arena* arena,
    const AgentHealth& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AgentHealth* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.agent_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(
                              arena, *from._impl_.agent_)
                        : nullptr;
  _impl_.overall_health_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Health>(
                              arena, *from._impl_.overall_health_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.AgentHealth)
}
inline PROTOBUF_NDEBUG_INLINE AgentHealth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        health_{visibility, arena} {}

inline void AgentHealth::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, agent_),
           0,
           offsetof(Impl_, overall_health_) -
               offsetof(Impl_, agent_) +
               sizeof(Impl_::overall_health_));
}
AgentHealth::~AgentHealth() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.AgentHealth)
  SharedDtor(*this);
}
inline void AgentHealth::SharedDtor(MessageLite& self) {
  AgentHealth& this_ = static_cast<AgentHealth&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.agent_;
  delete this_._impl_.overall_health_;
  this_._impl_.~Impl_();
}

inline void* AgentHealth::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AgentHealth(arena);
}
constexpr auto AgentHealth::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.health_) +
          decltype(AgentHealth::_impl_.health_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AgentHealth), alignof(AgentHealth), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AgentHealth::PlacementNew_,
                                 sizeof(AgentHealth),
                                 alignof(AgentHealth));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AgentHealth::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AgentHealth_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AgentHealth::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AgentHealth>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AgentHealth::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AgentHealth>(), &AgentHealth::ByteSizeLong,
            &AgentHealth::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_._cached_size_),
        false,
    },
    &AgentHealth::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AgentHealth::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> AgentHealth::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::AgentHealth>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.agent_)}},
    // repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2 [json_name = "health"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.health_)}},
    // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.overall_health_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
    {PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.agent_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2 [json_name = "health"];
    {PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.health_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
    {PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.overall_health_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Agent>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HealthMoment>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Health>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AgentHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.AgentHealth)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.health_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.agent_ != nullptr);
      _impl_.agent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.overall_health_ != nullptr);
      _impl_.overall_health_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AgentHealth::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AgentHealth& this_ = static_cast<const AgentHealth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AgentHealth::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AgentHealth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.AgentHealth)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.agent_, this_._impl_.agent_->GetCachedSize(), target,
                stream);
          }

          // repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2 [json_name = "health"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_health_size());
               i < n; i++) {
            const auto& repfield = this_._internal_health().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.overall_health_, this_._impl_.overall_health_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.AgentHealth)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AgentHealth::ByteSizeLong(const MessageLite& base) {
          const AgentHealth& this_ = static_cast<const AgentHealth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AgentHealth::ByteSizeLong() const {
          const AgentHealth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.AgentHealth)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2 [json_name = "health"];
            {
              total_size += 1UL * this_._internal_health_size();
              for (const auto& msg : this_._internal_health()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.agent_);
            }
            // .kentik.synthetics.v202101beta1.Health overall_health = 3 [json_name = "overallHealth"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.overall_health_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AgentHealth::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AgentHealth*>(&to_msg);
  auto& from = static_cast<const AgentHealth&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.AgentHealth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_health()->MergeFrom(
      from._internal_health());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.agent_ != nullptr);
      if (_this->_impl_.agent_ == nullptr) {
        _this->_impl_.agent_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(arena, *from._impl_.agent_);
      } else {
        _this->_impl_.agent_->MergeFrom(*from._impl_.agent_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.overall_health_ != nullptr);
      if (_this->_impl_.overall_health_ == nullptr) {
        _this->_impl_.overall_health_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Health>(arena, *from._impl_.overall_health_);
      } else {
        _this->_impl_.overall_health_->MergeFrom(*from._impl_.overall_health_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AgentHealth::CopyFrom(const AgentHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.AgentHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AgentHealth::InternalSwap(AgentHealth* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.health_.InternalSwap(&other->_impl_.health_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.overall_health_)
      + sizeof(AgentHealth::_impl_.overall_health_)
      - PROTOBUF_FIELD_OFFSET(AgentHealth, _impl_.agent_)>(
          reinterpret_cast<char*>(&_impl_.agent_),
          reinterpret_cast<char*>(&other->_impl_.agent_));
}

::google::protobuf::Metadata AgentHealth::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              HealthMoment_OtherHealthsEntry_DoNotUse::HealthMoment_OtherHealthsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              HealthMoment_OtherHealthsEntry_DoNotUse::HealthMoment_OtherHealthsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              HealthMoment_OtherHealthsEntry_DoNotUse::HealthMoment_OtherHealthsEntry_DoNotUse() : SuperType() {}
              HealthMoment_OtherHealthsEntry_DoNotUse::HealthMoment_OtherHealthsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* HealthMoment_OtherHealthsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) HealthMoment_OtherHealthsEntry_DoNotUse(arena);
              }
              constexpr auto HealthMoment_OtherHealthsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HealthMoment_OtherHealthsEntry_DoNotUse),
                                                          alignof(HealthMoment_OtherHealthsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull HealthMoment_OtherHealthsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_HealthMoment_OtherHealthsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &HealthMoment_OtherHealthsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<HealthMoment_OtherHealthsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &HealthMoment_OtherHealthsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &HealthMoment_OtherHealthsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(HealthMoment_OtherHealthsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &HealthMoment_OtherHealthsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* HealthMoment_OtherHealthsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 78, 2> HealthMoment_OtherHealthsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HealthMoment_OtherHealthsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2 [json_name = "value"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment_OtherHealthsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment_OtherHealthsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment_OtherHealthsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment_OtherHealthsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\75\3\5\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.HealthMoment.OtherHealthsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class HealthMoment::_Internal {
 public:
  using HasBits =
      decltype(std::declval<HealthMoment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_._has_bits_);
};

void HealthMoment::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
HealthMoment::HealthMoment(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HealthMoment)
}
inline PROTOBUF_NDEBUG_INLINE HealthMoment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::HealthMoment& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        other_healths_{visibility, arena, from.other_healths_},
        src_ip_(arena, from.src_ip_),
        dst_ip_(arena, from.dst_ip_),
        latency_health_(arena, from.latency_health_),
        packet_loss_health_(arena, from.packet_loss_health_),
        jitter_health_(arena, from.jitter_health_),
        data_(arena, from.data_),
        task_type_(arena, from.task_type_) {}

HealthMoment::HealthMoment(
    ::google::protobuf::Arena* arena,
    const HealthMoment& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HealthMoment* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.overall_health_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Health>(
                              arena, *from._impl_.overall_health_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, packet_loss_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, packet_loss_),
           offsetof(Impl_, status_) -
               offsetof(Impl_, packet_loss_) +
               sizeof(Impl_::status_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HealthMoment)
}
inline PROTOBUF_NDEBUG_INLINE HealthMoment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        other_healths_{visibility, arena},
        src_ip_(arena),
        dst_ip_(arena),
        latency_health_(arena),
        packet_loss_health_(arena),
        jitter_health_(arena),
        data_(arena),
        task_type_(arena) {}

inline void HealthMoment::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::status_));
}
HealthMoment::~HealthMoment() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HealthMoment)
  SharedDtor(*this);
}
inline void HealthMoment::SharedDtor(MessageLite& self) {
  HealthMoment& this_ = static_cast<HealthMoment&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.src_ip_.Destroy();
  this_._impl_.dst_ip_.Destroy();
  this_._impl_.latency_health_.Destroy();
  this_._impl_.packet_loss_health_.Destroy();
  this_._impl_.jitter_health_.Destroy();
  this_._impl_.data_.Destroy();
  this_._impl_.task_type_.Destroy();
  delete this_._impl_.time_;
  delete this_._impl_.overall_health_;
  this_._impl_.~Impl_();
}

inline void* HealthMoment::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HealthMoment(arena);
}
constexpr auto HealthMoment::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.other_healths_) +
          decltype(HealthMoment::_impl_.other_healths_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.other_healths_) +
          decltype(HealthMoment::_impl_.other_healths_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(HealthMoment), alignof(HealthMoment), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HealthMoment::PlacementNew_,
                                 sizeof(HealthMoment),
                                 alignof(HealthMoment));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HealthMoment::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HealthMoment_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HealthMoment::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HealthMoment>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HealthMoment::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HealthMoment>(), &HealthMoment::ByteSizeLong,
            &HealthMoment::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_._cached_size_),
        false,
    },
    &HealthMoment::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HealthMoment::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 3, 151, 2> HealthMoment::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HealthMoment>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp time = 1 [json_name = "time"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.time_)}},
    // string src_ip = 2 [json_name = "srcIp"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.src_ip_)}},
    // string dst_ip = 3 [json_name = "dstIp"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.dst_ip_)}},
    // double packet_loss = 4 [json_name = "packetLoss"];
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.packet_loss_)}},
    // uint32 avg_latency = 5 [json_name = "avgLatency"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMoment, _impl_.avg_latency_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.avg_latency_)}},
    // uint32 avg_weighted_latency = 6 [json_name = "avgWeightedLatency"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMoment, _impl_.avg_weighted_latency_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.avg_weighted_latency_)}},
    // uint32 rolling_avg_latency = 7 [json_name = "rollingAvgLatency"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMoment, _impl_.rolling_avg_latency_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_avg_latency_)}},
    // uint32 rolling_stddev_latency = 8 [json_name = "rollingStddevLatency"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMoment, _impl_.rolling_stddev_latency_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_stddev_latency_)}},
    // uint32 rolling_avg_weighted_latency = 9 [json_name = "rollingAvgWeightedLatency"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMoment, _impl_.rolling_avg_weighted_latency_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_avg_weighted_latency_)}},
    // string latency_health = 10 [json_name = "latencyHealth"];
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.latency_health_)}},
    // string packet_loss_health = 11 [json_name = "packetLossHealth"];
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.packet_loss_health_)}},
    // .kentik.synthetics.v202101beta1.Health overall_health = 12 [json_name = "overallHealth"];
    {::_pbi::TcParser::FastMtS1,
     {98, 1, 1, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.overall_health_)}},
    // uint32 avg_jitter = 13 [json_name = "avgJitter"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMoment, _impl_.avg_jitter_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.avg_jitter_)}},
    // uint32 rolling_avg_jitter = 14 [json_name = "rollingAvgJitter"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMoment, _impl_.rolling_avg_jitter_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_avg_jitter_)}},
    // uint32 rolling_std_jitter = 15 [json_name = "rollingStdJitter"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HealthMoment, _impl_.rolling_std_jitter_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_std_jitter_)}},
    // string jitter_health = 16 [json_name = "jitterHealth"];
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.jitter_health_)}},
    // string data = 17 [json_name = "data"];
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.data_)}},
    // uint32 size = 18 [json_name = "size"];
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.size_)}},
    // uint32 status = 19 [json_name = "status"];
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.status_)}},
    // string task_type = 20 [json_name = "taskType"];
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.task_type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp time = 1 [json_name = "time"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string src_ip = 2 [json_name = "srcIp"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.src_ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string dst_ip = 3 [json_name = "dstIp"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.dst_ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double packet_loss = 4 [json_name = "packetLoss"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.packet_loss_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // uint32 avg_latency = 5 [json_name = "avgLatency"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.avg_latency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 avg_weighted_latency = 6 [json_name = "avgWeightedLatency"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.avg_weighted_latency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 rolling_avg_latency = 7 [json_name = "rollingAvgLatency"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_avg_latency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 rolling_stddev_latency = 8 [json_name = "rollingStddevLatency"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_stddev_latency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 rolling_avg_weighted_latency = 9 [json_name = "rollingAvgWeightedLatency"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_avg_weighted_latency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string latency_health = 10 [json_name = "latencyHealth"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.latency_health_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string packet_loss_health = 11 [json_name = "packetLossHealth"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.packet_loss_health_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.Health overall_health = 12 [json_name = "overallHealth"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.overall_health_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 avg_jitter = 13 [json_name = "avgJitter"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.avg_jitter_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 rolling_avg_jitter = 14 [json_name = "rollingAvgJitter"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_avg_jitter_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 rolling_std_jitter = 15 [json_name = "rollingStdJitter"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.rolling_std_jitter_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string jitter_health = 16 [json_name = "jitterHealth"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.jitter_health_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string data = 17 [json_name = "data"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 size = 18 [json_name = "size"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 status = 19 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string task_type = 20 [json_name = "taskType"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.task_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> other_healths = 21 [json_name = "otherHealths"];
    {PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.other_healths_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Health>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(HealthMoment()._impl_.other_healths_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\53\0\6\6\0\0\0\0\0\0\16\22\0\0\0\0\15\4\0\0\11\15\0\0"
    "kentik.synthetics.v202101beta1.HealthMoment"
    "src_ip"
    "dst_ip"
    "latency_health"
    "packet_loss_health"
    "jitter_health"
    "data"
    "task_type"
    "other_healths"
  }},
};

PROTOBUF_NOINLINE void HealthMoment::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HealthMoment)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.other_healths_.Clear();
  _impl_.src_ip_.ClearToEmpty();
  _impl_.dst_ip_.ClearToEmpty();
  _impl_.latency_health_.ClearToEmpty();
  _impl_.packet_loss_health_.ClearToEmpty();
  _impl_.jitter_health_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  _impl_.task_type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.overall_health_ != nullptr);
      _impl_.overall_health_->Clear();
    }
  }
  ::memset(&_impl_.packet_loss_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.status_) -
      reinterpret_cast<char*>(&_impl_.packet_loss_)) + sizeof(_impl_.status_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HealthMoment::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HealthMoment& this_ = static_cast<const HealthMoment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HealthMoment::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HealthMoment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HealthMoment)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 1 [json_name = "time"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // string src_ip = 2 [json_name = "srcIp"];
          if (!this_._internal_src_ip().empty()) {
            const std::string& _s = this_._internal_src_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.src_ip");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string dst_ip = 3 [json_name = "dstIp"];
          if (!this_._internal_dst_ip().empty()) {
            const std::string& _s = this_._internal_dst_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.dst_ip");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // double packet_loss = 4 [json_name = "packetLoss"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_packet_loss()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_packet_loss(), target);
          }

          // uint32 avg_latency = 5 [json_name = "avgLatency"];
          if (this_._internal_avg_latency() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                5, this_._internal_avg_latency(), target);
          }

          // uint32 avg_weighted_latency = 6 [json_name = "avgWeightedLatency"];
          if (this_._internal_avg_weighted_latency() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                6, this_._internal_avg_weighted_latency(), target);
          }

          // uint32 rolling_avg_latency = 7 [json_name = "rollingAvgLatency"];
          if (this_._internal_rolling_avg_latency() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                7, this_._internal_rolling_avg_latency(), target);
          }

          // uint32 rolling_stddev_latency = 8 [json_name = "rollingStddevLatency"];
          if (this_._internal_rolling_stddev_latency() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                8, this_._internal_rolling_stddev_latency(), target);
          }

          // uint32 rolling_avg_weighted_latency = 9 [json_name = "rollingAvgWeightedLatency"];
          if (this_._internal_rolling_avg_weighted_latency() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                9, this_._internal_rolling_avg_weighted_latency(), target);
          }

          // string latency_health = 10 [json_name = "latencyHealth"];
          if (!this_._internal_latency_health().empty()) {
            const std::string& _s = this_._internal_latency_health();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.latency_health");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // string packet_loss_health = 11 [json_name = "packetLossHealth"];
          if (!this_._internal_packet_loss_health().empty()) {
            const std::string& _s = this_._internal_packet_loss_health();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // .kentik.synthetics.v202101beta1.Health overall_health = 12 [json_name = "overallHealth"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.overall_health_, this_._impl_.overall_health_->GetCachedSize(), target,
                stream);
          }

          // uint32 avg_jitter = 13 [json_name = "avgJitter"];
          if (this_._internal_avg_jitter() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                13, this_._internal_avg_jitter(), target);
          }

          // uint32 rolling_avg_jitter = 14 [json_name = "rollingAvgJitter"];
          if (this_._internal_rolling_avg_jitter() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                14, this_._internal_rolling_avg_jitter(), target);
          }

          // uint32 rolling_std_jitter = 15 [json_name = "rollingStdJitter"];
          if (this_._internal_rolling_std_jitter() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                15, this_._internal_rolling_std_jitter(), target);
          }

          // string jitter_health = 16 [json_name = "jitterHealth"];
          if (!this_._internal_jitter_health().empty()) {
            const std::string& _s = this_._internal_jitter_health();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.jitter_health");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // string data = 17 [json_name = "data"];
          if (!this_._internal_data().empty()) {
            const std::string& _s = this_._internal_data();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.data");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          // uint32 size = 18 [json_name = "size"];
          if (this_._internal_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                18, this_._internal_size(), target);
          }

          // uint32 status = 19 [json_name = "status"];
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                19, this_._internal_status(), target);
          }

          // string task_type = 20 [json_name = "taskType"];
          if (!this_._internal_task_type().empty()) {
            const std::string& _s = this_._internal_task_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.task_type");
            target = stream->WriteStringMaybeAliased(20, _s, target);
          }

          // map<string, string> other_healths = 21 [json_name = "otherHealths"];
          if (!this_._internal_other_healths().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_other_healths();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    21, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.other_healths");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.other_healths");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    21, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.other_healths");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HealthMoment.other_healths");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HealthMoment)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HealthMoment::ByteSizeLong(const MessageLite& base) {
          const HealthMoment& this_ = static_cast<const HealthMoment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HealthMoment::ByteSizeLong() const {
          const HealthMoment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HealthMoment)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> other_healths = 21 [json_name = "otherHealths"];
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_other_healths_size());
              for (const auto& entry : this_._internal_other_healths()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string src_ip = 2 [json_name = "srcIp"];
            if (!this_._internal_src_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_src_ip());
            }
            // string dst_ip = 3 [json_name = "dstIp"];
            if (!this_._internal_dst_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_dst_ip());
            }
            // string latency_health = 10 [json_name = "latencyHealth"];
            if (!this_._internal_latency_health().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_latency_health());
            }
            // string packet_loss_health = 11 [json_name = "packetLossHealth"];
            if (!this_._internal_packet_loss_health().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_packet_loss_health());
            }
            // string jitter_health = 16 [json_name = "jitterHealth"];
            if (!this_._internal_jitter_health().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_jitter_health());
            }
            // string data = 17 [json_name = "data"];
            if (!this_._internal_data().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_data());
            }
            // string task_type = 20 [json_name = "taskType"];
            if (!this_._internal_task_type().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_task_type());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp time = 1 [json_name = "time"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // .kentik.synthetics.v202101beta1.Health overall_health = 12 [json_name = "overallHealth"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.overall_health_);
            }
          }
           {
            // double packet_loss = 4 [json_name = "packetLoss"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_packet_loss()) != 0) {
              total_size += 9;
            }
            // uint32 avg_latency = 5 [json_name = "avgLatency"];
            if (this_._internal_avg_latency() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_avg_latency());
            }
            // uint32 avg_weighted_latency = 6 [json_name = "avgWeightedLatency"];
            if (this_._internal_avg_weighted_latency() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_avg_weighted_latency());
            }
            // uint32 rolling_avg_latency = 7 [json_name = "rollingAvgLatency"];
            if (this_._internal_rolling_avg_latency() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_rolling_avg_latency());
            }
            // uint32 rolling_stddev_latency = 8 [json_name = "rollingStddevLatency"];
            if (this_._internal_rolling_stddev_latency() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_rolling_stddev_latency());
            }
            // uint32 rolling_avg_weighted_latency = 9 [json_name = "rollingAvgWeightedLatency"];
            if (this_._internal_rolling_avg_weighted_latency() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_rolling_avg_weighted_latency());
            }
            // uint32 avg_jitter = 13 [json_name = "avgJitter"];
            if (this_._internal_avg_jitter() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_avg_jitter());
            }
            // uint32 rolling_avg_jitter = 14 [json_name = "rollingAvgJitter"];
            if (this_._internal_rolling_avg_jitter() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_rolling_avg_jitter());
            }
            // uint32 rolling_std_jitter = 15 [json_name = "rollingStdJitter"];
            if (this_._internal_rolling_std_jitter() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_rolling_std_jitter());
            }
            // uint32 size = 18 [json_name = "size"];
            if (this_._internal_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_size());
            }
            // uint32 status = 19 [json_name = "status"];
            if (this_._internal_status() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_status());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HealthMoment::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthMoment*>(&to_msg);
  auto& from = static_cast<const HealthMoment&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HealthMoment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.other_healths_.MergeFrom(from._impl_.other_healths_);
  if (!from._internal_src_ip().empty()) {
    _this->_internal_set_src_ip(from._internal_src_ip());
  }
  if (!from._internal_dst_ip().empty()) {
    _this->_internal_set_dst_ip(from._internal_dst_ip());
  }
  if (!from._internal_latency_health().empty()) {
    _this->_internal_set_latency_health(from._internal_latency_health());
  }
  if (!from._internal_packet_loss_health().empty()) {
    _this->_internal_set_packet_loss_health(from._internal_packet_loss_health());
  }
  if (!from._internal_jitter_health().empty()) {
    _this->_internal_set_jitter_health(from._internal_jitter_health());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (!from._internal_task_type().empty()) {
    _this->_internal_set_task_type(from._internal_task_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.overall_health_ != nullptr);
      if (_this->_impl_.overall_health_ == nullptr) {
        _this->_impl_.overall_health_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Health>(arena, *from._impl_.overall_health_);
      } else {
        _this->_impl_.overall_health_->MergeFrom(*from._impl_.overall_health_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_packet_loss()) != 0) {
    _this->_impl_.packet_loss_ = from._impl_.packet_loss_;
  }
  if (from._internal_avg_latency() != 0) {
    _this->_impl_.avg_latency_ = from._impl_.avg_latency_;
  }
  if (from._internal_avg_weighted_latency() != 0) {
    _this->_impl_.avg_weighted_latency_ = from._impl_.avg_weighted_latency_;
  }
  if (from._internal_rolling_avg_latency() != 0) {
    _this->_impl_.rolling_avg_latency_ = from._impl_.rolling_avg_latency_;
  }
  if (from._internal_rolling_stddev_latency() != 0) {
    _this->_impl_.rolling_stddev_latency_ = from._impl_.rolling_stddev_latency_;
  }
  if (from._internal_rolling_avg_weighted_latency() != 0) {
    _this->_impl_.rolling_avg_weighted_latency_ = from._impl_.rolling_avg_weighted_latency_;
  }
  if (from._internal_avg_jitter() != 0) {
    _this->_impl_.avg_jitter_ = from._impl_.avg_jitter_;
  }
  if (from._internal_rolling_avg_jitter() != 0) {
    _this->_impl_.rolling_avg_jitter_ = from._impl_.rolling_avg_jitter_;
  }
  if (from._internal_rolling_std_jitter() != 0) {
    _this->_impl_.rolling_std_jitter_ = from._impl_.rolling_std_jitter_;
  }
  if (from._internal_size() != 0) {
    _this->_impl_.size_ = from._impl_.size_;
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthMoment::CopyFrom(const HealthMoment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HealthMoment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HealthMoment::InternalSwap(HealthMoment* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.other_healths_.InternalSwap(&other->_impl_.other_healths_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_ip_, &other->_impl_.src_ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dst_ip_, &other->_impl_.dst_ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.latency_health_, &other->_impl_.latency_health_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.packet_loss_health_, &other->_impl_.packet_loss_health_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.jitter_health_, &other->_impl_.jitter_health_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, &other->_impl_.data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.task_type_, &other->_impl_.task_type_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.status_)
      + sizeof(HealthMoment::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(HealthMoment, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata HealthMoment::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Agent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Agent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Agent, _impl_._has_bits_);
};

void Agent::clear_last_authed() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_authed_ != nullptr) _impl_.last_authed_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
Agent::Agent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Agent)
}
inline PROTOBUF_NDEBUG_INLINE Agent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::Agent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        test_ids_{visibility, arena, from.test_ids_},
        id_(arena, from.id_),
        name_(arena, from.name_),
        alias_(arena, from.alias_),
        type_(arena, from.type_),
        os_(arena, from.os_),
        ip_(arena, from.ip_),
        site_id_(arena, from.site_id_),
        version_(arena, from.version_),
        challenge_(arena, from.challenge_),
        city_(arena, from.city_),
        region_(arena, from.region_),
        country_(arena, from.country_),
        local_ip_(arena, from.local_ip_),
        cloud_vpc_(arena, from.cloud_vpc_) {}

Agent::Agent(
    ::google::protobuf::Arena* arena,
    const Agent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Agent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_authed_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_authed_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, status_),
           offsetof(Impl_, agent_impl_) -
               offsetof(Impl_, status_) +
               sizeof(Impl_::agent_impl_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Agent)
}
inline PROTOBUF_NDEBUG_INLINE Agent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        test_ids_{visibility, arena},
        id_(arena),
        name_(arena),
        alias_(arena),
        type_(arena),
        os_(arena),
        ip_(arena),
        site_id_(arena),
        version_(arena),
        challenge_(arena),
        city_(arena),
        region_(arena),
        country_(arena),
        local_ip_(arena),
        cloud_vpc_(arena) {}

inline void Agent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_authed_),
           0,
           offsetof(Impl_, agent_impl_) -
               offsetof(Impl_, last_authed_) +
               sizeof(Impl_::agent_impl_));
}
Agent::~Agent() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Agent)
  SharedDtor(*this);
}
inline void Agent::SharedDtor(MessageLite& self) {
  Agent& this_ = static_cast<Agent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.alias_.Destroy();
  this_._impl_.type_.Destroy();
  this_._impl_.os_.Destroy();
  this_._impl_.ip_.Destroy();
  this_._impl_.site_id_.Destroy();
  this_._impl_.version_.Destroy();
  this_._impl_.challenge_.Destroy();
  this_._impl_.city_.Destroy();
  this_._impl_.region_.Destroy();
  this_._impl_.country_.Destroy();
  this_._impl_.local_ip_.Destroy();
  this_._impl_.cloud_vpc_.Destroy();
  delete this_._impl_.last_authed_;
  this_._impl_.~Impl_();
}

inline void* Agent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Agent(arena);
}
constexpr auto Agent::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Agent, _impl_.test_ids_) +
          decltype(Agent::_impl_.test_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Agent), alignof(Agent), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Agent::PlacementNew_,
                                 sizeof(Agent),
                                 alignof(Agent));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Agent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Agent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Agent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Agent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Agent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Agent>(), &Agent::ByteSizeLong,
            &Agent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Agent, _impl_._cached_size_),
        false,
    },
    &Agent::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Agent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 22, 1, 145, 2> Agent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Agent, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290772992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    22,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Agent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.name_)}},
    // .kentik.synthetics.v202101beta1.AgentStatus status = 3 [json_name = "status"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Agent, _impl_.status_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.status_)}},
    // string alias = 4 [json_name = "alias"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.alias_)}},
    // string type = 5 [json_name = "type"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.type_)}},
    // string os = 6 [json_name = "os"];
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.os_)}},
    // string ip = 7 [json_name = "ip"];
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.ip_)}},
    // double lat = 8 [json_name = "lat"];
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.lat_)}},
    // double long = 9 [json_name = "long"];
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.long__)}},
    // .google.protobuf.Timestamp last_authed = 10 [json_name = "lastAuthed"];
    {::_pbi::TcParser::FastMtS1,
     {82, 0, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.last_authed_)}},
    // .kentik.synthetics.v202101beta1.IPFamily family = 11 [json_name = "family"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Agent, _impl_.family_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.family_)}},
    // uint32 asn = 12 [json_name = "asn"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Agent, _impl_.asn_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.asn_)}},
    // string site_id = 13 [json_name = "siteId"];
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.site_id_)}},
    // string version = 14 [json_name = "version"];
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.version_)}},
    // string challenge = 15 [json_name = "challenge"];
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.challenge_)}},
    // string city = 16 [json_name = "city"];
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.city_)}},
    // string region = 17 [json_name = "region"];
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.region_)}},
    // string country = 18 [json_name = "country"];
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.country_)}},
    // repeated string test_ids = 19 [json_name = "testIds"];
    {::_pbi::TcParser::FastUR2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.test_ids_)}},
    // string local_ip = 20 [json_name = "localIp"];
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.local_ip_)}},
    // string cloud_vpc = 21 [json_name = "cloudVpc"];
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.cloud_vpc_)}},
    // .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22 [json_name = "agentImpl"];
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Agent, _impl_.agent_impl_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.AgentStatus status = 3 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string alias = 4 [json_name = "alias"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.alias_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string type = 5 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string os = 6 [json_name = "os"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.os_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ip = 7 [json_name = "ip"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double lat = 8 [json_name = "lat"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.lat_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double long = 9 [json_name = "long"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.long__), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .google.protobuf.Timestamp last_authed = 10 [json_name = "lastAuthed"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.last_authed_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.IPFamily family = 11 [json_name = "family"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.family_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint32 asn = 12 [json_name = "asn"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.asn_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string site_id = 13 [json_name = "siteId"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.site_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string version = 14 [json_name = "version"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.version_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string challenge = 15 [json_name = "challenge"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.challenge_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string city = 16 [json_name = "city"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.city_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string region = 17 [json_name = "region"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.region_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country = 18 [json_name = "country"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.country_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string test_ids = 19 [json_name = "testIds"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.test_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // string local_ip = 20 [json_name = "localIp"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.local_ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cloud_vpc = 21 [json_name = "cloudVpc"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.cloud_vpc_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22 [json_name = "agentImpl"];
    {PROTOBUF_FIELD_OFFSET(Agent, _impl_.agent_impl_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\44\2\4\0\5\4\2\2\0\0\0\0\0\7\7\11\4\6\7\10\10\11\0\0"
    "kentik.synthetics.v202101beta1.Agent"
    "id"
    "name"
    "alias"
    "type"
    "os"
    "ip"
    "site_id"
    "version"
    "challenge"
    "city"
    "region"
    "country"
    "test_ids"
    "local_ip"
    "cloud_vpc"
  }},
};

PROTOBUF_NOINLINE void Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Agent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.test_ids_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.os_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.site_id_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.challenge_.ClearToEmpty();
  _impl_.city_.ClearToEmpty();
  _impl_.region_.ClearToEmpty();
  _impl_.country_.ClearToEmpty();
  _impl_.local_ip_.ClearToEmpty();
  _impl_.cloud_vpc_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.last_authed_ != nullptr);
    _impl_.last_authed_->Clear();
  }
  ::memset(&_impl_.status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.agent_impl_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.agent_impl_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Agent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Agent& this_ = static_cast<const Agent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Agent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Agent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Agent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .kentik.synthetics.v202101beta1.AgentStatus status = 3 [json_name = "status"];
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_status(), target);
          }

          // string alias = 4 [json_name = "alias"];
          if (!this_._internal_alias().empty()) {
            const std::string& _s = this_._internal_alias();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.alias");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string type = 5 [json_name = "type"];
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.type");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string os = 6 [json_name = "os"];
          if (!this_._internal_os().empty()) {
            const std::string& _s = this_._internal_os();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.os");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string ip = 7 [json_name = "ip"];
          if (!this_._internal_ip().empty()) {
            const std::string& _s = this_._internal_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.ip");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // double lat = 8 [json_name = "lat"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_lat()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_lat(), target);
          }

          // double long = 9 [json_name = "long"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_long_()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_long_(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp last_authed = 10 [json_name = "lastAuthed"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.last_authed_, this_._impl_.last_authed_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.IPFamily family = 11 [json_name = "family"];
          if (this_._internal_family() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                11, this_._internal_family(), target);
          }

          // uint32 asn = 12 [json_name = "asn"];
          if (this_._internal_asn() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                12, this_._internal_asn(), target);
          }

          // string site_id = 13 [json_name = "siteId"];
          if (!this_._internal_site_id().empty()) {
            const std::string& _s = this_._internal_site_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.site_id");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // string version = 14 [json_name = "version"];
          if (!this_._internal_version().empty()) {
            const std::string& _s = this_._internal_version();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.version");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // string challenge = 15 [json_name = "challenge"];
          if (!this_._internal_challenge().empty()) {
            const std::string& _s = this_._internal_challenge();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.challenge");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // string city = 16 [json_name = "city"];
          if (!this_._internal_city().empty()) {
            const std::string& _s = this_._internal_city();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.city");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // string region = 17 [json_name = "region"];
          if (!this_._internal_region().empty()) {
            const std::string& _s = this_._internal_region();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.region");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          // string country = 18 [json_name = "country"];
          if (!this_._internal_country().empty()) {
            const std::string& _s = this_._internal_country();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.country");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // repeated string test_ids = 19 [json_name = "testIds"];
          for (int i = 0, n = this_._internal_test_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_test_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.test_ids");
            target = stream->WriteString(19, s, target);
          }

          // string local_ip = 20 [json_name = "localIp"];
          if (!this_._internal_local_ip().empty()) {
            const std::string& _s = this_._internal_local_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.local_ip");
            target = stream->WriteStringMaybeAliased(20, _s, target);
          }

          // string cloud_vpc = 21 [json_name = "cloudVpc"];
          if (!this_._internal_cloud_vpc().empty()) {
            const std::string& _s = this_._internal_cloud_vpc();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Agent.cloud_vpc");
            target = stream->WriteStringMaybeAliased(21, _s, target);
          }

          // .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22 [json_name = "agentImpl"];
          if (this_._internal_agent_impl() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                22, this_._internal_agent_impl(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Agent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Agent::ByteSizeLong(const MessageLite& base) {
          const Agent& this_ = static_cast<const Agent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Agent::ByteSizeLong() const {
          const Agent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Agent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string test_ids = 19 [json_name = "testIds"];
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_test_ids().size());
              for (int i = 0, n = this_._internal_test_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_test_ids().Get(i));
              }
            }
          }
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string alias = 4 [json_name = "alias"];
            if (!this_._internal_alias().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_alias());
            }
            // string type = 5 [json_name = "type"];
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
            // string os = 6 [json_name = "os"];
            if (!this_._internal_os().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_os());
            }
            // string ip = 7 [json_name = "ip"];
            if (!this_._internal_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ip());
            }
            // string site_id = 13 [json_name = "siteId"];
            if (!this_._internal_site_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_site_id());
            }
            // string version = 14 [json_name = "version"];
            if (!this_._internal_version().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_version());
            }
            // string challenge = 15 [json_name = "challenge"];
            if (!this_._internal_challenge().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_challenge());
            }
            // string city = 16 [json_name = "city"];
            if (!this_._internal_city().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_city());
            }
            // string region = 17 [json_name = "region"];
            if (!this_._internal_region().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_region());
            }
            // string country = 18 [json_name = "country"];
            if (!this_._internal_country().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country());
            }
            // string local_ip = 20 [json_name = "localIp"];
            if (!this_._internal_local_ip().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_local_ip());
            }
            // string cloud_vpc = 21 [json_name = "cloudVpc"];
            if (!this_._internal_cloud_vpc().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_cloud_vpc());
            }
          }
           {
            // .google.protobuf.Timestamp last_authed = 10 [json_name = "lastAuthed"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_authed_);
            }
          }
           {
            // .kentik.synthetics.v202101beta1.AgentStatus status = 3 [json_name = "status"];
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
            // .kentik.synthetics.v202101beta1.IPFamily family = 11 [json_name = "family"];
            if (this_._internal_family() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_family());
            }
            // double lat = 8 [json_name = "lat"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_lat()) != 0) {
              total_size += 9;
            }
            // double long = 9 [json_name = "long"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_long_()) != 0) {
              total_size += 9;
            }
            // uint32 asn = 12 [json_name = "asn"];
            if (this_._internal_asn() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_asn());
            }
            // .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22 [json_name = "agentImpl"];
            if (this_._internal_agent_impl() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_agent_impl());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Agent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Agent*>(&to_msg);
  auto& from = static_cast<const Agent&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Agent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_test_ids()->MergeFrom(from._internal_test_ids());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_os().empty()) {
    _this->_internal_set_os(from._internal_os());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_site_id().empty()) {
    _this->_internal_set_site_id(from._internal_site_id());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_challenge().empty()) {
    _this->_internal_set_challenge(from._internal_challenge());
  }
  if (!from._internal_city().empty()) {
    _this->_internal_set_city(from._internal_city());
  }
  if (!from._internal_region().empty()) {
    _this->_internal_set_region(from._internal_region());
  }
  if (!from._internal_country().empty()) {
    _this->_internal_set_country(from._internal_country());
  }
  if (!from._internal_local_ip().empty()) {
    _this->_internal_set_local_ip(from._internal_local_ip());
  }
  if (!from._internal_cloud_vpc().empty()) {
    _this->_internal_set_cloud_vpc(from._internal_cloud_vpc());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.last_authed_ != nullptr);
    if (_this->_impl_.last_authed_ == nullptr) {
      _this->_impl_.last_authed_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_authed_);
    } else {
      _this->_impl_.last_authed_->MergeFrom(*from._impl_.last_authed_);
    }
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  if (from._internal_family() != 0) {
    _this->_impl_.family_ = from._impl_.family_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_lat()) != 0) {
    _this->_impl_.lat_ = from._impl_.lat_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_long_()) != 0) {
    _this->_impl_.long__ = from._impl_.long__;
  }
  if (from._internal_asn() != 0) {
    _this->_impl_.asn_ = from._impl_.asn_;
  }
  if (from._internal_agent_impl() != 0) {
    _this->_impl_.agent_impl_ = from._impl_.agent_impl_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Agent::CopyFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Agent::InternalSwap(Agent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.test_ids_.InternalSwap(&other->_impl_.test_ids_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alias_, &other->_impl_.alias_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.os_, &other->_impl_.os_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.site_id_, &other->_impl_.site_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, &other->_impl_.version_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.challenge_, &other->_impl_.challenge_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.city_, &other->_impl_.city_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.region_, &other->_impl_.region_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_, &other->_impl_.country_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.local_ip_, &other->_impl_.local_ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cloud_vpc_, &other->_impl_.cloud_vpc_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Agent, _impl_.agent_impl_)
      + sizeof(Agent::_impl_.agent_impl_)
      - PROTOBUF_FIELD_OFFSET(Agent, _impl_.last_authed_)>(
          reinterpret_cast<char*>(&_impl_.last_authed_),
          reinterpret_cast<char*>(&other->_impl_.last_authed_));
}

::google::protobuf::Metadata Agent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PingTaskDefinition::_Internal {
 public:
};

PingTaskDefinition::PingTaskDefinition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PingTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE PingTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::PingTaskDefinition& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

PingTaskDefinition::PingTaskDefinition(
    ::google::protobuf::Arena* arena,
    const PingTaskDefinition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PingTaskDefinition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_),
           offsetof(Impl_, count_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::count_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PingTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE PingTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void PingTaskDefinition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           0,
           offsetof(Impl_, count_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::count_));
}
PingTaskDefinition::~PingTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PingTaskDefinition)
  SharedDtor(*this);
}
inline void PingTaskDefinition::SharedDtor(MessageLite& self) {
  PingTaskDefinition& this_ = static_cast<PingTaskDefinition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PingTaskDefinition::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PingTaskDefinition(arena);
}
constexpr auto PingTaskDefinition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PingTaskDefinition),
                                            alignof(PingTaskDefinition));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PingTaskDefinition::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PingTaskDefinition_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PingTaskDefinition::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PingTaskDefinition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PingTaskDefinition::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PingTaskDefinition>(), &PingTaskDefinition::ByteSizeLong,
            &PingTaskDefinition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_._cached_size_),
        false,
    },
    &PingTaskDefinition::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PingTaskDefinition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 64, 2> PingTaskDefinition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::PingTaskDefinition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 count = 4 [json_name = "count"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PingTaskDefinition, _impl_.count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.count_)}},
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.target_)}},
    // uint32 period = 2 [json_name = "period"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PingTaskDefinition, _impl_.period_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.period_)}},
    // uint32 expiry = 3 [json_name = "expiry"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PingTaskDefinition, _impl_.expiry_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.expiry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 period = 2 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 expiry = 3 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 count = 4 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\61\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.PingTaskDefinition"
    "target"
  }},
};

PROTOBUF_NOINLINE void PingTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.count_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PingTaskDefinition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PingTaskDefinition& this_ = static_cast<const PingTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PingTaskDefinition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PingTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.PingTaskDefinition.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 period = 2 [json_name = "period"];
          if (this_._internal_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_period(), target);
          }

          // uint32 expiry = 3 [json_name = "expiry"];
          if (this_._internal_expiry() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_expiry(), target);
          }

          // uint32 count = 4 [json_name = "count"];
          if (this_._internal_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PingTaskDefinition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PingTaskDefinition::ByteSizeLong(const MessageLite& base) {
          const PingTaskDefinition& this_ = static_cast<const PingTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PingTaskDefinition::ByteSizeLong() const {
          const PingTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // uint32 period = 2 [json_name = "period"];
            if (this_._internal_period() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_period());
            }
            // uint32 expiry = 3 [json_name = "expiry"];
            if (this_._internal_expiry() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_expiry());
            }
            // uint32 count = 4 [json_name = "count"];
            if (this_._internal_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PingTaskDefinition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PingTaskDefinition*>(&to_msg);
  auto& from = static_cast<const PingTaskDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_period() != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (from._internal_expiry() != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PingTaskDefinition::CopyFrom(const PingTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PingTaskDefinition::InternalSwap(PingTaskDefinition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.count_)
      + sizeof(PingTaskDefinition::_impl_.count_)
      - PROTOBUF_FIELD_OFFSET(PingTaskDefinition, _impl_.period_)>(
          reinterpret_cast<char*>(&_impl_.period_),
          reinterpret_cast<char*>(&other->_impl_.period_));
}

::google::protobuf::Metadata PingTaskDefinition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TraceTaskDefinition::_Internal {
 public:
};

TraceTaskDefinition::TraceTaskDefinition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TraceTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE TraceTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TraceTaskDefinition& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

TraceTaskDefinition::TraceTaskDefinition(
    ::google::protobuf::Arena* arena,
    const TraceTaskDefinition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TraceTaskDefinition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_),
           offsetof(Impl_, limit_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::limit_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TraceTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE TraceTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void TraceTaskDefinition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           0,
           offsetof(Impl_, limit_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::limit_));
}
TraceTaskDefinition::~TraceTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  SharedDtor(*this);
}
inline void TraceTaskDefinition::SharedDtor(MessageLite& self) {
  TraceTaskDefinition& this_ = static_cast<TraceTaskDefinition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TraceTaskDefinition::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TraceTaskDefinition(arena);
}
constexpr auto TraceTaskDefinition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TraceTaskDefinition),
                                            alignof(TraceTaskDefinition));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TraceTaskDefinition::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TraceTaskDefinition_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TraceTaskDefinition::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TraceTaskDefinition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TraceTaskDefinition::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TraceTaskDefinition>(), &TraceTaskDefinition::ByteSizeLong,
            &TraceTaskDefinition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_._cached_size_),
        false,
    },
    &TraceTaskDefinition::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TraceTaskDefinition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 65, 2> TraceTaskDefinition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TraceTaskDefinition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 limit = 4 [json_name = "limit"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceTaskDefinition, _impl_.limit_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.limit_)}},
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.target_)}},
    // uint32 period = 2 [json_name = "period"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceTaskDefinition, _impl_.period_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.period_)}},
    // uint32 expiry = 3 [json_name = "expiry"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceTaskDefinition, _impl_.expiry_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.expiry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 period = 2 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 expiry = 3 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 limit = 4 [json_name = "limit"];
    {PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\62\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.TraceTaskDefinition"
    "target"
  }},
};

PROTOBUF_NOINLINE void TraceTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TraceTaskDefinition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TraceTaskDefinition& this_ = static_cast<const TraceTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TraceTaskDefinition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TraceTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TraceTaskDefinition.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 period = 2 [json_name = "period"];
          if (this_._internal_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_period(), target);
          }

          // uint32 expiry = 3 [json_name = "expiry"];
          if (this_._internal_expiry() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_expiry(), target);
          }

          // uint32 limit = 4 [json_name = "limit"];
          if (this_._internal_limit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_limit(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TraceTaskDefinition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TraceTaskDefinition::ByteSizeLong(const MessageLite& base) {
          const TraceTaskDefinition& this_ = static_cast<const TraceTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TraceTaskDefinition::ByteSizeLong() const {
          const TraceTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // uint32 period = 2 [json_name = "period"];
            if (this_._internal_period() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_period());
            }
            // uint32 expiry = 3 [json_name = "expiry"];
            if (this_._internal_expiry() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_expiry());
            }
            // uint32 limit = 4 [json_name = "limit"];
            if (this_._internal_limit() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_limit());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TraceTaskDefinition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TraceTaskDefinition*>(&to_msg);
  auto& from = static_cast<const TraceTaskDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_period() != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (from._internal_expiry() != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  if (from._internal_limit() != 0) {
    _this->_impl_.limit_ = from._impl_.limit_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TraceTaskDefinition::CopyFrom(const TraceTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TraceTaskDefinition::InternalSwap(TraceTaskDefinition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.limit_)
      + sizeof(TraceTaskDefinition::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, _impl_.period_)>(
          reinterpret_cast<char*>(&_impl_.period_),
          reinterpret_cast<char*>(&other->_impl_.period_));
}

::google::protobuf::Metadata TraceTaskDefinition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HTTPTaskDefinition::_Internal {
 public:
};

HTTPTaskDefinition::HTTPTaskDefinition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE HTTPTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::HTTPTaskDefinition& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

HTTPTaskDefinition::HTTPTaskDefinition(
    ::google::protobuf::Arena* arena,
    const HTTPTaskDefinition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HTTPTaskDefinition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_),
           offsetof(Impl_, expiry_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::expiry_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE HTTPTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void HTTPTaskDefinition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           0,
           offsetof(Impl_, expiry_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::expiry_));
}
HTTPTaskDefinition::~HTTPTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  SharedDtor(*this);
}
inline void HTTPTaskDefinition::SharedDtor(MessageLite& self) {
  HTTPTaskDefinition& this_ = static_cast<HTTPTaskDefinition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* HTTPTaskDefinition::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HTTPTaskDefinition(arena);
}
constexpr auto HTTPTaskDefinition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HTTPTaskDefinition),
                                            alignof(HTTPTaskDefinition));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HTTPTaskDefinition::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HTTPTaskDefinition_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HTTPTaskDefinition::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HTTPTaskDefinition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HTTPTaskDefinition::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HTTPTaskDefinition>(), &HTTPTaskDefinition::ByteSizeLong,
            &HTTPTaskDefinition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_._cached_size_),
        false,
    },
    &HTTPTaskDefinition::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HTTPTaskDefinition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 64, 2> HTTPTaskDefinition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HTTPTaskDefinition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_.target_)}},
    // uint32 period = 2 [json_name = "period"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HTTPTaskDefinition, _impl_.period_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_.period_)}},
    // uint32 expiry = 3 [json_name = "expiry"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HTTPTaskDefinition, _impl_.expiry_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_.expiry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 period = 2 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 expiry = 3 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\61\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.HTTPTaskDefinition"
    "target"
  }},
};

PROTOBUF_NOINLINE void HTTPTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.expiry_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.expiry_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HTTPTaskDefinition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HTTPTaskDefinition& this_ = static_cast<const HTTPTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HTTPTaskDefinition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HTTPTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPTaskDefinition.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 period = 2 [json_name = "period"];
          if (this_._internal_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_period(), target);
          }

          // uint32 expiry = 3 [json_name = "expiry"];
          if (this_._internal_expiry() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_expiry(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HTTPTaskDefinition::ByteSizeLong(const MessageLite& base) {
          const HTTPTaskDefinition& this_ = static_cast<const HTTPTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HTTPTaskDefinition::ByteSizeLong() const {
          const HTTPTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // uint32 period = 2 [json_name = "period"];
            if (this_._internal_period() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_period());
            }
            // uint32 expiry = 3 [json_name = "expiry"];
            if (this_._internal_expiry() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_expiry());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HTTPTaskDefinition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HTTPTaskDefinition*>(&to_msg);
  auto& from = static_cast<const HTTPTaskDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_period() != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (from._internal_expiry() != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HTTPTaskDefinition::CopyFrom(const HTTPTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HTTPTaskDefinition::InternalSwap(HTTPTaskDefinition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_.expiry_)
      + sizeof(HTTPTaskDefinition::_impl_.expiry_)
      - PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, _impl_.period_)>(
          reinterpret_cast<char*>(&_impl_.period_),
          reinterpret_cast<char*>(&other->_impl_.period_));
}

::google::protobuf::Metadata HTTPTaskDefinition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Task::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _impl_._oneof_case_);
};

void Task::set_allocated_ping(::kentik::synthetics::v202101beta1::PingTaskDefinition* ping) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (ping) {
    ::google::protobuf::Arena* submessage_arena = ping->GetArena();
    if (message_arena != submessage_arena) {
      ping = ::google::protobuf::internal::GetOwnedMessage(message_arena, ping, submessage_arena);
    }
    set_has_ping();
    _impl_.definition_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.ping)
}
void Task::set_allocated_traceroute(::kentik::synthetics::v202101beta1::TraceTaskDefinition* traceroute) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (traceroute) {
    ::google::protobuf::Arena* submessage_arena = traceroute->GetArena();
    if (message_arena != submessage_arena) {
      traceroute = ::google::protobuf::internal::GetOwnedMessage(message_arena, traceroute, submessage_arena);
    }
    set_has_traceroute();
    _impl_.definition_.traceroute_ = traceroute;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.traceroute)
}
void Task::set_allocated_http(::kentik::synthetics::v202101beta1::HTTPTaskDefinition* http) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (http) {
    ::google::protobuf::Arena* submessage_arena = http->GetArena();
    if (message_arena != submessage_arena) {
      http = ::google::protobuf::internal::GetOwnedMessage(message_arena, http, submessage_arena);
    }
    set_has_http();
    _impl_.definition_.http_ = http;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.http)
}
void Task::set_allocated_knock(::kentik::synthetics::v202101beta1::KnockTaskDefinition* knock) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (knock) {
    ::google::protobuf::Arena* submessage_arena = knock->GetArena();
    if (message_arena != submessage_arena) {
      knock = ::google::protobuf::internal::GetOwnedMessage(message_arena, knock, submessage_arena);
    }
    set_has_knock();
    _impl_.definition_.knock_ = knock;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.knock)
}
void Task::set_allocated_dns(::kentik::synthetics::v202101beta1::DNSTaskDefinition* dns) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (dns) {
    ::google::protobuf::Arena* submessage_arena = dns->GetArena();
    if (message_arena != submessage_arena) {
      dns = ::google::protobuf::internal::GetOwnedMessage(message_arena, dns, submessage_arena);
    }
    set_has_dns();
    _impl_.definition_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.dns)
}
void Task::set_allocated_shake(::kentik::synthetics::v202101beta1::ShakeTaskDefinition* shake) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (shake) {
    ::google::protobuf::Arena* submessage_arena = shake->GetArena();
    if (message_arena != submessage_arena) {
      shake = ::google::protobuf::internal::GetOwnedMessage(message_arena, shake, submessage_arena);
    }
    set_has_shake();
    _impl_.definition_.shake_ = shake;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.shake)
}
Task::Task(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Task)
}
inline PROTOBUF_NDEBUG_INLINE Task::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::Task& from_msg)
      : id_(arena, from.id_),
        test_id_(arena, from.test_id_),
        device_id_(arena, from.device_id_),
        status_(arena, from.status_),
        definition_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

Task::Task(
    ::google::protobuf::Arena* arena,
    const Task& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Task* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, state_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, state_),
           offsetof(Impl_, family_) -
               offsetof(Impl_, state_) +
               sizeof(Impl_::family_));
  switch (definition_case()) {
    case DEFINITION_NOT_SET:
      break;
      case kPing:
        _impl_.definition_.ping_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::PingTaskDefinition>(arena, *from._impl_.definition_.ping_);
        break;
      case kTraceroute:
        _impl_.definition_.traceroute_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TraceTaskDefinition>(arena, *from._impl_.definition_.traceroute_);
        break;
      case kHttp:
        _impl_.definition_.http_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::HTTPTaskDefinition>(arena, *from._impl_.definition_.http_);
        break;
      case kKnock:
        _impl_.definition_.knock_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::KnockTaskDefinition>(arena, *from._impl_.definition_.knock_);
        break;
      case kDns:
        _impl_.definition_.dns_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::DNSTaskDefinition>(arena, *from._impl_.definition_.dns_);
        break;
      case kShake:
        _impl_.definition_.shake_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::ShakeTaskDefinition>(arena, *from._impl_.definition_.shake_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Task)
}
inline PROTOBUF_NDEBUG_INLINE Task::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        test_id_(arena),
        device_id_(arena),
        status_(arena),
        definition_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void Task::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, state_),
           0,
           offsetof(Impl_, family_) -
               offsetof(Impl_, state_) +
               sizeof(Impl_::family_));
}
Task::~Task() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Task)
  SharedDtor(*this);
}
inline void Task::SharedDtor(MessageLite& self) {
  Task& this_ = static_cast<Task&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.test_id_.Destroy();
  this_._impl_.device_id_.Destroy();
  this_._impl_.status_.Destroy();
  if (this_.has_definition()) {
    this_.clear_definition();
  }
  this_._impl_.~Impl_();
}

void Task::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:kentik.synthetics.v202101beta1.Task)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (definition_case()) {
    case kPing: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.ping_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.ping_);
      }
      break;
    }
    case kTraceroute: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.traceroute_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.traceroute_);
      }
      break;
    }
    case kHttp: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.http_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.http_);
      }
      break;
    }
    case kKnock: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.knock_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.knock_);
      }
      break;
    }
    case kDns: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.dns_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.dns_);
      }
      break;
    }
    case kShake: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.shake_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.shake_);
      }
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DEFINITION_NOT_SET;
}


inline void* Task::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Task(arena);
}
constexpr auto Task::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Task),
                                            alignof(Task));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Task::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Task_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Task::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Task>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Task::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Task>(), &Task::ByteSizeLong,
            &Task::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Task, _impl_._cached_size_),
        false,
    },
    &Task::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Task::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 12, 6, 76, 2> Task::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    14, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294951104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Task>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.id_)}},
    // string test_id = 2 [json_name = "testId"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.test_id_)}},
    // string device_id = 3 [json_name = "deviceId"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.device_id_)}},
    // .kentik.synthetics.v202101beta1.TaskState state = 4 [json_name = "state"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Task, _impl_.state_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.state_)}},
    // string status = 5 [json_name = "status"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.status_)}},
    // .kentik.synthetics.v202101beta1.IPFamily family = 6 [json_name = "family"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Task, _impl_.family_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Task, _impl_.family_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string test_id = 2 [json_name = "testId"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.test_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_id = 3 [json_name = "deviceId"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.device_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.TaskState state = 4 [json_name = "state"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.state_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string status = 5 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.IPFamily family = 6 [json_name = "family"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.family_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .kentik.synthetics.v202101beta1.PingTaskDefinition ping = 9 [json_name = "ping"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.definition_.ping_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.TraceTaskDefinition traceroute = 10 [json_name = "traceroute"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.definition_.traceroute_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.HTTPTaskDefinition http = 11 [json_name = "http"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.definition_.http_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.KnockTaskDefinition knock = 12 [json_name = "knock"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.definition_.knock_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.DNSTaskDefinition dns = 13 [json_name = "dns"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.definition_.dns_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.ShakeTaskDefinition shake = 14 [json_name = "shake"];
    {PROTOBUF_FIELD_OFFSET(Task, _impl_.definition_.shake_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::PingTaskDefinition>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TraceTaskDefinition>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HTTPTaskDefinition>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::KnockTaskDefinition>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DNSTaskDefinition>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ShakeTaskDefinition>()},
  }}, {{
    "\43\2\7\11\0\6\0\0\0\0\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.Task"
    "id"
    "test_id"
    "device_id"
    "status"
  }},
};

PROTOBUF_NOINLINE void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Task)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.test_id_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  ::memset(&_impl_.state_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.family_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.family_));
  clear_definition();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Task::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Task& this_ = static_cast<const Task&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Task::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Task& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Task)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Task.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string test_id = 2 [json_name = "testId"];
          if (!this_._internal_test_id().empty()) {
            const std::string& _s = this_._internal_test_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Task.test_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string device_id = 3 [json_name = "deviceId"];
          if (!this_._internal_device_id().empty()) {
            const std::string& _s = this_._internal_device_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Task.device_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .kentik.synthetics.v202101beta1.TaskState state = 4 [json_name = "state"];
          if (this_._internal_state() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_state(), target);
          }

          // string status = 5 [json_name = "status"];
          if (!this_._internal_status().empty()) {
            const std::string& _s = this_._internal_status();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Task.status");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .kentik.synthetics.v202101beta1.IPFamily family = 6 [json_name = "family"];
          if (this_._internal_family() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_family(), target);
          }

          switch (this_.definition_case()) {
            case kPing: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.definition_.ping_, this_._impl_.definition_.ping_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTraceroute: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.definition_.traceroute_, this_._impl_.definition_.traceroute_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kHttp: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.definition_.http_, this_._impl_.definition_.http_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kKnock: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  12, *this_._impl_.definition_.knock_, this_._impl_.definition_.knock_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDns: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  13, *this_._impl_.definition_.dns_, this_._impl_.definition_.dns_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kShake: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  14, *this_._impl_.definition_.shake_, this_._impl_.definition_.shake_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Task)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Task::ByteSizeLong(const MessageLite& base) {
          const Task& this_ = static_cast<const Task&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Task::ByteSizeLong() const {
          const Task& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Task)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string test_id = 2 [json_name = "testId"];
            if (!this_._internal_test_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_test_id());
            }
            // string device_id = 3 [json_name = "deviceId"];
            if (!this_._internal_device_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_id());
            }
            // string status = 5 [json_name = "status"];
            if (!this_._internal_status().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_status());
            }
            // .kentik.synthetics.v202101beta1.TaskState state = 4 [json_name = "state"];
            if (this_._internal_state() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_state());
            }
            // .kentik.synthetics.v202101beta1.IPFamily family = 6 [json_name = "family"];
            if (this_._internal_family() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_family());
            }
          }
          switch (this_.definition_case()) {
            // .kentik.synthetics.v202101beta1.PingTaskDefinition ping = 9 [json_name = "ping"];
            case kPing: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.ping_);
              break;
            }
            // .kentik.synthetics.v202101beta1.TraceTaskDefinition traceroute = 10 [json_name = "traceroute"];
            case kTraceroute: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.traceroute_);
              break;
            }
            // .kentik.synthetics.v202101beta1.HTTPTaskDefinition http = 11 [json_name = "http"];
            case kHttp: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.http_);
              break;
            }
            // .kentik.synthetics.v202101beta1.KnockTaskDefinition knock = 12 [json_name = "knock"];
            case kKnock: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.knock_);
              break;
            }
            // .kentik.synthetics.v202101beta1.DNSTaskDefinition dns = 13 [json_name = "dns"];
            case kDns: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.dns_);
              break;
            }
            // .kentik.synthetics.v202101beta1.ShakeTaskDefinition shake = 14 [json_name = "shake"];
            case kShake: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.shake_);
              break;
            }
            case DEFINITION_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Task::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Task*>(&to_msg);
  auto& from = static_cast<const Task&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Task)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_test_id().empty()) {
    _this->_internal_set_test_id(from._internal_test_id());
  }
  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_state() != 0) {
    _this->_impl_.state_ = from._impl_.state_;
  }
  if (from._internal_family() != 0) {
    _this->_impl_.family_ = from._impl_.family_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_definition();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kPing: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.ping_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::PingTaskDefinition>(arena, *from._impl_.definition_.ping_);
        } else {
          _this->_impl_.definition_.ping_->MergeFrom(from._internal_ping());
        }
        break;
      }
      case kTraceroute: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.traceroute_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TraceTaskDefinition>(arena, *from._impl_.definition_.traceroute_);
        } else {
          _this->_impl_.definition_.traceroute_->MergeFrom(from._internal_traceroute());
        }
        break;
      }
      case kHttp: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.http_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::HTTPTaskDefinition>(arena, *from._impl_.definition_.http_);
        } else {
          _this->_impl_.definition_.http_->MergeFrom(from._internal_http());
        }
        break;
      }
      case kKnock: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.knock_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::KnockTaskDefinition>(arena, *from._impl_.definition_.knock_);
        } else {
          _this->_impl_.definition_.knock_->MergeFrom(from._internal_knock());
        }
        break;
      }
      case kDns: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.dns_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::DNSTaskDefinition>(arena, *from._impl_.definition_.dns_);
        } else {
          _this->_impl_.definition_.dns_->MergeFrom(from._internal_dns());
        }
        break;
      }
      case kShake: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.shake_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::ShakeTaskDefinition>(arena, *from._impl_.definition_.shake_);
        } else {
          _this->_impl_.definition_.shake_->MergeFrom(from._internal_shake());
        }
        break;
      }
      case DEFINITION_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Task::InternalSwap(Task* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.test_id_, &other->_impl_.test_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, &other->_impl_.device_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, _impl_.family_)
      + sizeof(Task::_impl_.family_)
      - PROTOBUF_FIELD_OFFSET(Task, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
  swap(_impl_.definition_, other->_impl_.definition_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class KnockTaskDefinition::_Internal {
 public:
};

KnockTaskDefinition::KnockTaskDefinition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.KnockTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE KnockTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::KnockTaskDefinition& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

KnockTaskDefinition::KnockTaskDefinition(
    ::google::protobuf::Arena* arena,
    const KnockTaskDefinition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  KnockTaskDefinition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_),
           offsetof(Impl_, port_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::port_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.KnockTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE KnockTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void KnockTaskDefinition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           0,
           offsetof(Impl_, port_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::port_));
}
KnockTaskDefinition::~KnockTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  SharedDtor(*this);
}
inline void KnockTaskDefinition::SharedDtor(MessageLite& self) {
  KnockTaskDefinition& this_ = static_cast<KnockTaskDefinition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* KnockTaskDefinition::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) KnockTaskDefinition(arena);
}
constexpr auto KnockTaskDefinition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(KnockTaskDefinition),
                                            alignof(KnockTaskDefinition));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull KnockTaskDefinition::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_KnockTaskDefinition_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &KnockTaskDefinition::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<KnockTaskDefinition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &KnockTaskDefinition::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<KnockTaskDefinition>(), &KnockTaskDefinition::ByteSizeLong,
            &KnockTaskDefinition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_._cached_size_),
        false,
    },
    &KnockTaskDefinition::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* KnockTaskDefinition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 65, 2> KnockTaskDefinition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::KnockTaskDefinition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.target_)}},
    // uint32 period = 2 [json_name = "period"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KnockTaskDefinition, _impl_.period_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.period_)}},
    // uint32 expiry = 3 [json_name = "expiry"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KnockTaskDefinition, _impl_.expiry_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.expiry_)}},
    // uint32 count = 4 [json_name = "count"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KnockTaskDefinition, _impl_.count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.count_)}},
    // uint32 port = 5 [json_name = "port"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(KnockTaskDefinition, _impl_.port_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.port_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 period = 2 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 expiry = 3 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 count = 4 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 port = 5 [json_name = "port"];
    {PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\62\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.KnockTaskDefinition"
    "target"
  }},
};

PROTOBUF_NOINLINE void KnockTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* KnockTaskDefinition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const KnockTaskDefinition& this_ = static_cast<const KnockTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* KnockTaskDefinition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const KnockTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.KnockTaskDefinition.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 period = 2 [json_name = "period"];
          if (this_._internal_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_period(), target);
          }

          // uint32 expiry = 3 [json_name = "expiry"];
          if (this_._internal_expiry() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_expiry(), target);
          }

          // uint32 count = 4 [json_name = "count"];
          if (this_._internal_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_count(), target);
          }

          // uint32 port = 5 [json_name = "port"];
          if (this_._internal_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                5, this_._internal_port(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.KnockTaskDefinition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t KnockTaskDefinition::ByteSizeLong(const MessageLite& base) {
          const KnockTaskDefinition& this_ = static_cast<const KnockTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t KnockTaskDefinition::ByteSizeLong() const {
          const KnockTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // uint32 period = 2 [json_name = "period"];
            if (this_._internal_period() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_period());
            }
            // uint32 expiry = 3 [json_name = "expiry"];
            if (this_._internal_expiry() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_expiry());
            }
            // uint32 count = 4 [json_name = "count"];
            if (this_._internal_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_count());
            }
            // uint32 port = 5 [json_name = "port"];
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_port());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void KnockTaskDefinition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<KnockTaskDefinition*>(&to_msg);
  auto& from = static_cast<const KnockTaskDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_period() != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (from._internal_expiry() != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void KnockTaskDefinition::CopyFrom(const KnockTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void KnockTaskDefinition::InternalSwap(KnockTaskDefinition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.port_)
      + sizeof(KnockTaskDefinition::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, _impl_.period_)>(
          reinterpret_cast<char*>(&_impl_.period_),
          reinterpret_cast<char*>(&other->_impl_.period_));
}

::google::protobuf::Metadata KnockTaskDefinition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DNSTaskDefinition::_Internal {
 public:
};

DNSTaskDefinition::DNSTaskDefinition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DNSTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE DNSTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::DNSTaskDefinition& from_msg)
      : target_(arena, from.target_),
        type_(arena, from.type_),
        resolver_(arena, from.resolver_),
        _cached_size_{0} {}

DNSTaskDefinition::DNSTaskDefinition(
    ::google::protobuf::Arena* arena,
    const DNSTaskDefinition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DNSTaskDefinition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_),
           offsetof(Impl_, port_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::port_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DNSTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE DNSTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        type_(arena),
        resolver_(arena),
        _cached_size_{0} {}

inline void DNSTaskDefinition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           0,
           offsetof(Impl_, port_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::port_));
}
DNSTaskDefinition::~DNSTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  SharedDtor(*this);
}
inline void DNSTaskDefinition::SharedDtor(MessageLite& self) {
  DNSTaskDefinition& this_ = static_cast<DNSTaskDefinition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.type_.Destroy();
  this_._impl_.resolver_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DNSTaskDefinition::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DNSTaskDefinition(arena);
}
constexpr auto DNSTaskDefinition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DNSTaskDefinition),
                                            alignof(DNSTaskDefinition));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DNSTaskDefinition::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DNSTaskDefinition_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DNSTaskDefinition::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DNSTaskDefinition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DNSTaskDefinition::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DNSTaskDefinition>(), &DNSTaskDefinition::ByteSizeLong,
            &DNSTaskDefinition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_._cached_size_),
        false,
    },
    &DNSTaskDefinition::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DNSTaskDefinition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 75, 2> DNSTaskDefinition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DNSTaskDefinition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.target_)}},
    // uint32 period = 2 [json_name = "period"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DNSTaskDefinition, _impl_.period_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.period_)}},
    // uint32 expiry = 3 [json_name = "expiry"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DNSTaskDefinition, _impl_.expiry_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.expiry_)}},
    // uint32 count = 4 [json_name = "count"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DNSTaskDefinition, _impl_.count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.count_)}},
    // uint32 port = 5 [json_name = "port"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DNSTaskDefinition, _impl_.port_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.port_)}},
    // string type = 6 [json_name = "type"];
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.type_)}},
    // string resolver = 7 [json_name = "resolver"];
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.resolver_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 period = 2 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 expiry = 3 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 count = 4 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 port = 5 [json_name = "port"];
    {PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string type = 6 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string resolver = 7 [json_name = "resolver"];
    {PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.resolver_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\60\6\0\0\0\0\4\10"
    "kentik.synthetics.v202101beta1.DNSTaskDefinition"
    "target"
    "type"
    "resolver"
  }},
};

PROTOBUF_NOINLINE void DNSTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.resolver_.ClearToEmpty();
  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.port_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.port_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DNSTaskDefinition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DNSTaskDefinition& this_ = static_cast<const DNSTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DNSTaskDefinition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DNSTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.DNSTaskDefinition.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 period = 2 [json_name = "period"];
          if (this_._internal_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_period(), target);
          }

          // uint32 expiry = 3 [json_name = "expiry"];
          if (this_._internal_expiry() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_expiry(), target);
          }

          // uint32 count = 4 [json_name = "count"];
          if (this_._internal_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_count(), target);
          }

          // uint32 port = 5 [json_name = "port"];
          if (this_._internal_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                5, this_._internal_port(), target);
          }

          // string type = 6 [json_name = "type"];
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.DNSTaskDefinition.type");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string resolver = 7 [json_name = "resolver"];
          if (!this_._internal_resolver().empty()) {
            const std::string& _s = this_._internal_resolver();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DNSTaskDefinition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DNSTaskDefinition::ByteSizeLong(const MessageLite& base) {
          const DNSTaskDefinition& this_ = static_cast<const DNSTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DNSTaskDefinition::ByteSizeLong() const {
          const DNSTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // string type = 6 [json_name = "type"];
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
            // string resolver = 7 [json_name = "resolver"];
            if (!this_._internal_resolver().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_resolver());
            }
            // uint32 period = 2 [json_name = "period"];
            if (this_._internal_period() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_period());
            }
            // uint32 expiry = 3 [json_name = "expiry"];
            if (this_._internal_expiry() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_expiry());
            }
            // uint32 count = 4 [json_name = "count"];
            if (this_._internal_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_count());
            }
            // uint32 port = 5 [json_name = "port"];
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_port());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DNSTaskDefinition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DNSTaskDefinition*>(&to_msg);
  auto& from = static_cast<const DNSTaskDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_resolver().empty()) {
    _this->_internal_set_resolver(from._internal_resolver());
  }
  if (from._internal_period() != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (from._internal_expiry() != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DNSTaskDefinition::CopyFrom(const DNSTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DNSTaskDefinition::InternalSwap(DNSTaskDefinition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.resolver_, &other->_impl_.resolver_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.port_)
      + sizeof(DNSTaskDefinition::_impl_.port_)
      - PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, _impl_.period_)>(
          reinterpret_cast<char*>(&_impl_.period_),
          reinterpret_cast<char*>(&other->_impl_.period_));
}

::google::protobuf::Metadata DNSTaskDefinition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ShakeTaskDefinition::_Internal {
 public:
};

ShakeTaskDefinition::ShakeTaskDefinition(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE ShakeTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::ShakeTaskDefinition& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

ShakeTaskDefinition::ShakeTaskDefinition(
    ::google::protobuf::Arena* arena,
    const ShakeTaskDefinition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ShakeTaskDefinition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, port_),
           offsetof(Impl_, expiry_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::expiry_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
}
inline PROTOBUF_NDEBUG_INLINE ShakeTaskDefinition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void ShakeTaskDefinition::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, port_),
           0,
           offsetof(Impl_, expiry_) -
               offsetof(Impl_, port_) +
               sizeof(Impl_::expiry_));
}
ShakeTaskDefinition::~ShakeTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  SharedDtor(*this);
}
inline void ShakeTaskDefinition::SharedDtor(MessageLite& self) {
  ShakeTaskDefinition& this_ = static_cast<ShakeTaskDefinition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ShakeTaskDefinition::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ShakeTaskDefinition(arena);
}
constexpr auto ShakeTaskDefinition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ShakeTaskDefinition),
                                            alignof(ShakeTaskDefinition));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ShakeTaskDefinition::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ShakeTaskDefinition_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ShakeTaskDefinition::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ShakeTaskDefinition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ShakeTaskDefinition::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ShakeTaskDefinition>(), &ShakeTaskDefinition::ByteSizeLong,
            &ShakeTaskDefinition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_._cached_size_),
        false,
    },
    &ShakeTaskDefinition::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ShakeTaskDefinition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 65, 2> ShakeTaskDefinition::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ShakeTaskDefinition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 expiry = 4 [json_name = "expiry"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ShakeTaskDefinition, _impl_.expiry_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.expiry_)}},
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.target_)}},
    // uint32 port = 2 [json_name = "port"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ShakeTaskDefinition, _impl_.port_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.port_)}},
    // uint32 period = 3 [json_name = "period"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ShakeTaskDefinition, _impl_.period_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.period_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 port = 2 [json_name = "port"];
    {PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 period = 3 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 expiry = 4 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\62\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.ShakeTaskDefinition"
    "target"
  }},
};

PROTOBUF_NOINLINE void ShakeTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.expiry_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.expiry_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ShakeTaskDefinition::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ShakeTaskDefinition& this_ = static_cast<const ShakeTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ShakeTaskDefinition::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ShakeTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.ShakeTaskDefinition.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 port = 2 [json_name = "port"];
          if (this_._internal_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_port(), target);
          }

          // uint32 period = 3 [json_name = "period"];
          if (this_._internal_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_period(), target);
          }

          // uint32 expiry = 4 [json_name = "expiry"];
          if (this_._internal_expiry() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                4, this_._internal_expiry(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ShakeTaskDefinition::ByteSizeLong(const MessageLite& base) {
          const ShakeTaskDefinition& this_ = static_cast<const ShakeTaskDefinition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ShakeTaskDefinition::ByteSizeLong() const {
          const ShakeTaskDefinition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // uint32 port = 2 [json_name = "port"];
            if (this_._internal_port() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_port());
            }
            // uint32 period = 3 [json_name = "period"];
            if (this_._internal_period() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_period());
            }
            // uint32 expiry = 4 [json_name = "expiry"];
            if (this_._internal_expiry() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_expiry());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ShakeTaskDefinition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ShakeTaskDefinition*>(&to_msg);
  auto& from = static_cast<const ShakeTaskDefinition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  if (from._internal_period() != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (from._internal_expiry() != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ShakeTaskDefinition::CopyFrom(const ShakeTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ShakeTaskDefinition::InternalSwap(ShakeTaskDefinition* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.expiry_)
      + sizeof(ShakeTaskDefinition::_impl_.expiry_)
      - PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::google::protobuf::Metadata ShakeTaskDefinition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::UserInfo& from_msg)
      : id_(arena, from.id_),
        email_(arena, from.email_),
        full_name_(arena, from.full_name_),
        _cached_size_{0} {}

UserInfo::UserInfo(
    ::google::protobuf::Arena* arena,
    const UserInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UserInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.UserInfo)
}
inline PROTOBUF_NDEBUG_INLINE UserInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        email_(arena),
        full_name_(arena),
        _cached_size_{0} {}

inline void UserInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.UserInfo)
  SharedDtor(*this);
}
inline void UserInfo::SharedDtor(MessageLite& self) {
  UserInfo& this_ = static_cast<UserInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.email_.Destroy();
  this_._impl_.full_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* UserInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) UserInfo(arena);
}
constexpr auto UserInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UserInfo),
                                            alignof(UserInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull UserInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_UserInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UserInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<UserInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UserInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<UserInfo>(), &UserInfo::ByteSizeLong,
            &UserInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UserInfo, _impl_._cached_size_),
        false,
    },
    &UserInfo::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* UserInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 64, 2> UserInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::UserInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.id_)}},
    // string email = 2 [json_name = "email"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.email_)}},
    // string full_name = 3 [json_name = "fullName"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.full_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string email = 2 [json_name = "email"];
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.email_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string full_name = 3 [json_name = "fullName"];
    {PROTOBUF_FIELD_OFFSET(UserInfo, _impl_.full_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\2\5\11\0\0\0\0"
    "kentik.synthetics.v202101beta1.UserInfo"
    "id"
    "email"
    "full_name"
  }},
};

PROTOBUF_NOINLINE void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.UserInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.email_.ClearToEmpty();
  _impl_.full_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UserInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UserInfo& this_ = static_cast<const UserInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UserInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UserInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.UserInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.UserInfo.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string email = 2 [json_name = "email"];
          if (!this_._internal_email().empty()) {
            const std::string& _s = this_._internal_email();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.UserInfo.email");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string full_name = 3 [json_name = "fullName"];
          if (!this_._internal_full_name().empty()) {
            const std::string& _s = this_._internal_full_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.UserInfo.full_name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.UserInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UserInfo::ByteSizeLong(const MessageLite& base) {
          const UserInfo& this_ = static_cast<const UserInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UserInfo::ByteSizeLong() const {
          const UserInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.UserInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string email = 2 [json_name = "email"];
            if (!this_._internal_email().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_email());
            }
            // string full_name = 3 [json_name = "fullName"];
            if (!this_._internal_full_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_full_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UserInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UserInfo*>(&to_msg);
  auto& from = static_cast<const UserInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.UserInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_email().empty()) {
    _this->_internal_set_email(from._internal_email());
  }
  if (!from._internal_full_name().empty()) {
    _this->_internal_set_full_name(from._internal_full_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UserInfo::InternalSwap(UserInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.email_, &other->_impl_.email_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.full_name_, &other->_impl_.full_name_, arena);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Test::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Test>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Test, _impl_._has_bits_);
};

void Test::clear_expires_on() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expires_on_ != nullptr) _impl_.expires_on_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Test::clear_cdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cdate_ != nullptr) _impl_.cdate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Test::clear_edate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edate_ != nullptr) _impl_.edate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
Test::Test(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Test)
}
inline PROTOBUF_NDEBUG_INLINE Test::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::Test& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_),
        name_(arena, from.name_),
        type_(arena, from.type_),
        device_id_(arena, from.device_id_) {}

Test::Test(
    ::google::protobuf::Arena* arena,
    const Test& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Test* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.settings_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TestSettings>(
                              arena, *from._impl_.settings_)
                        : nullptr;
  _impl_.expires_on_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.expires_on_)
                        : nullptr;
  _impl_.cdate_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.cdate_)
                        : nullptr;
  _impl_.edate_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.edate_)
                        : nullptr;
  _impl_.created_by_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::UserInfo>(
                              arena, *from._impl_.created_by_)
                        : nullptr;
  _impl_.last_updated_by_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::UserInfo>(
                              arena, *from._impl_.last_updated_by_)
                        : nullptr;
  _impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Test)
}
inline PROTOBUF_NDEBUG_INLINE Test::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        id_(arena),
        name_(arena),
        type_(arena),
        device_id_(arena) {}

inline void Test::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, settings_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, settings_) +
               sizeof(Impl_::status_));
}
Test::~Test() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Test)
  SharedDtor(*this);
}
inline void Test::SharedDtor(MessageLite& self) {
  Test& this_ = static_cast<Test&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.type_.Destroy();
  this_._impl_.device_id_.Destroy();
  delete this_._impl_.settings_;
  delete this_._impl_.expires_on_;
  delete this_._impl_.cdate_;
  delete this_._impl_.edate_;
  delete this_._impl_.created_by_;
  delete this_._impl_.last_updated_by_;
  this_._impl_.~Impl_();
}

inline void* Test::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Test(arena);
}
constexpr auto Test::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Test),
                                            alignof(Test));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Test::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Test_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Test::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Test>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Test::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Test>(), &Test::ByteSizeLong,
            &Test::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Test, _impl_._cached_size_),
        false,
    },
    &Test::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Test::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 6, 71, 2> Test::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Test, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Test>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.name_)}},
    // string type = 3 [json_name = "type"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.type_)}},
    // string device_id = 4 [json_name = "deviceId"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.device_id_)}},
    // .kentik.synthetics.v202101beta1.TestStatus status = 5 [json_name = "status"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Test, _impl_.status_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.status_)}},
    // .kentik.synthetics.v202101beta1.TestSettings settings = 6 [json_name = "settings"];
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(Test, _impl_.settings_)}},
    // .google.protobuf.Timestamp expires_on = 7 [json_name = "expiresOn"];
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(Test, _impl_.expires_on_)}},
    // .google.protobuf.Timestamp cdate = 8 [json_name = "cdate"];
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(Test, _impl_.cdate_)}},
    // .google.protobuf.Timestamp edate = 9 [json_name = "edate"];
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(Test, _impl_.edate_)}},
    // .kentik.synthetics.v202101beta1.UserInfo created_by = 10 [json_name = "createdBy"];
    {::_pbi::TcParser::FastMtS1,
     {82, 4, 4, PROTOBUF_FIELD_OFFSET(Test, _impl_.created_by_)}},
    // .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11 [json_name = "lastUpdatedBy"];
    {::_pbi::TcParser::FastMtS1,
     {90, 5, 5, PROTOBUF_FIELD_OFFSET(Test, _impl_.last_updated_by_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string type = 3 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string device_id = 4 [json_name = "deviceId"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.device_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.TestStatus status = 5 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .kentik.synthetics.v202101beta1.TestSettings settings = 6 [json_name = "settings"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.settings_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp expires_on = 7 [json_name = "expiresOn"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.expires_on_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp cdate = 8 [json_name = "cdate"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.cdate_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp edate = 9 [json_name = "edate"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.edate_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.UserInfo created_by = 10 [json_name = "createdBy"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.created_by_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11 [json_name = "lastUpdatedBy"];
    {PROTOBUF_FIELD_OFFSET(Test, _impl_.last_updated_by_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestSettings>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::UserInfo>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::UserInfo>()},
  }}, {{
    "\43\2\4\4\11\0\0\0\0\0\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.Test"
    "id"
    "name"
    "type"
    "device_id"
  }},
};

PROTOBUF_NOINLINE void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Test)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.settings_ != nullptr);
      _impl_.settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.expires_on_ != nullptr);
      _impl_.expires_on_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.cdate_ != nullptr);
      _impl_.cdate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.edate_ != nullptr);
      _impl_.edate_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.created_by_ != nullptr);
      _impl_.created_by_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.last_updated_by_ != nullptr);
      _impl_.last_updated_by_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Test::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Test& this_ = static_cast<const Test&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Test::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Test& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Test)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Test.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Test.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string type = 3 [json_name = "type"];
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Test.type");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string device_id = 4 [json_name = "deviceId"];
          if (!this_._internal_device_id().empty()) {
            const std::string& _s = this_._internal_device_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Test.device_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // .kentik.synthetics.v202101beta1.TestStatus status = 5 [json_name = "status"];
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_status(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.TestSettings settings = 6 [json_name = "settings"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.settings_, this_._impl_.settings_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp expires_on = 7 [json_name = "expiresOn"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.expires_on_, this_._impl_.expires_on_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp cdate = 8 [json_name = "cdate"];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.cdate_, this_._impl_.cdate_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp edate = 9 [json_name = "edate"];
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.edate_, this_._impl_.edate_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.UserInfo created_by = 10 [json_name = "createdBy"];
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.created_by_, this_._impl_.created_by_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11 [json_name = "lastUpdatedBy"];
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.last_updated_by_, this_._impl_.last_updated_by_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Test)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Test::ByteSizeLong(const MessageLite& base) {
          const Test& this_ = static_cast<const Test&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Test::ByteSizeLong() const {
          const Test& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Test)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string type = 3 [json_name = "type"];
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
            // string device_id = 4 [json_name = "deviceId"];
            if (!this_._internal_device_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // .kentik.synthetics.v202101beta1.TestSettings settings = 6 [json_name = "settings"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.settings_);
            }
            // .google.protobuf.Timestamp expires_on = 7 [json_name = "expiresOn"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expires_on_);
            }
            // .google.protobuf.Timestamp cdate = 8 [json_name = "cdate"];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cdate_);
            }
            // .google.protobuf.Timestamp edate = 9 [json_name = "edate"];
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.edate_);
            }
            // .kentik.synthetics.v202101beta1.UserInfo created_by = 10 [json_name = "createdBy"];
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.created_by_);
            }
            // .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11 [json_name = "lastUpdatedBy"];
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_updated_by_);
            }
          }
           {
            // .kentik.synthetics.v202101beta1.TestStatus status = 5 [json_name = "status"];
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Test::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Test*>(&to_msg);
  auto& from = static_cast<const Test&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Test)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.settings_ != nullptr);
      if (_this->_impl_.settings_ == nullptr) {
        _this->_impl_.settings_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TestSettings>(arena, *from._impl_.settings_);
      } else {
        _this->_impl_.settings_->MergeFrom(*from._impl_.settings_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.expires_on_ != nullptr);
      if (_this->_impl_.expires_on_ == nullptr) {
        _this->_impl_.expires_on_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.expires_on_);
      } else {
        _this->_impl_.expires_on_->MergeFrom(*from._impl_.expires_on_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.cdate_ != nullptr);
      if (_this->_impl_.cdate_ == nullptr) {
        _this->_impl_.cdate_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.cdate_);
      } else {
        _this->_impl_.cdate_->MergeFrom(*from._impl_.cdate_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.edate_ != nullptr);
      if (_this->_impl_.edate_ == nullptr) {
        _this->_impl_.edate_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.edate_);
      } else {
        _this->_impl_.edate_->MergeFrom(*from._impl_.edate_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.created_by_ != nullptr);
      if (_this->_impl_.created_by_ == nullptr) {
        _this->_impl_.created_by_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::UserInfo>(arena, *from._impl_.created_by_);
      } else {
        _this->_impl_.created_by_->MergeFrom(*from._impl_.created_by_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.last_updated_by_ != nullptr);
      if (_this->_impl_.last_updated_by_ == nullptr) {
        _this->_impl_.last_updated_by_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::UserInfo>(arena, *from._impl_.last_updated_by_);
      } else {
        _this->_impl_.last_updated_by_->MergeFrom(*from._impl_.last_updated_by_);
      }
    }
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Test::InternalSwap(Test* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, &other->_impl_.device_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test, _impl_.status_)
      + sizeof(Test::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(Test, _impl_.settings_)>(
          reinterpret_cast<char*>(&_impl_.settings_),
          reinterpret_cast<char*>(&other->_impl_.settings_));
}

::google::protobuf::Metadata Test::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              HTTPConfig_HeadersEntry_DoNotUse::HTTPConfig_HeadersEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              HTTPConfig_HeadersEntry_DoNotUse::HTTPConfig_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              HTTPConfig_HeadersEntry_DoNotUse::HTTPConfig_HeadersEntry_DoNotUse() : SuperType() {}
              HTTPConfig_HeadersEntry_DoNotUse::HTTPConfig_HeadersEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* HTTPConfig_HeadersEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) HTTPConfig_HeadersEntry_DoNotUse(arena);
              }
              constexpr auto HTTPConfig_HeadersEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HTTPConfig_HeadersEntry_DoNotUse),
                                                          alignof(HTTPConfig_HeadersEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull HTTPConfig_HeadersEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_HTTPConfig_HeadersEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &HTTPConfig_HeadersEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<HTTPConfig_HeadersEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &HTTPConfig_HeadersEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &HTTPConfig_HeadersEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(HTTPConfig_HeadersEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &HTTPConfig_HeadersEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* HTTPConfig_HeadersEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 71, 2> HTTPConfig_HeadersEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HTTPConfig_HeadersEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2 [json_name = "value"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig_HeadersEntry_DoNotUse, _impl_.value_)}},
    // string key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig_HeadersEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig_HeadersEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig_HeadersEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\66\3\5\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.HTTPConfig.HeadersEntry"
    "key"
    "value"
  }},
};

// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              HTTPConfig_CssSelectorsEntry_DoNotUse::HTTPConfig_CssSelectorsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              HTTPConfig_CssSelectorsEntry_DoNotUse::HTTPConfig_CssSelectorsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              HTTPConfig_CssSelectorsEntry_DoNotUse::HTTPConfig_CssSelectorsEntry_DoNotUse() : SuperType() {}
              HTTPConfig_CssSelectorsEntry_DoNotUse::HTTPConfig_CssSelectorsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* HTTPConfig_CssSelectorsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) HTTPConfig_CssSelectorsEntry_DoNotUse(arena);
              }
              constexpr auto HTTPConfig_CssSelectorsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HTTPConfig_CssSelectorsEntry_DoNotUse),
                                                          alignof(HTTPConfig_CssSelectorsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull HTTPConfig_CssSelectorsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_HTTPConfig_CssSelectorsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &HTTPConfig_CssSelectorsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<HTTPConfig_CssSelectorsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &HTTPConfig_CssSelectorsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &HTTPConfig_CssSelectorsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &HTTPConfig_CssSelectorsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* HTTPConfig_CssSelectorsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 76, 2> HTTPConfig_CssSelectorsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string value = 2 [json_name = "value"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1 [json_name = "key"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1 [json_name = "key"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string value = 2 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig_CssSelectorsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\73\3\5\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.HTTPConfig.CssSelectorsEntry"
    "key"
    "value"
  }},
};

// ===================================================================

class HTTPConfig::_Internal {
 public:
};

HTTPConfig::HTTPConfig(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HTTPConfig)
}
inline PROTOBUF_NDEBUG_INLINE HTTPConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::HTTPConfig& from_msg)
      : headers_{visibility, arena, from.headers_},
        css_selectors_{visibility, arena, from.css_selectors_},
        method_(arena, from.method_),
        body_(arena, from.body_),
        _cached_size_{0} {}

HTTPConfig::HTTPConfig(
    ::google::protobuf::Arena* arena,
    const HTTPConfig& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HTTPConfig* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_),
           offsetof(Impl_, ignore_tls_errors_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::ignore_tls_errors_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HTTPConfig)
}
inline PROTOBUF_NDEBUG_INLINE HTTPConfig::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : headers_{visibility, arena},
        css_selectors_{visibility, arena},
        method_(arena),
        body_(arena),
        _cached_size_{0} {}

inline void HTTPConfig::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           0,
           offsetof(Impl_, ignore_tls_errors_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::ignore_tls_errors_));
}
HTTPConfig::~HTTPConfig() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HTTPConfig)
  SharedDtor(*this);
}
inline void HTTPConfig::SharedDtor(MessageLite& self) {
  HTTPConfig& this_ = static_cast<HTTPConfig&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.method_.Destroy();
  this_._impl_.body_.Destroy();
  this_._impl_.~Impl_();
}

inline void* HTTPConfig::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HTTPConfig(arena);
}
constexpr auto HTTPConfig::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.headers_) +
          decltype(HTTPConfig::_impl_.headers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.headers_) +
          decltype(HTTPConfig::_impl_.headers_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.css_selectors_) +
          decltype(HTTPConfig::_impl_.css_selectors_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.css_selectors_) +
          decltype(HTTPConfig::_impl_.css_selectors_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(HTTPConfig), alignof(HTTPConfig), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HTTPConfig::PlacementNew_,
                                 sizeof(HTTPConfig),
                                 alignof(HTTPConfig));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HTTPConfig::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HTTPConfig_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HTTPConfig::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HTTPConfig>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HTTPConfig::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HTTPConfig>(), &HTTPConfig::ByteSizeLong,
            &HTTPConfig::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_._cached_size_),
        false,
    },
    &HTTPConfig::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HTTPConfig::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 80, 2> HTTPConfig::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HTTPConfig>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint32 period = 1 [json_name = "period"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HTTPConfig, _impl_.period_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.period_)}},
    // uint32 expiry = 2 [json_name = "expiry"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(HTTPConfig, _impl_.expiry_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.expiry_)}},
    // string method = 3 [json_name = "method"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.method_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string body = 5 [json_name = "body"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.body_)}},
    // bool ignore_tls_errors = 6 [json_name = "ignoreTlsErrors"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(HTTPConfig, _impl_.ignore_tls_errors_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.ignore_tls_errors_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 period = 1 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 expiry = 2 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string method = 3 [json_name = "method"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.method_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, string> headers = 4 [json_name = "headers"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.headers_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // string body = 5 [json_name = "body"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.body_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool ignore_tls_errors = 6 [json_name = "ignoreTlsErrors"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.ignore_tls_errors_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // map<string, string> css_selectors = 7 [json_name = "cssSelectors"];
    {PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.css_selectors_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(HTTPConfig()._impl_.headers_)>(
        1, 0, 0, 9,
        9)},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(HTTPConfig()._impl_.css_selectors_)>(
        1, 0, 0, 9,
        9)},
  }}, {{
    "\51\0\0\6\7\4\0\15"
    "kentik.synthetics.v202101beta1.HTTPConfig"
    "method"
    "headers"
    "body"
    "css_selectors"
  }},
};

PROTOBUF_NOINLINE void HTTPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HTTPConfig)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.headers_.Clear();
  _impl_.css_selectors_.Clear();
  _impl_.method_.ClearToEmpty();
  _impl_.body_.ClearToEmpty();
  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ignore_tls_errors_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.ignore_tls_errors_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HTTPConfig::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HTTPConfig& this_ = static_cast<const HTTPConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HTTPConfig::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HTTPConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HTTPConfig)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 period = 1 [json_name = "period"];
          if (this_._internal_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_period(), target);
          }

          // uint32 expiry = 2 [json_name = "expiry"];
          if (this_._internal_expiry() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_expiry(), target);
          }

          // string method = 3 [json_name = "method"];
          if (!this_._internal_method().empty()) {
            const std::string& _s = this_._internal_method();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.method");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // map<string, string> headers = 4 [json_name = "headers"];
          if (!this_._internal_headers().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_headers();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.headers");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.headers");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    4, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.headers");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.headers");
              }
            }
          }

          // string body = 5 [json_name = "body"];
          if (!this_._internal_body().empty()) {
            const std::string& _s = this_._internal_body();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.body");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // bool ignore_tls_errors = 6 [json_name = "ignoreTlsErrors"];
          if (this_._internal_ignore_tls_errors() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_ignore_tls_errors(), target);
          }

          // map<string, string> css_selectors = 7 [json_name = "cssSelectors"];
          if (!this_._internal_css_selectors().empty()) {
            using MapType = ::google::protobuf::Map<std::string, std::string>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, std::string,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_STRING>;
            const auto& field = this_._internal_css_selectors();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.css_selectors");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.css_selectors");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    7, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.css_selectors");
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.second.data(), static_cast<int>(entry.second.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HTTPConfig.css_selectors");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HTTPConfig)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HTTPConfig::ByteSizeLong(const MessageLite& base) {
          const HTTPConfig& this_ = static_cast<const HTTPConfig&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HTTPConfig::ByteSizeLong() const {
          const HTTPConfig& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HTTPConfig)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, string> headers = 4 [json_name = "headers"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_headers_size());
              for (const auto& entry : this_._internal_headers()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // map<string, string> css_selectors = 7 [json_name = "cssSelectors"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_css_selectors_size());
              for (const auto& entry : this_._internal_css_selectors()) {
                total_size += _pbi::MapEntryFuncs<std::string, std::string,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_STRING>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string method = 3 [json_name = "method"];
            if (!this_._internal_method().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_method());
            }
            // string body = 5 [json_name = "body"];
            if (!this_._internal_body().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_body());
            }
            // uint32 period = 1 [json_name = "period"];
            if (this_._internal_period() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_period());
            }
            // uint32 expiry = 2 [json_name = "expiry"];
            if (this_._internal_expiry() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_expiry());
            }
            // bool ignore_tls_errors = 6 [json_name = "ignoreTlsErrors"];
            if (this_._internal_ignore_tls_errors() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HTTPConfig::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HTTPConfig*>(&to_msg);
  auto& from = static_cast<const HTTPConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HTTPConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.headers_.MergeFrom(from._impl_.headers_);
  _this->_impl_.css_selectors_.MergeFrom(from._impl_.css_selectors_);
  if (!from._internal_method().empty()) {
    _this->_internal_set_method(from._internal_method());
  }
  if (!from._internal_body().empty()) {
    _this->_internal_set_body(from._internal_body());
  }
  if (from._internal_period() != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (from._internal_expiry() != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  if (from._internal_ignore_tls_errors() != 0) {
    _this->_impl_.ignore_tls_errors_ = from._impl_.ignore_tls_errors_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HTTPConfig::CopyFrom(const HTTPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HTTPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HTTPConfig::InternalSwap(HTTPConfig* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.headers_.InternalSwap(&other->_impl_.headers_);
  _impl_.css_selectors_.InternalSwap(&other->_impl_.css_selectors_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.method_, &other->_impl_.method_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, &other->_impl_.body_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.ignore_tls_errors_)
      + sizeof(HTTPConfig::_impl_.ignore_tls_errors_)
      - PROTOBUF_FIELD_OFFSET(HTTPConfig, _impl_.period_)>(
          reinterpret_cast<char*>(&_impl_.period_),
          reinterpret_cast<char*>(&other->_impl_.period_));
}

::google::protobuf::Metadata HTTPConfig::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestSettings::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TestSettings>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TestSettings, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _impl_._oneof_case_);
};

void TestSettings::set_allocated_hostname(::kentik::synthetics::v202101beta1::HostnameTest* hostname) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (hostname) {
    ::google::protobuf::Arena* submessage_arena = hostname->GetArena();
    if (message_arena != submessage_arena) {
      hostname = ::google::protobuf::internal::GetOwnedMessage(message_arena, hostname, submessage_arena);
    }
    set_has_hostname();
    _impl_.definition_.hostname_ = hostname;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.hostname)
}
void TestSettings::set_allocated_ip(::kentik::synthetics::v202101beta1::IpTest* ip) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (ip) {
    ::google::protobuf::Arena* submessage_arena = ip->GetArena();
    if (message_arena != submessage_arena) {
      ip = ::google::protobuf::internal::GetOwnedMessage(message_arena, ip, submessage_arena);
    }
    set_has_ip();
    _impl_.definition_.ip_ = ip;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.ip)
}
void TestSettings::set_allocated_agent(::kentik::synthetics::v202101beta1::AgentTest* agent) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (agent) {
    ::google::protobuf::Arena* submessage_arena = agent->GetArena();
    if (message_arena != submessage_arena) {
      agent = ::google::protobuf::internal::GetOwnedMessage(message_arena, agent, submessage_arena);
    }
    set_has_agent();
    _impl_.definition_.agent_ = agent;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.agent)
}
void TestSettings::set_allocated_flow(::kentik::synthetics::v202101beta1::FlowTest* flow) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (flow) {
    ::google::protobuf::Arena* submessage_arena = flow->GetArena();
    if (message_arena != submessage_arena) {
      flow = ::google::protobuf::internal::GetOwnedMessage(message_arena, flow, submessage_arena);
    }
    set_has_flow();
    _impl_.definition_.flow_ = flow;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.flow)
}
void TestSettings::set_allocated_site(::kentik::synthetics::v202101beta1::SiteTest* site) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (site) {
    ::google::protobuf::Arena* submessage_arena = site->GetArena();
    if (message_arena != submessage_arena) {
      site = ::google::protobuf::internal::GetOwnedMessage(message_arena, site, submessage_arena);
    }
    set_has_site();
    _impl_.definition_.site_ = site;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.site)
}
void TestSettings::set_allocated_tag(::kentik::synthetics::v202101beta1::TagTest* tag) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (tag) {
    ::google::protobuf::Arena* submessage_arena = tag->GetArena();
    if (message_arena != submessage_arena) {
      tag = ::google::protobuf::internal::GetOwnedMessage(message_arena, tag, submessage_arena);
    }
    set_has_tag();
    _impl_.definition_.tag_ = tag;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.tag)
}
void TestSettings::set_allocated_dns(::kentik::synthetics::v202101beta1::DnsTest* dns) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (dns) {
    ::google::protobuf::Arena* submessage_arena = dns->GetArena();
    if (message_arena != submessage_arena) {
      dns = ::google::protobuf::internal::GetOwnedMessage(message_arena, dns, submessage_arena);
    }
    set_has_dns();
    _impl_.definition_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.dns)
}
void TestSettings::set_allocated_url(::kentik::synthetics::v202101beta1::UrlTest* url) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (url) {
    ::google::protobuf::Arena* submessage_arena = url->GetArena();
    if (message_arena != submessage_arena) {
      url = ::google::protobuf::internal::GetOwnedMessage(message_arena, url, submessage_arena);
    }
    set_has_url();
    _impl_.definition_.url_ = url;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.url)
}
void TestSettings::set_allocated_network_grid(::kentik::synthetics::v202101beta1::GridTest* network_grid) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (network_grid) {
    ::google::protobuf::Arena* submessage_arena = network_grid->GetArena();
    if (message_arena != submessage_arena) {
      network_grid = ::google::protobuf::internal::GetOwnedMessage(message_arena, network_grid, submessage_arena);
    }
    set_has_network_grid();
    _impl_.definition_.network_grid_ = network_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.network_grid)
}
void TestSettings::set_allocated_page_load(::kentik::synthetics::v202101beta1::UrlTest* page_load) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (page_load) {
    ::google::protobuf::Arena* submessage_arena = page_load->GetArena();
    if (message_arena != submessage_arena) {
      page_load = ::google::protobuf::internal::GetOwnedMessage(message_arena, page_load, submessage_arena);
    }
    set_has_page_load();
    _impl_.definition_.page_load_ = page_load;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.page_load)
}
void TestSettings::set_allocated_dns_grid(::kentik::synthetics::v202101beta1::DnsGridTest* dns_grid) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (dns_grid) {
    ::google::protobuf::Arena* submessage_arena = dns_grid->GetArena();
    if (message_arena != submessage_arena) {
      dns_grid = ::google::protobuf::internal::GetOwnedMessage(message_arena, dns_grid, submessage_arena);
    }
    set_has_dns_grid();
    _impl_.definition_.dns_grid_ = dns_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.dns_grid)
}
void TestSettings::set_allocated_application_mesh(::kentik::synthetics::v202101beta1::ApplicationMeshTest* application_mesh) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_definition();
  if (application_mesh) {
    ::google::protobuf::Arena* submessage_arena = application_mesh->GetArena();
    if (message_arena != submessage_arena) {
      application_mesh = ::google::protobuf::internal::GetOwnedMessage(message_arena, application_mesh, submessage_arena);
    }
    set_has_application_mesh();
    _impl_.definition_.application_mesh_ = application_mesh;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.application_mesh)
}
TestSettings::TestSettings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestSettings)
}
inline PROTOBUF_NDEBUG_INLINE TestSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TestSettings& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        agent_ids_{visibility, arena, from.agent_ids_},
        tasks_{visibility, arena, from.tasks_},
        servers_{visibility, arena, from.servers_},
        protocol_(arena, from.protocol_),
        definition_{},
        _oneof_case_{from._oneof_case_[0]} {}

TestSettings::TestSettings(
    ::google::protobuf::Arena* arena,
    const TestSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.health_settings_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::HealthSettings>(
                              arena, *from._impl_.health_settings_)
                        : nullptr;
  _impl_.monitoring_settings_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TestMonitoringSettings>(
                              arena, *from._impl_.monitoring_settings_)
                        : nullptr;
  _impl_.ping_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TestPingSettings>(
                              arena, *from._impl_.ping_)
                        : nullptr;
  _impl_.trace_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TestTraceSettings>(
                              arena, *from._impl_.trace_)
                        : nullptr;
  _impl_.http_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::HTTPConfig>(
                              arena, *from._impl_.http_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_),
           offsetof(Impl_, rollup_level_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::rollup_level_));
  switch (definition_case()) {
    case DEFINITION_NOT_SET:
      break;
      case kHostname:
        _impl_.definition_.hostname_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::HostnameTest>(arena, *from._impl_.definition_.hostname_);
        break;
      case kIp:
        _impl_.definition_.ip_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::IpTest>(arena, *from._impl_.definition_.ip_);
        break;
      case kAgent:
        _impl_.definition_.agent_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::AgentTest>(arena, *from._impl_.definition_.agent_);
        break;
      case kFlow:
        _impl_.definition_.flow_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::FlowTest>(arena, *from._impl_.definition_.flow_);
        break;
      case kSite:
        _impl_.definition_.site_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::SiteTest>(arena, *from._impl_.definition_.site_);
        break;
      case kTag:
        _impl_.definition_.tag_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TagTest>(arena, *from._impl_.definition_.tag_);
        break;
      case kDns:
        _impl_.definition_.dns_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::DnsTest>(arena, *from._impl_.definition_.dns_);
        break;
      case kUrl:
        _impl_.definition_.url_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::UrlTest>(arena, *from._impl_.definition_.url_);
        break;
      case kNetworkGrid:
        _impl_.definition_.network_grid_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::GridTest>(arena, *from._impl_.definition_.network_grid_);
        break;
      case kPageLoad:
        _impl_.definition_.page_load_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::UrlTest>(arena, *from._impl_.definition_.page_load_);
        break;
      case kDnsGrid:
        _impl_.definition_.dns_grid_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::DnsGridTest>(arena, *from._impl_.definition_.dns_grid_);
        break;
      case kApplicationMesh:
        _impl_.definition_.application_mesh_ = ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::ApplicationMeshTest>(arena, *from._impl_.definition_.application_mesh_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestSettings)
}
inline PROTOBUF_NDEBUG_INLINE TestSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        agent_ids_{visibility, arena},
        tasks_{visibility, arena},
        servers_{visibility, arena},
        protocol_(arena),
        definition_{},
        _oneof_case_{} {}

inline void TestSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, health_settings_),
           0,
           offsetof(Impl_, rollup_level_) -
               offsetof(Impl_, health_settings_) +
               sizeof(Impl_::rollup_level_));
}
TestSettings::~TestSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestSettings)
  SharedDtor(*this);
}
inline void TestSettings::SharedDtor(MessageLite& self) {
  TestSettings& this_ = static_cast<TestSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.protocol_.Destroy();
  delete this_._impl_.health_settings_;
  delete this_._impl_.monitoring_settings_;
  delete this_._impl_.ping_;
  delete this_._impl_.trace_;
  delete this_._impl_.http_;
  if (this_.has_definition()) {
    this_.clear_definition();
  }
  this_._impl_.~Impl_();
}

void TestSettings::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:kentik.synthetics.v202101beta1.TestSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (definition_case()) {
    case kHostname: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.hostname_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.hostname_);
      }
      break;
    }
    case kIp: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.ip_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.ip_);
      }
      break;
    }
    case kAgent: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.agent_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.agent_);
      }
      break;
    }
    case kFlow: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.flow_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.flow_);
      }
      break;
    }
    case kSite: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.site_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.site_);
      }
      break;
    }
    case kTag: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.tag_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.tag_);
      }
      break;
    }
    case kDns: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.dns_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.dns_);
      }
      break;
    }
    case kUrl: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.url_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.url_);
      }
      break;
    }
    case kNetworkGrid: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.network_grid_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.network_grid_);
      }
      break;
    }
    case kPageLoad: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.page_load_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.page_load_);
      }
      break;
    }
    case kDnsGrid: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.dns_grid_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.dns_grid_);
      }
      break;
    }
    case kApplicationMesh: {
      if (GetArena() == nullptr) {
        delete _impl_.definition_.application_mesh_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.definition_.application_mesh_);
      }
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DEFINITION_NOT_SET;
}


inline void* TestSettings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestSettings(arena);
}
constexpr auto TestSettings::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.agent_ids_) +
          decltype(TestSettings::_impl_.agent_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.tasks_) +
          decltype(TestSettings::_impl_.tasks_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.servers_) +
          decltype(TestSettings::_impl_.servers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TestSettings), alignof(TestSettings), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TestSettings::PlacementNew_,
                                 sizeof(TestSettings),
                                 alignof(TestSettings));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestSettings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestSettings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestSettings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestSettings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestSettings>(), &TestSettings::ByteSizeLong,
            &TestSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestSettings, _impl_._cached_size_),
        false,
    },
    &TestSettings::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 30, 17, 105, 7> TestSettings::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TestSettings, _impl_._has_bits_),
    0, // no _extensions_
    38, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    18356231,  // skipmap
    offsetof(decltype(_table_), field_entries),
    30,  // num_field_entries
    17,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string agent_ids = 14 [json_name = "agentIds"];
    {::_pbi::TcParser::FastUR1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.agent_ids_)}},
    // uint32 period = 15 [json_name = "period"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TestSettings, _impl_.period_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.period_)}},
    // uint32 count = 16 [json_name = "count"];
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.count_)}},
    // uint32 expiry = 17 [json_name = "expiry"];
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.expiry_)}},
    // uint32 limit = 18 [json_name = "limit"];
    {::_pbi::TcParser::FastV32S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.limit_)}},
    // repeated string tasks = 19 [json_name = "tasks"];
    {::_pbi::TcParser::FastUR2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.tasks_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22 [json_name = "healthSettings"];
    {::_pbi::TcParser::FastMtS2,
     {434, 0, 8, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.health_settings_)}},
    // uint32 port = 23 [json_name = "port"];
    {::_pbi::TcParser::FastV32S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.port_)}},
    // .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24 [json_name = "monitoringSettings"];
    {::_pbi::TcParser::FastMtS2,
     {450, 1, 9, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.monitoring_settings_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string protocol = 26 [json_name = "protocol"];
    {::_pbi::TcParser::FastUS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.protocol_)}},
    // .kentik.synthetics.v202101beta1.IPFamily family = 27 [json_name = "family"];
    {::_pbi::TcParser::FastV32S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.family_)}},
    // .kentik.synthetics.v202101beta1.TestPingSettings ping = 28 [json_name = "ping"];
    {::_pbi::TcParser::FastMtS2,
     {482, 2, 10, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.ping_)}},
    // .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29 [json_name = "trace"];
    {::_pbi::TcParser::FastMtS2,
     {490, 3, 11, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.trace_)}},
    // repeated string servers = 30 [json_name = "servers"];
    {::_pbi::TcParser::FastUR2,
     {498, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.servers_)}},
    // bool use_local_ip = 31 [json_name = "useLocalIp"];
    {::_pbi::TcParser::FastV8S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.use_local_ip_)}},
  }}, {{
    33, 0, 1,
    65472, 24,
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.HostnameTest hostname = 4 [json_name = "hostname"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.hostname_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.IpTest ip = 5 [json_name = "ip"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.ip_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.AgentTest agent = 6 [json_name = "agent"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.agent_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.FlowTest flow = 7 [json_name = "flow"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.flow_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.SiteTest site = 8 [json_name = "site"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.site_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.TagTest tag = 9 [json_name = "tag"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.tag_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.DnsTest dns = 10 [json_name = "dns"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.dns_), _Internal::kOneofCaseOffset + 0, 6,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.UrlTest url = 11 [json_name = "url"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.url_), _Internal::kOneofCaseOffset + 0, 7,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string agent_ids = 14 [json_name = "agentIds"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.agent_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // uint32 period = 15 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.period_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 count = 16 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 expiry = 17 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.expiry_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 limit = 18 [json_name = "limit"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.limit_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // repeated string tasks = 19 [json_name = "tasks"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.tasks_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22 [json_name = "healthSettings"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.health_settings_), _Internal::kHasBitsOffset + 0, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 port = 23 [json_name = "port"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.port_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24 [json_name = "monitoringSettings"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.monitoring_settings_), _Internal::kHasBitsOffset + 1, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string protocol = 26 [json_name = "protocol"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.protocol_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.IPFamily family = 27 [json_name = "family"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.family_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .kentik.synthetics.v202101beta1.TestPingSettings ping = 28 [json_name = "ping"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.ping_), _Internal::kHasBitsOffset + 2, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29 [json_name = "trace"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.trace_), _Internal::kHasBitsOffset + 3, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string servers = 30 [json_name = "servers"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.servers_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool use_local_ip = 31 [json_name = "useLocalIp"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.use_local_ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool reciprocal = 32 [json_name = "reciprocal"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.reciprocal_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // uint32 rollup_level = 33 [json_name = "rollupLevel"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.rollup_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .kentik.synthetics.v202101beta1.HTTPConfig http = 34 [json_name = "http"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.http_), _Internal::kHasBitsOffset + 4, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.GridTest network_grid = 35 [json_name = "networkGrid"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.network_grid_), _Internal::kOneofCaseOffset + 0, 13,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.UrlTest page_load = 36 [json_name = "pageLoad"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.page_load_), _Internal::kOneofCaseOffset + 0, 14,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.DnsGridTest dns_grid = 37 [json_name = "dnsGrid"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.dns_grid_), _Internal::kOneofCaseOffset + 0, 15,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.ApplicationMeshTest application_mesh = 38 [json_name = "applicationMesh"];
    {PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.definition_.application_mesh_), _Internal::kOneofCaseOffset + 0, 16,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HostnameTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::IpTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::AgentTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::FlowTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::SiteTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TagTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DnsTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::UrlTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HealthSettings>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestMonitoringSettings>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestPingSettings>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestTraceSettings>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HTTPConfig>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GridTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::UrlTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DnsGridTest>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ApplicationMeshTest>()},
  }}, {{
    "\53\0\0\0\0\0\0\0\0\11\0\0\0\0\5\0\0\0\10\0\0\0\7\0\0\0\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.TestSettings"
    "agent_ids"
    "tasks"
    "protocol"
    "servers"
  }},
};

PROTOBUF_NOINLINE void TestSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agent_ids_.Clear();
  _impl_.tasks_.Clear();
  _impl_.servers_.Clear();
  _impl_.protocol_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.health_settings_ != nullptr);
      _impl_.health_settings_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.monitoring_settings_ != nullptr);
      _impl_.monitoring_settings_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ping_ != nullptr);
      _impl_.ping_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.trace_ != nullptr);
      _impl_.trace_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.http_ != nullptr);
      _impl_.http_->Clear();
    }
  }
  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.rollup_level_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.rollup_level_));
  clear_definition();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestSettings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestSettings& this_ = static_cast<const TestSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestSettings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestSettings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.definition_case()) {
            case kHostname: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.definition_.hostname_, this_._impl_.definition_.hostname_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kIp: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.definition_.ip_, this_._impl_.definition_.ip_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kAgent: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.definition_.agent_, this_._impl_.definition_.agent_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kFlow: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.definition_.flow_, this_._impl_.definition_.flow_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSite: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.definition_.site_, this_._impl_.definition_.site_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kTag: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.definition_.tag_, this_._impl_.definition_.tag_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDns: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  10, *this_._impl_.definition_.dns_, this_._impl_.definition_.dns_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kUrl: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  11, *this_._impl_.definition_.url_, this_._impl_.definition_.url_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          // repeated string agent_ids = 14 [json_name = "agentIds"];
          for (int i = 0, n = this_._internal_agent_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_agent_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestSettings.agent_ids");
            target = stream->WriteString(14, s, target);
          }

          // uint32 period = 15 [json_name = "period"];
          if (this_._internal_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                15, this_._internal_period(), target);
          }

          // uint32 count = 16 [json_name = "count"];
          if (this_._internal_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                16, this_._internal_count(), target);
          }

          // uint32 expiry = 17 [json_name = "expiry"];
          if (this_._internal_expiry() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                17, this_._internal_expiry(), target);
          }

          // uint32 limit = 18 [json_name = "limit"];
          if (this_._internal_limit() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                18, this_._internal_limit(), target);
          }

          // repeated string tasks = 19 [json_name = "tasks"];
          for (int i = 0, n = this_._internal_tasks_size(); i < n; ++i) {
            const auto& s = this_._internal_tasks().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestSettings.tasks");
            target = stream->WriteString(19, s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22 [json_name = "healthSettings"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                22, *this_._impl_.health_settings_, this_._impl_.health_settings_->GetCachedSize(), target,
                stream);
          }

          // uint32 port = 23 [json_name = "port"];
          if (this_._internal_port() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                23, this_._internal_port(), target);
          }

          // .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24 [json_name = "monitoringSettings"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                24, *this_._impl_.monitoring_settings_, this_._impl_.monitoring_settings_->GetCachedSize(), target,
                stream);
          }

          // string protocol = 26 [json_name = "protocol"];
          if (!this_._internal_protocol().empty()) {
            const std::string& _s = this_._internal_protocol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestSettings.protocol");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          // .kentik.synthetics.v202101beta1.IPFamily family = 27 [json_name = "family"];
          if (this_._internal_family() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                27, this_._internal_family(), target);
          }

          // .kentik.synthetics.v202101beta1.TestPingSettings ping = 28 [json_name = "ping"];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                28, *this_._impl_.ping_, this_._impl_.ping_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29 [json_name = "trace"];
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                29, *this_._impl_.trace_, this_._impl_.trace_->GetCachedSize(), target,
                stream);
          }

          // repeated string servers = 30 [json_name = "servers"];
          for (int i = 0, n = this_._internal_servers_size(); i < n; ++i) {
            const auto& s = this_._internal_servers().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestSettings.servers");
            target = stream->WriteString(30, s, target);
          }

          // bool use_local_ip = 31 [json_name = "useLocalIp"];
          if (this_._internal_use_local_ip() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                31, this_._internal_use_local_ip(), target);
          }

          // bool reciprocal = 32 [json_name = "reciprocal"];
          if (this_._internal_reciprocal() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                32, this_._internal_reciprocal(), target);
          }

          // uint32 rollup_level = 33 [json_name = "rollupLevel"];
          if (this_._internal_rollup_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                33, this_._internal_rollup_level(), target);
          }

          // .kentik.synthetics.v202101beta1.HTTPConfig http = 34 [json_name = "http"];
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                34, *this_._impl_.http_, this_._impl_.http_->GetCachedSize(), target,
                stream);
          }

          switch (this_.definition_case()) {
            case kNetworkGrid: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  35, *this_._impl_.definition_.network_grid_, this_._impl_.definition_.network_grid_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kPageLoad: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  36, *this_._impl_.definition_.page_load_, this_._impl_.definition_.page_load_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kDnsGrid: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  37, *this_._impl_.definition_.dns_grid_, this_._impl_.definition_.dns_grid_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kApplicationMesh: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  38, *this_._impl_.definition_.application_mesh_, this_._impl_.definition_.application_mesh_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestSettings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestSettings::ByteSizeLong(const MessageLite& base) {
          const TestSettings& this_ = static_cast<const TestSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestSettings::ByteSizeLong() const {
          const TestSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestSettings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string agent_ids = 14 [json_name = "agentIds"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_agent_ids().size());
              for (int i = 0, n = this_._internal_agent_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_agent_ids().Get(i));
              }
            }
            // repeated string tasks = 19 [json_name = "tasks"];
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_tasks().size());
              for (int i = 0, n = this_._internal_tasks().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_tasks().Get(i));
              }
            }
            // repeated string servers = 30 [json_name = "servers"];
            {
              total_size +=
                  2 * ::google::protobuf::internal::FromIntSize(this_._internal_servers().size());
              for (int i = 0, n = this_._internal_servers().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_servers().Get(i));
              }
            }
          }
           {
            // string protocol = 26 [json_name = "protocol"];
            if (!this_._internal_protocol().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_protocol());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22 [json_name = "healthSettings"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.health_settings_);
            }
            // .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24 [json_name = "monitoringSettings"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.monitoring_settings_);
            }
            // .kentik.synthetics.v202101beta1.TestPingSettings ping = 28 [json_name = "ping"];
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ping_);
            }
            // .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29 [json_name = "trace"];
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.trace_);
            }
            // .kentik.synthetics.v202101beta1.HTTPConfig http = 34 [json_name = "http"];
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.http_);
            }
          }
           {
            // uint32 period = 15 [json_name = "period"];
            if (this_._internal_period() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_period());
            }
            // uint32 count = 16 [json_name = "count"];
            if (this_._internal_count() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_count());
            }
            // uint32 expiry = 17 [json_name = "expiry"];
            if (this_._internal_expiry() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_expiry());
            }
            // uint32 limit = 18 [json_name = "limit"];
            if (this_._internal_limit() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_limit());
            }
            // uint32 port = 23 [json_name = "port"];
            if (this_._internal_port() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_port());
            }
            // .kentik.synthetics.v202101beta1.IPFamily family = 27 [json_name = "family"];
            if (this_._internal_family() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_family());
            }
            // bool use_local_ip = 31 [json_name = "useLocalIp"];
            if (this_._internal_use_local_ip() != 0) {
              total_size += 3;
            }
            // bool reciprocal = 32 [json_name = "reciprocal"];
            if (this_._internal_reciprocal() != 0) {
              total_size += 3;
            }
            // uint32 rollup_level = 33 [json_name = "rollupLevel"];
            if (this_._internal_rollup_level() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                              this_._internal_rollup_level());
            }
          }
          switch (this_.definition_case()) {
            // .kentik.synthetics.v202101beta1.HostnameTest hostname = 4 [json_name = "hostname"];
            case kHostname: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.hostname_);
              break;
            }
            // .kentik.synthetics.v202101beta1.IpTest ip = 5 [json_name = "ip"];
            case kIp: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.ip_);
              break;
            }
            // .kentik.synthetics.v202101beta1.AgentTest agent = 6 [json_name = "agent"];
            case kAgent: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.agent_);
              break;
            }
            // .kentik.synthetics.v202101beta1.FlowTest flow = 7 [json_name = "flow"];
            case kFlow: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.flow_);
              break;
            }
            // .kentik.synthetics.v202101beta1.SiteTest site = 8 [json_name = "site"];
            case kSite: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.site_);
              break;
            }
            // .kentik.synthetics.v202101beta1.TagTest tag = 9 [json_name = "tag"];
            case kTag: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.tag_);
              break;
            }
            // .kentik.synthetics.v202101beta1.DnsTest dns = 10 [json_name = "dns"];
            case kDns: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.dns_);
              break;
            }
            // .kentik.synthetics.v202101beta1.UrlTest url = 11 [json_name = "url"];
            case kUrl: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.url_);
              break;
            }
            // .kentik.synthetics.v202101beta1.GridTest network_grid = 35 [json_name = "networkGrid"];
            case kNetworkGrid: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.network_grid_);
              break;
            }
            // .kentik.synthetics.v202101beta1.UrlTest page_load = 36 [json_name = "pageLoad"];
            case kPageLoad: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.page_load_);
              break;
            }
            // .kentik.synthetics.v202101beta1.DnsGridTest dns_grid = 37 [json_name = "dnsGrid"];
            case kDnsGrid: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.dns_grid_);
              break;
            }
            // .kentik.synthetics.v202101beta1.ApplicationMeshTest application_mesh = 38 [json_name = "applicationMesh"];
            case kApplicationMesh: {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.definition_.application_mesh_);
              break;
            }
            case DEFINITION_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestSettings*>(&to_msg);
  auto& from = static_cast<const TestSettings&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_agent_ids()->MergeFrom(from._internal_agent_ids());
  _this->_internal_mutable_tasks()->MergeFrom(from._internal_tasks());
  _this->_internal_mutable_servers()->MergeFrom(from._internal_servers());
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.health_settings_ != nullptr);
      if (_this->_impl_.health_settings_ == nullptr) {
        _this->_impl_.health_settings_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::HealthSettings>(arena, *from._impl_.health_settings_);
      } else {
        _this->_impl_.health_settings_->MergeFrom(*from._impl_.health_settings_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.monitoring_settings_ != nullptr);
      if (_this->_impl_.monitoring_settings_ == nullptr) {
        _this->_impl_.monitoring_settings_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TestMonitoringSettings>(arena, *from._impl_.monitoring_settings_);
      } else {
        _this->_impl_.monitoring_settings_->MergeFrom(*from._impl_.monitoring_settings_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.ping_ != nullptr);
      if (_this->_impl_.ping_ == nullptr) {
        _this->_impl_.ping_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TestPingSettings>(arena, *from._impl_.ping_);
      } else {
        _this->_impl_.ping_->MergeFrom(*from._impl_.ping_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.trace_ != nullptr);
      if (_this->_impl_.trace_ == nullptr) {
        _this->_impl_.trace_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TestTraceSettings>(arena, *from._impl_.trace_);
      } else {
        _this->_impl_.trace_->MergeFrom(*from._impl_.trace_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.http_ != nullptr);
      if (_this->_impl_.http_ == nullptr) {
        _this->_impl_.http_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::HTTPConfig>(arena, *from._impl_.http_);
      } else {
        _this->_impl_.http_->MergeFrom(*from._impl_.http_);
      }
    }
  }
  if (from._internal_period() != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (from._internal_count() != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  if (from._internal_expiry() != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  if (from._internal_limit() != 0) {
    _this->_impl_.limit_ = from._impl_.limit_;
  }
  if (from._internal_port() != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  if (from._internal_family() != 0) {
    _this->_impl_.family_ = from._impl_.family_;
  }
  if (from._internal_use_local_ip() != 0) {
    _this->_impl_.use_local_ip_ = from._impl_.use_local_ip_;
  }
  if (from._internal_reciprocal() != 0) {
    _this->_impl_.reciprocal_ = from._impl_.reciprocal_;
  }
  if (from._internal_rollup_level() != 0) {
    _this->_impl_.rollup_level_ = from._impl_.rollup_level_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_definition();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kHostname: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.hostname_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::HostnameTest>(arena, *from._impl_.definition_.hostname_);
        } else {
          _this->_impl_.definition_.hostname_->MergeFrom(from._internal_hostname());
        }
        break;
      }
      case kIp: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.ip_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::IpTest>(arena, *from._impl_.definition_.ip_);
        } else {
          _this->_impl_.definition_.ip_->MergeFrom(from._internal_ip());
        }
        break;
      }
      case kAgent: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.agent_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::AgentTest>(arena, *from._impl_.definition_.agent_);
        } else {
          _this->_impl_.definition_.agent_->MergeFrom(from._internal_agent());
        }
        break;
      }
      case kFlow: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.flow_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::FlowTest>(arena, *from._impl_.definition_.flow_);
        } else {
          _this->_impl_.definition_.flow_->MergeFrom(from._internal_flow());
        }
        break;
      }
      case kSite: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.site_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::SiteTest>(arena, *from._impl_.definition_.site_);
        } else {
          _this->_impl_.definition_.site_->MergeFrom(from._internal_site());
        }
        break;
      }
      case kTag: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.tag_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TagTest>(arena, *from._impl_.definition_.tag_);
        } else {
          _this->_impl_.definition_.tag_->MergeFrom(from._internal_tag());
        }
        break;
      }
      case kDns: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.dns_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::DnsTest>(arena, *from._impl_.definition_.dns_);
        } else {
          _this->_impl_.definition_.dns_->MergeFrom(from._internal_dns());
        }
        break;
      }
      case kUrl: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.url_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::UrlTest>(arena, *from._impl_.definition_.url_);
        } else {
          _this->_impl_.definition_.url_->MergeFrom(from._internal_url());
        }
        break;
      }
      case kNetworkGrid: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.network_grid_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::GridTest>(arena, *from._impl_.definition_.network_grid_);
        } else {
          _this->_impl_.definition_.network_grid_->MergeFrom(from._internal_network_grid());
        }
        break;
      }
      case kPageLoad: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.page_load_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::UrlTest>(arena, *from._impl_.definition_.page_load_);
        } else {
          _this->_impl_.definition_.page_load_->MergeFrom(from._internal_page_load());
        }
        break;
      }
      case kDnsGrid: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.dns_grid_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::DnsGridTest>(arena, *from._impl_.definition_.dns_grid_);
        } else {
          _this->_impl_.definition_.dns_grid_->MergeFrom(from._internal_dns_grid());
        }
        break;
      }
      case kApplicationMesh: {
        if (oneof_needs_init) {
          _this->_impl_.definition_.application_mesh_ =
              ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::ApplicationMeshTest>(arena, *from._impl_.definition_.application_mesh_);
        } else {
          _this->_impl_.definition_.application_mesh_->MergeFrom(from._internal_application_mesh());
        }
        break;
      }
      case DEFINITION_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestSettings::CopyFrom(const TestSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestSettings::InternalSwap(TestSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.agent_ids_.InternalSwap(&other->_impl_.agent_ids_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  _impl_.servers_.InternalSwap(&other->_impl_.servers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_, &other->_impl_.protocol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.rollup_level_)
      + sizeof(TestSettings::_impl_.rollup_level_)
      - PROTOBUF_FIELD_OFFSET(TestSettings, _impl_.health_settings_)>(
          reinterpret_cast<char*>(&_impl_.health_settings_),
          reinterpret_cast<char*>(&other->_impl_.health_settings_));
  swap(_impl_.definition_, other->_impl_.definition_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata TestSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestTraceSettings::_Internal {
 public:
};

TestTraceSettings::TestTraceSettings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestTraceSettings)
}
inline PROTOBUF_NDEBUG_INLINE TestTraceSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TestTraceSettings& from_msg)
      : protocol_(arena, from.protocol_),
        _cached_size_{0} {}

TestTraceSettings::TestTraceSettings(
    ::google::protobuf::Arena* arena,
    const TestTraceSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestTraceSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_),
           offsetof(Impl_, delay_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::delay_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestTraceSettings)
}
inline PROTOBUF_NDEBUG_INLINE TestTraceSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : protocol_(arena),
        _cached_size_{0} {}

inline void TestTraceSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           0,
           offsetof(Impl_, delay_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::delay_));
}
TestTraceSettings::~TestTraceSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestTraceSettings)
  SharedDtor(*this);
}
inline void TestTraceSettings::SharedDtor(MessageLite& self) {
  TestTraceSettings& this_ = static_cast<TestTraceSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.protocol_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TestTraceSettings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestTraceSettings(arena);
}
constexpr auto TestTraceSettings::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TestTraceSettings),
                                            alignof(TestTraceSettings));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestTraceSettings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestTraceSettings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestTraceSettings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestTraceSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestTraceSettings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestTraceSettings>(), &TestTraceSettings::ByteSizeLong,
            &TestTraceSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_._cached_size_),
        false,
    },
    &TestTraceSettings::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestTraceSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 65, 2> TestTraceSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestTraceSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // float period = 1 [json_name = "period"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.period_)}},
    // float count = 2 [json_name = "count"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.count_)}},
    // string protocol = 3 [json_name = "protocol"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.protocol_)}},
    // float port = 4 [json_name = "port"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.port_)}},
    // float expiry = 5 [json_name = "expiry"];
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.expiry_)}},
    // float limit = 6 [json_name = "limit"];
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.limit_)}},
    // float delay = 7 [json_name = "delay"];
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.delay_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float period = 1 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float count = 2 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // string protocol = 3 [json_name = "protocol"];
    {PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.protocol_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // float port = 4 [json_name = "port"];
    {PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.port_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float expiry = 5 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float limit = 6 [json_name = "limit"];
    {PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float delay = 7 [json_name = "delay"];
    {PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.delay_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\60\0\0\10\0\0\0\0"
    "kentik.synthetics.v202101beta1.TestTraceSettings"
    "protocol"
  }},
};

PROTOBUF_NOINLINE void TestTraceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.protocol_.ClearToEmpty();
  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delay_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.delay_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestTraceSettings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestTraceSettings& this_ = static_cast<const TestTraceSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestTraceSettings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestTraceSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestTraceSettings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float period = 1 [json_name = "period"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_period()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_period(), target);
          }

          // float count = 2 [json_name = "count"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_count()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_count(), target);
          }

          // string protocol = 3 [json_name = "protocol"];
          if (!this_._internal_protocol().empty()) {
            const std::string& _s = this_._internal_protocol();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestTraceSettings.protocol");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // float port = 4 [json_name = "port"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_port()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_port(), target);
          }

          // float expiry = 5 [json_name = "expiry"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_expiry()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_expiry(), target);
          }

          // float limit = 6 [json_name = "limit"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_limit()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_limit(), target);
          }

          // float delay = 7 [json_name = "delay"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_delay()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_delay(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestTraceSettings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestTraceSettings::ByteSizeLong(const MessageLite& base) {
          const TestTraceSettings& this_ = static_cast<const TestTraceSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestTraceSettings::ByteSizeLong() const {
          const TestTraceSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestTraceSettings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string protocol = 3 [json_name = "protocol"];
            if (!this_._internal_protocol().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_protocol());
            }
            // float period = 1 [json_name = "period"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_period()) != 0) {
              total_size += 5;
            }
            // float count = 2 [json_name = "count"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_count()) != 0) {
              total_size += 5;
            }
            // float port = 4 [json_name = "port"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_port()) != 0) {
              total_size += 5;
            }
            // float expiry = 5 [json_name = "expiry"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_expiry()) != 0) {
              total_size += 5;
            }
            // float limit = 6 [json_name = "limit"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_limit()) != 0) {
              total_size += 5;
            }
            // float delay = 7 [json_name = "delay"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_delay()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestTraceSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestTraceSettings*>(&to_msg);
  auto& from = static_cast<const TestTraceSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_period()) != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_count()) != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_port()) != 0) {
    _this->_impl_.port_ = from._impl_.port_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_expiry()) != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_limit()) != 0) {
    _this->_impl_.limit_ = from._impl_.limit_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_delay()) != 0) {
    _this->_impl_.delay_ = from._impl_.delay_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestTraceSettings::CopyFrom(const TestTraceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestTraceSettings::InternalSwap(TestTraceSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.protocol_, &other->_impl_.protocol_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.delay_)
      + sizeof(TestTraceSettings::_impl_.delay_)
      - PROTOBUF_FIELD_OFFSET(TestTraceSettings, _impl_.period_)>(
          reinterpret_cast<char*>(&_impl_.period_),
          reinterpret_cast<char*>(&other->_impl_.period_));
}

::google::protobuf::Metadata TestTraceSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestPingSettings::_Internal {
 public:
};

TestPingSettings::TestPingSettings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestPingSettings)
}
TestPingSettings::TestPingSettings(
    ::google::protobuf::Arena* arena, const TestPingSettings& from)
    : TestPingSettings(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TestPingSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TestPingSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_),
           0,
           offsetof(Impl_, delay_) -
               offsetof(Impl_, period_) +
               sizeof(Impl_::delay_));
}
TestPingSettings::~TestPingSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestPingSettings)
  SharedDtor(*this);
}
inline void TestPingSettings::SharedDtor(MessageLite& self) {
  TestPingSettings& this_ = static_cast<TestPingSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TestPingSettings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestPingSettings(arena);
}
constexpr auto TestPingSettings::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TestPingSettings),
                                            alignof(TestPingSettings));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestPingSettings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestPingSettings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestPingSettings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestPingSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestPingSettings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestPingSettings>(), &TestPingSettings::ByteSizeLong,
            &TestPingSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_._cached_size_),
        false,
    },
    &TestPingSettings::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestPingSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> TestPingSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestPingSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float delay = 4 [json_name = "delay"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.delay_)}},
    // float period = 1 [json_name = "period"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.period_)}},
    // float count = 2 [json_name = "count"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.count_)}},
    // float expiry = 3 [json_name = "expiry"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.expiry_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float period = 1 [json_name = "period"];
    {PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float count = 2 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float expiry = 3 [json_name = "expiry"];
    {PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.expiry_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float delay = 4 [json_name = "delay"];
    {PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.delay_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TestPingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestPingSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.period_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delay_) -
      reinterpret_cast<char*>(&_impl_.period_)) + sizeof(_impl_.delay_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestPingSettings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestPingSettings& this_ = static_cast<const TestPingSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestPingSettings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestPingSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestPingSettings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float period = 1 [json_name = "period"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_period()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_period(), target);
          }

          // float count = 2 [json_name = "count"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_count()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_count(), target);
          }

          // float expiry = 3 [json_name = "expiry"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_expiry()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_expiry(), target);
          }

          // float delay = 4 [json_name = "delay"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_delay()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_delay(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestPingSettings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestPingSettings::ByteSizeLong(const MessageLite& base) {
          const TestPingSettings& this_ = static_cast<const TestPingSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestPingSettings::ByteSizeLong() const {
          const TestPingSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestPingSettings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // float period = 1 [json_name = "period"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_period()) != 0) {
              total_size += 5;
            }
            // float count = 2 [json_name = "count"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_count()) != 0) {
              total_size += 5;
            }
            // float expiry = 3 [json_name = "expiry"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_expiry()) != 0) {
              total_size += 5;
            }
            // float delay = 4 [json_name = "delay"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_delay()) != 0) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestPingSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestPingSettings*>(&to_msg);
  auto& from = static_cast<const TestPingSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestPingSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (::absl::bit_cast<::uint32_t>(from._internal_period()) != 0) {
    _this->_impl_.period_ = from._impl_.period_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_count()) != 0) {
    _this->_impl_.count_ = from._impl_.count_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_expiry()) != 0) {
    _this->_impl_.expiry_ = from._impl_.expiry_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_delay()) != 0) {
    _this->_impl_.delay_ = from._impl_.delay_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestPingSettings::CopyFrom(const TestPingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestPingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestPingSettings::InternalSwap(TestPingSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.delay_)
      + sizeof(TestPingSettings::_impl_.delay_)
      - PROTOBUF_FIELD_OFFSET(TestPingSettings, _impl_.period_)>(
          reinterpret_cast<char*>(&_impl_.period_),
          reinterpret_cast<char*>(&other->_impl_.period_));
}

::google::protobuf::Metadata TestPingSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TestMonitoringSettings::_Internal {
 public:
};

TestMonitoringSettings::TestMonitoringSettings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestMonitoringSettings)
}
inline PROTOBUF_NDEBUG_INLINE TestMonitoringSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TestMonitoringSettings& from_msg)
      : notification_channels_{visibility, arena, from.notification_channels_},
        activation_grace_period_(arena, from.activation_grace_period_),
        activation_time_unit_(arena, from.activation_time_unit_),
        activation_time_window_(arena, from.activation_time_window_),
        activation_times_(arena, from.activation_times_),
        _cached_size_{0} {}

TestMonitoringSettings::TestMonitoringSettings(
    ::google::protobuf::Arena* arena,
    const TestMonitoringSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TestMonitoringSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestMonitoringSettings)
}
inline PROTOBUF_NDEBUG_INLINE TestMonitoringSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : notification_channels_{visibility, arena},
        activation_grace_period_(arena),
        activation_time_unit_(arena),
        activation_time_window_(arena),
        activation_times_(arena),
        _cached_size_{0} {}

inline void TestMonitoringSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TestMonitoringSettings::~TestMonitoringSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  SharedDtor(*this);
}
inline void TestMonitoringSettings::SharedDtor(MessageLite& self) {
  TestMonitoringSettings& this_ = static_cast<TestMonitoringSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.activation_grace_period_.Destroy();
  this_._impl_.activation_time_unit_.Destroy();
  this_._impl_.activation_time_window_.Destroy();
  this_._impl_.activation_times_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TestMonitoringSettings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TestMonitoringSettings(arena);
}
constexpr auto TestMonitoringSettings::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.notification_channels_) +
          decltype(TestMonitoringSettings::_impl_.notification_channels_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TestMonitoringSettings), alignof(TestMonitoringSettings), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TestMonitoringSettings::PlacementNew_,
                                 sizeof(TestMonitoringSettings),
                                 alignof(TestMonitoringSettings));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TestMonitoringSettings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TestMonitoringSettings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TestMonitoringSettings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TestMonitoringSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TestMonitoringSettings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TestMonitoringSettings>(), &TestMonitoringSettings::ByteSizeLong,
            &TestMonitoringSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_._cached_size_),
        false,
    },
    &TestMonitoringSettings::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TestMonitoringSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 164, 2> TestMonitoringSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestMonitoringSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string activation_grace_period = 1 [json_name = "activationGracePeriod"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.activation_grace_period_)}},
    // string activation_time_unit = 2 [json_name = "activationTimeUnit"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.activation_time_unit_)}},
    // string activation_time_window = 3 [json_name = "activationTimeWindow"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.activation_time_window_)}},
    // string activation_times = 4 [json_name = "activationTimes"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.activation_times_)}},
    // repeated string notification_channels = 5 [json_name = "notificationChannels"];
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.notification_channels_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string activation_grace_period = 1 [json_name = "activationGracePeriod"];
    {PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.activation_grace_period_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string activation_time_unit = 2 [json_name = "activationTimeUnit"];
    {PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.activation_time_unit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string activation_time_window = 3 [json_name = "activationTimeWindow"];
    {PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.activation_time_window_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string activation_times = 4 [json_name = "activationTimes"];
    {PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.activation_times_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated string notification_channels = 5 [json_name = "notificationChannels"];
    {PROTOBUF_FIELD_OFFSET(TestMonitoringSettings, _impl_.notification_channels_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\65\27\24\26\20\25\0\0"
    "kentik.synthetics.v202101beta1.TestMonitoringSettings"
    "activation_grace_period"
    "activation_time_unit"
    "activation_time_window"
    "activation_times"
    "notification_channels"
  }},
};

PROTOBUF_NOINLINE void TestMonitoringSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.notification_channels_.Clear();
  _impl_.activation_grace_period_.ClearToEmpty();
  _impl_.activation_time_unit_.ClearToEmpty();
  _impl_.activation_time_window_.ClearToEmpty();
  _impl_.activation_times_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TestMonitoringSettings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TestMonitoringSettings& this_ = static_cast<const TestMonitoringSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TestMonitoringSettings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TestMonitoringSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string activation_grace_period = 1 [json_name = "activationGracePeriod"];
          if (!this_._internal_activation_grace_period().empty()) {
            const std::string& _s = this_._internal_activation_grace_period();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string activation_time_unit = 2 [json_name = "activationTimeUnit"];
          if (!this_._internal_activation_time_unit().empty()) {
            const std::string& _s = this_._internal_activation_time_unit();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string activation_time_window = 3 [json_name = "activationTimeWindow"];
          if (!this_._internal_activation_time_window().empty()) {
            const std::string& _s = this_._internal_activation_time_window();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string activation_times = 4 [json_name = "activationTimes"];
          if (!this_._internal_activation_times().empty()) {
            const std::string& _s = this_._internal_activation_times();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // repeated string notification_channels = 5 [json_name = "notificationChannels"];
          for (int i = 0, n = this_._internal_notification_channels_size(); i < n; ++i) {
            const auto& s = this_._internal_notification_channels().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels");
            target = stream->WriteString(5, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestMonitoringSettings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TestMonitoringSettings::ByteSizeLong(const MessageLite& base) {
          const TestMonitoringSettings& this_ = static_cast<const TestMonitoringSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TestMonitoringSettings::ByteSizeLong() const {
          const TestMonitoringSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string notification_channels = 5 [json_name = "notificationChannels"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_notification_channels().size());
              for (int i = 0, n = this_._internal_notification_channels().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_notification_channels().Get(i));
              }
            }
          }
           {
            // string activation_grace_period = 1 [json_name = "activationGracePeriod"];
            if (!this_._internal_activation_grace_period().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_activation_grace_period());
            }
            // string activation_time_unit = 2 [json_name = "activationTimeUnit"];
            if (!this_._internal_activation_time_unit().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_activation_time_unit());
            }
            // string activation_time_window = 3 [json_name = "activationTimeWindow"];
            if (!this_._internal_activation_time_window().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_activation_time_window());
            }
            // string activation_times = 4 [json_name = "activationTimes"];
            if (!this_._internal_activation_times().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_activation_times());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TestMonitoringSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TestMonitoringSettings*>(&to_msg);
  auto& from = static_cast<const TestMonitoringSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_notification_channels()->MergeFrom(from._internal_notification_channels());
  if (!from._internal_activation_grace_period().empty()) {
    _this->_internal_set_activation_grace_period(from._internal_activation_grace_period());
  }
  if (!from._internal_activation_time_unit().empty()) {
    _this->_internal_set_activation_time_unit(from._internal_activation_time_unit());
  }
  if (!from._internal_activation_time_window().empty()) {
    _this->_internal_set_activation_time_window(from._internal_activation_time_window());
  }
  if (!from._internal_activation_times().empty()) {
    _this->_internal_set_activation_times(from._internal_activation_times());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TestMonitoringSettings::CopyFrom(const TestMonitoringSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TestMonitoringSettings::InternalSwap(TestMonitoringSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.notification_channels_.InternalSwap(&other->_impl_.notification_channels_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activation_grace_period_, &other->_impl_.activation_grace_period_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activation_time_unit_, &other->_impl_.activation_time_unit_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activation_time_window_, &other->_impl_.activation_time_window_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activation_times_, &other->_impl_.activation_times_, arena);
}

::google::protobuf::Metadata TestMonitoringSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HealthSettings::_Internal {
 public:
};

HealthSettings::HealthSettings(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HealthSettings)
}
inline PROTOBUF_NDEBUG_INLINE HealthSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::HealthSettings& from_msg)
      : http_valid_codes_{visibility, arena, from.http_valid_codes_},
        _http_valid_codes_cached_byte_size_{0},
        dns_valid_codes_{visibility, arena, from.dns_valid_codes_},
        _dns_valid_codes_cached_byte_size_{0},
        _cached_size_{0} {}

HealthSettings::HealthSettings(
    ::google::protobuf::Arena* arena,
    const HealthSettings& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HealthSettings* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latency_critical_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latency_critical_),
           offsetof(Impl_, http_latency_warning_stddev_) -
               offsetof(Impl_, latency_critical_) +
               sizeof(Impl_::http_latency_warning_stddev_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HealthSettings)
}
inline PROTOBUF_NDEBUG_INLINE HealthSettings::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : http_valid_codes_{visibility, arena},
        _http_valid_codes_cached_byte_size_{0},
        dns_valid_codes_{visibility, arena},
        _dns_valid_codes_cached_byte_size_{0},
        _cached_size_{0} {}

inline void HealthSettings::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latency_critical_),
           0,
           offsetof(Impl_, http_latency_warning_stddev_) -
               offsetof(Impl_, latency_critical_) +
               sizeof(Impl_::http_latency_warning_stddev_));
}
HealthSettings::~HealthSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HealthSettings)
  SharedDtor(*this);
}
inline void HealthSettings::SharedDtor(MessageLite& self) {
  HealthSettings& this_ = static_cast<HealthSettings&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* HealthSettings::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HealthSettings(arena);
}
constexpr auto HealthSettings::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_valid_codes_) +
          decltype(HealthSettings::_impl_.http_valid_codes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.dns_valid_codes_) +
          decltype(HealthSettings::_impl_.dns_valid_codes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(HealthSettings), alignof(HealthSettings), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&HealthSettings::PlacementNew_,
                                 sizeof(HealthSettings),
                                 alignof(HealthSettings));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HealthSettings::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HealthSettings_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HealthSettings::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HealthSettings>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HealthSettings::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HealthSettings>(), &HealthSettings::ByteSizeLong,
            &HealthSettings::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_._cached_size_),
        false,
    },
    &HealthSettings::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HealthSettings::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 16, 0, 0, 2> HealthSettings::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294901760,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HealthSettings>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // float http_latency_warning_stddev = 16 [json_name = "httpLatencyWarningStddev"];
    {::_pbi::TcParser::FastF32S2,
     {389, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_warning_stddev_)}},
    // float latency_critical = 1 [json_name = "latencyCritical"];
    {::_pbi::TcParser::FastF32S1,
     {13, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_critical_)}},
    // float latency_warning = 2 [json_name = "latencyWarning"];
    {::_pbi::TcParser::FastF32S1,
     {21, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_warning_)}},
    // float packet_loss_critical = 3 [json_name = "packetLossCritical"];
    {::_pbi::TcParser::FastF32S1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.packet_loss_critical_)}},
    // float packet_loss_warning = 4 [json_name = "packetLossWarning"];
    {::_pbi::TcParser::FastF32S1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.packet_loss_warning_)}},
    // float jitter_critical = 5 [json_name = "jitterCritical"];
    {::_pbi::TcParser::FastF32S1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.jitter_critical_)}},
    // float jitter_warning = 6 [json_name = "jitterWarning"];
    {::_pbi::TcParser::FastF32S1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.jitter_warning_)}},
    // float http_latency_critical = 7 [json_name = "httpLatencyCritical"];
    {::_pbi::TcParser::FastF32S1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_critical_)}},
    // float http_latency_warning = 8 [json_name = "httpLatencyWarning"];
    {::_pbi::TcParser::FastF32S1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_warning_)}},
    // repeated uint32 http_valid_codes = 9 [json_name = "httpValidCodes"];
    {::_pbi::TcParser::FastV32P1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_valid_codes_)}},
    // repeated uint32 dns_valid_codes = 10 [json_name = "dnsValidCodes"];
    {::_pbi::TcParser::FastV32P1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.dns_valid_codes_)}},
    // float latency_critical_stddev = 11 [json_name = "latencyCriticalStddev"];
    {::_pbi::TcParser::FastF32S1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_critical_stddev_)}},
    // float latency_warning_stddev = 12 [json_name = "latencyWarningStddev"];
    {::_pbi::TcParser::FastF32S1,
     {101, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_warning_stddev_)}},
    // float jitter_critical_stddev = 13 [json_name = "jitterCriticalStddev"];
    {::_pbi::TcParser::FastF32S1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.jitter_critical_stddev_)}},
    // float jitter_warning_stddev = 14 [json_name = "jitterWarningStddev"];
    {::_pbi::TcParser::FastF32S1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.jitter_warning_stddev_)}},
    // float http_latency_critical_stddev = 15 [json_name = "httpLatencyCriticalStddev"];
    {::_pbi::TcParser::FastF32S1,
     {125, 63, 0, PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_critical_stddev_)}},
  }}, {{
    65535, 65535
  }}, {{
    // float latency_critical = 1 [json_name = "latencyCritical"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_critical_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float latency_warning = 2 [json_name = "latencyWarning"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_warning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float packet_loss_critical = 3 [json_name = "packetLossCritical"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.packet_loss_critical_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float packet_loss_warning = 4 [json_name = "packetLossWarning"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.packet_loss_warning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float jitter_critical = 5 [json_name = "jitterCritical"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.jitter_critical_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float jitter_warning = 6 [json_name = "jitterWarning"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.jitter_warning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float http_latency_critical = 7 [json_name = "httpLatencyCritical"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_critical_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float http_latency_warning = 8 [json_name = "httpLatencyWarning"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_warning_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // repeated uint32 http_valid_codes = 9 [json_name = "httpValidCodes"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_valid_codes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // repeated uint32 dns_valid_codes = 10 [json_name = "dnsValidCodes"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.dns_valid_codes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // float latency_critical_stddev = 11 [json_name = "latencyCriticalStddev"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_critical_stddev_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float latency_warning_stddev = 12 [json_name = "latencyWarningStddev"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_warning_stddev_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float jitter_critical_stddev = 13 [json_name = "jitterCriticalStddev"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.jitter_critical_stddev_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float jitter_warning_stddev = 14 [json_name = "jitterWarningStddev"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.jitter_warning_stddev_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float http_latency_critical_stddev = 15 [json_name = "httpLatencyCriticalStddev"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_critical_stddev_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
    // float http_latency_warning_stddev = 16 [json_name = "httpLatencyWarningStddev"];
    {PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_warning_stddev_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void HealthSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HealthSettings)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.http_valid_codes_.Clear();
  _impl_.dns_valid_codes_.Clear();
  ::memset(&_impl_.latency_critical_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.http_latency_warning_stddev_) -
      reinterpret_cast<char*>(&_impl_.latency_critical_)) + sizeof(_impl_.http_latency_warning_stddev_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HealthSettings::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HealthSettings& this_ = static_cast<const HealthSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HealthSettings::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HealthSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HealthSettings)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // float latency_critical = 1 [json_name = "latencyCritical"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_latency_critical()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                1, this_._internal_latency_critical(), target);
          }

          // float latency_warning = 2 [json_name = "latencyWarning"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_latency_warning()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_latency_warning(), target);
          }

          // float packet_loss_critical = 3 [json_name = "packetLossCritical"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_packet_loss_critical()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_packet_loss_critical(), target);
          }

          // float packet_loss_warning = 4 [json_name = "packetLossWarning"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_packet_loss_warning()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_packet_loss_warning(), target);
          }

          // float jitter_critical = 5 [json_name = "jitterCritical"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_jitter_critical()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_jitter_critical(), target);
          }

          // float jitter_warning = 6 [json_name = "jitterWarning"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_jitter_warning()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                6, this_._internal_jitter_warning(), target);
          }

          // float http_latency_critical = 7 [json_name = "httpLatencyCritical"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_http_latency_critical()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                7, this_._internal_http_latency_critical(), target);
          }

          // float http_latency_warning = 8 [json_name = "httpLatencyWarning"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_http_latency_warning()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                8, this_._internal_http_latency_warning(), target);
          }

          // repeated uint32 http_valid_codes = 9 [json_name = "httpValidCodes"];
          {
            int byte_size = this_._impl_._http_valid_codes_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  9, this_._internal_http_valid_codes(), byte_size, target);
            }
          }

          // repeated uint32 dns_valid_codes = 10 [json_name = "dnsValidCodes"];
          {
            int byte_size = this_._impl_._dns_valid_codes_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt32Packed(
                  10, this_._internal_dns_valid_codes(), byte_size, target);
            }
          }

          // float latency_critical_stddev = 11 [json_name = "latencyCriticalStddev"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_latency_critical_stddev()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                11, this_._internal_latency_critical_stddev(), target);
          }

          // float latency_warning_stddev = 12 [json_name = "latencyWarningStddev"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_latency_warning_stddev()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                12, this_._internal_latency_warning_stddev(), target);
          }

          // float jitter_critical_stddev = 13 [json_name = "jitterCriticalStddev"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_jitter_critical_stddev()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                13, this_._internal_jitter_critical_stddev(), target);
          }

          // float jitter_warning_stddev = 14 [json_name = "jitterWarningStddev"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_jitter_warning_stddev()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                14, this_._internal_jitter_warning_stddev(), target);
          }

          // float http_latency_critical_stddev = 15 [json_name = "httpLatencyCriticalStddev"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_http_latency_critical_stddev()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                15, this_._internal_http_latency_critical_stddev(), target);
          }

          // float http_latency_warning_stddev = 16 [json_name = "httpLatencyWarningStddev"];
          if (::absl::bit_cast<::uint32_t>(this_._internal_http_latency_warning_stddev()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                16, this_._internal_http_latency_warning_stddev(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HealthSettings)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HealthSettings::ByteSizeLong(const MessageLite& base) {
          const HealthSettings& this_ = static_cast<const HealthSettings&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HealthSettings::ByteSizeLong() const {
          const HealthSettings& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HealthSettings)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint32 http_valid_codes = 9 [json_name = "httpValidCodes"];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_http_valid_codes(), 1,
                      this_._impl_._http_valid_codes_cached_byte_size_);
            }
            // repeated uint32 dns_valid_codes = 10 [json_name = "dnsValidCodes"];
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
                      this_._internal_dns_valid_codes(), 1,
                      this_._impl_._dns_valid_codes_cached_byte_size_);
            }
          }
           {
            // float latency_critical = 1 [json_name = "latencyCritical"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_latency_critical()) != 0) {
              total_size += 5;
            }
            // float latency_warning = 2 [json_name = "latencyWarning"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_latency_warning()) != 0) {
              total_size += 5;
            }
            // float packet_loss_critical = 3 [json_name = "packetLossCritical"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_packet_loss_critical()) != 0) {
              total_size += 5;
            }
            // float packet_loss_warning = 4 [json_name = "packetLossWarning"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_packet_loss_warning()) != 0) {
              total_size += 5;
            }
            // float jitter_critical = 5 [json_name = "jitterCritical"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_jitter_critical()) != 0) {
              total_size += 5;
            }
            // float jitter_warning = 6 [json_name = "jitterWarning"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_jitter_warning()) != 0) {
              total_size += 5;
            }
            // float http_latency_critical = 7 [json_name = "httpLatencyCritical"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_http_latency_critical()) != 0) {
              total_size += 5;
            }
            // float http_latency_warning = 8 [json_name = "httpLatencyWarning"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_http_latency_warning()) != 0) {
              total_size += 5;
            }
            // float latency_critical_stddev = 11 [json_name = "latencyCriticalStddev"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_latency_critical_stddev()) != 0) {
              total_size += 5;
            }
            // float latency_warning_stddev = 12 [json_name = "latencyWarningStddev"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_latency_warning_stddev()) != 0) {
              total_size += 5;
            }
            // float jitter_critical_stddev = 13 [json_name = "jitterCriticalStddev"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_jitter_critical_stddev()) != 0) {
              total_size += 5;
            }
            // float jitter_warning_stddev = 14 [json_name = "jitterWarningStddev"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_jitter_warning_stddev()) != 0) {
              total_size += 5;
            }
            // float http_latency_critical_stddev = 15 [json_name = "httpLatencyCriticalStddev"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_http_latency_critical_stddev()) != 0) {
              total_size += 5;
            }
            // float http_latency_warning_stddev = 16 [json_name = "httpLatencyWarningStddev"];
            if (::absl::bit_cast<::uint32_t>(this_._internal_http_latency_warning_stddev()) != 0) {
              total_size += 6;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HealthSettings::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HealthSettings*>(&to_msg);
  auto& from = static_cast<const HealthSettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HealthSettings)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_http_valid_codes()->MergeFrom(from._internal_http_valid_codes());
  _this->_internal_mutable_dns_valid_codes()->MergeFrom(from._internal_dns_valid_codes());
  if (::absl::bit_cast<::uint32_t>(from._internal_latency_critical()) != 0) {
    _this->_impl_.latency_critical_ = from._impl_.latency_critical_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_latency_warning()) != 0) {
    _this->_impl_.latency_warning_ = from._impl_.latency_warning_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_packet_loss_critical()) != 0) {
    _this->_impl_.packet_loss_critical_ = from._impl_.packet_loss_critical_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_packet_loss_warning()) != 0) {
    _this->_impl_.packet_loss_warning_ = from._impl_.packet_loss_warning_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_jitter_critical()) != 0) {
    _this->_impl_.jitter_critical_ = from._impl_.jitter_critical_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_jitter_warning()) != 0) {
    _this->_impl_.jitter_warning_ = from._impl_.jitter_warning_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_http_latency_critical()) != 0) {
    _this->_impl_.http_latency_critical_ = from._impl_.http_latency_critical_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_http_latency_warning()) != 0) {
    _this->_impl_.http_latency_warning_ = from._impl_.http_latency_warning_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_latency_critical_stddev()) != 0) {
    _this->_impl_.latency_critical_stddev_ = from._impl_.latency_critical_stddev_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_latency_warning_stddev()) != 0) {
    _this->_impl_.latency_warning_stddev_ = from._impl_.latency_warning_stddev_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_jitter_critical_stddev()) != 0) {
    _this->_impl_.jitter_critical_stddev_ = from._impl_.jitter_critical_stddev_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_jitter_warning_stddev()) != 0) {
    _this->_impl_.jitter_warning_stddev_ = from._impl_.jitter_warning_stddev_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_http_latency_critical_stddev()) != 0) {
    _this->_impl_.http_latency_critical_stddev_ = from._impl_.http_latency_critical_stddev_;
  }
  if (::absl::bit_cast<::uint32_t>(from._internal_http_latency_warning_stddev()) != 0) {
    _this->_impl_.http_latency_warning_stddev_ = from._impl_.http_latency_warning_stddev_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HealthSettings::CopyFrom(const HealthSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HealthSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HealthSettings::InternalSwap(HealthSettings* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.http_valid_codes_.InternalSwap(&other->_impl_.http_valid_codes_);
  _impl_.dns_valid_codes_.InternalSwap(&other->_impl_.dns_valid_codes_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.http_latency_warning_stddev_)
      + sizeof(HealthSettings::_impl_.http_latency_warning_stddev_)
      - PROTOBUF_FIELD_OFFSET(HealthSettings, _impl_.latency_critical_)>(
          reinterpret_cast<char*>(&_impl_.latency_critical_),
          reinterpret_cast<char*>(&other->_impl_.latency_critical_));
}

::google::protobuf::Metadata HealthSettings::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class HostnameTest::_Internal {
 public:
};

HostnameTest::HostnameTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HostnameTest)
}
inline PROTOBUF_NDEBUG_INLINE HostnameTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::HostnameTest& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

HostnameTest::HostnameTest(
    ::google::protobuf::Arena* arena,
    const HostnameTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  HostnameTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HostnameTest)
}
inline PROTOBUF_NDEBUG_INLINE HostnameTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void HostnameTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
HostnameTest::~HostnameTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HostnameTest)
  SharedDtor(*this);
}
inline void HostnameTest::SharedDtor(MessageLite& self) {
  HostnameTest& this_ = static_cast<HostnameTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* HostnameTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) HostnameTest(arena);
}
constexpr auto HostnameTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(HostnameTest),
                                            alignof(HostnameTest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull HostnameTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_HostnameTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &HostnameTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<HostnameTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &HostnameTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<HostnameTest>(), &HostnameTest::ByteSizeLong,
            &HostnameTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(HostnameTest, _impl_._cached_size_),
        false,
    },
    &HostnameTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* HostnameTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 58, 2> HostnameTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::HostnameTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(HostnameTest, _impl_.target_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(HostnameTest, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.HostnameTest"
    "target"
  }},
};

PROTOBUF_NOINLINE void HostnameTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HostnameTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* HostnameTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const HostnameTest& this_ = static_cast<const HostnameTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* HostnameTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const HostnameTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HostnameTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.HostnameTest.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HostnameTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t HostnameTest::ByteSizeLong(const MessageLite& base) {
          const HostnameTest& this_ = static_cast<const HostnameTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t HostnameTest::ByteSizeLong() const {
          const HostnameTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HostnameTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void HostnameTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<HostnameTest*>(&to_msg);
  auto& from = static_cast<const HostnameTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HostnameTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void HostnameTest::CopyFrom(const HostnameTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HostnameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void HostnameTest::InternalSwap(HostnameTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
}

::google::protobuf::Metadata HostnameTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IpTest::_Internal {
 public:
};

IpTest::IpTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.IpTest)
}
inline PROTOBUF_NDEBUG_INLINE IpTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::IpTest& from_msg)
      : targets_{visibility, arena, from.targets_},
        _cached_size_{0} {}

IpTest::IpTest(
    ::google::protobuf::Arena* arena,
    const IpTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IpTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.IpTest)
}
inline PROTOBUF_NDEBUG_INLINE IpTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : targets_{visibility, arena},
        _cached_size_{0} {}

inline void IpTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
IpTest::~IpTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.IpTest)
  SharedDtor(*this);
}
inline void IpTest::SharedDtor(MessageLite& self) {
  IpTest& this_ = static_cast<IpTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* IpTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IpTest(arena);
}
constexpr auto IpTest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IpTest, _impl_.targets_) +
          decltype(IpTest::_impl_.targets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(IpTest), alignof(IpTest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IpTest::PlacementNew_,
                                 sizeof(IpTest),
                                 alignof(IpTest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IpTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IpTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IpTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<IpTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IpTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<IpTest>(), &IpTest::ByteSizeLong,
            &IpTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IpTest, _impl_._cached_size_),
        false,
    },
    &IpTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IpTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 53, 2> IpTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::IpTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string targets = 1 [json_name = "targets"];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IpTest, _impl_.targets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string targets = 1 [json_name = "targets"];
    {PROTOBUF_FIELD_OFFSET(IpTest, _impl_.targets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\45\7\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.IpTest"
    "targets"
  }},
};

PROTOBUF_NOINLINE void IpTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.IpTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IpTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IpTest& this_ = static_cast<const IpTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IpTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IpTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.IpTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string targets = 1 [json_name = "targets"];
          for (int i = 0, n = this_._internal_targets_size(); i < n; ++i) {
            const auto& s = this_._internal_targets().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.IpTest.targets");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.IpTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IpTest::ByteSizeLong(const MessageLite& base) {
          const IpTest& this_ = static_cast<const IpTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IpTest::ByteSizeLong() const {
          const IpTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.IpTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string targets = 1 [json_name = "targets"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_targets().size());
              for (int i = 0, n = this_._internal_targets().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_targets().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IpTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IpTest*>(&to_msg);
  auto& from = static_cast<const IpTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.IpTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_targets()->MergeFrom(from._internal_targets());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IpTest::CopyFrom(const IpTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.IpTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IpTest::InternalSwap(IpTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
}

::google::protobuf::Metadata IpTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AgentTest::_Internal {
 public:
};

AgentTest::AgentTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.AgentTest)
}
inline PROTOBUF_NDEBUG_INLINE AgentTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::AgentTest& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

AgentTest::AgentTest(
    ::google::protobuf::Arena* arena,
    const AgentTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AgentTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.AgentTest)
}
inline PROTOBUF_NDEBUG_INLINE AgentTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void AgentTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AgentTest::~AgentTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.AgentTest)
  SharedDtor(*this);
}
inline void AgentTest::SharedDtor(MessageLite& self) {
  AgentTest& this_ = static_cast<AgentTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AgentTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AgentTest(arena);
}
constexpr auto AgentTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AgentTest),
                                            alignof(AgentTest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AgentTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AgentTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AgentTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AgentTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AgentTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AgentTest>(), &AgentTest::ByteSizeLong,
            &AgentTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AgentTest, _impl_._cached_size_),
        false,
    },
    &AgentTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AgentTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 55, 2> AgentTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::AgentTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AgentTest, _impl_.target_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(AgentTest, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\50\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.AgentTest"
    "target"
  }},
};

PROTOBUF_NOINLINE void AgentTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.AgentTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AgentTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AgentTest& this_ = static_cast<const AgentTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AgentTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AgentTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.AgentTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.AgentTest.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.AgentTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AgentTest::ByteSizeLong(const MessageLite& base) {
          const AgentTest& this_ = static_cast<const AgentTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AgentTest::ByteSizeLong() const {
          const AgentTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.AgentTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AgentTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AgentTest*>(&to_msg);
  auto& from = static_cast<const AgentTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.AgentTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AgentTest::CopyFrom(const AgentTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.AgentTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AgentTest::InternalSwap(AgentTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
}

::google::protobuf::Metadata AgentTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FlowTest::_Internal {
 public:
};

FlowTest::FlowTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.FlowTest)
}
inline PROTOBUF_NDEBUG_INLINE FlowTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::FlowTest& from_msg)
      : target_(arena, from.target_),
        type_(arena, from.type_),
        inet_direction_(arena, from.inet_direction_),
        direction_(arena, from.direction_),
        _cached_size_{0} {}

FlowTest::FlowTest(
    ::google::protobuf::Arena* arena,
    const FlowTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FlowTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_refresh_interval_millis_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, target_refresh_interval_millis_),
           offsetof(Impl_, max_tasks_) -
               offsetof(Impl_, target_refresh_interval_millis_) +
               sizeof(Impl_::max_tasks_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.FlowTest)
}
inline PROTOBUF_NDEBUG_INLINE FlowTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        type_(arena),
        inet_direction_(arena),
        direction_(arena),
        _cached_size_{0} {}

inline void FlowTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, target_refresh_interval_millis_),
           0,
           offsetof(Impl_, max_tasks_) -
               offsetof(Impl_, target_refresh_interval_millis_) +
               sizeof(Impl_::max_tasks_));
}
FlowTest::~FlowTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.FlowTest)
  SharedDtor(*this);
}
inline void FlowTest::SharedDtor(MessageLite& self) {
  FlowTest& this_ = static_cast<FlowTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.type_.Destroy();
  this_._impl_.inet_direction_.Destroy();
  this_._impl_.direction_.Destroy();
  this_._impl_.~Impl_();
}

inline void* FlowTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FlowTest(arena);
}
constexpr auto FlowTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FlowTest),
                                            alignof(FlowTest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FlowTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FlowTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FlowTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FlowTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FlowTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FlowTest>(), &FlowTest::ByteSizeLong,
            &FlowTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FlowTest, _impl_._cached_size_),
        false,
    },
    &FlowTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FlowTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 81, 2> FlowTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::FlowTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.target_)}},
    // uint32 target_refresh_interval_millis = 2 [json_name = "targetRefreshIntervalMillis"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlowTest, _impl_.target_refresh_interval_millis_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.target_refresh_interval_millis_)}},
    // uint32 max_tasks = 3 [json_name = "maxTasks"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FlowTest, _impl_.max_tasks_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.max_tasks_)}},
    // string type = 4 [json_name = "type"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.type_)}},
    // string inet_direction = 5 [json_name = "inetDirection"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.inet_direction_)}},
    // string direction = 6 [json_name = "direction"];
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.direction_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 target_refresh_interval_millis = 2 [json_name = "targetRefreshIntervalMillis"];
    {PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.target_refresh_interval_millis_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint32 max_tasks = 3 [json_name = "maxTasks"];
    {PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.max_tasks_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string type = 4 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string inet_direction = 5 [json_name = "inetDirection"];
    {PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.inet_direction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string direction = 6 [json_name = "direction"];
    {PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.direction_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\6\0\0\4\16\11\0"
    "kentik.synthetics.v202101beta1.FlowTest"
    "target"
    "type"
    "inet_direction"
    "direction"
  }},
};

PROTOBUF_NOINLINE void FlowTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.FlowTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.inet_direction_.ClearToEmpty();
  _impl_.direction_.ClearToEmpty();
  ::memset(&_impl_.target_refresh_interval_millis_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_tasks_) -
      reinterpret_cast<char*>(&_impl_.target_refresh_interval_millis_)) + sizeof(_impl_.max_tasks_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FlowTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FlowTest& this_ = static_cast<const FlowTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FlowTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FlowTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.FlowTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.FlowTest.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // uint32 target_refresh_interval_millis = 2 [json_name = "targetRefreshIntervalMillis"];
          if (this_._internal_target_refresh_interval_millis() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_target_refresh_interval_millis(), target);
          }

          // uint32 max_tasks = 3 [json_name = "maxTasks"];
          if (this_._internal_max_tasks() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_max_tasks(), target);
          }

          // string type = 4 [json_name = "type"];
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.FlowTest.type");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string inet_direction = 5 [json_name = "inetDirection"];
          if (!this_._internal_inet_direction().empty()) {
            const std::string& _s = this_._internal_inet_direction();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.FlowTest.inet_direction");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string direction = 6 [json_name = "direction"];
          if (!this_._internal_direction().empty()) {
            const std::string& _s = this_._internal_direction();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.FlowTest.direction");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.FlowTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FlowTest::ByteSizeLong(const MessageLite& base) {
          const FlowTest& this_ = static_cast<const FlowTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FlowTest::ByteSizeLong() const {
          const FlowTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.FlowTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // string type = 4 [json_name = "type"];
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
            // string inet_direction = 5 [json_name = "inetDirection"];
            if (!this_._internal_inet_direction().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_inet_direction());
            }
            // string direction = 6 [json_name = "direction"];
            if (!this_._internal_direction().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_direction());
            }
            // uint32 target_refresh_interval_millis = 2 [json_name = "targetRefreshIntervalMillis"];
            if (this_._internal_target_refresh_interval_millis() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_target_refresh_interval_millis());
            }
            // uint32 max_tasks = 3 [json_name = "maxTasks"];
            if (this_._internal_max_tasks() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_max_tasks());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FlowTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FlowTest*>(&to_msg);
  auto& from = static_cast<const FlowTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.FlowTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_inet_direction().empty()) {
    _this->_internal_set_inet_direction(from._internal_inet_direction());
  }
  if (!from._internal_direction().empty()) {
    _this->_internal_set_direction(from._internal_direction());
  }
  if (from._internal_target_refresh_interval_millis() != 0) {
    _this->_impl_.target_refresh_interval_millis_ = from._impl_.target_refresh_interval_millis_;
  }
  if (from._internal_max_tasks() != 0) {
    _this->_impl_.max_tasks_ = from._impl_.max_tasks_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FlowTest::CopyFrom(const FlowTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.FlowTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FlowTest::InternalSwap(FlowTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inet_direction_, &other->_impl_.inet_direction_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.direction_, &other->_impl_.direction_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.max_tasks_)
      + sizeof(FlowTest::_impl_.max_tasks_)
      - PROTOBUF_FIELD_OFFSET(FlowTest, _impl_.target_refresh_interval_millis_)>(
          reinterpret_cast<char*>(&_impl_.target_refresh_interval_millis_),
          reinterpret_cast<char*>(&other->_impl_.target_refresh_interval_millis_));
}

::google::protobuf::Metadata FlowTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SiteTest::_Internal {
 public:
};

SiteTest::SiteTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.SiteTest)
}
inline PROTOBUF_NDEBUG_INLINE SiteTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::SiteTest& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

SiteTest::SiteTest(
    ::google::protobuf::Arena* arena,
    const SiteTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SiteTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.SiteTest)
}
inline PROTOBUF_NDEBUG_INLINE SiteTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void SiteTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SiteTest::~SiteTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.SiteTest)
  SharedDtor(*this);
}
inline void SiteTest::SharedDtor(MessageLite& self) {
  SiteTest& this_ = static_cast<SiteTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SiteTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SiteTest(arena);
}
constexpr auto SiteTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SiteTest),
                                            alignof(SiteTest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SiteTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SiteTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SiteTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SiteTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SiteTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SiteTest>(), &SiteTest::ByteSizeLong,
            &SiteTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SiteTest, _impl_._cached_size_),
        false,
    },
    &SiteTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SiteTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 54, 2> SiteTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::SiteTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SiteTest, _impl_.target_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(SiteTest, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\47\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.SiteTest"
    "target"
  }},
};

PROTOBUF_NOINLINE void SiteTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.SiteTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SiteTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SiteTest& this_ = static_cast<const SiteTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SiteTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SiteTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.SiteTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.SiteTest.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.SiteTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SiteTest::ByteSizeLong(const MessageLite& base) {
          const SiteTest& this_ = static_cast<const SiteTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SiteTest::ByteSizeLong() const {
          const SiteTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.SiteTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SiteTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SiteTest*>(&to_msg);
  auto& from = static_cast<const SiteTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.SiteTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SiteTest::CopyFrom(const SiteTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.SiteTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SiteTest::InternalSwap(SiteTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
}

::google::protobuf::Metadata SiteTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TagTest::_Internal {
 public:
};

TagTest::TagTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TagTest)
}
inline PROTOBUF_NDEBUG_INLINE TagTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TagTest& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

TagTest::TagTest(
    ::google::protobuf::Arena* arena,
    const TagTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TagTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TagTest)
}
inline PROTOBUF_NDEBUG_INLINE TagTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void TagTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TagTest::~TagTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TagTest)
  SharedDtor(*this);
}
inline void TagTest::SharedDtor(MessageLite& self) {
  TagTest& this_ = static_cast<TagTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TagTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TagTest(arena);
}
constexpr auto TagTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TagTest),
                                            alignof(TagTest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TagTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TagTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TagTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TagTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TagTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TagTest>(), &TagTest::ByteSizeLong,
            &TagTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TagTest, _impl_._cached_size_),
        false,
    },
    &TagTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TagTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 53, 2> TagTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TagTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TagTest, _impl_.target_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(TagTest, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.TagTest"
    "target"
  }},
};

PROTOBUF_NOINLINE void TagTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TagTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TagTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TagTest& this_ = static_cast<const TagTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TagTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TagTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TagTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TagTest.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TagTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TagTest::ByteSizeLong(const MessageLite& base) {
          const TagTest& this_ = static_cast<const TagTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TagTest::ByteSizeLong() const {
          const TagTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TagTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TagTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TagTest*>(&to_msg);
  auto& from = static_cast<const TagTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TagTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TagTest::CopyFrom(const TagTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TagTest::InternalSwap(TagTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
}

::google::protobuf::Metadata TagTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DnsTest::_Internal {
 public:
};

DnsTest::DnsTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DnsTest)
}
inline PROTOBUF_NDEBUG_INLINE DnsTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::DnsTest& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

DnsTest::DnsTest(
    ::google::protobuf::Arena* arena,
    const DnsTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DnsTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DnsTest)
}
inline PROTOBUF_NDEBUG_INLINE DnsTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void DnsTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
DnsTest::~DnsTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DnsTest)
  SharedDtor(*this);
}
inline void DnsTest::SharedDtor(MessageLite& self) {
  DnsTest& this_ = static_cast<DnsTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DnsTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DnsTest(arena);
}
constexpr auto DnsTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DnsTest),
                                            alignof(DnsTest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DnsTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DnsTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DnsTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DnsTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DnsTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DnsTest>(), &DnsTest::ByteSizeLong,
            &DnsTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DnsTest, _impl_._cached_size_),
        false,
    },
    &DnsTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DnsTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 53, 2> DnsTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DnsTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.DNSRecord type = 2 [json_name = "type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DnsTest, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DnsTest, _impl_.type_)}},
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DnsTest, _impl_.target_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(DnsTest, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.DNSRecord type = 2 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(DnsTest, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\46\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.DnsTest"
    "target"
  }},
};

PROTOBUF_NOINLINE void DnsTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DnsTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DnsTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DnsTest& this_ = static_cast<const DnsTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DnsTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DnsTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DnsTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.DnsTest.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .kentik.synthetics.v202101beta1.DNSRecord type = 2 [json_name = "type"];
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DnsTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DnsTest::ByteSizeLong(const MessageLite& base) {
          const DnsTest& this_ = static_cast<const DnsTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DnsTest::ByteSizeLong() const {
          const DnsTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DnsTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
            // .kentik.synthetics.v202101beta1.DNSRecord type = 2 [json_name = "type"];
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DnsTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DnsTest*>(&to_msg);
  auto& from = static_cast<const DnsTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DnsTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DnsTest::CopyFrom(const DnsTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DnsTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DnsTest::InternalSwap(DnsTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata DnsTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class UrlTest::_Internal {
 public:
};

UrlTest::UrlTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.UrlTest)
}
inline PROTOBUF_NDEBUG_INLINE UrlTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::UrlTest& from_msg)
      : target_(arena, from.target_),
        _cached_size_{0} {}

UrlTest::UrlTest(
    ::google::protobuf::Arena* arena,
    const UrlTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  UrlTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.UrlTest)
}
inline PROTOBUF_NDEBUG_INLINE UrlTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : target_(arena),
        _cached_size_{0} {}

inline void UrlTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UrlTest::~UrlTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.UrlTest)
  SharedDtor(*this);
}
inline void UrlTest::SharedDtor(MessageLite& self) {
  UrlTest& this_ = static_cast<UrlTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.target_.Destroy();
  this_._impl_.~Impl_();
}

inline void* UrlTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) UrlTest(arena);
}
constexpr auto UrlTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(UrlTest),
                                            alignof(UrlTest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull UrlTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_UrlTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &UrlTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<UrlTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &UrlTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<UrlTest>(), &UrlTest::ByteSizeLong,
            &UrlTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(UrlTest, _impl_._cached_size_),
        false,
    },
    &UrlTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* UrlTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 53, 2> UrlTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::UrlTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string target = 1 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UrlTest, _impl_.target_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string target = 1 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(UrlTest, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\6\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.UrlTest"
    "target"
  }},
};

PROTOBUF_NOINLINE void UrlTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.UrlTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* UrlTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const UrlTest& this_ = static_cast<const UrlTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* UrlTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const UrlTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.UrlTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string target = 1 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.UrlTest.target");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.UrlTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t UrlTest::ByteSizeLong(const MessageLite& base) {
          const UrlTest& this_ = static_cast<const UrlTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t UrlTest::ByteSizeLong() const {
          const UrlTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.UrlTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string target = 1 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void UrlTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<UrlTest*>(&to_msg);
  auto& from = static_cast<const UrlTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.UrlTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UrlTest::CopyFrom(const UrlTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.UrlTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void UrlTest::InternalSwap(UrlTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
}

::google::protobuf::Metadata UrlTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GridTest::_Internal {
 public:
};

GridTest::GridTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GridTest)
}
inline PROTOBUF_NDEBUG_INLINE GridTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GridTest& from_msg)
      : targets_{visibility, arena, from.targets_},
        _cached_size_{0} {}

GridTest::GridTest(
    ::google::protobuf::Arena* arena,
    const GridTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GridTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GridTest)
}
inline PROTOBUF_NDEBUG_INLINE GridTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : targets_{visibility, arena},
        _cached_size_{0} {}

inline void GridTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GridTest::~GridTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GridTest)
  SharedDtor(*this);
}
inline void GridTest::SharedDtor(MessageLite& self) {
  GridTest& this_ = static_cast<GridTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GridTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GridTest(arena);
}
constexpr auto GridTest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GridTest, _impl_.targets_) +
          decltype(GridTest::_impl_.targets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GridTest), alignof(GridTest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GridTest::PlacementNew_,
                                 sizeof(GridTest),
                                 alignof(GridTest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GridTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GridTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GridTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GridTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GridTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GridTest>(), &GridTest::ByteSizeLong,
            &GridTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GridTest, _impl_._cached_size_),
        false,
    },
    &GridTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GridTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 55, 2> GridTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GridTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string targets = 1 [json_name = "targets"];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GridTest, _impl_.targets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string targets = 1 [json_name = "targets"];
    {PROTOBUF_FIELD_OFFSET(GridTest, _impl_.targets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\47\7\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.GridTest"
    "targets"
  }},
};

PROTOBUF_NOINLINE void GridTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GridTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GridTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GridTest& this_ = static_cast<const GridTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GridTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GridTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GridTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string targets = 1 [json_name = "targets"];
          for (int i = 0, n = this_._internal_targets_size(); i < n; ++i) {
            const auto& s = this_._internal_targets().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GridTest.targets");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GridTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GridTest::ByteSizeLong(const MessageLite& base) {
          const GridTest& this_ = static_cast<const GridTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GridTest::ByteSizeLong() const {
          const GridTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GridTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string targets = 1 [json_name = "targets"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_targets().size());
              for (int i = 0, n = this_._internal_targets().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_targets().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GridTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GridTest*>(&to_msg);
  auto& from = static_cast<const GridTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GridTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_targets()->MergeFrom(from._internal_targets());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GridTest::CopyFrom(const GridTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GridTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GridTest::InternalSwap(GridTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
}

::google::protobuf::Metadata GridTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DnsGridTest::_Internal {
 public:
};

DnsGridTest::DnsGridTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DnsGridTest)
}
inline PROTOBUF_NDEBUG_INLINE DnsGridTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::DnsGridTest& from_msg)
      : targets_{visibility, arena, from.targets_},
        _cached_size_{0} {}

DnsGridTest::DnsGridTest(
    ::google::protobuf::Arena* arena,
    const DnsGridTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DnsGridTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DnsGridTest)
}
inline PROTOBUF_NDEBUG_INLINE DnsGridTest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : targets_{visibility, arena},
        _cached_size_{0} {}

inline void DnsGridTest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
DnsGridTest::~DnsGridTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DnsGridTest)
  SharedDtor(*this);
}
inline void DnsGridTest::SharedDtor(MessageLite& self) {
  DnsGridTest& this_ = static_cast<DnsGridTest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* DnsGridTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DnsGridTest(arena);
}
constexpr auto DnsGridTest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DnsGridTest, _impl_.targets_) +
          decltype(DnsGridTest::_impl_.targets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(DnsGridTest), alignof(DnsGridTest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DnsGridTest::PlacementNew_,
                                 sizeof(DnsGridTest),
                                 alignof(DnsGridTest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DnsGridTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DnsGridTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DnsGridTest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DnsGridTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DnsGridTest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DnsGridTest>(), &DnsGridTest::ByteSizeLong,
            &DnsGridTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DnsGridTest, _impl_._cached_size_),
        false,
    },
    &DnsGridTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DnsGridTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 58, 2> DnsGridTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DnsGridTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.DNSRecord type = 2 [json_name = "type"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DnsGridTest, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(DnsGridTest, _impl_.type_)}},
    // repeated string targets = 1 [json_name = "targets"];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DnsGridTest, _impl_.targets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string targets = 1 [json_name = "targets"];
    {PROTOBUF_FIELD_OFFSET(DnsGridTest, _impl_.targets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .kentik.synthetics.v202101beta1.DNSRecord type = 2 [json_name = "type"];
    {PROTOBUF_FIELD_OFFSET(DnsGridTest, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\52\7\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.DnsGridTest"
    "targets"
  }},
};

PROTOBUF_NOINLINE void DnsGridTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DnsGridTest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DnsGridTest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DnsGridTest& this_ = static_cast<const DnsGridTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DnsGridTest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DnsGridTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DnsGridTest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string targets = 1 [json_name = "targets"];
          for (int i = 0, n = this_._internal_targets_size(); i < n; ++i) {
            const auto& s = this_._internal_targets().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.DnsGridTest.targets");
            target = stream->WriteString(1, s, target);
          }

          // .kentik.synthetics.v202101beta1.DNSRecord type = 2 [json_name = "type"];
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DnsGridTest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DnsGridTest::ByteSizeLong(const MessageLite& base) {
          const DnsGridTest& this_ = static_cast<const DnsGridTest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DnsGridTest::ByteSizeLong() const {
          const DnsGridTest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DnsGridTest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string targets = 1 [json_name = "targets"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_targets().size());
              for (int i = 0, n = this_._internal_targets().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_targets().Get(i));
              }
            }
          }
           {
            // .kentik.synthetics.v202101beta1.DNSRecord type = 2 [json_name = "type"];
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DnsGridTest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DnsGridTest*>(&to_msg);
  auto& from = static_cast<const DnsGridTest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DnsGridTest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_targets()->MergeFrom(from._internal_targets());
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DnsGridTest::CopyFrom(const DnsGridTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DnsGridTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DnsGridTest::InternalSwap(DnsGridTest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata DnsGridTest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ApplicationMeshTest::_Internal {
 public:
};

ApplicationMeshTest::ApplicationMeshTest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ApplicationMeshTest)
}
ApplicationMeshTest::ApplicationMeshTest(
    ::google::protobuf::Arena* arena,
    const ApplicationMeshTest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ApplicationMeshTest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ApplicationMeshTest)
}

inline void* ApplicationMeshTest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ApplicationMeshTest(arena);
}
constexpr auto ApplicationMeshTest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ApplicationMeshTest),
                                            alignof(ApplicationMeshTest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ApplicationMeshTest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ApplicationMeshTest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ApplicationMeshTest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<ApplicationMeshTest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ApplicationMeshTest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<ApplicationMeshTest>(), &ApplicationMeshTest::ByteSizeLong,
            &ApplicationMeshTest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ApplicationMeshTest, _impl_._cached_size_),
        false,
    },
    &ApplicationMeshTest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ApplicationMeshTest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> ApplicationMeshTest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ApplicationMeshTest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata ApplicationMeshTest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MeshResponse::_Internal {
 public:
};

MeshResponse::MeshResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.MeshResponse)
}
inline PROTOBUF_NDEBUG_INLINE MeshResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::MeshResponse& from_msg)
      : columns_{visibility, arena, from.columns_},
        id_(arena, from.id_),
        name_(arena, from.name_),
        local_ip_(arena, from.local_ip_),
        ip_(arena, from.ip_),
        alias_(arena, from.alias_),
        _cached_size_{0} {}

MeshResponse::MeshResponse(
    ::google::protobuf::Arena* arena,
    const MeshResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MeshResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.MeshResponse)
}
inline PROTOBUF_NDEBUG_INLINE MeshResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : columns_{visibility, arena},
        id_(arena),
        name_(arena),
        local_ip_(arena),
        ip_(arena),
        alias_(arena),
        _cached_size_{0} {}

inline void MeshResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MeshResponse::~MeshResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.MeshResponse)
  SharedDtor(*this);
}
inline void MeshResponse::SharedDtor(MessageLite& self) {
  MeshResponse& this_ = static_cast<MeshResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.local_ip_.Destroy();
  this_._impl_.ip_.Destroy();
  this_._impl_.alias_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MeshResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MeshResponse(arena);
}
constexpr auto MeshResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.columns_) +
          decltype(MeshResponse::_impl_.columns_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MeshResponse), alignof(MeshResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MeshResponse::PlacementNew_,
                                 sizeof(MeshResponse),
                                 alignof(MeshResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MeshResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MeshResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MeshResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MeshResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MeshResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MeshResponse>(), &MeshResponse::ByteSizeLong,
            &MeshResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_._cached_size_),
        false,
    },
    &MeshResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MeshResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 73, 2> MeshResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.name_)}},
    // string local_ip = 3 [json_name = "localIp"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.local_ip_)}},
    // string ip = 4 [json_name = "ip"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.ip_)}},
    // string alias = 5 [json_name = "alias"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.alias_)}},
    // repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6 [json_name = "columns"];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.columns_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string local_ip = 3 [json_name = "localIp"];
    {PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.local_ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ip = 4 [json_name = "ip"];
    {PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string alias = 5 [json_name = "alias"];
    {PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.alias_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6 [json_name = "columns"];
    {PROTOBUF_FIELD_OFFSET(MeshResponse, _impl_.columns_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshColumn>()},
  }}, {{
    "\53\2\4\10\2\5\0\0"
    "kentik.synthetics.v202101beta1.MeshResponse"
    "id"
    "name"
    "local_ip"
    "ip"
    "alias"
  }},
};

PROTOBUF_NOINLINE void MeshResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.MeshResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.columns_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.local_ip_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MeshResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MeshResponse& this_ = static_cast<const MeshResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MeshResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MeshResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.MeshResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshResponse.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshResponse.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string local_ip = 3 [json_name = "localIp"];
          if (!this_._internal_local_ip().empty()) {
            const std::string& _s = this_._internal_local_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshResponse.local_ip");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string ip = 4 [json_name = "ip"];
          if (!this_._internal_ip().empty()) {
            const std::string& _s = this_._internal_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshResponse.ip");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string alias = 5 [json_name = "alias"];
          if (!this_._internal_alias().empty()) {
            const std::string& _s = this_._internal_alias();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshResponse.alias");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6 [json_name = "columns"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_columns_size());
               i < n; i++) {
            const auto& repfield = this_._internal_columns().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.MeshResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MeshResponse::ByteSizeLong(const MessageLite& base) {
          const MeshResponse& this_ = static_cast<const MeshResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MeshResponse::ByteSizeLong() const {
          const MeshResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.MeshResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6 [json_name = "columns"];
            {
              total_size += 1UL * this_._internal_columns_size();
              for (const auto& msg : this_._internal_columns()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string local_ip = 3 [json_name = "localIp"];
            if (!this_._internal_local_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_local_ip());
            }
            // string ip = 4 [json_name = "ip"];
            if (!this_._internal_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ip());
            }
            // string alias = 5 [json_name = "alias"];
            if (!this_._internal_alias().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_alias());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MeshResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MeshResponse*>(&to_msg);
  auto& from = static_cast<const MeshResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.MeshResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_columns()->MergeFrom(
      from._internal_columns());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_local_ip().empty()) {
    _this->_internal_set_local_ip(from._internal_local_ip());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MeshResponse::CopyFrom(const MeshResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.MeshResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MeshResponse::InternalSwap(MeshResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.columns_.InternalSwap(&other->_impl_.columns_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.local_ip_, &other->_impl_.local_ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alias_, &other->_impl_.alias_, arena);
}

::google::protobuf::Metadata MeshResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MeshColumn::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MeshColumn>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_._has_bits_);
};

MeshColumn::MeshColumn(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.MeshColumn)
}
inline PROTOBUF_NDEBUG_INLINE MeshColumn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::MeshColumn& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        health_{visibility, arena, from.health_},
        id_(arena, from.id_),
        name_(arena, from.name_),
        alias_(arena, from.alias_),
        target_(arena, from.target_) {}

MeshColumn::MeshColumn(
    ::google::protobuf::Arena* arena,
    const MeshColumn& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MeshColumn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.metrics_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::MeshMetrics>(
                              arena, *from._impl_.metrics_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.MeshColumn)
}
inline PROTOBUF_NDEBUG_INLINE MeshColumn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        health_{visibility, arena},
        id_(arena),
        name_(arena),
        alias_(arena),
        target_(arena) {}

inline void MeshColumn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.metrics_ = {};
}
MeshColumn::~MeshColumn() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.MeshColumn)
  SharedDtor(*this);
}
inline void MeshColumn::SharedDtor(MessageLite& self) {
  MeshColumn& this_ = static_cast<MeshColumn&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.alias_.Destroy();
  this_._impl_.target_.Destroy();
  delete this_._impl_.metrics_;
  this_._impl_.~Impl_();
}

inline void* MeshColumn::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MeshColumn(arena);
}
constexpr auto MeshColumn::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.health_) +
          decltype(MeshColumn::_impl_.health_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MeshColumn), alignof(MeshColumn), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MeshColumn::PlacementNew_,
                                 sizeof(MeshColumn),
                                 alignof(MeshColumn));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MeshColumn::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MeshColumn_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MeshColumn::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MeshColumn>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MeshColumn::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MeshColumn>(), &MeshColumn::ByteSizeLong,
            &MeshColumn::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_._cached_size_),
        false,
    },
    &MeshColumn::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MeshColumn::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 67, 2> MeshColumn::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshColumn>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.name_)}},
    // string alias = 3 [json_name = "alias"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.alias_)}},
    // string target = 4 [json_name = "target"];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.target_)}},
    // .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5 [json_name = "metrics"];
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.metrics_)}},
    // repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6 [json_name = "health"];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.health_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string alias = 3 [json_name = "alias"];
    {PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.alias_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target = 4 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.target_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5 [json_name = "metrics"];
    {PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.metrics_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6 [json_name = "health"];
    {PROTOBUF_FIELD_OFFSET(MeshColumn, _impl_.health_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshMetrics>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshMetrics>()},
  }}, {{
    "\51\2\4\5\6\0\0\0"
    "kentik.synthetics.v202101beta1.MeshColumn"
    "id"
    "name"
    "alias"
    "target"
  }},
};

PROTOBUF_NOINLINE void MeshColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.MeshColumn)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.health_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.alias_.ClearToEmpty();
  _impl_.target_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.metrics_ != nullptr);
    _impl_.metrics_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MeshColumn::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MeshColumn& this_ = static_cast<const MeshColumn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MeshColumn::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MeshColumn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.MeshColumn)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshColumn.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshColumn.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string alias = 3 [json_name = "alias"];
          if (!this_._internal_alias().empty()) {
            const std::string& _s = this_._internal_alias();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshColumn.alias");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string target = 4 [json_name = "target"];
          if (!this_._internal_target().empty()) {
            const std::string& _s = this_._internal_target();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshColumn.target");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5 [json_name = "metrics"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.metrics_, this_._impl_.metrics_->GetCachedSize(), target,
                stream);
          }

          // repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6 [json_name = "health"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_health_size());
               i < n; i++) {
            const auto& repfield = this_._internal_health().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.MeshColumn)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MeshColumn::ByteSizeLong(const MessageLite& base) {
          const MeshColumn& this_ = static_cast<const MeshColumn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MeshColumn::ByteSizeLong() const {
          const MeshColumn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.MeshColumn)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6 [json_name = "health"];
            {
              total_size += 1UL * this_._internal_health_size();
              for (const auto& msg : this_._internal_health()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string alias = 3 [json_name = "alias"];
            if (!this_._internal_alias().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_alias());
            }
            // string target = 4 [json_name = "target"];
            if (!this_._internal_target().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target());
            }
          }
           {
            // .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5 [json_name = "metrics"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.metrics_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MeshColumn::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MeshColumn*>(&to_msg);
  auto& from = static_cast<const MeshColumn&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.MeshColumn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_health()->MergeFrom(
      from._internal_health());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_alias().empty()) {
    _this->_internal_set_alias(from._internal_alias());
  }
  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.metrics_ != nullptr);
    if (_this->_impl_.metrics_ == nullptr) {
      _this->_impl_.metrics_ =
          ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::MeshMetrics>(arena, *from._impl_.metrics_);
    } else {
      _this->_impl_.metrics_->MergeFrom(*from._impl_.metrics_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MeshColumn::CopyFrom(const MeshColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.MeshColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MeshColumn::InternalSwap(MeshColumn* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.health_.InternalSwap(&other->_impl_.health_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alias_, &other->_impl_.alias_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_, &other->_impl_.target_, arena);
  swap(_impl_.metrics_, other->_impl_.metrics_);
}

::google::protobuf::Metadata MeshColumn::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MeshMetric::_Internal {
 public:
};

MeshMetric::MeshMetric(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.MeshMetric)
}
inline PROTOBUF_NDEBUG_INLINE MeshMetric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::MeshMetric& from_msg)
      : name_(arena, from.name_),
        health_(arena, from.health_),
        _cached_size_{0} {}

MeshMetric::MeshMetric(
    ::google::protobuf::Arena* arena,
    const MeshMetric& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MeshMetric* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.value_ = from._impl_.value_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.MeshMetric)
}
inline PROTOBUF_NDEBUG_INLINE MeshMetric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        health_(arena),
        _cached_size_{0} {}

inline void MeshMetric::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.value_ = {};
}
MeshMetric::~MeshMetric() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.MeshMetric)
  SharedDtor(*this);
}
inline void MeshMetric::SharedDtor(MessageLite& self) {
  MeshMetric& this_ = static_cast<MeshMetric&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.health_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MeshMetric::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MeshMetric(arena);
}
constexpr auto MeshMetric::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MeshMetric),
                                            alignof(MeshMetric));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MeshMetric::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MeshMetric_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MeshMetric::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MeshMetric>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MeshMetric::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MeshMetric>(), &MeshMetric::ByteSizeLong,
            &MeshMetric::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MeshMetric, _impl_._cached_size_),
        false,
    },
    &MeshMetric::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MeshMetric::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 60, 2> MeshMetric::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshMetric>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 1 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MeshMetric, _impl_.name_)}},
    // string health = 2 [json_name = "health"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MeshMetric, _impl_.health_)}},
    // int64 value = 3 [json_name = "value"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MeshMetric, _impl_.value_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MeshMetric, _impl_.value_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(MeshMetric, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string health = 2 [json_name = "health"];
    {PROTOBUF_FIELD_OFFSET(MeshMetric, _impl_.health_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 value = 3 [json_name = "value"];
    {PROTOBUF_FIELD_OFFSET(MeshMetric, _impl_.value_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
    "\51\4\6\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.MeshMetric"
    "name"
    "health"
  }},
};

PROTOBUF_NOINLINE void MeshMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.MeshMetric)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.health_.ClearToEmpty();
  _impl_.value_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MeshMetric::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MeshMetric& this_ = static_cast<const MeshMetric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MeshMetric::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MeshMetric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.MeshMetric)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshMetric.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string health = 2 [json_name = "health"];
          if (!this_._internal_health().empty()) {
            const std::string& _s = this_._internal_health();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.MeshMetric.health");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int64 value = 3 [json_name = "value"];
          if (this_._internal_value() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_value(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.MeshMetric)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MeshMetric::ByteSizeLong(const MessageLite& base) {
          const MeshMetric& this_ = static_cast<const MeshMetric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MeshMetric::ByteSizeLong() const {
          const MeshMetric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.MeshMetric)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string health = 2 [json_name = "health"];
            if (!this_._internal_health().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_health());
            }
            // int64 value = 3 [json_name = "value"];
            if (this_._internal_value() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_value());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MeshMetric::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MeshMetric*>(&to_msg);
  auto& from = static_cast<const MeshMetric&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.MeshMetric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_health().empty()) {
    _this->_internal_set_health(from._internal_health());
  }
  if (from._internal_value() != 0) {
    _this->_impl_.value_ = from._impl_.value_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MeshMetric::CopyFrom(const MeshMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.MeshMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MeshMetric::InternalSwap(MeshMetric* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.health_, &other->_impl_.health_, arena);
        swap(_impl_.value_, other->_impl_.value_);
}

::google::protobuf::Metadata MeshMetric::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MeshMetrics::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MeshMetrics>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_._has_bits_);
};

void MeshMetrics::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MeshMetrics::MeshMetrics(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.MeshMetrics)
}
inline PROTOBUF_NDEBUG_INLINE MeshMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::MeshMetrics& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MeshMetrics::MeshMetrics(
    ::google::protobuf::Arena* arena,
    const MeshMetrics& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MeshMetrics* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.latency_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::MeshMetric>(
                              arena, *from._impl_.latency_)
                        : nullptr;
  _impl_.packet_loss_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::MeshMetric>(
                              arena, *from._impl_.packet_loss_)
                        : nullptr;
  _impl_.jitter_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::MeshMetric>(
                              arena, *from._impl_.jitter_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.MeshMetrics)
}
inline PROTOBUF_NDEBUG_INLINE MeshMetrics::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MeshMetrics::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, jitter_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::jitter_));
}
MeshMetrics::~MeshMetrics() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.MeshMetrics)
  SharedDtor(*this);
}
inline void MeshMetrics::SharedDtor(MessageLite& self) {
  MeshMetrics& this_ = static_cast<MeshMetrics&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.time_;
  delete this_._impl_.latency_;
  delete this_._impl_.packet_loss_;
  delete this_._impl_.jitter_;
  this_._impl_.~Impl_();
}

inline void* MeshMetrics::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MeshMetrics(arena);
}
constexpr auto MeshMetrics::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MeshMetrics),
                                            alignof(MeshMetrics));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MeshMetrics::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MeshMetrics_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MeshMetrics::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MeshMetrics>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MeshMetrics::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MeshMetrics>(), &MeshMetrics::ByteSizeLong,
            &MeshMetrics::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_._cached_size_),
        false,
    },
    &MeshMetrics::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MeshMetrics::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> MeshMetrics::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshMetrics>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.MeshMetric jitter = 4 [json_name = "jitter"];
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.jitter_)}},
    // .google.protobuf.Timestamp time = 1 [json_name = "time"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.time_)}},
    // .kentik.synthetics.v202101beta1.MeshMetric latency = 2 [json_name = "latency"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.latency_)}},
    // .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3 [json_name = "packetLoss"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.packet_loss_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp time = 1 [json_name = "time"];
    {PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.MeshMetric latency = 2 [json_name = "latency"];
    {PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.latency_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3 [json_name = "packetLoss"];
    {PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.packet_loss_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.MeshMetric jitter = 4 [json_name = "jitter"];
    {PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.jitter_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshMetric>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshMetric>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::MeshMetric>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MeshMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.MeshMetrics)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.latency_ != nullptr);
      _impl_.latency_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.packet_loss_ != nullptr);
      _impl_.packet_loss_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.jitter_ != nullptr);
      _impl_.jitter_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MeshMetrics::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MeshMetrics& this_ = static_cast<const MeshMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MeshMetrics::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MeshMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.MeshMetrics)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 1 [json_name = "time"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.MeshMetric latency = 2 [json_name = "latency"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.latency_, this_._impl_.latency_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3 [json_name = "packetLoss"];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.packet_loss_, this_._impl_.packet_loss_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.MeshMetric jitter = 4 [json_name = "jitter"];
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.jitter_, this_._impl_.jitter_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.MeshMetrics)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MeshMetrics::ByteSizeLong(const MessageLite& base) {
          const MeshMetrics& this_ = static_cast<const MeshMetrics&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MeshMetrics::ByteSizeLong() const {
          const MeshMetrics& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.MeshMetrics)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // .google.protobuf.Timestamp time = 1 [json_name = "time"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // .kentik.synthetics.v202101beta1.MeshMetric latency = 2 [json_name = "latency"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.latency_);
            }
            // .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3 [json_name = "packetLoss"];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.packet_loss_);
            }
            // .kentik.synthetics.v202101beta1.MeshMetric jitter = 4 [json_name = "jitter"];
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.jitter_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MeshMetrics::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MeshMetrics*>(&to_msg);
  auto& from = static_cast<const MeshMetrics&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.MeshMetrics)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.latency_ != nullptr);
      if (_this->_impl_.latency_ == nullptr) {
        _this->_impl_.latency_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::MeshMetric>(arena, *from._impl_.latency_);
      } else {
        _this->_impl_.latency_->MergeFrom(*from._impl_.latency_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.packet_loss_ != nullptr);
      if (_this->_impl_.packet_loss_ == nullptr) {
        _this->_impl_.packet_loss_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::MeshMetric>(arena, *from._impl_.packet_loss_);
      } else {
        _this->_impl_.packet_loss_->MergeFrom(*from._impl_.packet_loss_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.jitter_ != nullptr);
      if (_this->_impl_.jitter_ == nullptr) {
        _this->_impl_.jitter_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::MeshMetric>(arena, *from._impl_.jitter_);
      } else {
        _this->_impl_.jitter_->MergeFrom(*from._impl_.jitter_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MeshMetrics::CopyFrom(const MeshMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.MeshMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MeshMetrics::InternalSwap(MeshMetrics* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.jitter_)
      + sizeof(MeshMetrics::_impl_.jitter_)
      - PROTOBUF_FIELD_OFFSET(MeshMetrics, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata MeshMetrics::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ASN::_Internal {
 public:
};

ASN::ASN(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ASN)
}
inline PROTOBUF_NDEBUG_INLINE ASN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::ASN& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

ASN::ASN(
    ::google::protobuf::Arena* arena,
    const ASN& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ASN* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ASN)
}
inline PROTOBUF_NDEBUG_INLINE ASN::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void ASN::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
ASN::~ASN() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ASN)
  SharedDtor(*this);
}
inline void ASN::SharedDtor(MessageLite& self) {
  ASN& this_ = static_cast<ASN&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* ASN::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ASN(arena);
}
constexpr auto ASN::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(ASN),
                                            alignof(ASN));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ASN::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ASN_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ASN::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ASN>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ASN::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ASN>(), &ASN::ByteSizeLong,
            &ASN::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ASN, _impl_._cached_size_),
        false,
    },
    &ASN::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ASN::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 2> ASN::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ASN>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ASN, _impl_.name_)}},
    // uint32 id = 1 [json_name = "id"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ASN, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ASN, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(ASN, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(ASN, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\0\4\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.ASN"
    "name"
  }},
};

PROTOBUF_NOINLINE void ASN::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ASN)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ASN::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ASN& this_ = static_cast<const ASN&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ASN::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ASN& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ASN)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 id = 1 [json_name = "id"];
          if (this_._internal_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_id(), target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.ASN.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ASN)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ASN::ByteSizeLong(const MessageLite& base) {
          const ASN& this_ = static_cast<const ASN&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ASN::ByteSizeLong() const {
          const ASN& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ASN)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // uint32 id = 1 [json_name = "id"];
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ASN::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ASN*>(&to_msg);
  auto& from = static_cast<const ASN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ASN)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ASN::CopyFrom(const ASN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ASN::InternalSwap(ASN* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata ASN::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Country::_Internal {
 public:
};

Country::Country(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Country)
}
inline PROTOBUF_NDEBUG_INLINE Country::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::Country& from_msg)
      : code_(arena, from.code_),
        name_(arena, from.name_),
        _cached_size_{0} {}

Country::Country(
    ::google::protobuf::Arena* arena,
    const Country& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Country* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Country)
}
inline PROTOBUF_NDEBUG_INLINE Country::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : code_(arena),
        name_(arena),
        _cached_size_{0} {}

inline void Country::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Country::~Country() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Country)
  SharedDtor(*this);
}
inline void Country::SharedDtor(MessageLite& self) {
  Country& this_ = static_cast<Country&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.code_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Country::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Country(arena);
}
constexpr auto Country::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Country),
                                            alignof(Country));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Country::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Country_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Country::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Country>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Country::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Country>(), &Country::ByteSizeLong,
            &Country::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Country, _impl_._cached_size_),
        false,
    },
    &Country::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Country::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 55, 2> Country::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Country>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Country, _impl_.name_)}},
    // string code = 1 [json_name = "code"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Country, _impl_.code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string code = 1 [json_name = "code"];
    {PROTOBUF_FIELD_OFFSET(Country, _impl_.code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(Country, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\4\4\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.Country"
    "code"
    "name"
  }},
};

PROTOBUF_NOINLINE void Country::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Country)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Country::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Country& this_ = static_cast<const Country&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Country::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Country& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Country)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string code = 1 [json_name = "code"];
          if (!this_._internal_code().empty()) {
            const std::string& _s = this_._internal_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Country.code");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Country.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Country)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Country::ByteSizeLong(const MessageLite& base) {
          const Country& this_ = static_cast<const Country&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Country::ByteSizeLong() const {
          const Country& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Country)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string code = 1 [json_name = "code"];
            if (!this_._internal_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_code());
            }
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Country::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Country*>(&to_msg);
  auto& from = static_cast<const Country&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Country)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Country::CopyFrom(const Country& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Country)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Country::InternalSwap(Country* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_, &other->_impl_.code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata Country::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Region::_Internal {
 public:
};

Region::Region(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Region)
}
inline PROTOBUF_NDEBUG_INLINE Region::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::Region& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

Region::Region(
    ::google::protobuf::Arena* arena,
    const Region& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Region* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_ = from._impl_.id_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Region)
}
inline PROTOBUF_NDEBUG_INLINE Region::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void Region::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_ = {};
}
Region::~Region() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Region)
  SharedDtor(*this);
}
inline void Region::SharedDtor(MessageLite& self) {
  Region& this_ = static_cast<Region&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Region::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Region(arena);
}
constexpr auto Region::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Region),
                                            alignof(Region));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Region::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Region_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Region::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Region>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Region::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Region>(), &Region::ByteSizeLong,
            &Region::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Region, _impl_._cached_size_),
        false,
    },
    &Region::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Region::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 50, 2> Region::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Region>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Region, _impl_.name_)}},
    // int64 id = 1 [json_name = "id"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Region, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Region, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int64 id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(Region, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(Region, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\0\4\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.Region"
    "name"
  }},
};

PROTOBUF_NOINLINE void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Region)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.id_ = ::int64_t{0};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Region::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Region& this_ = static_cast<const Region&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Region::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Region& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Region)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int64 id = 1 [json_name = "id"];
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Region.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Region)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Region::ByteSizeLong(const MessageLite& base) {
          const Region& this_ = static_cast<const Region&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Region::ByteSizeLong() const {
          const Region& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Region)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // int64 id = 1 [json_name = "id"];
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Region::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Region*>(&to_msg);
  auto& from = static_cast<const Region&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Region)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Region::InternalSwap(Region* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.id_, other->_impl_.id_);
}

::google::protobuf::Metadata Region::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class City::_Internal {
 public:
};

City::City(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.City)
}
inline PROTOBUF_NDEBUG_INLINE City::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::City& from_msg)
      : id_(arena, from.id_),
        name_(arena, from.name_),
        _cached_size_{0} {}

City::City(
    ::google::protobuf::Arena* arena,
    const City& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  City* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, latitude_),
           offsetof(Impl_, longitude_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::longitude_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.City)
}
inline PROTOBUF_NDEBUG_INLINE City::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        name_(arena),
        _cached_size_{0} {}

inline void City::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, latitude_),
           0,
           offsetof(Impl_, longitude_) -
               offsetof(Impl_, latitude_) +
               sizeof(Impl_::longitude_));
}
City::~City() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.City)
  SharedDtor(*this);
}
inline void City::SharedDtor(MessageLite& self) {
  City& this_ = static_cast<City&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* City::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) City(arena);
}
constexpr auto City::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(City),
                                            alignof(City));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull City::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_City_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &City::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<City>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &City::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<City>(), &City::ByteSizeLong,
            &City::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(City, _impl_._cached_size_),
        false,
    },
    &City::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* City::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 50, 2> City::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966908,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::City>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double latitude = 8 [json_name = "latitude"];
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(City, _impl_.latitude_)}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(City, _impl_.id_)}},
    // string name = 2 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(City, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(City, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(City, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double latitude = 8 [json_name = "latitude"];
    {PROTOBUF_FIELD_OFFSET(City, _impl_.latitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double longitude = 9 [json_name = "longitude"];
    {PROTOBUF_FIELD_OFFSET(City, _impl_.longitude_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\43\2\4\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.City"
    "id"
    "name"
  }},
};

PROTOBUF_NOINLINE void City::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.City)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.latitude_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.longitude_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.longitude_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* City::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const City& this_ = static_cast<const City&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* City::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const City& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.City)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.City.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.City.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // double latitude = 8 [json_name = "latitude"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_latitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_latitude(), target);
          }

          // double longitude = 9 [json_name = "longitude"];
          if (::absl::bit_cast<::uint64_t>(this_._internal_longitude()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_longitude(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.City)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t City::ByteSizeLong(const MessageLite& base) {
          const City& this_ = static_cast<const City&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t City::ByteSizeLong() const {
          const City& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.City)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string name = 2 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // double latitude = 8 [json_name = "latitude"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_latitude()) != 0) {
              total_size += 9;
            }
            // double longitude = 9 [json_name = "longitude"];
            if (::absl::bit_cast<::uint64_t>(this_._internal_longitude()) != 0) {
              total_size += 9;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void City::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<City*>(&to_msg);
  auto& from = static_cast<const City&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.City)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_latitude()) != 0) {
    _this->_impl_.latitude_ = from._impl_.latitude_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_longitude()) != 0) {
    _this->_impl_.longitude_ = from._impl_.longitude_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void City::CopyFrom(const City& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void City::InternalSwap(City* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(City, _impl_.longitude_)
      + sizeof(City::_impl_.longitude_)
      - PROTOBUF_FIELD_OFFSET(City, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::google::protobuf::Metadata City::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Geo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Geo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Geo, _impl_._has_bits_);
};

Geo::Geo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Geo)
}
inline PROTOBUF_NDEBUG_INLINE Geo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::Geo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

Geo::Geo(
    ::google::protobuf::Arena* arena,
    const Geo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Geo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.country_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Country>(
                              arena, *from._impl_.country_)
                        : nullptr;
  _impl_.region_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Region>(
                              arena, *from._impl_.region_)
                        : nullptr;
  _impl_.city_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::City>(
                              arena, *from._impl_.city_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Geo)
}
inline PROTOBUF_NDEBUG_INLINE Geo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Geo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, country_),
           0,
           offsetof(Impl_, city_) -
               offsetof(Impl_, country_) +
               sizeof(Impl_::city_));
}
Geo::~Geo() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Geo)
  SharedDtor(*this);
}
inline void Geo::SharedDtor(MessageLite& self) {
  Geo& this_ = static_cast<Geo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.country_;
  delete this_._impl_.region_;
  delete this_._impl_.city_;
  this_._impl_.~Impl_();
}

inline void* Geo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Geo(arena);
}
constexpr auto Geo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Geo),
                                            alignof(Geo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Geo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Geo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Geo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Geo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Geo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Geo>(), &Geo::ByteSizeLong,
            &Geo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Geo, _impl_._cached_size_),
        false,
    },
    &Geo::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Geo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> Geo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Geo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Geo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kentik.synthetics.v202101beta1.Country country = 1 [json_name = "country"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Geo, _impl_.country_)}},
    // .kentik.synthetics.v202101beta1.Region region = 2 [json_name = "region"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Geo, _impl_.region_)}},
    // .kentik.synthetics.v202101beta1.City city = 3 [json_name = "city"];
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Geo, _impl_.city_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Country country = 1 [json_name = "country"];
    {PROTOBUF_FIELD_OFFSET(Geo, _impl_.country_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.Region region = 2 [json_name = "region"];
    {PROTOBUF_FIELD_OFFSET(Geo, _impl_.region_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.City city = 3 [json_name = "city"];
    {PROTOBUF_FIELD_OFFSET(Geo, _impl_.city_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Country>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Region>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::City>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Geo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.country_ != nullptr);
      _impl_.country_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.region_ != nullptr);
      _impl_.region_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.city_ != nullptr);
      _impl_.city_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Geo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Geo& this_ = static_cast<const Geo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Geo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Geo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Geo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Country country = 1 [json_name = "country"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.country_, this_._impl_.country_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.Region region = 2 [json_name = "region"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.region_, this_._impl_.region_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.City city = 3 [json_name = "city"];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.city_, this_._impl_.city_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Geo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Geo::ByteSizeLong(const MessageLite& base) {
          const Geo& this_ = static_cast<const Geo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Geo::ByteSizeLong() const {
          const Geo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Geo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kentik.synthetics.v202101beta1.Country country = 1 [json_name = "country"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.country_);
            }
            // .kentik.synthetics.v202101beta1.Region region = 2 [json_name = "region"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.region_);
            }
            // .kentik.synthetics.v202101beta1.City city = 3 [json_name = "city"];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.city_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Geo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Geo*>(&to_msg);
  auto& from = static_cast<const Geo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Geo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.country_ != nullptr);
      if (_this->_impl_.country_ == nullptr) {
        _this->_impl_.country_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Country>(arena, *from._impl_.country_);
      } else {
        _this->_impl_.country_->MergeFrom(*from._impl_.country_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.region_ != nullptr);
      if (_this->_impl_.region_ == nullptr) {
        _this->_impl_.region_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Region>(arena, *from._impl_.region_);
      } else {
        _this->_impl_.region_->MergeFrom(*from._impl_.region_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.city_ != nullptr);
      if (_this->_impl_.city_ == nullptr) {
        _this->_impl_.city_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::City>(arena, *from._impl_.city_);
      } else {
        _this->_impl_.city_->MergeFrom(*from._impl_.city_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Geo::CopyFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Geo::InternalSwap(Geo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geo, _impl_.city_)
      + sizeof(Geo::_impl_.city_)
      - PROTOBUF_FIELD_OFFSET(Geo, _impl_.country_)>(
          reinterpret_cast<char*>(&_impl_.country_),
          reinterpret_cast<char*>(&other->_impl_.country_));
}

::google::protobuf::Metadata Geo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DNS::_Internal {
 public:
};

DNS::DNS(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DNS)
}
inline PROTOBUF_NDEBUG_INLINE DNS::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::DNS& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

DNS::DNS(
    ::google::protobuf::Arena* arena,
    const DNS& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DNS* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DNS)
}
inline PROTOBUF_NDEBUG_INLINE DNS::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void DNS::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DNS::~DNS() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DNS)
  SharedDtor(*this);
}
inline void DNS::SharedDtor(MessageLite& self) {
  DNS& this_ = static_cast<DNS&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DNS::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DNS(arena);
}
constexpr auto DNS::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DNS),
                                            alignof(DNS));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DNS::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DNS_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DNS::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DNS>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DNS::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DNS>(), &DNS::ByteSizeLong,
            &DNS::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DNS, _impl_._cached_size_),
        false,
    },
    &DNS::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DNS::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 47, 2> DNS::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DNS>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name = 1 [json_name = "name"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DNS, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1 [json_name = "name"];
    {PROTOBUF_FIELD_OFFSET(DNS, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\42\4\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.DNS"
    "name"
  }},
};

PROTOBUF_NOINLINE void DNS::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DNS)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DNS::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DNS& this_ = static_cast<const DNS&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DNS::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DNS& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DNS)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1 [json_name = "name"];
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.DNS.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DNS)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DNS::ByteSizeLong(const MessageLite& base) {
          const DNS& this_ = static_cast<const DNS&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DNS::ByteSizeLong() const {
          const DNS& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DNS)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string name = 1 [json_name = "name"];
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DNS::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DNS*>(&to_msg);
  auto& from = static_cast<const DNS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DNS)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DNS::CopyFrom(const DNS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DNS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DNS::InternalSwap(DNS* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata DNS::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IPInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<IPInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(IPInfo, _impl_._has_bits_);
};

IPInfo::IPInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.IPInfo)
}
inline PROTOBUF_NDEBUG_INLINE IPInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::IPInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ip_(arena, from.ip_),
        device_id_(arena, from.device_id_),
        site_id_(arena, from.site_id_),
        egress_(arena, from.egress_) {}

IPInfo::IPInfo(
    ::google::protobuf::Arena* arena,
    const IPInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IPInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.asn_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::ASN>(
                              arena, *from._impl_.asn_)
                        : nullptr;
  _impl_.geo_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Geo>(
                              arena, *from._impl_.geo_)
                        : nullptr;
  _impl_.dns_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::DNS>(
                              arena, *from._impl_.dns_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.IPInfo)
}
inline PROTOBUF_NDEBUG_INLINE IPInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        ip_(arena),
        device_id_(arena),
        site_id_(arena),
        egress_(arena) {}

inline void IPInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, asn_),
           0,
           offsetof(Impl_, dns_) -
               offsetof(Impl_, asn_) +
               sizeof(Impl_::dns_));
}
IPInfo::~IPInfo() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.IPInfo)
  SharedDtor(*this);
}
inline void IPInfo::SharedDtor(MessageLite& self) {
  IPInfo& this_ = static_cast<IPInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ip_.Destroy();
  this_._impl_.device_id_.Destroy();
  this_._impl_.site_id_.Destroy();
  this_._impl_.egress_.Destroy();
  delete this_._impl_.asn_;
  delete this_._impl_.geo_;
  delete this_._impl_.dns_;
  this_._impl_.~Impl_();
}

inline void* IPInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IPInfo(arena);
}
constexpr auto IPInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(IPInfo),
                                            alignof(IPInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IPInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IPInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IPInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<IPInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IPInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<IPInfo>(), &IPInfo::ByteSizeLong,
            &IPInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IPInfo, _impl_._cached_size_),
        false,
    },
    &IPInfo::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IPInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 3, 70, 2> IPInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IPInfo, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::IPInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string ip = 1 [json_name = "ip"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.ip_)}},
    // .kentik.synthetics.v202101beta1.ASN asn = 2 [json_name = "asn"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.asn_)}},
    // .kentik.synthetics.v202101beta1.Geo geo = 3 [json_name = "geo"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.geo_)}},
    // .kentik.synthetics.v202101beta1.DNS dns = 4 [json_name = "dns"];
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.dns_)}},
    // string device_id = 5 [json_name = "deviceId"];
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.device_id_)}},
    // string site_id = 6 [json_name = "siteId"];
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.site_id_)}},
    // string egress = 7 [json_name = "egress"];
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.egress_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string ip = 1 [json_name = "ip"];
    {PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.ip_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.ASN asn = 2 [json_name = "asn"];
    {PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.asn_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.Geo geo = 3 [json_name = "geo"];
    {PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.geo_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.DNS dns = 4 [json_name = "dns"];
    {PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.dns_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string device_id = 5 [json_name = "deviceId"];
    {PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.device_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string site_id = 6 [json_name = "siteId"];
    {PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.site_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string egress = 7 [json_name = "egress"];
    {PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.egress_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ASN>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Geo>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DNS>()},
  }}, {{
    "\45\2\0\0\0\11\7\6"
    "kentik.synthetics.v202101beta1.IPInfo"
    "ip"
    "device_id"
    "site_id"
    "egress"
  }},
};

PROTOBUF_NOINLINE void IPInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.IPInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  _impl_.device_id_.ClearToEmpty();
  _impl_.site_id_.ClearToEmpty();
  _impl_.egress_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.asn_ != nullptr);
      _impl_.asn_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.geo_ != nullptr);
      _impl_.geo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dns_ != nullptr);
      _impl_.dns_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IPInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IPInfo& this_ = static_cast<const IPInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IPInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IPInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.IPInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string ip = 1 [json_name = "ip"];
          if (!this_._internal_ip().empty()) {
            const std::string& _s = this_._internal_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.IPInfo.ip");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.ASN asn = 2 [json_name = "asn"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.asn_, this_._impl_.asn_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.Geo geo = 3 [json_name = "geo"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.geo_, this_._impl_.geo_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.DNS dns = 4 [json_name = "dns"];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.dns_, this_._impl_.dns_->GetCachedSize(), target,
                stream);
          }

          // string device_id = 5 [json_name = "deviceId"];
          if (!this_._internal_device_id().empty()) {
            const std::string& _s = this_._internal_device_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.IPInfo.device_id");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string site_id = 6 [json_name = "siteId"];
          if (!this_._internal_site_id().empty()) {
            const std::string& _s = this_._internal_site_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.IPInfo.site_id");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string egress = 7 [json_name = "egress"];
          if (!this_._internal_egress().empty()) {
            const std::string& _s = this_._internal_egress();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.IPInfo.egress");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.IPInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IPInfo::ByteSizeLong(const MessageLite& base) {
          const IPInfo& this_ = static_cast<const IPInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IPInfo::ByteSizeLong() const {
          const IPInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.IPInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string ip = 1 [json_name = "ip"];
            if (!this_._internal_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ip());
            }
            // string device_id = 5 [json_name = "deviceId"];
            if (!this_._internal_device_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_device_id());
            }
            // string site_id = 6 [json_name = "siteId"];
            if (!this_._internal_site_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_site_id());
            }
            // string egress = 7 [json_name = "egress"];
            if (!this_._internal_egress().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_egress());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .kentik.synthetics.v202101beta1.ASN asn = 2 [json_name = "asn"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.asn_);
            }
            // .kentik.synthetics.v202101beta1.Geo geo = 3 [json_name = "geo"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.geo_);
            }
            // .kentik.synthetics.v202101beta1.DNS dns = 4 [json_name = "dns"];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dns_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IPInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IPInfo*>(&to_msg);
  auto& from = static_cast<const IPInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.IPInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (!from._internal_device_id().empty()) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (!from._internal_site_id().empty()) {
    _this->_internal_set_site_id(from._internal_site_id());
  }
  if (!from._internal_egress().empty()) {
    _this->_internal_set_egress(from._internal_egress());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.asn_ != nullptr);
      if (_this->_impl_.asn_ == nullptr) {
        _this->_impl_.asn_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::ASN>(arena, *from._impl_.asn_);
      } else {
        _this->_impl_.asn_->MergeFrom(*from._impl_.asn_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.geo_ != nullptr);
      if (_this->_impl_.geo_ == nullptr) {
        _this->_impl_.geo_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Geo>(arena, *from._impl_.geo_);
      } else {
        _this->_impl_.geo_->MergeFrom(*from._impl_.geo_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.dns_ != nullptr);
      if (_this->_impl_.dns_ == nullptr) {
        _this->_impl_.dns_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::DNS>(arena, *from._impl_.dns_);
      } else {
        _this->_impl_.dns_->MergeFrom(*from._impl_.dns_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IPInfo::CopyFrom(const IPInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.IPInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IPInfo::InternalSwap(IPInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, &other->_impl_.device_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.site_id_, &other->_impl_.site_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.egress_, &other->_impl_.egress_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.dns_)
      + sizeof(IPInfo::_impl_.dns_)
      - PROTOBUF_FIELD_OFFSET(IPInfo, _impl_.asn_)>(
          reinterpret_cast<char*>(&_impl_.asn_),
          reinterpret_cast<char*>(&other->_impl_.asn_));
}

::google::protobuf::Metadata IPInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IDByIP::_Internal {
 public:
};

IDByIP::IDByIP(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.IDByIP)
}
inline PROTOBUF_NDEBUG_INLINE IDByIP::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::IDByIP& from_msg)
      : id_(arena, from.id_),
        ip_(arena, from.ip_),
        _cached_size_{0} {}

IDByIP::IDByIP(
    ::google::protobuf::Arena* arena,
    const IDByIP& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IDByIP* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.IDByIP)
}
inline PROTOBUF_NDEBUG_INLINE IDByIP::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        ip_(arena),
        _cached_size_{0} {}

inline void IDByIP::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
IDByIP::~IDByIP() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.IDByIP)
  SharedDtor(*this);
}
inline void IDByIP::SharedDtor(MessageLite& self) {
  IDByIP& this_ = static_cast<IDByIP&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.ip_.Destroy();
  this_._impl_.~Impl_();
}

inline void* IDByIP::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IDByIP(arena);
}
constexpr auto IDByIP::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(IDByIP),
                                            alignof(IDByIP));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IDByIP::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IDByIP_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IDByIP::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<IDByIP>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IDByIP::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<IDByIP>(), &IDByIP::ByteSizeLong,
            &IDByIP::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IDByIP, _impl_._cached_size_),
        false,
    },
    &IDByIP::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IDByIP::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 50, 2> IDByIP::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::IDByIP>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string ip = 2 [json_name = "ip"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(IDByIP, _impl_.ip_)}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IDByIP, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(IDByIP, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ip = 2 [json_name = "ip"];
    {PROTOBUF_FIELD_OFFSET(IDByIP, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\45\2\2\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.IDByIP"
    "id"
    "ip"
  }},
};

PROTOBUF_NOINLINE void IDByIP::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.IDByIP)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.ip_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IDByIP::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IDByIP& this_ = static_cast<const IDByIP&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IDByIP::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IDByIP& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.IDByIP)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.IDByIP.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ip = 2 [json_name = "ip"];
          if (!this_._internal_ip().empty()) {
            const std::string& _s = this_._internal_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.IDByIP.ip");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.IDByIP)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IDByIP::ByteSizeLong(const MessageLite& base) {
          const IDByIP& this_ = static_cast<const IDByIP&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IDByIP::ByteSizeLong() const {
          const IDByIP& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.IDByIP)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // string ip = 2 [json_name = "ip"];
            if (!this_._internal_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ip());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IDByIP::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IDByIP*>(&to_msg);
  auto& from = static_cast<const IDByIP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.IDByIP)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IDByIP::CopyFrom(const IDByIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.IDByIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IDByIP::InternalSwap(IDByIP* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
}

::google::protobuf::Metadata IDByIP::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TracerouteLookup::_Internal {
 public:
};

TracerouteLookup::TracerouteLookup(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TracerouteLookup)
}
inline PROTOBUF_NDEBUG_INLINE TracerouteLookup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TracerouteLookup& from_msg)
      : agent_id_by_ip_{visibility, arena, from.agent_id_by_ip_},
        agents_{visibility, arena, from.agents_},
        asns_{visibility, arena, from.asns_},
        device_id_by_ip_{visibility, arena, from.device_id_by_ip_},
        site_id_by_ip_{visibility, arena, from.site_id_by_ip_},
        ips_{visibility, arena, from.ips_},
        _cached_size_{0} {}

TracerouteLookup::TracerouteLookup(
    ::google::protobuf::Arena* arena,
    const TracerouteLookup& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TracerouteLookup* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TracerouteLookup)
}
inline PROTOBUF_NDEBUG_INLINE TracerouteLookup::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : agent_id_by_ip_{visibility, arena},
        agents_{visibility, arena},
        asns_{visibility, arena},
        device_id_by_ip_{visibility, arena},
        site_id_by_ip_{visibility, arena},
        ips_{visibility, arena},
        _cached_size_{0} {}

inline void TracerouteLookup::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TracerouteLookup::~TracerouteLookup() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TracerouteLookup)
  SharedDtor(*this);
}
inline void TracerouteLookup::SharedDtor(MessageLite& self) {
  TracerouteLookup& this_ = static_cast<TracerouteLookup&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TracerouteLookup::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TracerouteLookup(arena);
}
constexpr auto TracerouteLookup::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.agent_id_by_ip_) +
          decltype(TracerouteLookup::_impl_.agent_id_by_ip_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.agents_) +
          decltype(TracerouteLookup::_impl_.agents_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.asns_) +
          decltype(TracerouteLookup::_impl_.asns_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.device_id_by_ip_) +
          decltype(TracerouteLookup::_impl_.device_id_by_ip_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.site_id_by_ip_) +
          decltype(TracerouteLookup::_impl_.site_id_by_ip_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.ips_) +
          decltype(TracerouteLookup::_impl_.ips_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TracerouteLookup), alignof(TracerouteLookup), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TracerouteLookup::PlacementNew_,
                                 sizeof(TracerouteLookup),
                                 alignof(TracerouteLookup));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TracerouteLookup::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TracerouteLookup_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TracerouteLookup::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TracerouteLookup>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TracerouteLookup::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TracerouteLookup>(), &TracerouteLookup::ByteSizeLong,
            &TracerouteLookup::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_._cached_size_),
        false,
    },
    &TracerouteLookup::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TracerouteLookup::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 6, 0, 2> TracerouteLookup::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TracerouteLookup>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1 [json_name = "agentIdByIp"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.agent_id_by_ip_)}},
    // repeated .kentik.synthetics.v202101beta1.Agent agents = 2 [json_name = "agents"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.agents_)}},
    // repeated .kentik.synthetics.v202101beta1.ASN asns = 3 [json_name = "asns"];
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.asns_)}},
    // repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4 [json_name = "deviceIdByIp"];
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 3, PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.device_id_by_ip_)}},
    // repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5 [json_name = "siteIdByIp"];
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 4, PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.site_id_by_ip_)}},
    // repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6 [json_name = "ips"];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 5, PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.ips_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1 [json_name = "agentIdByIp"];
    {PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.agent_id_by_ip_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.Agent agents = 2 [json_name = "agents"];
    {PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.agents_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.ASN asns = 3 [json_name = "asns"];
    {PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.asns_), 0, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4 [json_name = "deviceIdByIp"];
    {PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.device_id_by_ip_), 0, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5 [json_name = "siteIdByIp"];
    {PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.site_id_by_ip_), 0, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6 [json_name = "ips"];
    {PROTOBUF_FIELD_OFFSET(TracerouteLookup, _impl_.ips_), 0, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::IDByIP>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Agent>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ASN>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::IDByIP>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::IDByIP>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::IPInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TracerouteLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agent_id_by_ip_.Clear();
  _impl_.agents_.Clear();
  _impl_.asns_.Clear();
  _impl_.device_id_by_ip_.Clear();
  _impl_.site_id_by_ip_.Clear();
  _impl_.ips_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TracerouteLookup::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TracerouteLookup& this_ = static_cast<const TracerouteLookup&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TracerouteLookup::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TracerouteLookup& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TracerouteLookup)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1 [json_name = "agentIdByIp"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_agent_id_by_ip_size());
               i < n; i++) {
            const auto& repfield = this_._internal_agent_id_by_ip().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .kentik.synthetics.v202101beta1.Agent agents = 2 [json_name = "agents"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_agents_size());
               i < n; i++) {
            const auto& repfield = this_._internal_agents().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .kentik.synthetics.v202101beta1.ASN asns = 3 [json_name = "asns"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_asns_size());
               i < n; i++) {
            const auto& repfield = this_._internal_asns().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    3, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4 [json_name = "deviceIdByIp"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_device_id_by_ip_size());
               i < n; i++) {
            const auto& repfield = this_._internal_device_id_by_ip().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5 [json_name = "siteIdByIp"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_site_id_by_ip_size());
               i < n; i++) {
            const auto& repfield = this_._internal_site_id_by_ip().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6 [json_name = "ips"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_ips_size());
               i < n; i++) {
            const auto& repfield = this_._internal_ips().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TracerouteLookup)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TracerouteLookup::ByteSizeLong(const MessageLite& base) {
          const TracerouteLookup& this_ = static_cast<const TracerouteLookup&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TracerouteLookup::ByteSizeLong() const {
          const TracerouteLookup& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TracerouteLookup)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1 [json_name = "agentIdByIp"];
            {
              total_size += 1UL * this_._internal_agent_id_by_ip_size();
              for (const auto& msg : this_._internal_agent_id_by_ip()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kentik.synthetics.v202101beta1.Agent agents = 2 [json_name = "agents"];
            {
              total_size += 1UL * this_._internal_agents_size();
              for (const auto& msg : this_._internal_agents()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kentik.synthetics.v202101beta1.ASN asns = 3 [json_name = "asns"];
            {
              total_size += 1UL * this_._internal_asns_size();
              for (const auto& msg : this_._internal_asns()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4 [json_name = "deviceIdByIp"];
            {
              total_size += 1UL * this_._internal_device_id_by_ip_size();
              for (const auto& msg : this_._internal_device_id_by_ip()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5 [json_name = "siteIdByIp"];
            {
              total_size += 1UL * this_._internal_site_id_by_ip_size();
              for (const auto& msg : this_._internal_site_id_by_ip()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6 [json_name = "ips"];
            {
              total_size += 1UL * this_._internal_ips_size();
              for (const auto& msg : this_._internal_ips()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TracerouteLookup::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TracerouteLookup*>(&to_msg);
  auto& from = static_cast<const TracerouteLookup&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_agent_id_by_ip()->MergeFrom(
      from._internal_agent_id_by_ip());
  _this->_internal_mutable_agents()->MergeFrom(
      from._internal_agents());
  _this->_internal_mutable_asns()->MergeFrom(
      from._internal_asns());
  _this->_internal_mutable_device_id_by_ip()->MergeFrom(
      from._internal_device_id_by_ip());
  _this->_internal_mutable_site_id_by_ip()->MergeFrom(
      from._internal_site_id_by_ip());
  _this->_internal_mutable_ips()->MergeFrom(
      from._internal_ips());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TracerouteLookup::CopyFrom(const TracerouteLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TracerouteLookup::InternalSwap(TracerouteLookup* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agent_id_by_ip_.InternalSwap(&other->_impl_.agent_id_by_ip_);
  _impl_.agents_.InternalSwap(&other->_impl_.agents_);
  _impl_.asns_.InternalSwap(&other->_impl_.asns_);
  _impl_.device_id_by_ip_.InternalSwap(&other->_impl_.device_id_by_ip_);
  _impl_.site_id_by_ip_.InternalSwap(&other->_impl_.site_id_by_ip_);
  _impl_.ips_.InternalSwap(&other->_impl_.ips_);
}

::google::protobuf::Metadata TracerouteLookup::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TraceHop::_Internal {
 public:
};

TraceHop::TraceHop(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TraceHop)
}
inline PROTOBUF_NDEBUG_INLINE TraceHop::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TraceHop& from_msg)
      : ip_(arena, from.ip_),
        _cached_size_{0} {}

TraceHop::TraceHop(
    ::google::protobuf::Arena* arena,
    const TraceHop& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TraceHop* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ttl_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ttl_),
           offsetof(Impl_, region_) -
               offsetof(Impl_, ttl_) +
               sizeof(Impl_::region_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TraceHop)
}
inline PROTOBUF_NDEBUG_INLINE TraceHop::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : ip_(arena),
        _cached_size_{0} {}

inline void TraceHop::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ttl_),
           0,
           offsetof(Impl_, region_) -
               offsetof(Impl_, ttl_) +
               sizeof(Impl_::region_));
}
TraceHop::~TraceHop() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TraceHop)
  SharedDtor(*this);
}
inline void TraceHop::SharedDtor(MessageLite& self) {
  TraceHop& this_ = static_cast<TraceHop&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ip_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TraceHop::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TraceHop(arena);
}
constexpr auto TraceHop::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TraceHop),
                                            alignof(TraceHop));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TraceHop::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TraceHop_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TraceHop::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TraceHop>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TraceHop::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TraceHop>(), &TraceHop::ByteSizeLong,
            &TraceHop::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TraceHop, _impl_._cached_size_),
        false,
    },
    &TraceHop::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TraceHop::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 58, 2> TraceHop::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TraceHop>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 ttl = 1 [json_name = "ttl"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceHop, _impl_.ttl_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.ttl_)}},
    // string ip = 2 [json_name = "ip"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.ip_)}},
    // bool timeout = 3 [json_name = "timeout"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TraceHop, _impl_.timeout_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.timeout_)}},
    // int32 latency = 4 [json_name = "latency"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceHop, _impl_.latency_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.latency_)}},
    // int32 min_expected_latency = 5 [json_name = "minExpectedLatency"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceHop, _impl_.min_expected_latency_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.min_expected_latency_)}},
    // int32 asn = 6 [json_name = "asn"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceHop, _impl_.asn_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.asn_)}},
    // int32 site = 7 [json_name = "site"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceHop, _impl_.site_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.site_)}},
    // int32 region = 8 [json_name = "region"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceHop, _impl_.region_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.region_)}},
    // bool target = 9 [json_name = "target"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TraceHop, _impl_.target_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.target_)}},
    // bool trace_end = 10 [json_name = "traceEnd"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TraceHop, _impl_.trace_end_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.trace_end_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 ttl = 1 [json_name = "ttl"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.ttl_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string ip = 2 [json_name = "ip"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool timeout = 3 [json_name = "timeout"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.timeout_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 latency = 4 [json_name = "latency"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.latency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 min_expected_latency = 5 [json_name = "minExpectedLatency"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.min_expected_latency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 asn = 6 [json_name = "asn"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.asn_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 site = 7 [json_name = "site"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.site_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 region = 8 [json_name = "region"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.region_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool target = 9 [json_name = "target"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.target_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool trace_end = 10 [json_name = "traceEnd"];
    {PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.trace_end_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\47\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.TraceHop"
    "ip"
  }},
};

PROTOBUF_NOINLINE void TraceHop::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TraceHop)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_.ClearToEmpty();
  ::memset(&_impl_.ttl_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.region_) -
      reinterpret_cast<char*>(&_impl_.ttl_)) + sizeof(_impl_.region_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TraceHop::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TraceHop& this_ = static_cast<const TraceHop&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TraceHop::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TraceHop& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TraceHop)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 ttl = 1 [json_name = "ttl"];
          if (this_._internal_ttl() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_ttl(), target);
          }

          // string ip = 2 [json_name = "ip"];
          if (!this_._internal_ip().empty()) {
            const std::string& _s = this_._internal_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TraceHop.ip");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool timeout = 3 [json_name = "timeout"];
          if (this_._internal_timeout() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_timeout(), target);
          }

          // int32 latency = 4 [json_name = "latency"];
          if (this_._internal_latency() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_latency(), target);
          }

          // int32 min_expected_latency = 5 [json_name = "minExpectedLatency"];
          if (this_._internal_min_expected_latency() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_min_expected_latency(), target);
          }

          // int32 asn = 6 [json_name = "asn"];
          if (this_._internal_asn() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_asn(), target);
          }

          // int32 site = 7 [json_name = "site"];
          if (this_._internal_site() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_site(), target);
          }

          // int32 region = 8 [json_name = "region"];
          if (this_._internal_region() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_region(), target);
          }

          // bool target = 9 [json_name = "target"];
          if (this_._internal_target() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_target(), target);
          }

          // bool trace_end = 10 [json_name = "traceEnd"];
          if (this_._internal_trace_end() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_trace_end(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TraceHop)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TraceHop::ByteSizeLong(const MessageLite& base) {
          const TraceHop& this_ = static_cast<const TraceHop&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TraceHop::ByteSizeLong() const {
          const TraceHop& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TraceHop)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string ip = 2 [json_name = "ip"];
            if (!this_._internal_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ip());
            }
            // int32 ttl = 1 [json_name = "ttl"];
            if (this_._internal_ttl() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_ttl());
            }
            // int32 latency = 4 [json_name = "latency"];
            if (this_._internal_latency() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_latency());
            }
            // int32 min_expected_latency = 5 [json_name = "minExpectedLatency"];
            if (this_._internal_min_expected_latency() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_min_expected_latency());
            }
            // int32 asn = 6 [json_name = "asn"];
            if (this_._internal_asn() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_asn());
            }
            // int32 site = 7 [json_name = "site"];
            if (this_._internal_site() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_site());
            }
            // bool timeout = 3 [json_name = "timeout"];
            if (this_._internal_timeout() != 0) {
              total_size += 2;
            }
            // bool target = 9 [json_name = "target"];
            if (this_._internal_target() != 0) {
              total_size += 2;
            }
            // bool trace_end = 10 [json_name = "traceEnd"];
            if (this_._internal_trace_end() != 0) {
              total_size += 2;
            }
            // int32 region = 8 [json_name = "region"];
            if (this_._internal_region() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_region());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TraceHop::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TraceHop*>(&to_msg);
  auto& from = static_cast<const TraceHop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TraceHop)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _this->_internal_set_ip(from._internal_ip());
  }
  if (from._internal_ttl() != 0) {
    _this->_impl_.ttl_ = from._impl_.ttl_;
  }
  if (from._internal_latency() != 0) {
    _this->_impl_.latency_ = from._impl_.latency_;
  }
  if (from._internal_min_expected_latency() != 0) {
    _this->_impl_.min_expected_latency_ = from._impl_.min_expected_latency_;
  }
  if (from._internal_asn() != 0) {
    _this->_impl_.asn_ = from._impl_.asn_;
  }
  if (from._internal_site() != 0) {
    _this->_impl_.site_ = from._impl_.site_;
  }
  if (from._internal_timeout() != 0) {
    _this->_impl_.timeout_ = from._impl_.timeout_;
  }
  if (from._internal_target() != 0) {
    _this->_impl_.target_ = from._impl_.target_;
  }
  if (from._internal_trace_end() != 0) {
    _this->_impl_.trace_end_ = from._impl_.trace_end_;
  }
  if (from._internal_region() != 0) {
    _this->_impl_.region_ = from._impl_.region_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TraceHop::CopyFrom(const TraceHop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TraceHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TraceHop::InternalSwap(TraceHop* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ip_, &other->_impl_.ip_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.region_)
      + sizeof(TraceHop::_impl_.region_)
      - PROTOBUF_FIELD_OFFSET(TraceHop, _impl_.ttl_)>(
          reinterpret_cast<char*>(&_impl_.ttl_),
          reinterpret_cast<char*>(&other->_impl_.ttl_));
}

::google::protobuf::Metadata TraceHop::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TraceProbe::_Internal {
 public:
};

TraceProbe::TraceProbe(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TraceProbe)
}
inline PROTOBUF_NDEBUG_INLINE TraceProbe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TraceProbe& from_msg)
      : as_path_{visibility, arena, from.as_path_},
        _as_path_cached_byte_size_{0},
        region_path_{visibility, arena, from.region_path_},
        site_path_{visibility, arena, from.site_path_},
        _site_path_cached_byte_size_{0},
        hops_{visibility, arena, from.hops_},
        _cached_size_{0} {}

TraceProbe::TraceProbe(
    ::google::protobuf::Arena* arena,
    const TraceProbe& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TraceProbe* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, completed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, completed_),
           offsetof(Impl_, hop_count_) -
               offsetof(Impl_, completed_) +
               sizeof(Impl_::hop_count_));

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TraceProbe)
}
inline PROTOBUF_NDEBUG_INLINE TraceProbe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : as_path_{visibility, arena},
        _as_path_cached_byte_size_{0},
        region_path_{visibility, arena},
        site_path_{visibility, arena},
        _site_path_cached_byte_size_{0},
        hops_{visibility, arena},
        _cached_size_{0} {}

inline void TraceProbe::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, completed_),
           0,
           offsetof(Impl_, hop_count_) -
               offsetof(Impl_, completed_) +
               sizeof(Impl_::hop_count_));
}
TraceProbe::~TraceProbe() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TraceProbe)
  SharedDtor(*this);
}
inline void TraceProbe::SharedDtor(MessageLite& self) {
  TraceProbe& this_ = static_cast<TraceProbe&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TraceProbe::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TraceProbe(arena);
}
constexpr auto TraceProbe::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.as_path_) +
          decltype(TraceProbe::_impl_.as_path_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.region_path_) +
          decltype(TraceProbe::_impl_.region_path_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.site_path_) +
          decltype(TraceProbe::_impl_.site_path_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.hops_) +
          decltype(TraceProbe::_impl_.hops_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TraceProbe), alignof(TraceProbe), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TraceProbe::PlacementNew_,
                                 sizeof(TraceProbe),
                                 alignof(TraceProbe));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TraceProbe::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TraceProbe_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TraceProbe::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TraceProbe>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TraceProbe::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TraceProbe>(), &TraceProbe::ByteSizeLong,
            &TraceProbe::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_._cached_size_),
        false,
    },
    &TraceProbe::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TraceProbe::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 61, 2> TraceProbe::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TraceProbe>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated int32 as_path = 1 [json_name = "asPath"];
    {::_pbi::TcParser::FastV32P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.as_path_)}},
    // bool completed = 2 [json_name = "completed"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TraceProbe, _impl_.completed_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.completed_)}},
    // int32 hop_count = 3 [json_name = "hopCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TraceProbe, _impl_.hop_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.hop_count_)}},
    // repeated string region_path = 4 [json_name = "regionPath"];
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.region_path_)}},
    // repeated int32 site_path = 5 [json_name = "sitePath"];
    {::_pbi::TcParser::FastV32P1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.site_path_)}},
    // repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6 [json_name = "hops"];
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.hops_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated int32 as_path = 1 [json_name = "asPath"];
    {PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.as_path_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // bool completed = 2 [json_name = "completed"];
    {PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.completed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 hop_count = 3 [json_name = "hopCount"];
    {PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.hop_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated string region_path = 4 [json_name = "regionPath"];
    {PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.region_path_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated int32 site_path = 5 [json_name = "sitePath"];
    {PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.site_path_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6 [json_name = "hops"];
    {PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.hops_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TraceHop>()},
  }}, {{
    "\51\0\0\0\13\0\0\0"
    "kentik.synthetics.v202101beta1.TraceProbe"
    "region_path"
  }},
};

PROTOBUF_NOINLINE void TraceProbe::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TraceProbe)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.as_path_.Clear();
  _impl_.region_path_.Clear();
  _impl_.site_path_.Clear();
  _impl_.hops_.Clear();
  ::memset(&_impl_.completed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.hop_count_) -
      reinterpret_cast<char*>(&_impl_.completed_)) + sizeof(_impl_.hop_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TraceProbe::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TraceProbe& this_ = static_cast<const TraceProbe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TraceProbe::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TraceProbe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TraceProbe)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated int32 as_path = 1 [json_name = "asPath"];
          {
            int byte_size = this_._impl_._as_path_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt32Packed(
                  1, this_._internal_as_path(), byte_size, target);
            }
          }

          // bool completed = 2 [json_name = "completed"];
          if (this_._internal_completed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_completed(), target);
          }

          // int32 hop_count = 3 [json_name = "hopCount"];
          if (this_._internal_hop_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_hop_count(), target);
          }

          // repeated string region_path = 4 [json_name = "regionPath"];
          for (int i = 0, n = this_._internal_region_path_size(); i < n; ++i) {
            const auto& s = this_._internal_region_path().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.TraceProbe.region_path");
            target = stream->WriteString(4, s, target);
          }

          // repeated int32 site_path = 5 [json_name = "sitePath"];
          {
            int byte_size = this_._impl_._site_path_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt32Packed(
                  5, this_._internal_site_path(), byte_size, target);
            }
          }

          // repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6 [json_name = "hops"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_hops_size());
               i < n; i++) {
            const auto& repfield = this_._internal_hops().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TraceProbe)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TraceProbe::ByteSizeLong(const MessageLite& base) {
          const TraceProbe& this_ = static_cast<const TraceProbe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TraceProbe::ByteSizeLong() const {
          const TraceProbe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TraceProbe)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 as_path = 1 [json_name = "asPath"];
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
                      this_._internal_as_path(), 1,
                      this_._impl_._as_path_cached_byte_size_);
            }
            // repeated string region_path = 4 [json_name = "regionPath"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_region_path().size());
              for (int i = 0, n = this_._internal_region_path().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_region_path().Get(i));
              }
            }
            // repeated int32 site_path = 5 [json_name = "sitePath"];
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
                      this_._internal_site_path(), 1,
                      this_._impl_._site_path_cached_byte_size_);
            }
            // repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6 [json_name = "hops"];
            {
              total_size += 1UL * this_._internal_hops_size();
              for (const auto& msg : this_._internal_hops()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // bool completed = 2 [json_name = "completed"];
            if (this_._internal_completed() != 0) {
              total_size += 2;
            }
            // int32 hop_count = 3 [json_name = "hopCount"];
            if (this_._internal_hop_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_hop_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TraceProbe::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TraceProbe*>(&to_msg);
  auto& from = static_cast<const TraceProbe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TraceProbe)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_as_path()->MergeFrom(from._internal_as_path());
  _this->_internal_mutable_region_path()->MergeFrom(from._internal_region_path());
  _this->_internal_mutable_site_path()->MergeFrom(from._internal_site_path());
  _this->_internal_mutable_hops()->MergeFrom(
      from._internal_hops());
  if (from._internal_completed() != 0) {
    _this->_impl_.completed_ = from._impl_.completed_;
  }
  if (from._internal_hop_count() != 0) {
    _this->_impl_.hop_count_ = from._impl_.hop_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TraceProbe::CopyFrom(const TraceProbe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TraceProbe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TraceProbe::InternalSwap(TraceProbe* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.as_path_.InternalSwap(&other->_impl_.as_path_);
  _impl_.region_path_.InternalSwap(&other->_impl_.region_path_);
  _impl_.site_path_.InternalSwap(&other->_impl_.site_path_);
  _impl_.hops_.InternalSwap(&other->_impl_.hops_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.hop_count_)
      + sizeof(TraceProbe::_impl_.hop_count_)
      - PROTOBUF_FIELD_OFFSET(TraceProbe, _impl_.completed_)>(
          reinterpret_cast<char*>(&_impl_.completed_),
          reinterpret_cast<char*>(&other->_impl_.completed_));
}

::google::protobuf::Metadata TraceProbe::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Trace::_Internal {
 public:
};

Trace::Trace(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Trace)
}
inline PROTOBUF_NDEBUG_INLINE Trace::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::Trace& from_msg)
      : probes_{visibility, arena, from.probes_},
        agent_id_(arena, from.agent_id_),
        agent_ip_(arena, from.agent_ip_),
        target_ip_(arena, from.target_ip_),
        _cached_size_{0} {}

Trace::Trace(
    ::google::protobuf::Arena* arena,
    const Trace& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Trace* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.hop_count_ = from._impl_.hop_count_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Trace)
}
inline PROTOBUF_NDEBUG_INLINE Trace::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : probes_{visibility, arena},
        agent_id_(arena),
        agent_ip_(arena),
        target_ip_(arena),
        _cached_size_{0} {}

inline void Trace::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.hop_count_ = {};
}
Trace::~Trace() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Trace)
  SharedDtor(*this);
}
inline void Trace::SharedDtor(MessageLite& self) {
  Trace& this_ = static_cast<Trace&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.agent_id_.Destroy();
  this_._impl_.agent_ip_.Destroy();
  this_._impl_.target_ip_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Trace::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Trace(arena);
}
constexpr auto Trace::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Trace, _impl_.probes_) +
          decltype(Trace::_impl_.probes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Trace), alignof(Trace), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Trace::PlacementNew_,
                                 sizeof(Trace),
                                 alignof(Trace));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Trace::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Trace_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Trace::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Trace>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Trace::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Trace>(), &Trace::ByteSizeLong,
            &Trace::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Trace, _impl_._cached_size_),
        false,
    },
    &Trace::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Trace::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 70, 2> Trace::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Trace>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string agent_id = 1 [json_name = "agentId"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Trace, _impl_.agent_id_)}},
    // string agent_ip = 2 [json_name = "agentIp"];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Trace, _impl_.agent_ip_)}},
    // string target_ip = 3 [json_name = "targetIp"];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Trace, _impl_.target_ip_)}},
    // int32 hop_count = 4 [json_name = "hopCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Trace, _impl_.hop_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Trace, _impl_.hop_count_)}},
    // repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5 [json_name = "probes"];
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Trace, _impl_.probes_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string agent_id = 1 [json_name = "agentId"];
    {PROTOBUF_FIELD_OFFSET(Trace, _impl_.agent_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string agent_ip = 2 [json_name = "agentIp"];
    {PROTOBUF_FIELD_OFFSET(Trace, _impl_.agent_ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string target_ip = 3 [json_name = "targetIp"];
    {PROTOBUF_FIELD_OFFSET(Trace, _impl_.target_ip_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 hop_count = 4 [json_name = "hopCount"];
    {PROTOBUF_FIELD_OFFSET(Trace, _impl_.hop_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5 [json_name = "probes"];
    {PROTOBUF_FIELD_OFFSET(Trace, _impl_.probes_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TraceProbe>()},
  }}, {{
    "\44\10\10\11\0\0\0\0"
    "kentik.synthetics.v202101beta1.Trace"
    "agent_id"
    "agent_ip"
    "target_ip"
  }},
};

PROTOBUF_NOINLINE void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Trace)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.probes_.Clear();
  _impl_.agent_id_.ClearToEmpty();
  _impl_.agent_ip_.ClearToEmpty();
  _impl_.target_ip_.ClearToEmpty();
  _impl_.hop_count_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Trace::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Trace& this_ = static_cast<const Trace&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Trace::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Trace& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Trace)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string agent_id = 1 [json_name = "agentId"];
          if (!this_._internal_agent_id().empty()) {
            const std::string& _s = this_._internal_agent_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Trace.agent_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string agent_ip = 2 [json_name = "agentIp"];
          if (!this_._internal_agent_ip().empty()) {
            const std::string& _s = this_._internal_agent_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Trace.agent_ip");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string target_ip = 3 [json_name = "targetIp"];
          if (!this_._internal_target_ip().empty()) {
            const std::string& _s = this_._internal_target_ip();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.Trace.target_ip");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 hop_count = 4 [json_name = "hopCount"];
          if (this_._internal_hop_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_hop_count(), target);
          }

          // repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5 [json_name = "probes"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_probes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_probes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Trace)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Trace::ByteSizeLong(const MessageLite& base) {
          const Trace& this_ = static_cast<const Trace&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Trace::ByteSizeLong() const {
          const Trace& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Trace)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5 [json_name = "probes"];
            {
              total_size += 1UL * this_._internal_probes_size();
              for (const auto& msg : this_._internal_probes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string agent_id = 1 [json_name = "agentId"];
            if (!this_._internal_agent_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_agent_id());
            }
            // string agent_ip = 2 [json_name = "agentIp"];
            if (!this_._internal_agent_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_agent_ip());
            }
            // string target_ip = 3 [json_name = "targetIp"];
            if (!this_._internal_target_ip().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_target_ip());
            }
            // int32 hop_count = 4 [json_name = "hopCount"];
            if (this_._internal_hop_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_hop_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Trace::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Trace*>(&to_msg);
  auto& from = static_cast<const Trace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Trace)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_probes()->MergeFrom(
      from._internal_probes());
  if (!from._internal_agent_id().empty()) {
    _this->_internal_set_agent_id(from._internal_agent_id());
  }
  if (!from._internal_agent_ip().empty()) {
    _this->_internal_set_agent_ip(from._internal_agent_ip());
  }
  if (!from._internal_target_ip().empty()) {
    _this->_internal_set_target_ip(from._internal_target_ip());
  }
  if (from._internal_hop_count() != 0) {
    _this->_impl_.hop_count_ = from._impl_.hop_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Trace::InternalSwap(Trace* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.probes_.InternalSwap(&other->_impl_.probes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.agent_id_, &other->_impl_.agent_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.agent_ip_, &other->_impl_.agent_ip_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.target_ip_, &other->_impl_.target_ip_, arena);
        swap(_impl_.hop_count_, other->_impl_.hop_count_);
}

::google::protobuf::Metadata Trace::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Stats::_Internal {
 public:
};

Stats::Stats(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Stats)
}
Stats::Stats(
    ::google::protobuf::Arena* arena, const Stats& from)
    : Stats(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Stats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Stats::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, average_),
           0,
           offsetof(Impl_, total_) -
               offsetof(Impl_, average_) +
               sizeof(Impl_::total_));
}
Stats::~Stats() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Stats)
  SharedDtor(*this);
}
inline void Stats::SharedDtor(MessageLite& self) {
  Stats& this_ = static_cast<Stats&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Stats::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Stats(arena);
}
constexpr auto Stats::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Stats),
                                            alignof(Stats));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Stats::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Stats_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Stats::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Stats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Stats::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Stats>(), &Stats::ByteSizeLong,
            &Stats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Stats, _impl_._cached_size_),
        false,
    },
    &Stats::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Stats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> Stats::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Stats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 average = 1 [json_name = "average"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Stats, _impl_.average_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(Stats, _impl_.average_)}},
    // int32 max = 2 [json_name = "max"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Stats, _impl_.max_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Stats, _impl_.max_)}},
    // int32 total = 3 [json_name = "total"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Stats, _impl_.total_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Stats, _impl_.total_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 average = 1 [json_name = "average"];
    {PROTOBUF_FIELD_OFFSET(Stats, _impl_.average_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max = 2 [json_name = "max"];
    {PROTOBUF_FIELD_OFFSET(Stats, _impl_.max_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total = 3 [json_name = "total"];
    {PROTOBUF_FIELD_OFFSET(Stats, _impl_.total_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Stats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.average_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.total_) -
      reinterpret_cast<char*>(&_impl_.average_)) + sizeof(_impl_.total_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Stats::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Stats& this_ = static_cast<const Stats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Stats::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Stats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Stats)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 average = 1 [json_name = "average"];
          if (this_._internal_average() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_average(), target);
          }

          // int32 max = 2 [json_name = "max"];
          if (this_._internal_max() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_max(), target);
          }

          // int32 total = 3 [json_name = "total"];
          if (this_._internal_total() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_total(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Stats)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Stats::ByteSizeLong(const MessageLite& base) {
          const Stats& this_ = static_cast<const Stats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Stats::ByteSizeLong() const {
          const Stats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Stats)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 average = 1 [json_name = "average"];
            if (this_._internal_average() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_average());
            }
            // int32 max = 2 [json_name = "max"];
            if (this_._internal_max() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max());
            }
            // int32 total = 3 [json_name = "total"];
            if (this_._internal_total() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Stats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Stats*>(&to_msg);
  auto& from = static_cast<const Stats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Stats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_average() != 0) {
    _this->_impl_.average_ = from._impl_.average_;
  }
  if (from._internal_max() != 0) {
    _this->_impl_.max_ = from._impl_.max_;
  }
  if (from._internal_total() != 0) {
    _this->_impl_.total_ = from._impl_.total_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Stats::InternalSwap(Stats* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats, _impl_.total_)
      + sizeof(Stats::_impl_.total_)
      - PROTOBUF_FIELD_OFFSET(Stats, _impl_.average_)>(
          reinterpret_cast<char*>(&_impl_.average_),
          reinterpret_cast<char*>(&other->_impl_.average_));
}

::google::protobuf::Metadata Stats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TracerouteResult::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TracerouteResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_._has_bits_);
};

void TracerouteResult::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TracerouteResult::TracerouteResult(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TracerouteResult)
}
inline PROTOBUF_NDEBUG_INLINE TracerouteResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::TracerouteResult& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        traces_{visibility, arena, from.traces_} {}

TracerouteResult::TracerouteResult(
    ::google::protobuf::Arena* arena,
    const TracerouteResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TracerouteResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.count_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Stats>(
                              arena, *from._impl_.count_)
                        : nullptr;
  _impl_.distance_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Stats>(
                              arena, *from._impl_.distance_)
                        : nullptr;
  _impl_.hop_count_ = from._impl_.hop_count_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TracerouteResult)
}
inline PROTOBUF_NDEBUG_INLINE TracerouteResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        traces_{visibility, arena} {}

inline void TracerouteResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, hop_count_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::hop_count_));
}
TracerouteResult::~TracerouteResult() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TracerouteResult)
  SharedDtor(*this);
}
inline void TracerouteResult::SharedDtor(MessageLite& self) {
  TracerouteResult& this_ = static_cast<TracerouteResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.time_;
  delete this_._impl_.count_;
  delete this_._impl_.distance_;
  this_._impl_.~Impl_();
}

inline void* TracerouteResult::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TracerouteResult(arena);
}
constexpr auto TracerouteResult::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.traces_) +
          decltype(TracerouteResult::_impl_.traces_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TracerouteResult), alignof(TracerouteResult), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TracerouteResult::PlacementNew_,
                                 sizeof(TracerouteResult),
                                 alignof(TracerouteResult));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TracerouteResult::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TracerouteResult_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TracerouteResult::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TracerouteResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TracerouteResult::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TracerouteResult>(), &TracerouteResult::ByteSizeLong,
            &TracerouteResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_._cached_size_),
        false,
    },
    &TracerouteResult::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TracerouteResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 4, 0, 2> TracerouteResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TracerouteResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp time = 1 [json_name = "time"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.time_)}},
    // repeated .kentik.synthetics.v202101beta1.Trace traces = 2 [json_name = "traces"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.traces_)}},
    // int32 hop_count = 3 [json_name = "hopCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TracerouteResult, _impl_.hop_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.hop_count_)}},
    // .kentik.synthetics.v202101beta1.Stats count = 4 [json_name = "count"];
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 2, PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.count_)}},
    // .kentik.synthetics.v202101beta1.Stats distance = 5 [json_name = "distance"];
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 3, PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.distance_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp time = 1 [json_name = "time"];
    {PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.Trace traces = 2 [json_name = "traces"];
    {PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.traces_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 hop_count = 3 [json_name = "hopCount"];
    {PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.hop_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .kentik.synthetics.v202101beta1.Stats count = 4 [json_name = "count"];
    {PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.count_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.Stats distance = 5 [json_name = "distance"];
    {PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.distance_), _Internal::kHasBitsOffset + 2, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Trace>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Stats>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Stats>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TracerouteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TracerouteResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traces_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.count_ != nullptr);
      _impl_.count_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.distance_ != nullptr);
      _impl_.distance_->Clear();
    }
  }
  _impl_.hop_count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TracerouteResult::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TracerouteResult& this_ = static_cast<const TracerouteResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TracerouteResult::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TracerouteResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TracerouteResult)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 1 [json_name = "time"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // repeated .kentik.synthetics.v202101beta1.Trace traces = 2 [json_name = "traces"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_traces_size());
               i < n; i++) {
            const auto& repfield = this_._internal_traces().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // int32 hop_count = 3 [json_name = "hopCount"];
          if (this_._internal_hop_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_hop_count(), target);
          }

          // .kentik.synthetics.v202101beta1.Stats count = 4 [json_name = "count"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.count_, this_._impl_.count_->GetCachedSize(), target,
                stream);
          }

          // .kentik.synthetics.v202101beta1.Stats distance = 5 [json_name = "distance"];
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.distance_, this_._impl_.distance_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TracerouteResult)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TracerouteResult::ByteSizeLong(const MessageLite& base) {
          const TracerouteResult& this_ = static_cast<const TracerouteResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TracerouteResult::ByteSizeLong() const {
          const TracerouteResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TracerouteResult)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.Trace traces = 2 [json_name = "traces"];
            {
              total_size += 1UL * this_._internal_traces_size();
              for (const auto& msg : this_._internal_traces()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .google.protobuf.Timestamp time = 1 [json_name = "time"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // .kentik.synthetics.v202101beta1.Stats count = 4 [json_name = "count"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.count_);
            }
            // .kentik.synthetics.v202101beta1.Stats distance = 5 [json_name = "distance"];
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.distance_);
            }
          }
           {
            // int32 hop_count = 3 [json_name = "hopCount"];
            if (this_._internal_hop_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_hop_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TracerouteResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TracerouteResult*>(&to_msg);
  auto& from = static_cast<const TracerouteResult&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TracerouteResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_traces()->MergeFrom(
      from._internal_traces());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.count_ != nullptr);
      if (_this->_impl_.count_ == nullptr) {
        _this->_impl_.count_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Stats>(arena, *from._impl_.count_);
      } else {
        _this->_impl_.count_->MergeFrom(*from._impl_.count_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.distance_ != nullptr);
      if (_this->_impl_.distance_ == nullptr) {
        _this->_impl_.distance_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Stats>(arena, *from._impl_.distance_);
      } else {
        _this->_impl_.distance_->MergeFrom(*from._impl_.distance_);
      }
    }
  }
  if (from._internal_hop_count() != 0) {
    _this->_impl_.hop_count_ = from._impl_.hop_count_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TracerouteResult::CopyFrom(const TracerouteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TracerouteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TracerouteResult::InternalSwap(TracerouteResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.traces_.InternalSwap(&other->_impl_.traces_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.hop_count_)
      + sizeof(TracerouteResult::_impl_.hop_count_)
      - PROTOBUF_FIELD_OFFSET(TracerouteResult, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata TracerouteResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TracerouteInfo::_Internal {
 public:
};

TracerouteInfo::TracerouteInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TracerouteInfo)
}
TracerouteInfo::TracerouteInfo(
    ::google::protobuf::Arena* arena, const TracerouteInfo& from)
    : TracerouteInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE TracerouteInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TracerouteInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, is_trace_routes_truncated_),
           0,
           offsetof(Impl_, max_region_path_count_) -
               offsetof(Impl_, is_trace_routes_truncated_) +
               sizeof(Impl_::max_region_path_count_));
}
TracerouteInfo::~TracerouteInfo() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TracerouteInfo)
  SharedDtor(*this);
}
inline void TracerouteInfo::SharedDtor(MessageLite& self) {
  TracerouteInfo& this_ = static_cast<TracerouteInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TracerouteInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TracerouteInfo(arena);
}
constexpr auto TracerouteInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TracerouteInfo),
                                            alignof(TracerouteInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TracerouteInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TracerouteInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TracerouteInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TracerouteInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TracerouteInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TracerouteInfo>(), &TracerouteInfo::ByteSizeLong,
            &TracerouteInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_._cached_size_),
        false,
    },
    &TracerouteInfo::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TracerouteInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> TracerouteInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TracerouteInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 max_region_path_count = 4 [json_name = "maxRegionPathCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TracerouteInfo, _impl_.max_region_path_count_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.max_region_path_count_)}},
    // bool is_trace_routes_truncated = 1 [json_name = "isTraceRoutesTruncated"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TracerouteInfo, _impl_.is_trace_routes_truncated_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.is_trace_routes_truncated_)}},
    // int32 max_asn_path_count = 2 [json_name = "maxAsnPathCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TracerouteInfo, _impl_.max_asn_path_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.max_asn_path_count_)}},
    // int32 max_site_path_count = 3 [json_name = "maxSitePathCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(TracerouteInfo, _impl_.max_site_path_count_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.max_site_path_count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool is_trace_routes_truncated = 1 [json_name = "isTraceRoutesTruncated"];
    {PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.is_trace_routes_truncated_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 max_asn_path_count = 2 [json_name = "maxAsnPathCount"];
    {PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.max_asn_path_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_site_path_count = 3 [json_name = "maxSitePathCount"];
    {PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.max_site_path_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_region_path_count = 4 [json_name = "maxRegionPathCount"];
    {PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.max_region_path_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void TracerouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.is_trace_routes_truncated_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_region_path_count_) -
      reinterpret_cast<char*>(&_impl_.is_trace_routes_truncated_)) + sizeof(_impl_.max_region_path_count_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TracerouteInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TracerouteInfo& this_ = static_cast<const TracerouteInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TracerouteInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TracerouteInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TracerouteInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool is_trace_routes_truncated = 1 [json_name = "isTraceRoutesTruncated"];
          if (this_._internal_is_trace_routes_truncated() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_is_trace_routes_truncated(), target);
          }

          // int32 max_asn_path_count = 2 [json_name = "maxAsnPathCount"];
          if (this_._internal_max_asn_path_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_max_asn_path_count(), target);
          }

          // int32 max_site_path_count = 3 [json_name = "maxSitePathCount"];
          if (this_._internal_max_site_path_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_max_site_path_count(), target);
          }

          // int32 max_region_path_count = 4 [json_name = "maxRegionPathCount"];
          if (this_._internal_max_region_path_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_max_region_path_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TracerouteInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TracerouteInfo::ByteSizeLong(const MessageLite& base) {
          const TracerouteInfo& this_ = static_cast<const TracerouteInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TracerouteInfo::ByteSizeLong() const {
          const TracerouteInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TracerouteInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // bool is_trace_routes_truncated = 1 [json_name = "isTraceRoutesTruncated"];
            if (this_._internal_is_trace_routes_truncated() != 0) {
              total_size += 2;
            }
            // int32 max_asn_path_count = 2 [json_name = "maxAsnPathCount"];
            if (this_._internal_max_asn_path_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_asn_path_count());
            }
            // int32 max_site_path_count = 3 [json_name = "maxSitePathCount"];
            if (this_._internal_max_site_path_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_site_path_count());
            }
            // int32 max_region_path_count = 4 [json_name = "maxRegionPathCount"];
            if (this_._internal_max_region_path_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_region_path_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TracerouteInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TracerouteInfo*>(&to_msg);
  auto& from = static_cast<const TracerouteInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_trace_routes_truncated() != 0) {
    _this->_impl_.is_trace_routes_truncated_ = from._impl_.is_trace_routes_truncated_;
  }
  if (from._internal_max_asn_path_count() != 0) {
    _this->_impl_.max_asn_path_count_ = from._impl_.max_asn_path_count_;
  }
  if (from._internal_max_site_path_count() != 0) {
    _this->_impl_.max_site_path_count_ = from._impl_.max_site_path_count_;
  }
  if (from._internal_max_region_path_count() != 0) {
    _this->_impl_.max_region_path_count_ = from._impl_.max_region_path_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TracerouteInfo::CopyFrom(const TracerouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TracerouteInfo::InternalSwap(TracerouteInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.max_region_path_count_)
      + sizeof(TracerouteInfo::_impl_.max_region_path_count_)
      - PROTOBUF_FIELD_OFFSET(TracerouteInfo, _impl_.is_trace_routes_truncated_)>(
          reinterpret_cast<char*>(&_impl_.is_trace_routes_truncated_),
          reinterpret_cast<char*>(&other->_impl_.is_trace_routes_truncated_));
}

::google::protobuf::Metadata TracerouteInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetHealthForTestsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetHealthForTestsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_._has_bits_);
};

void GetHealthForTestsRequest::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetHealthForTestsRequest::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetHealthForTestsRequest::GetHealthForTestsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetHealthForTestsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GetHealthForTestsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ids_{visibility, arena, from.ids_},
        agent_ids_{visibility, arena, from.agent_ids_},
        task_ids_{visibility, arena, from.task_ids_} {}

GetHealthForTestsRequest::GetHealthForTestsRequest(
    ::google::protobuf::Arena* arena,
    const GetHealthForTestsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetHealthForTestsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.start_time_)
                        : nullptr;
  _impl_.end_time_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.end_time_)
                        : nullptr;
  _impl_.augment_ = from._impl_.augment_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetHealthForTestsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        ids_{visibility, arena},
        agent_ids_{visibility, arena},
        task_ids_{visibility, arena} {}

inline void GetHealthForTestsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, augment_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::augment_));
}
GetHealthForTestsRequest::~GetHealthForTestsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  SharedDtor(*this);
}
inline void GetHealthForTestsRequest::SharedDtor(MessageLite& self) {
  GetHealthForTestsRequest& this_ = static_cast<GetHealthForTestsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.start_time_;
  delete this_._impl_.end_time_;
  this_._impl_.~Impl_();
}

inline void* GetHealthForTestsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetHealthForTestsRequest(arena);
}
constexpr auto GetHealthForTestsRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.ids_) +
          decltype(GetHealthForTestsRequest::_impl_.ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.agent_ids_) +
          decltype(GetHealthForTestsRequest::_impl_.agent_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.task_ids_) +
          decltype(GetHealthForTestsRequest::_impl_.task_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetHealthForTestsRequest), alignof(GetHealthForTestsRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetHealthForTestsRequest::PlacementNew_,
                                 sizeof(GetHealthForTestsRequest),
                                 alignof(GetHealthForTestsRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetHealthForTestsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetHealthForTestsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetHealthForTestsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetHealthForTestsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetHealthForTestsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetHealthForTestsRequest>(), &GetHealthForTestsRequest::ByteSizeLong,
            &GetHealthForTestsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_._cached_size_),
        false,
    },
    &GetHealthForTestsRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetHealthForTestsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 84, 2> GetHealthForTestsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GetHealthForTestsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated string ids = 1 [json_name = "ids"];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.ids_)}},
    // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.start_time_)}},
    // .google.protobuf.Timestamp end_time = 3 [json_name = "endTime"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.end_time_)}},
    // repeated string agent_ids = 4 [json_name = "agentIds"];
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.agent_ids_)}},
    // repeated string task_ids = 5 [json_name = "taskIds"];
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.task_ids_)}},
    // bool augment = 6 [json_name = "augment"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetHealthForTestsRequest, _impl_.augment_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.augment_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string ids = 1 [json_name = "ids"];
    {PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime"];
    {PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.start_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end_time = 3 [json_name = "endTime"];
    {PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.end_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string agent_ids = 4 [json_name = "agentIds"];
    {PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.agent_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string task_ids = 5 [json_name = "taskIds"];
    {PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.task_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // bool augment = 6 [json_name = "augment"];
    {PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.augment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\67\3\0\0\11\10\0\0"
    "kentik.synthetics.v202101beta1.GetHealthForTestsRequest"
    "ids"
    "agent_ids"
    "task_ids"
  }},
};

PROTOBUF_NOINLINE void GetHealthForTestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ids_.Clear();
  _impl_.agent_ids_.Clear();
  _impl_.task_ids_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
  }
  _impl_.augment_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetHealthForTestsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetHealthForTestsRequest& this_ = static_cast<const GetHealthForTestsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetHealthForTestsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetHealthForTestsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string ids = 1 [json_name = "ids"];
          for (int i = 0, n = this_._internal_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids");
            target = stream->WriteString(1, s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.start_time_, this_._impl_.start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp end_time = 3 [json_name = "endTime"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.end_time_, this_._impl_.end_time_->GetCachedSize(), target,
                stream);
          }

          // repeated string agent_ids = 4 [json_name = "agentIds"];
          for (int i = 0, n = this_._internal_agent_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_agent_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids");
            target = stream->WriteString(4, s, target);
          }

          // repeated string task_ids = 5 [json_name = "taskIds"];
          for (int i = 0, n = this_._internal_task_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_task_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids");
            target = stream->WriteString(5, s, target);
          }

          // bool augment = 6 [json_name = "augment"];
          if (this_._internal_augment() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_augment(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetHealthForTestsRequest::ByteSizeLong(const MessageLite& base) {
          const GetHealthForTestsRequest& this_ = static_cast<const GetHealthForTestsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetHealthForTestsRequest::ByteSizeLong() const {
          const GetHealthForTestsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string ids = 1 [json_name = "ids"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_ids().size());
              for (int i = 0, n = this_._internal_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_ids().Get(i));
              }
            }
            // repeated string agent_ids = 4 [json_name = "agentIds"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_agent_ids().size());
              for (int i = 0, n = this_._internal_agent_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_agent_ids().Get(i));
              }
            }
            // repeated string task_ids = 5 [json_name = "taskIds"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_task_ids().size());
              for (int i = 0, n = this_._internal_task_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_task_ids().Get(i));
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_time_);
            }
            // .google.protobuf.Timestamp end_time = 3 [json_name = "endTime"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_time_);
            }
          }
           {
            // bool augment = 6 [json_name = "augment"];
            if (this_._internal_augment() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetHealthForTestsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetHealthForTestsRequest*>(&to_msg);
  auto& from = static_cast<const GetHealthForTestsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ids()->MergeFrom(from._internal_ids());
  _this->_internal_mutable_agent_ids()->MergeFrom(from._internal_agent_ids());
  _this->_internal_mutable_task_ids()->MergeFrom(from._internal_task_ids());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.start_time_ != nullptr);
      if (_this->_impl_.start_time_ == nullptr) {
        _this->_impl_.start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.start_time_);
      } else {
        _this->_impl_.start_time_->MergeFrom(*from._impl_.start_time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.end_time_ != nullptr);
      if (_this->_impl_.end_time_ == nullptr) {
        _this->_impl_.end_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.end_time_);
      } else {
        _this->_impl_.end_time_->MergeFrom(*from._impl_.end_time_);
      }
    }
  }
  if (from._internal_augment() != 0) {
    _this->_impl_.augment_ = from._impl_.augment_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHealthForTestsRequest::CopyFrom(const GetHealthForTestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetHealthForTestsRequest::InternalSwap(GetHealthForTestsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ids_.InternalSwap(&other->_impl_.ids_);
  _impl_.agent_ids_.InternalSwap(&other->_impl_.agent_ids_);
  _impl_.task_ids_.InternalSwap(&other->_impl_.task_ids_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.augment_)
      + sizeof(GetHealthForTestsRequest::_impl_.augment_)
      - PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata GetHealthForTestsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetHealthForTestsResponse::_Internal {
 public:
};

GetHealthForTestsResponse::GetHealthForTestsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHealthForTestsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GetHealthForTestsResponse& from_msg)
      : health_{visibility, arena, from.health_},
        _cached_size_{0} {}

GetHealthForTestsResponse::GetHealthForTestsResponse(
    ::google::protobuf::Arena* arena,
    const GetHealthForTestsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetHealthForTestsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetHealthForTestsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : health_{visibility, arena},
        _cached_size_{0} {}

inline void GetHealthForTestsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetHealthForTestsResponse::~GetHealthForTestsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  SharedDtor(*this);
}
inline void GetHealthForTestsResponse::SharedDtor(MessageLite& self) {
  GetHealthForTestsResponse& this_ = static_cast<GetHealthForTestsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetHealthForTestsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetHealthForTestsResponse(arena);
}
constexpr auto GetHealthForTestsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetHealthForTestsResponse, _impl_.health_) +
          decltype(GetHealthForTestsResponse::_impl_.health_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetHealthForTestsResponse), alignof(GetHealthForTestsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetHealthForTestsResponse::PlacementNew_,
                                 sizeof(GetHealthForTestsResponse),
                                 alignof(GetHealthForTestsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetHealthForTestsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetHealthForTestsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetHealthForTestsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetHealthForTestsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetHealthForTestsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetHealthForTestsResponse>(), &GetHealthForTestsResponse::ByteSizeLong,
            &GetHealthForTestsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetHealthForTestsResponse, _impl_._cached_size_),
        false,
    },
    &GetHealthForTestsResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetHealthForTestsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetHealthForTestsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GetHealthForTestsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .kentik.synthetics.v202101beta1.TestHealth health = 1 [json_name = "health"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetHealthForTestsResponse, _impl_.health_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .kentik.synthetics.v202101beta1.TestHealth health = 1 [json_name = "health"];
    {PROTOBUF_FIELD_OFFSET(GetHealthForTestsResponse, _impl_.health_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TestHealth>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetHealthForTestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.health_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetHealthForTestsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetHealthForTestsResponse& this_ = static_cast<const GetHealthForTestsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetHealthForTestsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetHealthForTestsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .kentik.synthetics.v202101beta1.TestHealth health = 1 [json_name = "health"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_health_size());
               i < n; i++) {
            const auto& repfield = this_._internal_health().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetHealthForTestsResponse::ByteSizeLong(const MessageLite& base) {
          const GetHealthForTestsResponse& this_ = static_cast<const GetHealthForTestsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetHealthForTestsResponse::ByteSizeLong() const {
          const GetHealthForTestsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.TestHealth health = 1 [json_name = "health"];
            {
              total_size += 1UL * this_._internal_health_size();
              for (const auto& msg : this_._internal_health()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetHealthForTestsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetHealthForTestsResponse*>(&to_msg);
  auto& from = static_cast<const GetHealthForTestsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_health()->MergeFrom(
      from._internal_health());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetHealthForTestsResponse::CopyFrom(const GetHealthForTestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetHealthForTestsResponse::InternalSwap(GetHealthForTestsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.health_.InternalSwap(&other->_impl_.health_);
}

::google::protobuf::Metadata GetHealthForTestsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetTraceForTestRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetTraceForTestRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_._has_bits_);
};

void GetTraceForTestRequest::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetTraceForTestRequest::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetTraceForTestRequest::GetTraceForTestRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTraceForTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GetTraceForTestRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        agent_ids_{visibility, arena, from.agent_ids_},
        target_ips_{visibility, arena, from.target_ips_},
        id_(arena, from.id_) {}

GetTraceForTestRequest::GetTraceForTestRequest(
    ::google::protobuf::Arena* arena,
    const GetTraceForTestRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetTraceForTestRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.start_time_)
                        : nullptr;
  _impl_.end_time_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.end_time_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTraceForTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        agent_ids_{visibility, arena},
        target_ips_{visibility, arena},
        id_(arena) {}

inline void GetTraceForTestRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_time_),
           0,
           offsetof(Impl_, end_time_) -
               offsetof(Impl_, start_time_) +
               sizeof(Impl_::end_time_));
}
GetTraceForTestRequest::~GetTraceForTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  SharedDtor(*this);
}
inline void GetTraceForTestRequest::SharedDtor(MessageLite& self) {
  GetTraceForTestRequest& this_ = static_cast<GetTraceForTestRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  delete this_._impl_.start_time_;
  delete this_._impl_.end_time_;
  this_._impl_.~Impl_();
}

inline void* GetTraceForTestRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetTraceForTestRequest(arena);
}
constexpr auto GetTraceForTestRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.agent_ids_) +
          decltype(GetTraceForTestRequest::_impl_.agent_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.target_ips_) +
          decltype(GetTraceForTestRequest::_impl_.target_ips_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(GetTraceForTestRequest), alignof(GetTraceForTestRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetTraceForTestRequest::PlacementNew_,
                                 sizeof(GetTraceForTestRequest),
                                 alignof(GetTraceForTestRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetTraceForTestRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetTraceForTestRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetTraceForTestRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetTraceForTestRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetTraceForTestRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetTraceForTestRequest>(), &GetTraceForTestRequest::ByteSizeLong,
            &GetTraceForTestRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_._cached_size_),
        false,
    },
    &GetTraceForTestRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetTraceForTestRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 83, 2> GetTraceForTestRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GetTraceForTestRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.id_)}},
    // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime"];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.start_time_)}},
    // .google.protobuf.Timestamp end_time = 3 [json_name = "endTime"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.end_time_)}},
    // repeated string agent_ids = 4 [json_name = "agentIds"];
    {::_pbi::TcParser::FastUR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.agent_ids_)}},
    // repeated string target_ips = 5 [json_name = "targetIps"];
    {::_pbi::TcParser::FastUR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.target_ips_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime"];
    {PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.start_time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end_time = 3 [json_name = "endTime"];
    {PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.end_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string agent_ids = 4 [json_name = "agentIds"];
    {PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.agent_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // repeated string target_ips = 5 [json_name = "targetIps"];
    {PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.target_ips_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\65\2\0\0\11\12\0\0"
    "kentik.synthetics.v202101beta1.GetTraceForTestRequest"
    "id"
    "agent_ids"
    "target_ips"
  }},
};

PROTOBUF_NOINLINE void GetTraceForTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agent_ids_.Clear();
  _impl_.target_ips_.Clear();
  _impl_.id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetTraceForTestRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetTraceForTestRequest& this_ = static_cast<const GetTraceForTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetTraceForTestRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetTraceForTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GetTraceForTestRequest.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.start_time_, this_._impl_.start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp end_time = 3 [json_name = "endTime"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.end_time_, this_._impl_.end_time_->GetCachedSize(), target,
                stream);
          }

          // repeated string agent_ids = 4 [json_name = "agentIds"];
          for (int i = 0, n = this_._internal_agent_ids_size(); i < n; ++i) {
            const auto& s = this_._internal_agent_ids().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids");
            target = stream->WriteString(4, s, target);
          }

          // repeated string target_ips = 5 [json_name = "targetIps"];
          for (int i = 0, n = this_._internal_target_ips_size(); i < n; ++i) {
            const auto& s = this_._internal_target_ips().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips");
            target = stream->WriteString(5, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetTraceForTestRequest::ByteSizeLong(const MessageLite& base) {
          const GetTraceForTestRequest& this_ = static_cast<const GetTraceForTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetTraceForTestRequest::ByteSizeLong() const {
          const GetTraceForTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string agent_ids = 4 [json_name = "agentIds"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_agent_ids().size());
              for (int i = 0, n = this_._internal_agent_ids().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_agent_ids().Get(i));
              }
            }
            // repeated string target_ips = 5 [json_name = "targetIps"];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_target_ips().size());
              for (int i = 0, n = this_._internal_target_ips().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_target_ips().Get(i));
              }
            }
          }
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp start_time = 2 [json_name = "startTime"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_time_);
            }
            // .google.protobuf.Timestamp end_time = 3 [json_name = "endTime"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_time_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetTraceForTestRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetTraceForTestRequest*>(&to_msg);
  auto& from = static_cast<const GetTraceForTestRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_agent_ids()->MergeFrom(from._internal_agent_ids());
  _this->_internal_mutable_target_ips()->MergeFrom(from._internal_target_ips());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.start_time_ != nullptr);
      if (_this->_impl_.start_time_ == nullptr) {
        _this->_impl_.start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.start_time_);
      } else {
        _this->_impl_.start_time_->MergeFrom(*from._impl_.start_time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.end_time_ != nullptr);
      if (_this->_impl_.end_time_ == nullptr) {
        _this->_impl_.end_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.end_time_);
      } else {
        _this->_impl_.end_time_->MergeFrom(*from._impl_.end_time_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTraceForTestRequest::CopyFrom(const GetTraceForTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetTraceForTestRequest::InternalSwap(GetTraceForTestRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.agent_ids_.InternalSwap(&other->_impl_.agent_ids_);
  _impl_.target_ips_.InternalSwap(&other->_impl_.target_ips_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.end_time_)
      + sizeof(GetTraceForTestRequest::_impl_.end_time_)
      - PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

::google::protobuf::Metadata GetTraceForTestRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetTraceForTestResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetTraceForTestResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_._has_bits_);
};

GetTraceForTestResponse::GetTraceForTestResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTraceForTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GetTraceForTestResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        trace_routes_{visibility, arena, from.trace_routes_} {}

GetTraceForTestResponse::GetTraceForTestResponse(
    ::google::protobuf::Arena* arena,
    const GetTraceForTestResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetTraceForTestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.lookups_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TracerouteLookup>(
                              arena, *from._impl_.lookups_)
                        : nullptr;
  _impl_.trace_routes_info_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TracerouteInfo>(
                              arena, *from._impl_.trace_routes_info_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTraceForTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        trace_routes_{visibility, arena} {}

inline void GetTraceForTestResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lookups_),
           0,
           offsetof(Impl_, trace_routes_info_) -
               offsetof(Impl_, lookups_) +
               sizeof(Impl_::trace_routes_info_));
}
GetTraceForTestResponse::~GetTraceForTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  SharedDtor(*this);
}
inline void GetTraceForTestResponse::SharedDtor(MessageLite& self) {
  GetTraceForTestResponse& this_ = static_cast<GetTraceForTestResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.lookups_;
  delete this_._impl_.trace_routes_info_;
  this_._impl_.~Impl_();
}

inline void* GetTraceForTestResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetTraceForTestResponse(arena);
}
constexpr auto GetTraceForTestResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.trace_routes_) +
          decltype(GetTraceForTestResponse::_impl_.trace_routes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetTraceForTestResponse), alignof(GetTraceForTestResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetTraceForTestResponse::PlacementNew_,
                                 sizeof(GetTraceForTestResponse),
                                 alignof(GetTraceForTestResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetTraceForTestResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetTraceForTestResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetTraceForTestResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetTraceForTestResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetTraceForTestResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetTraceForTestResponse>(), &GetTraceForTestResponse::ByteSizeLong,
            &GetTraceForTestResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_._cached_size_),
        false,
    },
    &GetTraceForTestResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetTraceForTestResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2> GetTraceForTestResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GetTraceForTestResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1 [json_name = "lookups"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.lookups_)}},
    // repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2 [json_name = "traceRoutes"];
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.trace_routes_)}},
    // .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3 [json_name = "traceRoutesInfo"];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 2, PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.trace_routes_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1 [json_name = "lookups"];
    {PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.lookups_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2 [json_name = "traceRoutes"];
    {PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.trace_routes_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3 [json_name = "traceRoutesInfo"];
    {PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.trace_routes_info_), _Internal::kHasBitsOffset + 1, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TracerouteLookup>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TracerouteResult>()},
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::TracerouteInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetTraceForTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trace_routes_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.lookups_ != nullptr);
      _impl_.lookups_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.trace_routes_info_ != nullptr);
      _impl_.trace_routes_info_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetTraceForTestResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetTraceForTestResponse& this_ = static_cast<const GetTraceForTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetTraceForTestResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetTraceForTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1 [json_name = "lookups"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.lookups_, this_._impl_.lookups_->GetCachedSize(), target,
                stream);
          }

          // repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2 [json_name = "traceRoutes"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_trace_routes_size());
               i < n; i++) {
            const auto& repfield = this_._internal_trace_routes().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3 [json_name = "traceRoutesInfo"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.trace_routes_info_, this_._impl_.trace_routes_info_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetTraceForTestResponse::ByteSizeLong(const MessageLite& base) {
          const GetTraceForTestResponse& this_ = static_cast<const GetTraceForTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetTraceForTestResponse::ByteSizeLong() const {
          const GetTraceForTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2 [json_name = "traceRoutes"];
            {
              total_size += 1UL * this_._internal_trace_routes_size();
              for (const auto& msg : this_._internal_trace_routes()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1 [json_name = "lookups"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.lookups_);
            }
            // .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3 [json_name = "traceRoutesInfo"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.trace_routes_info_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetTraceForTestResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetTraceForTestResponse*>(&to_msg);
  auto& from = static_cast<const GetTraceForTestResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_trace_routes()->MergeFrom(
      from._internal_trace_routes());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.lookups_ != nullptr);
      if (_this->_impl_.lookups_ == nullptr) {
        _this->_impl_.lookups_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TracerouteLookup>(arena, *from._impl_.lookups_);
      } else {
        _this->_impl_.lookups_->MergeFrom(*from._impl_.lookups_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.trace_routes_info_ != nullptr);
      if (_this->_impl_.trace_routes_info_ == nullptr) {
        _this->_impl_.trace_routes_info_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::TracerouteInfo>(arena, *from._impl_.trace_routes_info_);
      } else {
        _this->_impl_.trace_routes_info_->MergeFrom(*from._impl_.trace_routes_info_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTraceForTestResponse::CopyFrom(const GetTraceForTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetTraceForTestResponse::InternalSwap(GetTraceForTestResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.trace_routes_.InternalSwap(&other->_impl_.trace_routes_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.trace_routes_info_)
      + sizeof(GetTraceForTestResponse::_impl_.trace_routes_info_)
      - PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, _impl_.lookups_)>(
          reinterpret_cast<char*>(&_impl_.lookups_),
          reinterpret_cast<char*>(&other->_impl_.lookups_));
}

::google::protobuf::Metadata GetTraceForTestResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ListAgentsRequest::_Internal {
 public:
};

ListAgentsRequest::ListAgentsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ListAgentsRequest)
}
ListAgentsRequest::ListAgentsRequest(
    ::google::protobuf::Arena* arena,
    const ListAgentsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ListAgentsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ListAgentsRequest)
}

inline void* ListAgentsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ListAgentsRequest(arena);
}
constexpr auto ListAgentsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ListAgentsRequest),
                                            alignof(ListAgentsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ListAgentsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ListAgentsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ListAgentsRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<ListAgentsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ListAgentsRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<ListAgentsRequest>(), &ListAgentsRequest::ByteSizeLong,
            &ListAgentsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ListAgentsRequest, _impl_._cached_size_),
        false,
    },
    &ListAgentsRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ListAgentsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> ListAgentsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ListAgentsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata ListAgentsRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ListAgentsResponse::_Internal {
 public:
};

ListAgentsResponse::ListAgentsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ListAgentsResponse)
}
inline PROTOBUF_NDEBUG_INLINE ListAgentsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::ListAgentsResponse& from_msg)
      : agents_{visibility, arena, from.agents_},
        _cached_size_{0} {}

ListAgentsResponse::ListAgentsResponse(
    ::google::protobuf::Arena* arena,
    const ListAgentsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ListAgentsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.invalid_agents_count_ = from._impl_.invalid_agents_count_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ListAgentsResponse)
}
inline PROTOBUF_NDEBUG_INLINE ListAgentsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : agents_{visibility, arena},
        _cached_size_{0} {}

inline void ListAgentsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.invalid_agents_count_ = {};
}
ListAgentsResponse::~ListAgentsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ListAgentsResponse)
  SharedDtor(*this);
}
inline void ListAgentsResponse::SharedDtor(MessageLite& self) {
  ListAgentsResponse& this_ = static_cast<ListAgentsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ListAgentsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ListAgentsResponse(arena);
}
constexpr auto ListAgentsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ListAgentsResponse, _impl_.agents_) +
          decltype(ListAgentsResponse::_impl_.agents_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ListAgentsResponse), alignof(ListAgentsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ListAgentsResponse::PlacementNew_,
                                 sizeof(ListAgentsResponse),
                                 alignof(ListAgentsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ListAgentsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ListAgentsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ListAgentsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ListAgentsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ListAgentsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ListAgentsResponse>(), &ListAgentsResponse::ByteSizeLong,
            &ListAgentsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ListAgentsResponse, _impl_._cached_size_),
        false,
    },
    &ListAgentsResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ListAgentsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ListAgentsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ListAgentsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 invalid_agents_count = 2 [json_name = "invalidAgentsCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ListAgentsResponse, _impl_.invalid_agents_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ListAgentsResponse, _impl_.invalid_agents_count_)}},
    // repeated .kentik.synthetics.v202101beta1.Agent agents = 1 [json_name = "agents"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ListAgentsResponse, _impl_.agents_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .kentik.synthetics.v202101beta1.Agent agents = 1 [json_name = "agents"];
    {PROTOBUF_FIELD_OFFSET(ListAgentsResponse, _impl_.agents_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 invalid_agents_count = 2 [json_name = "invalidAgentsCount"];
    {PROTOBUF_FIELD_OFFSET(ListAgentsResponse, _impl_.invalid_agents_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Agent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ListAgentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agents_.Clear();
  _impl_.invalid_agents_count_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ListAgentsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ListAgentsResponse& this_ = static_cast<const ListAgentsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ListAgentsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ListAgentsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .kentik.synthetics.v202101beta1.Agent agents = 1 [json_name = "agents"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_agents_size());
               i < n; i++) {
            const auto& repfield = this_._internal_agents().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 invalid_agents_count = 2 [json_name = "invalidAgentsCount"];
          if (this_._internal_invalid_agents_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_invalid_agents_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ListAgentsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ListAgentsResponse::ByteSizeLong(const MessageLite& base) {
          const ListAgentsResponse& this_ = static_cast<const ListAgentsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ListAgentsResponse::ByteSizeLong() const {
          const ListAgentsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.Agent agents = 1 [json_name = "agents"];
            {
              total_size += 1UL * this_._internal_agents_size();
              for (const auto& msg : this_._internal_agents()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // uint32 invalid_agents_count = 2 [json_name = "invalidAgentsCount"];
            if (this_._internal_invalid_agents_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_invalid_agents_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ListAgentsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ListAgentsResponse*>(&to_msg);
  auto& from = static_cast<const ListAgentsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_agents()->MergeFrom(
      from._internal_agents());
  if (from._internal_invalid_agents_count() != 0) {
    _this->_impl_.invalid_agents_count_ = from._impl_.invalid_agents_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ListAgentsResponse::CopyFrom(const ListAgentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ListAgentsResponse::InternalSwap(ListAgentsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.agents_.InternalSwap(&other->_impl_.agents_);
        swap(_impl_.invalid_agents_count_, other->_impl_.invalid_agents_count_);
}

::google::protobuf::Metadata ListAgentsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAgentRequest::_Internal {
 public:
};

GetAgentRequest::GetAgentRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetAgentRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAgentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GetAgentRequest& from_msg)
      : id_(arena, from.id_),
        _cached_size_{0} {}

GetAgentRequest::GetAgentRequest(
    ::google::protobuf::Arena* arena,
    const GetAgentRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAgentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetAgentRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAgentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void GetAgentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAgentRequest::~GetAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetAgentRequest)
  SharedDtor(*this);
}
inline void GetAgentRequest::SharedDtor(MessageLite& self) {
  GetAgentRequest& this_ = static_cast<GetAgentRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* GetAgentRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAgentRequest(arena);
}
constexpr auto GetAgentRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetAgentRequest),
                                            alignof(GetAgentRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAgentRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAgentRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAgentRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAgentRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAgentRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAgentRequest>(), &GetAgentRequest::ByteSizeLong,
            &GetAgentRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAgentRequest, _impl_._cached_size_),
        false,
    },
    &GetAgentRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAgentRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 57, 2> GetAgentRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GetAgentRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAgentRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(GetAgentRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\56\2\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.GetAgentRequest"
    "id"
  }},
};

PROTOBUF_NOINLINE void GetAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAgentRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAgentRequest& this_ = static_cast<const GetAgentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAgentRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAgentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetAgentRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GetAgentRequest.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetAgentRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAgentRequest::ByteSizeLong(const MessageLite& base) {
          const GetAgentRequest& this_ = static_cast<const GetAgentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAgentRequest::ByteSizeLong() const {
          const GetAgentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetAgentRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAgentRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAgentRequest*>(&to_msg);
  auto& from = static_cast<const GetAgentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAgentRequest::CopyFrom(const GetAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAgentRequest::InternalSwap(GetAgentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
}

::google::protobuf::Metadata GetAgentRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAgentResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetAgentResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetAgentResponse, _impl_._has_bits_);
};

GetAgentResponse::GetAgentResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetAgentResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAgentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GetAgentResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetAgentResponse::GetAgentResponse(
    ::google::protobuf::Arena* arena,
    const GetAgentResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAgentResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.agent_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(
                              arena, *from._impl_.agent_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetAgentResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAgentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetAgentResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.agent_ = {};
}
GetAgentResponse::~GetAgentResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetAgentResponse)
  SharedDtor(*this);
}
inline void GetAgentResponse::SharedDtor(MessageLite& self) {
  GetAgentResponse& this_ = static_cast<GetAgentResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.agent_;
  this_._impl_.~Impl_();
}

inline void* GetAgentResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAgentResponse(arena);
}
constexpr auto GetAgentResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetAgentResponse),
                                            alignof(GetAgentResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAgentResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAgentResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAgentResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAgentResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAgentResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAgentResponse>(), &GetAgentResponse::ByteSizeLong,
            &GetAgentResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAgentResponse, _impl_._cached_size_),
        false,
    },
    &GetAgentResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAgentResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetAgentResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAgentResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GetAgentResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetAgentResponse, _impl_.agent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
    {PROTOBUF_FIELD_OFFSET(GetAgentResponse, _impl_.agent_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Agent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetAgentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.agent_ != nullptr);
    _impl_.agent_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAgentResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAgentResponse& this_ = static_cast<const GetAgentResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAgentResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAgentResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetAgentResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.agent_, this_._impl_.agent_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetAgentResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAgentResponse::ByteSizeLong(const MessageLite& base) {
          const GetAgentResponse& this_ = static_cast<const GetAgentResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAgentResponse::ByteSizeLong() const {
          const GetAgentResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetAgentResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.agent_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAgentResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAgentResponse*>(&to_msg);
  auto& from = static_cast<const GetAgentResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.agent_ != nullptr);
    if (_this->_impl_.agent_ == nullptr) {
      _this->_impl_.agent_ =
          ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(arena, *from._impl_.agent_);
    } else {
      _this->_impl_.agent_->MergeFrom(*from._impl_.agent_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAgentResponse::CopyFrom(const GetAgentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAgentResponse::InternalSwap(GetAgentResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.agent_, other->_impl_.agent_);
}

::google::protobuf::Metadata GetAgentResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PatchAgentRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PatchAgentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_._has_bits_);
};

void PatchAgentRequest::clear_mask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mask_ != nullptr) _impl_.mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PatchAgentRequest::PatchAgentRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PatchAgentRequest)
}
inline PROTOBUF_NDEBUG_INLINE PatchAgentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::PatchAgentRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PatchAgentRequest::PatchAgentRequest(
    ::google::protobuf::Arena* arena,
    const PatchAgentRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PatchAgentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.agent_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(
                              arena, *from._impl_.agent_)
                        : nullptr;
  _impl_.mask_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::FieldMask>(
                              arena, *from._impl_.mask_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PatchAgentRequest)
}
inline PROTOBUF_NDEBUG_INLINE PatchAgentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PatchAgentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, agent_),
           0,
           offsetof(Impl_, mask_) -
               offsetof(Impl_, agent_) +
               sizeof(Impl_::mask_));
}
PatchAgentRequest::~PatchAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PatchAgentRequest)
  SharedDtor(*this);
}
inline void PatchAgentRequest::SharedDtor(MessageLite& self) {
  PatchAgentRequest& this_ = static_cast<PatchAgentRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.agent_;
  delete this_._impl_.mask_;
  this_._impl_.~Impl_();
}

inline void* PatchAgentRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PatchAgentRequest(arena);
}
constexpr auto PatchAgentRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PatchAgentRequest),
                                            alignof(PatchAgentRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PatchAgentRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PatchAgentRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PatchAgentRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PatchAgentRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PatchAgentRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PatchAgentRequest>(), &PatchAgentRequest::ByteSizeLong,
            &PatchAgentRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_._cached_size_),
        false,
    },
    &PatchAgentRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PatchAgentRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PatchAgentRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::PatchAgentRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.FieldMask mask = 2 [json_name = "mask"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_.mask_)}},
    // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_.agent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
    {PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_.agent_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.FieldMask mask = 2 [json_name = "mask"];
    {PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_.mask_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Agent>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::FieldMask>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PatchAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.agent_ != nullptr);
      _impl_.agent_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mask_ != nullptr);
      _impl_.mask_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PatchAgentRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PatchAgentRequest& this_ = static_cast<const PatchAgentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PatchAgentRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PatchAgentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.agent_, this_._impl_.agent_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.FieldMask mask = 2 [json_name = "mask"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.mask_, this_._impl_.mask_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PatchAgentRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PatchAgentRequest::ByteSizeLong(const MessageLite& base) {
          const PatchAgentRequest& this_ = static_cast<const PatchAgentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PatchAgentRequest::ByteSizeLong() const {
          const PatchAgentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.agent_);
            }
            // .google.protobuf.FieldMask mask = 2 [json_name = "mask"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mask_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PatchAgentRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PatchAgentRequest*>(&to_msg);
  auto& from = static_cast<const PatchAgentRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.agent_ != nullptr);
      if (_this->_impl_.agent_ == nullptr) {
        _this->_impl_.agent_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(arena, *from._impl_.agent_);
      } else {
        _this->_impl_.agent_->MergeFrom(*from._impl_.agent_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.mask_ != nullptr);
      if (_this->_impl_.mask_ == nullptr) {
        _this->_impl_.mask_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::FieldMask>(arena, *from._impl_.mask_);
      } else {
        _this->_impl_.mask_->MergeFrom(*from._impl_.mask_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAgentRequest::CopyFrom(const PatchAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PatchAgentRequest::InternalSwap(PatchAgentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_.mask_)
      + sizeof(PatchAgentRequest::_impl_.mask_)
      - PROTOBUF_FIELD_OFFSET(PatchAgentRequest, _impl_.agent_)>(
          reinterpret_cast<char*>(&_impl_.agent_),
          reinterpret_cast<char*>(&other->_impl_.agent_));
}

::google::protobuf::Metadata PatchAgentRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PatchAgentResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PatchAgentResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PatchAgentResponse, _impl_._has_bits_);
};

PatchAgentResponse::PatchAgentResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PatchAgentResponse)
}
inline PROTOBUF_NDEBUG_INLINE PatchAgentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::PatchAgentResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PatchAgentResponse::PatchAgentResponse(
    ::google::protobuf::Arena* arena,
    const PatchAgentResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PatchAgentResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.agent_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(
                              arena, *from._impl_.agent_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PatchAgentResponse)
}
inline PROTOBUF_NDEBUG_INLINE PatchAgentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PatchAgentResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.agent_ = {};
}
PatchAgentResponse::~PatchAgentResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PatchAgentResponse)
  SharedDtor(*this);
}
inline void PatchAgentResponse::SharedDtor(MessageLite& self) {
  PatchAgentResponse& this_ = static_cast<PatchAgentResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.agent_;
  this_._impl_.~Impl_();
}

inline void* PatchAgentResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PatchAgentResponse(arena);
}
constexpr auto PatchAgentResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PatchAgentResponse),
                                            alignof(PatchAgentResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PatchAgentResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PatchAgentResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PatchAgentResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PatchAgentResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PatchAgentResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PatchAgentResponse>(), &PatchAgentResponse::ByteSizeLong,
            &PatchAgentResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PatchAgentResponse, _impl_._cached_size_),
        false,
    },
    &PatchAgentResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PatchAgentResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PatchAgentResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PatchAgentResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::PatchAgentResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PatchAgentResponse, _impl_.agent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
    {PROTOBUF_FIELD_OFFSET(PatchAgentResponse, _impl_.agent_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Agent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PatchAgentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.agent_ != nullptr);
    _impl_.agent_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PatchAgentResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PatchAgentResponse& this_ = static_cast<const PatchAgentResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PatchAgentResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PatchAgentResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.agent_, this_._impl_.agent_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PatchAgentResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PatchAgentResponse::ByteSizeLong(const MessageLite& base) {
          const PatchAgentResponse& this_ = static_cast<const PatchAgentResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PatchAgentResponse::ByteSizeLong() const {
          const PatchAgentResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .kentik.synthetics.v202101beta1.Agent agent = 1 [json_name = "agent"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.agent_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PatchAgentResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PatchAgentResponse*>(&to_msg);
  auto& from = static_cast<const PatchAgentResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.agent_ != nullptr);
    if (_this->_impl_.agent_ == nullptr) {
      _this->_impl_.agent_ =
          ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Agent>(arena, *from._impl_.agent_);
    } else {
      _this->_impl_.agent_->MergeFrom(*from._impl_.agent_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PatchAgentResponse::CopyFrom(const PatchAgentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PatchAgentResponse::InternalSwap(PatchAgentResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.agent_, other->_impl_.agent_);
}

::google::protobuf::Metadata PatchAgentResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeleteAgentRequest::_Internal {
 public:
};

DeleteAgentRequest::DeleteAgentRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DeleteAgentRequest)
}
inline PROTOBUF_NDEBUG_INLINE DeleteAgentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::DeleteAgentRequest& from_msg)
      : id_(arena, from.id_),
        _cached_size_{0} {}

DeleteAgentRequest::DeleteAgentRequest(
    ::google::protobuf::Arena* arena,
    const DeleteAgentRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeleteAgentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DeleteAgentRequest)
}
inline PROTOBUF_NDEBUG_INLINE DeleteAgentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void DeleteAgentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DeleteAgentRequest::~DeleteAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  SharedDtor(*this);
}
inline void DeleteAgentRequest::SharedDtor(MessageLite& self) {
  DeleteAgentRequest& this_ = static_cast<DeleteAgentRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DeleteAgentRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DeleteAgentRequest(arena);
}
constexpr auto DeleteAgentRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DeleteAgentRequest),
                                            alignof(DeleteAgentRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DeleteAgentRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DeleteAgentRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DeleteAgentRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DeleteAgentRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DeleteAgentRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DeleteAgentRequest>(), &DeleteAgentRequest::ByteSizeLong,
            &DeleteAgentRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DeleteAgentRequest, _impl_._cached_size_),
        false,
    },
    &DeleteAgentRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DeleteAgentRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 60, 2> DeleteAgentRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DeleteAgentRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DeleteAgentRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(DeleteAgentRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\61\2\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.DeleteAgentRequest"
    "id"
  }},
};

PROTOBUF_NOINLINE void DeleteAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DeleteAgentRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DeleteAgentRequest& this_ = static_cast<const DeleteAgentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DeleteAgentRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DeleteAgentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.DeleteAgentRequest.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DeleteAgentRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DeleteAgentRequest::ByteSizeLong(const MessageLite& base) {
          const DeleteAgentRequest& this_ = static_cast<const DeleteAgentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DeleteAgentRequest::ByteSizeLong() const {
          const DeleteAgentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DeleteAgentRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeleteAgentRequest*>(&to_msg);
  auto& from = static_cast<const DeleteAgentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteAgentRequest::CopyFrom(const DeleteAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeleteAgentRequest::InternalSwap(DeleteAgentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
}

::google::protobuf::Metadata DeleteAgentRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeleteAgentResponse::_Internal {
 public:
};

DeleteAgentResponse::DeleteAgentResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DeleteAgentResponse)
}
DeleteAgentResponse::DeleteAgentResponse(
    ::google::protobuf::Arena* arena,
    const DeleteAgentResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeleteAgentResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DeleteAgentResponse)
}

inline void* DeleteAgentResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DeleteAgentResponse(arena);
}
constexpr auto DeleteAgentResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DeleteAgentResponse),
                                            alignof(DeleteAgentResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DeleteAgentResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DeleteAgentResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DeleteAgentResponse::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DeleteAgentResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DeleteAgentResponse::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DeleteAgentResponse>(), &DeleteAgentResponse::ByteSizeLong,
            &DeleteAgentResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DeleteAgentResponse, _impl_._cached_size_),
        false,
    },
    &DeleteAgentResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DeleteAgentResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> DeleteAgentResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DeleteAgentResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata DeleteAgentResponse::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ListTestsRequest::_Internal {
 public:
};

ListTestsRequest::ListTestsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ListTestsRequest)
}
ListTestsRequest::ListTestsRequest(
    ::google::protobuf::Arena* arena, const ListTestsRequest& from)
    : ListTestsRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE ListTestsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ListTestsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.preset_ = {};
}
ListTestsRequest::~ListTestsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ListTestsRequest)
  SharedDtor(*this);
}
inline void ListTestsRequest::SharedDtor(MessageLite& self) {
  ListTestsRequest& this_ = static_cast<ListTestsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ListTestsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ListTestsRequest(arena);
}
constexpr auto ListTestsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ListTestsRequest),
                                            alignof(ListTestsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ListTestsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ListTestsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ListTestsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ListTestsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ListTestsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ListTestsRequest>(), &ListTestsRequest::ByteSizeLong,
            &ListTestsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ListTestsRequest, _impl_._cached_size_),
        false,
    },
    &ListTestsRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ListTestsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> ListTestsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ListTestsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool preset = 1 [json_name = "preset"];
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(ListTestsRequest, _impl_.preset_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(ListTestsRequest, _impl_.preset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool preset = 1 [json_name = "preset"];
    {PROTOBUF_FIELD_OFFSET(ListTestsRequest, _impl_.preset_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void ListTestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.preset_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ListTestsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ListTestsRequest& this_ = static_cast<const ListTestsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ListTestsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ListTestsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ListTestsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool preset = 1 [json_name = "preset"];
          if (this_._internal_preset() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_preset(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ListTestsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ListTestsRequest::ByteSizeLong(const MessageLite& base) {
          const ListTestsRequest& this_ = static_cast<const ListTestsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ListTestsRequest::ByteSizeLong() const {
          const ListTestsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ListTestsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // bool preset = 1 [json_name = "preset"];
            if (this_._internal_preset() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ListTestsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ListTestsRequest*>(&to_msg);
  auto& from = static_cast<const ListTestsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_preset() != 0) {
    _this->_impl_.preset_ = from._impl_.preset_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ListTestsRequest::CopyFrom(const ListTestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ListTestsRequest::InternalSwap(ListTestsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.preset_, other->_impl_.preset_);
}

::google::protobuf::Metadata ListTestsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ListTestsResponse::_Internal {
 public:
};

ListTestsResponse::ListTestsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ListTestsResponse)
}
inline PROTOBUF_NDEBUG_INLINE ListTestsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::ListTestsResponse& from_msg)
      : tests_{visibility, arena, from.tests_},
        _cached_size_{0} {}

ListTestsResponse::ListTestsResponse(
    ::google::protobuf::Arena* arena,
    const ListTestsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ListTestsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.invalid_tests_count_ = from._impl_.invalid_tests_count_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ListTestsResponse)
}
inline PROTOBUF_NDEBUG_INLINE ListTestsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : tests_{visibility, arena},
        _cached_size_{0} {}

inline void ListTestsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.invalid_tests_count_ = {};
}
ListTestsResponse::~ListTestsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ListTestsResponse)
  SharedDtor(*this);
}
inline void ListTestsResponse::SharedDtor(MessageLite& self) {
  ListTestsResponse& this_ = static_cast<ListTestsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* ListTestsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ListTestsResponse(arena);
}
constexpr auto ListTestsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(ListTestsResponse, _impl_.tests_) +
          decltype(ListTestsResponse::_impl_.tests_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(ListTestsResponse), alignof(ListTestsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&ListTestsResponse::PlacementNew_,
                                 sizeof(ListTestsResponse),
                                 alignof(ListTestsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ListTestsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ListTestsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ListTestsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ListTestsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ListTestsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ListTestsResponse>(), &ListTestsResponse::ByteSizeLong,
            &ListTestsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ListTestsResponse, _impl_._cached_size_),
        false,
    },
    &ListTestsResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ListTestsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> ListTestsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::ListTestsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint32 invalid_tests_count = 2 [json_name = "invalidTestsCount"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ListTestsResponse, _impl_.invalid_tests_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(ListTestsResponse, _impl_.invalid_tests_count_)}},
    // repeated .kentik.synthetics.v202101beta1.Test tests = 1 [json_name = "tests"];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ListTestsResponse, _impl_.tests_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .kentik.synthetics.v202101beta1.Test tests = 1 [json_name = "tests"];
    {PROTOBUF_FIELD_OFFSET(ListTestsResponse, _impl_.tests_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // uint32 invalid_tests_count = 2 [json_name = "invalidTestsCount"];
    {PROTOBUF_FIELD_OFFSET(ListTestsResponse, _impl_.invalid_tests_count_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Test>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ListTestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tests_.Clear();
  _impl_.invalid_tests_count_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ListTestsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ListTestsResponse& this_ = static_cast<const ListTestsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ListTestsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ListTestsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ListTestsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .kentik.synthetics.v202101beta1.Test tests = 1 [json_name = "tests"];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_tests_size());
               i < n; i++) {
            const auto& repfield = this_._internal_tests().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // uint32 invalid_tests_count = 2 [json_name = "invalidTestsCount"];
          if (this_._internal_invalid_tests_count() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                2, this_._internal_invalid_tests_count(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ListTestsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ListTestsResponse::ByteSizeLong(const MessageLite& base) {
          const ListTestsResponse& this_ = static_cast<const ListTestsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ListTestsResponse::ByteSizeLong() const {
          const ListTestsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ListTestsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .kentik.synthetics.v202101beta1.Test tests = 1 [json_name = "tests"];
            {
              total_size += 1UL * this_._internal_tests_size();
              for (const auto& msg : this_._internal_tests()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // uint32 invalid_tests_count = 2 [json_name = "invalidTestsCount"];
            if (this_._internal_invalid_tests_count() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_invalid_tests_count());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ListTestsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ListTestsResponse*>(&to_msg);
  auto& from = static_cast<const ListTestsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_tests()->MergeFrom(
      from._internal_tests());
  if (from._internal_invalid_tests_count() != 0) {
    _this->_impl_.invalid_tests_count_ = from._impl_.invalid_tests_count_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ListTestsResponse::CopyFrom(const ListTestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ListTestsResponse::InternalSwap(ListTestsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tests_.InternalSwap(&other->_impl_.tests_);
        swap(_impl_.invalid_tests_count_, other->_impl_.invalid_tests_count_);
}

::google::protobuf::Metadata ListTestsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateTestRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CreateTestRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CreateTestRequest, _impl_._has_bits_);
};

CreateTestRequest::CreateTestRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.CreateTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE CreateTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::CreateTestRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CreateTestRequest::CreateTestRequest(
    ::google::protobuf::Arena* arena,
    const CreateTestRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CreateTestRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.test_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(
                              arena, *from._impl_.test_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.CreateTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE CreateTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CreateTestRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.test_ = {};
}
CreateTestRequest::~CreateTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.CreateTestRequest)
  SharedDtor(*this);
}
inline void CreateTestRequest::SharedDtor(MessageLite& self) {
  CreateTestRequest& this_ = static_cast<CreateTestRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.test_;
  this_._impl_.~Impl_();
}

inline void* CreateTestRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CreateTestRequest(arena);
}
constexpr auto CreateTestRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CreateTestRequest),
                                            alignof(CreateTestRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CreateTestRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CreateTestRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CreateTestRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CreateTestRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CreateTestRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CreateTestRequest>(), &CreateTestRequest::ByteSizeLong,
            &CreateTestRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CreateTestRequest, _impl_._cached_size_),
        false,
    },
    &CreateTestRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CreateTestRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CreateTestRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CreateTestRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::CreateTestRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CreateTestRequest, _impl_.test_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {PROTOBUF_FIELD_OFFSET(CreateTestRequest, _impl_.test_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Test>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CreateTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.test_ != nullptr);
    _impl_.test_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CreateTestRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CreateTestRequest& this_ = static_cast<const CreateTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CreateTestRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CreateTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.CreateTestRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.test_, this_._impl_.test_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.CreateTestRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CreateTestRequest::ByteSizeLong(const MessageLite& base) {
          const CreateTestRequest& this_ = static_cast<const CreateTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CreateTestRequest::ByteSizeLong() const {
          const CreateTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.CreateTestRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.test_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CreateTestRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CreateTestRequest*>(&to_msg);
  auto& from = static_cast<const CreateTestRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.test_ != nullptr);
    if (_this->_impl_.test_ == nullptr) {
      _this->_impl_.test_ =
          ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(arena, *from._impl_.test_);
    } else {
      _this->_impl_.test_->MergeFrom(*from._impl_.test_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTestRequest::CopyFrom(const CreateTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CreateTestRequest::InternalSwap(CreateTestRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.test_, other->_impl_.test_);
}

::google::protobuf::Metadata CreateTestRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CreateTestResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CreateTestResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CreateTestResponse, _impl_._has_bits_);
};

CreateTestResponse::CreateTestResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.CreateTestResponse)
}
inline PROTOBUF_NDEBUG_INLINE CreateTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::CreateTestResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CreateTestResponse::CreateTestResponse(
    ::google::protobuf::Arena* arena,
    const CreateTestResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CreateTestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.test_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(
                              arena, *from._impl_.test_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.CreateTestResponse)
}
inline PROTOBUF_NDEBUG_INLINE CreateTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CreateTestResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.test_ = {};
}
CreateTestResponse::~CreateTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.CreateTestResponse)
  SharedDtor(*this);
}
inline void CreateTestResponse::SharedDtor(MessageLite& self) {
  CreateTestResponse& this_ = static_cast<CreateTestResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.test_;
  this_._impl_.~Impl_();
}

inline void* CreateTestResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CreateTestResponse(arena);
}
constexpr auto CreateTestResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CreateTestResponse),
                                            alignof(CreateTestResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CreateTestResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CreateTestResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CreateTestResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CreateTestResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CreateTestResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CreateTestResponse>(), &CreateTestResponse::ByteSizeLong,
            &CreateTestResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CreateTestResponse, _impl_._cached_size_),
        false,
    },
    &CreateTestResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CreateTestResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CreateTestResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CreateTestResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::CreateTestResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CreateTestResponse, _impl_.test_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {PROTOBUF_FIELD_OFFSET(CreateTestResponse, _impl_.test_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Test>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CreateTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.test_ != nullptr);
    _impl_.test_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CreateTestResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CreateTestResponse& this_ = static_cast<const CreateTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CreateTestResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CreateTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.CreateTestResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.test_, this_._impl_.test_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.CreateTestResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CreateTestResponse::ByteSizeLong(const MessageLite& base) {
          const CreateTestResponse& this_ = static_cast<const CreateTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CreateTestResponse::ByteSizeLong() const {
          const CreateTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.CreateTestResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.test_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CreateTestResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CreateTestResponse*>(&to_msg);
  auto& from = static_cast<const CreateTestResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.test_ != nullptr);
    if (_this->_impl_.test_ == nullptr) {
      _this->_impl_.test_ =
          ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(arena, *from._impl_.test_);
    } else {
      _this->_impl_.test_->MergeFrom(*from._impl_.test_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTestResponse::CopyFrom(const CreateTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CreateTestResponse::InternalSwap(CreateTestResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.test_, other->_impl_.test_);
}

::google::protobuf::Metadata CreateTestResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetTestRequest::_Internal {
 public:
};

GetTestRequest::GetTestRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GetTestRequest& from_msg)
      : id_(arena, from.id_),
        _cached_size_{0} {}

GetTestRequest::GetTestRequest(
    ::google::protobuf::Arena* arena,
    const GetTestRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetTestRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void GetTestRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetTestRequest::~GetTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetTestRequest)
  SharedDtor(*this);
}
inline void GetTestRequest::SharedDtor(MessageLite& self) {
  GetTestRequest& this_ = static_cast<GetTestRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* GetTestRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetTestRequest(arena);
}
constexpr auto GetTestRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetTestRequest),
                                            alignof(GetTestRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetTestRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetTestRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetTestRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetTestRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetTestRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetTestRequest>(), &GetTestRequest::ByteSizeLong,
            &GetTestRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetTestRequest, _impl_._cached_size_),
        false,
    },
    &GetTestRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetTestRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 56, 2> GetTestRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GetTestRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetTestRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(GetTestRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\55\2\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.GetTestRequest"
    "id"
  }},
};

PROTOBUF_NOINLINE void GetTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetTestRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetTestRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetTestRequest& this_ = static_cast<const GetTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetTestRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetTestRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.GetTestRequest.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetTestRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetTestRequest::ByteSizeLong(const MessageLite& base) {
          const GetTestRequest& this_ = static_cast<const GetTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetTestRequest::ByteSizeLong() const {
          const GetTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetTestRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetTestRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetTestRequest*>(&to_msg);
  auto& from = static_cast<const GetTestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetTestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTestRequest::CopyFrom(const GetTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetTestRequest::InternalSwap(GetTestRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
}

::google::protobuf::Metadata GetTestRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetTestResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetTestResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetTestResponse, _impl_._has_bits_);
};

GetTestResponse::GetTestResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetTestResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::GetTestResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetTestResponse::GetTestResponse(
    ::google::protobuf::Arena* arena,
    const GetTestResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetTestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.test_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(
                              arena, *from._impl_.test_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetTestResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetTestResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.test_ = {};
}
GetTestResponse::~GetTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetTestResponse)
  SharedDtor(*this);
}
inline void GetTestResponse::SharedDtor(MessageLite& self) {
  GetTestResponse& this_ = static_cast<GetTestResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.test_;
  this_._impl_.~Impl_();
}

inline void* GetTestResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetTestResponse(arena);
}
constexpr auto GetTestResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetTestResponse),
                                            alignof(GetTestResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetTestResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetTestResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetTestResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetTestResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetTestResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetTestResponse>(), &GetTestResponse::ByteSizeLong,
            &GetTestResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetTestResponse, _impl_._cached_size_),
        false,
    },
    &GetTestResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetTestResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetTestResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetTestResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::GetTestResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetTestResponse, _impl_.test_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {PROTOBUF_FIELD_OFFSET(GetTestResponse, _impl_.test_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Test>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetTestResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.test_ != nullptr);
    _impl_.test_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetTestResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetTestResponse& this_ = static_cast<const GetTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetTestResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetTestResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.test_, this_._impl_.test_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetTestResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetTestResponse::ByteSizeLong(const MessageLite& base) {
          const GetTestResponse& this_ = static_cast<const GetTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetTestResponse::ByteSizeLong() const {
          const GetTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetTestResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.test_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetTestResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetTestResponse*>(&to_msg);
  auto& from = static_cast<const GetTestResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetTestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.test_ != nullptr);
    if (_this->_impl_.test_ == nullptr) {
      _this->_impl_.test_ =
          ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(arena, *from._impl_.test_);
    } else {
      _this->_impl_.test_->MergeFrom(*from._impl_.test_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetTestResponse::CopyFrom(const GetTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetTestResponse::InternalSwap(GetTestResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.test_, other->_impl_.test_);
}

::google::protobuf::Metadata GetTestResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SetTestStatusRequest::_Internal {
 public:
};

SetTestStatusRequest::SetTestStatusRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.SetTestStatusRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetTestStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::SetTestStatusRequest& from_msg)
      : id_(arena, from.id_),
        _cached_size_{0} {}

SetTestStatusRequest::SetTestStatusRequest(
    ::google::protobuf::Arena* arena,
    const SetTestStatusRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SetTestStatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.SetTestStatusRequest)
}
inline PROTOBUF_NDEBUG_INLINE SetTestStatusRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void SetTestStatusRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
SetTestStatusRequest::~SetTestStatusRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  SharedDtor(*this);
}
inline void SetTestStatusRequest::SharedDtor(MessageLite& self) {
  SetTestStatusRequest& this_ = static_cast<SetTestStatusRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SetTestStatusRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SetTestStatusRequest(arena);
}
constexpr auto SetTestStatusRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SetTestStatusRequest),
                                            alignof(SetTestStatusRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SetTestStatusRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SetTestStatusRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SetTestStatusRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SetTestStatusRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SetTestStatusRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SetTestStatusRequest>(), &SetTestStatusRequest::ByteSizeLong,
            &SetTestStatusRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SetTestStatusRequest, _impl_._cached_size_),
        false,
    },
    &SetTestStatusRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SetTestStatusRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 62, 2> SetTestStatusRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::SetTestStatusRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.TestStatus status = 2 [json_name = "status"];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SetTestStatusRequest, _impl_.status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SetTestStatusRequest, _impl_.status_)}},
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SetTestStatusRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(SetTestStatusRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .kentik.synthetics.v202101beta1.TestStatus status = 2 [json_name = "status"];
    {PROTOBUF_FIELD_OFFSET(SetTestStatusRequest, _impl_.status_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\63\2\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.SetTestStatusRequest"
    "id"
  }},
};

PROTOBUF_NOINLINE void SetTestStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SetTestStatusRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SetTestStatusRequest& this_ = static_cast<const SetTestStatusRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SetTestStatusRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SetTestStatusRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.SetTestStatusRequest.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .kentik.synthetics.v202101beta1.TestStatus status = 2 [json_name = "status"];
          if (this_._internal_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_status(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.SetTestStatusRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SetTestStatusRequest::ByteSizeLong(const MessageLite& base) {
          const SetTestStatusRequest& this_ = static_cast<const SetTestStatusRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SetTestStatusRequest::ByteSizeLong() const {
          const SetTestStatusRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // .kentik.synthetics.v202101beta1.TestStatus status = 2 [json_name = "status"];
            if (this_._internal_status() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SetTestStatusRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SetTestStatusRequest*>(&to_msg);
  auto& from = static_cast<const SetTestStatusRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_status() != 0) {
    _this->_impl_.status_ = from._impl_.status_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SetTestStatusRequest::CopyFrom(const SetTestStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SetTestStatusRequest::InternalSwap(SetTestStatusRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  swap(_impl_.status_, other->_impl_.status_);
}

::google::protobuf::Metadata SetTestStatusRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SetTestStatusResponse::_Internal {
 public:
};

SetTestStatusResponse::SetTestStatusResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.SetTestStatusResponse)
}
SetTestStatusResponse::SetTestStatusResponse(
    ::google::protobuf::Arena* arena,
    const SetTestStatusResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SetTestStatusResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.SetTestStatusResponse)
}

inline void* SetTestStatusResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SetTestStatusResponse(arena);
}
constexpr auto SetTestStatusResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SetTestStatusResponse),
                                            alignof(SetTestStatusResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SetTestStatusResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SetTestStatusResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SetTestStatusResponse::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<SetTestStatusResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SetTestStatusResponse::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<SetTestStatusResponse>(), &SetTestStatusResponse::ByteSizeLong,
            &SetTestStatusResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SetTestStatusResponse, _impl_._cached_size_),
        false,
    },
    &SetTestStatusResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SetTestStatusResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> SetTestStatusResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::SetTestStatusResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata SetTestStatusResponse::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PatchTestRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PatchTestRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_._has_bits_);
};

void PatchTestRequest::clear_mask() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.mask_ != nullptr) _impl_.mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PatchTestRequest::PatchTestRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PatchTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE PatchTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::PatchTestRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PatchTestRequest::PatchTestRequest(
    ::google::protobuf::Arena* arena,
    const PatchTestRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PatchTestRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.test_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(
                              arena, *from._impl_.test_)
                        : nullptr;
  _impl_.mask_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::FieldMask>(
                              arena, *from._impl_.mask_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PatchTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE PatchTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PatchTestRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, test_),
           0,
           offsetof(Impl_, mask_) -
               offsetof(Impl_, test_) +
               sizeof(Impl_::mask_));
}
PatchTestRequest::~PatchTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PatchTestRequest)
  SharedDtor(*this);
}
inline void PatchTestRequest::SharedDtor(MessageLite& self) {
  PatchTestRequest& this_ = static_cast<PatchTestRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.test_;
  delete this_._impl_.mask_;
  this_._impl_.~Impl_();
}

inline void* PatchTestRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PatchTestRequest(arena);
}
constexpr auto PatchTestRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PatchTestRequest),
                                            alignof(PatchTestRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PatchTestRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PatchTestRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PatchTestRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PatchTestRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PatchTestRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PatchTestRequest>(), &PatchTestRequest::ByteSizeLong,
            &PatchTestRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_._cached_size_),
        false,
    },
    &PatchTestRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PatchTestRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> PatchTestRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::PatchTestRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.FieldMask mask = 2 [json_name = "mask"];
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_.mask_)}},
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_.test_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_.test_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.FieldMask mask = 2 [json_name = "mask"];
    {PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_.mask_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Test>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::FieldMask>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PatchTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.test_ != nullptr);
      _impl_.test_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.mask_ != nullptr);
      _impl_.mask_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PatchTestRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PatchTestRequest& this_ = static_cast<const PatchTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PatchTestRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PatchTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PatchTestRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.test_, this_._impl_.test_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.FieldMask mask = 2 [json_name = "mask"];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.mask_, this_._impl_.mask_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PatchTestRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PatchTestRequest::ByteSizeLong(const MessageLite& base) {
          const PatchTestRequest& this_ = static_cast<const PatchTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PatchTestRequest::ByteSizeLong() const {
          const PatchTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PatchTestRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.test_);
            }
            // .google.protobuf.FieldMask mask = 2 [json_name = "mask"];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.mask_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PatchTestRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PatchTestRequest*>(&to_msg);
  auto& from = static_cast<const PatchTestRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.test_ != nullptr);
      if (_this->_impl_.test_ == nullptr) {
        _this->_impl_.test_ =
            ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(arena, *from._impl_.test_);
      } else {
        _this->_impl_.test_->MergeFrom(*from._impl_.test_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.mask_ != nullptr);
      if (_this->_impl_.mask_ == nullptr) {
        _this->_impl_.mask_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::FieldMask>(arena, *from._impl_.mask_);
      } else {
        _this->_impl_.mask_->MergeFrom(*from._impl_.mask_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PatchTestRequest::CopyFrom(const PatchTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PatchTestRequest::InternalSwap(PatchTestRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_.mask_)
      + sizeof(PatchTestRequest::_impl_.mask_)
      - PROTOBUF_FIELD_OFFSET(PatchTestRequest, _impl_.test_)>(
          reinterpret_cast<char*>(&_impl_.test_),
          reinterpret_cast<char*>(&other->_impl_.test_));
}

::google::protobuf::Metadata PatchTestRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PatchTestResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PatchTestResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PatchTestResponse, _impl_._has_bits_);
};

PatchTestResponse::PatchTestResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PatchTestResponse)
}
inline PROTOBUF_NDEBUG_INLINE PatchTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::PatchTestResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

PatchTestResponse::PatchTestResponse(
    ::google::protobuf::Arena* arena,
    const PatchTestResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PatchTestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.test_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(
                              arena, *from._impl_.test_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PatchTestResponse)
}
inline PROTOBUF_NDEBUG_INLINE PatchTestResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PatchTestResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.test_ = {};
}
PatchTestResponse::~PatchTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PatchTestResponse)
  SharedDtor(*this);
}
inline void PatchTestResponse::SharedDtor(MessageLite& self) {
  PatchTestResponse& this_ = static_cast<PatchTestResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.test_;
  this_._impl_.~Impl_();
}

inline void* PatchTestResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PatchTestResponse(arena);
}
constexpr auto PatchTestResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PatchTestResponse),
                                            alignof(PatchTestResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PatchTestResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PatchTestResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PatchTestResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PatchTestResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PatchTestResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PatchTestResponse>(), &PatchTestResponse::ByteSizeLong,
            &PatchTestResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PatchTestResponse, _impl_._cached_size_),
        false,
    },
    &PatchTestResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PatchTestResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> PatchTestResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PatchTestResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::PatchTestResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(PatchTestResponse, _impl_.test_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
    {PROTOBUF_FIELD_OFFSET(PatchTestResponse, _impl_.test_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::Test>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void PatchTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.test_ != nullptr);
    _impl_.test_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PatchTestResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PatchTestResponse& this_ = static_cast<const PatchTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PatchTestResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PatchTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PatchTestResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.test_, this_._impl_.test_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PatchTestResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PatchTestResponse::ByteSizeLong(const MessageLite& base) {
          const PatchTestResponse& this_ = static_cast<const PatchTestResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PatchTestResponse::ByteSizeLong() const {
          const PatchTestResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PatchTestResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .kentik.synthetics.v202101beta1.Test test = 1 [json_name = "test"];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.test_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PatchTestResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PatchTestResponse*>(&to_msg);
  auto& from = static_cast<const PatchTestResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.test_ != nullptr);
    if (_this->_impl_.test_ == nullptr) {
      _this->_impl_.test_ =
          ::google::protobuf::Message::CopyConstruct<::kentik::synthetics::v202101beta1::Test>(arena, *from._impl_.test_);
    } else {
      _this->_impl_.test_->MergeFrom(*from._impl_.test_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PatchTestResponse::CopyFrom(const PatchTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PatchTestResponse::InternalSwap(PatchTestResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.test_, other->_impl_.test_);
}

::google::protobuf::Metadata PatchTestResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeleteTestRequest::_Internal {
 public:
};

DeleteTestRequest::DeleteTestRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DeleteTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE DeleteTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::kentik::synthetics::v202101beta1::DeleteTestRequest& from_msg)
      : id_(arena, from.id_),
        _cached_size_{0} {}

DeleteTestRequest::DeleteTestRequest(
    ::google::protobuf::Arena* arena,
    const DeleteTestRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeleteTestRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DeleteTestRequest)
}
inline PROTOBUF_NDEBUG_INLINE DeleteTestRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void DeleteTestRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
DeleteTestRequest::~DeleteTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DeleteTestRequest)
  SharedDtor(*this);
}
inline void DeleteTestRequest::SharedDtor(MessageLite& self) {
  DeleteTestRequest& this_ = static_cast<DeleteTestRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DeleteTestRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DeleteTestRequest(arena);
}
constexpr auto DeleteTestRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(DeleteTestRequest),
                                            alignof(DeleteTestRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DeleteTestRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DeleteTestRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DeleteTestRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DeleteTestRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DeleteTestRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DeleteTestRequest>(), &DeleteTestRequest::ByteSizeLong,
            &DeleteTestRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DeleteTestRequest, _impl_._cached_size_),
        false,
    },
    &DeleteTestRequest::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DeleteTestRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 59, 2> DeleteTestRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DeleteTestRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string id = 1 [json_name = "id"];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(DeleteTestRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [json_name = "id"];
    {PROTOBUF_FIELD_OFFSET(DeleteTestRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\60\2\0\0\0\0\0\0"
    "kentik.synthetics.v202101beta1.DeleteTestRequest"
    "id"
  }},
};

PROTOBUF_NOINLINE void DeleteTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DeleteTestRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DeleteTestRequest& this_ = static_cast<const DeleteTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DeleteTestRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DeleteTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [json_name = "id"];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "kentik.synthetics.v202101beta1.DeleteTestRequest.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DeleteTestRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DeleteTestRequest::ByteSizeLong(const MessageLite& base) {
          const DeleteTestRequest& this_ = static_cast<const DeleteTestRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DeleteTestRequest::ByteSizeLong() const {
          const DeleteTestRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string id = 1 [json_name = "id"];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DeleteTestRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DeleteTestRequest*>(&to_msg);
  auto& from = static_cast<const DeleteTestRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTestRequest::CopyFrom(const DeleteTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DeleteTestRequest::InternalSwap(DeleteTestRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
}

::google::protobuf::Metadata DeleteTestRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DeleteTestResponse::_Internal {
 public:
};

DeleteTestResponse::DeleteTestResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DeleteTestResponse)
}
DeleteTestResponse::DeleteTestResponse(
    ::google::protobuf::Arena* arena,
    const DeleteTestResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DeleteTestResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DeleteTestResponse)
}

inline void* DeleteTestResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DeleteTestResponse(arena);
}
constexpr auto DeleteTestResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(DeleteTestResponse),
                                            alignof(DeleteTestResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DeleteTestResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DeleteTestResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DeleteTestResponse::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<DeleteTestResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DeleteTestResponse::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<DeleteTestResponse>(), &DeleteTestResponse::ByteSizeLong,
            &DeleteTestResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DeleteTestResponse, _impl_._cached_size_),
        false,
    },
    &DeleteTestResponse::kDescriptorMethods,
    &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DeleteTestResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> DeleteTestResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::kentik::synthetics::v202101beta1::DeleteTestResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata DeleteTestResponse::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v202101beta1
}  // namespace synthetics
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
