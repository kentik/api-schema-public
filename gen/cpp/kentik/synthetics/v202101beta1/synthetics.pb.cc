// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/synthetics/v202101beta1/synthetics.proto

#include "kentik/synthetics/v202101beta1/synthetics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AgentHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentTaskConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationMeshTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_City_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Country_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNS_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNSTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsGridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Geo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HTTPConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTTPConfig_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTTPConfig_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTTPTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HealthMoment_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthMoment_OtherHealthsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostnameTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDByIP_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_IPInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KnockTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshColumn_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshMetric_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MeshMetrics_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Region_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShakeTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stats_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TagTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Task_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TaskHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TestHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMonitoringSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPingSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_TestSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trace_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceHop_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceProbe_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracerouteInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TracerouteLookup_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TracerouteResult_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UrlTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto;
namespace kentik {
namespace synthetics {
namespace v202101beta1 {
class HealthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Health> _instance;
} _Health_default_instance_;
class AgentTaskConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentTaskConfig> _instance;
} _AgentTaskConfig_default_instance_;
class TestHealthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestHealth> _instance;
} _TestHealth_default_instance_;
class TaskHealthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskHealth> _instance;
} _TaskHealth_default_instance_;
class AgentHealthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentHealth> _instance;
} _AgentHealth_default_instance_;
class HealthMoment_OtherHealthsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthMoment_OtherHealthsEntry_DoNotUse> _instance;
} _HealthMoment_OtherHealthsEntry_DoNotUse_default_instance_;
class HealthMomentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthMoment> _instance;
} _HealthMoment_default_instance_;
class AgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Agent> _instance;
} _Agent_default_instance_;
class PingTaskDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingTaskDefinition> _instance;
} _PingTaskDefinition_default_instance_;
class TraceTaskDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceTaskDefinition> _instance;
} _TraceTaskDefinition_default_instance_;
class HTTPTaskDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTTPTaskDefinition> _instance;
} _HTTPTaskDefinition_default_instance_;
class TaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Task> _instance;
  const ::kentik::synthetics::v202101beta1::PingTaskDefinition* ping_;
  const ::kentik::synthetics::v202101beta1::TraceTaskDefinition* traceroute_;
  const ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* http_;
  const ::kentik::synthetics::v202101beta1::KnockTaskDefinition* knock_;
  const ::kentik::synthetics::v202101beta1::DNSTaskDefinition* dns_;
  const ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* shake_;
} _Task_default_instance_;
class KnockTaskDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KnockTaskDefinition> _instance;
} _KnockTaskDefinition_default_instance_;
class DNSTaskDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DNSTaskDefinition> _instance;
} _DNSTaskDefinition_default_instance_;
class ShakeTaskDefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShakeTaskDefinition> _instance;
} _ShakeTaskDefinition_default_instance_;
class UserInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UserInfo> _instance;
} _UserInfo_default_instance_;
class TestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test> _instance;
} _Test_default_instance_;
class HTTPConfig_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTTPConfig_HeadersEntry_DoNotUse> _instance;
} _HTTPConfig_HeadersEntry_DoNotUse_default_instance_;
class HTTPConfig_CssSelectorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTTPConfig_CssSelectorsEntry_DoNotUse> _instance;
} _HTTPConfig_CssSelectorsEntry_DoNotUse_default_instance_;
class HTTPConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTTPConfig> _instance;
} _HTTPConfig_default_instance_;
class TestSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestSettings> _instance;
  const ::kentik::synthetics::v202101beta1::HostnameTest* hostname_;
  const ::kentik::synthetics::v202101beta1::IpTest* ip_;
  const ::kentik::synthetics::v202101beta1::AgentTest* agent_;
  const ::kentik::synthetics::v202101beta1::FlowTest* flow_;
  const ::kentik::synthetics::v202101beta1::SiteTest* site_;
  const ::kentik::synthetics::v202101beta1::TagTest* tag_;
  const ::kentik::synthetics::v202101beta1::DnsTest* dns_;
  const ::kentik::synthetics::v202101beta1::UrlTest* url_;
  const ::kentik::synthetics::v202101beta1::GridTest* network_grid_;
  const ::kentik::synthetics::v202101beta1::UrlTest* page_load_;
  const ::kentik::synthetics::v202101beta1::DnsGridTest* dns_grid_;
  const ::kentik::synthetics::v202101beta1::ApplicationMeshTest* application_mesh_;
} _TestSettings_default_instance_;
class TestTraceSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestTraceSettings> _instance;
} _TestTraceSettings_default_instance_;
class TestPingSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPingSettings> _instance;
} _TestPingSettings_default_instance_;
class TestMonitoringSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestMonitoringSettings> _instance;
} _TestMonitoringSettings_default_instance_;
class HealthSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthSettings> _instance;
} _HealthSettings_default_instance_;
class HostnameTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostnameTest> _instance;
} _HostnameTest_default_instance_;
class IpTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpTest> _instance;
} _IpTest_default_instance_;
class AgentTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentTest> _instance;
} _AgentTest_default_instance_;
class FlowTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowTest> _instance;
} _FlowTest_default_instance_;
class SiteTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SiteTest> _instance;
} _SiteTest_default_instance_;
class TagTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TagTest> _instance;
} _TagTest_default_instance_;
class DnsTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnsTest> _instance;
} _DnsTest_default_instance_;
class UrlTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UrlTest> _instance;
} _UrlTest_default_instance_;
class GridTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GridTest> _instance;
} _GridTest_default_instance_;
class DnsGridTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnsGridTest> _instance;
} _DnsGridTest_default_instance_;
class ApplicationMeshTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ApplicationMeshTest> _instance;
} _ApplicationMeshTest_default_instance_;
class MeshResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshResponse> _instance;
} _MeshResponse_default_instance_;
class MeshColumnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshColumn> _instance;
} _MeshColumn_default_instance_;
class MeshMetricDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshMetric> _instance;
} _MeshMetric_default_instance_;
class MeshMetricsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshMetrics> _instance;
} _MeshMetrics_default_instance_;
class ASNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ASN> _instance;
} _ASN_default_instance_;
class CountryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Country> _instance;
} _Country_default_instance_;
class RegionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Region> _instance;
} _Region_default_instance_;
class CityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<City> _instance;
} _City_default_instance_;
class GeoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Geo> _instance;
} _Geo_default_instance_;
class DNSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DNS> _instance;
} _DNS_default_instance_;
class IPInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IPInfo> _instance;
} _IPInfo_default_instance_;
class IDByIPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IDByIP> _instance;
} _IDByIP_default_instance_;
class TracerouteLookupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracerouteLookup> _instance;
} _TracerouteLookup_default_instance_;
class TraceHopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceHop> _instance;
} _TraceHop_default_instance_;
class TraceProbeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceProbe> _instance;
} _TraceProbe_default_instance_;
class TraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trace> _instance;
} _Trace_default_instance_;
class StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats> _instance;
} _Stats_default_instance_;
class TracerouteResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracerouteResult> _instance;
} _TracerouteResult_default_instance_;
class TracerouteInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TracerouteInfo> _instance;
} _TracerouteInfo_default_instance_;
class GetHealthForTestsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHealthForTestsRequest> _instance;
} _GetHealthForTestsRequest_default_instance_;
class GetHealthForTestsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetHealthForTestsResponse> _instance;
} _GetHealthForTestsResponse_default_instance_;
class GetTraceForTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTraceForTestRequest> _instance;
} _GetTraceForTestRequest_default_instance_;
class GetTraceForTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTraceForTestResponse> _instance;
} _GetTraceForTestResponse_default_instance_;
class ListAgentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAgentsRequest> _instance;
} _ListAgentsRequest_default_instance_;
class ListAgentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAgentsResponse> _instance;
} _ListAgentsResponse_default_instance_;
class GetAgentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAgentRequest> _instance;
} _GetAgentRequest_default_instance_;
class GetAgentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAgentResponse> _instance;
} _GetAgentResponse_default_instance_;
class PatchAgentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAgentRequest> _instance;
} _PatchAgentRequest_default_instance_;
class PatchAgentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchAgentResponse> _instance;
} _PatchAgentResponse_default_instance_;
class DeleteAgentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAgentRequest> _instance;
} _DeleteAgentRequest_default_instance_;
class DeleteAgentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAgentResponse> _instance;
} _DeleteAgentResponse_default_instance_;
class ListTestsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTestsRequest> _instance;
} _ListTestsRequest_default_instance_;
class ListTestsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTestsResponse> _instance;
} _ListTestsResponse_default_instance_;
class CreateTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTestRequest> _instance;
} _CreateTestRequest_default_instance_;
class CreateTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTestResponse> _instance;
} _CreateTestResponse_default_instance_;
class GetTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTestRequest> _instance;
} _GetTestRequest_default_instance_;
class GetTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTestResponse> _instance;
} _GetTestResponse_default_instance_;
class SetTestStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTestStatusRequest> _instance;
} _SetTestStatusRequest_default_instance_;
class SetTestStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTestStatusResponse> _instance;
} _SetTestStatusResponse_default_instance_;
class PatchTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchTestRequest> _instance;
} _PatchTestRequest_default_instance_;
class PatchTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PatchTestResponse> _instance;
} _PatchTestResponse_default_instance_;
class DeleteTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTestRequest> _instance;
} _DeleteTestRequest_default_instance_;
class DeleteTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTestResponse> _instance;
} _DeleteTestResponse_default_instance_;
}  // namespace v202101beta1
}  // namespace synthetics
}  // namespace kentik
static void InitDefaultsscc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_ASN_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::ASN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::ASN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Agent_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Agent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Agent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_AgentHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_AgentHealth_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::AgentHealth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::AgentHealth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AgentHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AgentHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_HealthMoment_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_AgentTaskConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_AgentTaskConfig_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::AgentTaskConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::AgentTaskConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentTaskConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentTaskConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_AgentTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_AgentTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::AgentTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::AgentTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ApplicationMeshTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_ApplicationMeshTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::ApplicationMeshTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::ApplicationMeshTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ApplicationMeshTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ApplicationMeshTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_City_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_City_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::City();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::City::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_City_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_City_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Country_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Country_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Country();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Country::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Country_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Country_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_CreateTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_CreateTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::CreateTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::CreateTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_CreateTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_CreateTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::CreateTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::CreateTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_DNS_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_DNS_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::DNS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::DNS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNS_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DNS_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DNSTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_DNSTaskDefinition_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::DNSTaskDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::DNSTaskDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNSTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DNSTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_DeleteAgentRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::DeleteAgentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::DeleteAgentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_DeleteAgentResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::DeleteAgentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::DeleteAgentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_DeleteTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::DeleteTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::DeleteTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_DeleteTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::DeleteTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::DeleteTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DnsGridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_DnsGridTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::DnsGridTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::DnsGridTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsGridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DnsGridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DnsTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_DnsTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::DnsTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::DnsTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DnsTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_FlowTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_FlowTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::FlowTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::FlowTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Geo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Geo_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Geo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Geo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Geo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Geo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Country_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Region_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_City_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GetAgentRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GetAgentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GetAgentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_GetAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GetAgentResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GetAgentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GetAgentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetHealthForTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GetHealthForTestsRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GetHealthForTestsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GetHealthForTestsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHealthForTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHealthForTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetHealthForTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GetHealthForTestsResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GetHealthForTestsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GetHealthForTestsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetHealthForTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetHealthForTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_TestHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GetTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GetTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GetTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_GetTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GetTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GetTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GetTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GetTraceForTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GetTraceForTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GetTraceForTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GetTraceForTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GetTraceForTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GetTraceForTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_TracerouteLookup_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_TracerouteResult_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_TracerouteInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_GridTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::GridTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::GridTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_HTTPConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_HTTPConfig_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::HTTPConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::HTTPConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HTTPConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HTTPConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_HTTPConfig_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_HTTPConfig_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_HTTPConfig_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_HTTPConfig_CssSelectorsEntry_DoNotUse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse();
  }
  ::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTTPConfig_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HTTPConfig_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_HTTPConfig_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_HTTPConfig_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse();
  }
  ::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTTPConfig_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HTTPConfig_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_HTTPTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_HTTPTaskDefinition_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::HTTPTaskDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::HTTPTaskDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTTPTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HTTPTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Health_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Health();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Health::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_HealthMoment_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_HealthMoment_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::HealthMoment();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::HealthMoment::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_HealthMoment_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_HealthMoment_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_HealthMoment_OtherHealthsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_HealthMoment_OtherHealthsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_HealthMoment_OtherHealthsEntry_DoNotUse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse();
  }
  ::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthMoment_OtherHealthsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthMoment_OtherHealthsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_HealthSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_HealthSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::HealthSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::HealthSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HealthSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_HostnameTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_HostnameTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::HostnameTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::HostnameTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostnameTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostnameTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_IDByIP_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_IDByIP_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::IDByIP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::IDByIP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IDByIP_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IDByIP_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_IPInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_IPInfo_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::IPInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::IPInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_IPInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_IPInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Geo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_DNS_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_IpTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_IpTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::IpTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::IpTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IpTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_KnockTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_KnockTaskDefinition_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::KnockTaskDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::KnockTaskDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KnockTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KnockTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_ListAgentsRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::ListAgentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::ListAgentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_ListAgentsResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::ListAgentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::ListAgentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_ListTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_ListTestsRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::ListTestsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::ListTestsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ListTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_ListTestsResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::ListTestsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::ListTestsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_MeshColumn_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_MeshColumn_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::MeshColumn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::MeshColumn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshColumn_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MeshColumn_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_MeshMetrics_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_MeshMetric_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_MeshMetric_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::MeshMetric();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::MeshMetric::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MeshMetric_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MeshMetric_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_MeshMetrics_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_MeshMetrics_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::MeshMetrics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::MeshMetrics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MeshMetrics_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MeshMetrics_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_MeshMetric_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_MeshResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_MeshResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::MeshResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::MeshResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MeshResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_MeshColumn_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_PatchAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_PatchAgentRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::PatchAgentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::PatchAgentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_PatchAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_PatchAgentResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::PatchAgentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::PatchAgentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatchAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatchAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_PatchTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_PatchTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::PatchTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::PatchTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PatchTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PatchTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_PatchTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_PatchTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::PatchTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::PatchTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PatchTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PatchTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_PingTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_PingTaskDefinition_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::PingTaskDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::PingTaskDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PingTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PingTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Region_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Region_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Region();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Region::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Region_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Region_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_SetTestStatusRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::SetTestStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::SetTestStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_SetTestStatusResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::SetTestStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::SetTestStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ShakeTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_ShakeTaskDefinition_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::ShakeTaskDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::ShakeTaskDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShakeTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShakeTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_SiteTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_SiteTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::SiteTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::SiteTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SiteTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SiteTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Stats_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Stats_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stats_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stats_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TagTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TagTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TagTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TagTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TagTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TagTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Task_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Task_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Task();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Task::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_Task_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_Task_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_PingTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_TraceTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_HTTPTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_KnockTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_DNSTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_ShakeTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TaskHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TaskHealth_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TaskHealth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TaskHealth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TaskHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TaskHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Task_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_AgentHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Test_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_TestSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_UserInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TestHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TestHealth_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TestHealth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TestHealth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TestHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TestHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_TaskHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_AgentTaskConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_MeshResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TestMonitoringSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TestMonitoringSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TestMonitoringSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TestMonitoringSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestMonitoringSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestMonitoringSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TestPingSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TestPingSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TestPingSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TestPingSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPingSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPingSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TestSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TestSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TestSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TestSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_TestSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 16, 0, InitDefaultsscc_info_TestSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_HostnameTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_IpTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_AgentTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_FlowTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_SiteTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_TagTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_DnsTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_UrlTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_GridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_DnsGridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_ApplicationMeshTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_HealthSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_TestMonitoringSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_TestPingSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_HTTPConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TestTraceSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TestTraceSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TestTraceSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TestTraceSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestTraceSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Trace_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_Trace_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::Trace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::Trace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Trace_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Trace_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_TraceProbe_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TraceHop_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TraceHop_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TraceHop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TraceHop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceHop_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TraceHop_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TraceProbe_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TraceProbe_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TraceProbe();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TraceProbe::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TraceProbe_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TraceProbe_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_TraceHop_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TraceTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TraceTaskDefinition_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TraceTaskDefinition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TraceTaskDefinition::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TraceTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TracerouteInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TracerouteInfo_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TracerouteInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TracerouteInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TracerouteInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TracerouteInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TracerouteLookup_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TracerouteLookup_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TracerouteLookup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TracerouteLookup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_TracerouteLookup_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_TracerouteLookup_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_IDByIP_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_IPInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TracerouteResult_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_TracerouteResult_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::TracerouteResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::TracerouteResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TracerouteResult_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TracerouteResult_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Trace_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
      &scc_info_Stats_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_UrlTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_UrlTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::UrlTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::UrlTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UrlTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UrlTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_UserInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202101beta1::_UserInfo_default_instance_;
    new (ptr) ::kentik::synthetics::v202101beta1::UserInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202101beta1::UserInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UserInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[79];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Health, health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Health, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTaskConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTaskConfig, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTaskConfig, targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, test_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, tasks_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, overall_health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, health_ts_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, agent_task_config_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestHealth, mesh_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, task_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, agents_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, overall_health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TaskHealth, target_agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, agent_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentHealth, overall_health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, src_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, dst_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, packet_loss_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, avg_latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, avg_weighted_latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, rolling_avg_latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, rolling_stddev_latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, rolling_avg_weighted_latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, latency_health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, packet_loss_health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, overall_health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, avg_jitter_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, rolling_avg_jitter_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, rolling_std_jitter_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, jitter_health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, data_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, size_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, task_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthMoment, other_healths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, os_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, lat_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, long__),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, last_authed_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, family_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, site_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, version_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, challenge_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, city_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, region_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, country_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, test_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, local_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, cloud_vpc_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Agent, agent_impl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, expiry_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PingTaskDefinition, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, expiry_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceTaskDefinition, limit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPTaskDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPTaskDefinition, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPTaskDefinition, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPTaskDefinition, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, test_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, state_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, family_),
  offsetof(::kentik::synthetics::v202101beta1::TaskDefaultTypeInternal, ping_),
  offsetof(::kentik::synthetics::v202101beta1::TaskDefaultTypeInternal, traceroute_),
  offsetof(::kentik::synthetics::v202101beta1::TaskDefaultTypeInternal, http_),
  offsetof(::kentik::synthetics::v202101beta1::TaskDefaultTypeInternal, knock_),
  offsetof(::kentik::synthetics::v202101beta1::TaskDefaultTypeInternal, dns_),
  offsetof(::kentik::synthetics::v202101beta1::TaskDefaultTypeInternal, shake_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Task, definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, expiry_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::KnockTaskDefinition, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, expiry_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNSTaskDefinition, resolver_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ShakeTaskDefinition, expiry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UserInfo, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UserInfo, email_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UserInfo, full_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, settings_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, expires_on_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, edate_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, created_by_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Test, last_updated_by_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, expiry_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, method_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, headers_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, body_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, ignore_tls_errors_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HTTPConfig, css_selectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, hostname_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, ip_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, agent_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, flow_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, site_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, tag_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, dns_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, url_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, network_grid_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, page_load_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, dns_grid_),
  offsetof(::kentik::synthetics::v202101beta1::TestSettingsDefaultTypeInternal, application_mesh_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, agent_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, expiry_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, limit_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, tasks_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, health_settings_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, monitoring_settings_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, ping_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, trace_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, family_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, servers_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, use_local_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, reciprocal_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, rollup_level_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, http_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestSettings, definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, expiry_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, limit_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestTraceSettings, delay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, expiry_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestPingSettings, delay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, activation_grace_period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, activation_time_unit_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, activation_time_window_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, activation_times_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TestMonitoringSettings, notification_channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, latency_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, latency_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, packet_loss_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, packet_loss_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, jitter_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, jitter_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, http_latency_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, http_latency_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, http_valid_codes_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, dns_valid_codes_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, latency_critical_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, latency_warning_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, jitter_critical_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, jitter_warning_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, http_latency_critical_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HealthSettings, http_latency_warning_stddev_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HostnameTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::HostnameTest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IpTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IpTest, targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::AgentTest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, target_refresh_interval_millis_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, max_tasks_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, inet_direction_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::FlowTest, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SiteTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SiteTest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TagTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TagTest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsTest, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsTest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UrlTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::UrlTest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GridTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GridTest, targets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsGridTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsGridTest, targets_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DnsGridTest, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ApplicationMeshTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, local_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshResponse, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, metrics_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshColumn, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetric, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetric, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetric, health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetric, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, packet_loss_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::MeshMetrics, jitter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ASN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ASN, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ASN, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Country, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Country, code_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Country, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Region, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Region, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, latitude_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::City, longitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, country_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, region_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Geo, city_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DNS, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, geo_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, dns_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, site_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IPInfo, egress_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IDByIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IDByIP, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::IDByIP, ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, agent_id_by_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, agents_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, asns_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, device_id_by_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, site_id_by_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteLookup, ips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, ttl_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, timeout_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, min_expected_latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, site_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, region_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceHop, trace_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, as_path_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, completed_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, hop_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, region_path_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, site_path_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TraceProbe, hops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, agent_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, agent_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, target_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, hop_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Trace, probes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Stats, average_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Stats, max_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::Stats, total_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, traces_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, hop_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteResult, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, is_trace_routes_truncated_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, max_asn_path_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, max_site_path_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::TracerouteInfo, max_region_path_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, agent_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, task_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest, augment_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetHealthForTestsResponse, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, agent_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestRequest, target_ips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, lookups_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, trace_routes_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTraceForTestResponse, trace_routes_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListAgentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListAgentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListAgentsResponse, agents_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListAgentsResponse, invalid_agents_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetAgentResponse, agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentRequest, agent_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentRequest, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchAgentResponse, agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteAgentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteAgentRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteAgentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsRequest, preset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsResponse, tests_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::ListTestsResponse, invalid_tests_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestRequest, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::CreateTestResponse, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::GetTestResponse, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SetTestStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SetTestStatusRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SetTestStatusRequest, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::SetTestStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestRequest, test_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestRequest, mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::PatchTestResponse, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteTestRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202101beta1::DeleteTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::synthetics::v202101beta1::Health)},
  { 7, -1, sizeof(::kentik::synthetics::v202101beta1::AgentTaskConfig)},
  { 14, -1, sizeof(::kentik::synthetics::v202101beta1::TestHealth)},
  { 25, -1, sizeof(::kentik::synthetics::v202101beta1::TaskHealth)},
  { 34, -1, sizeof(::kentik::synthetics::v202101beta1::AgentHealth)},
  { 42, 49, sizeof(::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse)},
  { 51, -1, sizeof(::kentik::synthetics::v202101beta1::HealthMoment)},
  { 77, -1, sizeof(::kentik::synthetics::v202101beta1::Agent)},
  { 104, -1, sizeof(::kentik::synthetics::v202101beta1::PingTaskDefinition)},
  { 113, -1, sizeof(::kentik::synthetics::v202101beta1::TraceTaskDefinition)},
  { 122, -1, sizeof(::kentik::synthetics::v202101beta1::HTTPTaskDefinition)},
  { 130, -1, sizeof(::kentik::synthetics::v202101beta1::Task)},
  { 148, -1, sizeof(::kentik::synthetics::v202101beta1::KnockTaskDefinition)},
  { 158, -1, sizeof(::kentik::synthetics::v202101beta1::DNSTaskDefinition)},
  { 170, -1, sizeof(::kentik::synthetics::v202101beta1::ShakeTaskDefinition)},
  { 179, -1, sizeof(::kentik::synthetics::v202101beta1::UserInfo)},
  { 187, -1, sizeof(::kentik::synthetics::v202101beta1::Test)},
  { 203, 210, sizeof(::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse)},
  { 212, 219, sizeof(::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse)},
  { 221, -1, sizeof(::kentik::synthetics::v202101beta1::HTTPConfig)},
  { 233, -1, sizeof(::kentik::synthetics::v202101beta1::TestSettings)},
  { 269, -1, sizeof(::kentik::synthetics::v202101beta1::TestTraceSettings)},
  { 281, -1, sizeof(::kentik::synthetics::v202101beta1::TestPingSettings)},
  { 290, -1, sizeof(::kentik::synthetics::v202101beta1::TestMonitoringSettings)},
  { 300, -1, sizeof(::kentik::synthetics::v202101beta1::HealthSettings)},
  { 321, -1, sizeof(::kentik::synthetics::v202101beta1::HostnameTest)},
  { 327, -1, sizeof(::kentik::synthetics::v202101beta1::IpTest)},
  { 333, -1, sizeof(::kentik::synthetics::v202101beta1::AgentTest)},
  { 339, -1, sizeof(::kentik::synthetics::v202101beta1::FlowTest)},
  { 350, -1, sizeof(::kentik::synthetics::v202101beta1::SiteTest)},
  { 356, -1, sizeof(::kentik::synthetics::v202101beta1::TagTest)},
  { 362, -1, sizeof(::kentik::synthetics::v202101beta1::DnsTest)},
  { 369, -1, sizeof(::kentik::synthetics::v202101beta1::UrlTest)},
  { 375, -1, sizeof(::kentik::synthetics::v202101beta1::GridTest)},
  { 381, -1, sizeof(::kentik::synthetics::v202101beta1::DnsGridTest)},
  { 388, -1, sizeof(::kentik::synthetics::v202101beta1::ApplicationMeshTest)},
  { 393, -1, sizeof(::kentik::synthetics::v202101beta1::MeshResponse)},
  { 404, -1, sizeof(::kentik::synthetics::v202101beta1::MeshColumn)},
  { 415, -1, sizeof(::kentik::synthetics::v202101beta1::MeshMetric)},
  { 423, -1, sizeof(::kentik::synthetics::v202101beta1::MeshMetrics)},
  { 432, -1, sizeof(::kentik::synthetics::v202101beta1::ASN)},
  { 439, -1, sizeof(::kentik::synthetics::v202101beta1::Country)},
  { 446, -1, sizeof(::kentik::synthetics::v202101beta1::Region)},
  { 453, -1, sizeof(::kentik::synthetics::v202101beta1::City)},
  { 462, -1, sizeof(::kentik::synthetics::v202101beta1::Geo)},
  { 470, -1, sizeof(::kentik::synthetics::v202101beta1::DNS)},
  { 476, -1, sizeof(::kentik::synthetics::v202101beta1::IPInfo)},
  { 488, -1, sizeof(::kentik::synthetics::v202101beta1::IDByIP)},
  { 495, -1, sizeof(::kentik::synthetics::v202101beta1::TracerouteLookup)},
  { 506, -1, sizeof(::kentik::synthetics::v202101beta1::TraceHop)},
  { 521, -1, sizeof(::kentik::synthetics::v202101beta1::TraceProbe)},
  { 532, -1, sizeof(::kentik::synthetics::v202101beta1::Trace)},
  { 542, -1, sizeof(::kentik::synthetics::v202101beta1::Stats)},
  { 550, -1, sizeof(::kentik::synthetics::v202101beta1::TracerouteResult)},
  { 560, -1, sizeof(::kentik::synthetics::v202101beta1::TracerouteInfo)},
  { 569, -1, sizeof(::kentik::synthetics::v202101beta1::GetHealthForTestsRequest)},
  { 580, -1, sizeof(::kentik::synthetics::v202101beta1::GetHealthForTestsResponse)},
  { 586, -1, sizeof(::kentik::synthetics::v202101beta1::GetTraceForTestRequest)},
  { 596, -1, sizeof(::kentik::synthetics::v202101beta1::GetTraceForTestResponse)},
  { 604, -1, sizeof(::kentik::synthetics::v202101beta1::ListAgentsRequest)},
  { 609, -1, sizeof(::kentik::synthetics::v202101beta1::ListAgentsResponse)},
  { 616, -1, sizeof(::kentik::synthetics::v202101beta1::GetAgentRequest)},
  { 622, -1, sizeof(::kentik::synthetics::v202101beta1::GetAgentResponse)},
  { 628, -1, sizeof(::kentik::synthetics::v202101beta1::PatchAgentRequest)},
  { 635, -1, sizeof(::kentik::synthetics::v202101beta1::PatchAgentResponse)},
  { 641, -1, sizeof(::kentik::synthetics::v202101beta1::DeleteAgentRequest)},
  { 647, -1, sizeof(::kentik::synthetics::v202101beta1::DeleteAgentResponse)},
  { 652, -1, sizeof(::kentik::synthetics::v202101beta1::ListTestsRequest)},
  { 658, -1, sizeof(::kentik::synthetics::v202101beta1::ListTestsResponse)},
  { 665, -1, sizeof(::kentik::synthetics::v202101beta1::CreateTestRequest)},
  { 671, -1, sizeof(::kentik::synthetics::v202101beta1::CreateTestResponse)},
  { 677, -1, sizeof(::kentik::synthetics::v202101beta1::GetTestRequest)},
  { 683, -1, sizeof(::kentik::synthetics::v202101beta1::GetTestResponse)},
  { 689, -1, sizeof(::kentik::synthetics::v202101beta1::SetTestStatusRequest)},
  { 696, -1, sizeof(::kentik::synthetics::v202101beta1::SetTestStatusResponse)},
  { 701, -1, sizeof(::kentik::synthetics::v202101beta1::PatchTestRequest)},
  { 708, -1, sizeof(::kentik::synthetics::v202101beta1::PatchTestResponse)},
  { 714, -1, sizeof(::kentik::synthetics::v202101beta1::DeleteTestRequest)},
  { 720, -1, sizeof(::kentik::synthetics::v202101beta1::DeleteTestResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Health_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_AgentTaskConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TestHealth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TaskHealth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_AgentHealth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_HealthMoment_OtherHealthsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_HealthMoment_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Agent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_PingTaskDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TraceTaskDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_HTTPTaskDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Task_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_KnockTaskDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_DNSTaskDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_ShakeTaskDefinition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_UserInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_HTTPConfig_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_HTTPConfig_CssSelectorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_HTTPConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TestSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TestTraceSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TestPingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TestMonitoringSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_HealthSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_HostnameTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_IpTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_AgentTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_FlowTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_SiteTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TagTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_DnsTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_UrlTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GridTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_DnsGridTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_ApplicationMeshTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_MeshResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_MeshColumn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_MeshMetric_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_MeshMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_ASN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Country_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Region_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_City_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Geo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_DNS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_IPInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_IDByIP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TracerouteLookup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TraceHop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TraceProbe_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Trace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TracerouteResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_TracerouteInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GetHealthForTestsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GetHealthForTestsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GetTraceForTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GetTraceForTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_ListAgentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_ListAgentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GetAgentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GetAgentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_PatchAgentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_PatchAgentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_DeleteAgentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_DeleteAgentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_ListTestsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_ListTestsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_CreateTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_CreateTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GetTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_GetTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_SetTestStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_SetTestStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_PatchTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_PatchTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_DeleteTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202101beta1::_DeleteTestResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/kentik/synthetics/v202101beta1/synthet"
  "ics.proto\022\036kentik.synthetics.v202101beta"
  "1\032\034google/api/annotations.proto\032\027google/"
  "api/client.proto\032 google/protobuf/field_"
  "mask.proto\032\037google/protobuf/timestamp.pr"
  "oto\032.protoc-gen-openapiv2/options/annota"
  "tions.proto\032%kentik/core/v202303/annotat"
  "ions.proto\"P\n\006Health\022\026\n\006health\030\001 \001(\tR\006he"
  "alth\022.\n\004time\030\002 \001(\0132\032.google.protobuf.Tim"
  "estampR\004time\";\n\017AgentTaskConfig\022\016\n\002id\030\001 "
  "\001(\004R\002id\022\030\n\007targets\030\002 \003(\tR\007targets\"\232\003\n\nTe"
  "stHealth\022\027\n\007test_id\030\001 \001(\tR\006testId\022@\n\005tas"
  "ks\030\002 \003(\0132*.kentik.synthetics.v202101beta"
  "1.TaskHealthR\005tasks\022M\n\016overall_health\030\003 "
  "\001(\0132&.kentik.synthetics.v202101beta1.Hea"
  "lthR\roverallHealth\022C\n\thealth_ts\030\004 \003(\0132&."
  "kentik.synthetics.v202101beta1.HealthR\010h"
  "ealthTs\022[\n\021agent_task_config\030\005 \003(\0132/.ken"
  "tik.synthetics.v202101beta1.AgentTaskCon"
  "figR\017agentTaskConfig\022@\n\004mesh\030\006 \003(\0132,.ken"
  "tik.synthetics.v202101beta1.MeshResponse"
  "R\004mesh\"\244\002\n\nTaskHealth\0228\n\004task\030\001 \001(\0132$.ke"
  "ntik.synthetics.v202101beta1.TaskR\004task\022"
  "C\n\006agents\030\002 \003(\0132+.kentik.synthetics.v202"
  "101beta1.AgentHealthR\006agents\022M\n\016overall_"
  "health\030\003 \001(\0132&.kentik.synthetics.v202101"
  "beta1.HealthR\roverallHealth\022H\n\014target_ag"
  "ent\030\004 \001(\0132%.kentik.synthetics.v202101bet"
  "a1.AgentR\013targetAgent\"\337\001\n\013AgentHealth\022;\n"
  "\005agent\030\001 \001(\0132%.kentik.synthetics.v202101"
  "beta1.AgentR\005agent\022D\n\006health\030\002 \003(\0132,.ken"
  "tik.synthetics.v202101beta1.HealthMoment"
  "R\006health\022M\n\016overall_health\030\003 \001(\0132&.kenti"
  "k.synthetics.v202101beta1.HealthR\roveral"
  "lHealth\"\316\007\n\014HealthMoment\022.\n\004time\030\001 \001(\0132\032"
  ".google.protobuf.TimestampR\004time\022\025\n\006src_"
  "ip\030\002 \001(\tR\005srcIp\022\025\n\006dst_ip\030\003 \001(\tR\005dstIp\022\037"
  "\n\013packet_loss\030\004 \001(\001R\npacketLoss\022\037\n\013avg_l"
  "atency\030\005 \001(\rR\navgLatency\0220\n\024avg_weighted"
  "_latency\030\006 \001(\rR\022avgWeightedLatency\022.\n\023ro"
  "lling_avg_latency\030\007 \001(\rR\021rollingAvgLaten"
  "cy\0224\n\026rolling_stddev_latency\030\010 \001(\rR\024roll"
  "ingStddevLatency\022\?\n\034rolling_avg_weighted"
  "_latency\030\t \001(\rR\031rollingAvgWeightedLatenc"
  "y\022%\n\016latency_health\030\n \001(\tR\rlatencyHealth"
  "\022,\n\022packet_loss_health\030\013 \001(\tR\020packetLoss"
  "Health\022M\n\016overall_health\030\014 \001(\0132&.kentik."
  "synthetics.v202101beta1.HealthR\roverallH"
  "ealth\022\035\n\navg_jitter\030\r \001(\rR\tavgJitter\022,\n\022"
  "rolling_avg_jitter\030\016 \001(\rR\020rollingAvgJitt"
  "er\022,\n\022rolling_std_jitter\030\017 \001(\rR\020rollingS"
  "tdJitter\022#\n\rjitter_health\030\020 \001(\tR\014jitterH"
  "ealth\022\022\n\004data\030\021 \001(\tR\004data\022\022\n\004size\030\022 \001(\rR"
  "\004size\022\026\n\006status\030\023 \001(\rR\006status\022\033\n\ttask_ty"
  "pe\030\024 \001(\tR\010taskType\022c\n\rother_healths\030\025 \003("
  "\0132>.kentik.synthetics.v202101beta1.Healt"
  "hMoment.OtherHealthsEntryR\014otherHealths\032"
  "\?\n\021OtherHealthsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024"
  "\n\005value\030\002 \001(\tR\005value:\0028\001\"\251\005\n\005Agent\022\016\n\002id"
  "\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022C\n\006status"
  "\030\003 \001(\0162+.kentik.synthetics.v202101beta1."
  "AgentStatusR\006status\022\024\n\005alias\030\004 \001(\tR\005alia"
  "s\022\022\n\004type\030\005 \001(\tR\004type\022\016\n\002os\030\006 \001(\tR\002os\022\016\n"
  "\002ip\030\007 \001(\tR\002ip\022\020\n\003lat\030\010 \001(\001R\003lat\022\022\n\004long\030"
  "\t \001(\001R\004long\022;\n\013last_authed\030\n \001(\0132\032.googl"
  "e.protobuf.TimestampR\nlastAuthed\022@\n\006fami"
  "ly\030\013 \001(\0162(.kentik.synthetics.v202101beta"
  "1.IPFamilyR\006family\022\020\n\003asn\030\014 \001(\rR\003asn\022\027\n\007"
  "site_id\030\r \001(\tR\006siteId\022\030\n\007version\030\016 \001(\tR\007"
  "version\022\034\n\tchallenge\030\017 \001(\tR\tchallenge\022\022\n"
  "\004city\030\020 \001(\tR\004city\022\026\n\006region\030\021 \001(\tR\006regio"
  "n\022\030\n\007country\030\022 \001(\tR\007country\022\031\n\010test_ids\030"
  "\023 \003(\tR\007testIds\022\031\n\010local_ip\030\024 \001(\tR\007localI"
  "p\022\033\n\tcloud_vpc\030\025 \001(\tR\010cloudVpc\022L\n\nagent_"
  "impl\030\026 \001(\0162-.kentik.synthetics.v202101be"
  "ta1.ImplementTypeR\tagentImpl\"r\n\022PingTask"
  "Definition\022\026\n\006target\030\001 \001(\tR\006target\022\026\n\006pe"
  "riod\030\002 \001(\rR\006period\022\026\n\006expiry\030\003 \001(\rR\006expi"
  "ry\022\024\n\005count\030\004 \001(\rR\005count\"s\n\023TraceTaskDef"
  "inition\022\026\n\006target\030\001 \001(\tR\006target\022\026\n\006perio"
  "d\030\002 \001(\rR\006period\022\026\n\006expiry\030\003 \001(\rR\006expiry\022"
  "\024\n\005limit\030\004 \001(\rR\005limit\"\\\n\022HTTPTaskDefinit"
  "ion\022\026\n\006target\030\001 \001(\tR\006target\022\026\n\006period\030\002 "
  "\001(\rR\006period\022\026\n\006expiry\030\003 \001(\rR\006expiry\"\301\005\n\004"
  "Task\022\016\n\002id\030\001 \001(\tR\002id\022\027\n\007test_id\030\002 \001(\tR\006t"
  "estId\022\033\n\tdevice_id\030\003 \001(\tR\010deviceId\022\?\n\005st"
  "ate\030\004 \001(\0162).kentik.synthetics.v202101bet"
  "a1.TaskStateR\005state\022\026\n\006status\030\005 \001(\tR\006sta"
  "tus\022@\n\006family\030\006 \001(\0162(.kentik.synthetics."
  "v202101beta1.IPFamilyR\006family\022H\n\004ping\030\t "
  "\001(\01322.kentik.synthetics.v202101beta1.Pin"
  "gTaskDefinitionH\000R\004ping\022U\n\ntraceroute\030\n "
  "\001(\01323.kentik.synthetics.v202101beta1.Tra"
  "ceTaskDefinitionH\000R\ntraceroute\022H\n\004http\030\013"
  " \001(\01322.kentik.synthetics.v202101beta1.HT"
  "TPTaskDefinitionH\000R\004http\022K\n\005knock\030\014 \001(\0132"
  "3.kentik.synthetics.v202101beta1.KnockTa"
  "skDefinitionH\000R\005knock\022E\n\003dns\030\r \001(\01321.ken"
  "tik.synthetics.v202101beta1.DNSTaskDefin"
  "itionH\000R\003dns\022K\n\005shake\030\016 \001(\01323.kentik.syn"
  "thetics.v202101beta1.ShakeTaskDefinition"
  "H\000R\005shakeB\014\n\ndefinition\"\207\001\n\023KnockTaskDef"
  "inition\022\026\n\006target\030\001 \001(\tR\006target\022\026\n\006perio"
  "d\030\002 \001(\rR\006period\022\026\n\006expiry\030\003 \001(\rR\006expiry\022"
  "\024\n\005count\030\004 \001(\rR\005count\022\022\n\004port\030\005 \001(\rR\004por"
  "t\"\265\001\n\021DNSTaskDefinition\022\026\n\006target\030\001 \001(\tR"
  "\006target\022\026\n\006period\030\002 \001(\rR\006period\022\026\n\006expir"
  "y\030\003 \001(\rR\006expiry\022\024\n\005count\030\004 \001(\rR\005count\022\022\n"
  "\004port\030\005 \001(\rR\004port\022\022\n\004type\030\006 \001(\tR\004type\022\032\n"
  "\010resolver\030\007 \001(\tR\010resolver\"q\n\023ShakeTaskDe"
  "finition\022\026\n\006target\030\001 \001(\tR\006target\022\022\n\004port"
  "\030\002 \001(\rR\004port\022\026\n\006period\030\003 \001(\rR\006period\022\026\n\006"
  "expiry\030\004 \001(\rR\006expiry\"M\n\010UserInfo\022\016\n\002id\030\001"
  " \001(\tR\002id\022\024\n\005email\030\002 \001(\tR\005email\022\033\n\tfull_n"
  "ame\030\003 \001(\tR\010fullName\"\243\004\n\004Test\022\016\n\002id\030\001 \001(\t"
  "R\002id\022\022\n\004name\030\002 \001(\tR\004name\022\022\n\004type\030\003 \001(\tR\004"
  "type\022\033\n\tdevice_id\030\004 \001(\tR\010deviceId\022B\n\006sta"
  "tus\030\005 \001(\0162*.kentik.synthetics.v202101bet"
  "a1.TestStatusR\006status\022H\n\010settings\030\006 \001(\0132"
  ",.kentik.synthetics.v202101beta1.TestSet"
  "tingsR\010settings\0229\n\nexpires_on\030\007 \001(\0132\032.go"
  "ogle.protobuf.TimestampR\texpiresOn\0220\n\005cd"
  "ate\030\010 \001(\0132\032.google.protobuf.TimestampR\005c"
  "date\0220\n\005edate\030\t \001(\0132\032.google.protobuf.Ti"
  "mestampR\005edate\022G\n\ncreated_by\030\n \001(\0132(.ken"
  "tik.synthetics.v202101beta1.UserInfoR\tcr"
  "eatedBy\022P\n\017last_updated_by\030\013 \001(\0132(.kenti"
  "k.synthetics.v202101beta1.UserInfoR\rlast"
  "UpdatedBy\"\307\003\n\nHTTPConfig\022\026\n\006period\030\001 \001(\r"
  "R\006period\022\026\n\006expiry\030\002 \001(\rR\006expiry\022\026\n\006meth"
  "od\030\003 \001(\tR\006method\022Q\n\007headers\030\004 \003(\01327.kent"
  "ik.synthetics.v202101beta1.HTTPConfig.He"
  "adersEntryR\007headers\022\022\n\004body\030\005 \001(\tR\004body\022"
  "*\n\021ignore_tls_errors\030\006 \001(\010R\017ignoreTlsErr"
  "ors\022a\n\rcss_selectors\030\007 \003(\0132<.kentik.synt"
  "hetics.v202101beta1.HTTPConfig.CssSelect"
  "orsEntryR\014cssSelectors\032:\n\014HeadersEntry\022\020"
  "\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\002"
  "8\001\032\?\n\021CssSelectorsEntry\022\020\n\003key\030\001 \001(\tR\003ke"
  "y\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"\360\014\n\014TestSett"
  "ings\022J\n\010hostname\030\004 \001(\0132,.kentik.syntheti"
  "cs.v202101beta1.HostnameTestH\000R\010hostname"
  "\0228\n\002ip\030\005 \001(\0132&.kentik.synthetics.v202101"
  "beta1.IpTestH\000R\002ip\022A\n\005agent\030\006 \001(\0132).kent"
  "ik.synthetics.v202101beta1.AgentTestH\000R\005"
  "agent\022>\n\004flow\030\007 \001(\0132(.kentik.synthetics."
  "v202101beta1.FlowTestH\000R\004flow\022>\n\004site\030\010 "
  "\001(\0132(.kentik.synthetics.v202101beta1.Sit"
  "eTestH\000R\004site\022;\n\003tag\030\t \001(\0132\'.kentik.synt"
  "hetics.v202101beta1.TagTestH\000R\003tag\022;\n\003dn"
  "s\030\n \001(\0132\'.kentik.synthetics.v202101beta1"
  ".DnsTestH\000R\003dns\022;\n\003url\030\013 \001(\0132\'.kentik.sy"
  "nthetics.v202101beta1.UrlTestH\000R\003url\022M\n\014"
  "network_grid\030# \001(\0132(.kentik.synthetics.v"
  "202101beta1.GridTestH\000R\013networkGrid\022F\n\tp"
  "age_load\030$ \001(\0132\'.kentik.synthetics.v2021"
  "01beta1.UrlTestH\000R\010pageLoad\022H\n\010dns_grid\030"
  "% \001(\0132+.kentik.synthetics.v202101beta1.D"
  "nsGridTestH\000R\007dnsGrid\022`\n\020application_mes"
  "h\030& \001(\01323.kentik.synthetics.v202101beta1"
  ".ApplicationMeshTestH\000R\017applicationMesh\022"
  "\033\n\tagent_ids\030\016 \003(\tR\010agentIds\022\026\n\006period\030\017"
  " \001(\rR\006period\022\024\n\005count\030\020 \001(\rR\005count\022\026\n\006ex"
  "piry\030\021 \001(\rR\006expiry\022\024\n\005limit\030\022 \001(\rR\005limit"
  "\022\024\n\005tasks\030\023 \003(\tR\005tasks\022W\n\017health_setting"
  "s\030\026 \001(\0132..kentik.synthetics.v202101beta1"
  ".HealthSettingsR\016healthSettings\022g\n\023monit"
  "oring_settings\030\030 \001(\01326.kentik.synthetics"
  ".v202101beta1.TestMonitoringSettingsR\022mo"
  "nitoringSettings\022D\n\004ping\030\034 \001(\01320.kentik."
  "synthetics.v202101beta1.TestPingSettings"
  "R\004ping\022G\n\005trace\030\035 \001(\01321.kentik.synthetic"
  "s.v202101beta1.TestTraceSettingsR\005trace\022"
  "\022\n\004port\030\027 \001(\rR\004port\022\032\n\010protocol\030\032 \001(\tR\010p"
  "rotocol\022@\n\006family\030\033 \001(\0162(.kentik.synthet"
  "ics.v202101beta1.IPFamilyR\006family\022\030\n\007ser"
  "vers\030\036 \003(\tR\007servers\022 \n\014use_local_ip\030\037 \001("
  "\010R\nuseLocalIp\022\036\n\nreciprocal\030  \001(\010R\nrecip"
  "rocal\022!\n\014rollup_level\030! \001(\rR\013rollupLevel"
  "\022>\n\004http\030\" \001(\0132*.kentik.synthetics.v2021"
  "01beta1.HTTPConfigR\004httpB\014\n\ndefinition\"\265"
  "\001\n\021TestTraceSettings\022\026\n\006period\030\001 \001(\002R\006pe"
  "riod\022\024\n\005count\030\002 \001(\002R\005count\022\032\n\010protocol\030\003"
  " \001(\tR\010protocol\022\022\n\004port\030\004 \001(\002R\004port\022\026\n\006ex"
  "piry\030\005 \001(\002R\006expiry\022\024\n\005limit\030\006 \001(\002R\005limit"
  "\022\024\n\005delay\030\007 \001(\002R\005delay\"n\n\020TestPingSettin"
  "gs\022\026\n\006period\030\001 \001(\002R\006period\022\024\n\005count\030\002 \001("
  "\002R\005count\022\026\n\006expiry\030\003 \001(\002R\006expiry\022\024\n\005dela"
  "y\030\004 \001(\002R\005delay\"\230\002\n\026TestMonitoringSetting"
  "s\0226\n\027activation_grace_period\030\001 \001(\tR\025acti"
  "vationGracePeriod\0220\n\024activation_time_uni"
  "t\030\002 \001(\tR\022activationTimeUnit\0224\n\026activatio"
  "n_time_window\030\003 \001(\tR\024activationTimeWindo"
  "w\022)\n\020activation_times\030\004 \001(\tR\017activationT"
  "imes\0223\n\025notification_channels\030\005 \003(\tR\024not"
  "ificationChannels\"\246\006\n\016HealthSettings\022)\n\020"
  "latency_critical\030\001 \001(\002R\017latencyCritical\022"
  "\'\n\017latency_warning\030\002 \001(\002R\016latencyWarning"
  "\0220\n\024packet_loss_critical\030\003 \001(\002R\022packetLo"
  "ssCritical\022.\n\023packet_loss_warning\030\004 \001(\002R"
  "\021packetLossWarning\022\'\n\017jitter_critical\030\005 "
  "\001(\002R\016jitterCritical\022%\n\016jitter_warning\030\006 "
  "\001(\002R\rjitterWarning\0222\n\025http_latency_criti"
  "cal\030\007 \001(\002R\023httpLatencyCritical\0220\n\024http_l"
  "atency_warning\030\010 \001(\002R\022httpLatencyWarning"
  "\022(\n\020http_valid_codes\030\t \003(\rR\016httpValidCod"
  "es\022&\n\017dns_valid_codes\030\n \003(\rR\rdnsValidCod"
  "es\0226\n\027latency_critical_stddev\030\013 \001(\002R\025lat"
  "encyCriticalStddev\0224\n\026latency_warning_st"
  "ddev\030\014 \001(\002R\024latencyWarningStddev\0224\n\026jitt"
  "er_critical_stddev\030\r \001(\002R\024jitterCritical"
  "Stddev\0222\n\025jitter_warning_stddev\030\016 \001(\002R\023j"
  "itterWarningStddev\022\?\n\034http_latency_criti"
  "cal_stddev\030\017 \001(\002R\031httpLatencyCriticalStd"
  "dev\022=\n\033http_latency_warning_stddev\030\020 \001(\002"
  "R\030httpLatencyWarningStddev\"&\n\014HostnameTe"
  "st\022\026\n\006target\030\001 \001(\tR\006target\"\"\n\006IpTest\022\030\n\007"
  "targets\030\001 \003(\tR\007targets\"#\n\tAgentTest\022\026\n\006t"
  "arget\030\001 \001(\tR\006target\"\335\001\n\010FlowTest\022\026\n\006targ"
  "et\030\001 \001(\tR\006target\022C\n\036target_refresh_inter"
  "val_millis\030\002 \001(\rR\033targetRefreshIntervalM"
  "illis\022\033\n\tmax_tasks\030\003 \001(\rR\010maxTasks\022\022\n\004ty"
  "pe\030\004 \001(\tR\004type\022%\n\016inet_direction\030\005 \001(\tR\r"
  "inetDirection\022\034\n\tdirection\030\006 \001(\tR\tdirect"
  "ion\"\"\n\010SiteTest\022\026\n\006target\030\001 \001(\tR\006target\""
  "!\n\007TagTest\022\026\n\006target\030\001 \001(\tR\006target\"`\n\007Dn"
  "sTest\022\026\n\006target\030\001 \001(\tR\006target\022=\n\004type\030\002 "
  "\001(\0162).kentik.synthetics.v202101beta1.DNS"
  "RecordR\004type\"!\n\007UrlTest\022\026\n\006target\030\001 \001(\tR"
  "\006target\"$\n\010GridTest\022\030\n\007targets\030\001 \003(\tR\007ta"
  "rgets\"f\n\013DnsGridTest\022\030\n\007targets\030\001 \003(\tR\007t"
  "argets\022=\n\004type\030\002 \001(\0162).kentik.synthetics"
  ".v202101beta1.DNSRecordR\004type\"\025\n\023Applica"
  "tionMeshTest\"\271\001\n\014MeshResponse\022\016\n\002id\030\001 \001("
  "\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022\031\n\010local_ip\030\003 "
  "\001(\tR\007localIp\022\016\n\002ip\030\004 \001(\tR\002ip\022\024\n\005alias\030\005 "
  "\001(\tR\005alias\022D\n\007columns\030\006 \003(\0132*.kentik.syn"
  "thetics.v202101beta1.MeshColumnR\007columns"
  "\"\352\001\n\nMeshColumn\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030"
  "\002 \001(\tR\004name\022\024\n\005alias\030\003 \001(\tR\005alias\022\026\n\006tar"
  "get\030\004 \001(\tR\006target\022E\n\007metrics\030\005 \001(\0132+.ken"
  "tik.synthetics.v202101beta1.MeshMetricsR"
  "\007metrics\022C\n\006health\030\006 \003(\0132+.kentik.synthe"
  "tics.v202101beta1.MeshMetricsR\006health\"N\n"
  "\nMeshMetric\022\022\n\004name\030\001 \001(\tR\004name\022\026\n\006healt"
  "h\030\002 \001(\tR\006health\022\024\n\005value\030\003 \001(\003R\005value\"\224\002"
  "\n\013MeshMetrics\022.\n\004time\030\001 \001(\0132\032.google.pro"
  "tobuf.TimestampR\004time\022D\n\007latency\030\002 \001(\0132*"
  ".kentik.synthetics.v202101beta1.MeshMetr"
  "icR\007latency\022K\n\013packet_loss\030\003 \001(\0132*.kenti"
  "k.synthetics.v202101beta1.MeshMetricR\npa"
  "cketLoss\022B\n\006jitter\030\004 \001(\0132*.kentik.synthe"
  "tics.v202101beta1.MeshMetricR\006jitter\")\n\003"
  "ASN\022\016\n\002id\030\001 \001(\rR\002id\022\022\n\004name\030\002 \001(\tR\004name\""
  "1\n\007Country\022\022\n\004code\030\001 \001(\tR\004code\022\022\n\004name\030\002"
  " \001(\tR\004name\",\n\006Region\022\016\n\002id\030\001 \001(\003R\002id\022\022\n\004"
  "name\030\002 \001(\tR\004name\"d\n\004City\022\016\n\002id\030\001 \001(\tR\002id"
  "\022\022\n\004name\030\002 \001(\tR\004name\022\032\n\010latitude\030\010 \001(\001R\010"
  "latitude\022\034\n\tlongitude\030\t \001(\001R\tlongitude\"\302"
  "\001\n\003Geo\022A\n\007country\030\001 \001(\0132\'.kentik.synthet"
  "ics.v202101beta1.CountryR\007country\022>\n\006reg"
  "ion\030\002 \001(\0132&.kentik.synthetics.v202101bet"
  "a1.RegionR\006region\0228\n\004city\030\003 \001(\0132$.kentik"
  ".synthetics.v202101beta1.CityR\004city\"\031\n\003D"
  "NS\022\022\n\004name\030\001 \001(\tR\004name\"\213\002\n\006IPInfo\022\016\n\002ip\030"
  "\001 \001(\tR\002ip\0225\n\003asn\030\002 \001(\0132#.kentik.syntheti"
  "cs.v202101beta1.ASNR\003asn\0225\n\003geo\030\003 \001(\0132#."
  "kentik.synthetics.v202101beta1.GeoR\003geo\022"
  "5\n\003dns\030\004 \001(\0132#.kentik.synthetics.v202101"
  "beta1.DNSR\003dns\022\033\n\tdevice_id\030\005 \001(\tR\010devic"
  "eId\022\027\n\007site_id\030\006 \001(\tR\006siteId\022\026\n\006egress\030\007"
  " \001(\tR\006egress\"(\n\006IDByIP\022\016\n\002id\030\001 \001(\tR\002id\022\016"
  "\n\002ip\030\002 \001(\tR\002ip\"\253\003\n\020TracerouteLookup\022K\n\016a"
  "gent_id_by_ip\030\001 \003(\0132&.kentik.synthetics."
  "v202101beta1.IDByIPR\013agentIdByIp\022=\n\006agen"
  "ts\030\002 \003(\0132%.kentik.synthetics.v202101beta"
  "1.AgentR\006agents\0227\n\004asns\030\003 \003(\0132#.kentik.s"
  "ynthetics.v202101beta1.ASNR\004asns\022M\n\017devi"
  "ce_id_by_ip\030\004 \003(\0132&.kentik.synthetics.v2"
  "02101beta1.IDByIPR\014deviceIdByIp\022I\n\rsite_"
  "id_by_ip\030\005 \003(\0132&.kentik.synthetics.v2021"
  "01beta1.IDByIPR\nsiteIdByIp\0228\n\003ips\030\006 \003(\0132"
  "&.kentik.synthetics.v202101beta1.IPInfoR"
  "\003ips\"\205\002\n\010TraceHop\022\020\n\003ttl\030\001 \001(\005R\003ttl\022\016\n\002i"
  "p\030\002 \001(\tR\002ip\022\030\n\007timeout\030\003 \001(\010R\007timeout\022\030\n"
  "\007latency\030\004 \001(\005R\007latency\0220\n\024min_expected_"
  "latency\030\005 \001(\005R\022minExpectedLatency\022\020\n\003asn"
  "\030\006 \001(\005R\003asn\022\022\n\004site\030\007 \001(\005R\004site\022\026\n\006regio"
  "n\030\010 \001(\005R\006region\022\026\n\006target\030\t \001(\010R\006target\022"
  "\033\n\ttrace_end\030\n \001(\010R\010traceEnd\"\334\001\n\nTracePr"
  "obe\022\027\n\007as_path\030\001 \003(\005R\006asPath\022\034\n\tcomplete"
  "d\030\002 \001(\010R\tcompleted\022\033\n\thop_count\030\003 \001(\005R\010h"
  "opCount\022\037\n\013region_path\030\004 \003(\tR\nregionPath"
  "\022\033\n\tsite_path\030\005 \003(\005R\010sitePath\022<\n\004hops\030\006 "
  "\003(\0132(.kentik.synthetics.v202101beta1.Tra"
  "ceHopR\004hops\"\273\001\n\005Trace\022\031\n\010agent_id\030\001 \001(\tR"
  "\007agentId\022\031\n\010agent_ip\030\002 \001(\tR\007agentIp\022\033\n\tt"
  "arget_ip\030\003 \001(\tR\010targetIp\022\033\n\thop_count\030\004 "
  "\001(\005R\010hopCount\022B\n\006probes\030\005 \003(\0132*.kentik.s"
  "ynthetics.v202101beta1.TraceProbeR\006probe"
  "s\"I\n\005Stats\022\030\n\007average\030\001 \001(\005R\007average\022\020\n\003"
  "max\030\002 \001(\005R\003max\022\024\n\005total\030\003 \001(\005R\005total\"\236\002\n"
  "\020TracerouteResult\022.\n\004time\030\001 \001(\0132\032.google"
  ".protobuf.TimestampR\004time\022=\n\006traces\030\002 \003("
  "\0132%.kentik.synthetics.v202101beta1.Trace"
  "R\006traces\022\033\n\thop_count\030\003 \001(\005R\010hopCount\022;\n"
  "\005count\030\004 \001(\0132%.kentik.synthetics.v202101"
  "beta1.StatsR\005count\022A\n\010distance\030\005 \001(\0132%.k"
  "entik.synthetics.v202101beta1.StatsR\010dis"
  "tance\"\332\001\n\016TracerouteInfo\0229\n\031is_trace_rou"
  "tes_truncated\030\001 \001(\010R\026isTraceRoutesTrunca"
  "ted\022+\n\022max_asn_path_count\030\002 \001(\005R\017maxAsnP"
  "athCount\022-\n\023max_site_path_count\030\003 \001(\005R\020m"
  "axSitePathCount\0221\n\025max_region_path_count"
  "\030\004 \001(\005R\022maxRegionPathCount\"\360\001\n\030GetHealth"
  "ForTestsRequest\022\020\n\003ids\030\001 \003(\tR\003ids\0229\n\nsta"
  "rt_time\030\002 \001(\0132\032.google.protobuf.Timestam"
  "pR\tstartTime\0225\n\010end_time\030\003 \001(\0132\032.google."
  "protobuf.TimestampR\007endTime\022\033\n\tagent_ids"
  "\030\004 \003(\tR\010agentIds\022\031\n\010task_ids\030\005 \003(\tR\007task"
  "Ids\022\030\n\007augment\030\006 \001(\010R\007augment\"_\n\031GetHeal"
  "thForTestsResponse\022B\n\006health\030\001 \003(\0132*.ken"
  "tik.synthetics.v202101beta1.TestHealthR\006"
  "health\"\326\001\n\026GetTraceForTestRequest\022\016\n\002id\030"
  "\001 \001(\tR\002id\0229\n\nstart_time\030\002 \001(\0132\032.google.p"
  "rotobuf.TimestampR\tstartTime\0225\n\010end_time"
  "\030\003 \001(\0132\032.google.protobuf.TimestampR\007endT"
  "ime\022\033\n\tagent_ids\030\004 \003(\tR\010agentIds\022\035\n\ntarg"
  "et_ips\030\005 \003(\tR\ttargetIps\"\226\002\n\027GetTraceForT"
  "estResponse\022J\n\007lookups\030\001 \001(\01320.kentik.sy"
  "nthetics.v202101beta1.TracerouteLookupR\007"
  "lookups\022S\n\014trace_routes\030\002 \003(\01320.kentik.s"
  "ynthetics.v202101beta1.TracerouteResultR"
  "\013traceRoutes\022Z\n\021trace_routes_info\030\003 \001(\0132"
  "..kentik.synthetics.v202101beta1.Tracero"
  "uteInfoR\017traceRoutesInfo\"\023\n\021ListAgentsRe"
  "quest\"\205\001\n\022ListAgentsResponse\022=\n\006agents\030\001"
  " \003(\0132%.kentik.synthetics.v202101beta1.Ag"
  "entR\006agents\0220\n\024invalid_agents_count\030\002 \001("
  "\rR\022invalidAgentsCount\"!\n\017GetAgentRequest"
  "\022\016\n\002id\030\001 \001(\tR\002id\"O\n\020GetAgentResponse\022;\n\005"
  "agent\030\001 \001(\0132%.kentik.synthetics.v202101b"
  "eta1.AgentR\005agent\"\200\001\n\021PatchAgentRequest\022"
  ";\n\005agent\030\001 \001(\0132%.kentik.synthetics.v2021"
  "01beta1.AgentR\005agent\022.\n\004mask\030\002 \001(\0132\032.goo"
  "gle.protobuf.FieldMaskR\004mask\"Q\n\022PatchAge"
  "ntResponse\022;\n\005agent\030\001 \001(\0132%.kentik.synth"
  "etics.v202101beta1.AgentR\005agent\"$\n\022Delet"
  "eAgentRequest\022\016\n\002id\030\001 \001(\tR\002id\"\025\n\023DeleteA"
  "gentResponse\"*\n\020ListTestsRequest\022\026\n\006pres"
  "et\030\001 \001(\010R\006preset\"\177\n\021ListTestsResponse\022:\n"
  "\005tests\030\001 \003(\0132$.kentik.synthetics.v202101"
  "beta1.TestR\005tests\022.\n\023invalid_tests_count"
  "\030\002 \001(\rR\021invalidTestsCount\"M\n\021CreateTestR"
  "equest\0228\n\004test\030\001 \001(\0132$.kentik.synthetics"
  ".v202101beta1.TestR\004test\"N\n\022CreateTestRe"
  "sponse\0228\n\004test\030\001 \001(\0132$.kentik.synthetics"
  ".v202101beta1.TestR\004test\" \n\016GetTestReque"
  "st\022\016\n\002id\030\001 \001(\tR\002id\"K\n\017GetTestResponse\0228\n"
  "\004test\030\001 \001(\0132$.kentik.synthetics.v202101b"
  "eta1.TestR\004test\"j\n\024SetTestStatusRequest\022"
  "\016\n\002id\030\001 \001(\tR\002id\022B\n\006status\030\002 \001(\0162*.kentik"
  ".synthetics.v202101beta1.TestStatusR\006sta"
  "tus\"\027\n\025SetTestStatusResponse\"|\n\020PatchTes"
  "tRequest\0228\n\004test\030\001 \001(\0132$.kentik.syntheti"
  "cs.v202101beta1.TestR\004test\022.\n\004mask\030\002 \001(\013"
  "2\032.google.protobuf.FieldMaskR\004mask\"M\n\021Pa"
  "tchTestResponse\0228\n\004test\030\001 \001(\0132$.kentik.s"
  "ynthetics.v202101beta1.TestR\004test\"#\n\021Del"
  "eteTestRequest\022\016\n\002id\030\001 \001(\tR\002id\"\024\n\022Delete"
  "TestResponse*a\n\rImplementType\022\036\n\032IMPLEME"
  "NT_TYPE_UNSPECIFIED\020\000\022\027\n\023IMPLEMENT_TYPE_"
  "RUST\020\001\022\027\n\023IMPLEMENT_TYPE_NODE\020\002*]\n\010IPFam"
  "ily\022\031\n\025IP_FAMILY_UNSPECIFIED\020\000\022\020\n\014IP_FAM"
  "ILY_V4\020\001\022\020\n\014IP_FAMILY_V6\020\002\022\022\n\016IP_FAMILY_"
  "DUAL\020\003*r\n\nTestStatus\022\033\n\027TEST_STATUS_UNSP"
  "ECIFIED\020\000\022\026\n\022TEST_STATUS_ACTIVE\020\001\022\026\n\022TES"
  "T_STATUS_PAUSED\020\002\022\027\n\023TEST_STATUS_DELETED"
  "\020\003*q\n\013AgentStatus\022\034\n\030AGENT_STATUS_UNSPEC"
  "IFIED\020\000\022\023\n\017AGENT_STATUS_OK\020\001\022\025\n\021AGENT_ST"
  "ATUS_WAIT\020\002\022\030\n\024AGENT_STATUS_DELETED\020\003*o\n"
  "\tTaskState\022\032\n\026TASK_STATE_UNSPECIFIED\020\000\022\026"
  "\n\022TASK_STATE_CREATED\020\001\022\026\n\022TASK_STATE_UPD"
  "ATED\020\002\022\026\n\022TASK_STATE_DELETED\020\003*\310\001\n\tDNSRe"
  "cord\022\032\n\026DNS_RECORD_UNSPECIFIED\020\000\022\020\n\014DNS_"
  "RECORD_A\020\001\022\023\n\017DNS_RECORD_AAAA\020\002\022\024\n\020DNS_R"
  "ECORD_CNAME\020\003\022\024\n\020DNS_RECORD_DNAME\020\004\022\021\n\rD"
  "NS_RECORD_NS\020\005\022\021\n\rDNS_RECORD_MX\020\006\022\022\n\016DNS"
  "_RECORD_PTR\020\007\022\022\n\016DNS_RECORD_SOA\020\0102\330\005\n\025Sy"
  "ntheticsDataService\022\334\002\n\021GetHealthForTest"
  "s\0228.kentik.synthetics.v202101beta1.GetHe"
  "althForTestsRequest\0329.kentik.synthetics."
  "v202101beta1.GetHealthForTestsResponse\"\321"
  "\001\222A\212\001\022&Get health status for synthetics "
  "test.\032MGet synthetics health test for lo"
  "gin user. Also returns mesh data on requ"
  "est.*\021GetHealthForTests\362\327\002\017synthetics:re"
  "ad\202\323\344\223\002*\"%/synthetics/v202101beta1/healt"
  "h/tests:\001*\022\257\002\n\017GetTraceForTest\0226.kentik."
  "synthetics.v202101beta1.GetTraceForTestR"
  "equest\0327.kentik.synthetics.v202101beta1."
  "GetTraceForTestResponse\"\252\001\222AX\022\025Get trace"
  " route data.\032.Get trace route data for t"
  "he specific test id.*\017GetTraceForTest\362\327\002"
  "\017synthetics:read\202\323\344\223\0026\"1/synthetics/v202"
  "101beta1/tests/{id}/results/trace:\001*\032.\312A"
  "\031synthetics.api.kentik.com\352\327\002\nsynthetics"
  "\220\330\002\0032\355\026\n\026SyntheticsAdminService\022\355\001\n\nList"
  "Agents\0221.kentik.synthetics.v202101beta1."
  "ListAgentsRequest\0322.kentik.synthetics.v2"
  "02101beta1.ListAgentsResponse\"x\222A5\022\014List"
  " Agents.\032\031Returns a list of agents.*\nAge"
  "ntsList\362\327\002\025admin.synthetics:read\202\323\344\223\002!\022\037"
  "/synthetics/v202101beta1/agents\022\233\002\n\010GetA"
  "gent\022/.kentik.synthetics.v202101beta1.Ge"
  "tAgentRequest\0320.kentik.synthetics.v20210"
  "1beta1.GetAgentResponse\"\253\001\222Ac\022\037Get infor"
  "mation about an agent.\0326Returns informat"
  "ion about the agent specified with id.*\010"
  "AgentGet\362\327\002\025admin.synthetics:read\202\323\344\223\002&\022"
  "$/synthetics/v202101beta1/agents/{id}\022\272\002"
  "\n\nPatchAgent\0221.kentik.synthetics.v202101"
  "beta1.PatchAgentRequest\0322.kentik.synthet"
  "ics.v202101beta1.PatchAgentResponse\"\304\001\222A"
  "r\022\017Patch an agent.\032SPartially Updates th"
  "e attributes of agent specified with id "
  "and update_mask fields.*\nAgentPatch\362\327\002\026a"
  "dmin.synthetics:write\202\323\344\223\002/2*/synthetics"
  "/v202101beta1/agents/{agent.id}:\001*\022\207\002\n\013D"
  "eleteAgent\0222.kentik.synthetics.v202101be"
  "ta1.DeleteAgentRequest\0323.kentik.syntheti"
  "cs.v202101beta1.DeleteAgentResponse\"\216\001\222A"
  "E\022\020Delete an agent.\032$Deletes the agent s"
  "pecified with id.*\013AgentDelete\362\327\002\026admin."
  "synthetics:write\202\323\344\223\002&*$/synthetics/v202"
  "101beta1/agents/{id}\022\375\001\n\tListTests\0220.ken"
  "tik.synthetics.v202101beta1.ListTestsReq"
  "uest\0321.kentik.synthetics.v202101beta1.Li"
  "stTestsResponse\"\212\001\222AH\022\026List Synthetics T"
  "ests.\032#Returns a list of syntehtics test"
  "s.*\tTestsList\362\327\002\025admin.synthetics:read\202\323"
  "\344\223\002 \022\036/synthetics/v202101beta1/tests\022\235\002\n"
  "\nCreateTest\0221.kentik.synthetics.v202101b"
  "eta1.CreateTestRequest\0322.kentik.syntheti"
  "cs.v202101beta1.CreateTestResponse\"\247\001\222Aa"
  "\022\027Create Synthetics Test.\032:Create synthe"
  "tics test from request. Returns created "
  "test.*\nTestCreate\362\327\002\026admin.synthetics:wr"
  "ite\202\323\344\223\002#\"\036/synthetics/v202101beta1/test"
  "s:\001*\022\250\002\n\007GetTest\022..kentik.synthetics.v20"
  "2101beta1.GetTestRequest\032/.kentik.synthe"
  "tics.v202101beta1.GetTestResponse\"\273\001\222At\022"
  "&Get information about Synthetics Test.\032"
  "AReturns information about synthetics te"
  "st specified with test ID.*\007TestGet\362\327\002\025a"
  "dmin.synthetics:read\202\323\344\223\002%\022#/synthetics/"
  "v202101beta1/tests/{id}\022\230\002\n\rSetTestStatu"
  "s\0224.kentik.synthetics.v202101beta1.SetTe"
  "stStatusRequest\0325.kentik.synthetics.v202"
  "101beta1.SetTestStatusResponse\"\231\001\222AG\022\025Up"
  "date a test status.\032\034Update the status o"
  "f a test.*\020TestStatusUpdate\362\327\002\026admin.syn"
  "thetics:write\202\323\344\223\002/\032*/synthetics/v202101"
  "beta1/tests/{id}/status:\001*\022\310\002\n\tPatchTest"
  "\0220.kentik.synthetics.v202101beta1.PatchT"
  "estRequest\0321.kentik.synthetics.v202101be"
  "ta1.PatchTestResponse\"\325\001\222A\204\001\022\030Patch a Sy"
  "nthetics Test.\032]Partially Updates the at"
  "tributes of synthetics test specified wi"
  "th id and update_mask fields.*\tTestPatch"
  "\362\327\002\026admin.synthetics:write\202\323\344\223\002-2(/synth"
  "etics/v202101beta1/tests/{test.id}:\001*\022\226\002"
  "\n\nDeleteTest\0221.kentik.synthetics.v202101"
  "beta1.DeleteTestRequest\0322.kentik.synthet"
  "ics.v202101beta1.DeleteTestResponse\"\240\001\222A"
  "X\022\032Delete an Synthetics Test.\032.Deletes t"
  "he synthetics test specified with id.*\nT"
  "estDelete\362\327\002\026admin.synthetics:write\202\323\344\223\002"
  "%*#/synthetics/v202101beta1/tests/{id}\0324"
  "\312A\031synthetics.api.kentik.com\352\327\002\020admin.sy"
  "nthetics\220\330\002\003B\362\003ZTgithub.com/kentik/api-s"
  "chema-public/gen/go/kentik/synthetics/v2"
  "02101beta1;synthetics\222A\230\003\022\256\001\n\031Synthetics"
  " Monitoring API\022K--- This API has been d"
  "eprecated and will be removed in the nea"
  "r future ---\"7\n\026Kentik API Engineering\022\035"
  "https://github.com/kentik/api2\013202101bet"
  "a1*\001\0022\020application/json:\020application/jso"
  "nZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Email \002\n\"\n\005t"
  "oken\022\031\010\002\032\023X-CH-Auth-API-Token \002b\026\n\t\n\005ema"
  "il\022\000\n\t\n\005token\022\000r`\n\"Kentik synthetic moni"
  "toring system\022:https://kb.kentik.com/v4/"
  "Ma00.htm#Ma00-Synthetics_Overviewb\006proto"
  "3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_sccs[79] = {
  &scc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_AgentHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_AgentTaskConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_AgentTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_ApplicationMeshTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_City_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Country_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_CreateTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_CreateTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_DNS_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_DNSTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_DnsGridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_DnsTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_FlowTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Geo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GetAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GetAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GetHealthForTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GetHealthForTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GetTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GetTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_GridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_HTTPConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_HTTPConfig_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_HTTPConfig_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_HTTPTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_HealthMoment_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_HealthMoment_OtherHealthsEntry_DoNotUse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_HealthSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_HostnameTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_IDByIP_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_IPInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_IpTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_KnockTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_ListTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_ListTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_MeshColumn_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_MeshMetric_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_MeshMetrics_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_MeshResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_PatchAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_PatchAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_PatchTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_PatchTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_PingTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Region_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_ShakeTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_SiteTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Stats_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TagTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Task_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TaskHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TestHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TestMonitoringSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TestPingSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TestSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_Trace_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TraceHop_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TraceProbe_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TraceTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TracerouteInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TracerouteLookup_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_TracerouteResult_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_UrlTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
  &scc_info_UserInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto, "kentik/synthetics/v202101beta1/synthetics.proto", 19721,
  &descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_once, descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_sccs, descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto_deps, 79, 6,
  schemas, file_default_instances, TableStruct_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto::offsets,
  file_level_metadata_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto, 79, file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto, file_level_service_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto)), true);
namespace kentik {
namespace synthetics {
namespace v202101beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImplementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[0];
}
bool ImplementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IPFamily_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[1];
}
bool IPFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[2];
}
bool TestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[3];
}
bool AgentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[4];
}
bool TaskState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DNSRecord_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto[5];
}
bool DNSRecord_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Health::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_Health_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Health::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const Health* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Health::_Internal::time(const Health* msg) {
  return *msg->time_;
}
void Health::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Health::Health(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Health)
}
Health::Health(const Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_health().empty()) {
    health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_health(),
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Health)
}

void Health::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = nullptr;
}

Health::~Health() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Health)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Health::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
}

void Health::ArenaDtor(void* object) {
  Health* _this = reinterpret_cast< Health* >(object);
  (void)_this;
}
void Health::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Health::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Health& Health::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Health_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Health::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string health = 1[json_name = "health"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Health.health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 2[json_name = "time"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Health::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string health = 1[json_name = "health"];
  if (this->health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_health().data(), static_cast<int>(this->_internal_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Health.health");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_health(), target);
  }

  // .google.protobuf.Timestamp time = 2[json_name = "time"];
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Health)
  return target;
}

size_t Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Health)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string health = 1[json_name = "health"];
  if (this->health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_health());
  }

  // .google.protobuf.Timestamp time = 2[json_name = "time"];
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Health::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Health)
  GOOGLE_DCHECK_NE(&from, this);
  const Health* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Health>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Health)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Health)
    MergeFrom(*source);
  }
}

void Health::MergeFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Health)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.health().size() > 0) {
    _internal_set_health(from._internal_health());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
}

void Health::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Health::IsInitialized() const {
  return true;
}

void Health::InternalSwap(Health* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  health_.Swap(&other->health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Health::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentTaskConfig::InitAsDefaultInstance() {
}
class AgentTaskConfig::_Internal {
 public:
};

AgentTaskConfig::AgentTaskConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.AgentTaskConfig)
}
AgentTaskConfig::AgentTaskConfig(const AgentTaskConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.AgentTaskConfig)
}

void AgentTaskConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentTaskConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_ = PROTOBUF_ULONGLONG(0);
}

AgentTaskConfig::~AgentTaskConfig() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.AgentTaskConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentTaskConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgentTaskConfig::ArenaDtor(void* object) {
  AgentTaskConfig* _this = reinterpret_cast< AgentTaskConfig* >(object);
  (void)_this;
}
void AgentTaskConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentTaskConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentTaskConfig& AgentTaskConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentTaskConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void AgentTaskConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentTaskConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string targets = 2[json_name = "targets"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.AgentTaskConfig.targets"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentTaskConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1[json_name = "id"];
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated string targets = 2[json_name = "targets"];
  for (int i = 0, n = this->_internal_targets_size(); i < n; i++) {
    const auto& s = this->_internal_targets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.AgentTaskConfig.targets");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.AgentTaskConfig)
  return target;
}

size_t AgentTaskConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string targets = 2[json_name = "targets"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(targets_.size());
  for (int i = 0, n = targets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      targets_.Get(i));
  }

  // uint64 id = 1[json_name = "id"];
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentTaskConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentTaskConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentTaskConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.AgentTaskConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.AgentTaskConfig)
    MergeFrom(*source);
  }
}

void AgentTaskConfig::MergeFrom(const AgentTaskConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void AgentTaskConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTaskConfig::CopyFrom(const AgentTaskConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.AgentTaskConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTaskConfig::IsInitialized() const {
  return true;
}

void AgentTaskConfig::InternalSwap(AgentTaskConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentTaskConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestHealth::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_TestHealth_default_instance_._instance.get_mutable()->overall_health_ = const_cast< ::kentik::synthetics::v202101beta1::Health*>(
      ::kentik::synthetics::v202101beta1::Health::internal_default_instance());
}
class TestHealth::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Health& overall_health(const TestHealth* msg);
};

const ::kentik::synthetics::v202101beta1::Health&
TestHealth::_Internal::overall_health(const TestHealth* msg) {
  return *msg->overall_health_;
}
TestHealth::TestHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena),
  health_ts_(arena),
  agent_task_config_(arena),
  mesh_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestHealth)
}
TestHealth::TestHealth(const TestHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_),
      health_ts_(from.health_ts_),
      agent_task_config_(from.agent_task_config_),
      mesh_(from.mesh_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test_id().empty()) {
    test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test_id(),
      GetArena());
  }
  if (from._internal_has_overall_health()) {
    overall_health_ = new ::kentik::synthetics::v202101beta1::Health(*from.overall_health_);
  } else {
    overall_health_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestHealth)
}

void TestHealth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  test_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  overall_health_ = nullptr;
}

TestHealth::~TestHealth() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestHealth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete overall_health_;
}

void TestHealth::ArenaDtor(void* object) {
  TestHealth* _this = reinterpret_cast< TestHealth* >(object);
  (void)_this;
}
void TestHealth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestHealth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestHealth& TestHealth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  health_ts_.Clear();
  agent_task_config_.Clear();
  mesh_.Clear();
  test_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && overall_health_ != nullptr) {
    delete overall_health_;
  }
  overall_health_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestHealth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string test_id = 1[json_name = "testId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_test_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestHealth.test_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2[json_name = "tasks"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_overall_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.Health health_ts = 4[json_name = "healthTs"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_health_ts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5[json_name = "agentTaskConfig"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agent_task_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6[json_name = "mesh"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mesh(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestHealth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string test_id = 1[json_name = "testId"];
  if (this->test_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test_id().data(), static_cast<int>(this->_internal_test_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestHealth.test_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_test_id(), target);
  }

  // repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2[json_name = "tasks"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tasks(i), target, stream);
  }

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  if (this->has_overall_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::overall_health(this), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.Health health_ts = 4[json_name = "healthTs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_health_ts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_health_ts(i), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5[json_name = "agentTaskConfig"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agent_task_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_agent_task_config(i), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6[json_name = "mesh"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mesh_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_mesh(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestHealth)
  return target;
}

size_t TestHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestHealth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.TaskHealth tasks = 2[json_name = "tasks"];
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202101beta1.Health health_ts = 4[json_name = "healthTs"];
  total_size += 1UL * this->_internal_health_ts_size();
  for (const auto& msg : this->health_ts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202101beta1.AgentTaskConfig agent_task_config = 5[json_name = "agentTaskConfig"];
  total_size += 1UL * this->_internal_agent_task_config_size();
  for (const auto& msg : this->agent_task_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202101beta1.MeshResponse mesh = 6[json_name = "mesh"];
  total_size += 1UL * this->_internal_mesh_size();
  for (const auto& msg : this->mesh_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string test_id = 1[json_name = "testId"];
  if (this->test_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test_id());
  }

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  if (this->has_overall_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overall_health_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestHealth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TestHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const TestHealth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestHealth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TestHealth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TestHealth)
    MergeFrom(*source);
  }
}

void TestHealth::MergeFrom(const TestHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  health_ts_.MergeFrom(from.health_ts_);
  agent_task_config_.MergeFrom(from.agent_task_config_);
  mesh_.MergeFrom(from.mesh_);
  if (from.test_id().size() > 0) {
    _internal_set_test_id(from._internal_test_id());
  }
  if (from.has_overall_health()) {
    _internal_mutable_overall_health()->::kentik::synthetics::v202101beta1::Health::MergeFrom(from._internal_overall_health());
  }
}

void TestHealth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TestHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestHealth::CopyFrom(const TestHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestHealth::IsInitialized() const {
  return true;
}

void TestHealth::InternalSwap(TestHealth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  health_ts_.InternalSwap(&other->health_ts_);
  agent_task_config_.InternalSwap(&other->agent_task_config_);
  mesh_.InternalSwap(&other->mesh_);
  test_id_.Swap(&other->test_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(overall_health_, other->overall_health_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestHealth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskHealth::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_TaskHealth_default_instance_._instance.get_mutable()->task_ = const_cast< ::kentik::synthetics::v202101beta1::Task*>(
      ::kentik::synthetics::v202101beta1::Task::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TaskHealth_default_instance_._instance.get_mutable()->overall_health_ = const_cast< ::kentik::synthetics::v202101beta1::Health*>(
      ::kentik::synthetics::v202101beta1::Health::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TaskHealth_default_instance_._instance.get_mutable()->target_agent_ = const_cast< ::kentik::synthetics::v202101beta1::Agent*>(
      ::kentik::synthetics::v202101beta1::Agent::internal_default_instance());
}
class TaskHealth::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Task& task(const TaskHealth* msg);
  static const ::kentik::synthetics::v202101beta1::Health& overall_health(const TaskHealth* msg);
  static const ::kentik::synthetics::v202101beta1::Agent& target_agent(const TaskHealth* msg);
};

const ::kentik::synthetics::v202101beta1::Task&
TaskHealth::_Internal::task(const TaskHealth* msg) {
  return *msg->task_;
}
const ::kentik::synthetics::v202101beta1::Health&
TaskHealth::_Internal::overall_health(const TaskHealth* msg) {
  return *msg->overall_health_;
}
const ::kentik::synthetics::v202101beta1::Agent&
TaskHealth::_Internal::target_agent(const TaskHealth* msg) {
  return *msg->target_agent_;
}
TaskHealth::TaskHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TaskHealth)
}
TaskHealth::TaskHealth(const TaskHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_task()) {
    task_ = new ::kentik::synthetics::v202101beta1::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  if (from._internal_has_overall_health()) {
    overall_health_ = new ::kentik::synthetics::v202101beta1::Health(*from.overall_health_);
  } else {
    overall_health_ = nullptr;
  }
  if (from._internal_has_target_agent()) {
    target_agent_ = new ::kentik::synthetics::v202101beta1::Agent(*from.target_agent_);
  } else {
    target_agent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TaskHealth)
}

void TaskHealth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&task_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&target_agent_) -
      reinterpret_cast<char*>(&task_)) + sizeof(target_agent_));
}

TaskHealth::~TaskHealth() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TaskHealth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete task_;
  if (this != internal_default_instance()) delete overall_health_;
  if (this != internal_default_instance()) delete target_agent_;
}

void TaskHealth::ArenaDtor(void* object) {
  TaskHealth* _this = reinterpret_cast< TaskHealth* >(object);
  (void)_this;
}
void TaskHealth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskHealth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskHealth& TaskHealth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TaskHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TaskHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  if (GetArena() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  if (GetArena() == nullptr && overall_health_ != nullptr) {
    delete overall_health_;
  }
  overall_health_ = nullptr;
  if (GetArena() == nullptr && target_agent_ != nullptr) {
    delete target_agent_;
  }
  target_agent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskHealth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Task task = 1[json_name = "task"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2[json_name = "agents"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_overall_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Agent target_agent = 4[json_name = "targetAgent"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskHealth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TaskHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Task task = 1[json_name = "task"];
  if (this->has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task(this), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2[json_name = "agents"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_agents(i), target, stream);
  }

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  if (this->has_overall_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::overall_health(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.Agent target_agent = 4[json_name = "targetAgent"];
  if (this->has_target_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::target_agent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TaskHealth)
  return target;
}

size_t TaskHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TaskHealth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.AgentHealth agents = 2[json_name = "agents"];
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kentik.synthetics.v202101beta1.Task task = 1[json_name = "task"];
  if (this->has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  if (this->has_overall_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overall_health_);
  }

  // .kentik.synthetics.v202101beta1.Agent target_agent = 4[json_name = "targetAgent"];
  if (this->has_target_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_agent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskHealth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TaskHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskHealth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskHealth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TaskHealth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TaskHealth)
    MergeFrom(*source);
  }
}

void TaskHealth::MergeFrom(const TaskHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TaskHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.has_task()) {
    _internal_mutable_task()->::kentik::synthetics::v202101beta1::Task::MergeFrom(from._internal_task());
  }
  if (from.has_overall_health()) {
    _internal_mutable_overall_health()->::kentik::synthetics::v202101beta1::Health::MergeFrom(from._internal_overall_health());
  }
  if (from.has_target_agent()) {
    _internal_mutable_target_agent()->::kentik::synthetics::v202101beta1::Agent::MergeFrom(from._internal_target_agent());
  }
}

void TaskHealth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TaskHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskHealth::CopyFrom(const TaskHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TaskHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskHealth::IsInitialized() const {
  return true;
}

void TaskHealth::InternalSwap(TaskHealth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TaskHealth, target_agent_)
      + sizeof(TaskHealth::target_agent_)
      - PROTOBUF_FIELD_OFFSET(TaskHealth, task_)>(
          reinterpret_cast<char*>(&task_),
          reinterpret_cast<char*>(&other->task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskHealth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentHealth::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_AgentHealth_default_instance_._instance.get_mutable()->agent_ = const_cast< ::kentik::synthetics::v202101beta1::Agent*>(
      ::kentik::synthetics::v202101beta1::Agent::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_AgentHealth_default_instance_._instance.get_mutable()->overall_health_ = const_cast< ::kentik::synthetics::v202101beta1::Health*>(
      ::kentik::synthetics::v202101beta1::Health::internal_default_instance());
}
class AgentHealth::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Agent& agent(const AgentHealth* msg);
  static const ::kentik::synthetics::v202101beta1::Health& overall_health(const AgentHealth* msg);
};

const ::kentik::synthetics::v202101beta1::Agent&
AgentHealth::_Internal::agent(const AgentHealth* msg) {
  return *msg->agent_;
}
const ::kentik::synthetics::v202101beta1::Health&
AgentHealth::_Internal::overall_health(const AgentHealth* msg) {
  return *msg->overall_health_;
}
AgentHealth::AgentHealth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  health_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.AgentHealth)
}
AgentHealth::AgentHealth(const AgentHealth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      health_(from.health_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent()) {
    agent_ = new ::kentik::synthetics::v202101beta1::Agent(*from.agent_);
  } else {
    agent_ = nullptr;
  }
  if (from._internal_has_overall_health()) {
    overall_health_ = new ::kentik::synthetics::v202101beta1::Health(*from.overall_health_);
  } else {
    overall_health_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.AgentHealth)
}

void AgentHealth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&agent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&overall_health_) -
      reinterpret_cast<char*>(&agent_)) + sizeof(overall_health_));
}

AgentHealth::~AgentHealth() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.AgentHealth)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentHealth::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_;
  if (this != internal_default_instance()) delete overall_health_;
}

void AgentHealth::ArenaDtor(void* object) {
  AgentHealth* _this = reinterpret_cast< AgentHealth* >(object);
  (void)_this;
}
void AgentHealth::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentHealth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentHealth& AgentHealth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentHealth_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void AgentHealth::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.AgentHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  health_.Clear();
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
  if (GetArena() == nullptr && overall_health_ != nullptr) {
    delete overall_health_;
  }
  overall_health_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentHealth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2[json_name = "health"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_health(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_overall_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentHealth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.AgentHealth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  if (this->has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent(this), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2[json_name = "health"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_health_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_health(i), target, stream);
  }

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  if (this->has_overall_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::overall_health(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.AgentHealth)
  return target;
}

size_t AgentHealth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.AgentHealth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.HealthMoment health = 2[json_name = "health"];
  total_size += 1UL * this->_internal_health_size();
  for (const auto& msg : this->health_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  if (this->has_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_);
  }

  // .kentik.synthetics.v202101beta1.Health overall_health = 3[json_name = "overallHealth"];
  if (this->has_overall_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overall_health_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentHealth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.AgentHealth)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentHealth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentHealth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.AgentHealth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.AgentHealth)
    MergeFrom(*source);
  }
}

void AgentHealth::MergeFrom(const AgentHealth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.AgentHealth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  health_.MergeFrom(from.health_);
  if (from.has_agent()) {
    _internal_mutable_agent()->::kentik::synthetics::v202101beta1::Agent::MergeFrom(from._internal_agent());
  }
  if (from.has_overall_health()) {
    _internal_mutable_overall_health()->::kentik::synthetics::v202101beta1::Health::MergeFrom(from._internal_overall_health());
  }
}

void AgentHealth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.AgentHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentHealth::CopyFrom(const AgentHealth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.AgentHealth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentHealth::IsInitialized() const {
  return true;
}

void AgentHealth::InternalSwap(AgentHealth* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  health_.InternalSwap(&other->health_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentHealth, overall_health_)
      + sizeof(AgentHealth::overall_health_)
      - PROTOBUF_FIELD_OFFSET(AgentHealth, agent_)>(
          reinterpret_cast<char*>(&agent_),
          reinterpret_cast<char*>(&other->agent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentHealth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HealthMoment_OtherHealthsEntry_DoNotUse::HealthMoment_OtherHealthsEntry_DoNotUse() {}
HealthMoment_OtherHealthsEntry_DoNotUse::HealthMoment_OtherHealthsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HealthMoment_OtherHealthsEntry_DoNotUse::MergeFrom(const HealthMoment_OtherHealthsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HealthMoment_OtherHealthsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HealthMoment_OtherHealthsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HealthMoment::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_HealthMoment_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_HealthMoment_default_instance_._instance.get_mutable()->overall_health_ = const_cast< ::kentik::synthetics::v202101beta1::Health*>(
      ::kentik::synthetics::v202101beta1::Health::internal_default_instance());
}
class HealthMoment::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const HealthMoment* msg);
  static const ::kentik::synthetics::v202101beta1::Health& overall_health(const HealthMoment* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
HealthMoment::_Internal::time(const HealthMoment* msg) {
  return *msg->time_;
}
const ::kentik::synthetics::v202101beta1::Health&
HealthMoment::_Internal::overall_health(const HealthMoment* msg) {
  return *msg->overall_health_;
}
void HealthMoment::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
HealthMoment::HealthMoment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  other_healths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HealthMoment)
}
HealthMoment::HealthMoment(const HealthMoment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  other_healths_.MergeFrom(from.other_healths_);
  src_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_src_ip().empty()) {
    src_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_src_ip(),
      GetArena());
  }
  dst_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dst_ip().empty()) {
    dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dst_ip(),
      GetArena());
  }
  latency_health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_latency_health().empty()) {
    latency_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_latency_health(),
      GetArena());
  }
  packet_loss_health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_packet_loss_health().empty()) {
    packet_loss_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_packet_loss_health(),
      GetArena());
  }
  jitter_health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_jitter_health().empty()) {
    jitter_health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_jitter_health(),
      GetArena());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  task_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_type().empty()) {
    task_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_task_type(),
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_overall_health()) {
    overall_health_ = new ::kentik::synthetics::v202101beta1::Health(*from.overall_health_);
  } else {
    overall_health_ = nullptr;
  }
  ::memcpy(&packet_loss_, &from.packet_loss_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&packet_loss_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HealthMoment)
}

void HealthMoment::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HealthMoment_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  src_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latency_health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_loss_health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jitter_health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&time_)) + sizeof(status_));
}

HealthMoment::~HealthMoment() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HealthMoment)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthMoment::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  src_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latency_health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  packet_loss_health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  jitter_health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  task_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete overall_health_;
}

void HealthMoment::ArenaDtor(void* object) {
  HealthMoment* _this = reinterpret_cast< HealthMoment* >(object);
  (void)_this;
}
void HealthMoment::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthMoment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthMoment& HealthMoment::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthMoment_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HealthMoment::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HealthMoment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  other_healths_.Clear();
  src_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latency_health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  packet_loss_health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jitter_health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  task_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArena() == nullptr && overall_health_ != nullptr) {
    delete overall_health_;
  }
  overall_health_ = nullptr;
  ::memset(&packet_loss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&packet_loss_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthMoment::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1[json_name = "time"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string src_ip = 2[json_name = "srcIp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_src_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HealthMoment.src_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dst_ip = 3[json_name = "dstIp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dst_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HealthMoment.dst_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double packet_loss = 4[json_name = "packetLoss"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          packet_loss_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 avg_latency = 5[json_name = "avgLatency"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          avg_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 avg_weighted_latency = 6[json_name = "avgWeightedLatency"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          avg_weighted_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rolling_avg_latency = 7[json_name = "rollingAvgLatency"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rolling_avg_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rolling_stddev_latency = 8[json_name = "rollingStddevLatency"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          rolling_stddev_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rolling_avg_weighted_latency = 9[json_name = "rollingAvgWeightedLatency"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          rolling_avg_weighted_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string latency_health = 10[json_name = "latencyHealth"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_latency_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HealthMoment.latency_health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string packet_loss_health = 11[json_name = "packetLossHealth"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_packet_loss_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Health overall_health = 12[json_name = "overallHealth"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_overall_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 avg_jitter = 13[json_name = "avgJitter"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          avg_jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rolling_avg_jitter = 14[json_name = "rollingAvgJitter"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          rolling_avg_jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rolling_std_jitter = 15[json_name = "rollingStdJitter"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          rolling_std_jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string jitter_health = 16[json_name = "jitterHealth"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_jitter_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HealthMoment.jitter_health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 17[json_name = "data"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HealthMoment.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 18[json_name = "size"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 status = 19[json_name = "status"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string task_type = 20[json_name = "taskType"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_task_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HealthMoment.task_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> other_healths = 21[json_name = "otherHealths"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&other_healths_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthMoment::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HealthMoment)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // string src_ip = 2[json_name = "srcIp"];
  if (this->src_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_src_ip().data(), static_cast<int>(this->_internal_src_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HealthMoment.src_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_src_ip(), target);
  }

  // string dst_ip = 3[json_name = "dstIp"];
  if (this->dst_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst_ip().data(), static_cast<int>(this->_internal_dst_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HealthMoment.dst_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dst_ip(), target);
  }

  // double packet_loss = 4[json_name = "packetLoss"];
  if (!(this->packet_loss() <= 0 && this->packet_loss() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_packet_loss(), target);
  }

  // uint32 avg_latency = 5[json_name = "avgLatency"];
  if (this->avg_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_avg_latency(), target);
  }

  // uint32 avg_weighted_latency = 6[json_name = "avgWeightedLatency"];
  if (this->avg_weighted_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_avg_weighted_latency(), target);
  }

  // uint32 rolling_avg_latency = 7[json_name = "rollingAvgLatency"];
  if (this->rolling_avg_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_rolling_avg_latency(), target);
  }

  // uint32 rolling_stddev_latency = 8[json_name = "rollingStddevLatency"];
  if (this->rolling_stddev_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_rolling_stddev_latency(), target);
  }

  // uint32 rolling_avg_weighted_latency = 9[json_name = "rollingAvgWeightedLatency"];
  if (this->rolling_avg_weighted_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_rolling_avg_weighted_latency(), target);
  }

  // string latency_health = 10[json_name = "latencyHealth"];
  if (this->latency_health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_latency_health().data(), static_cast<int>(this->_internal_latency_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HealthMoment.latency_health");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_latency_health(), target);
  }

  // string packet_loss_health = 11[json_name = "packetLossHealth"];
  if (this->packet_loss_health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_packet_loss_health().data(), static_cast<int>(this->_internal_packet_loss_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HealthMoment.packet_loss_health");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_packet_loss_health(), target);
  }

  // .kentik.synthetics.v202101beta1.Health overall_health = 12[json_name = "overallHealth"];
  if (this->has_overall_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::overall_health(this), target, stream);
  }

  // uint32 avg_jitter = 13[json_name = "avgJitter"];
  if (this->avg_jitter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_avg_jitter(), target);
  }

  // uint32 rolling_avg_jitter = 14[json_name = "rollingAvgJitter"];
  if (this->rolling_avg_jitter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_rolling_avg_jitter(), target);
  }

  // uint32 rolling_std_jitter = 15[json_name = "rollingStdJitter"];
  if (this->rolling_std_jitter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_rolling_std_jitter(), target);
  }

  // string jitter_health = 16[json_name = "jitterHealth"];
  if (this->jitter_health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_jitter_health().data(), static_cast<int>(this->_internal_jitter_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HealthMoment.jitter_health");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_jitter_health(), target);
  }

  // string data = 17[json_name = "data"];
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HealthMoment.data");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_data(), target);
  }

  // uint32 size = 18[json_name = "size"];
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_size(), target);
  }

  // uint32 status = 19[json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_status(), target);
  }

  // string task_type = 20[json_name = "taskType"];
  if (this->task_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_type().data(), static_cast<int>(this->_internal_task_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HealthMoment.task_type");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_task_type(), target);
  }

  // map<string, string> other_healths = 21[json_name = "otherHealths"];
  if (!this->_internal_other_healths().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202101beta1.HealthMoment.OtherHealthsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202101beta1.HealthMoment.OtherHealthsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_other_healths().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_other_healths().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_other_healths().begin();
          it != this->_internal_other_healths().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HealthMoment_OtherHealthsEntry_DoNotUse::Funcs::InternalSerialize(21, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_other_healths().begin();
          it != this->_internal_other_healths().end(); ++it) {
        target = HealthMoment_OtherHealthsEntry_DoNotUse::Funcs::InternalSerialize(21, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HealthMoment)
  return target;
}

size_t HealthMoment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HealthMoment)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> other_healths = 21[json_name = "otherHealths"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_other_healths_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_other_healths().begin();
      it != this->_internal_other_healths().end(); ++it) {
    total_size += HealthMoment_OtherHealthsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string src_ip = 2[json_name = "srcIp"];
  if (this->src_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_src_ip());
  }

  // string dst_ip = 3[json_name = "dstIp"];
  if (this->dst_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst_ip());
  }

  // string latency_health = 10[json_name = "latencyHealth"];
  if (this->latency_health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_latency_health());
  }

  // string packet_loss_health = 11[json_name = "packetLossHealth"];
  if (this->packet_loss_health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_packet_loss_health());
  }

  // string jitter_health = 16[json_name = "jitterHealth"];
  if (this->jitter_health().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_jitter_health());
  }

  // string data = 17[json_name = "data"];
  if (this->data().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // string task_type = 20[json_name = "taskType"];
  if (this->task_type().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_type());
  }

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .kentik.synthetics.v202101beta1.Health overall_health = 12[json_name = "overallHealth"];
  if (this->has_overall_health()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *overall_health_);
  }

  // double packet_loss = 4[json_name = "packetLoss"];
  if (!(this->packet_loss() <= 0 && this->packet_loss() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 avg_latency = 5[json_name = "avgLatency"];
  if (this->avg_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avg_latency());
  }

  // uint32 avg_weighted_latency = 6[json_name = "avgWeightedLatency"];
  if (this->avg_weighted_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avg_weighted_latency());
  }

  // uint32 rolling_avg_latency = 7[json_name = "rollingAvgLatency"];
  if (this->rolling_avg_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rolling_avg_latency());
  }

  // uint32 rolling_stddev_latency = 8[json_name = "rollingStddevLatency"];
  if (this->rolling_stddev_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rolling_stddev_latency());
  }

  // uint32 rolling_avg_weighted_latency = 9[json_name = "rollingAvgWeightedLatency"];
  if (this->rolling_avg_weighted_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rolling_avg_weighted_latency());
  }

  // uint32 avg_jitter = 13[json_name = "avgJitter"];
  if (this->avg_jitter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_avg_jitter());
  }

  // uint32 rolling_avg_jitter = 14[json_name = "rollingAvgJitter"];
  if (this->rolling_avg_jitter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rolling_avg_jitter());
  }

  // uint32 rolling_std_jitter = 15[json_name = "rollingStdJitter"];
  if (this->rolling_std_jitter() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rolling_std_jitter());
  }

  // uint32 size = 18[json_name = "size"];
  if (this->size() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  // uint32 status = 19[json_name = "status"];
  if (this->status() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthMoment::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.HealthMoment)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthMoment* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthMoment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.HealthMoment)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.HealthMoment)
    MergeFrom(*source);
  }
}

void HealthMoment::MergeFrom(const HealthMoment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HealthMoment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  other_healths_.MergeFrom(from.other_healths_);
  if (from.src_ip().size() > 0) {
    _internal_set_src_ip(from._internal_src_ip());
  }
  if (from.dst_ip().size() > 0) {
    _internal_set_dst_ip(from._internal_dst_ip());
  }
  if (from.latency_health().size() > 0) {
    _internal_set_latency_health(from._internal_latency_health());
  }
  if (from.packet_loss_health().size() > 0) {
    _internal_set_packet_loss_health(from._internal_packet_loss_health());
  }
  if (from.jitter_health().size() > 0) {
    _internal_set_jitter_health(from._internal_jitter_health());
  }
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.task_type().size() > 0) {
    _internal_set_task_type(from._internal_task_type());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.has_overall_health()) {
    _internal_mutable_overall_health()->::kentik::synthetics::v202101beta1::Health::MergeFrom(from._internal_overall_health());
  }
  if (!(from.packet_loss() <= 0 && from.packet_loss() >= 0)) {
    _internal_set_packet_loss(from._internal_packet_loss());
  }
  if (from.avg_latency() != 0) {
    _internal_set_avg_latency(from._internal_avg_latency());
  }
  if (from.avg_weighted_latency() != 0) {
    _internal_set_avg_weighted_latency(from._internal_avg_weighted_latency());
  }
  if (from.rolling_avg_latency() != 0) {
    _internal_set_rolling_avg_latency(from._internal_rolling_avg_latency());
  }
  if (from.rolling_stddev_latency() != 0) {
    _internal_set_rolling_stddev_latency(from._internal_rolling_stddev_latency());
  }
  if (from.rolling_avg_weighted_latency() != 0) {
    _internal_set_rolling_avg_weighted_latency(from._internal_rolling_avg_weighted_latency());
  }
  if (from.avg_jitter() != 0) {
    _internal_set_avg_jitter(from._internal_avg_jitter());
  }
  if (from.rolling_avg_jitter() != 0) {
    _internal_set_rolling_avg_jitter(from._internal_rolling_avg_jitter());
  }
  if (from.rolling_std_jitter() != 0) {
    _internal_set_rolling_std_jitter(from._internal_rolling_std_jitter());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void HealthMoment::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.HealthMoment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthMoment::CopyFrom(const HealthMoment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HealthMoment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthMoment::IsInitialized() const {
  return true;
}

void HealthMoment::InternalSwap(HealthMoment* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  other_healths_.Swap(&other->other_healths_);
  src_ip_.Swap(&other->src_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_ip_.Swap(&other->dst_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latency_health_.Swap(&other->latency_health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  packet_loss_health_.Swap(&other->packet_loss_health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  jitter_health_.Swap(&other->jitter_health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  task_type_.Swap(&other->task_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthMoment, status_)
      + sizeof(HealthMoment::status_)
      - PROTOBUF_FIELD_OFFSET(HealthMoment, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthMoment::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Agent::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_Agent_default_instance_._instance.get_mutable()->last_authed_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Agent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_authed(const Agent* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Agent::_Internal::last_authed(const Agent* msg) {
  return *msg->last_authed_;
}
void Agent::clear_last_authed() {
  if (GetArena() == nullptr && last_authed_ != nullptr) {
    delete last_authed_;
  }
  last_authed_ = nullptr;
}
Agent::Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  test_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Agent)
}
Agent::Agent(const Agent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      test_ids_(from.test_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_os().empty()) {
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_os(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_id().empty()) {
    site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_id(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  challenge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_challenge().empty()) {
    challenge_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_challenge(),
      GetArena());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_city(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  local_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_ip().empty()) {
    local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_ip(),
      GetArena());
  }
  cloud_vpc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cloud_vpc().empty()) {
    cloud_vpc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cloud_vpc(),
      GetArena());
  }
  if (from._internal_has_last_authed()) {
    last_authed_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_authed_);
  } else {
    last_authed_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&agent_impl_) -
    reinterpret_cast<char*>(&status_)) + sizeof(agent_impl_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Agent)
}

void Agent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  challenge_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloud_vpc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_authed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_impl_) -
      reinterpret_cast<char*>(&last_authed_)) + sizeof(agent_impl_));
}

Agent::~Agent() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Agent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Agent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  challenge_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloud_vpc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_authed_;
}

void Agent::ArenaDtor(void* object) {
  Agent* _this = reinterpret_cast< Agent* >(object);
  (void)_this;
}
void Agent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Agent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Agent& Agent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Agent_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ids_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  challenge_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloud_vpc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && last_authed_ != nullptr) {
    delete last_authed_;
  }
  last_authed_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_impl_) -
      reinterpret_cast<char*>(&status_)) + sizeof(agent_impl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Agent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.AgentStatus status = 3[json_name = "status"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kentik::synthetics::v202101beta1::AgentStatus>(val));
        } else goto handle_unusual;
        continue;
      // string alias = 4[json_name = "alias"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 5[json_name = "type"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string os = 6[json_name = "os"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.os"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 7[json_name = "ip"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lat = 8[json_name = "lat"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double long = 9[json_name = "long"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          long__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_authed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.IPFamily family = 11[json_name = "family"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_family(static_cast<::kentik::synthetics::v202101beta1::IPFamily>(val));
        } else goto handle_unusual;
        continue;
      // uint32 asn = 12[json_name = "asn"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string site_id = 13[json_name = "siteId"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_site_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.site_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 14[json_name = "version"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string challenge = 15[json_name = "challenge"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_challenge();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.challenge"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 16[json_name = "city"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 17[json_name = "region"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 18[json_name = "country"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string test_ids = 19[json_name = "testIds"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_test_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.test_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // string local_ip = 20[json_name = "localIp"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_local_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.local_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cloud_vpc = 21[json_name = "cloudVpc"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_cloud_vpc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Agent.cloud_vpc"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22[json_name = "agentImpl"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_agent_impl(static_cast<::kentik::synthetics::v202101beta1::ImplementType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Agent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .kentik.synthetics.v202101beta1.AgentStatus status = 3[json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string alias = 4[json_name = "alias"];
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  // string type = 5[json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // string os = 6[json_name = "os"];
  if (this->os().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.os");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_os(), target);
  }

  // string ip = 7[json_name = "ip"];
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.ip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ip(), target);
  }

  // double lat = 8[json_name = "lat"];
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_lat(), target);
  }

  // double long = 9[json_name = "long"];
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_long_(), target);
  }

  // .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed"];
  if (this->has_last_authed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::last_authed(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.IPFamily family = 11[json_name = "family"];
  if (this->family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_family(), target);
  }

  // uint32 asn = 12[json_name = "asn"];
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_asn(), target);
  }

  // string site_id = 13[json_name = "siteId"];
  if (this->site_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_id().data(), static_cast<int>(this->_internal_site_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.site_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_site_id(), target);
  }

  // string version = 14[json_name = "version"];
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.version");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_version(), target);
  }

  // string challenge = 15[json_name = "challenge"];
  if (this->challenge().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_challenge().data(), static_cast<int>(this->_internal_challenge().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.challenge");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_challenge(), target);
  }

  // string city = 16[json_name = "city"];
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.city");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_city(), target);
  }

  // string region = 17[json_name = "region"];
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.region");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_region(), target);
  }

  // string country = 18[json_name = "country"];
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.country");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_country(), target);
  }

  // repeated string test_ids = 19[json_name = "testIds"];
  for (int i = 0, n = this->_internal_test_ids_size(); i < n; i++) {
    const auto& s = this->_internal_test_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.test_ids");
    target = stream->WriteString(19, s, target);
  }

  // string local_ip = 20[json_name = "localIp"];
  if (this->local_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_ip().data(), static_cast<int>(this->_internal_local_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.local_ip");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_local_ip(), target);
  }

  // string cloud_vpc = 21[json_name = "cloudVpc"];
  if (this->cloud_vpc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloud_vpc().data(), static_cast<int>(this->_internal_cloud_vpc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Agent.cloud_vpc");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_cloud_vpc(), target);
  }

  // .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22[json_name = "agentImpl"];
  if (this->agent_impl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->_internal_agent_impl(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Agent)
  return target;
}

size_t Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Agent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string test_ids = 19[json_name = "testIds"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(test_ids_.size());
  for (int i = 0, n = test_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      test_ids_.Get(i));
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string alias = 4[json_name = "alias"];
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string type = 5[json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string os = 6[json_name = "os"];
  if (this->os().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string ip = 7[json_name = "ip"];
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string site_id = 13[json_name = "siteId"];
  if (this->site_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_id());
  }

  // string version = 14[json_name = "version"];
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string challenge = 15[json_name = "challenge"];
  if (this->challenge().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_challenge());
  }

  // string city = 16[json_name = "city"];
  if (this->city().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string region = 17[json_name = "region"];
  if (this->region().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string country = 18[json_name = "country"];
  if (this->country().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string local_ip = 20[json_name = "localIp"];
  if (this->local_ip().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_ip());
  }

  // string cloud_vpc = 21[json_name = "cloudVpc"];
  if (this->cloud_vpc().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloud_vpc());
  }

  // .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed"];
  if (this->has_last_authed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_authed_);
  }

  // .kentik.synthetics.v202101beta1.AgentStatus status = 3[json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .kentik.synthetics.v202101beta1.IPFamily family = 11[json_name = "family"];
  if (this->family() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_family());
  }

  // double lat = 8[json_name = "lat"];
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double long = 9[json_name = "long"];
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 asn = 12[json_name = "asn"];
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // .kentik.synthetics.v202101beta1.ImplementType agent_impl = 22[json_name = "agentImpl"];
  if (this->agent_impl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_agent_impl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Agent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  const Agent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Agent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Agent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Agent)
    MergeFrom(*source);
  }
}

void Agent::MergeFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_ids_.MergeFrom(from.test_ids_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.os().size() > 0) {
    _internal_set_os(from._internal_os());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.site_id().size() > 0) {
    _internal_set_site_id(from._internal_site_id());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.challenge().size() > 0) {
    _internal_set_challenge(from._internal_challenge());
  }
  if (from.city().size() > 0) {
    _internal_set_city(from._internal_city());
  }
  if (from.region().size() > 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
  if (from.local_ip().size() > 0) {
    _internal_set_local_ip(from._internal_local_ip());
  }
  if (from.cloud_vpc().size() > 0) {
    _internal_set_cloud_vpc(from._internal_cloud_vpc());
  }
  if (from.has_last_authed()) {
    _internal_mutable_last_authed()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_authed());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.family() != 0) {
    _internal_set_family(from._internal_family());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.long_() <= 0 && from.long_() >= 0)) {
    _internal_set_long_(from._internal_long_());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.agent_impl() != 0) {
    _internal_set_agent_impl(from._internal_agent_impl());
  }
}

void Agent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agent::CopyFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent::IsInitialized() const {
  return true;
}

void Agent::InternalSwap(Agent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  test_ids_.InternalSwap(&other->test_ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.Swap(&other->os_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_id_.Swap(&other->site_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  challenge_.Swap(&other->challenge_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_ip_.Swap(&other->local_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloud_vpc_.Swap(&other->cloud_vpc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Agent, agent_impl_)
      + sizeof(Agent::agent_impl_)
      - PROTOBUF_FIELD_OFFSET(Agent, last_authed_)>(
          reinterpret_cast<char*>(&last_authed_),
          reinterpret_cast<char*>(&other->last_authed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Agent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PingTaskDefinition::InitAsDefaultInstance() {
}
class PingTaskDefinition::_Internal {
 public:
};

PingTaskDefinition::PingTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PingTaskDefinition)
}
PingTaskDefinition::PingTaskDefinition(const PingTaskDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&period_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PingTaskDefinition)
}

void PingTaskDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PingTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&period_)) + sizeof(count_));
}

PingTaskDefinition::~PingTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PingTaskDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PingTaskDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PingTaskDefinition::ArenaDtor(void* object) {
  PingTaskDefinition* _this = reinterpret_cast< PingTaskDefinition* >(object);
  (void)_this;
}
void PingTaskDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingTaskDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingTaskDefinition& PingTaskDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PingTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&period_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingTaskDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.PingTaskDefinition.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 period = 2[json_name = "period"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 3[json_name = "expiry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 4[json_name = "count"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingTaskDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.PingTaskDefinition.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_period(), target);
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiry(), target);
  }

  // uint32 count = 4[json_name = "count"];
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PingTaskDefinition)
  return target;
}

size_t PingTaskDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  // uint32 count = 4[json_name = "count"];
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingTaskDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const PingTaskDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingTaskDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.PingTaskDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.PingTaskDefinition)
    MergeFrom(*source);
  }
}

void PingTaskDefinition::MergeFrom(const PingTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void PingTaskDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingTaskDefinition::CopyFrom(const PingTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PingTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingTaskDefinition::IsInitialized() const {
  return true;
}

void PingTaskDefinition::InternalSwap(PingTaskDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingTaskDefinition, count_)
      + sizeof(PingTaskDefinition::count_)
      - PROTOBUF_FIELD_OFFSET(PingTaskDefinition, period_)>(
          reinterpret_cast<char*>(&period_),
          reinterpret_cast<char*>(&other->period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PingTaskDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceTaskDefinition::InitAsDefaultInstance() {
}
class TraceTaskDefinition::_Internal {
 public:
};

TraceTaskDefinition::TraceTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TraceTaskDefinition)
}
TraceTaskDefinition::TraceTaskDefinition(const TraceTaskDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&period_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TraceTaskDefinition)
}

void TraceTaskDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&period_)) + sizeof(limit_));
}

TraceTaskDefinition::~TraceTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceTaskDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceTaskDefinition::ArenaDtor(void* object) {
  TraceTaskDefinition* _this = reinterpret_cast< TraceTaskDefinition* >(object);
  (void)_this;
}
void TraceTaskDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceTaskDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceTaskDefinition& TraceTaskDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TraceTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&period_)) + sizeof(limit_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceTaskDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TraceTaskDefinition.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 period = 2[json_name = "period"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 3[json_name = "expiry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 4[json_name = "limit"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceTaskDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TraceTaskDefinition.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_period(), target);
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiry(), target);
  }

  // uint32 limit = 4[json_name = "limit"];
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_limit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  return target;
}

size_t TraceTaskDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  // uint32 limit = 4[json_name = "limit"];
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceTaskDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceTaskDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceTaskDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TraceTaskDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TraceTaskDefinition)
    MergeFrom(*source);
  }
}

void TraceTaskDefinition::MergeFrom(const TraceTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
}

void TraceTaskDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceTaskDefinition::CopyFrom(const TraceTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TraceTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceTaskDefinition::IsInitialized() const {
  return true;
}

void TraceTaskDefinition::InternalSwap(TraceTaskDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, limit_)
      + sizeof(TraceTaskDefinition::limit_)
      - PROTOBUF_FIELD_OFFSET(TraceTaskDefinition, period_)>(
          reinterpret_cast<char*>(&period_),
          reinterpret_cast<char*>(&other->period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceTaskDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HTTPTaskDefinition::InitAsDefaultInstance() {
}
class HTTPTaskDefinition::_Internal {
 public:
};

HTTPTaskDefinition::HTTPTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
}
HTTPTaskDefinition::HTTPTaskDefinition(const HTTPTaskDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
    reinterpret_cast<char*>(&period_)) + sizeof(expiry_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
}

void HTTPTaskDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTTPTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&period_)) + sizeof(expiry_));
}

HTTPTaskDefinition::~HTTPTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HTTPTaskDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HTTPTaskDefinition::ArenaDtor(void* object) {
  HTTPTaskDefinition* _this = reinterpret_cast< HTTPTaskDefinition* >(object);
  (void)_this;
}
void HTTPTaskDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HTTPTaskDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTTPTaskDefinition& HTTPTaskDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTTPTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HTTPTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&period_)) + sizeof(expiry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HTTPTaskDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HTTPTaskDefinition.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 period = 2[json_name = "period"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 3[json_name = "expiry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTTPTaskDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HTTPTaskDefinition.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_period(), target);
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  return target;
}

size_t HTTPTaskDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTTPTaskDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPTaskDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTTPTaskDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
    MergeFrom(*source);
  }
}

void HTTPTaskDefinition::MergeFrom(const HTTPTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
}

void HTTPTaskDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPTaskDefinition::CopyFrom(const HTTPTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HTTPTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPTaskDefinition::IsInitialized() const {
  return true;
}

void HTTPTaskDefinition::InternalSwap(HTTPTaskDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, expiry_)
      + sizeof(HTTPTaskDefinition::expiry_)
      - PROTOBUF_FIELD_OFFSET(HTTPTaskDefinition, period_)>(
          reinterpret_cast<char*>(&period_),
          reinterpret_cast<char*>(&other->period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HTTPTaskDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Task::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_Task_default_instance_.ping_ = const_cast< ::kentik::synthetics::v202101beta1::PingTaskDefinition*>(
      ::kentik::synthetics::v202101beta1::PingTaskDefinition::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Task_default_instance_.traceroute_ = const_cast< ::kentik::synthetics::v202101beta1::TraceTaskDefinition*>(
      ::kentik::synthetics::v202101beta1::TraceTaskDefinition::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Task_default_instance_.http_ = const_cast< ::kentik::synthetics::v202101beta1::HTTPTaskDefinition*>(
      ::kentik::synthetics::v202101beta1::HTTPTaskDefinition::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Task_default_instance_.knock_ = const_cast< ::kentik::synthetics::v202101beta1::KnockTaskDefinition*>(
      ::kentik::synthetics::v202101beta1::KnockTaskDefinition::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Task_default_instance_.dns_ = const_cast< ::kentik::synthetics::v202101beta1::DNSTaskDefinition*>(
      ::kentik::synthetics::v202101beta1::DNSTaskDefinition::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Task_default_instance_.shake_ = const_cast< ::kentik::synthetics::v202101beta1::ShakeTaskDefinition*>(
      ::kentik::synthetics::v202101beta1::ShakeTaskDefinition::internal_default_instance());
}
class Task::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::PingTaskDefinition& ping(const Task* msg);
  static const ::kentik::synthetics::v202101beta1::TraceTaskDefinition& traceroute(const Task* msg);
  static const ::kentik::synthetics::v202101beta1::HTTPTaskDefinition& http(const Task* msg);
  static const ::kentik::synthetics::v202101beta1::KnockTaskDefinition& knock(const Task* msg);
  static const ::kentik::synthetics::v202101beta1::DNSTaskDefinition& dns(const Task* msg);
  static const ::kentik::synthetics::v202101beta1::ShakeTaskDefinition& shake(const Task* msg);
};

const ::kentik::synthetics::v202101beta1::PingTaskDefinition&
Task::_Internal::ping(const Task* msg) {
  return *msg->definition_.ping_;
}
const ::kentik::synthetics::v202101beta1::TraceTaskDefinition&
Task::_Internal::traceroute(const Task* msg) {
  return *msg->definition_.traceroute_;
}
const ::kentik::synthetics::v202101beta1::HTTPTaskDefinition&
Task::_Internal::http(const Task* msg) {
  return *msg->definition_.http_;
}
const ::kentik::synthetics::v202101beta1::KnockTaskDefinition&
Task::_Internal::knock(const Task* msg) {
  return *msg->definition_.knock_;
}
const ::kentik::synthetics::v202101beta1::DNSTaskDefinition&
Task::_Internal::dns(const Task* msg) {
  return *msg->definition_.dns_;
}
const ::kentik::synthetics::v202101beta1::ShakeTaskDefinition&
Task::_Internal::shake(const Task* msg) {
  return *msg->definition_.shake_;
}
void Task::set_allocated_ping(::kentik::synthetics::v202101beta1::PingTaskDefinition* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    definition_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.ping)
}
void Task::set_allocated_traceroute(::kentik::synthetics::v202101beta1::TraceTaskDefinition* traceroute) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (traceroute) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(traceroute);
    if (message_arena != submessage_arena) {
      traceroute = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traceroute, submessage_arena);
    }
    set_has_traceroute();
    definition_.traceroute_ = traceroute;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.traceroute)
}
void Task::set_allocated_http(::kentik::synthetics::v202101beta1::HTTPTaskDefinition* http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(http);
    if (message_arena != submessage_arena) {
      http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http, submessage_arena);
    }
    set_has_http();
    definition_.http_ = http;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.http)
}
void Task::set_allocated_knock(::kentik::synthetics::v202101beta1::KnockTaskDefinition* knock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (knock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(knock);
    if (message_arena != submessage_arena) {
      knock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, knock, submessage_arena);
    }
    set_has_knock();
    definition_.knock_ = knock;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.knock)
}
void Task::set_allocated_dns(::kentik::synthetics::v202101beta1::DNSTaskDefinition* dns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (dns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dns);
    if (message_arena != submessage_arena) {
      dns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns, submessage_arena);
    }
    set_has_dns();
    definition_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.dns)
}
void Task::set_allocated_shake(::kentik::synthetics::v202101beta1::ShakeTaskDefinition* shake) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (shake) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(shake);
    if (message_arena != submessage_arena) {
      shake = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shake, submessage_arena);
    }
    set_has_shake();
    definition_.shake_ = shake;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.Task.shake)
}
Task::Task(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Task)
}
Task::Task(const Task& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  test_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test_id().empty()) {
    test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test_id(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  ::memcpy(&state_, &from.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&family_) -
    reinterpret_cast<char*>(&state_)) + sizeof(family_));
  clear_has_definition();
  switch (from.definition_case()) {
    case kPing: {
      _internal_mutable_ping()->::kentik::synthetics::v202101beta1::PingTaskDefinition::MergeFrom(from._internal_ping());
      break;
    }
    case kTraceroute: {
      _internal_mutable_traceroute()->::kentik::synthetics::v202101beta1::TraceTaskDefinition::MergeFrom(from._internal_traceroute());
      break;
    }
    case kHttp: {
      _internal_mutable_http()->::kentik::synthetics::v202101beta1::HTTPTaskDefinition::MergeFrom(from._internal_http());
      break;
    }
    case kKnock: {
      _internal_mutable_knock()->::kentik::synthetics::v202101beta1::KnockTaskDefinition::MergeFrom(from._internal_knock());
      break;
    }
    case kDns: {
      _internal_mutable_dns()->::kentik::synthetics::v202101beta1::DNSTaskDefinition::MergeFrom(from._internal_dns());
      break;
    }
    case kShake: {
      _internal_mutable_shake()->::kentik::synthetics::v202101beta1::ShakeTaskDefinition::MergeFrom(from._internal_shake());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Task)
}

void Task::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Task_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&state_)) + sizeof(family_));
  clear_has_definition();
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Task)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Task::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  test_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_definition()) {
    clear_definition();
  }
}

void Task::ArenaDtor(void* object) {
  Task* _this = reinterpret_cast< Task* >(object);
  (void)_this;
}
void Task::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Task::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Task& Task::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Task_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Task::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:kentik.synthetics.v202101beta1.Task)
  switch (definition_case()) {
    case kPing: {
      if (GetArena() == nullptr) {
        delete definition_.ping_;
      }
      break;
    }
    case kTraceroute: {
      if (GetArena() == nullptr) {
        delete definition_.traceroute_;
      }
      break;
    }
    case kHttp: {
      if (GetArena() == nullptr) {
        delete definition_.http_;
      }
      break;
    }
    case kKnock: {
      if (GetArena() == nullptr) {
        delete definition_.knock_;
      }
      break;
    }
    case kDns: {
      if (GetArena() == nullptr) {
        delete definition_.dns_;
      }
      break;
    }
    case kShake: {
      if (GetArena() == nullptr) {
        delete definition_.shake_;
      }
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEFINITION_NOT_SET;
}


void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&state_)) + sizeof(family_));
  clear_definition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Task::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Task.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string test_id = 2[json_name = "testId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_test_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Task.test_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 3[json_name = "deviceId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Task.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TaskState state = 4[json_name = "state"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::kentik::synthetics::v202101beta1::TaskState>(val));
        } else goto handle_unusual;
        continue;
      // string status = 5[json_name = "status"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Task.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.IPFamily family = 6[json_name = "family"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_family(static_cast<::kentik::synthetics::v202101beta1::IPFamily>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.PingTaskDefinition ping = 9[json_name = "ping"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TraceTaskDefinition traceroute = 10[json_name = "traceroute"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_traceroute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.HTTPTaskDefinition http = 11[json_name = "http"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.KnockTaskDefinition knock = 12[json_name = "knock"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_knock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.DNSTaskDefinition dns = 13[json_name = "dns"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.ShakeTaskDefinition shake = 14[json_name = "shake"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_shake(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Task::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Task)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Task.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string test_id = 2[json_name = "testId"];
  if (this->test_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test_id().data(), static_cast<int>(this->_internal_test_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Task.test_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_test_id(), target);
  }

  // string device_id = 3[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Task.device_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_id(), target);
  }

  // .kentik.synthetics.v202101beta1.TaskState state = 4[json_name = "state"];
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_state(), target);
  }

  // string status = 5[json_name = "status"];
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Task.status");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_status(), target);
  }

  // .kentik.synthetics.v202101beta1.IPFamily family = 6[json_name = "family"];
  if (this->family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_family(), target);
  }

  // .kentik.synthetics.v202101beta1.PingTaskDefinition ping = 9[json_name = "ping"];
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::ping(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.TraceTaskDefinition traceroute = 10[json_name = "traceroute"];
  if (_internal_has_traceroute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::traceroute(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.HTTPTaskDefinition http = 11[json_name = "http"];
  if (_internal_has_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::http(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.KnockTaskDefinition knock = 12[json_name = "knock"];
  if (_internal_has_knock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::knock(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.DNSTaskDefinition dns = 13[json_name = "dns"];
  if (_internal_has_dns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::dns(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.ShakeTaskDefinition shake = 14[json_name = "shake"];
  if (_internal_has_shake()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::shake(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Task)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string test_id = 2[json_name = "testId"];
  if (this->test_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test_id());
  }

  // string device_id = 3[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string status = 5[json_name = "status"];
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .kentik.synthetics.v202101beta1.TaskState state = 4[json_name = "state"];
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // .kentik.synthetics.v202101beta1.IPFamily family = 6[json_name = "family"];
  if (this->family() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_family());
  }

  switch (definition_case()) {
    // .kentik.synthetics.v202101beta1.PingTaskDefinition ping = 9[json_name = "ping"];
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.ping_);
      break;
    }
    // .kentik.synthetics.v202101beta1.TraceTaskDefinition traceroute = 10[json_name = "traceroute"];
    case kTraceroute: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.traceroute_);
      break;
    }
    // .kentik.synthetics.v202101beta1.HTTPTaskDefinition http = 11[json_name = "http"];
    case kHttp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.http_);
      break;
    }
    // .kentik.synthetics.v202101beta1.KnockTaskDefinition knock = 12[json_name = "knock"];
    case kKnock: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.knock_);
      break;
    }
    // .kentik.synthetics.v202101beta1.DNSTaskDefinition dns = 13[json_name = "dns"];
    case kDns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.dns_);
      break;
    }
    // .kentik.synthetics.v202101beta1.ShakeTaskDefinition shake = 14[json_name = "shake"];
    case kShake: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.shake_);
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Task::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Task)
  GOOGLE_DCHECK_NE(&from, this);
  const Task* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Task>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Task)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Task)
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Task)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.test_id().size() > 0) {
    _internal_set_test_id(from._internal_test_id());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from.family() != 0) {
    _internal_set_family(from._internal_family());
  }
  switch (from.definition_case()) {
    case kPing: {
      _internal_mutable_ping()->::kentik::synthetics::v202101beta1::PingTaskDefinition::MergeFrom(from._internal_ping());
      break;
    }
    case kTraceroute: {
      _internal_mutable_traceroute()->::kentik::synthetics::v202101beta1::TraceTaskDefinition::MergeFrom(from._internal_traceroute());
      break;
    }
    case kHttp: {
      _internal_mutable_http()->::kentik::synthetics::v202101beta1::HTTPTaskDefinition::MergeFrom(from._internal_http());
      break;
    }
    case kKnock: {
      _internal_mutable_knock()->::kentik::synthetics::v202101beta1::KnockTaskDefinition::MergeFrom(from._internal_knock());
      break;
    }
    case kDns: {
      _internal_mutable_dns()->::kentik::synthetics::v202101beta1::DNSTaskDefinition::MergeFrom(from._internal_dns());
      break;
    }
    case kShake: {
      _internal_mutable_shake()->::kentik::synthetics::v202101beta1::ShakeTaskDefinition::MergeFrom(from._internal_shake());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
}

void Task::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  return true;
}

void Task::InternalSwap(Task* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  test_id_.Swap(&other->test_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Task, family_)
      + sizeof(Task::family_)
      - PROTOBUF_FIELD_OFFSET(Task, state_)>(
          reinterpret_cast<char*>(&state_),
          reinterpret_cast<char*>(&other->state_));
  swap(definition_, other->definition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Task::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KnockTaskDefinition::InitAsDefaultInstance() {
}
class KnockTaskDefinition::_Internal {
 public:
};

KnockTaskDefinition::KnockTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.KnockTaskDefinition)
}
KnockTaskDefinition::KnockTaskDefinition(const KnockTaskDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&period_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.KnockTaskDefinition)
}

void KnockTaskDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KnockTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&period_)) + sizeof(port_));
}

KnockTaskDefinition::~KnockTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void KnockTaskDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KnockTaskDefinition::ArenaDtor(void* object) {
  KnockTaskDefinition* _this = reinterpret_cast< KnockTaskDefinition* >(object);
  (void)_this;
}
void KnockTaskDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KnockTaskDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KnockTaskDefinition& KnockTaskDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KnockTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void KnockTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&period_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KnockTaskDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.KnockTaskDefinition.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 period = 2[json_name = "period"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 3[json_name = "expiry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 4[json_name = "count"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 5[json_name = "port"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KnockTaskDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.KnockTaskDefinition.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_period(), target);
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiry(), target);
  }

  // uint32 count = 4[json_name = "count"];
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  // uint32 port = 5[json_name = "port"];
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  return target;
}

size_t KnockTaskDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  // uint32 count = 4[json_name = "count"];
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // uint32 port = 5[json_name = "port"];
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KnockTaskDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const KnockTaskDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KnockTaskDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.KnockTaskDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.KnockTaskDefinition)
    MergeFrom(*source);
  }
}

void KnockTaskDefinition::MergeFrom(const KnockTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void KnockTaskDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KnockTaskDefinition::CopyFrom(const KnockTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.KnockTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KnockTaskDefinition::IsInitialized() const {
  return true;
}

void KnockTaskDefinition::InternalSwap(KnockTaskDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, port_)
      + sizeof(KnockTaskDefinition::port_)
      - PROTOBUF_FIELD_OFFSET(KnockTaskDefinition, period_)>(
          reinterpret_cast<char*>(&period_),
          reinterpret_cast<char*>(&other->period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata KnockTaskDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DNSTaskDefinition::InitAsDefaultInstance() {
}
class DNSTaskDefinition::_Internal {
 public:
};

DNSTaskDefinition::DNSTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DNSTaskDefinition)
}
DNSTaskDefinition::DNSTaskDefinition(const DNSTaskDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  resolver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resolver().empty()) {
    resolver_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_resolver(),
      GetArena());
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&period_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DNSTaskDefinition)
}

void DNSTaskDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DNSTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resolver_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&period_)) + sizeof(port_));
}

DNSTaskDefinition::~DNSTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DNSTaskDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resolver_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DNSTaskDefinition::ArenaDtor(void* object) {
  DNSTaskDefinition* _this = reinterpret_cast< DNSTaskDefinition* >(object);
  (void)_this;
}
void DNSTaskDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DNSTaskDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DNSTaskDefinition& DNSTaskDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DNSTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DNSTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resolver_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&period_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSTaskDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.DNSTaskDefinition.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 period = 2[json_name = "period"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 3[json_name = "expiry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 4[json_name = "count"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 5[json_name = "port"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 6[json_name = "type"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.DNSTaskDefinition.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resolver = 7[json_name = "resolver"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_resolver();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DNSTaskDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.DNSTaskDefinition.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_period(), target);
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_expiry(), target);
  }

  // uint32 count = 4[json_name = "count"];
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_count(), target);
  }

  // uint32 port = 5[json_name = "port"];
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_port(), target);
  }

  // string type = 6[json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.DNSTaskDefinition.type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_type(), target);
  }

  // string resolver = 7[json_name = "resolver"];
  if (this->resolver().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resolver().data(), static_cast<int>(this->_internal_resolver().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.DNSTaskDefinition.resolver");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_resolver(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  return target;
}

size_t DNSTaskDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string type = 6[json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string resolver = 7[json_name = "resolver"];
  if (this->resolver().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resolver());
  }

  // uint32 period = 2[json_name = "period"];
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 expiry = 3[json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  // uint32 count = 4[json_name = "count"];
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // uint32 port = 5[json_name = "port"];
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNSTaskDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSTaskDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DNSTaskDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.DNSTaskDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.DNSTaskDefinition)
    MergeFrom(*source);
  }
}

void DNSTaskDefinition::MergeFrom(const DNSTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.resolver().size() > 0) {
    _internal_set_resolver(from._internal_resolver());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DNSTaskDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSTaskDefinition::CopyFrom(const DNSTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DNSTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSTaskDefinition::IsInitialized() const {
  return true;
}

void DNSTaskDefinition::InternalSwap(DNSTaskDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  resolver_.Swap(&other->resolver_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, port_)
      + sizeof(DNSTaskDefinition::port_)
      - PROTOBUF_FIELD_OFFSET(DNSTaskDefinition, period_)>(
          reinterpret_cast<char*>(&period_),
          reinterpret_cast<char*>(&other->period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSTaskDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShakeTaskDefinition::InitAsDefaultInstance() {
}
class ShakeTaskDefinition::_Internal {
 public:
};

ShakeTaskDefinition::ShakeTaskDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
}
ShakeTaskDefinition::ShakeTaskDefinition(const ShakeTaskDefinition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&expiry_) -
    reinterpret_cast<char*>(&port_)) + sizeof(expiry_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
}

void ShakeTaskDefinition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShakeTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&port_)) + sizeof(expiry_));
}

ShakeTaskDefinition::~ShakeTaskDefinition() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShakeTaskDefinition::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShakeTaskDefinition::ArenaDtor(void* object) {
  ShakeTaskDefinition* _this = reinterpret_cast< ShakeTaskDefinition* >(object);
  (void)_this;
}
void ShakeTaskDefinition::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShakeTaskDefinition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShakeTaskDefinition& ShakeTaskDefinition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShakeTaskDefinition_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ShakeTaskDefinition::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expiry_) -
      reinterpret_cast<char*>(&port_)) + sizeof(expiry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShakeTaskDefinition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.ShakeTaskDefinition.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 2[json_name = "port"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 period = 3[json_name = "period"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 4[json_name = "expiry"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShakeTaskDefinition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.ShakeTaskDefinition.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 port = 2[json_name = "port"];
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_port(), target);
  }

  // uint32 period = 3[json_name = "period"];
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_period(), target);
  }

  // uint32 expiry = 4[json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_expiry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  return target;
}

size_t ShakeTaskDefinition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // uint32 port = 2[json_name = "port"];
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 period = 3[json_name = "period"];
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 expiry = 4[json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShakeTaskDefinition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  const ShakeTaskDefinition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShakeTaskDefinition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
    MergeFrom(*source);
  }
}

void ShakeTaskDefinition::MergeFrom(const ShakeTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
}

void ShakeTaskDefinition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeTaskDefinition::CopyFrom(const ShakeTaskDefinition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ShakeTaskDefinition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeTaskDefinition::IsInitialized() const {
  return true;
}

void ShakeTaskDefinition::InternalSwap(ShakeTaskDefinition* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, expiry_)
      + sizeof(ShakeTaskDefinition::expiry_)
      - PROTOBUF_FIELD_OFFSET(ShakeTaskDefinition, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShakeTaskDefinition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UserInfo::InitAsDefaultInstance() {
}
class UserInfo::_Internal {
 public:
};

UserInfo::UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_email().empty()) {
    email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_email(),
      GetArena());
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_full_name().empty()) {
    full_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_full_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.UserInfo)
}

void UserInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UserInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.UserInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UserInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::ArenaDtor(void* object) {
  UserInfo* _this = reinterpret_cast< UserInfo* >(object);
  (void)_this;
}
void UserInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UserInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UserInfo& UserInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UserInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  full_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UserInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.UserInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string email = 2[json_name = "email"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_email();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.UserInfo.email"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string full_name = 3[json_name = "fullName"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.UserInfo.full_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UserInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.UserInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.UserInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string email = 2[json_name = "email"];
  if (this->email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.UserInfo.email");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_email(), target);
  }

  // string full_name = 3[json_name = "fullName"];
  if (this->full_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.UserInfo.full_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_full_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.UserInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string email = 2[json_name = "email"];
  if (this->email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_email());
  }

  // string full_name = 3[json_name = "fullName"];
  if (this->full_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UserInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.UserInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.email().size() > 0) {
    _internal_set_email(from._internal_email());
  }
  if (from.full_name().size() > 0) {
    _internal_set_full_name(from._internal_full_name());
  }
}

void UserInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::InternalSwap(UserInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  email_.Swap(&other->email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  full_name_.Swap(&other->full_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UserInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Test::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_Test_default_instance_._instance.get_mutable()->settings_ = const_cast< ::kentik::synthetics::v202101beta1::TestSettings*>(
      ::kentik::synthetics::v202101beta1::TestSettings::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Test_default_instance_._instance.get_mutable()->expires_on_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Test_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Test_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Test_default_instance_._instance.get_mutable()->created_by_ = const_cast< ::kentik::synthetics::v202101beta1::UserInfo*>(
      ::kentik::synthetics::v202101beta1::UserInfo::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Test_default_instance_._instance.get_mutable()->last_updated_by_ = const_cast< ::kentik::synthetics::v202101beta1::UserInfo*>(
      ::kentik::synthetics::v202101beta1::UserInfo::internal_default_instance());
}
class Test::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::TestSettings& settings(const Test* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expires_on(const Test* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const Test* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const Test* msg);
  static const ::kentik::synthetics::v202101beta1::UserInfo& created_by(const Test* msg);
  static const ::kentik::synthetics::v202101beta1::UserInfo& last_updated_by(const Test* msg);
};

const ::kentik::synthetics::v202101beta1::TestSettings&
Test::_Internal::settings(const Test* msg) {
  return *msg->settings_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Test::_Internal::expires_on(const Test* msg) {
  return *msg->expires_on_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Test::_Internal::cdate(const Test* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Test::_Internal::edate(const Test* msg) {
  return *msg->edate_;
}
const ::kentik::synthetics::v202101beta1::UserInfo&
Test::_Internal::created_by(const Test* msg) {
  return *msg->created_by_;
}
const ::kentik::synthetics::v202101beta1::UserInfo&
Test::_Internal::last_updated_by(const Test* msg) {
  return *msg->last_updated_by_;
}
void Test::clear_expires_on() {
  if (GetArena() == nullptr && expires_on_ != nullptr) {
    delete expires_on_;
  }
  expires_on_ = nullptr;
}
void Test::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void Test::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
Test::Test(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Test)
}
Test::Test(const Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::kentik::synthetics::v202101beta1::TestSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_expires_on()) {
    expires_on_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_on_);
  } else {
    expires_on_ = nullptr;
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  if (from._internal_has_created_by()) {
    created_by_ = new ::kentik::synthetics::v202101beta1::UserInfo(*from.created_by_);
  } else {
    created_by_ = nullptr;
  }
  if (from._internal_has_last_updated_by()) {
    last_updated_by_ = new ::kentik::synthetics::v202101beta1::UserInfo(*from.last_updated_by_);
  } else {
    last_updated_by_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Test)
}

void Test::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(status_));
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Test)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete expires_on_;
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
  if (this != internal_default_instance()) delete created_by_;
  if (this != internal_default_instance()) delete last_updated_by_;
}

void Test::ArenaDtor(void* object) {
  Test* _this = reinterpret_cast< Test* >(object);
  (void)_this;
}
void Test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test& Test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArena() == nullptr && expires_on_ != nullptr) {
    delete expires_on_;
  }
  expires_on_ = nullptr;
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  if (GetArena() == nullptr && created_by_ != nullptr) {
    delete created_by_;
  }
  created_by_ = nullptr;
  if (GetArena() == nullptr && last_updated_by_ != nullptr) {
    delete last_updated_by_;
  }
  last_updated_by_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Test.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Test.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3[json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Test.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 4[json_name = "deviceId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Test.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TestStatus status = 5[json_name = "status"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kentik::synthetics::v202101beta1::TestStatus>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TestSettings settings = 6[json_name = "settings"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_on = 7[json_name = "expiresOn"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_on(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 8[json_name = "cdate"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 9[json_name = "edate"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.UserInfo created_by = 10[json_name = "createdBy"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_by(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11[json_name = "lastUpdatedBy"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated_by(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Test.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Test.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string type = 3[json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Test.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // string device_id = 4[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Test.device_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_device_id(), target);
  }

  // .kentik.synthetics.v202101beta1.TestStatus status = 5[json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // .kentik.synthetics.v202101beta1.TestSettings settings = 6[json_name = "settings"];
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::settings(this), target, stream);
  }

  // .google.protobuf.Timestamp expires_on = 7[json_name = "expiresOn"];
  if (this->has_expires_on()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::expires_on(this), target, stream);
  }

  // .google.protobuf.Timestamp cdate = 8[json_name = "cdate"];
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 9[json_name = "edate"];
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::edate(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.UserInfo created_by = 10[json_name = "createdBy"];
  if (this->has_created_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::created_by(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11[json_name = "lastUpdatedBy"];
  if (this->has_last_updated_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::last_updated_by(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Test)
  return target;
}

size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3[json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string device_id = 4[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // .kentik.synthetics.v202101beta1.TestSettings settings = 6[json_name = "settings"];
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .google.protobuf.Timestamp expires_on = 7[json_name = "expiresOn"];
  if (this->has_expires_on()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_on_);
  }

  // .google.protobuf.Timestamp cdate = 8[json_name = "cdate"];
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 9[json_name = "edate"];
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .kentik.synthetics.v202101beta1.UserInfo created_by = 10[json_name = "createdBy"];
  if (this->has_created_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_by_);
  }

  // .kentik.synthetics.v202101beta1.UserInfo last_updated_by = 11[json_name = "lastUpdatedBy"];
  if (this->has_last_updated_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_by_);
  }

  // .kentik.synthetics.v202101beta1.TestStatus status = 5[json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Test)
  GOOGLE_DCHECK_NE(&from, this);
  const Test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Test)
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::kentik::synthetics::v202101beta1::TestSettings::MergeFrom(from._internal_settings());
  }
  if (from.has_expires_on()) {
    _internal_mutable_expires_on()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expires_on());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.has_created_by()) {
    _internal_mutable_created_by()->::kentik::synthetics::v202101beta1::UserInfo::MergeFrom(from._internal_created_by());
  }
  if (from.has_last_updated_by()) {
    _internal_mutable_last_updated_by()->::kentik::synthetics::v202101beta1::UserInfo::MergeFrom(from._internal_last_updated_by());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::InternalSwap(Test* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test, status_)
      + sizeof(Test::status_)
      - PROTOBUF_FIELD_OFFSET(Test, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Test::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

HTTPConfig_HeadersEntry_DoNotUse::HTTPConfig_HeadersEntry_DoNotUse() {}
HTTPConfig_HeadersEntry_DoNotUse::HTTPConfig_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HTTPConfig_HeadersEntry_DoNotUse::MergeFrom(const HTTPConfig_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HTTPConfig_HeadersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HTTPConfig_HeadersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

HTTPConfig_CssSelectorsEntry_DoNotUse::HTTPConfig_CssSelectorsEntry_DoNotUse() {}
HTTPConfig_CssSelectorsEntry_DoNotUse::HTTPConfig_CssSelectorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HTTPConfig_CssSelectorsEntry_DoNotUse::MergeFrom(const HTTPConfig_CssSelectorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HTTPConfig_CssSelectorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void HTTPConfig_CssSelectorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void HTTPConfig::InitAsDefaultInstance() {
}
class HTTPConfig::_Internal {
 public:
};

HTTPConfig::HTTPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena),
  css_selectors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HTTPConfig)
}
HTTPConfig::HTTPConfig(const HTTPConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  css_selectors_.MergeFrom(from.css_selectors_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_method(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_tls_errors_) -
    reinterpret_cast<char*>(&period_)) + sizeof(ignore_tls_errors_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HTTPConfig)
}

void HTTPConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTTPConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_tls_errors_) -
      reinterpret_cast<char*>(&period_)) + sizeof(ignore_tls_errors_));
}

HTTPConfig::~HTTPConfig() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HTTPConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HTTPConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HTTPConfig::ArenaDtor(void* object) {
  HTTPConfig* _this = reinterpret_cast< HTTPConfig* >(object);
  (void)_this;
}
void HTTPConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HTTPConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTTPConfig& HTTPConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTTPConfig_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HTTPConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HTTPConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  css_selectors_.Clear();
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_tls_errors_) -
      reinterpret_cast<char*>(&period_)) + sizeof(ignore_tls_errors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HTTPConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 period = 1[json_name = "period"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 2[json_name = "expiry"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method = 3[json_name = "method"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HTTPConfig.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> headers = 4[json_name = "headers"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string body = 5[json_name = "body"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HTTPConfig.body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ignore_tls_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> css_selectors = 7[json_name = "cssSelectors"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&css_selectors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTTPConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HTTPConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 period = 1[json_name = "period"];
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_period(), target);
  }

  // uint32 expiry = 2[json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_expiry(), target);
  }

  // string method = 3[json_name = "method"];
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HTTPConfig.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  // map<string, string> headers = 4[json_name = "headers"];
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202101beta1.HTTPConfig.HeadersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202101beta1.HTTPConfig.HeadersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HTTPConfig_HeadersEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = HTTPConfig_HeadersEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string body = 5[json_name = "body"];
  if (this->body().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HTTPConfig.body");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_body(), target);
  }

  // bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors"];
  if (this->ignore_tls_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_tls_errors(), target);
  }

  // map<string, string> css_selectors = 7[json_name = "cssSelectors"];
  if (!this->_internal_css_selectors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202101beta1.HTTPConfig.CssSelectorsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202101beta1.HTTPConfig.CssSelectorsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_css_selectors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_css_selectors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_css_selectors().begin();
          it != this->_internal_css_selectors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HTTPConfig_CssSelectorsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_css_selectors().begin();
          it != this->_internal_css_selectors().end(); ++it) {
        target = HTTPConfig_CssSelectorsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HTTPConfig)
  return target;
}

size_t HTTPConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HTTPConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 4[json_name = "headers"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += HTTPConfig_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> css_selectors = 7[json_name = "cssSelectors"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_css_selectors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_css_selectors().begin();
      it != this->_internal_css_selectors().end(); ++it) {
    total_size += HTTPConfig_CssSelectorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string method = 3[json_name = "method"];
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string body = 5[json_name = "body"];
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // uint32 period = 1[json_name = "period"];
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 expiry = 2[json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  // bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors"];
  if (this->ignore_tls_errors() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTTPConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.HTTPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTTPConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.HTTPConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.HTTPConfig)
    MergeFrom(*source);
  }
}

void HTTPConfig::MergeFrom(const HTTPConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HTTPConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  css_selectors_.MergeFrom(from.css_selectors_);
  if (from.method().size() > 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.ignore_tls_errors() != 0) {
    _internal_set_ignore_tls_errors(from._internal_ignore_tls_errors());
  }
}

void HTTPConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.HTTPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPConfig::CopyFrom(const HTTPConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HTTPConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPConfig::IsInitialized() const {
  return true;
}

void HTTPConfig::InternalSwap(HTTPConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.Swap(&other->headers_);
  css_selectors_.Swap(&other->css_selectors_);
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HTTPConfig, ignore_tls_errors_)
      + sizeof(HTTPConfig::ignore_tls_errors_)
      - PROTOBUF_FIELD_OFFSET(HTTPConfig, period_)>(
          reinterpret_cast<char*>(&period_),
          reinterpret_cast<char*>(&other->period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HTTPConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestSettings::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.hostname_ = const_cast< ::kentik::synthetics::v202101beta1::HostnameTest*>(
      ::kentik::synthetics::v202101beta1::HostnameTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.ip_ = const_cast< ::kentik::synthetics::v202101beta1::IpTest*>(
      ::kentik::synthetics::v202101beta1::IpTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.agent_ = const_cast< ::kentik::synthetics::v202101beta1::AgentTest*>(
      ::kentik::synthetics::v202101beta1::AgentTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.flow_ = const_cast< ::kentik::synthetics::v202101beta1::FlowTest*>(
      ::kentik::synthetics::v202101beta1::FlowTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.site_ = const_cast< ::kentik::synthetics::v202101beta1::SiteTest*>(
      ::kentik::synthetics::v202101beta1::SiteTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.tag_ = const_cast< ::kentik::synthetics::v202101beta1::TagTest*>(
      ::kentik::synthetics::v202101beta1::TagTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.dns_ = const_cast< ::kentik::synthetics::v202101beta1::DnsTest*>(
      ::kentik::synthetics::v202101beta1::DnsTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.url_ = const_cast< ::kentik::synthetics::v202101beta1::UrlTest*>(
      ::kentik::synthetics::v202101beta1::UrlTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.network_grid_ = const_cast< ::kentik::synthetics::v202101beta1::GridTest*>(
      ::kentik::synthetics::v202101beta1::GridTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.page_load_ = const_cast< ::kentik::synthetics::v202101beta1::UrlTest*>(
      ::kentik::synthetics::v202101beta1::UrlTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.dns_grid_ = const_cast< ::kentik::synthetics::v202101beta1::DnsGridTest*>(
      ::kentik::synthetics::v202101beta1::DnsGridTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_.application_mesh_ = const_cast< ::kentik::synthetics::v202101beta1::ApplicationMeshTest*>(
      ::kentik::synthetics::v202101beta1::ApplicationMeshTest::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_._instance.get_mutable()->health_settings_ = const_cast< ::kentik::synthetics::v202101beta1::HealthSettings*>(
      ::kentik::synthetics::v202101beta1::HealthSettings::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_._instance.get_mutable()->monitoring_settings_ = const_cast< ::kentik::synthetics::v202101beta1::TestMonitoringSettings*>(
      ::kentik::synthetics::v202101beta1::TestMonitoringSettings::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_._instance.get_mutable()->ping_ = const_cast< ::kentik::synthetics::v202101beta1::TestPingSettings*>(
      ::kentik::synthetics::v202101beta1::TestPingSettings::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_._instance.get_mutable()->trace_ = const_cast< ::kentik::synthetics::v202101beta1::TestTraceSettings*>(
      ::kentik::synthetics::v202101beta1::TestTraceSettings::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TestSettings_default_instance_._instance.get_mutable()->http_ = const_cast< ::kentik::synthetics::v202101beta1::HTTPConfig*>(
      ::kentik::synthetics::v202101beta1::HTTPConfig::internal_default_instance());
}
class TestSettings::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::HostnameTest& hostname(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::IpTest& ip(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::AgentTest& agent(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::FlowTest& flow(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::SiteTest& site(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::TagTest& tag(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::DnsTest& dns(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::UrlTest& url(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::GridTest& network_grid(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::UrlTest& page_load(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::DnsGridTest& dns_grid(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::ApplicationMeshTest& application_mesh(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::HealthSettings& health_settings(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::TestMonitoringSettings& monitoring_settings(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::TestPingSettings& ping(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::TestTraceSettings& trace(const TestSettings* msg);
  static const ::kentik::synthetics::v202101beta1::HTTPConfig& http(const TestSettings* msg);
};

const ::kentik::synthetics::v202101beta1::HostnameTest&
TestSettings::_Internal::hostname(const TestSettings* msg) {
  return *msg->definition_.hostname_;
}
const ::kentik::synthetics::v202101beta1::IpTest&
TestSettings::_Internal::ip(const TestSettings* msg) {
  return *msg->definition_.ip_;
}
const ::kentik::synthetics::v202101beta1::AgentTest&
TestSettings::_Internal::agent(const TestSettings* msg) {
  return *msg->definition_.agent_;
}
const ::kentik::synthetics::v202101beta1::FlowTest&
TestSettings::_Internal::flow(const TestSettings* msg) {
  return *msg->definition_.flow_;
}
const ::kentik::synthetics::v202101beta1::SiteTest&
TestSettings::_Internal::site(const TestSettings* msg) {
  return *msg->definition_.site_;
}
const ::kentik::synthetics::v202101beta1::TagTest&
TestSettings::_Internal::tag(const TestSettings* msg) {
  return *msg->definition_.tag_;
}
const ::kentik::synthetics::v202101beta1::DnsTest&
TestSettings::_Internal::dns(const TestSettings* msg) {
  return *msg->definition_.dns_;
}
const ::kentik::synthetics::v202101beta1::UrlTest&
TestSettings::_Internal::url(const TestSettings* msg) {
  return *msg->definition_.url_;
}
const ::kentik::synthetics::v202101beta1::GridTest&
TestSettings::_Internal::network_grid(const TestSettings* msg) {
  return *msg->definition_.network_grid_;
}
const ::kentik::synthetics::v202101beta1::UrlTest&
TestSettings::_Internal::page_load(const TestSettings* msg) {
  return *msg->definition_.page_load_;
}
const ::kentik::synthetics::v202101beta1::DnsGridTest&
TestSettings::_Internal::dns_grid(const TestSettings* msg) {
  return *msg->definition_.dns_grid_;
}
const ::kentik::synthetics::v202101beta1::ApplicationMeshTest&
TestSettings::_Internal::application_mesh(const TestSettings* msg) {
  return *msg->definition_.application_mesh_;
}
const ::kentik::synthetics::v202101beta1::HealthSettings&
TestSettings::_Internal::health_settings(const TestSettings* msg) {
  return *msg->health_settings_;
}
const ::kentik::synthetics::v202101beta1::TestMonitoringSettings&
TestSettings::_Internal::monitoring_settings(const TestSettings* msg) {
  return *msg->monitoring_settings_;
}
const ::kentik::synthetics::v202101beta1::TestPingSettings&
TestSettings::_Internal::ping(const TestSettings* msg) {
  return *msg->ping_;
}
const ::kentik::synthetics::v202101beta1::TestTraceSettings&
TestSettings::_Internal::trace(const TestSettings* msg) {
  return *msg->trace_;
}
const ::kentik::synthetics::v202101beta1::HTTPConfig&
TestSettings::_Internal::http(const TestSettings* msg) {
  return *msg->http_;
}
void TestSettings::set_allocated_hostname(::kentik::synthetics::v202101beta1::HostnameTest* hostname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (hostname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hostname);
    if (message_arena != submessage_arena) {
      hostname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hostname, submessage_arena);
    }
    set_has_hostname();
    definition_.hostname_ = hostname;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.hostname)
}
void TestSettings::set_allocated_ip(::kentik::synthetics::v202101beta1::IpTest* ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip);
    if (message_arena != submessage_arena) {
      ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip, submessage_arena);
    }
    set_has_ip();
    definition_.ip_ = ip;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.ip)
}
void TestSettings::set_allocated_agent(::kentik::synthetics::v202101beta1::AgentTest* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    set_has_agent();
    definition_.agent_ = agent;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.agent)
}
void TestSettings::set_allocated_flow(::kentik::synthetics::v202101beta1::FlowTest* flow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (flow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flow);
    if (message_arena != submessage_arena) {
      flow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow, submessage_arena);
    }
    set_has_flow();
    definition_.flow_ = flow;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.flow)
}
void TestSettings::set_allocated_site(::kentik::synthetics::v202101beta1::SiteTest* site) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (site) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(site);
    if (message_arena != submessage_arena) {
      site = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, site, submessage_arena);
    }
    set_has_site();
    definition_.site_ = site;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.site)
}
void TestSettings::set_allocated_tag(::kentik::synthetics::v202101beta1::TagTest* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tag);
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    set_has_tag();
    definition_.tag_ = tag;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.tag)
}
void TestSettings::set_allocated_dns(::kentik::synthetics::v202101beta1::DnsTest* dns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (dns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dns);
    if (message_arena != submessage_arena) {
      dns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns, submessage_arena);
    }
    set_has_dns();
    definition_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.dns)
}
void TestSettings::set_allocated_url(::kentik::synthetics::v202101beta1::UrlTest* url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(url);
    if (message_arena != submessage_arena) {
      url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    set_has_url();
    definition_.url_ = url;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.url)
}
void TestSettings::set_allocated_network_grid(::kentik::synthetics::v202101beta1::GridTest* network_grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (network_grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network_grid);
    if (message_arena != submessage_arena) {
      network_grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_grid, submessage_arena);
    }
    set_has_network_grid();
    definition_.network_grid_ = network_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.network_grid)
}
void TestSettings::set_allocated_page_load(::kentik::synthetics::v202101beta1::UrlTest* page_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (page_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(page_load);
    if (message_arena != submessage_arena) {
      page_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_load, submessage_arena);
    }
    set_has_page_load();
    definition_.page_load_ = page_load;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.page_load)
}
void TestSettings::set_allocated_dns_grid(::kentik::synthetics::v202101beta1::DnsGridTest* dns_grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (dns_grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dns_grid);
    if (message_arena != submessage_arena) {
      dns_grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_grid, submessage_arena);
    }
    set_has_dns_grid();
    definition_.dns_grid_ = dns_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.dns_grid)
}
void TestSettings::set_allocated_application_mesh(::kentik::synthetics::v202101beta1::ApplicationMeshTest* application_mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (application_mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(application_mesh);
    if (message_arena != submessage_arena) {
      application_mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, application_mesh, submessage_arena);
    }
    set_has_application_mesh();
    definition_.application_mesh_ = application_mesh;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202101beta1.TestSettings.application_mesh)
}
TestSettings::TestSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_ids_(arena),
  tasks_(arena),
  servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestSettings)
}
TestSettings::TestSettings(const TestSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_ids_(from.agent_ids_),
      tasks_(from.tasks_),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol(),
      GetArena());
  }
  if (from._internal_has_health_settings()) {
    health_settings_ = new ::kentik::synthetics::v202101beta1::HealthSettings(*from.health_settings_);
  } else {
    health_settings_ = nullptr;
  }
  if (from._internal_has_monitoring_settings()) {
    monitoring_settings_ = new ::kentik::synthetics::v202101beta1::TestMonitoringSettings(*from.monitoring_settings_);
  } else {
    monitoring_settings_ = nullptr;
  }
  if (from._internal_has_ping()) {
    ping_ = new ::kentik::synthetics::v202101beta1::TestPingSettings(*from.ping_);
  } else {
    ping_ = nullptr;
  }
  if (from._internal_has_trace()) {
    trace_ = new ::kentik::synthetics::v202101beta1::TestTraceSettings(*from.trace_);
  } else {
    trace_ = nullptr;
  }
  if (from._internal_has_http()) {
    http_ = new ::kentik::synthetics::v202101beta1::HTTPConfig(*from.http_);
  } else {
    http_ = nullptr;
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&rollup_level_) -
    reinterpret_cast<char*>(&period_)) + sizeof(rollup_level_));
  clear_has_definition();
  switch (from.definition_case()) {
    case kHostname: {
      _internal_mutable_hostname()->::kentik::synthetics::v202101beta1::HostnameTest::MergeFrom(from._internal_hostname());
      break;
    }
    case kIp: {
      _internal_mutable_ip()->::kentik::synthetics::v202101beta1::IpTest::MergeFrom(from._internal_ip());
      break;
    }
    case kAgent: {
      _internal_mutable_agent()->::kentik::synthetics::v202101beta1::AgentTest::MergeFrom(from._internal_agent());
      break;
    }
    case kFlow: {
      _internal_mutable_flow()->::kentik::synthetics::v202101beta1::FlowTest::MergeFrom(from._internal_flow());
      break;
    }
    case kSite: {
      _internal_mutable_site()->::kentik::synthetics::v202101beta1::SiteTest::MergeFrom(from._internal_site());
      break;
    }
    case kTag: {
      _internal_mutable_tag()->::kentik::synthetics::v202101beta1::TagTest::MergeFrom(from._internal_tag());
      break;
    }
    case kDns: {
      _internal_mutable_dns()->::kentik::synthetics::v202101beta1::DnsTest::MergeFrom(from._internal_dns());
      break;
    }
    case kUrl: {
      _internal_mutable_url()->::kentik::synthetics::v202101beta1::UrlTest::MergeFrom(from._internal_url());
      break;
    }
    case kNetworkGrid: {
      _internal_mutable_network_grid()->::kentik::synthetics::v202101beta1::GridTest::MergeFrom(from._internal_network_grid());
      break;
    }
    case kPageLoad: {
      _internal_mutable_page_load()->::kentik::synthetics::v202101beta1::UrlTest::MergeFrom(from._internal_page_load());
      break;
    }
    case kDnsGrid: {
      _internal_mutable_dns_grid()->::kentik::synthetics::v202101beta1::DnsGridTest::MergeFrom(from._internal_dns_grid());
      break;
    }
    case kApplicationMesh: {
      _internal_mutable_application_mesh()->::kentik::synthetics::v202101beta1::ApplicationMeshTest::MergeFrom(from._internal_application_mesh());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestSettings)
}

void TestSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&health_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rollup_level_) -
      reinterpret_cast<char*>(&health_settings_)) + sizeof(rollup_level_));
  clear_has_definition();
}

TestSettings::~TestSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete health_settings_;
  if (this != internal_default_instance()) delete monitoring_settings_;
  if (this != internal_default_instance()) delete ping_;
  if (this != internal_default_instance()) delete trace_;
  if (this != internal_default_instance()) delete http_;
  if (has_definition()) {
    clear_definition();
  }
}

void TestSettings::ArenaDtor(void* object) {
  TestSettings* _this = reinterpret_cast< TestSettings* >(object);
  (void)_this;
}
void TestSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestSettings& TestSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestSettings::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:kentik.synthetics.v202101beta1.TestSettings)
  switch (definition_case()) {
    case kHostname: {
      if (GetArena() == nullptr) {
        delete definition_.hostname_;
      }
      break;
    }
    case kIp: {
      if (GetArena() == nullptr) {
        delete definition_.ip_;
      }
      break;
    }
    case kAgent: {
      if (GetArena() == nullptr) {
        delete definition_.agent_;
      }
      break;
    }
    case kFlow: {
      if (GetArena() == nullptr) {
        delete definition_.flow_;
      }
      break;
    }
    case kSite: {
      if (GetArena() == nullptr) {
        delete definition_.site_;
      }
      break;
    }
    case kTag: {
      if (GetArena() == nullptr) {
        delete definition_.tag_;
      }
      break;
    }
    case kDns: {
      if (GetArena() == nullptr) {
        delete definition_.dns_;
      }
      break;
    }
    case kUrl: {
      if (GetArena() == nullptr) {
        delete definition_.url_;
      }
      break;
    }
    case kNetworkGrid: {
      if (GetArena() == nullptr) {
        delete definition_.network_grid_;
      }
      break;
    }
    case kPageLoad: {
      if (GetArena() == nullptr) {
        delete definition_.page_load_;
      }
      break;
    }
    case kDnsGrid: {
      if (GetArena() == nullptr) {
        delete definition_.dns_grid_;
      }
      break;
    }
    case kApplicationMesh: {
      if (GetArena() == nullptr) {
        delete definition_.application_mesh_;
      }
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEFINITION_NOT_SET;
}


void TestSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_ids_.Clear();
  tasks_.Clear();
  servers_.Clear();
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && health_settings_ != nullptr) {
    delete health_settings_;
  }
  health_settings_ = nullptr;
  if (GetArena() == nullptr && monitoring_settings_ != nullptr) {
    delete monitoring_settings_;
  }
  monitoring_settings_ = nullptr;
  if (GetArena() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
  if (GetArena() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
  if (GetArena() == nullptr && http_ != nullptr) {
    delete http_;
  }
  http_ = nullptr;
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rollup_level_) -
      reinterpret_cast<char*>(&period_)) + sizeof(rollup_level_));
  clear_definition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.HostnameTest hostname = 4[json_name = "hostname"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hostname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.IpTest ip = 5[json_name = "ip"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.AgentTest agent = 6[json_name = "agent"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.FlowTest flow = 7[json_name = "flow"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.SiteTest site = 8[json_name = "site"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_site(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TagTest tag = 9[json_name = "tag"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.DnsTest dns = 10[json_name = "dns"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.UrlTest url = 11[json_name = "url"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string agent_ids = 14[json_name = "agentIds"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agent_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestSettings.agent_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 period = 15[json_name = "period"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 count = 16[json_name = "count"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 expiry = 17[json_name = "expiry"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 18[json_name = "limit"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string tasks = 19[json_name = "tasks"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_tasks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestSettings.tasks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22[json_name = "healthSettings"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_health_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 23[json_name = "port"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24[json_name = "monitoringSettings"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_monitoring_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 26[json_name = "protocol"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestSettings.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.IPFamily family = 27[json_name = "family"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_family(static_cast<::kentik::synthetics::v202101beta1::IPFamily>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TestPingSettings ping = 28[json_name = "ping"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29[json_name = "trace"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string servers = 30[json_name = "servers"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_servers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestSettings.servers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // bool use_local_ip = 31[json_name = "useLocalIp"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          use_local_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reciprocal = 32[json_name = "reciprocal"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          reciprocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rollup_level = 33[json_name = "rollupLevel"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rollup_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.HTTPConfig http = 34[json_name = "http"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.GridTest network_grid = 35[json_name = "networkGrid"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.UrlTest page_load = 36[json_name = "pageLoad"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.DnsGridTest dns_grid = 37[json_name = "dnsGrid"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.ApplicationMeshTest application_mesh = 38[json_name = "applicationMesh"];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_application_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.HostnameTest hostname = 4[json_name = "hostname"];
  if (_internal_has_hostname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hostname(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.IpTest ip = 5[json_name = "ip"];
  if (_internal_has_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ip(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.AgentTest agent = 6[json_name = "agent"];
  if (_internal_has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::agent(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.FlowTest flow = 7[json_name = "flow"];
  if (_internal_has_flow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::flow(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.SiteTest site = 8[json_name = "site"];
  if (_internal_has_site()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::site(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.TagTest tag = 9[json_name = "tag"];
  if (_internal_has_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tag(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.DnsTest dns = 10[json_name = "dns"];
  if (_internal_has_dns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::dns(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.UrlTest url = 11[json_name = "url"];
  if (_internal_has_url()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::url(this), target, stream);
  }

  // repeated string agent_ids = 14[json_name = "agentIds"];
  for (int i = 0, n = this->_internal_agent_ids_size(); i < n; i++) {
    const auto& s = this->_internal_agent_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestSettings.agent_ids");
    target = stream->WriteString(14, s, target);
  }

  // uint32 period = 15[json_name = "period"];
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_period(), target);
  }

  // uint32 count = 16[json_name = "count"];
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_count(), target);
  }

  // uint32 expiry = 17[json_name = "expiry"];
  if (this->expiry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_expiry(), target);
  }

  // uint32 limit = 18[json_name = "limit"];
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_limit(), target);
  }

  // repeated string tasks = 19[json_name = "tasks"];
  for (int i = 0, n = this->_internal_tasks_size(); i < n; i++) {
    const auto& s = this->_internal_tasks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestSettings.tasks");
    target = stream->WriteString(19, s, target);
  }

  // .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22[json_name = "healthSettings"];
  if (this->has_health_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::health_settings(this), target, stream);
  }

  // uint32 port = 23[json_name = "port"];
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_port(), target);
  }

  // .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24[json_name = "monitoringSettings"];
  if (this->has_monitoring_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::monitoring_settings(this), target, stream);
  }

  // string protocol = 26[json_name = "protocol"];
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestSettings.protocol");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_protocol(), target);
  }

  // .kentik.synthetics.v202101beta1.IPFamily family = 27[json_name = "family"];
  if (this->family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      27, this->_internal_family(), target);
  }

  // .kentik.synthetics.v202101beta1.TestPingSettings ping = 28[json_name = "ping"];
  if (this->has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::ping(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29[json_name = "trace"];
  if (this->has_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::trace(this), target, stream);
  }

  // repeated string servers = 30[json_name = "servers"];
  for (int i = 0, n = this->_internal_servers_size(); i < n; i++) {
    const auto& s = this->_internal_servers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestSettings.servers");
    target = stream->WriteString(30, s, target);
  }

  // bool use_local_ip = 31[json_name = "useLocalIp"];
  if (this->use_local_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_use_local_ip(), target);
  }

  // bool reciprocal = 32[json_name = "reciprocal"];
  if (this->reciprocal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(32, this->_internal_reciprocal(), target);
  }

  // uint32 rollup_level = 33[json_name = "rollupLevel"];
  if (this->rollup_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(33, this->_internal_rollup_level(), target);
  }

  // .kentik.synthetics.v202101beta1.HTTPConfig http = 34[json_name = "http"];
  if (this->has_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::http(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.GridTest network_grid = 35[json_name = "networkGrid"];
  if (_internal_has_network_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        35, _Internal::network_grid(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.UrlTest page_load = 36[json_name = "pageLoad"];
  if (_internal_has_page_load()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        36, _Internal::page_load(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.DnsGridTest dns_grid = 37[json_name = "dnsGrid"];
  if (_internal_has_dns_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        37, _Internal::dns_grid(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.ApplicationMeshTest application_mesh = 38[json_name = "applicationMesh"];
  if (_internal_has_application_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        38, _Internal::application_mesh(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestSettings)
  return target;
}

size_t TestSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string agent_ids = 14[json_name = "agentIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(agent_ids_.size());
  for (int i = 0, n = agent_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      agent_ids_.Get(i));
  }

  // repeated string tasks = 19[json_name = "tasks"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tasks_.size());
  for (int i = 0, n = tasks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tasks_.Get(i));
  }

  // repeated string servers = 30[json_name = "servers"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(servers_.size());
  for (int i = 0, n = servers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      servers_.Get(i));
  }

  // string protocol = 26[json_name = "protocol"];
  if (this->protocol().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // .kentik.synthetics.v202101beta1.HealthSettings health_settings = 22[json_name = "healthSettings"];
  if (this->has_health_settings()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *health_settings_);
  }

  // .kentik.synthetics.v202101beta1.TestMonitoringSettings monitoring_settings = 24[json_name = "monitoringSettings"];
  if (this->has_monitoring_settings()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *monitoring_settings_);
  }

  // .kentik.synthetics.v202101beta1.TestPingSettings ping = 28[json_name = "ping"];
  if (this->has_ping()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ping_);
  }

  // .kentik.synthetics.v202101beta1.TestTraceSettings trace = 29[json_name = "trace"];
  if (this->has_trace()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_);
  }

  // .kentik.synthetics.v202101beta1.HTTPConfig http = 34[json_name = "http"];
  if (this->has_http()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *http_);
  }

  // uint32 period = 15[json_name = "period"];
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // uint32 count = 16[json_name = "count"];
  if (this->count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // uint32 expiry = 17[json_name = "expiry"];
  if (this->expiry() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_expiry());
  }

  // uint32 limit = 18[json_name = "limit"];
  if (this->limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  // uint32 port = 23[json_name = "port"];
  if (this->port() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // .kentik.synthetics.v202101beta1.IPFamily family = 27[json_name = "family"];
  if (this->family() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_family());
  }

  // bool use_local_ip = 31[json_name = "useLocalIp"];
  if (this->use_local_ip() != 0) {
    total_size += 2 + 1;
  }

  // bool reciprocal = 32[json_name = "reciprocal"];
  if (this->reciprocal() != 0) {
    total_size += 2 + 1;
  }

  // uint32 rollup_level = 33[json_name = "rollupLevel"];
  if (this->rollup_level() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rollup_level());
  }

  switch (definition_case()) {
    // .kentik.synthetics.v202101beta1.HostnameTest hostname = 4[json_name = "hostname"];
    case kHostname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.hostname_);
      break;
    }
    // .kentik.synthetics.v202101beta1.IpTest ip = 5[json_name = "ip"];
    case kIp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.ip_);
      break;
    }
    // .kentik.synthetics.v202101beta1.AgentTest agent = 6[json_name = "agent"];
    case kAgent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.agent_);
      break;
    }
    // .kentik.synthetics.v202101beta1.FlowTest flow = 7[json_name = "flow"];
    case kFlow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.flow_);
      break;
    }
    // .kentik.synthetics.v202101beta1.SiteTest site = 8[json_name = "site"];
    case kSite: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.site_);
      break;
    }
    // .kentik.synthetics.v202101beta1.TagTest tag = 9[json_name = "tag"];
    case kTag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.tag_);
      break;
    }
    // .kentik.synthetics.v202101beta1.DnsTest dns = 10[json_name = "dns"];
    case kDns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.dns_);
      break;
    }
    // .kentik.synthetics.v202101beta1.UrlTest url = 11[json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.url_);
      break;
    }
    // .kentik.synthetics.v202101beta1.GridTest network_grid = 35[json_name = "networkGrid"];
    case kNetworkGrid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.network_grid_);
      break;
    }
    // .kentik.synthetics.v202101beta1.UrlTest page_load = 36[json_name = "pageLoad"];
    case kPageLoad: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.page_load_);
      break;
    }
    // .kentik.synthetics.v202101beta1.DnsGridTest dns_grid = 37[json_name = "dnsGrid"];
    case kDnsGrid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.dns_grid_);
      break;
    }
    // .kentik.synthetics.v202101beta1.ApplicationMeshTest application_mesh = 38[json_name = "applicationMesh"];
    case kApplicationMesh: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.application_mesh_);
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TestSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TestSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TestSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TestSettings)
    MergeFrom(*source);
  }
}

void TestSettings::MergeFrom(const TestSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_ids_.MergeFrom(from.agent_ids_);
  tasks_.MergeFrom(from.tasks_);
  servers_.MergeFrom(from.servers_);
  if (from.protocol().size() > 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.has_health_settings()) {
    _internal_mutable_health_settings()->::kentik::synthetics::v202101beta1::HealthSettings::MergeFrom(from._internal_health_settings());
  }
  if (from.has_monitoring_settings()) {
    _internal_mutable_monitoring_settings()->::kentik::synthetics::v202101beta1::TestMonitoringSettings::MergeFrom(from._internal_monitoring_settings());
  }
  if (from.has_ping()) {
    _internal_mutable_ping()->::kentik::synthetics::v202101beta1::TestPingSettings::MergeFrom(from._internal_ping());
  }
  if (from.has_trace()) {
    _internal_mutable_trace()->::kentik::synthetics::v202101beta1::TestTraceSettings::MergeFrom(from._internal_trace());
  }
  if (from.has_http()) {
    _internal_mutable_http()->::kentik::synthetics::v202101beta1::HTTPConfig::MergeFrom(from._internal_http());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.expiry() != 0) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.family() != 0) {
    _internal_set_family(from._internal_family());
  }
  if (from.use_local_ip() != 0) {
    _internal_set_use_local_ip(from._internal_use_local_ip());
  }
  if (from.reciprocal() != 0) {
    _internal_set_reciprocal(from._internal_reciprocal());
  }
  if (from.rollup_level() != 0) {
    _internal_set_rollup_level(from._internal_rollup_level());
  }
  switch (from.definition_case()) {
    case kHostname: {
      _internal_mutable_hostname()->::kentik::synthetics::v202101beta1::HostnameTest::MergeFrom(from._internal_hostname());
      break;
    }
    case kIp: {
      _internal_mutable_ip()->::kentik::synthetics::v202101beta1::IpTest::MergeFrom(from._internal_ip());
      break;
    }
    case kAgent: {
      _internal_mutable_agent()->::kentik::synthetics::v202101beta1::AgentTest::MergeFrom(from._internal_agent());
      break;
    }
    case kFlow: {
      _internal_mutable_flow()->::kentik::synthetics::v202101beta1::FlowTest::MergeFrom(from._internal_flow());
      break;
    }
    case kSite: {
      _internal_mutable_site()->::kentik::synthetics::v202101beta1::SiteTest::MergeFrom(from._internal_site());
      break;
    }
    case kTag: {
      _internal_mutable_tag()->::kentik::synthetics::v202101beta1::TagTest::MergeFrom(from._internal_tag());
      break;
    }
    case kDns: {
      _internal_mutable_dns()->::kentik::synthetics::v202101beta1::DnsTest::MergeFrom(from._internal_dns());
      break;
    }
    case kUrl: {
      _internal_mutable_url()->::kentik::synthetics::v202101beta1::UrlTest::MergeFrom(from._internal_url());
      break;
    }
    case kNetworkGrid: {
      _internal_mutable_network_grid()->::kentik::synthetics::v202101beta1::GridTest::MergeFrom(from._internal_network_grid());
      break;
    }
    case kPageLoad: {
      _internal_mutable_page_load()->::kentik::synthetics::v202101beta1::UrlTest::MergeFrom(from._internal_page_load());
      break;
    }
    case kDnsGrid: {
      _internal_mutable_dns_grid()->::kentik::synthetics::v202101beta1::DnsGridTest::MergeFrom(from._internal_dns_grid());
      break;
    }
    case kApplicationMesh: {
      _internal_mutable_application_mesh()->::kentik::synthetics::v202101beta1::ApplicationMeshTest::MergeFrom(from._internal_application_mesh());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
}

void TestSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TestSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestSettings::CopyFrom(const TestSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSettings::IsInitialized() const {
  return true;
}

void TestSettings::InternalSwap(TestSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_ids_.InternalSwap(&other->agent_ids_);
  tasks_.InternalSwap(&other->tasks_);
  servers_.InternalSwap(&other->servers_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestSettings, rollup_level_)
      + sizeof(TestSettings::rollup_level_)
      - PROTOBUF_FIELD_OFFSET(TestSettings, health_settings_)>(
          reinterpret_cast<char*>(&health_settings_),
          reinterpret_cast<char*>(&other->health_settings_));
  swap(definition_, other->definition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestTraceSettings::InitAsDefaultInstance() {
}
class TestTraceSettings::_Internal {
 public:
};

TestTraceSettings::TestTraceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestTraceSettings)
}
TestTraceSettings::TestTraceSettings(const TestTraceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol(),
      GetArena());
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&period_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestTraceSettings)
}

void TestTraceSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&period_)) + sizeof(delay_));
}

TestTraceSettings::~TestTraceSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestTraceSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestTraceSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestTraceSettings::ArenaDtor(void* object) {
  TestTraceSettings* _this = reinterpret_cast< TestTraceSettings* >(object);
  (void)_this;
}
void TestTraceSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestTraceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestTraceSettings& TestTraceSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestTraceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&period_)) + sizeof(delay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestTraceSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float period = 1[json_name = "period"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float count = 2[json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // string protocol = 3[json_name = "protocol"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestTraceSettings.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float port = 4[json_name = "port"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float expiry = 5[json_name = "expiry"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float limit = 6[json_name = "limit"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float delay = 7[json_name = "delay"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestTraceSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float period = 1[json_name = "period"];
  if (!(this->period() <= 0 && this->period() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_period(), target);
  }

  // float count = 2[json_name = "count"];
  if (!(this->count() <= 0 && this->count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_count(), target);
  }

  // string protocol = 3[json_name = "protocol"];
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestTraceSettings.protocol");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_protocol(), target);
  }

  // float port = 4[json_name = "port"];
  if (!(this->port() <= 0 && this->port() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_port(), target);
  }

  // float expiry = 5[json_name = "expiry"];
  if (!(this->expiry() <= 0 && this->expiry() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_expiry(), target);
  }

  // float limit = 6[json_name = "limit"];
  if (!(this->limit() <= 0 && this->limit() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_limit(), target);
  }

  // float delay = 7[json_name = "delay"];
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestTraceSettings)
  return target;
}

size_t TestTraceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 3[json_name = "protocol"];
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // float period = 1[json_name = "period"];
  if (!(this->period() <= 0 && this->period() >= 0)) {
    total_size += 1 + 4;
  }

  // float count = 2[json_name = "count"];
  if (!(this->count() <= 0 && this->count() >= 0)) {
    total_size += 1 + 4;
  }

  // float port = 4[json_name = "port"];
  if (!(this->port() <= 0 && this->port() >= 0)) {
    total_size += 1 + 4;
  }

  // float expiry = 5[json_name = "expiry"];
  if (!(this->expiry() <= 0 && this->expiry() >= 0)) {
    total_size += 1 + 4;
  }

  // float limit = 6[json_name = "limit"];
  if (!(this->limit() <= 0 && this->limit() >= 0)) {
    total_size += 1 + 4;
  }

  // float delay = 7[json_name = "delay"];
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestTraceSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TestTraceSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestTraceSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TestTraceSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TestTraceSettings)
    MergeFrom(*source);
  }
}

void TestTraceSettings::MergeFrom(const TestTraceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (!(from.period() <= 0 && from.period() >= 0)) {
    _internal_set_period(from._internal_period());
  }
  if (!(from.count() <= 0 && from.count() >= 0)) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.port() <= 0 && from.port() >= 0)) {
    _internal_set_port(from._internal_port());
  }
  if (!(from.expiry() <= 0 && from.expiry() >= 0)) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (!(from.limit() <= 0 && from.limit() >= 0)) {
    _internal_set_limit(from._internal_limit());
  }
  if (!(from.delay() <= 0 && from.delay() >= 0)) {
    _internal_set_delay(from._internal_delay());
  }
}

void TestTraceSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestTraceSettings::CopyFrom(const TestTraceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestTraceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestTraceSettings::IsInitialized() const {
  return true;
}

void TestTraceSettings::InternalSwap(TestTraceSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTraceSettings, delay_)
      + sizeof(TestTraceSettings::delay_)
      - PROTOBUF_FIELD_OFFSET(TestTraceSettings, period_)>(
          reinterpret_cast<char*>(&period_),
          reinterpret_cast<char*>(&other->period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestTraceSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPingSettings::InitAsDefaultInstance() {
}
class TestPingSettings::_Internal {
 public:
};

TestPingSettings::TestPingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestPingSettings)
}
TestPingSettings::TestPingSettings(const TestPingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&period_)) + sizeof(delay_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestPingSettings)
}

void TestPingSettings::SharedCtor() {
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&period_)) + sizeof(delay_));
}

TestPingSettings::~TestPingSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestPingSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestPingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TestPingSettings::ArenaDtor(void* object) {
  TestPingSettings* _this = reinterpret_cast< TestPingSettings* >(object);
  (void)_this;
}
void TestPingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPingSettings& TestPingSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPingSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestPingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestPingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delay_) -
      reinterpret_cast<char*>(&period_)) + sizeof(delay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestPingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float period = 1[json_name = "period"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float count = 2[json_name = "count"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float expiry = 3[json_name = "expiry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          expiry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float delay = 4[json_name = "delay"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestPingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float period = 1[json_name = "period"];
  if (!(this->period() <= 0 && this->period() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_period(), target);
  }

  // float count = 2[json_name = "count"];
  if (!(this->count() <= 0 && this->count() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_count(), target);
  }

  // float expiry = 3[json_name = "expiry"];
  if (!(this->expiry() <= 0 && this->expiry() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_expiry(), target);
  }

  // float delay = 4[json_name = "delay"];
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestPingSettings)
  return target;
}

size_t TestPingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestPingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float period = 1[json_name = "period"];
  if (!(this->period() <= 0 && this->period() >= 0)) {
    total_size += 1 + 4;
  }

  // float count = 2[json_name = "count"];
  if (!(this->count() <= 0 && this->count() >= 0)) {
    total_size += 1 + 4;
  }

  // float expiry = 3[json_name = "expiry"];
  if (!(this->expiry() <= 0 && this->expiry() >= 0)) {
    total_size += 1 + 4;
  }

  // float delay = 4[json_name = "delay"];
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPingSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TestPingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPingSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPingSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TestPingSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TestPingSettings)
    MergeFrom(*source);
  }
}

void TestPingSettings::MergeFrom(const TestPingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestPingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.period() <= 0 && from.period() >= 0)) {
    _internal_set_period(from._internal_period());
  }
  if (!(from.count() <= 0 && from.count() >= 0)) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.expiry() <= 0 && from.expiry() >= 0)) {
    _internal_set_expiry(from._internal_expiry());
  }
  if (!(from.delay() <= 0 && from.delay() >= 0)) {
    _internal_set_delay(from._internal_delay());
  }
}

void TestPingSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TestPingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPingSettings::CopyFrom(const TestPingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestPingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPingSettings::IsInitialized() const {
  return true;
}

void TestPingSettings::InternalSwap(TestPingSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestPingSettings, delay_)
      + sizeof(TestPingSettings::delay_)
      - PROTOBUF_FIELD_OFFSET(TestPingSettings, period_)>(
          reinterpret_cast<char*>(&period_),
          reinterpret_cast<char*>(&other->period_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPingSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestMonitoringSettings::InitAsDefaultInstance() {
}
class TestMonitoringSettings::_Internal {
 public:
};

TestMonitoringSettings::TestMonitoringSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notification_channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TestMonitoringSettings)
}
TestMonitoringSettings::TestMonitoringSettings(const TestMonitoringSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_channels_(from.notification_channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activation_grace_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_activation_grace_period().empty()) {
    activation_grace_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_activation_grace_period(),
      GetArena());
  }
  activation_time_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_activation_time_unit().empty()) {
    activation_time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_activation_time_unit(),
      GetArena());
  }
  activation_time_window_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_activation_time_window().empty()) {
    activation_time_window_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_activation_time_window(),
      GetArena());
  }
  activation_times_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_activation_times().empty()) {
    activation_times_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_activation_times(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TestMonitoringSettings)
}

void TestMonitoringSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestMonitoringSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  activation_grace_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activation_time_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activation_time_window_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activation_times_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TestMonitoringSettings::~TestMonitoringSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestMonitoringSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  activation_grace_period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activation_time_unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activation_time_window_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  activation_times_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestMonitoringSettings::ArenaDtor(void* object) {
  TestMonitoringSettings* _this = reinterpret_cast< TestMonitoringSettings* >(object);
  (void)_this;
}
void TestMonitoringSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestMonitoringSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestMonitoringSettings& TestMonitoringSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestMonitoringSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestMonitoringSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_channels_.Clear();
  activation_grace_period_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  activation_time_unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  activation_time_window_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  activation_times_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestMonitoringSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string activation_grace_period = 1[json_name = "activationGracePeriod"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_activation_grace_period();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string activation_time_unit = 2[json_name = "activationTimeUnit"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_activation_time_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string activation_time_window = 3[json_name = "activationTimeWindow"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_activation_time_window();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string activation_times = 4[json_name = "activationTimes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_activation_times();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string notification_channels = 5[json_name = "notificationChannels"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notification_channels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestMonitoringSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string activation_grace_period = 1[json_name = "activationGracePeriod"];
  if (this->activation_grace_period().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activation_grace_period().data(), static_cast<int>(this->_internal_activation_grace_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_grace_period");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_activation_grace_period(), target);
  }

  // string activation_time_unit = 2[json_name = "activationTimeUnit"];
  if (this->activation_time_unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activation_time_unit().data(), static_cast<int>(this->_internal_activation_time_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_unit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_activation_time_unit(), target);
  }

  // string activation_time_window = 3[json_name = "activationTimeWindow"];
  if (this->activation_time_window().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activation_time_window().data(), static_cast<int>(this->_internal_activation_time_window().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_time_window");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_activation_time_window(), target);
  }

  // string activation_times = 4[json_name = "activationTimes"];
  if (this->activation_times().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activation_times().data(), static_cast<int>(this->_internal_activation_times().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestMonitoringSettings.activation_times");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_activation_times(), target);
  }

  // repeated string notification_channels = 5[json_name = "notificationChannels"];
  for (int i = 0, n = this->_internal_notification_channels_size(); i < n; i++) {
    const auto& s = this->_internal_notification_channels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TestMonitoringSettings.notification_channels");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  return target;
}

size_t TestMonitoringSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string notification_channels = 5[json_name = "notificationChannels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notification_channels_.size());
  for (int i = 0, n = notification_channels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notification_channels_.Get(i));
  }

  // string activation_grace_period = 1[json_name = "activationGracePeriod"];
  if (this->activation_grace_period().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activation_grace_period());
  }

  // string activation_time_unit = 2[json_name = "activationTimeUnit"];
  if (this->activation_time_unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activation_time_unit());
  }

  // string activation_time_window = 3[json_name = "activationTimeWindow"];
  if (this->activation_time_window().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activation_time_window());
  }

  // string activation_times = 4[json_name = "activationTimes"];
  if (this->activation_times().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activation_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestMonitoringSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TestMonitoringSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestMonitoringSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TestMonitoringSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TestMonitoringSettings)
    MergeFrom(*source);
  }
}

void TestMonitoringSettings::MergeFrom(const TestMonitoringSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_channels_.MergeFrom(from.notification_channels_);
  if (from.activation_grace_period().size() > 0) {
    _internal_set_activation_grace_period(from._internal_activation_grace_period());
  }
  if (from.activation_time_unit().size() > 0) {
    _internal_set_activation_time_unit(from._internal_activation_time_unit());
  }
  if (from.activation_time_window().size() > 0) {
    _internal_set_activation_time_window(from._internal_activation_time_window());
  }
  if (from.activation_times().size() > 0) {
    _internal_set_activation_times(from._internal_activation_times());
  }
}

void TestMonitoringSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestMonitoringSettings::CopyFrom(const TestMonitoringSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TestMonitoringSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestMonitoringSettings::IsInitialized() const {
  return true;
}

void TestMonitoringSettings::InternalSwap(TestMonitoringSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notification_channels_.InternalSwap(&other->notification_channels_);
  activation_grace_period_.Swap(&other->activation_grace_period_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  activation_time_unit_.Swap(&other->activation_time_unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  activation_time_window_.Swap(&other->activation_time_window_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  activation_times_.Swap(&other->activation_times_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TestMonitoringSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthSettings::InitAsDefaultInstance() {
}
class HealthSettings::_Internal {
 public:
};

HealthSettings::HealthSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  http_valid_codes_(arena),
  dns_valid_codes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HealthSettings)
}
HealthSettings::HealthSettings(const HealthSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      http_valid_codes_(from.http_valid_codes_),
      dns_valid_codes_(from.dns_valid_codes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latency_critical_, &from.latency_critical_,
    static_cast<size_t>(reinterpret_cast<char*>(&http_latency_warning_stddev_) -
    reinterpret_cast<char*>(&latency_critical_)) + sizeof(http_latency_warning_stddev_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HealthSettings)
}

void HealthSettings::SharedCtor() {
  ::memset(&latency_critical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&http_latency_warning_stddev_) -
      reinterpret_cast<char*>(&latency_critical_)) + sizeof(http_latency_warning_stddev_));
}

HealthSettings::~HealthSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HealthSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void HealthSettings::ArenaDtor(void* object) {
  HealthSettings* _this = reinterpret_cast< HealthSettings* >(object);
  (void)_this;
}
void HealthSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthSettings& HealthSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthSettings_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HealthSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HealthSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_valid_codes_.Clear();
  dns_valid_codes_.Clear();
  ::memset(&latency_critical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&http_latency_warning_stddev_) -
      reinterpret_cast<char*>(&latency_critical_)) + sizeof(http_latency_warning_stddev_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float latency_critical = 1[json_name = "latencyCritical"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          latency_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latency_warning = 2[json_name = "latencyWarning"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          latency_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float packet_loss_critical = 3[json_name = "packetLossCritical"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          packet_loss_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float packet_loss_warning = 4[json_name = "packetLossWarning"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          packet_loss_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jitter_critical = 5[json_name = "jitterCritical"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          jitter_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jitter_warning = 6[json_name = "jitterWarning"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          jitter_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float http_latency_critical = 7[json_name = "httpLatencyCritical"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          http_latency_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float http_latency_warning = 8[json_name = "httpLatencyWarning"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          http_latency_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_http_valid_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dns_valid_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float latency_critical_stddev = 11[json_name = "latencyCriticalStddev"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          latency_critical_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latency_warning_stddev = 12[json_name = "latencyWarningStddev"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          latency_warning_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          jitter_critical_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jitter_warning_stddev = 14[json_name = "jitterWarningStddev"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          jitter_warning_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          http_latency_critical_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          http_latency_warning_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HealthSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latency_critical = 1[json_name = "latencyCritical"];
  if (!(this->latency_critical() <= 0 && this->latency_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_latency_critical(), target);
  }

  // float latency_warning = 2[json_name = "latencyWarning"];
  if (!(this->latency_warning() <= 0 && this->latency_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latency_warning(), target);
  }

  // float packet_loss_critical = 3[json_name = "packetLossCritical"];
  if (!(this->packet_loss_critical() <= 0 && this->packet_loss_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_packet_loss_critical(), target);
  }

  // float packet_loss_warning = 4[json_name = "packetLossWarning"];
  if (!(this->packet_loss_warning() <= 0 && this->packet_loss_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_packet_loss_warning(), target);
  }

  // float jitter_critical = 5[json_name = "jitterCritical"];
  if (!(this->jitter_critical() <= 0 && this->jitter_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_jitter_critical(), target);
  }

  // float jitter_warning = 6[json_name = "jitterWarning"];
  if (!(this->jitter_warning() <= 0 && this->jitter_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_jitter_warning(), target);
  }

  // float http_latency_critical = 7[json_name = "httpLatencyCritical"];
  if (!(this->http_latency_critical() <= 0 && this->http_latency_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_http_latency_critical(), target);
  }

  // float http_latency_warning = 8[json_name = "httpLatencyWarning"];
  if (!(this->http_latency_warning() <= 0 && this->http_latency_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_http_latency_warning(), target);
  }

  // repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes"];
  {
    int byte_size = _http_valid_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_http_valid_codes(), byte_size, target);
    }
  }

  // repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes"];
  {
    int byte_size = _dns_valid_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_dns_valid_codes(), byte_size, target);
    }
  }

  // float latency_critical_stddev = 11[json_name = "latencyCriticalStddev"];
  if (!(this->latency_critical_stddev() <= 0 && this->latency_critical_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_latency_critical_stddev(), target);
  }

  // float latency_warning_stddev = 12[json_name = "latencyWarningStddev"];
  if (!(this->latency_warning_stddev() <= 0 && this->latency_warning_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_latency_warning_stddev(), target);
  }

  // float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev"];
  if (!(this->jitter_critical_stddev() <= 0 && this->jitter_critical_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_jitter_critical_stddev(), target);
  }

  // float jitter_warning_stddev = 14[json_name = "jitterWarningStddev"];
  if (!(this->jitter_warning_stddev() <= 0 && this->jitter_warning_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_jitter_warning_stddev(), target);
  }

  // float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev"];
  if (!(this->http_latency_critical_stddev() <= 0 && this->http_latency_critical_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_http_latency_critical_stddev(), target);
  }

  // float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev"];
  if (!(this->http_latency_warning_stddev() <= 0 && this->http_latency_warning_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_http_latency_warning_stddev(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HealthSettings)
  return target;
}

size_t HealthSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HealthSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->http_valid_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _http_valid_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dns_valid_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dns_valid_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // float latency_critical = 1[json_name = "latencyCritical"];
  if (!(this->latency_critical() <= 0 && this->latency_critical() >= 0)) {
    total_size += 1 + 4;
  }

  // float latency_warning = 2[json_name = "latencyWarning"];
  if (!(this->latency_warning() <= 0 && this->latency_warning() >= 0)) {
    total_size += 1 + 4;
  }

  // float packet_loss_critical = 3[json_name = "packetLossCritical"];
  if (!(this->packet_loss_critical() <= 0 && this->packet_loss_critical() >= 0)) {
    total_size += 1 + 4;
  }

  // float packet_loss_warning = 4[json_name = "packetLossWarning"];
  if (!(this->packet_loss_warning() <= 0 && this->packet_loss_warning() >= 0)) {
    total_size += 1 + 4;
  }

  // float jitter_critical = 5[json_name = "jitterCritical"];
  if (!(this->jitter_critical() <= 0 && this->jitter_critical() >= 0)) {
    total_size += 1 + 4;
  }

  // float jitter_warning = 6[json_name = "jitterWarning"];
  if (!(this->jitter_warning() <= 0 && this->jitter_warning() >= 0)) {
    total_size += 1 + 4;
  }

  // float http_latency_critical = 7[json_name = "httpLatencyCritical"];
  if (!(this->http_latency_critical() <= 0 && this->http_latency_critical() >= 0)) {
    total_size += 1 + 4;
  }

  // float http_latency_warning = 8[json_name = "httpLatencyWarning"];
  if (!(this->http_latency_warning() <= 0 && this->http_latency_warning() >= 0)) {
    total_size += 1 + 4;
  }

  // float latency_critical_stddev = 11[json_name = "latencyCriticalStddev"];
  if (!(this->latency_critical_stddev() <= 0 && this->latency_critical_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float latency_warning_stddev = 12[json_name = "latencyWarningStddev"];
  if (!(this->latency_warning_stddev() <= 0 && this->latency_warning_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev"];
  if (!(this->jitter_critical_stddev() <= 0 && this->jitter_critical_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float jitter_warning_stddev = 14[json_name = "jitterWarningStddev"];
  if (!(this->jitter_warning_stddev() <= 0 && this->jitter_warning_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev"];
  if (!(this->http_latency_critical_stddev() <= 0 && this->http_latency_critical_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev"];
  if (!(this->http_latency_warning_stddev() <= 0 && this->http_latency_warning_stddev() >= 0)) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.HealthSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.HealthSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.HealthSettings)
    MergeFrom(*source);
  }
}

void HealthSettings::MergeFrom(const HealthSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HealthSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_valid_codes_.MergeFrom(from.http_valid_codes_);
  dns_valid_codes_.MergeFrom(from.dns_valid_codes_);
  if (!(from.latency_critical() <= 0 && from.latency_critical() >= 0)) {
    _internal_set_latency_critical(from._internal_latency_critical());
  }
  if (!(from.latency_warning() <= 0 && from.latency_warning() >= 0)) {
    _internal_set_latency_warning(from._internal_latency_warning());
  }
  if (!(from.packet_loss_critical() <= 0 && from.packet_loss_critical() >= 0)) {
    _internal_set_packet_loss_critical(from._internal_packet_loss_critical());
  }
  if (!(from.packet_loss_warning() <= 0 && from.packet_loss_warning() >= 0)) {
    _internal_set_packet_loss_warning(from._internal_packet_loss_warning());
  }
  if (!(from.jitter_critical() <= 0 && from.jitter_critical() >= 0)) {
    _internal_set_jitter_critical(from._internal_jitter_critical());
  }
  if (!(from.jitter_warning() <= 0 && from.jitter_warning() >= 0)) {
    _internal_set_jitter_warning(from._internal_jitter_warning());
  }
  if (!(from.http_latency_critical() <= 0 && from.http_latency_critical() >= 0)) {
    _internal_set_http_latency_critical(from._internal_http_latency_critical());
  }
  if (!(from.http_latency_warning() <= 0 && from.http_latency_warning() >= 0)) {
    _internal_set_http_latency_warning(from._internal_http_latency_warning());
  }
  if (!(from.latency_critical_stddev() <= 0 && from.latency_critical_stddev() >= 0)) {
    _internal_set_latency_critical_stddev(from._internal_latency_critical_stddev());
  }
  if (!(from.latency_warning_stddev() <= 0 && from.latency_warning_stddev() >= 0)) {
    _internal_set_latency_warning_stddev(from._internal_latency_warning_stddev());
  }
  if (!(from.jitter_critical_stddev() <= 0 && from.jitter_critical_stddev() >= 0)) {
    _internal_set_jitter_critical_stddev(from._internal_jitter_critical_stddev());
  }
  if (!(from.jitter_warning_stddev() <= 0 && from.jitter_warning_stddev() >= 0)) {
    _internal_set_jitter_warning_stddev(from._internal_jitter_warning_stddev());
  }
  if (!(from.http_latency_critical_stddev() <= 0 && from.http_latency_critical_stddev() >= 0)) {
    _internal_set_http_latency_critical_stddev(from._internal_http_latency_critical_stddev());
  }
  if (!(from.http_latency_warning_stddev() <= 0 && from.http_latency_warning_stddev() >= 0)) {
    _internal_set_http_latency_warning_stddev(from._internal_http_latency_warning_stddev());
  }
}

void HealthSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.HealthSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthSettings::CopyFrom(const HealthSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HealthSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthSettings::IsInitialized() const {
  return true;
}

void HealthSettings::InternalSwap(HealthSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  http_valid_codes_.InternalSwap(&other->http_valid_codes_);
  dns_valid_codes_.InternalSwap(&other->dns_valid_codes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthSettings, http_latency_warning_stddev_)
      + sizeof(HealthSettings::http_latency_warning_stddev_)
      - PROTOBUF_FIELD_OFFSET(HealthSettings, latency_critical_)>(
          reinterpret_cast<char*>(&latency_critical_),
          reinterpret_cast<char*>(&other->latency_critical_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostnameTest::InitAsDefaultInstance() {
}
class HostnameTest::_Internal {
 public:
};

HostnameTest::HostnameTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.HostnameTest)
}
HostnameTest::HostnameTest(const HostnameTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.HostnameTest)
}

void HostnameTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostnameTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HostnameTest::~HostnameTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.HostnameTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostnameTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostnameTest::ArenaDtor(void* object) {
  HostnameTest* _this = reinterpret_cast< HostnameTest* >(object);
  (void)_this;
}
void HostnameTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostnameTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostnameTest& HostnameTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostnameTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HostnameTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.HostnameTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostnameTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.HostnameTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostnameTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.HostnameTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.HostnameTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.HostnameTest)
  return target;
}

size_t HostnameTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.HostnameTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostnameTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.HostnameTest)
  GOOGLE_DCHECK_NE(&from, this);
  const HostnameTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostnameTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.HostnameTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.HostnameTest)
    MergeFrom(*source);
  }
}

void HostnameTest::MergeFrom(const HostnameTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.HostnameTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
}

void HostnameTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.HostnameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostnameTest::CopyFrom(const HostnameTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.HostnameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostnameTest::IsInitialized() const {
  return true;
}

void HostnameTest::InternalSwap(HostnameTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HostnameTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IpTest::InitAsDefaultInstance() {
}
class IpTest::_Internal {
 public:
};

IpTest::IpTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.IpTest)
}
IpTest::IpTest(const IpTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.IpTest)
}

void IpTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
}

IpTest::~IpTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.IpTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IpTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IpTest::ArenaDtor(void* object) {
  IpTest* _this = reinterpret_cast< IpTest* >(object);
  (void)_this;
}
void IpTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IpTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpTest& IpTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void IpTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.IpTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string targets = 1[json_name = "targets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.IpTest.targets"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.IpTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string targets = 1[json_name = "targets"];
  for (int i = 0, n = this->_internal_targets_size(); i < n; i++) {
    const auto& s = this->_internal_targets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.IpTest.targets");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.IpTest)
  return target;
}

size_t IpTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.IpTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string targets = 1[json_name = "targets"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(targets_.size());
  for (int i = 0, n = targets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      targets_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.IpTest)
  GOOGLE_DCHECK_NE(&from, this);
  const IpTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IpTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.IpTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.IpTest)
    MergeFrom(*source);
  }
}

void IpTest::MergeFrom(const IpTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.IpTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
}

void IpTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.IpTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpTest::CopyFrom(const IpTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.IpTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpTest::IsInitialized() const {
  return true;
}

void IpTest::InternalSwap(IpTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IpTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentTest::InitAsDefaultInstance() {
}
class AgentTest::_Internal {
 public:
};

AgentTest::AgentTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.AgentTest)
}
AgentTest::AgentTest(const AgentTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.AgentTest)
}

void AgentTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AgentTest::~AgentTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.AgentTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgentTest::ArenaDtor(void* object) {
  AgentTest* _this = reinterpret_cast< AgentTest* >(object);
  (void)_this;
}
void AgentTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentTest& AgentTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void AgentTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.AgentTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.AgentTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.AgentTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.AgentTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.AgentTest)
  return target;
}

size_t AgentTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.AgentTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.AgentTest)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.AgentTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.AgentTest)
    MergeFrom(*source);
  }
}

void AgentTest::MergeFrom(const AgentTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.AgentTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
}

void AgentTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.AgentTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTest::CopyFrom(const AgentTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.AgentTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTest::IsInitialized() const {
  return true;
}

void AgentTest::InternalSwap(AgentTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowTest::InitAsDefaultInstance() {
}
class FlowTest::_Internal {
 public:
};

FlowTest::FlowTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.FlowTest)
}
FlowTest::FlowTest(const FlowTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  inet_direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inet_direction().empty()) {
    inet_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inet_direction(),
      GetArena());
  }
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_direction().empty()) {
    direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_direction(),
      GetArena());
  }
  ::memcpy(&target_refresh_interval_millis_, &from.target_refresh_interval_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_tasks_) -
    reinterpret_cast<char*>(&target_refresh_interval_millis_)) + sizeof(max_tasks_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.FlowTest)
}

void FlowTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inet_direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_refresh_interval_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_tasks_) -
      reinterpret_cast<char*>(&target_refresh_interval_millis_)) + sizeof(max_tasks_));
}

FlowTest::~FlowTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.FlowTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inet_direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlowTest::ArenaDtor(void* object) {
  FlowTest* _this = reinterpret_cast< FlowTest* >(object);
  (void)_this;
}
void FlowTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowTest& FlowTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void FlowTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.FlowTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inet_direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&target_refresh_interval_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_tasks_) -
      reinterpret_cast<char*>(&target_refresh_interval_millis_)) + sizeof(max_tasks_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.FlowTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_refresh_interval_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_tasks = 3[json_name = "maxTasks"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 4[json_name = "type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.FlowTest.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inet_direction = 5[json_name = "inetDirection"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_inet_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.FlowTest.inet_direction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string direction = 6[json_name = "direction"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.FlowTest.direction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.FlowTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.FlowTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis"];
  if (this->target_refresh_interval_millis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_refresh_interval_millis(), target);
  }

  // uint32 max_tasks = 3[json_name = "maxTasks"];
  if (this->max_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_tasks(), target);
  }

  // string type = 4[json_name = "type"];
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.FlowTest.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // string inet_direction = 5[json_name = "inetDirection"];
  if (this->inet_direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inet_direction().data(), static_cast<int>(this->_internal_inet_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.FlowTest.inet_direction");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_inet_direction(), target);
  }

  // string direction = 6[json_name = "direction"];
  if (this->direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.FlowTest.direction");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.FlowTest)
  return target;
}

size_t FlowTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.FlowTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string type = 4[json_name = "type"];
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string inet_direction = 5[json_name = "inetDirection"];
  if (this->inet_direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inet_direction());
  }

  // string direction = 6[json_name = "direction"];
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis"];
  if (this->target_refresh_interval_millis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target_refresh_interval_millis());
  }

  // uint32 max_tasks = 3[json_name = "maxTasks"];
  if (this->max_tasks() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_tasks());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.FlowTest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.FlowTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.FlowTest)
    MergeFrom(*source);
  }
}

void FlowTest::MergeFrom(const FlowTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.FlowTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.inet_direction().size() > 0) {
    _internal_set_inet_direction(from._internal_inet_direction());
  }
  if (from.direction().size() > 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.target_refresh_interval_millis() != 0) {
    _internal_set_target_refresh_interval_millis(from._internal_target_refresh_interval_millis());
  }
  if (from.max_tasks() != 0) {
    _internal_set_max_tasks(from._internal_max_tasks());
  }
}

void FlowTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.FlowTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowTest::CopyFrom(const FlowTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.FlowTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowTest::IsInitialized() const {
  return true;
}

void FlowTest::InternalSwap(FlowTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inet_direction_.Swap(&other->inet_direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_.Swap(&other->direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowTest, max_tasks_)
      + sizeof(FlowTest::max_tasks_)
      - PROTOBUF_FIELD_OFFSET(FlowTest, target_refresh_interval_millis_)>(
          reinterpret_cast<char*>(&target_refresh_interval_millis_),
          reinterpret_cast<char*>(&other->target_refresh_interval_millis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SiteTest::InitAsDefaultInstance() {
}
class SiteTest::_Internal {
 public:
};

SiteTest::SiteTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.SiteTest)
}
SiteTest::SiteTest(const SiteTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.SiteTest)
}

void SiteTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SiteTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SiteTest::~SiteTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.SiteTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SiteTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SiteTest::ArenaDtor(void* object) {
  SiteTest* _this = reinterpret_cast< SiteTest* >(object);
  (void)_this;
}
void SiteTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SiteTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SiteTest& SiteTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SiteTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void SiteTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.SiteTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SiteTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.SiteTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SiteTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.SiteTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.SiteTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.SiteTest)
  return target;
}

size_t SiteTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.SiteTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SiteTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.SiteTest)
  GOOGLE_DCHECK_NE(&from, this);
  const SiteTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SiteTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.SiteTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.SiteTest)
    MergeFrom(*source);
  }
}

void SiteTest::MergeFrom(const SiteTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.SiteTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
}

void SiteTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.SiteTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SiteTest::CopyFrom(const SiteTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.SiteTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SiteTest::IsInitialized() const {
  return true;
}

void SiteTest::InternalSwap(SiteTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SiteTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TagTest::InitAsDefaultInstance() {
}
class TagTest::_Internal {
 public:
};

TagTest::TagTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TagTest)
}
TagTest::TagTest(const TagTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TagTest)
}

void TagTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TagTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TagTest::~TagTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TagTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TagTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TagTest::ArenaDtor(void* object) {
  TagTest* _this = reinterpret_cast< TagTest* >(object);
  (void)_this;
}
void TagTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagTest& TagTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TagTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TagTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TagTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TagTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TagTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TagTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TagTest)
  return target;
}

size_t TagTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TagTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TagTest)
  GOOGLE_DCHECK_NE(&from, this);
  const TagTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TagTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TagTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TagTest)
    MergeFrom(*source);
  }
}

void TagTest::MergeFrom(const TagTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TagTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
}

void TagTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagTest::CopyFrom(const TagTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagTest::IsInitialized() const {
  return true;
}

void TagTest::InternalSwap(TagTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata TagTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DnsTest::InitAsDefaultInstance() {
}
class DnsTest::_Internal {
 public:
};

DnsTest::DnsTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DnsTest)
}
DnsTest::DnsTest(const DnsTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DnsTest)
}

void DnsTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DnsTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

DnsTest::~DnsTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DnsTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DnsTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DnsTest::ArenaDtor(void* object) {
  DnsTest* _this = reinterpret_cast< DnsTest* >(object);
  (void)_this;
}
void DnsTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DnsTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnsTest& DnsTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnsTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DnsTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DnsTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DnsTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.DnsTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::synthetics::v202101beta1::DNSRecord>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DnsTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DnsTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.DnsTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DnsTest)
  return target;
}

size_t DnsTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DnsTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnsTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.DnsTest)
  GOOGLE_DCHECK_NE(&from, this);
  const DnsTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnsTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.DnsTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.DnsTest)
    MergeFrom(*source);
  }
}

void DnsTest::MergeFrom(const DnsTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DnsTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DnsTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.DnsTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnsTest::CopyFrom(const DnsTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DnsTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnsTest::IsInitialized() const {
  return true;
}

void DnsTest::InternalSwap(DnsTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DnsTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UrlTest::InitAsDefaultInstance() {
}
class UrlTest::_Internal {
 public:
};

UrlTest::UrlTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.UrlTest)
}
UrlTest::UrlTest(const UrlTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.UrlTest)
}

void UrlTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UrlTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UrlTest::~UrlTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.UrlTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UrlTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UrlTest::ArenaDtor(void* object) {
  UrlTest* _this = reinterpret_cast< UrlTest* >(object);
  (void)_this;
}
void UrlTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UrlTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UrlTest& UrlTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UrlTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UrlTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.UrlTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UrlTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.UrlTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UrlTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.UrlTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.UrlTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.UrlTest)
  return target;
}

size_t UrlTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.UrlTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.UrlTest)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UrlTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.UrlTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.UrlTest)
    MergeFrom(*source);
  }
}

void UrlTest::MergeFrom(const UrlTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.UrlTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
}

void UrlTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.UrlTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlTest::CopyFrom(const UrlTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.UrlTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlTest::IsInitialized() const {
  return true;
}

void UrlTest::InternalSwap(UrlTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata UrlTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GridTest::InitAsDefaultInstance() {
}
class GridTest::_Internal {
 public:
};

GridTest::GridTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GridTest)
}
GridTest::GridTest(const GridTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GridTest)
}

void GridTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
}

GridTest::~GridTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GridTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GridTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GridTest::ArenaDtor(void* object) {
  GridTest* _this = reinterpret_cast< GridTest* >(object);
  (void)_this;
}
void GridTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GridTest& GridTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GridTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GridTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GridTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string targets = 1[json_name = "targets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GridTest.targets"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GridTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string targets = 1[json_name = "targets"];
  for (int i = 0, n = this->_internal_targets_size(); i < n; i++) {
    const auto& s = this->_internal_targets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GridTest.targets");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GridTest)
  return target;
}

size_t GridTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GridTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string targets = 1[json_name = "targets"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(targets_.size());
  for (int i = 0, n = targets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      targets_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GridTest)
  GOOGLE_DCHECK_NE(&from, this);
  const GridTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GridTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GridTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GridTest)
    MergeFrom(*source);
  }
}

void GridTest::MergeFrom(const GridTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GridTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
}

void GridTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GridTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridTest::CopyFrom(const GridTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GridTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridTest::IsInitialized() const {
  return true;
}

void GridTest::InternalSwap(GridTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GridTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DnsGridTest::InitAsDefaultInstance() {
}
class DnsGridTest::_Internal {
 public:
};

DnsGridTest::DnsGridTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DnsGridTest)
}
DnsGridTest::DnsGridTest(const DnsGridTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DnsGridTest)
}

void DnsGridTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DnsGridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  type_ = 0;
}

DnsGridTest::~DnsGridTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DnsGridTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DnsGridTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DnsGridTest::ArenaDtor(void* object) {
  DnsGridTest* _this = reinterpret_cast< DnsGridTest* >(object);
  (void)_this;
}
void DnsGridTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DnsGridTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnsGridTest& DnsGridTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnsGridTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DnsGridTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DnsGridTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DnsGridTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string targets = 1[json_name = "targets"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.DnsGridTest.targets"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::synthetics::v202101beta1::DNSRecord>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DnsGridTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DnsGridTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string targets = 1[json_name = "targets"];
  for (int i = 0, n = this->_internal_targets_size(); i < n; i++) {
    const auto& s = this->_internal_targets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.DnsGridTest.targets");
    target = stream->WriteString(1, s, target);
  }

  // .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DnsGridTest)
  return target;
}

size_t DnsGridTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DnsGridTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string targets = 1[json_name = "targets"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(targets_.size());
  for (int i = 0, n = targets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      targets_.Get(i));
  }

  // .kentik.synthetics.v202101beta1.DNSRecord type = 2[json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnsGridTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.DnsGridTest)
  GOOGLE_DCHECK_NE(&from, this);
  const DnsGridTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnsGridTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.DnsGridTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.DnsGridTest)
    MergeFrom(*source);
  }
}

void DnsGridTest::MergeFrom(const DnsGridTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DnsGridTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void DnsGridTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.DnsGridTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnsGridTest::CopyFrom(const DnsGridTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DnsGridTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnsGridTest::IsInitialized() const {
  return true;
}

void DnsGridTest::InternalSwap(DnsGridTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DnsGridTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ApplicationMeshTest::InitAsDefaultInstance() {
}
class ApplicationMeshTest::_Internal {
 public:
};

ApplicationMeshTest::ApplicationMeshTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ApplicationMeshTest)
}
ApplicationMeshTest::ApplicationMeshTest(const ApplicationMeshTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ApplicationMeshTest)
}

void ApplicationMeshTest::SharedCtor() {
}

ApplicationMeshTest::~ApplicationMeshTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplicationMeshTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ApplicationMeshTest::ArenaDtor(void* object) {
  ApplicationMeshTest* _this = reinterpret_cast< ApplicationMeshTest* >(object);
  (void)_this;
}
void ApplicationMeshTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ApplicationMeshTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ApplicationMeshTest& ApplicationMeshTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ApplicationMeshTest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ApplicationMeshTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationMeshTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationMeshTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  return target;
}

size_t ApplicationMeshTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationMeshTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationMeshTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationMeshTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.ApplicationMeshTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.ApplicationMeshTest)
    MergeFrom(*source);
  }
}

void ApplicationMeshTest::MergeFrom(const ApplicationMeshTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ApplicationMeshTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationMeshTest::CopyFrom(const ApplicationMeshTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ApplicationMeshTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationMeshTest::IsInitialized() const {
  return true;
}

void ApplicationMeshTest::InternalSwap(ApplicationMeshTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationMeshTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshResponse::InitAsDefaultInstance() {
}
class MeshResponse::_Internal {
 public:
};

MeshResponse::MeshResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  columns_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.MeshResponse)
}
MeshResponse::MeshResponse(const MeshResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      columns_(from.columns_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  local_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_ip().empty()) {
    local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_ip(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.MeshResponse)
}

void MeshResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MeshResponse::~MeshResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.MeshResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeshResponse::ArenaDtor(void* object) {
  MeshResponse* _this = reinterpret_cast< MeshResponse* >(object);
  (void)_this;
}
void MeshResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshResponse& MeshResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void MeshResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.MeshResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshResponse.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshResponse.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_ip = 3[json_name = "localIp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_local_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshResponse.local_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 4[json_name = "ip"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshResponse.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 5[json_name = "alias"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshResponse.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6[json_name = "columns"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_columns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.MeshResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshResponse.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string local_ip = 3[json_name = "localIp"];
  if (this->local_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_ip().data(), static_cast<int>(this->_internal_local_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshResponse.local_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_local_ip(), target);
  }

  // string ip = 4[json_name = "ip"];
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshResponse.ip");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip(), target);
  }

  // string alias = 5[json_name = "alias"];
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshResponse.alias");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_alias(), target);
  }

  // repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6[json_name = "columns"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_columns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_columns(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.MeshResponse)
  return target;
}

size_t MeshResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.MeshResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.MeshColumn columns = 6[json_name = "columns"];
  total_size += 1UL * this->_internal_columns_size();
  for (const auto& msg : this->columns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string local_ip = 3[json_name = "localIp"];
  if (this->local_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_ip());
  }

  // string ip = 4[json_name = "ip"];
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string alias = 5[json_name = "alias"];
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.MeshResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.MeshResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.MeshResponse)
    MergeFrom(*source);
  }
}

void MeshResponse::MergeFrom(const MeshResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.MeshResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.local_ip().size() > 0) {
    _internal_set_local_ip(from._internal_local_ip());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
}

void MeshResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.MeshResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshResponse::CopyFrom(const MeshResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.MeshResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshResponse::IsInitialized() const {
  return true;
}

void MeshResponse::InternalSwap(MeshResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  columns_.InternalSwap(&other->columns_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_ip_.Swap(&other->local_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshColumn::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_MeshColumn_default_instance_._instance.get_mutable()->metrics_ = const_cast< ::kentik::synthetics::v202101beta1::MeshMetrics*>(
      ::kentik::synthetics::v202101beta1::MeshMetrics::internal_default_instance());
}
class MeshColumn::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::MeshMetrics& metrics(const MeshColumn* msg);
};

const ::kentik::synthetics::v202101beta1::MeshMetrics&
MeshColumn::_Internal::metrics(const MeshColumn* msg) {
  return *msg->metrics_;
}
MeshColumn::MeshColumn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  health_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.MeshColumn)
}
MeshColumn::MeshColumn(const MeshColumn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      health_(from.health_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::kentik::synthetics::v202101beta1::MeshMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.MeshColumn)
}

void MeshColumn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshColumn_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  metrics_ = nullptr;
}

MeshColumn::~MeshColumn() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.MeshColumn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshColumn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metrics_;
}

void MeshColumn::ArenaDtor(void* object) {
  MeshColumn* _this = reinterpret_cast< MeshColumn* >(object);
  (void)_this;
}
void MeshColumn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshColumn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshColumn& MeshColumn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshColumn_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void MeshColumn::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.MeshColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  health_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshColumn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshColumn.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshColumn.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string alias = 3[json_name = "alias"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshColumn.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target = 4[json_name = "target"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshColumn.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5[json_name = "metrics"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6[json_name = "health"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_health(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshColumn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.MeshColumn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshColumn.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshColumn.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string alias = 3[json_name = "alias"];
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshColumn.alias");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_alias(), target);
  }

  // string target = 4[json_name = "target"];
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshColumn.target");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_target(), target);
  }

  // .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5[json_name = "metrics"];
  if (this->has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::metrics(this), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6[json_name = "health"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_health_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_health(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.MeshColumn)
  return target;
}

size_t MeshColumn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.MeshColumn)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.MeshMetrics health = 6[json_name = "health"];
  total_size += 1UL * this->_internal_health_size();
  for (const auto& msg : this->health_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string alias = 3[json_name = "alias"];
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string target = 4[json_name = "target"];
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // .kentik.synthetics.v202101beta1.MeshMetrics metrics = 5[json_name = "metrics"];
  if (this->has_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshColumn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.MeshColumn)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshColumn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshColumn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.MeshColumn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.MeshColumn)
    MergeFrom(*source);
  }
}

void MeshColumn::MergeFrom(const MeshColumn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.MeshColumn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  health_.MergeFrom(from.health_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.has_metrics()) {
    _internal_mutable_metrics()->::kentik::synthetics::v202101beta1::MeshMetrics::MergeFrom(from._internal_metrics());
  }
}

void MeshColumn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.MeshColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshColumn::CopyFrom(const MeshColumn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.MeshColumn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshColumn::IsInitialized() const {
  return true;
}

void MeshColumn::InternalSwap(MeshColumn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  health_.InternalSwap(&other->health_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(metrics_, other->metrics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshColumn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshMetric::InitAsDefaultInstance() {
}
class MeshMetric::_Internal {
 public:
};

MeshMetric::MeshMetric(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.MeshMetric)
}
MeshMetric::MeshMetric(const MeshMetric& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_health().empty()) {
    health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_health(),
      GetArena());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.MeshMetric)
}

void MeshMetric::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshMetric_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = PROTOBUF_LONGLONG(0);
}

MeshMetric::~MeshMetric() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.MeshMetric)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshMetric::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MeshMetric::ArenaDtor(void* object) {
  MeshMetric* _this = reinterpret_cast< MeshMetric* >(object);
  (void)_this;
}
void MeshMetric::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshMetric::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshMetric& MeshMetric::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshMetric_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void MeshMetric::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.MeshMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshMetric::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshMetric.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string health = 2[json_name = "health"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.MeshMetric.health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 value = 3[json_name = "value"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshMetric::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.MeshMetric)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshMetric.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string health = 2[json_name = "health"];
  if (this->health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_health().data(), static_cast<int>(this->_internal_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.MeshMetric.health");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_health(), target);
  }

  // int64 value = 3[json_name = "value"];
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.MeshMetric)
  return target;
}

size_t MeshMetric::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.MeshMetric)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string health = 2[json_name = "health"];
  if (this->health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_health());
  }

  // int64 value = 3[json_name = "value"];
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshMetric::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.MeshMetric)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshMetric* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshMetric>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.MeshMetric)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.MeshMetric)
    MergeFrom(*source);
  }
}

void MeshMetric::MergeFrom(const MeshMetric& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.MeshMetric)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.health().size() > 0) {
    _internal_set_health(from._internal_health());
  }
  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void MeshMetric::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.MeshMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshMetric::CopyFrom(const MeshMetric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.MeshMetric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshMetric::IsInitialized() const {
  return true;
}

void MeshMetric::InternalSwap(MeshMetric* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  health_.Swap(&other->health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshMetric::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshMetrics::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_MeshMetrics_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_MeshMetrics_default_instance_._instance.get_mutable()->latency_ = const_cast< ::kentik::synthetics::v202101beta1::MeshMetric*>(
      ::kentik::synthetics::v202101beta1::MeshMetric::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_MeshMetrics_default_instance_._instance.get_mutable()->packet_loss_ = const_cast< ::kentik::synthetics::v202101beta1::MeshMetric*>(
      ::kentik::synthetics::v202101beta1::MeshMetric::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_MeshMetrics_default_instance_._instance.get_mutable()->jitter_ = const_cast< ::kentik::synthetics::v202101beta1::MeshMetric*>(
      ::kentik::synthetics::v202101beta1::MeshMetric::internal_default_instance());
}
class MeshMetrics::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const MeshMetrics* msg);
  static const ::kentik::synthetics::v202101beta1::MeshMetric& latency(const MeshMetrics* msg);
  static const ::kentik::synthetics::v202101beta1::MeshMetric& packet_loss(const MeshMetrics* msg);
  static const ::kentik::synthetics::v202101beta1::MeshMetric& jitter(const MeshMetrics* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
MeshMetrics::_Internal::time(const MeshMetrics* msg) {
  return *msg->time_;
}
const ::kentik::synthetics::v202101beta1::MeshMetric&
MeshMetrics::_Internal::latency(const MeshMetrics* msg) {
  return *msg->latency_;
}
const ::kentik::synthetics::v202101beta1::MeshMetric&
MeshMetrics::_Internal::packet_loss(const MeshMetrics* msg) {
  return *msg->packet_loss_;
}
const ::kentik::synthetics::v202101beta1::MeshMetric&
MeshMetrics::_Internal::jitter(const MeshMetrics* msg) {
  return *msg->jitter_;
}
void MeshMetrics::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
MeshMetrics::MeshMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.MeshMetrics)
}
MeshMetrics::MeshMetrics(const MeshMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_latency()) {
    latency_ = new ::kentik::synthetics::v202101beta1::MeshMetric(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  if (from._internal_has_packet_loss()) {
    packet_loss_ = new ::kentik::synthetics::v202101beta1::MeshMetric(*from.packet_loss_);
  } else {
    packet_loss_ = nullptr;
  }
  if (from._internal_has_jitter()) {
    jitter_ = new ::kentik::synthetics::v202101beta1::MeshMetric(*from.jitter_);
  } else {
    jitter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.MeshMetrics)
}

void MeshMetrics::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshMetrics_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jitter_) -
      reinterpret_cast<char*>(&time_)) + sizeof(jitter_));
}

MeshMetrics::~MeshMetrics() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.MeshMetrics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete latency_;
  if (this != internal_default_instance()) delete packet_loss_;
  if (this != internal_default_instance()) delete jitter_;
}

void MeshMetrics::ArenaDtor(void* object) {
  MeshMetrics* _this = reinterpret_cast< MeshMetrics* >(object);
  (void)_this;
}
void MeshMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshMetrics& MeshMetrics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshMetrics_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void MeshMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.MeshMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
  if (GetArena() == nullptr && packet_loss_ != nullptr) {
    delete packet_loss_;
  }
  packet_loss_ = nullptr;
  if (GetArena() == nullptr && jitter_ != nullptr) {
    delete jitter_;
  }
  jitter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1[json_name = "time"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.MeshMetric latency = 2[json_name = "latency"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3[json_name = "packetLoss"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.MeshMetric jitter = 4[json_name = "jitter"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_jitter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshMetrics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.MeshMetrics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.MeshMetric latency = 2[json_name = "latency"];
  if (this->has_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::latency(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3[json_name = "packetLoss"];
  if (this->has_packet_loss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::packet_loss(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.MeshMetric jitter = 4[json_name = "jitter"];
  if (this->has_jitter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::jitter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.MeshMetrics)
  return target;
}

size_t MeshMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.MeshMetrics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .kentik.synthetics.v202101beta1.MeshMetric latency = 2[json_name = "latency"];
  if (this->has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_);
  }

  // .kentik.synthetics.v202101beta1.MeshMetric packet_loss = 3[json_name = "packetLoss"];
  if (this->has_packet_loss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packet_loss_);
  }

  // .kentik.synthetics.v202101beta1.MeshMetric jitter = 4[json_name = "jitter"];
  if (this->has_jitter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jitter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshMetrics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.MeshMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshMetrics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshMetrics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.MeshMetrics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.MeshMetrics)
    MergeFrom(*source);
  }
}

void MeshMetrics::MergeFrom(const MeshMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.MeshMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.has_latency()) {
    _internal_mutable_latency()->::kentik::synthetics::v202101beta1::MeshMetric::MergeFrom(from._internal_latency());
  }
  if (from.has_packet_loss()) {
    _internal_mutable_packet_loss()->::kentik::synthetics::v202101beta1::MeshMetric::MergeFrom(from._internal_packet_loss());
  }
  if (from.has_jitter()) {
    _internal_mutable_jitter()->::kentik::synthetics::v202101beta1::MeshMetric::MergeFrom(from._internal_jitter());
  }
}

void MeshMetrics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.MeshMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshMetrics::CopyFrom(const MeshMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.MeshMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshMetrics::IsInitialized() const {
  return true;
}

void MeshMetrics::InternalSwap(MeshMetrics* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeshMetrics, jitter_)
      + sizeof(MeshMetrics::jitter_)
      - PROTOBUF_FIELD_OFFSET(MeshMetrics, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshMetrics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ASN::InitAsDefaultInstance() {
}
class ASN::_Internal {
 public:
};

ASN::ASN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ASN)
}
ASN::ASN(const ASN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ASN)
}

void ASN::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

ASN::~ASN() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ASN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ASN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ASN::ArenaDtor(void* object) {
  ASN* _this = reinterpret_cast< ASN* >(object);
  (void)_this;
}
void ASN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ASN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ASN& ASN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ASN_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ASN::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ASN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ASN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.ASN.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ASN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ASN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1[json_name = "id"];
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.ASN.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ASN)
  return target;
}

size_t ASN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ASN)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 id = 1[json_name = "id"];
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ASN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.ASN)
  GOOGLE_DCHECK_NE(&from, this);
  const ASN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ASN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.ASN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.ASN)
    MergeFrom(*source);
  }
}

void ASN::MergeFrom(const ASN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ASN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void ASN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.ASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ASN::CopyFrom(const ASN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ASN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ASN::IsInitialized() const {
  return true;
}

void ASN::InternalSwap(ASN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ASN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Country::InitAsDefaultInstance() {
}
class Country::_Internal {
 public:
};

Country::Country(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Country)
}
Country::Country(const Country& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_code(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Country)
}

void Country::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Country_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Country::~Country() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Country)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Country::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Country::ArenaDtor(void* object) {
  Country* _this = reinterpret_cast< Country* >(object);
  (void)_this;
}
void Country::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Country::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Country& Country::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Country_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Country::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Country)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  code_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Country::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string code = 1[json_name = "code"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Country.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Country.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Country::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Country)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1[json_name = "code"];
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Country.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Country.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Country)
  return target;
}

size_t Country::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Country)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1[json_name = "code"];
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Country::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Country)
  GOOGLE_DCHECK_NE(&from, this);
  const Country* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Country>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Country)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Country)
    MergeFrom(*source);
  }
}

void Country::MergeFrom(const Country& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Country)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Country::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Country)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Country::CopyFrom(const Country& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Country)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Country::IsInitialized() const {
  return true;
}

void Country::InternalSwap(Country* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Country::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Region::InitAsDefaultInstance() {
}
class Region::_Internal {
 public:
};

Region::Region(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Region)
}
Region::Region(const Region& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Region)
}

void Region::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Region_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = PROTOBUF_LONGLONG(0);
}

Region::~Region() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Region)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Region::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Region::ArenaDtor(void* object) {
  Region* _this = reinterpret_cast< Region* >(object);
  (void)_this;
}
void Region::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Region::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Region& Region::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Region_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Region::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Region::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Region.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Region::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Region)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1[json_name = "id"];
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Region.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Region)
  return target;
}

size_t Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Region)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 id = 1[json_name = "id"];
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Region::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const Region* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Region>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Region)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Region)
    MergeFrom(*source);
  }
}

void Region::MergeFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Region::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Region::CopyFrom(const Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Region::IsInitialized() const {
  return true;
}

void Region::InternalSwap(Region* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Region::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void City::InitAsDefaultInstance() {
}
class City::_Internal {
 public:
};

City::City(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.City)
}
City::City(const City& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.City)
}

void City::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_City_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

City::~City() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.City)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void City::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void City::ArenaDtor(void* object) {
  City* _this = reinterpret_cast< City* >(object);
  (void)_this;
}
void City::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void City::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const City& City::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_City_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void City::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.City)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* City::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.City.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.City.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 8[json_name = "latitude"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 9[json_name = "longitude"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* City::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.City)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.City.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.City.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // double latitude = 8[json_name = "latitude"];
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_latitude(), target);
  }

  // double longitude = 9[json_name = "longitude"];
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.City)
  return target;
}

size_t City::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.City)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // double latitude = 8[json_name = "latitude"];
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 9[json_name = "longitude"];
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void City::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.City)
  GOOGLE_DCHECK_NE(&from, this);
  const City* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<City>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.City)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.City)
    MergeFrom(*source);
  }
}

void City::MergeFrom(const City& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.City)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void City::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void City::CopyFrom(const City& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.City)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool City::IsInitialized() const {
  return true;
}

void City::InternalSwap(City* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(City, longitude_)
      + sizeof(City::longitude_)
      - PROTOBUF_FIELD_OFFSET(City, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata City::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Geo::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_Geo_default_instance_._instance.get_mutable()->country_ = const_cast< ::kentik::synthetics::v202101beta1::Country*>(
      ::kentik::synthetics::v202101beta1::Country::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Geo_default_instance_._instance.get_mutable()->region_ = const_cast< ::kentik::synthetics::v202101beta1::Region*>(
      ::kentik::synthetics::v202101beta1::Region::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_Geo_default_instance_._instance.get_mutable()->city_ = const_cast< ::kentik::synthetics::v202101beta1::City*>(
      ::kentik::synthetics::v202101beta1::City::internal_default_instance());
}
class Geo::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Country& country(const Geo* msg);
  static const ::kentik::synthetics::v202101beta1::Region& region(const Geo* msg);
  static const ::kentik::synthetics::v202101beta1::City& city(const Geo* msg);
};

const ::kentik::synthetics::v202101beta1::Country&
Geo::_Internal::country(const Geo* msg) {
  return *msg->country_;
}
const ::kentik::synthetics::v202101beta1::Region&
Geo::_Internal::region(const Geo* msg) {
  return *msg->region_;
}
const ::kentik::synthetics::v202101beta1::City&
Geo::_Internal::city(const Geo* msg) {
  return *msg->city_;
}
Geo::Geo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Geo)
}
Geo::Geo(const Geo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_country()) {
    country_ = new ::kentik::synthetics::v202101beta1::Country(*from.country_);
  } else {
    country_ = nullptr;
  }
  if (from._internal_has_region()) {
    region_ = new ::kentik::synthetics::v202101beta1::Region(*from.region_);
  } else {
    region_ = nullptr;
  }
  if (from._internal_has_city()) {
    city_ = new ::kentik::synthetics::v202101beta1::City(*from.city_);
  } else {
    city_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Geo)
}

void Geo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Geo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&country_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&city_) -
      reinterpret_cast<char*>(&country_)) + sizeof(city_));
}

Geo::~Geo() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Geo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Geo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete country_;
  if (this != internal_default_instance()) delete region_;
  if (this != internal_default_instance()) delete city_;
}

void Geo::ArenaDtor(void* object) {
  Geo* _this = reinterpret_cast< Geo* >(object);
  (void)_this;
}
void Geo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Geo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Geo& Geo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Geo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Geo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Geo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && country_ != nullptr) {
    delete country_;
  }
  country_ = nullptr;
  if (GetArena() == nullptr && region_ != nullptr) {
    delete region_;
  }
  region_ = nullptr;
  if (GetArena() == nullptr && city_ != nullptr) {
    delete city_;
  }
  city_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Country country = 1[json_name = "country"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_country(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Region region = 2[json_name = "region"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_region(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.City city = 3[json_name = "city"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_city(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Geo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Geo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Country country = 1[json_name = "country"];
  if (this->has_country()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::country(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.Region region = 2[json_name = "region"];
  if (this->has_region()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::region(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.City city = 3[json_name = "city"];
  if (this->has_city()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::city(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Geo)
  return target;
}

size_t Geo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Geo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Country country = 1[json_name = "country"];
  if (this->has_country()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *country_);
  }

  // .kentik.synthetics.v202101beta1.Region region = 2[json_name = "region"];
  if (this->has_region()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *region_);
  }

  // .kentik.synthetics.v202101beta1.City city = 3[json_name = "city"];
  if (this->has_city()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *city_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Geo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  const Geo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Geo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Geo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Geo)
    MergeFrom(*source);
  }
}

void Geo::MergeFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Geo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_country()) {
    _internal_mutable_country()->::kentik::synthetics::v202101beta1::Country::MergeFrom(from._internal_country());
  }
  if (from.has_region()) {
    _internal_mutable_region()->::kentik::synthetics::v202101beta1::Region::MergeFrom(from._internal_region());
  }
  if (from.has_city()) {
    _internal_mutable_city()->::kentik::synthetics::v202101beta1::City::MergeFrom(from._internal_city());
  }
}

void Geo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Geo::CopyFrom(const Geo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Geo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geo::IsInitialized() const {
  return true;
}

void Geo::InternalSwap(Geo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Geo, city_)
      + sizeof(Geo::city_)
      - PROTOBUF_FIELD_OFFSET(Geo, country_)>(
          reinterpret_cast<char*>(&country_),
          reinterpret_cast<char*>(&other->country_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Geo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DNS::InitAsDefaultInstance() {
}
class DNS::_Internal {
 public:
};

DNS::DNS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DNS)
}
DNS::DNS(const DNS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DNS)
}

void DNS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DNS_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DNS::~DNS() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DNS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DNS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DNS::ArenaDtor(void* object) {
  DNS* _this = reinterpret_cast< DNS* >(object);
  (void)_this;
}
void DNS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DNS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DNS& DNS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DNS_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DNS::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DNS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1[json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.DNS.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DNS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DNS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.DNS.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DNS)
  return target;
}

size_t DNS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DNS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.DNS)
  GOOGLE_DCHECK_NE(&from, this);
  const DNS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DNS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.DNS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.DNS)
    MergeFrom(*source);
  }
}

void DNS::MergeFrom(const DNS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DNS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void DNS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.DNS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNS::CopyFrom(const DNS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DNS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNS::IsInitialized() const {
  return true;
}

void DNS::InternalSwap(DNS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DNS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IPInfo::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_IPInfo_default_instance_._instance.get_mutable()->asn_ = const_cast< ::kentik::synthetics::v202101beta1::ASN*>(
      ::kentik::synthetics::v202101beta1::ASN::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_IPInfo_default_instance_._instance.get_mutable()->geo_ = const_cast< ::kentik::synthetics::v202101beta1::Geo*>(
      ::kentik::synthetics::v202101beta1::Geo::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_IPInfo_default_instance_._instance.get_mutable()->dns_ = const_cast< ::kentik::synthetics::v202101beta1::DNS*>(
      ::kentik::synthetics::v202101beta1::DNS::internal_default_instance());
}
class IPInfo::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::ASN& asn(const IPInfo* msg);
  static const ::kentik::synthetics::v202101beta1::Geo& geo(const IPInfo* msg);
  static const ::kentik::synthetics::v202101beta1::DNS& dns(const IPInfo* msg);
};

const ::kentik::synthetics::v202101beta1::ASN&
IPInfo::_Internal::asn(const IPInfo* msg) {
  return *msg->asn_;
}
const ::kentik::synthetics::v202101beta1::Geo&
IPInfo::_Internal::geo(const IPInfo* msg) {
  return *msg->geo_;
}
const ::kentik::synthetics::v202101beta1::DNS&
IPInfo::_Internal::dns(const IPInfo* msg) {
  return *msg->dns_;
}
IPInfo::IPInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.IPInfo)
}
IPInfo::IPInfo(const IPInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_id().empty()) {
    site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_id(),
      GetArena());
  }
  egress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_egress().empty()) {
    egress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_egress(),
      GetArena());
  }
  if (from._internal_has_asn()) {
    asn_ = new ::kentik::synthetics::v202101beta1::ASN(*from.asn_);
  } else {
    asn_ = nullptr;
  }
  if (from._internal_has_geo()) {
    geo_ = new ::kentik::synthetics::v202101beta1::Geo(*from.geo_);
  } else {
    geo_ = nullptr;
  }
  if (from._internal_has_dns()) {
    dns_ = new ::kentik::synthetics::v202101beta1::DNS(*from.dns_);
  } else {
    dns_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.IPInfo)
}

void IPInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IPInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  egress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&asn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dns_) -
      reinterpret_cast<char*>(&asn_)) + sizeof(dns_));
}

IPInfo::~IPInfo() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.IPInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IPInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  egress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete asn_;
  if (this != internal_default_instance()) delete geo_;
  if (this != internal_default_instance()) delete dns_;
}

void IPInfo::ArenaDtor(void* object) {
  IPInfo* _this = reinterpret_cast< IPInfo* >(object);
  (void)_this;
}
void IPInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IPInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IPInfo& IPInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IPInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void IPInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.IPInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  egress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && asn_ != nullptr) {
    delete asn_;
  }
  asn_ = nullptr;
  if (GetArena() == nullptr && geo_ != nullptr) {
    delete geo_;
  }
  geo_ = nullptr;
  if (GetArena() == nullptr && dns_ != nullptr) {
    delete dns_;
  }
  dns_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IPInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1[json_name = "ip"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.IPInfo.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.ASN asn = 2[json_name = "asn"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_asn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Geo geo = 3[json_name = "geo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.DNS dns = 4[json_name = "dns"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 5[json_name = "deviceId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.IPInfo.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string site_id = 6[json_name = "siteId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_site_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.IPInfo.site_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string egress = 7[json_name = "egress"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_egress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.IPInfo.egress"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IPInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.IPInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1[json_name = "ip"];
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.IPInfo.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // .kentik.synthetics.v202101beta1.ASN asn = 2[json_name = "asn"];
  if (this->has_asn()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::asn(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.Geo geo = 3[json_name = "geo"];
  if (this->has_geo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::geo(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.DNS dns = 4[json_name = "dns"];
  if (this->has_dns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dns(this), target, stream);
  }

  // string device_id = 5[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.IPInfo.device_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_id(), target);
  }

  // string site_id = 6[json_name = "siteId"];
  if (this->site_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_id().data(), static_cast<int>(this->_internal_site_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.IPInfo.site_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_site_id(), target);
  }

  // string egress = 7[json_name = "egress"];
  if (this->egress().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_egress().data(), static_cast<int>(this->_internal_egress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.IPInfo.egress");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_egress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.IPInfo)
  return target;
}

size_t IPInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.IPInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1[json_name = "ip"];
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string device_id = 5[json_name = "deviceId"];
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string site_id = 6[json_name = "siteId"];
  if (this->site_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_id());
  }

  // string egress = 7[json_name = "egress"];
  if (this->egress().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_egress());
  }

  // .kentik.synthetics.v202101beta1.ASN asn = 2[json_name = "asn"];
  if (this->has_asn()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *asn_);
  }

  // .kentik.synthetics.v202101beta1.Geo geo = 3[json_name = "geo"];
  if (this->has_geo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_);
  }

  // .kentik.synthetics.v202101beta1.DNS dns = 4[json_name = "dns"];
  if (this->has_dns()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dns_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IPInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.IPInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const IPInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IPInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.IPInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.IPInfo)
    MergeFrom(*source);
  }
}

void IPInfo::MergeFrom(const IPInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.IPInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.site_id().size() > 0) {
    _internal_set_site_id(from._internal_site_id());
  }
  if (from.egress().size() > 0) {
    _internal_set_egress(from._internal_egress());
  }
  if (from.has_asn()) {
    _internal_mutable_asn()->::kentik::synthetics::v202101beta1::ASN::MergeFrom(from._internal_asn());
  }
  if (from.has_geo()) {
    _internal_mutable_geo()->::kentik::synthetics::v202101beta1::Geo::MergeFrom(from._internal_geo());
  }
  if (from.has_dns()) {
    _internal_mutable_dns()->::kentik::synthetics::v202101beta1::DNS::MergeFrom(from._internal_dns());
  }
}

void IPInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.IPInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IPInfo::CopyFrom(const IPInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.IPInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IPInfo::IsInitialized() const {
  return true;
}

void IPInfo::InternalSwap(IPInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_id_.Swap(&other->site_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  egress_.Swap(&other->egress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IPInfo, dns_)
      + sizeof(IPInfo::dns_)
      - PROTOBUF_FIELD_OFFSET(IPInfo, asn_)>(
          reinterpret_cast<char*>(&asn_),
          reinterpret_cast<char*>(&other->asn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IPInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IDByIP::InitAsDefaultInstance() {
}
class IDByIP::_Internal {
 public:
};

IDByIP::IDByIP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.IDByIP)
}
IDByIP::IDByIP(const IDByIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.IDByIP)
}

void IDByIP::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IDByIP_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IDByIP::~IDByIP() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.IDByIP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IDByIP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IDByIP::ArenaDtor(void* object) {
  IDByIP* _this = reinterpret_cast< IDByIP* >(object);
  (void)_this;
}
void IDByIP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IDByIP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IDByIP& IDByIP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IDByIP_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void IDByIP::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.IDByIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IDByIP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.IDByIP.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2[json_name = "ip"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.IDByIP.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IDByIP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.IDByIP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.IDByIP.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string ip = 2[json_name = "ip"];
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.IDByIP.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.IDByIP)
  return target;
}

size_t IDByIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.IDByIP)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string ip = 2[json_name = "ip"];
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IDByIP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.IDByIP)
  GOOGLE_DCHECK_NE(&from, this);
  const IDByIP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IDByIP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.IDByIP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.IDByIP)
    MergeFrom(*source);
  }
}

void IDByIP::MergeFrom(const IDByIP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.IDByIP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
}

void IDByIP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.IDByIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IDByIP::CopyFrom(const IDByIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.IDByIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IDByIP::IsInitialized() const {
  return true;
}

void IDByIP::InternalSwap(IDByIP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata IDByIP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TracerouteLookup::InitAsDefaultInstance() {
}
class TracerouteLookup::_Internal {
 public:
};

TracerouteLookup::TracerouteLookup(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_id_by_ip_(arena),
  agents_(arena),
  asns_(arena),
  device_id_by_ip_(arena),
  site_id_by_ip_(arena),
  ips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TracerouteLookup)
}
TracerouteLookup::TracerouteLookup(const TracerouteLookup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_id_by_ip_(from.agent_id_by_ip_),
      agents_(from.agents_),
      asns_(from.asns_),
      device_id_by_ip_(from.device_id_by_ip_),
      site_id_by_ip_(from.site_id_by_ip_),
      ips_(from.ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TracerouteLookup)
}

void TracerouteLookup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracerouteLookup_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
}

TracerouteLookup::~TracerouteLookup() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TracerouteLookup)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TracerouteLookup::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TracerouteLookup::ArenaDtor(void* object) {
  TracerouteLookup* _this = reinterpret_cast< TracerouteLookup* >(object);
  (void)_this;
}
void TracerouteLookup::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracerouteLookup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracerouteLookup& TracerouteLookup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracerouteLookup_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TracerouteLookup::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_id_by_ip_.Clear();
  agents_.Clear();
  asns_.Clear();
  device_id_by_ip_.Clear();
  site_id_by_ip_.Clear();
  ips_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracerouteLookup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1[json_name = "agentIdByIp"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agent_id_by_ip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.Agent agents = 2[json_name = "agents"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.ASN asns = 3[json_name = "asns"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asns(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4[json_name = "deviceIdByIp"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_id_by_ip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5[json_name = "siteIdByIp"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_site_id_by_ip(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6[json_name = "ips"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ips(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracerouteLookup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1[json_name = "agentIdByIp"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agent_id_by_ip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agent_id_by_ip(i), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.Agent agents = 2[json_name = "agents"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_agents(i), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.ASN asns = 3[json_name = "asns"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_asns_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_asns(i), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4[json_name = "deviceIdByIp"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_id_by_ip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_device_id_by_ip(i), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5[json_name = "siteIdByIp"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_site_id_by_ip_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_site_id_by_ip(i), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6[json_name = "ips"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ips_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_ips(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TracerouteLookup)
  return target;
}

size_t TracerouteLookup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.IDByIP agent_id_by_ip = 1[json_name = "agentIdByIp"];
  total_size += 1UL * this->_internal_agent_id_by_ip_size();
  for (const auto& msg : this->agent_id_by_ip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202101beta1.Agent agents = 2[json_name = "agents"];
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202101beta1.ASN asns = 3[json_name = "asns"];
  total_size += 1UL * this->_internal_asns_size();
  for (const auto& msg : this->asns_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202101beta1.IDByIP device_id_by_ip = 4[json_name = "deviceIdByIp"];
  total_size += 1UL * this->_internal_device_id_by_ip_size();
  for (const auto& msg : this->device_id_by_ip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202101beta1.IDByIP site_id_by_ip = 5[json_name = "siteIdByIp"];
  total_size += 1UL * this->_internal_site_id_by_ip_size();
  for (const auto& msg : this->site_id_by_ip_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202101beta1.IPInfo ips = 6[json_name = "ips"];
  total_size += 1UL * this->_internal_ips_size();
  for (const auto& msg : this->ips_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracerouteLookup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  GOOGLE_DCHECK_NE(&from, this);
  const TracerouteLookup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TracerouteLookup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TracerouteLookup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TracerouteLookup)
    MergeFrom(*source);
  }
}

void TracerouteLookup::MergeFrom(const TracerouteLookup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_id_by_ip_.MergeFrom(from.agent_id_by_ip_);
  agents_.MergeFrom(from.agents_);
  asns_.MergeFrom(from.asns_);
  device_id_by_ip_.MergeFrom(from.device_id_by_ip_);
  site_id_by_ip_.MergeFrom(from.site_id_by_ip_);
  ips_.MergeFrom(from.ips_);
}

void TracerouteLookup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracerouteLookup::CopyFrom(const TracerouteLookup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TracerouteLookup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracerouteLookup::IsInitialized() const {
  return true;
}

void TracerouteLookup::InternalSwap(TracerouteLookup* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_id_by_ip_.InternalSwap(&other->agent_id_by_ip_);
  agents_.InternalSwap(&other->agents_);
  asns_.InternalSwap(&other->asns_);
  device_id_by_ip_.InternalSwap(&other->device_id_by_ip_);
  site_id_by_ip_.InternalSwap(&other->site_id_by_ip_);
  ips_.InternalSwap(&other->ips_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TracerouteLookup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceHop::InitAsDefaultInstance() {
}
class TraceHop::_Internal {
 public:
};

TraceHop::TraceHop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TraceHop)
}
TraceHop::TraceHop(const TraceHop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  ::memcpy(&ttl_, &from.ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&region_) -
    reinterpret_cast<char*>(&ttl_)) + sizeof(region_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TraceHop)
}

void TraceHop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceHop_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&ttl_)) + sizeof(region_));
}

TraceHop::~TraceHop() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TraceHop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceHop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceHop::ArenaDtor(void* object) {
  TraceHop* _this = reinterpret_cast< TraceHop* >(object);
  (void)_this;
}
void TraceHop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceHop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceHop& TraceHop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceHop_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TraceHop::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TraceHop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&region_) -
      reinterpret_cast<char*>(&ttl_)) + sizeof(region_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceHop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ttl = 1[json_name = "ttl"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ttl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 2[json_name = "ip"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TraceHop.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool timeout = 3[json_name = "timeout"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 latency = 4[json_name = "latency"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min_expected_latency = 5[json_name = "minExpectedLatency"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          min_expected_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 asn = 6[json_name = "asn"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 site = 7[json_name = "site"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          site_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 region = 8[json_name = "region"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          region_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool target = 9[json_name = "target"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trace_end = 10[json_name = "traceEnd"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          trace_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceHop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TraceHop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ttl = 1[json_name = "ttl"];
  if (this->ttl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ttl(), target);
  }

  // string ip = 2[json_name = "ip"];
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TraceHop.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // bool timeout = 3[json_name = "timeout"];
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_timeout(), target);
  }

  // int32 latency = 4[json_name = "latency"];
  if (this->latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_latency(), target);
  }

  // int32 min_expected_latency = 5[json_name = "minExpectedLatency"];
  if (this->min_expected_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_min_expected_latency(), target);
  }

  // int32 asn = 6[json_name = "asn"];
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_asn(), target);
  }

  // int32 site = 7[json_name = "site"];
  if (this->site() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_site(), target);
  }

  // int32 region = 8[json_name = "region"];
  if (this->region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_region(), target);
  }

  // bool target = 9[json_name = "target"];
  if (this->target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_target(), target);
  }

  // bool trace_end = 10[json_name = "traceEnd"];
  if (this->trace_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_trace_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TraceHop)
  return target;
}

size_t TraceHop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TraceHop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2[json_name = "ip"];
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // int32 ttl = 1[json_name = "ttl"];
  if (this->ttl() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ttl());
  }

  // int32 latency = 4[json_name = "latency"];
  if (this->latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_latency());
  }

  // int32 min_expected_latency = 5[json_name = "minExpectedLatency"];
  if (this->min_expected_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min_expected_latency());
  }

  // int32 asn = 6[json_name = "asn"];
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_asn());
  }

  // int32 site = 7[json_name = "site"];
  if (this->site() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_site());
  }

  // bool timeout = 3[json_name = "timeout"];
  if (this->timeout() != 0) {
    total_size += 1 + 1;
  }

  // bool target = 9[json_name = "target"];
  if (this->target() != 0) {
    total_size += 1 + 1;
  }

  // bool trace_end = 10[json_name = "traceEnd"];
  if (this->trace_end() != 0) {
    total_size += 1 + 1;
  }

  // int32 region = 8[json_name = "region"];
  if (this->region() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_region());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceHop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TraceHop)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceHop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceHop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TraceHop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TraceHop)
    MergeFrom(*source);
  }
}

void TraceHop::MergeFrom(const TraceHop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TraceHop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.ttl() != 0) {
    _internal_set_ttl(from._internal_ttl());
  }
  if (from.latency() != 0) {
    _internal_set_latency(from._internal_latency());
  }
  if (from.min_expected_latency() != 0) {
    _internal_set_min_expected_latency(from._internal_min_expected_latency());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.site() != 0) {
    _internal_set_site(from._internal_site());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.target() != 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.trace_end() != 0) {
    _internal_set_trace_end(from._internal_trace_end());
  }
  if (from.region() != 0) {
    _internal_set_region(from._internal_region());
  }
}

void TraceHop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TraceHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceHop::CopyFrom(const TraceHop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TraceHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceHop::IsInitialized() const {
  return true;
}

void TraceHop::InternalSwap(TraceHop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceHop, region_)
      + sizeof(TraceHop::region_)
      - PROTOBUF_FIELD_OFFSET(TraceHop, ttl_)>(
          reinterpret_cast<char*>(&ttl_),
          reinterpret_cast<char*>(&other->ttl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceHop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceProbe::InitAsDefaultInstance() {
}
class TraceProbe::_Internal {
 public:
};

TraceProbe::TraceProbe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  as_path_(arena),
  region_path_(arena),
  site_path_(arena),
  hops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TraceProbe)
}
TraceProbe::TraceProbe(const TraceProbe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      as_path_(from.as_path_),
      region_path_(from.region_path_),
      site_path_(from.site_path_),
      hops_(from.hops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&completed_, &from.completed_,
    static_cast<size_t>(reinterpret_cast<char*>(&hop_count_) -
    reinterpret_cast<char*>(&completed_)) + sizeof(hop_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TraceProbe)
}

void TraceProbe::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceProbe_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&completed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hop_count_) -
      reinterpret_cast<char*>(&completed_)) + sizeof(hop_count_));
}

TraceProbe::~TraceProbe() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TraceProbe)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceProbe::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TraceProbe::ArenaDtor(void* object) {
  TraceProbe* _this = reinterpret_cast< TraceProbe* >(object);
  (void)_this;
}
void TraceProbe::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceProbe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceProbe& TraceProbe::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceProbe_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TraceProbe::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TraceProbe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  as_path_.Clear();
  region_path_.Clear();
  site_path_.Clear();
  hops_.Clear();
  ::memset(&completed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hop_count_) -
      reinterpret_cast<char*>(&completed_)) + sizeof(hop_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceProbe::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 as_path = 1[json_name = "asPath"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_as_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_as_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool completed = 2[json_name = "completed"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          completed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hop_count = 3[json_name = "hopCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string region_path = 4[json_name = "regionPath"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_region_path();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.TraceProbe.region_path"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 site_path = 5[json_name = "sitePath"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_site_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40) {
          _internal_add_site_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6[json_name = "hops"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceProbe::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TraceProbe)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 as_path = 1[json_name = "asPath"];
  {
    int byte_size = _as_path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_as_path(), byte_size, target);
    }
  }

  // bool completed = 2[json_name = "completed"];
  if (this->completed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_completed(), target);
  }

  // int32 hop_count = 3[json_name = "hopCount"];
  if (this->hop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hop_count(), target);
  }

  // repeated string region_path = 4[json_name = "regionPath"];
  for (int i = 0, n = this->_internal_region_path_size(); i < n; i++) {
    const auto& s = this->_internal_region_path(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.TraceProbe.region_path");
    target = stream->WriteString(4, s, target);
  }

  // repeated int32 site_path = 5[json_name = "sitePath"];
  {
    int byte_size = _site_path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_site_path(), byte_size, target);
    }
  }

  // repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6[json_name = "hops"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_hops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TraceProbe)
  return target;
}

size_t TraceProbe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TraceProbe)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 as_path = 1[json_name = "asPath"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->as_path_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _as_path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string region_path = 4[json_name = "regionPath"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(region_path_.size());
  for (int i = 0, n = region_path_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      region_path_.Get(i));
  }

  // repeated int32 site_path = 5[json_name = "sitePath"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->site_path_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _site_path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .kentik.synthetics.v202101beta1.TraceHop hops = 6[json_name = "hops"];
  total_size += 1UL * this->_internal_hops_size();
  for (const auto& msg : this->hops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool completed = 2[json_name = "completed"];
  if (this->completed() != 0) {
    total_size += 1 + 1;
  }

  // int32 hop_count = 3[json_name = "hopCount"];
  if (this->hop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hop_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceProbe::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TraceProbe)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceProbe* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceProbe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TraceProbe)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TraceProbe)
    MergeFrom(*source);
  }
}

void TraceProbe::MergeFrom(const TraceProbe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TraceProbe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  as_path_.MergeFrom(from.as_path_);
  region_path_.MergeFrom(from.region_path_);
  site_path_.MergeFrom(from.site_path_);
  hops_.MergeFrom(from.hops_);
  if (from.completed() != 0) {
    _internal_set_completed(from._internal_completed());
  }
  if (from.hop_count() != 0) {
    _internal_set_hop_count(from._internal_hop_count());
  }
}

void TraceProbe::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TraceProbe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceProbe::CopyFrom(const TraceProbe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TraceProbe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceProbe::IsInitialized() const {
  return true;
}

void TraceProbe::InternalSwap(TraceProbe* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  as_path_.InternalSwap(&other->as_path_);
  region_path_.InternalSwap(&other->region_path_);
  site_path_.InternalSwap(&other->site_path_);
  hops_.InternalSwap(&other->hops_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TraceProbe, hop_count_)
      + sizeof(TraceProbe::hop_count_)
      - PROTOBUF_FIELD_OFFSET(TraceProbe, completed_)>(
          reinterpret_cast<char*>(&completed_),
          reinterpret_cast<char*>(&other->completed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceProbe::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trace::InitAsDefaultInstance() {
}
class Trace::_Internal {
 public:
};

Trace::Trace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  probes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Trace)
}
Trace::Trace(const Trace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      probes_(from.probes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agent_id(),
      GetArena());
  }
  agent_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_ip().empty()) {
    agent_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agent_ip(),
      GetArena());
  }
  target_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_ip().empty()) {
    target_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_ip(),
      GetArena());
  }
  hop_count_ = from.hop_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Trace)
}

void Trace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trace_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agent_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hop_count_ = 0;
}

Trace::~Trace() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Trace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Trace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agent_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Trace::ArenaDtor(void* object) {
  Trace* _this = reinterpret_cast< Trace* >(object);
  (void)_this;
}
void Trace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trace& Trace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trace_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Trace::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  probes_.Clear();
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  agent_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hop_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_id = 1[json_name = "agentId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Trace.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string agent_ip = 2[json_name = "agentIp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_agent_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Trace.agent_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_ip = 3[json_name = "targetIp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.Trace.target_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 hop_count = 4[json_name = "hopCount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          hop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5[json_name = "probes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_probes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Trace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1[json_name = "agentId"];
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Trace.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string agent_ip = 2[json_name = "agentIp"];
  if (this->agent_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_ip().data(), static_cast<int>(this->_internal_agent_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Trace.agent_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_agent_ip(), target);
  }

  // string target_ip = 3[json_name = "targetIp"];
  if (this->target_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_ip().data(), static_cast<int>(this->_internal_target_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.Trace.target_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_ip(), target);
  }

  // int32 hop_count = 4[json_name = "hopCount"];
  if (this->hop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_hop_count(), target);
  }

  // repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5[json_name = "probes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_probes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_probes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Trace)
  return target;
}

size_t Trace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Trace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.TraceProbe probes = 5[json_name = "probes"];
  total_size += 1UL * this->_internal_probes_size();
  for (const auto& msg : this->probes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string agent_id = 1[json_name = "agentId"];
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string agent_ip = 2[json_name = "agentIp"];
  if (this->agent_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_ip());
  }

  // string target_ip = 3[json_name = "targetIp"];
  if (this->target_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_ip());
  }

  // int32 hop_count = 4[json_name = "hopCount"];
  if (this->hop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hop_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  const Trace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Trace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Trace)
    MergeFrom(*source);
  }
}

void Trace::MergeFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Trace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  probes_.MergeFrom(from.probes_);
  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.agent_ip().size() > 0) {
    _internal_set_agent_ip(from._internal_agent_ip());
  }
  if (from.target_ip().size() > 0) {
    _internal_set_target_ip(from._internal_target_ip());
  }
  if (from.hop_count() != 0) {
    _internal_set_hop_count(from._internal_hop_count());
  }
}

void Trace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trace::CopyFrom(const Trace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Trace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trace::IsInitialized() const {
  return true;
}

void Trace::InternalSwap(Trace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  probes_.InternalSwap(&other->probes_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  agent_ip_.Swap(&other->agent_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_ip_.Swap(&other->target_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(hop_count_, other->hop_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stats::InitAsDefaultInstance() {
}
class Stats::_Internal {
 public:
};

Stats::Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.Stats)
}
Stats::Stats(const Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_, &from.average_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_) -
    reinterpret_cast<char*>(&average_)) + sizeof(total_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.Stats)
}

void Stats::SharedCtor() {
  ::memset(&average_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&average_)) + sizeof(total_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Stats::ArenaDtor(void* object) {
  Stats* _this = reinterpret_cast< Stats* >(object);
  (void)_this;
}
void Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stats& Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stats_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_) -
      reinterpret_cast<char*>(&average_)) + sizeof(total_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 average = 1[json_name = "average"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          average_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max = 2[json_name = "max"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 total = 3[json_name = "total"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 average = 1[json_name = "average"];
  if (this->average() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_average(), target);
  }

  // int32 max = 2[json_name = "max"];
  if (this->max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max(), target);
  }

  // int32 total = 3[json_name = "total"];
  if (this->total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.Stats)
  return target;
}

size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 average = 1[json_name = "average"];
  if (this->average() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average());
  }

  // int32 max = 2[json_name = "max"];
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max());
  }

  // int32 total = 3[json_name = "total"];
  if (this->total() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_total());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.average() != 0) {
    _internal_set_average(from._internal_average());
  }
  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
  if (from.total() != 0) {
    _internal_set_total(from._internal_total());
  }
}

void Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  return true;
}

void Stats::InternalSwap(Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats, total_)
      + sizeof(Stats::total_)
      - PROTOBUF_FIELD_OFFSET(Stats, average_)>(
          reinterpret_cast<char*>(&average_),
          reinterpret_cast<char*>(&other->average_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TracerouteResult::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_TracerouteResult_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TracerouteResult_default_instance_._instance.get_mutable()->count_ = const_cast< ::kentik::synthetics::v202101beta1::Stats*>(
      ::kentik::synthetics::v202101beta1::Stats::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_TracerouteResult_default_instance_._instance.get_mutable()->distance_ = const_cast< ::kentik::synthetics::v202101beta1::Stats*>(
      ::kentik::synthetics::v202101beta1::Stats::internal_default_instance());
}
class TracerouteResult::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const TracerouteResult* msg);
  static const ::kentik::synthetics::v202101beta1::Stats& count(const TracerouteResult* msg);
  static const ::kentik::synthetics::v202101beta1::Stats& distance(const TracerouteResult* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TracerouteResult::_Internal::time(const TracerouteResult* msg) {
  return *msg->time_;
}
const ::kentik::synthetics::v202101beta1::Stats&
TracerouteResult::_Internal::count(const TracerouteResult* msg) {
  return *msg->count_;
}
const ::kentik::synthetics::v202101beta1::Stats&
TracerouteResult::_Internal::distance(const TracerouteResult* msg) {
  return *msg->distance_;
}
void TracerouteResult::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
TracerouteResult::TracerouteResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TracerouteResult)
}
TracerouteResult::TracerouteResult(const TracerouteResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      traces_(from.traces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_count()) {
    count_ = new ::kentik::synthetics::v202101beta1::Stats(*from.count_);
  } else {
    count_ = nullptr;
  }
  if (from._internal_has_distance()) {
    distance_ = new ::kentik::synthetics::v202101beta1::Stats(*from.distance_);
  } else {
    distance_ = nullptr;
  }
  hop_count_ = from.hop_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TracerouteResult)
}

void TracerouteResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TracerouteResult_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hop_count_) -
      reinterpret_cast<char*>(&time_)) + sizeof(hop_count_));
}

TracerouteResult::~TracerouteResult() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TracerouteResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TracerouteResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete count_;
  if (this != internal_default_instance()) delete distance_;
}

void TracerouteResult::ArenaDtor(void* object) {
  TracerouteResult* _this = reinterpret_cast< TracerouteResult* >(object);
  (void)_this;
}
void TracerouteResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracerouteResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracerouteResult& TracerouteResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracerouteResult_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TracerouteResult::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TracerouteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traces_.Clear();
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArena() == nullptr && count_ != nullptr) {
    delete count_;
  }
  count_ = nullptr;
  if (GetArena() == nullptr && distance_ != nullptr) {
    delete distance_;
  }
  distance_ = nullptr;
  hop_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracerouteResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1[json_name = "time"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.Trace traces = 2[json_name = "traces"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 hop_count = 3[json_name = "hopCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hop_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Stats count = 4[json_name = "count"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.Stats distance = 5[json_name = "distance"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracerouteResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TracerouteResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.Trace traces = 2[json_name = "traces"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_traces(i), target, stream);
  }

  // int32 hop_count = 3[json_name = "hopCount"];
  if (this->hop_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_hop_count(), target);
  }

  // .kentik.synthetics.v202101beta1.Stats count = 4[json_name = "count"];
  if (this->has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::count(this), target, stream);
  }

  // .kentik.synthetics.v202101beta1.Stats distance = 5[json_name = "distance"];
  if (this->has_distance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::distance(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TracerouteResult)
  return target;
}

size_t TracerouteResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TracerouteResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.Trace traces = 2[json_name = "traces"];
  total_size += 1UL * this->_internal_traces_size();
  for (const auto& msg : this->traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.protobuf.Timestamp time = 1[json_name = "time"];
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .kentik.synthetics.v202101beta1.Stats count = 4[json_name = "count"];
  if (this->has_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *count_);
  }

  // .kentik.synthetics.v202101beta1.Stats distance = 5[json_name = "distance"];
  if (this->has_distance()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distance_);
  }

  // int32 hop_count = 3[json_name = "hopCount"];
  if (this->hop_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hop_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracerouteResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TracerouteResult)
  GOOGLE_DCHECK_NE(&from, this);
  const TracerouteResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TracerouteResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TracerouteResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TracerouteResult)
    MergeFrom(*source);
  }
}

void TracerouteResult::MergeFrom(const TracerouteResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TracerouteResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traces_.MergeFrom(from.traces_);
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.has_count()) {
    _internal_mutable_count()->::kentik::synthetics::v202101beta1::Stats::MergeFrom(from._internal_count());
  }
  if (from.has_distance()) {
    _internal_mutable_distance()->::kentik::synthetics::v202101beta1::Stats::MergeFrom(from._internal_distance());
  }
  if (from.hop_count() != 0) {
    _internal_set_hop_count(from._internal_hop_count());
  }
}

void TracerouteResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TracerouteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracerouteResult::CopyFrom(const TracerouteResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TracerouteResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracerouteResult::IsInitialized() const {
  return true;
}

void TracerouteResult::InternalSwap(TracerouteResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  traces_.InternalSwap(&other->traces_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracerouteResult, hop_count_)
      + sizeof(TracerouteResult::hop_count_)
      - PROTOBUF_FIELD_OFFSET(TracerouteResult, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TracerouteResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TracerouteInfo::InitAsDefaultInstance() {
}
class TracerouteInfo::_Internal {
 public:
};

TracerouteInfo::TracerouteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.TracerouteInfo)
}
TracerouteInfo::TracerouteInfo(const TracerouteInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&is_trace_routes_truncated_, &from.is_trace_routes_truncated_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_region_path_count_) -
    reinterpret_cast<char*>(&is_trace_routes_truncated_)) + sizeof(max_region_path_count_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.TracerouteInfo)
}

void TracerouteInfo::SharedCtor() {
  ::memset(&is_trace_routes_truncated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_region_path_count_) -
      reinterpret_cast<char*>(&is_trace_routes_truncated_)) + sizeof(max_region_path_count_));
}

TracerouteInfo::~TracerouteInfo() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.TracerouteInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TracerouteInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TracerouteInfo::ArenaDtor(void* object) {
  TracerouteInfo* _this = reinterpret_cast< TracerouteInfo* >(object);
  (void)_this;
}
void TracerouteInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TracerouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TracerouteInfo& TracerouteInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TracerouteInfo_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TracerouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&is_trace_routes_truncated_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_region_path_count_) -
      reinterpret_cast<char*>(&is_trace_routes_truncated_)) + sizeof(max_region_path_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TracerouteInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_trace_routes_truncated = 1[json_name = "isTraceRoutesTruncated"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_trace_routes_truncated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_asn_path_count = 2[json_name = "maxAsnPathCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_asn_path_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_site_path_count = 3[json_name = "maxSitePathCount"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_site_path_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_region_path_count = 4[json_name = "maxRegionPathCount"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_region_path_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TracerouteInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_trace_routes_truncated = 1[json_name = "isTraceRoutesTruncated"];
  if (this->is_trace_routes_truncated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_trace_routes_truncated(), target);
  }

  // int32 max_asn_path_count = 2[json_name = "maxAsnPathCount"];
  if (this->max_asn_path_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_asn_path_count(), target);
  }

  // int32 max_site_path_count = 3[json_name = "maxSitePathCount"];
  if (this->max_site_path_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_site_path_count(), target);
  }

  // int32 max_region_path_count = 4[json_name = "maxRegionPathCount"];
  if (this->max_region_path_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_region_path_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.TracerouteInfo)
  return target;
}

size_t TracerouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_trace_routes_truncated = 1[json_name = "isTraceRoutesTruncated"];
  if (this->is_trace_routes_truncated() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_asn_path_count = 2[json_name = "maxAsnPathCount"];
  if (this->max_asn_path_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_asn_path_count());
  }

  // int32 max_site_path_count = 3[json_name = "maxSitePathCount"];
  if (this->max_site_path_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_site_path_count());
  }

  // int32 max_region_path_count = 4[json_name = "maxRegionPathCount"];
  if (this->max_region_path_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_region_path_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TracerouteInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TracerouteInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TracerouteInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.TracerouteInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.TracerouteInfo)
    MergeFrom(*source);
  }
}

void TracerouteInfo::MergeFrom(const TracerouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_trace_routes_truncated() != 0) {
    _internal_set_is_trace_routes_truncated(from._internal_is_trace_routes_truncated());
  }
  if (from.max_asn_path_count() != 0) {
    _internal_set_max_asn_path_count(from._internal_max_asn_path_count());
  }
  if (from.max_site_path_count() != 0) {
    _internal_set_max_site_path_count(from._internal_max_site_path_count());
  }
  if (from.max_region_path_count() != 0) {
    _internal_set_max_region_path_count(from._internal_max_region_path_count());
  }
}

void TracerouteInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TracerouteInfo::CopyFrom(const TracerouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.TracerouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TracerouteInfo::IsInitialized() const {
  return true;
}

void TracerouteInfo::InternalSwap(TracerouteInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TracerouteInfo, max_region_path_count_)
      + sizeof(TracerouteInfo::max_region_path_count_)
      - PROTOBUF_FIELD_OFFSET(TracerouteInfo, is_trace_routes_truncated_)>(
          reinterpret_cast<char*>(&is_trace_routes_truncated_),
          reinterpret_cast<char*>(&other->is_trace_routes_truncated_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TracerouteInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHealthForTestsRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_GetHealthForTestsRequest_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_GetHealthForTestsRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetHealthForTestsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const GetHealthForTestsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const GetHealthForTestsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetHealthForTestsRequest::_Internal::start_time(const GetHealthForTestsRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetHealthForTestsRequest::_Internal::end_time(const GetHealthForTestsRequest* msg) {
  return *msg->end_time_;
}
void GetHealthForTestsRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void GetHealthForTestsRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
GetHealthForTestsRequest::GetHealthForTestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena),
  agent_ids_(arena),
  task_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
}
GetHealthForTestsRequest::GetHealthForTestsRequest(const GetHealthForTestsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      agent_ids_(from.agent_ids_),
      task_ids_(from.task_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  augment_ = from.augment_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
}

void GetHealthForTestsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHealthForTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&augment_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(augment_));
}

GetHealthForTestsRequest::~GetHealthForTestsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetHealthForTestsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void GetHealthForTestsRequest::ArenaDtor(void* object) {
  GetHealthForTestsRequest* _this = reinterpret_cast< GetHealthForTestsRequest* >(object);
  (void)_this;
}
void GetHealthForTestsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHealthForTestsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHealthForTestsRequest& GetHealthForTestsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHealthForTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetHealthForTestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  agent_ids_.Clear();
  task_ids_.Clear();
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  augment_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHealthForTestsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1[json_name = "ids"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string agent_ids = 4[json_name = "agentIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agent_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string task_ids = 5[json_name = "taskIds"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_task_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool augment = 6[json_name = "augment"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          augment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHealthForTestsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1[json_name = "ids"];
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  // repeated string agent_ids = 4[json_name = "agentIds"];
  for (int i = 0, n = this->_internal_agent_ids_size(); i < n; i++) {
    const auto& s = this->_internal_agent_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.agent_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string task_ids = 5[json_name = "taskIds"];
  for (int i = 0, n = this->_internal_task_ids_size(); i < n; i++) {
    const auto& s = this->_internal_task_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GetHealthForTestsRequest.task_ids");
    target = stream->WriteString(5, s, target);
  }

  // bool augment = 6[json_name = "augment"];
  if (this->augment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_augment(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  return target;
}

size_t GetHealthForTestsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1[json_name = "ids"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string agent_ids = 4[json_name = "agentIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(agent_ids_.size());
  for (int i = 0, n = agent_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      agent_ids_.Get(i));
  }

  // repeated string task_ids = 5[json_name = "taskIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(task_ids_.size());
  for (int i = 0, n = task_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      task_ids_.Get(i));
  }

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // bool augment = 6[json_name = "augment"];
  if (this->augment() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHealthForTestsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHealthForTestsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHealthForTestsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
    MergeFrom(*source);
  }
}

void GetHealthForTestsRequest::MergeFrom(const GetHealthForTestsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  agent_ids_.MergeFrom(from.agent_ids_);
  task_ids_.MergeFrom(from.task_ids_);
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from.augment() != 0) {
    _internal_set_augment(from._internal_augment());
  }
}

void GetHealthForTestsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHealthForTestsRequest::CopyFrom(const GetHealthForTestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthForTestsRequest::IsInitialized() const {
  return true;
}

void GetHealthForTestsRequest::InternalSwap(GetHealthForTestsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  agent_ids_.InternalSwap(&other->agent_ids_);
  task_ids_.InternalSwap(&other->task_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, augment_)
      + sizeof(GetHealthForTestsRequest::augment_)
      - PROTOBUF_FIELD_OFFSET(GetHealthForTestsRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthForTestsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetHealthForTestsResponse::InitAsDefaultInstance() {
}
class GetHealthForTestsResponse::_Internal {
 public:
};

GetHealthForTestsResponse::GetHealthForTestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  health_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
}
GetHealthForTestsResponse::GetHealthForTestsResponse(const GetHealthForTestsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      health_(from.health_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
}

void GetHealthForTestsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetHealthForTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
}

GetHealthForTestsResponse::~GetHealthForTestsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetHealthForTestsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetHealthForTestsResponse::ArenaDtor(void* object) {
  GetHealthForTestsResponse* _this = reinterpret_cast< GetHealthForTestsResponse* >(object);
  (void)_this;
}
void GetHealthForTestsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetHealthForTestsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetHealthForTestsResponse& GetHealthForTestsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetHealthForTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetHealthForTestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  health_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetHealthForTestsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202101beta1.TestHealth health = 1[json_name = "health"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_health(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetHealthForTestsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.TestHealth health = 1[json_name = "health"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_health_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_health(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  return target;
}

size_t GetHealthForTestsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.TestHealth health = 1[json_name = "health"];
  total_size += 1UL * this->_internal_health_size();
  for (const auto& msg : this->health_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetHealthForTestsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetHealthForTestsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetHealthForTestsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
    MergeFrom(*source);
  }
}

void GetHealthForTestsResponse::MergeFrom(const GetHealthForTestsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  health_.MergeFrom(from.health_);
}

void GetHealthForTestsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHealthForTestsResponse::CopyFrom(const GetHealthForTestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetHealthForTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHealthForTestsResponse::IsInitialized() const {
  return true;
}

void GetHealthForTestsResponse::InternalSwap(GetHealthForTestsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  health_.InternalSwap(&other->health_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetHealthForTestsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTraceForTestRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_GetTraceForTestRequest_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_GetTraceForTestRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetTraceForTestRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const GetTraceForTestRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const GetTraceForTestRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetTraceForTestRequest::_Internal::start_time(const GetTraceForTestRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetTraceForTestRequest::_Internal::end_time(const GetTraceForTestRequest* msg) {
  return *msg->end_time_;
}
void GetTraceForTestRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void GetTraceForTestRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
GetTraceForTestRequest::GetTraceForTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_ids_(arena),
  target_ips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
}
GetTraceForTestRequest::GetTraceForTestRequest(const GetTraceForTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_ids_(from.agent_ids_),
      target_ips_(from.target_ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
}

void GetTraceForTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

GetTraceForTestRequest::~GetTraceForTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTraceForTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void GetTraceForTestRequest::ArenaDtor(void* object) {
  GetTraceForTestRequest* _this = reinterpret_cast< GetTraceForTestRequest* >(object);
  (void)_this;
}
void GetTraceForTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTraceForTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTraceForTestRequest& GetTraceForTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetTraceForTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_ids_.Clear();
  target_ips_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTraceForTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GetTraceForTestRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string agent_ids = 4[json_name = "agentIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agent_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string target_ips = 5[json_name = "targetIps"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTraceForTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GetTraceForTestRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  // repeated string agent_ids = 4[json_name = "agentIds"];
  for (int i = 0, n = this->_internal_agent_ids_size(); i < n; i++) {
    const auto& s = this->_internal_agent_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GetTraceForTestRequest.agent_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string target_ips = 5[json_name = "targetIps"];
  for (int i = 0, n = this->_internal_target_ips_size(); i < n; i++) {
    const auto& s = this->_internal_target_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GetTraceForTestRequest.target_ips");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  return target;
}

size_t GetTraceForTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string agent_ids = 4[json_name = "agentIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(agent_ids_.size());
  for (int i = 0, n = agent_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      agent_ids_.Get(i));
  }

  // repeated string target_ips = 5[json_name = "targetIps"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_ips_.size());
  for (int i = 0, n = target_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_ips_.Get(i));
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime"];
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime"];
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTraceForTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTraceForTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTraceForTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
    MergeFrom(*source);
  }
}

void GetTraceForTestRequest::MergeFrom(const GetTraceForTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_ids_.MergeFrom(from.agent_ids_);
  target_ips_.MergeFrom(from.target_ips_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
}

void GetTraceForTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTraceForTestRequest::CopyFrom(const GetTraceForTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetTraceForTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTraceForTestRequest::IsInitialized() const {
  return true;
}

void GetTraceForTestRequest::InternalSwap(GetTraceForTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_ids_.InternalSwap(&other->agent_ids_);
  target_ips_.InternalSwap(&other->target_ips_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, end_time_)
      + sizeof(GetTraceForTestRequest::end_time_)
      - PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTraceForTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTraceForTestResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_GetTraceForTestResponse_default_instance_._instance.get_mutable()->lookups_ = const_cast< ::kentik::synthetics::v202101beta1::TracerouteLookup*>(
      ::kentik::synthetics::v202101beta1::TracerouteLookup::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_GetTraceForTestResponse_default_instance_._instance.get_mutable()->trace_routes_info_ = const_cast< ::kentik::synthetics::v202101beta1::TracerouteInfo*>(
      ::kentik::synthetics::v202101beta1::TracerouteInfo::internal_default_instance());
}
class GetTraceForTestResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::TracerouteLookup& lookups(const GetTraceForTestResponse* msg);
  static const ::kentik::synthetics::v202101beta1::TracerouteInfo& trace_routes_info(const GetTraceForTestResponse* msg);
};

const ::kentik::synthetics::v202101beta1::TracerouteLookup&
GetTraceForTestResponse::_Internal::lookups(const GetTraceForTestResponse* msg) {
  return *msg->lookups_;
}
const ::kentik::synthetics::v202101beta1::TracerouteInfo&
GetTraceForTestResponse::_Internal::trace_routes_info(const GetTraceForTestResponse* msg) {
  return *msg->trace_routes_info_;
}
GetTraceForTestResponse::GetTraceForTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trace_routes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
}
GetTraceForTestResponse::GetTraceForTestResponse(const GetTraceForTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      trace_routes_(from.trace_routes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_lookups()) {
    lookups_ = new ::kentik::synthetics::v202101beta1::TracerouteLookup(*from.lookups_);
  } else {
    lookups_ = nullptr;
  }
  if (from._internal_has_trace_routes_info()) {
    trace_routes_info_ = new ::kentik::synthetics::v202101beta1::TracerouteInfo(*from.trace_routes_info_);
  } else {
    trace_routes_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
}

void GetTraceForTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&lookups_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_routes_info_) -
      reinterpret_cast<char*>(&lookups_)) + sizeof(trace_routes_info_));
}

GetTraceForTestResponse::~GetTraceForTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTraceForTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete lookups_;
  if (this != internal_default_instance()) delete trace_routes_info_;
}

void GetTraceForTestResponse::ArenaDtor(void* object) {
  GetTraceForTestResponse* _this = reinterpret_cast< GetTraceForTestResponse* >(object);
  (void)_this;
}
void GetTraceForTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTraceForTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTraceForTestResponse& GetTraceForTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetTraceForTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trace_routes_.Clear();
  if (GetArena() == nullptr && lookups_ != nullptr) {
    delete lookups_;
  }
  lookups_ = nullptr;
  if (GetArena() == nullptr && trace_routes_info_ != nullptr) {
    delete trace_routes_info_;
  }
  trace_routes_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTraceForTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1[json_name = "lookups"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_lookups(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2[json_name = "traceRoutes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trace_routes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3[json_name = "traceRoutesInfo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace_routes_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTraceForTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1[json_name = "lookups"];
  if (this->has_lookups()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::lookups(this), target, stream);
  }

  // repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2[json_name = "traceRoutes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trace_routes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_trace_routes(i), target, stream);
  }

  // .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3[json_name = "traceRoutesInfo"];
  if (this->has_trace_routes_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trace_routes_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  return target;
}

size_t GetTraceForTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.TracerouteResult trace_routes = 2[json_name = "traceRoutes"];
  total_size += 1UL * this->_internal_trace_routes_size();
  for (const auto& msg : this->trace_routes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .kentik.synthetics.v202101beta1.TracerouteLookup lookups = 1[json_name = "lookups"];
  if (this->has_lookups()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lookups_);
  }

  // .kentik.synthetics.v202101beta1.TracerouteInfo trace_routes_info = 3[json_name = "traceRoutesInfo"];
  if (this->has_trace_routes_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_routes_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTraceForTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTraceForTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTraceForTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
    MergeFrom(*source);
  }
}

void GetTraceForTestResponse::MergeFrom(const GetTraceForTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trace_routes_.MergeFrom(from.trace_routes_);
  if (from.has_lookups()) {
    _internal_mutable_lookups()->::kentik::synthetics::v202101beta1::TracerouteLookup::MergeFrom(from._internal_lookups());
  }
  if (from.has_trace_routes_info()) {
    _internal_mutable_trace_routes_info()->::kentik::synthetics::v202101beta1::TracerouteInfo::MergeFrom(from._internal_trace_routes_info());
  }
}

void GetTraceForTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTraceForTestResponse::CopyFrom(const GetTraceForTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetTraceForTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTraceForTestResponse::IsInitialized() const {
  return true;
}

void GetTraceForTestResponse::InternalSwap(GetTraceForTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  trace_routes_.InternalSwap(&other->trace_routes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, trace_routes_info_)
      + sizeof(GetTraceForTestResponse::trace_routes_info_)
      - PROTOBUF_FIELD_OFFSET(GetTraceForTestResponse, lookups_)>(
          reinterpret_cast<char*>(&lookups_),
          reinterpret_cast<char*>(&other->lookups_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTraceForTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAgentsRequest::InitAsDefaultInstance() {
}
class ListAgentsRequest::_Internal {
 public:
};

ListAgentsRequest::ListAgentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ListAgentsRequest)
}
ListAgentsRequest::ListAgentsRequest(const ListAgentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ListAgentsRequest)
}

void ListAgentsRequest::SharedCtor() {
}

ListAgentsRequest::~ListAgentsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ListAgentsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAgentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAgentsRequest::ArenaDtor(void* object) {
  ListAgentsRequest* _this = reinterpret_cast< ListAgentsRequest* >(object);
  (void)_this;
}
void ListAgentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAgentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAgentsRequest& ListAgentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListAgentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ListAgentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAgentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAgentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ListAgentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ListAgentsRequest)
  return target;
}

size_t ListAgentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ListAgentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAgentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.ListAgentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAgentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAgentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.ListAgentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.ListAgentsRequest)
    MergeFrom(*source);
  }
}

void ListAgentsRequest::MergeFrom(const ListAgentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ListAgentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListAgentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.ListAgentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAgentsRequest::CopyFrom(const ListAgentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ListAgentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAgentsRequest::IsInitialized() const {
  return true;
}

void ListAgentsRequest::InternalSwap(ListAgentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAgentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAgentsResponse::InitAsDefaultInstance() {
}
class ListAgentsResponse::_Internal {
 public:
};

ListAgentsResponse::ListAgentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ListAgentsResponse)
}
ListAgentsResponse::ListAgentsResponse(const ListAgentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_agents_count_ = from.invalid_agents_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ListAgentsResponse)
}

void ListAgentsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  invalid_agents_count_ = 0u;
}

ListAgentsResponse::~ListAgentsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ListAgentsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAgentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAgentsResponse::ArenaDtor(void* object) {
  ListAgentsResponse* _this = reinterpret_cast< ListAgentsResponse* >(object);
  (void)_this;
}
void ListAgentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAgentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAgentsResponse& ListAgentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListAgentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  invalid_agents_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAgentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202101beta1.Agent agents = 1[json_name = "agents"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_agents_count = 2[json_name = "invalidAgentsCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_agents_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAgentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.Agent agents = 1[json_name = "agents"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  // uint32 invalid_agents_count = 2[json_name = "invalidAgentsCount"];
  if (this->invalid_agents_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_agents_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ListAgentsResponse)
  return target;
}

size_t ListAgentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.Agent agents = 1[json_name = "agents"];
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_agents_count = 2[json_name = "invalidAgentsCount"];
  if (this->invalid_agents_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_agents_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAgentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAgentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAgentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.ListAgentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.ListAgentsResponse)
    MergeFrom(*source);
  }
}

void ListAgentsResponse::MergeFrom(const ListAgentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.invalid_agents_count() != 0) {
    _internal_set_invalid_agents_count(from._internal_invalid_agents_count());
  }
}

void ListAgentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAgentsResponse::CopyFrom(const ListAgentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ListAgentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAgentsResponse::IsInitialized() const {
  return true;
}

void ListAgentsResponse::InternalSwap(ListAgentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  swap(invalid_agents_count_, other->invalid_agents_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAgentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAgentRequest::InitAsDefaultInstance() {
}
class GetAgentRequest::_Internal {
 public:
};

GetAgentRequest::GetAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetAgentRequest)
}
GetAgentRequest::GetAgentRequest(const GetAgentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetAgentRequest)
}

void GetAgentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAgentRequest::~GetAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetAgentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAgentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAgentRequest::ArenaDtor(void* object) {
  GetAgentRequest* _this = reinterpret_cast< GetAgentRequest* >(object);
  (void)_this;
}
void GetAgentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAgentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAgentRequest& GetAgentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAgentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GetAgentRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAgentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GetAgentRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetAgentRequest)
  return target;
}

size_t GetAgentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAgentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAgentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAgentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GetAgentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GetAgentRequest)
    MergeFrom(*source);
  }
}

void GetAgentRequest::MergeFrom(const GetAgentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetAgentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentRequest::CopyFrom(const GetAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentRequest::IsInitialized() const {
  return true;
}

void GetAgentRequest::InternalSwap(GetAgentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAgentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAgentResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_GetAgentResponse_default_instance_._instance.get_mutable()->agent_ = const_cast< ::kentik::synthetics::v202101beta1::Agent*>(
      ::kentik::synthetics::v202101beta1::Agent::internal_default_instance());
}
class GetAgentResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Agent& agent(const GetAgentResponse* msg);
};

const ::kentik::synthetics::v202101beta1::Agent&
GetAgentResponse::_Internal::agent(const GetAgentResponse* msg) {
  return *msg->agent_;
}
GetAgentResponse::GetAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetAgentResponse)
}
GetAgentResponse::GetAgentResponse(const GetAgentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent()) {
    agent_ = new ::kentik::synthetics::v202101beta1::Agent(*from.agent_);
  } else {
    agent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetAgentResponse)
}

void GetAgentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  agent_ = nullptr;
}

GetAgentResponse::~GetAgentResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetAgentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAgentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_;
}

void GetAgentResponse::ArenaDtor(void* object) {
  GetAgentResponse* _this = reinterpret_cast< GetAgentResponse* >(object);
  (void)_this;
}
void GetAgentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAgentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAgentResponse& GetAgentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetAgentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAgentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAgentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  if (this->has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetAgentResponse)
  return target;
}

size_t GetAgentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  if (this->has_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAgentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAgentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAgentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GetAgentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GetAgentResponse)
    MergeFrom(*source);
  }
}

void GetAgentResponse::MergeFrom(const GetAgentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent()) {
    _internal_mutable_agent()->::kentik::synthetics::v202101beta1::Agent::MergeFrom(from._internal_agent());
  }
}

void GetAgentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentResponse::CopyFrom(const GetAgentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentResponse::IsInitialized() const {
  return true;
}

void GetAgentResponse::InternalSwap(GetAgentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(agent_, other->agent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAgentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAgentRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_PatchAgentRequest_default_instance_._instance.get_mutable()->agent_ = const_cast< ::kentik::synthetics::v202101beta1::Agent*>(
      ::kentik::synthetics::v202101beta1::Agent::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_PatchAgentRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class PatchAgentRequest::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Agent& agent(const PatchAgentRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& mask(const PatchAgentRequest* msg);
};

const ::kentik::synthetics::v202101beta1::Agent&
PatchAgentRequest::_Internal::agent(const PatchAgentRequest* msg) {
  return *msg->agent_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
PatchAgentRequest::_Internal::mask(const PatchAgentRequest* msg) {
  return *msg->mask_;
}
void PatchAgentRequest::clear_mask() {
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
PatchAgentRequest::PatchAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PatchAgentRequest)
}
PatchAgentRequest::PatchAgentRequest(const PatchAgentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent()) {
    agent_ = new ::kentik::synthetics::v202101beta1::Agent(*from.agent_);
  } else {
    agent_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PatchAgentRequest)
}

void PatchAgentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&agent_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_) -
      reinterpret_cast<char*>(&agent_)) + sizeof(mask_));
}

PatchAgentRequest::~PatchAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PatchAgentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatchAgentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_;
  if (this != internal_default_instance()) delete mask_;
}

void PatchAgentRequest::ArenaDtor(void* object) {
  PatchAgentRequest* _this = reinterpret_cast< PatchAgentRequest* >(object);
  (void)_this;
}
void PatchAgentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAgentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAgentRequest& PatchAgentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PatchAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAgentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAgentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  if (this->has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent(this), target, stream);
  }

  // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
  if (this->has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PatchAgentRequest)
  return target;
}

size_t PatchAgentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  if (this->has_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_);
  }

  // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
  if (this->has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAgentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAgentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAgentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.PatchAgentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.PatchAgentRequest)
    MergeFrom(*source);
  }
}

void PatchAgentRequest::MergeFrom(const PatchAgentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent()) {
    _internal_mutable_agent()->::kentik::synthetics::v202101beta1::Agent::MergeFrom(from._internal_agent());
  }
  if (from.has_mask()) {
    _internal_mutable_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_mask());
  }
}

void PatchAgentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAgentRequest::CopyFrom(const PatchAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PatchAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAgentRequest::IsInitialized() const {
  return true;
}

void PatchAgentRequest::InternalSwap(PatchAgentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchAgentRequest, mask_)
      + sizeof(PatchAgentRequest::mask_)
      - PROTOBUF_FIELD_OFFSET(PatchAgentRequest, agent_)>(
          reinterpret_cast<char*>(&agent_),
          reinterpret_cast<char*>(&other->agent_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAgentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchAgentResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_PatchAgentResponse_default_instance_._instance.get_mutable()->agent_ = const_cast< ::kentik::synthetics::v202101beta1::Agent*>(
      ::kentik::synthetics::v202101beta1::Agent::internal_default_instance());
}
class PatchAgentResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Agent& agent(const PatchAgentResponse* msg);
};

const ::kentik::synthetics::v202101beta1::Agent&
PatchAgentResponse::_Internal::agent(const PatchAgentResponse* msg) {
  return *msg->agent_;
}
PatchAgentResponse::PatchAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PatchAgentResponse)
}
PatchAgentResponse::PatchAgentResponse(const PatchAgentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent()) {
    agent_ = new ::kentik::synthetics::v202101beta1::Agent(*from.agent_);
  } else {
    agent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PatchAgentResponse)
}

void PatchAgentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  agent_ = nullptr;
}

PatchAgentResponse::~PatchAgentResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PatchAgentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatchAgentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_;
}

void PatchAgentResponse::ArenaDtor(void* object) {
  PatchAgentResponse* _this = reinterpret_cast< PatchAgentResponse* >(object);
  (void)_this;
}
void PatchAgentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchAgentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchAgentResponse& PatchAgentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PatchAgentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchAgentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchAgentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  if (this->has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PatchAgentResponse)
  return target;
}

size_t PatchAgentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Agent agent = 1[json_name = "agent"];
  if (this->has_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchAgentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchAgentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchAgentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.PatchAgentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.PatchAgentResponse)
    MergeFrom(*source);
  }
}

void PatchAgentResponse::MergeFrom(const PatchAgentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent()) {
    _internal_mutable_agent()->::kentik::synthetics::v202101beta1::Agent::MergeFrom(from._internal_agent());
  }
}

void PatchAgentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchAgentResponse::CopyFrom(const PatchAgentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PatchAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchAgentResponse::IsInitialized() const {
  return true;
}

void PatchAgentResponse::InternalSwap(PatchAgentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(agent_, other->agent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchAgentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAgentRequest::InitAsDefaultInstance() {
}
class DeleteAgentRequest::_Internal {
 public:
};

DeleteAgentRequest::DeleteAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DeleteAgentRequest)
}
DeleteAgentRequest::DeleteAgentRequest(const DeleteAgentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DeleteAgentRequest)
}

void DeleteAgentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteAgentRequest::~DeleteAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAgentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteAgentRequest::ArenaDtor(void* object) {
  DeleteAgentRequest* _this = reinterpret_cast< DeleteAgentRequest* >(object);
  (void)_this;
}
void DeleteAgentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAgentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAgentRequest& DeleteAgentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAgentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.DeleteAgentRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAgentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.DeleteAgentRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  return target;
}

size_t DeleteAgentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAgentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAgentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAgentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.DeleteAgentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.DeleteAgentRequest)
    MergeFrom(*source);
  }
}

void DeleteAgentRequest::MergeFrom(const DeleteAgentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteAgentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAgentRequest::CopyFrom(const DeleteAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DeleteAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAgentRequest::IsInitialized() const {
  return true;
}

void DeleteAgentRequest::InternalSwap(DeleteAgentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAgentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAgentResponse::InitAsDefaultInstance() {
}
class DeleteAgentResponse::_Internal {
 public:
};

DeleteAgentResponse::DeleteAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DeleteAgentResponse)
}
DeleteAgentResponse::DeleteAgentResponse(const DeleteAgentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DeleteAgentResponse)
}

void DeleteAgentResponse::SharedCtor() {
}

DeleteAgentResponse::~DeleteAgentResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAgentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteAgentResponse::ArenaDtor(void* object) {
  DeleteAgentResponse* _this = reinterpret_cast< DeleteAgentResponse* >(object);
  (void)_this;
}
void DeleteAgentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAgentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAgentResponse& DeleteAgentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteAgentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAgentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAgentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  return target;
}

size_t DeleteAgentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAgentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAgentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAgentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.DeleteAgentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.DeleteAgentResponse)
    MergeFrom(*source);
  }
}

void DeleteAgentResponse::MergeFrom(const DeleteAgentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteAgentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAgentResponse::CopyFrom(const DeleteAgentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DeleteAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAgentResponse::IsInitialized() const {
  return true;
}

void DeleteAgentResponse::InternalSwap(DeleteAgentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAgentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTestsRequest::InitAsDefaultInstance() {
}
class ListTestsRequest::_Internal {
 public:
};

ListTestsRequest::ListTestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ListTestsRequest)
}
ListTestsRequest::ListTestsRequest(const ListTestsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  preset_ = from.preset_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ListTestsRequest)
}

void ListTestsRequest::SharedCtor() {
  preset_ = false;
}

ListTestsRequest::~ListTestsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ListTestsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTestsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListTestsRequest::ArenaDtor(void* object) {
  ListTestsRequest* _this = reinterpret_cast< ListTestsRequest* >(object);
  (void)_this;
}
void ListTestsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTestsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTestsRequest& ListTestsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTestsRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListTestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  preset_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTestsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool preset = 1[json_name = "preset"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          preset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTestsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool preset = 1[json_name = "preset"];
  if (this->preset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_preset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ListTestsRequest)
  return target;
}

size_t ListTestsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool preset = 1[json_name = "preset"];
  if (this->preset() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTestsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTestsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTestsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.ListTestsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.ListTestsRequest)
    MergeFrom(*source);
  }
}

void ListTestsRequest::MergeFrom(const ListTestsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.preset() != 0) {
    _internal_set_preset(from._internal_preset());
  }
}

void ListTestsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTestsRequest::CopyFrom(const ListTestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ListTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTestsRequest::IsInitialized() const {
  return true;
}

void ListTestsRequest::InternalSwap(ListTestsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(preset_, other->preset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTestsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTestsResponse::InitAsDefaultInstance() {
}
class ListTestsResponse::_Internal {
 public:
};

ListTestsResponse::ListTestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.ListTestsResponse)
}
ListTestsResponse::ListTestsResponse(const ListTestsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tests_(from.tests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_tests_count_ = from.invalid_tests_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.ListTestsResponse)
}

void ListTestsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  invalid_tests_count_ = 0u;
}

ListTestsResponse::~ListTestsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.ListTestsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTestsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListTestsResponse::ArenaDtor(void* object) {
  ListTestsResponse* _this = reinterpret_cast< ListTestsResponse* >(object);
  (void)_this;
}
void ListTestsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTestsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTestsResponse& ListTestsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTestsResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListTestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tests_.Clear();
  invalid_tests_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTestsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202101beta1.Test tests = 1[json_name = "tests"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_tests_count = 2[json_name = "invalidTestsCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_tests_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTestsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.Test tests = 1[json_name = "tests"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tests(i), target, stream);
  }

  // uint32 invalid_tests_count = 2[json_name = "invalidTestsCount"];
  if (this->invalid_tests_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_tests_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.ListTestsResponse)
  return target;
}

size_t ListTestsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202101beta1.Test tests = 1[json_name = "tests"];
  total_size += 1UL * this->_internal_tests_size();
  for (const auto& msg : this->tests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_tests_count = 2[json_name = "invalidTestsCount"];
  if (this->invalid_tests_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_tests_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTestsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTestsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTestsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.ListTestsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.ListTestsResponse)
    MergeFrom(*source);
  }
}

void ListTestsResponse::MergeFrom(const ListTestsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tests_.MergeFrom(from.tests_);
  if (from.invalid_tests_count() != 0) {
    _internal_set_invalid_tests_count(from._internal_invalid_tests_count());
  }
}

void ListTestsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTestsResponse::CopyFrom(const ListTestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.ListTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTestsResponse::IsInitialized() const {
  return true;
}

void ListTestsResponse::InternalSwap(ListTestsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tests_.InternalSwap(&other->tests_);
  swap(invalid_tests_count_, other->invalid_tests_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTestsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTestRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_CreateTestRequest_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202101beta1::Test*>(
      ::kentik::synthetics::v202101beta1::Test::internal_default_instance());
}
class CreateTestRequest::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Test& test(const CreateTestRequest* msg);
};

const ::kentik::synthetics::v202101beta1::Test&
CreateTestRequest::_Internal::test(const CreateTestRequest* msg) {
  return *msg->test_;
}
CreateTestRequest::CreateTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.CreateTestRequest)
}
CreateTestRequest::CreateTestRequest(const CreateTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202101beta1::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.CreateTestRequest)
}

void CreateTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

CreateTestRequest::~CreateTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.CreateTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void CreateTestRequest::ArenaDtor(void* object) {
  CreateTestRequest* _this = reinterpret_cast< CreateTestRequest* >(object);
  (void)_this;
}
void CreateTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTestRequest& CreateTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void CreateTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.CreateTestRequest)
  return target;
}

size_t CreateTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.CreateTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.CreateTestRequest)
    MergeFrom(*source);
  }
}

void CreateTestRequest::MergeFrom(const CreateTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202101beta1::Test::MergeFrom(from._internal_test());
  }
}

void CreateTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTestRequest::CopyFrom(const CreateTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.CreateTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTestRequest::IsInitialized() const {
  return true;
}

void CreateTestRequest::InternalSwap(CreateTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTestResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_CreateTestResponse_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202101beta1::Test*>(
      ::kentik::synthetics::v202101beta1::Test::internal_default_instance());
}
class CreateTestResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Test& test(const CreateTestResponse* msg);
};

const ::kentik::synthetics::v202101beta1::Test&
CreateTestResponse::_Internal::test(const CreateTestResponse* msg) {
  return *msg->test_;
}
CreateTestResponse::CreateTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.CreateTestResponse)
}
CreateTestResponse::CreateTestResponse(const CreateTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202101beta1::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.CreateTestResponse)
}

void CreateTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

CreateTestResponse::~CreateTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.CreateTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void CreateTestResponse::ArenaDtor(void* object) {
  CreateTestResponse* _this = reinterpret_cast< CreateTestResponse* >(object);
  (void)_this;
}
void CreateTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTestResponse& CreateTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void CreateTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.CreateTestResponse)
  return target;
}

size_t CreateTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.CreateTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.CreateTestResponse)
    MergeFrom(*source);
  }
}

void CreateTestResponse::MergeFrom(const CreateTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202101beta1::Test::MergeFrom(from._internal_test());
  }
}

void CreateTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTestResponse::CopyFrom(const CreateTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.CreateTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTestResponse::IsInitialized() const {
  return true;
}

void CreateTestResponse::InternalSwap(CreateTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTestRequest::InitAsDefaultInstance() {
}
class GetTestRequest::_Internal {
 public:
};

GetTestRequest::GetTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetTestRequest)
}
GetTestRequest::GetTestRequest(const GetTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetTestRequest)
}

void GetTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTestRequest::~GetTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTestRequest::ArenaDtor(void* object) {
  GetTestRequest* _this = reinterpret_cast< GetTestRequest* >(object);
  (void)_this;
}
void GetTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTestRequest& GetTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.GetTestRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.GetTestRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetTestRequest)
  return target;
}

size_t GetTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GetTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GetTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GetTestRequest)
    MergeFrom(*source);
  }
}

void GetTestRequest::MergeFrom(const GetTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GetTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTestRequest::CopyFrom(const GetTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTestRequest::IsInitialized() const {
  return true;
}

void GetTestRequest::InternalSwap(GetTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTestResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_GetTestResponse_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202101beta1::Test*>(
      ::kentik::synthetics::v202101beta1::Test::internal_default_instance());
}
class GetTestResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Test& test(const GetTestResponse* msg);
};

const ::kentik::synthetics::v202101beta1::Test&
GetTestResponse::_Internal::test(const GetTestResponse* msg) {
  return *msg->test_;
}
GetTestResponse::GetTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.GetTestResponse)
}
GetTestResponse::GetTestResponse(const GetTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202101beta1::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.GetTestResponse)
}

void GetTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

GetTestResponse::~GetTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.GetTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void GetTestResponse::ArenaDtor(void* object) {
  GetTestResponse* _this = reinterpret_cast< GetTestResponse* >(object);
  (void)_this;
}
void GetTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTestResponse& GetTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.GetTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.GetTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.GetTestResponse)
  return target;
}

size_t GetTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.GetTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.GetTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.GetTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.GetTestResponse)
    MergeFrom(*source);
  }
}

void GetTestResponse::MergeFrom(const GetTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.GetTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202101beta1::Test::MergeFrom(from._internal_test());
  }
}

void GetTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.GetTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTestResponse::CopyFrom(const GetTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.GetTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTestResponse::IsInitialized() const {
  return true;
}

void GetTestResponse::InternalSwap(GetTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTestStatusRequest::InitAsDefaultInstance() {
}
class SetTestStatusRequest::_Internal {
 public:
};

SetTestStatusRequest::SetTestStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.SetTestStatusRequest)
}
SetTestStatusRequest::SetTestStatusRequest(const SetTestStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.SetTestStatusRequest)
}

void SetTestStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

SetTestStatusRequest::~SetTestStatusRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetTestStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetTestStatusRequest::ArenaDtor(void* object) {
  SetTestStatusRequest* _this = reinterpret_cast< SetTestStatusRequest* >(object);
  (void)_this;
}
void SetTestStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTestStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTestStatusRequest& SetTestStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void SetTestStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTestStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.SetTestStatusRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202101beta1.TestStatus status = 2[json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kentik::synthetics::v202101beta1::TestStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTestStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.SetTestStatusRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .kentik.synthetics.v202101beta1.TestStatus status = 2[json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  return target;
}

size_t SetTestStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .kentik.synthetics.v202101beta1.TestStatus status = 2[json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTestStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTestStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTestStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.SetTestStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.SetTestStatusRequest)
    MergeFrom(*source);
  }
}

void SetTestStatusRequest::MergeFrom(const SetTestStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SetTestStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTestStatusRequest::CopyFrom(const SetTestStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.SetTestStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTestStatusRequest::IsInitialized() const {
  return true;
}

void SetTestStatusRequest::InternalSwap(SetTestStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTestStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTestStatusResponse::InitAsDefaultInstance() {
}
class SetTestStatusResponse::_Internal {
 public:
};

SetTestStatusResponse::SetTestStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.SetTestStatusResponse)
}
SetTestStatusResponse::SetTestStatusResponse(const SetTestStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.SetTestStatusResponse)
}

void SetTestStatusResponse::SharedCtor() {
}

SetTestStatusResponse::~SetTestStatusResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetTestStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetTestStatusResponse::ArenaDtor(void* object) {
  SetTestStatusResponse* _this = reinterpret_cast< SetTestStatusResponse* >(object);
  (void)_this;
}
void SetTestStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTestStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTestStatusResponse& SetTestStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void SetTestStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTestStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTestStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  return target;
}

size_t SetTestStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTestStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTestStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTestStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.SetTestStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.SetTestStatusResponse)
    MergeFrom(*source);
  }
}

void SetTestStatusResponse::MergeFrom(const SetTestStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetTestStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTestStatusResponse::CopyFrom(const SetTestStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.SetTestStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTestStatusResponse::IsInitialized() const {
  return true;
}

void SetTestStatusResponse::InternalSwap(SetTestStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTestStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchTestRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_PatchTestRequest_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202101beta1::Test*>(
      ::kentik::synthetics::v202101beta1::Test::internal_default_instance());
  ::kentik::synthetics::v202101beta1::_PatchTestRequest_default_instance_._instance.get_mutable()->mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class PatchTestRequest::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Test& test(const PatchTestRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& mask(const PatchTestRequest* msg);
};

const ::kentik::synthetics::v202101beta1::Test&
PatchTestRequest::_Internal::test(const PatchTestRequest* msg) {
  return *msg->test_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
PatchTestRequest::_Internal::mask(const PatchTestRequest* msg) {
  return *msg->mask_;
}
void PatchTestRequest::clear_mask() {
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
}
PatchTestRequest::PatchTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PatchTestRequest)
}
PatchTestRequest::PatchTestRequest(const PatchTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202101beta1::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  if (from._internal_has_mask()) {
    mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.mask_);
  } else {
    mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PatchTestRequest)
}

void PatchTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  ::memset(&test_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mask_) -
      reinterpret_cast<char*>(&test_)) + sizeof(mask_));
}

PatchTestRequest::~PatchTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PatchTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatchTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
  if (this != internal_default_instance()) delete mask_;
}

void PatchTestRequest::ArenaDtor(void* object) {
  PatchTestRequest* _this = reinterpret_cast< PatchTestRequest* >(object);
  (void)_this;
}
void PatchTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchTestRequest& PatchTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PatchTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  if (GetArena() == nullptr && mask_ != nullptr) {
    delete mask_;
  }
  mask_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
  if (this->has_mask()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PatchTestRequest)
  return target;
}

size_t PatchTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  // .google.protobuf.FieldMask mask = 2[json_name = "mask"];
  if (this->has_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.PatchTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.PatchTestRequest)
    MergeFrom(*source);
  }
}

void PatchTestRequest::MergeFrom(const PatchTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202101beta1::Test::MergeFrom(from._internal_test());
  }
  if (from.has_mask()) {
    _internal_mutable_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_mask());
  }
}

void PatchTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchTestRequest::CopyFrom(const PatchTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PatchTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchTestRequest::IsInitialized() const {
  return true;
}

void PatchTestRequest::InternalSwap(PatchTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PatchTestRequest, mask_)
      + sizeof(PatchTestRequest::mask_)
      - PROTOBUF_FIELD_OFFSET(PatchTestRequest, test_)>(
          reinterpret_cast<char*>(&test_),
          reinterpret_cast<char*>(&other->test_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PatchTestResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202101beta1::_PatchTestResponse_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202101beta1::Test*>(
      ::kentik::synthetics::v202101beta1::Test::internal_default_instance());
}
class PatchTestResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202101beta1::Test& test(const PatchTestResponse* msg);
};

const ::kentik::synthetics::v202101beta1::Test&
PatchTestResponse::_Internal::test(const PatchTestResponse* msg) {
  return *msg->test_;
}
PatchTestResponse::PatchTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.PatchTestResponse)
}
PatchTestResponse::PatchTestResponse(const PatchTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202101beta1::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.PatchTestResponse)
}

void PatchTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PatchTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

PatchTestResponse::~PatchTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.PatchTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PatchTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void PatchTestResponse::ArenaDtor(void* object) {
  PatchTestResponse* _this = reinterpret_cast< PatchTestResponse* >(object);
  (void)_this;
}
void PatchTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PatchTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PatchTestResponse& PatchTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PatchTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PatchTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PatchTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PatchTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.PatchTestResponse)
  return target;
}

size_t PatchTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202101beta1.Test test = 1[json_name = "test"];
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PatchTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PatchTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PatchTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.PatchTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.PatchTestResponse)
    MergeFrom(*source);
  }
}

void PatchTestResponse::MergeFrom(const PatchTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202101beta1::Test::MergeFrom(from._internal_test());
  }
}

void PatchTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PatchTestResponse::CopyFrom(const PatchTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.PatchTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PatchTestResponse::IsInitialized() const {
  return true;
}

void PatchTestResponse::InternalSwap(PatchTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PatchTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTestRequest::InitAsDefaultInstance() {
}
class DeleteTestRequest::_Internal {
 public:
};

DeleteTestRequest::DeleteTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DeleteTestRequest)
}
DeleteTestRequest::DeleteTestRequest(const DeleteTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DeleteTestRequest)
}

void DeleteTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTestRequest::~DeleteTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DeleteTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTestRequest::ArenaDtor(void* object) {
  DeleteTestRequest* _this = reinterpret_cast< DeleteTestRequest* >(object);
  (void)_this;
}
void DeleteTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTestRequest& DeleteTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202101beta1.DeleteTestRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202101beta1.DeleteTestRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DeleteTestRequest)
  return target;
}

size_t DeleteTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.DeleteTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.DeleteTestRequest)
    MergeFrom(*source);
  }
}

void DeleteTestRequest::MergeFrom(const DeleteTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTestRequest::CopyFrom(const DeleteTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DeleteTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTestRequest::IsInitialized() const {
  return true;
}

void DeleteTestRequest::InternalSwap(DeleteTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTestResponse::InitAsDefaultInstance() {
}
class DeleteTestResponse::_Internal {
 public:
};

DeleteTestResponse::DeleteTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202101beta1.DeleteTestResponse)
}
DeleteTestResponse::DeleteTestResponse(const DeleteTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202101beta1.DeleteTestResponse)
}

void DeleteTestResponse::SharedCtor() {
}

DeleteTestResponse::~DeleteTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202101beta1.DeleteTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteTestResponse::ArenaDtor(void* object) {
  DeleteTestResponse* _this = reinterpret_cast< DeleteTestResponse* >(object);
  (void)_this;
}
void DeleteTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTestResponse& DeleteTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202101beta1_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202101beta1.DeleteTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202101beta1.DeleteTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202101beta1.DeleteTestResponse)
  return target;
}

size_t DeleteTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202101beta1.DeleteTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202101beta1.DeleteTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202101beta1.DeleteTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202101beta1.DeleteTestResponse)
    MergeFrom(*source);
  }
}

void DeleteTestResponse::MergeFrom(const DeleteTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202101beta1.DeleteTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202101beta1.DeleteTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTestResponse::CopyFrom(const DeleteTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202101beta1.DeleteTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTestResponse::IsInitialized() const {
  return true;
}

void DeleteTestResponse::InternalSwap(DeleteTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202101beta1
}  // namespace synthetics
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Health* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Health >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Health >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::AgentTaskConfig* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::AgentTaskConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::AgentTaskConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TestHealth* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TestHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TestHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TaskHealth* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TaskHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TaskHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::AgentHealth* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::AgentHealth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::AgentHealth >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::HealthMoment_OtherHealthsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::HealthMoment* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HealthMoment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::HealthMoment >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Agent* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Agent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Agent >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::PingTaskDefinition* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::PingTaskDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::PingTaskDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TraceTaskDefinition* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TraceTaskDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TraceTaskDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::HTTPTaskDefinition* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HTTPTaskDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::HTTPTaskDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Task* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Task >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Task >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::KnockTaskDefinition* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::KnockTaskDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::KnockTaskDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::DNSTaskDefinition* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DNSTaskDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::DNSTaskDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::ShakeTaskDefinition* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ShakeTaskDefinition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::ShakeTaskDefinition >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::UserInfo* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::UserInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::UserInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Test* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Test >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::HTTPConfig_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::HTTPConfig_CssSelectorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::HTTPConfig* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HTTPConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::HTTPConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TestSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TestSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TestSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TestTraceSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TestTraceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TestTraceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TestPingSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TestPingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TestPingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TestMonitoringSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TestMonitoringSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TestMonitoringSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::HealthSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HealthSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::HealthSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::HostnameTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::HostnameTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::HostnameTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::IpTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::IpTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::IpTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::AgentTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::AgentTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::AgentTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::FlowTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::FlowTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::FlowTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::SiteTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::SiteTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::SiteTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TagTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TagTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TagTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::DnsTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DnsTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::DnsTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::UrlTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::UrlTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::UrlTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GridTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GridTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GridTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::DnsGridTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DnsGridTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::DnsGridTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::ApplicationMeshTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ApplicationMeshTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::ApplicationMeshTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::MeshResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::MeshResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::MeshResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::MeshColumn* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::MeshColumn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::MeshColumn >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::MeshMetric* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::MeshMetric >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::MeshMetric >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::MeshMetrics* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::MeshMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::MeshMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::ASN* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ASN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::ASN >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Country* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Country >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Country >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Region* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Region >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Region >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::City* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::City >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::City >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Geo* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Geo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Geo >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::DNS* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DNS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::DNS >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::IPInfo* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::IPInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::IPInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::IDByIP* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::IDByIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::IDByIP >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TracerouteLookup* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TracerouteLookup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TracerouteLookup >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TraceHop* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TraceHop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TraceHop >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TraceProbe* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TraceProbe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TraceProbe >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Trace* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Trace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Trace >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::Stats* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TracerouteResult* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TracerouteResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TracerouteResult >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::TracerouteInfo* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::TracerouteInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::TracerouteInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GetHealthForTestsRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GetHealthForTestsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GetHealthForTestsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GetHealthForTestsResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GetHealthForTestsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GetHealthForTestsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GetTraceForTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GetTraceForTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GetTraceForTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GetTraceForTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GetTraceForTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GetTraceForTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::ListAgentsRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ListAgentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::ListAgentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::ListAgentsResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ListAgentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::ListAgentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GetAgentRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GetAgentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GetAgentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GetAgentResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GetAgentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GetAgentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::PatchAgentRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::PatchAgentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::PatchAgentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::PatchAgentResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::PatchAgentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::PatchAgentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::DeleteAgentRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DeleteAgentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::DeleteAgentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::DeleteAgentResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DeleteAgentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::DeleteAgentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::ListTestsRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ListTestsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::ListTestsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::ListTestsResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::ListTestsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::ListTestsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::CreateTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::CreateTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::CreateTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::CreateTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::CreateTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::CreateTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GetTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GetTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GetTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::GetTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::GetTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::GetTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::SetTestStatusRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::SetTestStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::SetTestStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::SetTestStatusResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::SetTestStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::SetTestStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::PatchTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::PatchTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::PatchTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::PatchTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::PatchTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::PatchTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::DeleteTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DeleteTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::DeleteTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202101beta1::DeleteTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202101beta1::DeleteTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202101beta1::DeleteTestResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
