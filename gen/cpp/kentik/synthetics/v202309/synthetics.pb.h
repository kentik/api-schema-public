// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/synthetics/v202309/synthetics.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
#include "kentik/core/v202303/user_info.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[61]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
namespace kentik {
namespace synthetics {
namespace v202309 {
class ActivationSettings;
class ActivationSettingsDefaultTypeInternal;
extern ActivationSettingsDefaultTypeInternal _ActivationSettings_default_instance_;
class Agent;
class AgentDefaultTypeInternal;
extern AgentDefaultTypeInternal _Agent_default_instance_;
class AgentMetadata;
class AgentMetadataDefaultTypeInternal;
extern AgentMetadataDefaultTypeInternal _AgentMetadata_default_instance_;
class AgentMetadata_IpValue;
class AgentMetadata_IpValueDefaultTypeInternal;
extern AgentMetadata_IpValueDefaultTypeInternal _AgentMetadata_IpValue_default_instance_;
class AgentResults;
class AgentResultsDefaultTypeInternal;
extern AgentResultsDefaultTypeInternal _AgentResults_default_instance_;
class AgentTest;
class AgentTestDefaultTypeInternal;
extern AgentTestDefaultTypeInternal _AgentTest_default_instance_;
class CreateTestRequest;
class CreateTestRequestDefaultTypeInternal;
extern CreateTestRequestDefaultTypeInternal _CreateTestRequest_default_instance_;
class CreateTestResponse;
class CreateTestResponseDefaultTypeInternal;
extern CreateTestResponseDefaultTypeInternal _CreateTestResponse_default_instance_;
class DNSResponseData;
class DNSResponseDataDefaultTypeInternal;
extern DNSResponseDataDefaultTypeInternal _DNSResponseData_default_instance_;
class DNSResults;
class DNSResultsDefaultTypeInternal;
extern DNSResultsDefaultTypeInternal _DNSResults_default_instance_;
class DeleteAgentRequest;
class DeleteAgentRequestDefaultTypeInternal;
extern DeleteAgentRequestDefaultTypeInternal _DeleteAgentRequest_default_instance_;
class DeleteAgentResponse;
class DeleteAgentResponseDefaultTypeInternal;
extern DeleteAgentResponseDefaultTypeInternal _DeleteAgentResponse_default_instance_;
class DeleteTestRequest;
class DeleteTestRequestDefaultTypeInternal;
extern DeleteTestRequestDefaultTypeInternal _DeleteTestRequest_default_instance_;
class DeleteTestResponse;
class DeleteTestResponseDefaultTypeInternal;
extern DeleteTestResponseDefaultTypeInternal _DeleteTestResponse_default_instance_;
class DnsTest;
class DnsTestDefaultTypeInternal;
extern DnsTestDefaultTypeInternal _DnsTest_default_instance_;
class FlowTest;
class FlowTestDefaultTypeInternal;
extern FlowTestDefaultTypeInternal _FlowTest_default_instance_;
class GetAgentRequest;
class GetAgentRequestDefaultTypeInternal;
extern GetAgentRequestDefaultTypeInternal _GetAgentRequest_default_instance_;
class GetAgentResponse;
class GetAgentResponseDefaultTypeInternal;
extern GetAgentResponseDefaultTypeInternal _GetAgentResponse_default_instance_;
class GetResultsForTestsRequest;
class GetResultsForTestsRequestDefaultTypeInternal;
extern GetResultsForTestsRequestDefaultTypeInternal _GetResultsForTestsRequest_default_instance_;
class GetResultsForTestsResponse;
class GetResultsForTestsResponseDefaultTypeInternal;
extern GetResultsForTestsResponseDefaultTypeInternal _GetResultsForTestsResponse_default_instance_;
class GetTestRequest;
class GetTestRequestDefaultTypeInternal;
extern GetTestRequestDefaultTypeInternal _GetTestRequest_default_instance_;
class GetTestResponse;
class GetTestResponseDefaultTypeInternal;
extern GetTestResponseDefaultTypeInternal _GetTestResponse_default_instance_;
class GetTraceForTestRequest;
class GetTraceForTestRequestDefaultTypeInternal;
extern GetTraceForTestRequestDefaultTypeInternal _GetTraceForTestRequest_default_instance_;
class GetTraceForTestResponse;
class GetTraceForTestResponseDefaultTypeInternal;
extern GetTraceForTestResponseDefaultTypeInternal _GetTraceForTestResponse_default_instance_;
class GetTraceForTestResponse_NodesEntry_DoNotUse;
class GetTraceForTestResponse_NodesEntry_DoNotUseDefaultTypeInternal;
extern GetTraceForTestResponse_NodesEntry_DoNotUseDefaultTypeInternal _GetTraceForTestResponse_NodesEntry_DoNotUse_default_instance_;
class HTTPResponseData;
class HTTPResponseDataDefaultTypeInternal;
extern HTTPResponseDataDefaultTypeInternal _HTTPResponseData_default_instance_;
class HTTPResults;
class HTTPResultsDefaultTypeInternal;
extern HTTPResultsDefaultTypeInternal _HTTPResults_default_instance_;
class HealthSettings;
class HealthSettingsDefaultTypeInternal;
extern HealthSettingsDefaultTypeInternal _HealthSettings_default_instance_;
class HostnameTest;
class HostnameTestDefaultTypeInternal;
extern HostnameTestDefaultTypeInternal _HostnameTest_default_instance_;
class IpTest;
class IpTestDefaultTypeInternal;
extern IpTestDefaultTypeInternal _IpTest_default_instance_;
class ListAgentsRequest;
class ListAgentsRequestDefaultTypeInternal;
extern ListAgentsRequestDefaultTypeInternal _ListAgentsRequest_default_instance_;
class ListAgentsResponse;
class ListAgentsResponseDefaultTypeInternal;
extern ListAgentsResponseDefaultTypeInternal _ListAgentsResponse_default_instance_;
class ListTestsRequest;
class ListTestsRequestDefaultTypeInternal;
extern ListTestsRequestDefaultTypeInternal _ListTestsRequest_default_instance_;
class ListTestsResponse;
class ListTestsResponseDefaultTypeInternal;
extern ListTestsResponseDefaultTypeInternal _ListTestsResponse_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class MetricData;
class MetricDataDefaultTypeInternal;
extern MetricDataDefaultTypeInternal _MetricData_default_instance_;
class NetNode;
class NetNodeDefaultTypeInternal;
extern NetNodeDefaultTypeInternal _NetNode_default_instance_;
class NetworkMeshTest;
class NetworkMeshTestDefaultTypeInternal;
extern NetworkMeshTestDefaultTypeInternal _NetworkMeshTest_default_instance_;
class PacketLossData;
class PacketLossDataDefaultTypeInternal;
extern PacketLossDataDefaultTypeInternal _PacketLossData_default_instance_;
class PageLoadTest;
class PageLoadTestDefaultTypeInternal;
extern PageLoadTestDefaultTypeInternal _PageLoadTest_default_instance_;
class PageLoadTest_CssSelectorsEntry_DoNotUse;
class PageLoadTest_CssSelectorsEntry_DoNotUseDefaultTypeInternal;
extern PageLoadTest_CssSelectorsEntry_DoNotUseDefaultTypeInternal _PageLoadTest_CssSelectorsEntry_DoNotUse_default_instance_;
class PageLoadTest_HeadersEntry_DoNotUse;
class PageLoadTest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern PageLoadTest_HeadersEntry_DoNotUseDefaultTypeInternal _PageLoadTest_HeadersEntry_DoNotUse_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PathTrace;
class PathTraceDefaultTypeInternal;
extern PathTraceDefaultTypeInternal _PathTrace_default_instance_;
class PingResults;
class PingResultsDefaultTypeInternal;
extern PingResultsDefaultTypeInternal _PingResults_default_instance_;
class SetTestStatusRequest;
class SetTestStatusRequestDefaultTypeInternal;
extern SetTestStatusRequestDefaultTypeInternal _SetTestStatusRequest_default_instance_;
class SetTestStatusResponse;
class SetTestStatusResponseDefaultTypeInternal;
extern SetTestStatusResponseDefaultTypeInternal _SetTestStatusResponse_default_instance_;
class Stats;
class StatsDefaultTypeInternal;
extern StatsDefaultTypeInternal _Stats_default_instance_;
class TaskResults;
class TaskResultsDefaultTypeInternal;
extern TaskResultsDefaultTypeInternal _TaskResults_default_instance_;
class Test;
class TestDefaultTypeInternal;
extern TestDefaultTypeInternal _Test_default_instance_;
class TestPingSettings;
class TestPingSettingsDefaultTypeInternal;
extern TestPingSettingsDefaultTypeInternal _TestPingSettings_default_instance_;
class TestResults;
class TestResultsDefaultTypeInternal;
extern TestResultsDefaultTypeInternal _TestResults_default_instance_;
class TestSettings;
class TestSettingsDefaultTypeInternal;
extern TestSettingsDefaultTypeInternal _TestSettings_default_instance_;
class TestTraceSettings;
class TestTraceSettingsDefaultTypeInternal;
extern TestTraceSettingsDefaultTypeInternal _TestTraceSettings_default_instance_;
class TraceHop;
class TraceHopDefaultTypeInternal;
extern TraceHopDefaultTypeInternal _TraceHop_default_instance_;
class UpdateAgentRequest;
class UpdateAgentRequestDefaultTypeInternal;
extern UpdateAgentRequestDefaultTypeInternal _UpdateAgentRequest_default_instance_;
class UpdateAgentResponse;
class UpdateAgentResponseDefaultTypeInternal;
extern UpdateAgentResponseDefaultTypeInternal _UpdateAgentResponse_default_instance_;
class UpdateTestRequest;
class UpdateTestRequestDefaultTypeInternal;
extern UpdateTestRequestDefaultTypeInternal _UpdateTestRequest_default_instance_;
class UpdateTestResponse;
class UpdateTestResponseDefaultTypeInternal;
extern UpdateTestResponseDefaultTypeInternal _UpdateTestResponse_default_instance_;
class UrlTest;
class UrlTestDefaultTypeInternal;
extern UrlTestDefaultTypeInternal _UrlTest_default_instance_;
class UrlTest_HeadersEntry_DoNotUse;
class UrlTest_HeadersEntry_DoNotUseDefaultTypeInternal;
extern UrlTest_HeadersEntry_DoNotUseDefaultTypeInternal _UrlTest_HeadersEntry_DoNotUse_default_instance_;
}  // namespace v202309
}  // namespace synthetics
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::synthetics::v202309::ActivationSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::ActivationSettings>(Arena*);
template<> ::kentik::synthetics::v202309::Agent* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::Agent>(Arena*);
template<> ::kentik::synthetics::v202309::AgentMetadata* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::AgentMetadata>(Arena*);
template<> ::kentik::synthetics::v202309::AgentMetadata_IpValue* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::AgentMetadata_IpValue>(Arena*);
template<> ::kentik::synthetics::v202309::AgentResults* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::AgentResults>(Arena*);
template<> ::kentik::synthetics::v202309::AgentTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::AgentTest>(Arena*);
template<> ::kentik::synthetics::v202309::CreateTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::CreateTestRequest>(Arena*);
template<> ::kentik::synthetics::v202309::CreateTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::CreateTestResponse>(Arena*);
template<> ::kentik::synthetics::v202309::DNSResponseData* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::DNSResponseData>(Arena*);
template<> ::kentik::synthetics::v202309::DNSResults* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::DNSResults>(Arena*);
template<> ::kentik::synthetics::v202309::DeleteAgentRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::DeleteAgentRequest>(Arena*);
template<> ::kentik::synthetics::v202309::DeleteAgentResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::DeleteAgentResponse>(Arena*);
template<> ::kentik::synthetics::v202309::DeleteTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::DeleteTestRequest>(Arena*);
template<> ::kentik::synthetics::v202309::DeleteTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::DeleteTestResponse>(Arena*);
template<> ::kentik::synthetics::v202309::DnsTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::DnsTest>(Arena*);
template<> ::kentik::synthetics::v202309::FlowTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::FlowTest>(Arena*);
template<> ::kentik::synthetics::v202309::GetAgentRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetAgentRequest>(Arena*);
template<> ::kentik::synthetics::v202309::GetAgentResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetAgentResponse>(Arena*);
template<> ::kentik::synthetics::v202309::GetResultsForTestsRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetResultsForTestsRequest>(Arena*);
template<> ::kentik::synthetics::v202309::GetResultsForTestsResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetResultsForTestsResponse>(Arena*);
template<> ::kentik::synthetics::v202309::GetTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetTestRequest>(Arena*);
template<> ::kentik::synthetics::v202309::GetTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetTestResponse>(Arena*);
template<> ::kentik::synthetics::v202309::GetTraceForTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetTraceForTestRequest>(Arena*);
template<> ::kentik::synthetics::v202309::GetTraceForTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetTraceForTestResponse>(Arena*);
template<> ::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse>(Arena*);
template<> ::kentik::synthetics::v202309::HTTPResponseData* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::HTTPResponseData>(Arena*);
template<> ::kentik::synthetics::v202309::HTTPResults* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::HTTPResults>(Arena*);
template<> ::kentik::synthetics::v202309::HealthSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::HealthSettings>(Arena*);
template<> ::kentik::synthetics::v202309::HostnameTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::HostnameTest>(Arena*);
template<> ::kentik::synthetics::v202309::IpTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::IpTest>(Arena*);
template<> ::kentik::synthetics::v202309::ListAgentsRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::ListAgentsRequest>(Arena*);
template<> ::kentik::synthetics::v202309::ListAgentsResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::ListAgentsResponse>(Arena*);
template<> ::kentik::synthetics::v202309::ListTestsRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::ListTestsRequest>(Arena*);
template<> ::kentik::synthetics::v202309::ListTestsResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::ListTestsResponse>(Arena*);
template<> ::kentik::synthetics::v202309::Location* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::Location>(Arena*);
template<> ::kentik::synthetics::v202309::MetricData* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::MetricData>(Arena*);
template<> ::kentik::synthetics::v202309::NetNode* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::NetNode>(Arena*);
template<> ::kentik::synthetics::v202309::NetworkMeshTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::NetworkMeshTest>(Arena*);
template<> ::kentik::synthetics::v202309::PacketLossData* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::PacketLossData>(Arena*);
template<> ::kentik::synthetics::v202309::PageLoadTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::PageLoadTest>(Arena*);
template<> ::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse>(Arena*);
template<> ::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse>(Arena*);
template<> ::kentik::synthetics::v202309::Path* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::Path>(Arena*);
template<> ::kentik::synthetics::v202309::PathTrace* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::PathTrace>(Arena*);
template<> ::kentik::synthetics::v202309::PingResults* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::PingResults>(Arena*);
template<> ::kentik::synthetics::v202309::SetTestStatusRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::SetTestStatusRequest>(Arena*);
template<> ::kentik::synthetics::v202309::SetTestStatusResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::SetTestStatusResponse>(Arena*);
template<> ::kentik::synthetics::v202309::Stats* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::Stats>(Arena*);
template<> ::kentik::synthetics::v202309::TaskResults* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::TaskResults>(Arena*);
template<> ::kentik::synthetics::v202309::Test* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::Test>(Arena*);
template<> ::kentik::synthetics::v202309::TestPingSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::TestPingSettings>(Arena*);
template<> ::kentik::synthetics::v202309::TestResults* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::TestResults>(Arena*);
template<> ::kentik::synthetics::v202309::TestSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::TestSettings>(Arena*);
template<> ::kentik::synthetics::v202309::TestTraceSettings* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::TestTraceSettings>(Arena*);
template<> ::kentik::synthetics::v202309::TraceHop* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::TraceHop>(Arena*);
template<> ::kentik::synthetics::v202309::UpdateAgentRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::UpdateAgentRequest>(Arena*);
template<> ::kentik::synthetics::v202309::UpdateAgentResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::UpdateAgentResponse>(Arena*);
template<> ::kentik::synthetics::v202309::UpdateTestRequest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::UpdateTestRequest>(Arena*);
template<> ::kentik::synthetics::v202309::UpdateTestResponse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::UpdateTestResponse>(Arena*);
template<> ::kentik::synthetics::v202309::UrlTest* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::UrlTest>(Arena*);
template<> ::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage<::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace synthetics {
namespace v202309 {

enum ImplementType : int {
  IMPLEMENT_TYPE_UNSPECIFIED = 0,
  IMPLEMENT_TYPE_RUST = 1,
  IMPLEMENT_TYPE_NODE = 2,
  IMPLEMENT_TYPE_NETWORK = 3,
  ImplementType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ImplementType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ImplementType_IsValid(int value);
constexpr ImplementType ImplementType_MIN = IMPLEMENT_TYPE_UNSPECIFIED;
constexpr ImplementType ImplementType_MAX = IMPLEMENT_TYPE_NETWORK;
constexpr int ImplementType_ARRAYSIZE = ImplementType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImplementType_descriptor();
template<typename T>
inline const std::string& ImplementType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ImplementType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ImplementType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ImplementType_descriptor(), enum_t_value);
}
inline bool ImplementType_Parse(
    const std::string& name, ImplementType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ImplementType>(
    ImplementType_descriptor(), name, value);
}
enum IPFamily : int {
  IP_FAMILY_UNSPECIFIED = 0,
  IP_FAMILY_V4 = 1,
  IP_FAMILY_V6 = 2,
  IP_FAMILY_DUAL = 3,
  IPFamily_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  IPFamily_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool IPFamily_IsValid(int value);
constexpr IPFamily IPFamily_MIN = IP_FAMILY_UNSPECIFIED;
constexpr IPFamily IPFamily_MAX = IP_FAMILY_DUAL;
constexpr int IPFamily_ARRAYSIZE = IPFamily_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IPFamily_descriptor();
template<typename T>
inline const std::string& IPFamily_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IPFamily>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IPFamily_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    IPFamily_descriptor(), enum_t_value);
}
inline bool IPFamily_Parse(
    const std::string& name, IPFamily* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<IPFamily>(
    IPFamily_descriptor(), name, value);
}
enum TestStatus : int {
  TEST_STATUS_UNSPECIFIED = 0,
  TEST_STATUS_ACTIVE = 1,
  TEST_STATUS_PAUSED = 2,
  TEST_STATUS_DELETED = 3,
  TEST_STATUS_PREVIEW = 4,
  TestStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TestStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TestStatus_IsValid(int value);
constexpr TestStatus TestStatus_MIN = TEST_STATUS_UNSPECIFIED;
constexpr TestStatus TestStatus_MAX = TEST_STATUS_PREVIEW;
constexpr int TestStatus_ARRAYSIZE = TestStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestStatus_descriptor();
template<typename T>
inline const std::string& TestStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestStatus_descriptor(), enum_t_value);
}
inline bool TestStatus_Parse(
    const std::string& name, TestStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestStatus>(
    TestStatus_descriptor(), name, value);
}
enum AgentStatus : int {
  AGENT_STATUS_UNSPECIFIED = 0,
  AGENT_STATUS_OK = 1,
  AGENT_STATUS_WAIT = 2,
  AGENT_STATUS_DELETED = 3,
  AgentStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AgentStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AgentStatus_IsValid(int value);
constexpr AgentStatus AgentStatus_MIN = AGENT_STATUS_UNSPECIFIED;
constexpr AgentStatus AgentStatus_MAX = AGENT_STATUS_DELETED;
constexpr int AgentStatus_ARRAYSIZE = AgentStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentStatus_descriptor();
template<typename T>
inline const std::string& AgentStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AgentStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AgentStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AgentStatus_descriptor(), enum_t_value);
}
inline bool AgentStatus_Parse(
    const std::string& name, AgentStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AgentStatus>(
    AgentStatus_descriptor(), name, value);
}
enum DNSRecord : int {
  DNS_RECORD_UNSPECIFIED = 0,
  DNS_RECORD_A = 1,
  DNS_RECORD_AAAA = 2,
  DNS_RECORD_CNAME = 3,
  DNS_RECORD_DNAME = 4,
  DNS_RECORD_NS = 5,
  DNS_RECORD_MX = 6,
  DNS_RECORD_PTR = 7,
  DNS_RECORD_SOA = 8,
  DNSRecord_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DNSRecord_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DNSRecord_IsValid(int value);
constexpr DNSRecord DNSRecord_MIN = DNS_RECORD_UNSPECIFIED;
constexpr DNSRecord DNSRecord_MAX = DNS_RECORD_SOA;
constexpr int DNSRecord_ARRAYSIZE = DNSRecord_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DNSRecord_descriptor();
template<typename T>
inline const std::string& DNSRecord_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DNSRecord>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DNSRecord_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DNSRecord_descriptor(), enum_t_value);
}
inline bool DNSRecord_Parse(
    const std::string& name, DNSRecord* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DNSRecord>(
    DNSRecord_descriptor(), name, value);
}
// ===================================================================

class Agent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.Agent) */ {
 public:
  inline Agent() : Agent(nullptr) {};
  virtual ~Agent();

  Agent(const Agent& from);
  Agent(Agent&& from) noexcept
    : Agent() {
    *this = ::std::move(from);
  }

  inline Agent& operator=(const Agent& from) {
    CopyFrom(from);
    return *this;
  }
  inline Agent& operator=(Agent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Agent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Agent* internal_default_instance() {
    return reinterpret_cast<const Agent*>(
               &_Agent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Agent& a, Agent& b) {
    a.Swap(&b);
  }
  inline void Swap(Agent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Agent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Agent* New() const final {
    return CreateMaybeMessage<Agent>(nullptr);
  }

  Agent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Agent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Agent& from);
  void MergeFrom(const Agent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Agent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.Agent";
  }
  protected:
  explicit Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestIdsFieldNumber = 19,
    kLabelsFieldNumber = 25,
    kIdFieldNumber = 1,
    kSiteNameFieldNumber = 2,
    kAliasFieldNumber = 4,
    kTypeFieldNumber = 5,
    kOsFieldNumber = 6,
    kIpFieldNumber = 7,
    kSiteIdFieldNumber = 13,
    kVersionFieldNumber = 14,
    kCityFieldNumber = 16,
    kRegionFieldNumber = 17,
    kCountryFieldNumber = 18,
    kLocalIpFieldNumber = 20,
    kCloudRegionFieldNumber = 22,
    kCloudProviderFieldNumber = 23,
    kLastAuthedFieldNumber = 10,
    kMetadataFieldNumber = 26,
    kStatusFieldNumber = 3,
    kFamilyFieldNumber = 11,
    kLatFieldNumber = 8,
    kLongFieldNumber = 9,
    kAsnFieldNumber = 12,
    kAgentImplFieldNumber = 24,
  };
  // repeated string test_ids = 19[json_name = "testIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int test_ids_size() const;
  private:
  int _internal_test_ids_size() const;
  public:
  void clear_test_ids();
  const std::string& test_ids(int index) const;
  std::string* mutable_test_ids(int index);
  void set_test_ids(int index, const std::string& value);
  void set_test_ids(int index, std::string&& value);
  void set_test_ids(int index, const char* value);
  void set_test_ids(int index, const char* value, size_t size);
  std::string* add_test_ids();
  void add_test_ids(const std::string& value);
  void add_test_ids(std::string&& value);
  void add_test_ids(const char* value);
  void add_test_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& test_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_test_ids();
  private:
  const std::string& _internal_test_ids(int index) const;
  std::string* _internal_add_test_ids();
  public:

  // repeated string labels = 25[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_site_name();
  const std::string& site_name() const;
  void set_site_name(const std::string& value);
  void set_site_name(std::string&& value);
  void set_site_name(const char* value);
  void set_site_name(const char* value, size_t size);
  std::string* mutable_site_name();
  std::string* release_site_name();
  void set_allocated_site_name(std::string* site_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_name(
      std::string* site_name);
  private:
  const std::string& _internal_site_name() const;
  void _internal_set_site_name(const std::string& value);
  std::string* _internal_mutable_site_name();
  public:

  // string alias = 4[json_name = "alias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_alias();
  const std::string& alias() const;
  void set_alias(const std::string& value);
  void set_alias(std::string&& value);
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  std::string* mutable_alias();
  std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_alias();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_alias(
      std::string* alias);
  private:
  const std::string& _internal_alias() const;
  void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string os = 6[json_name = "os", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_os();
  const std::string& os() const;
  void set_os(const std::string& value);
  void set_os(std::string&& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  std::string* mutable_os();
  std::string* release_os();
  void set_allocated_os(std::string* os);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_os();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_os(
      std::string* os);
  private:
  const std::string& _internal_os() const;
  void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // string ip = 7[json_name = "ip", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  PROTOBUF_DEPRECATED void clear_ip();
  PROTOBUF_DEPRECATED const std::string& ip() const;
  PROTOBUF_DEPRECATED void set_ip(const std::string& value);
  PROTOBUF_DEPRECATED void set_ip(std::string&& value);
  PROTOBUF_DEPRECATED void set_ip(const char* value);
  PROTOBUF_DEPRECATED void set_ip(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_ip();
  PROTOBUF_DEPRECATED std::string* release_ip();
  PROTOBUF_DEPRECATED void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string site_id = 13[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_site_id();
  const std::string& site_id() const;
  void set_site_id(const std::string& value);
  void set_site_id(std::string&& value);
  void set_site_id(const char* value);
  void set_site_id(const char* value, size_t size);
  std::string* mutable_site_id();
  std::string* release_site_id();
  void set_allocated_site_id(std::string* site_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_id(
      std::string* site_id);
  private:
  const std::string& _internal_site_id() const;
  void _internal_set_site_id(const std::string& value);
  std::string* _internal_mutable_site_id();
  public:

  // string version = 14[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_version();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_version(
      std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string city = 16[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string region = 17[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_region();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_region(
      std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string country = 18[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string local_ip = 20[json_name = "localIp", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  PROTOBUF_DEPRECATED void clear_local_ip();
  PROTOBUF_DEPRECATED const std::string& local_ip() const;
  PROTOBUF_DEPRECATED void set_local_ip(const std::string& value);
  PROTOBUF_DEPRECATED void set_local_ip(std::string&& value);
  PROTOBUF_DEPRECATED void set_local_ip(const char* value);
  PROTOBUF_DEPRECATED void set_local_ip(const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* mutable_local_ip();
  PROTOBUF_DEPRECATED std::string* release_local_ip();
  PROTOBUF_DEPRECATED void set_allocated_local_ip(std::string* local_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_local_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_local_ip(
      std::string* local_ip);
  private:
  const std::string& _internal_local_ip() const;
  void _internal_set_local_ip(const std::string& value);
  std::string* _internal_mutable_local_ip();
  public:

  // string cloud_region = 22[json_name = "cloudRegion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_cloud_region();
  const std::string& cloud_region() const;
  void set_cloud_region(const std::string& value);
  void set_cloud_region(std::string&& value);
  void set_cloud_region(const char* value);
  void set_cloud_region(const char* value, size_t size);
  std::string* mutable_cloud_region();
  std::string* release_cloud_region();
  void set_allocated_cloud_region(std::string* cloud_region);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cloud_region();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cloud_region(
      std::string* cloud_region);
  private:
  const std::string& _internal_cloud_region() const;
  void _internal_set_cloud_region(const std::string& value);
  std::string* _internal_mutable_cloud_region();
  public:

  // string cloud_provider = 23[json_name = "cloudProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_cloud_provider();
  const std::string& cloud_provider() const;
  void set_cloud_provider(const std::string& value);
  void set_cloud_provider(std::string&& value);
  void set_cloud_provider(const char* value);
  void set_cloud_provider(const char* value, size_t size);
  std::string* mutable_cloud_provider();
  std::string* release_cloud_provider();
  void set_allocated_cloud_provider(std::string* cloud_provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_cloud_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_cloud_provider(
      std::string* cloud_provider);
  private:
  const std::string& _internal_cloud_provider() const;
  void _internal_set_cloud_provider(const std::string& value);
  std::string* _internal_mutable_cloud_provider();
  public:

  // .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_last_authed() const;
  private:
  bool _internal_has_last_authed() const;
  public:
  void clear_last_authed();
  const PROTOBUF_NAMESPACE_ID::Timestamp& last_authed() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_last_authed();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_authed();
  void set_allocated_last_authed(PROTOBUF_NAMESPACE_ID::Timestamp* last_authed);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_authed() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_authed();
  public:
  void unsafe_arena_set_allocated_last_authed(
      PROTOBUF_NAMESPACE_ID::Timestamp* last_authed);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_authed();

  // .kentik.synthetics.v202309.AgentMetadata metadata = 26[json_name = "metadata", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::kentik::synthetics::v202309::AgentMetadata& metadata() const;
  ::kentik::synthetics::v202309::AgentMetadata* release_metadata();
  ::kentik::synthetics::v202309::AgentMetadata* mutable_metadata();
  void set_allocated_metadata(::kentik::synthetics::v202309::AgentMetadata* metadata);
  private:
  const ::kentik::synthetics::v202309::AgentMetadata& _internal_metadata() const;
  ::kentik::synthetics::v202309::AgentMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::kentik::synthetics::v202309::AgentMetadata* metadata);
  ::kentik::synthetics::v202309::AgentMetadata* unsafe_arena_release_metadata();

  // .kentik.synthetics.v202309.AgentStatus status = 3[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  ::kentik::synthetics::v202309::AgentStatus status() const;
  void set_status(::kentik::synthetics::v202309::AgentStatus value);
  private:
  ::kentik::synthetics::v202309::AgentStatus _internal_status() const;
  void _internal_set_status(::kentik::synthetics::v202309::AgentStatus value);
  public:

  // .kentik.synthetics.v202309.IPFamily family = 11[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_family();
  ::kentik::synthetics::v202309::IPFamily family() const;
  void set_family(::kentik::synthetics::v202309::IPFamily value);
  private:
  ::kentik::synthetics::v202309::IPFamily _internal_family() const;
  void _internal_set_family(::kentik::synthetics::v202309::IPFamily value);
  public:

  // double lat = 8[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double long = 9[json_name = "long", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_long_();
  double long_() const;
  void set_long_(double value);
  private:
  double _internal_long_() const;
  void _internal_set_long_(double value);
  public:

  // uint32 asn = 12[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.synthetics.v202309.ImplementType agent_impl = 24[json_name = "agentImpl", (.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_agent_impl();
  ::kentik::synthetics::v202309::ImplementType agent_impl() const;
  void set_agent_impl(::kentik::synthetics::v202309::ImplementType value);
  private:
  ::kentik::synthetics::v202309::ImplementType _internal_agent_impl() const;
  void _internal_set_agent_impl(::kentik::synthetics::v202309::ImplementType value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.Agent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> test_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr local_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloud_region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cloud_provider_;
  PROTOBUF_NAMESPACE_ID::Timestamp* last_authed_;
  ::kentik::synthetics::v202309::AgentMetadata* metadata_;
  int status_;
  int family_;
  double lat_;
  double long__;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  int agent_impl_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class AgentMetadata_IpValue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.AgentMetadata.IpValue) */ {
 public:
  inline AgentMetadata_IpValue() : AgentMetadata_IpValue(nullptr) {};
  virtual ~AgentMetadata_IpValue();

  AgentMetadata_IpValue(const AgentMetadata_IpValue& from);
  AgentMetadata_IpValue(AgentMetadata_IpValue&& from) noexcept
    : AgentMetadata_IpValue() {
    *this = ::std::move(from);
  }

  inline AgentMetadata_IpValue& operator=(const AgentMetadata_IpValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentMetadata_IpValue& operator=(AgentMetadata_IpValue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentMetadata_IpValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentMetadata_IpValue* internal_default_instance() {
    return reinterpret_cast<const AgentMetadata_IpValue*>(
               &_AgentMetadata_IpValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AgentMetadata_IpValue& a, AgentMetadata_IpValue& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentMetadata_IpValue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentMetadata_IpValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentMetadata_IpValue* New() const final {
    return CreateMaybeMessage<AgentMetadata_IpValue>(nullptr);
  }

  AgentMetadata_IpValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentMetadata_IpValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentMetadata_IpValue& from);
  void MergeFrom(const AgentMetadata_IpValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentMetadata_IpValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.AgentMetadata.IpValue";
  }
  protected:
  explicit AgentMetadata_IpValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1[json_name = "value"];
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.AgentMetadata.IpValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class AgentMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.AgentMetadata) */ {
 public:
  inline AgentMetadata() : AgentMetadata(nullptr) {};
  virtual ~AgentMetadata();

  AgentMetadata(const AgentMetadata& from);
  AgentMetadata(AgentMetadata&& from) noexcept
    : AgentMetadata() {
    *this = ::std::move(from);
  }

  inline AgentMetadata& operator=(const AgentMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentMetadata& operator=(AgentMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentMetadata* internal_default_instance() {
    return reinterpret_cast<const AgentMetadata*>(
               &_AgentMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AgentMetadata& a, AgentMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentMetadata* New() const final {
    return CreateMaybeMessage<AgentMetadata>(nullptr);
  }

  AgentMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentMetadata& from);
  void MergeFrom(const AgentMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.AgentMetadata";
  }
  protected:
  explicit AgentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AgentMetadata_IpValue IpValue;

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateIpv4AddressesFieldNumber = 1,
    kPublicIpv4AddressesFieldNumber = 2,
    kPrivateIpv6AddressesFieldNumber = 3,
    kPublicIpv6AddressesFieldNumber = 4,
  };
  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv4_addresses = 1[json_name = "privateIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int private_ipv4_addresses_size() const;
  private:
  int _internal_private_ipv4_addresses_size() const;
  public:
  void clear_private_ipv4_addresses();
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* mutable_private_ipv4_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >*
      mutable_private_ipv4_addresses();
  private:
  const ::kentik::synthetics::v202309::AgentMetadata_IpValue& _internal_private_ipv4_addresses(int index) const;
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* _internal_add_private_ipv4_addresses();
  public:
  const ::kentik::synthetics::v202309::AgentMetadata_IpValue& private_ipv4_addresses(int index) const;
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* add_private_ipv4_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >&
      private_ipv4_addresses() const;

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv4_addresses = 2[json_name = "publicIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int public_ipv4_addresses_size() const;
  private:
  int _internal_public_ipv4_addresses_size() const;
  public:
  void clear_public_ipv4_addresses();
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* mutable_public_ipv4_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >*
      mutable_public_ipv4_addresses();
  private:
  const ::kentik::synthetics::v202309::AgentMetadata_IpValue& _internal_public_ipv4_addresses(int index) const;
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* _internal_add_public_ipv4_addresses();
  public:
  const ::kentik::synthetics::v202309::AgentMetadata_IpValue& public_ipv4_addresses(int index) const;
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* add_public_ipv4_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >&
      public_ipv4_addresses() const;

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv6_addresses = 3[json_name = "privateIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int private_ipv6_addresses_size() const;
  private:
  int _internal_private_ipv6_addresses_size() const;
  public:
  void clear_private_ipv6_addresses();
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* mutable_private_ipv6_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >*
      mutable_private_ipv6_addresses();
  private:
  const ::kentik::synthetics::v202309::AgentMetadata_IpValue& _internal_private_ipv6_addresses(int index) const;
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* _internal_add_private_ipv6_addresses();
  public:
  const ::kentik::synthetics::v202309::AgentMetadata_IpValue& private_ipv6_addresses(int index) const;
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* add_private_ipv6_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >&
      private_ipv6_addresses() const;

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv6_addresses = 4[json_name = "publicIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int public_ipv6_addresses_size() const;
  private:
  int _internal_public_ipv6_addresses_size() const;
  public:
  void clear_public_ipv6_addresses();
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* mutable_public_ipv6_addresses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >*
      mutable_public_ipv6_addresses();
  private:
  const ::kentik::synthetics::v202309::AgentMetadata_IpValue& _internal_public_ipv6_addresses(int index) const;
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* _internal_add_public_ipv6_addresses();
  public:
  const ::kentik::synthetics::v202309::AgentMetadata_IpValue& public_ipv6_addresses(int index) const;
  ::kentik::synthetics::v202309::AgentMetadata_IpValue* add_public_ipv6_addresses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >&
      public_ipv6_addresses() const;

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.AgentMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue > private_ipv4_addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue > public_ipv4_addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue > private_ipv6_addresses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue > public_ipv6_addresses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Test PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.Test) */ {
 public:
  inline Test() : Test(nullptr) {};
  virtual ~Test();

  Test(const Test& from);
  Test(Test&& from) noexcept
    : Test() {
    *this = ::std::move(from);
  }

  inline Test& operator=(const Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test& operator=(Test&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Test* internal_default_instance() {
    return reinterpret_cast<const Test*>(
               &_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Test& a, Test& b) {
    a.Swap(&b);
  }
  inline void Swap(Test* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test* New() const final {
    return CreateMaybeMessage<Test>(nullptr);
  }

  Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test& from);
  void MergeFrom(const Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.Test";
  }
  protected:
  explicit Test(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 11,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTypeFieldNumber = 3,
    kSettingsFieldNumber = 6,
    kCdateFieldNumber = 7,
    kEdateFieldNumber = 8,
    kCreatedByFieldNumber = 9,
    kLastUpdatedByFieldNumber = 10,
    kStatusFieldNumber = 5,
  };
  // repeated string labels = 11[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  const std::string& labels(int index) const;
  std::string* mutable_labels(int index);
  void set_labels(int index, const std::string& value);
  void set_labels(int index, std::string&& value);
  void set_labels(int index, const char* value);
  void set_labels(int index, const char* value, size_t size);
  std::string* add_labels();
  void add_labels(const std::string& value);
  void add_labels(std::string&& value);
  void add_labels(const char* value);
  void add_labels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_labels();
  private:
  const std::string& _internal_labels(int index) const;
  std::string* _internal_add_labels();
  public:

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .kentik.synthetics.v202309.TestSettings settings = 6[json_name = "settings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_settings() const;
  private:
  bool _internal_has_settings() const;
  public:
  void clear_settings();
  const ::kentik::synthetics::v202309::TestSettings& settings() const;
  ::kentik::synthetics::v202309::TestSettings* release_settings();
  ::kentik::synthetics::v202309::TestSettings* mutable_settings();
  void set_allocated_settings(::kentik::synthetics::v202309::TestSettings* settings);
  private:
  const ::kentik::synthetics::v202309::TestSettings& _internal_settings() const;
  ::kentik::synthetics::v202309::TestSettings* _internal_mutable_settings();
  public:
  void unsafe_arena_set_allocated_settings(
      ::kentik::synthetics::v202309::TestSettings* settings);
  ::kentik::synthetics::v202309::TestSettings* unsafe_arena_release_settings();

  // .google.protobuf.Timestamp cdate = 7[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 8[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // .kentik.core.v202303.UserInfo created_by = 9[json_name = "createdBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_created_by() const;
  private:
  bool _internal_has_created_by() const;
  public:
  void clear_created_by();
  const ::kentik::core::v202303::UserInfo& created_by() const;
  ::kentik::core::v202303::UserInfo* release_created_by();
  ::kentik::core::v202303::UserInfo* mutable_created_by();
  void set_allocated_created_by(::kentik::core::v202303::UserInfo* created_by);
  private:
  const ::kentik::core::v202303::UserInfo& _internal_created_by() const;
  ::kentik::core::v202303::UserInfo* _internal_mutable_created_by();
  public:
  void unsafe_arena_set_allocated_created_by(
      ::kentik::core::v202303::UserInfo* created_by);
  ::kentik::core::v202303::UserInfo* unsafe_arena_release_created_by();

  // .kentik.core.v202303.UserInfo last_updated_by = 10[json_name = "lastUpdatedBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_last_updated_by() const;
  private:
  bool _internal_has_last_updated_by() const;
  public:
  void clear_last_updated_by();
  const ::kentik::core::v202303::UserInfo& last_updated_by() const;
  ::kentik::core::v202303::UserInfo* release_last_updated_by();
  ::kentik::core::v202303::UserInfo* mutable_last_updated_by();
  void set_allocated_last_updated_by(::kentik::core::v202303::UserInfo* last_updated_by);
  private:
  const ::kentik::core::v202303::UserInfo& _internal_last_updated_by() const;
  ::kentik::core::v202303::UserInfo* _internal_mutable_last_updated_by();
  public:
  void unsafe_arena_set_allocated_last_updated_by(
      ::kentik::core::v202303::UserInfo* last_updated_by);
  ::kentik::core::v202303::UserInfo* unsafe_arena_release_last_updated_by();

  // .kentik.synthetics.v202309.TestStatus status = 5[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  ::kentik::synthetics::v202309::TestStatus status() const;
  void set_status(::kentik::synthetics::v202309::TestStatus value);
  private:
  ::kentik::synthetics::v202309::TestStatus _internal_status() const;
  void _internal_set_status(::kentik::synthetics::v202309::TestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.Test)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::kentik::synthetics::v202309::TestSettings* settings_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  ::kentik::core::v202303::UserInfo* created_by_;
  ::kentik::core::v202303::UserInfo* last_updated_by_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.TestSettings) */ {
 public:
  inline TestSettings() : TestSettings(nullptr) {};
  virtual ~TestSettings();

  TestSettings(const TestSettings& from);
  TestSettings(TestSettings&& from) noexcept
    : TestSettings() {
    *this = ::std::move(from);
  }

  inline TestSettings& operator=(const TestSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestSettings& operator=(TestSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestSettings& default_instance();

  enum DefinitionCase {
    kHostname = 1,
    kIp = 2,
    kAgent = 3,
    kFlow = 4,
    kDns = 5,
    kUrl = 6,
    kNetworkGrid = 7,
    kPageLoad = 8,
    kDnsGrid = 9,
    kNetworkMesh = 18,
    DEFINITION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestSettings* internal_default_instance() {
    return reinterpret_cast<const TestSettings*>(
               &_TestSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TestSettings& a, TestSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TestSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestSettings* New() const final {
    return CreateMaybeMessage<TestSettings>(nullptr);
  }

  TestSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestSettings& from);
  void MergeFrom(const TestSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.TestSettings";
  }
  protected:
  explicit TestSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdsFieldNumber = 10,
    kTasksFieldNumber = 11,
    kNotificationChannelsFieldNumber = 17,
    kNotesFieldNumber = 19,
    kHealthSettingsFieldNumber = 12,
    kPingFieldNumber = 13,
    kTraceFieldNumber = 14,
    kPeriodFieldNumber = 15,
    kFamilyFieldNumber = 16,
    kHostnameFieldNumber = 1,
    kIpFieldNumber = 2,
    kAgentFieldNumber = 3,
    kFlowFieldNumber = 4,
    kDnsFieldNumber = 5,
    kUrlFieldNumber = 6,
    kNetworkGridFieldNumber = 7,
    kPageLoadFieldNumber = 8,
    kDnsGridFieldNumber = 9,
    kNetworkMeshFieldNumber = 18,
  };
  // repeated string agent_ids = 10[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  const std::string& agent_ids(int index) const;
  std::string* mutable_agent_ids(int index);
  void set_agent_ids(int index, const std::string& value);
  void set_agent_ids(int index, std::string&& value);
  void set_agent_ids(int index, const char* value);
  void set_agent_ids(int index, const char* value, size_t size);
  std::string* add_agent_ids();
  void add_agent_ids(const std::string& value);
  void add_agent_ids(std::string&& value);
  void add_agent_ids(const char* value);
  void add_agent_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_agent_ids();
  private:
  const std::string& _internal_agent_ids(int index) const;
  std::string* _internal_add_agent_ids();
  public:

  // repeated string tasks = 11[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  const std::string& tasks(int index) const;
  std::string* mutable_tasks(int index);
  void set_tasks(int index, const std::string& value);
  void set_tasks(int index, std::string&& value);
  void set_tasks(int index, const char* value);
  void set_tasks(int index, const char* value, size_t size);
  std::string* add_tasks();
  void add_tasks(const std::string& value);
  void add_tasks(std::string&& value);
  void add_tasks(const char* value);
  void add_tasks(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tasks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tasks();
  private:
  const std::string& _internal_tasks(int index) const;
  std::string* _internal_add_tasks();
  public:

  // repeated string notification_channels = 17[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  const std::string& notification_channels(int index) const;
  std::string* mutable_notification_channels(int index);
  void set_notification_channels(int index, const std::string& value);
  void set_notification_channels(int index, std::string&& value);
  void set_notification_channels(int index, const char* value);
  void set_notification_channels(int index, const char* value, size_t size);
  std::string* add_notification_channels();
  void add_notification_channels(const std::string& value);
  void add_notification_channels(std::string&& value);
  void add_notification_channels(const char* value);
  void add_notification_channels(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notification_channels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notification_channels();
  private:
  const std::string& _internal_notification_channels(int index) const;
  std::string* _internal_add_notification_channels();
  public:

  // string notes = 19[json_name = "notes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_notes();
  const std::string& notes() const;
  void set_notes(const std::string& value);
  void set_notes(std::string&& value);
  void set_notes(const char* value);
  void set_notes(const char* value, size_t size);
  std::string* mutable_notes();
  std::string* release_notes();
  void set_allocated_notes(std::string* notes);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_notes();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_notes(
      std::string* notes);
  private:
  const std::string& _internal_notes() const;
  void _internal_set_notes(const std::string& value);
  std::string* _internal_mutable_notes();
  public:

  // .kentik.synthetics.v202309.HealthSettings health_settings = 12[json_name = "healthSettings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_health_settings() const;
  private:
  bool _internal_has_health_settings() const;
  public:
  void clear_health_settings();
  const ::kentik::synthetics::v202309::HealthSettings& health_settings() const;
  ::kentik::synthetics::v202309::HealthSettings* release_health_settings();
  ::kentik::synthetics::v202309::HealthSettings* mutable_health_settings();
  void set_allocated_health_settings(::kentik::synthetics::v202309::HealthSettings* health_settings);
  private:
  const ::kentik::synthetics::v202309::HealthSettings& _internal_health_settings() const;
  ::kentik::synthetics::v202309::HealthSettings* _internal_mutable_health_settings();
  public:
  void unsafe_arena_set_allocated_health_settings(
      ::kentik::synthetics::v202309::HealthSettings* health_settings);
  ::kentik::synthetics::v202309::HealthSettings* unsafe_arena_release_health_settings();

  // .kentik.synthetics.v202309.TestPingSettings ping = 13[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::kentik::synthetics::v202309::TestPingSettings& ping() const;
  ::kentik::synthetics::v202309::TestPingSettings* release_ping();
  ::kentik::synthetics::v202309::TestPingSettings* mutable_ping();
  void set_allocated_ping(::kentik::synthetics::v202309::TestPingSettings* ping);
  private:
  const ::kentik::synthetics::v202309::TestPingSettings& _internal_ping() const;
  ::kentik::synthetics::v202309::TestPingSettings* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::kentik::synthetics::v202309::TestPingSettings* ping);
  ::kentik::synthetics::v202309::TestPingSettings* unsafe_arena_release_ping();

  // .kentik.synthetics.v202309.TestTraceSettings trace = 14[json_name = "trace", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_trace() const;
  private:
  bool _internal_has_trace() const;
  public:
  void clear_trace();
  const ::kentik::synthetics::v202309::TestTraceSettings& trace() const;
  ::kentik::synthetics::v202309::TestTraceSettings* release_trace();
  ::kentik::synthetics::v202309::TestTraceSettings* mutable_trace();
  void set_allocated_trace(::kentik::synthetics::v202309::TestTraceSettings* trace);
  private:
  const ::kentik::synthetics::v202309::TestTraceSettings& _internal_trace() const;
  ::kentik::synthetics::v202309::TestTraceSettings* _internal_mutable_trace();
  public:
  void unsafe_arena_set_allocated_trace(
      ::kentik::synthetics::v202309::TestTraceSettings* trace);
  ::kentik::synthetics::v202309::TestTraceSettings* unsafe_arena_release_trace();

  // uint32 period = 15[json_name = "period", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_period();
  ::PROTOBUF_NAMESPACE_ID::uint32 period() const;
  void set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_period() const;
  void _internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.synthetics.v202309.IPFamily family = 16[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_family();
  ::kentik::synthetics::v202309::IPFamily family() const;
  void set_family(::kentik::synthetics::v202309::IPFamily value);
  private:
  ::kentik::synthetics::v202309::IPFamily _internal_family() const;
  void _internal_set_family(::kentik::synthetics::v202309::IPFamily value);
  public:

  // .kentik.synthetics.v202309.HostnameTest hostname = 1[json_name = "hostname"];
  bool has_hostname() const;
  private:
  bool _internal_has_hostname() const;
  public:
  void clear_hostname();
  const ::kentik::synthetics::v202309::HostnameTest& hostname() const;
  ::kentik::synthetics::v202309::HostnameTest* release_hostname();
  ::kentik::synthetics::v202309::HostnameTest* mutable_hostname();
  void set_allocated_hostname(::kentik::synthetics::v202309::HostnameTest* hostname);
  private:
  const ::kentik::synthetics::v202309::HostnameTest& _internal_hostname() const;
  ::kentik::synthetics::v202309::HostnameTest* _internal_mutable_hostname();
  public:
  void unsafe_arena_set_allocated_hostname(
      ::kentik::synthetics::v202309::HostnameTest* hostname);
  ::kentik::synthetics::v202309::HostnameTest* unsafe_arena_release_hostname();

  // .kentik.synthetics.v202309.IpTest ip = 2[json_name = "ip"];
  bool has_ip() const;
  private:
  bool _internal_has_ip() const;
  public:
  void clear_ip();
  const ::kentik::synthetics::v202309::IpTest& ip() const;
  ::kentik::synthetics::v202309::IpTest* release_ip();
  ::kentik::synthetics::v202309::IpTest* mutable_ip();
  void set_allocated_ip(::kentik::synthetics::v202309::IpTest* ip);
  private:
  const ::kentik::synthetics::v202309::IpTest& _internal_ip() const;
  ::kentik::synthetics::v202309::IpTest* _internal_mutable_ip();
  public:
  void unsafe_arena_set_allocated_ip(
      ::kentik::synthetics::v202309::IpTest* ip);
  ::kentik::synthetics::v202309::IpTest* unsafe_arena_release_ip();

  // .kentik.synthetics.v202309.AgentTest agent = 3[json_name = "agent"];
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202309::AgentTest& agent() const;
  ::kentik::synthetics::v202309::AgentTest* release_agent();
  ::kentik::synthetics::v202309::AgentTest* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202309::AgentTest* agent);
  private:
  const ::kentik::synthetics::v202309::AgentTest& _internal_agent() const;
  ::kentik::synthetics::v202309::AgentTest* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202309::AgentTest* agent);
  ::kentik::synthetics::v202309::AgentTest* unsafe_arena_release_agent();

  // .kentik.synthetics.v202309.FlowTest flow = 4[json_name = "flow"];
  bool has_flow() const;
  private:
  bool _internal_has_flow() const;
  public:
  void clear_flow();
  const ::kentik::synthetics::v202309::FlowTest& flow() const;
  ::kentik::synthetics::v202309::FlowTest* release_flow();
  ::kentik::synthetics::v202309::FlowTest* mutable_flow();
  void set_allocated_flow(::kentik::synthetics::v202309::FlowTest* flow);
  private:
  const ::kentik::synthetics::v202309::FlowTest& _internal_flow() const;
  ::kentik::synthetics::v202309::FlowTest* _internal_mutable_flow();
  public:
  void unsafe_arena_set_allocated_flow(
      ::kentik::synthetics::v202309::FlowTest* flow);
  ::kentik::synthetics::v202309::FlowTest* unsafe_arena_release_flow();

  // .kentik.synthetics.v202309.DnsTest dns = 5[json_name = "dns"];
  bool has_dns() const;
  private:
  bool _internal_has_dns() const;
  public:
  void clear_dns();
  const ::kentik::synthetics::v202309::DnsTest& dns() const;
  ::kentik::synthetics::v202309::DnsTest* release_dns();
  ::kentik::synthetics::v202309::DnsTest* mutable_dns();
  void set_allocated_dns(::kentik::synthetics::v202309::DnsTest* dns);
  private:
  const ::kentik::synthetics::v202309::DnsTest& _internal_dns() const;
  ::kentik::synthetics::v202309::DnsTest* _internal_mutable_dns();
  public:
  void unsafe_arena_set_allocated_dns(
      ::kentik::synthetics::v202309::DnsTest* dns);
  ::kentik::synthetics::v202309::DnsTest* unsafe_arena_release_dns();

  // .kentik.synthetics.v202309.UrlTest url = 6[json_name = "url"];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const ::kentik::synthetics::v202309::UrlTest& url() const;
  ::kentik::synthetics::v202309::UrlTest* release_url();
  ::kentik::synthetics::v202309::UrlTest* mutable_url();
  void set_allocated_url(::kentik::synthetics::v202309::UrlTest* url);
  private:
  const ::kentik::synthetics::v202309::UrlTest& _internal_url() const;
  ::kentik::synthetics::v202309::UrlTest* _internal_mutable_url();
  public:
  void unsafe_arena_set_allocated_url(
      ::kentik::synthetics::v202309::UrlTest* url);
  ::kentik::synthetics::v202309::UrlTest* unsafe_arena_release_url();

  // .kentik.synthetics.v202309.IpTest network_grid = 7[json_name = "networkGrid"];
  bool has_network_grid() const;
  private:
  bool _internal_has_network_grid() const;
  public:
  void clear_network_grid();
  const ::kentik::synthetics::v202309::IpTest& network_grid() const;
  ::kentik::synthetics::v202309::IpTest* release_network_grid();
  ::kentik::synthetics::v202309::IpTest* mutable_network_grid();
  void set_allocated_network_grid(::kentik::synthetics::v202309::IpTest* network_grid);
  private:
  const ::kentik::synthetics::v202309::IpTest& _internal_network_grid() const;
  ::kentik::synthetics::v202309::IpTest* _internal_mutable_network_grid();
  public:
  void unsafe_arena_set_allocated_network_grid(
      ::kentik::synthetics::v202309::IpTest* network_grid);
  ::kentik::synthetics::v202309::IpTest* unsafe_arena_release_network_grid();

  // .kentik.synthetics.v202309.PageLoadTest page_load = 8[json_name = "pageLoad"];
  bool has_page_load() const;
  private:
  bool _internal_has_page_load() const;
  public:
  void clear_page_load();
  const ::kentik::synthetics::v202309::PageLoadTest& page_load() const;
  ::kentik::synthetics::v202309::PageLoadTest* release_page_load();
  ::kentik::synthetics::v202309::PageLoadTest* mutable_page_load();
  void set_allocated_page_load(::kentik::synthetics::v202309::PageLoadTest* page_load);
  private:
  const ::kentik::synthetics::v202309::PageLoadTest& _internal_page_load() const;
  ::kentik::synthetics::v202309::PageLoadTest* _internal_mutable_page_load();
  public:
  void unsafe_arena_set_allocated_page_load(
      ::kentik::synthetics::v202309::PageLoadTest* page_load);
  ::kentik::synthetics::v202309::PageLoadTest* unsafe_arena_release_page_load();

  // .kentik.synthetics.v202309.DnsTest dns_grid = 9[json_name = "dnsGrid"];
  bool has_dns_grid() const;
  private:
  bool _internal_has_dns_grid() const;
  public:
  void clear_dns_grid();
  const ::kentik::synthetics::v202309::DnsTest& dns_grid() const;
  ::kentik::synthetics::v202309::DnsTest* release_dns_grid();
  ::kentik::synthetics::v202309::DnsTest* mutable_dns_grid();
  void set_allocated_dns_grid(::kentik::synthetics::v202309::DnsTest* dns_grid);
  private:
  const ::kentik::synthetics::v202309::DnsTest& _internal_dns_grid() const;
  ::kentik::synthetics::v202309::DnsTest* _internal_mutable_dns_grid();
  public:
  void unsafe_arena_set_allocated_dns_grid(
      ::kentik::synthetics::v202309::DnsTest* dns_grid);
  ::kentik::synthetics::v202309::DnsTest* unsafe_arena_release_dns_grid();

  // .kentik.synthetics.v202309.NetworkMeshTest network_mesh = 18[json_name = "networkMesh"];
  bool has_network_mesh() const;
  private:
  bool _internal_has_network_mesh() const;
  public:
  void clear_network_mesh();
  const ::kentik::synthetics::v202309::NetworkMeshTest& network_mesh() const;
  ::kentik::synthetics::v202309::NetworkMeshTest* release_network_mesh();
  ::kentik::synthetics::v202309::NetworkMeshTest* mutable_network_mesh();
  void set_allocated_network_mesh(::kentik::synthetics::v202309::NetworkMeshTest* network_mesh);
  private:
  const ::kentik::synthetics::v202309::NetworkMeshTest& _internal_network_mesh() const;
  ::kentik::synthetics::v202309::NetworkMeshTest* _internal_mutable_network_mesh();
  public:
  void unsafe_arena_set_allocated_network_mesh(
      ::kentik::synthetics::v202309::NetworkMeshTest* network_mesh);
  ::kentik::synthetics::v202309::NetworkMeshTest* unsafe_arena_release_network_mesh();

  void clear_definition();
  DefinitionCase definition_case() const;
  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.TestSettings)
 private:
  class _Internal;
  void set_has_hostname();
  void set_has_ip();
  void set_has_agent();
  void set_has_flow();
  void set_has_dns();
  void set_has_url();
  void set_has_network_grid();
  void set_has_page_load();
  void set_has_dns_grid();
  void set_has_network_mesh();

  inline bool has_definition() const;
  inline void clear_has_definition();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> agent_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notification_channels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notes_;
  ::kentik::synthetics::v202309::HealthSettings* health_settings_;
  ::kentik::synthetics::v202309::TestPingSettings* ping_;
  ::kentik::synthetics::v202309::TestTraceSettings* trace_;
  ::PROTOBUF_NAMESPACE_ID::uint32 period_;
  int family_;
  union DefinitionUnion {
    DefinitionUnion() {}
    ::kentik::synthetics::v202309::HostnameTest* hostname_;
    ::kentik::synthetics::v202309::IpTest* ip_;
    ::kentik::synthetics::v202309::AgentTest* agent_;
    ::kentik::synthetics::v202309::FlowTest* flow_;
    ::kentik::synthetics::v202309::DnsTest* dns_;
    ::kentik::synthetics::v202309::UrlTest* url_;
    ::kentik::synthetics::v202309::IpTest* network_grid_;
    ::kentik::synthetics::v202309::PageLoadTest* page_load_;
    ::kentik::synthetics::v202309::DnsTest* dns_grid_;
    ::kentik::synthetics::v202309::NetworkMeshTest* network_mesh_;
  } definition_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestPingSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.TestPingSettings) */ {
 public:
  inline TestPingSettings() : TestPingSettings(nullptr) {};
  virtual ~TestPingSettings();

  TestPingSettings(const TestPingSettings& from);
  TestPingSettings(TestPingSettings&& from) noexcept
    : TestPingSettings() {
    *this = ::std::move(from);
  }

  inline TestPingSettings& operator=(const TestPingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestPingSettings& operator=(TestPingSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestPingSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestPingSettings* internal_default_instance() {
    return reinterpret_cast<const TestPingSettings*>(
               &_TestPingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TestPingSettings& a, TestPingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TestPingSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestPingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestPingSettings* New() const final {
    return CreateMaybeMessage<TestPingSettings>(nullptr);
  }

  TestPingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestPingSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestPingSettings& from);
  void MergeFrom(const TestPingSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestPingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.TestPingSettings";
  }
  protected:
  explicit TestPingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 2,
    kCountFieldNumber = 1,
    kPortFieldNumber = 3,
    kTimeoutFieldNumber = 4,
    kDelayFieldNumber = 5,
    kDscpFieldNumber = 6,
  };
  // string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocol(
      std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float delay = 5[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_delay();
  float delay() const;
  void set_delay(float value);
  private:
  float _internal_delay() const;
  void _internal_set_delay(float value);
  public:

  // uint32 dscp = 6[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dscp();
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp() const;
  void set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dscp() const;
  void _internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.TestPingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  float delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestTraceSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.TestTraceSettings) */ {
 public:
  inline TestTraceSettings() : TestTraceSettings(nullptr) {};
  virtual ~TestTraceSettings();

  TestTraceSettings(const TestTraceSettings& from);
  TestTraceSettings(TestTraceSettings&& from) noexcept
    : TestTraceSettings() {
    *this = ::std::move(from);
  }

  inline TestTraceSettings& operator=(const TestTraceSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestTraceSettings& operator=(TestTraceSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestTraceSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestTraceSettings* internal_default_instance() {
    return reinterpret_cast<const TestTraceSettings*>(
               &_TestTraceSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TestTraceSettings& a, TestTraceSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(TestTraceSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestTraceSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestTraceSettings* New() const final {
    return CreateMaybeMessage<TestTraceSettings>(nullptr);
  }

  TestTraceSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestTraceSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestTraceSettings& from);
  void MergeFrom(const TestTraceSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestTraceSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.TestTraceSettings";
  }
  protected:
  explicit TestTraceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 2,
    kCountFieldNumber = 1,
    kPortFieldNumber = 3,
    kTimeoutFieldNumber = 4,
    kLimitFieldNumber = 5,
    kDelayFieldNumber = 6,
    kDscpFieldNumber = 7,
  };
  // string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_protocol();
  const std::string& protocol() const;
  void set_protocol(const std::string& value);
  void set_protocol(std::string&& value);
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  std::string* mutable_protocol();
  std::string* release_protocol();
  void set_allocated_protocol(std::string* protocol);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_protocol();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_protocol(
      std::string* protocol);
  private:
  const std::string& _internal_protocol() const;
  void _internal_set_protocol(const std::string& value);
  std::string* _internal_mutable_protocol();
  public:

  // uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 limit = 5[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float delay = 6[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_delay();
  float delay() const;
  void set_delay(float value);
  private:
  float _internal_delay() const;
  void _internal_set_delay(float value);
  public:

  // uint32 dscp = 7[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dscp();
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp() const;
  void set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dscp() const;
  void _internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.TestTraceSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr protocol_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  float delay_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dscp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ActivationSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.ActivationSettings) */ {
 public:
  inline ActivationSettings() : ActivationSettings(nullptr) {};
  virtual ~ActivationSettings();

  ActivationSettings(const ActivationSettings& from);
  ActivationSettings(ActivationSettings&& from) noexcept
    : ActivationSettings() {
    *this = ::std::move(from);
  }

  inline ActivationSettings& operator=(const ActivationSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivationSettings& operator=(ActivationSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActivationSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActivationSettings* internal_default_instance() {
    return reinterpret_cast<const ActivationSettings*>(
               &_ActivationSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ActivationSettings& a, ActivationSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivationSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivationSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActivationSettings* New() const final {
    return CreateMaybeMessage<ActivationSettings>(nullptr);
  }

  ActivationSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActivationSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActivationSettings& from);
  void MergeFrom(const ActivationSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivationSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.ActivationSettings";
  }
  protected:
  explicit ActivationSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGracePeriodFieldNumber = 1,
    kTimeUnitFieldNumber = 2,
    kTimeWindowFieldNumber = 3,
    kTimesFieldNumber = 4,
  };
  // string grace_period = 1[json_name = "gracePeriod", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_grace_period();
  const std::string& grace_period() const;
  void set_grace_period(const std::string& value);
  void set_grace_period(std::string&& value);
  void set_grace_period(const char* value);
  void set_grace_period(const char* value, size_t size);
  std::string* mutable_grace_period();
  std::string* release_grace_period();
  void set_allocated_grace_period(std::string* grace_period);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_grace_period();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_grace_period(
      std::string* grace_period);
  private:
  const std::string& _internal_grace_period() const;
  void _internal_set_grace_period(const std::string& value);
  std::string* _internal_mutable_grace_period();
  public:

  // string time_unit = 2[json_name = "timeUnit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_time_unit();
  const std::string& time_unit() const;
  void set_time_unit(const std::string& value);
  void set_time_unit(std::string&& value);
  void set_time_unit(const char* value);
  void set_time_unit(const char* value, size_t size);
  std::string* mutable_time_unit();
  std::string* release_time_unit();
  void set_allocated_time_unit(std::string* time_unit);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time_unit();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time_unit(
      std::string* time_unit);
  private:
  const std::string& _internal_time_unit() const;
  void _internal_set_time_unit(const std::string& value);
  std::string* _internal_mutable_time_unit();
  public:

  // string time_window = 3[json_name = "timeWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_time_window();
  const std::string& time_window() const;
  void set_time_window(const std::string& value);
  void set_time_window(std::string&& value);
  void set_time_window(const char* value);
  void set_time_window(const char* value, size_t size);
  std::string* mutable_time_window();
  std::string* release_time_window();
  void set_allocated_time_window(std::string* time_window);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time_window();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time_window(
      std::string* time_window);
  private:
  const std::string& _internal_time_window() const;
  void _internal_set_time_window(const std::string& value);
  std::string* _internal_mutable_time_window();
  public:

  // string times = 4[json_name = "times", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_times();
  const std::string& times() const;
  void set_times(const std::string& value);
  void set_times(std::string&& value);
  void set_times(const char* value);
  void set_times(const char* value, size_t size);
  std::string* mutable_times();
  std::string* release_times();
  void set_allocated_times(std::string* times);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_times();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_times(
      std::string* times);
  private:
  const std::string& _internal_times() const;
  void _internal_set_times(const std::string& value);
  std::string* _internal_mutable_times();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.ActivationSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr grace_period_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_unit_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_window_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr times_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HealthSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.HealthSettings) */ {
 public:
  inline HealthSettings() : HealthSettings(nullptr) {};
  virtual ~HealthSettings();

  HealthSettings(const HealthSettings& from);
  HealthSettings(HealthSettings&& from) noexcept
    : HealthSettings() {
    *this = ::std::move(from);
  }

  inline HealthSettings& operator=(const HealthSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthSettings& operator=(HealthSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthSettings* internal_default_instance() {
    return reinterpret_cast<const HealthSettings*>(
               &_HealthSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HealthSettings& a, HealthSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthSettings* New() const final {
    return CreateMaybeMessage<HealthSettings>(nullptr);
  }

  HealthSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthSettings& from);
  void MergeFrom(const HealthSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.HealthSettings";
  }
  protected:
  explicit HealthSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHttpValidCodesFieldNumber = 9,
    kDnsValidCodesFieldNumber = 10,
    kDnsValidIpsFieldNumber = 21,
    kActivationFieldNumber = 18,
    kLatencyCriticalFieldNumber = 1,
    kLatencyWarningFieldNumber = 2,
    kPacketLossCriticalFieldNumber = 3,
    kPacketLossWarningFieldNumber = 4,
    kJitterCriticalFieldNumber = 5,
    kJitterWarningFieldNumber = 6,
    kHttpLatencyCriticalFieldNumber = 7,
    kHttpLatencyWarningFieldNumber = 8,
    kLatencyCriticalStddevFieldNumber = 11,
    kLatencyWarningStddevFieldNumber = 12,
    kJitterCriticalStddevFieldNumber = 13,
    kJitterWarningStddevFieldNumber = 14,
    kHttpLatencyCriticalStddevFieldNumber = 15,
    kHttpLatencyWarningStddevFieldNumber = 16,
    kUnhealthySubtestThresholdFieldNumber = 17,
    kCertExpiryWarningFieldNumber = 19,
    kCertExpiryCriticalFieldNumber = 20,
    kDnsLatencyCriticalFieldNumber = 22,
    kDnsLatencyWarningFieldNumber = 23,
    kDnsLatencyCriticalStddevFieldNumber = 24,
    kDnsLatencyWarningStddevFieldNumber = 25,
    kPerAgentAlertingFieldNumber = 26,
  };
  // repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int http_valid_codes_size() const;
  private:
  int _internal_http_valid_codes_size() const;
  public:
  void clear_http_valid_codes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_http_valid_codes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_http_valid_codes() const;
  void _internal_add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_http_valid_codes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 http_valid_codes(int index) const;
  void set_http_valid_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      http_valid_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_http_valid_codes();

  // repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int dns_valid_codes_size() const;
  private:
  int _internal_dns_valid_codes_size() const;
  public:
  void clear_dns_valid_codes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dns_valid_codes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      _internal_dns_valid_codes() const;
  void _internal_add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      _internal_mutable_dns_valid_codes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint32 dns_valid_codes(int index) const;
  void set_dns_valid_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      dns_valid_codes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_dns_valid_codes();

  // string dns_valid_ips = 21[json_name = "dnsValidIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dns_valid_ips();
  const std::string& dns_valid_ips() const;
  void set_dns_valid_ips(const std::string& value);
  void set_dns_valid_ips(std::string&& value);
  void set_dns_valid_ips(const char* value);
  void set_dns_valid_ips(const char* value, size_t size);
  std::string* mutable_dns_valid_ips();
  std::string* release_dns_valid_ips();
  void set_allocated_dns_valid_ips(std::string* dns_valid_ips);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dns_valid_ips();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dns_valid_ips(
      std::string* dns_valid_ips);
  private:
  const std::string& _internal_dns_valid_ips() const;
  void _internal_set_dns_valid_ips(const std::string& value);
  std::string* _internal_mutable_dns_valid_ips();
  public:

  // .kentik.synthetics.v202309.ActivationSettings activation = 18[json_name = "activation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_activation() const;
  private:
  bool _internal_has_activation() const;
  public:
  void clear_activation();
  const ::kentik::synthetics::v202309::ActivationSettings& activation() const;
  ::kentik::synthetics::v202309::ActivationSettings* release_activation();
  ::kentik::synthetics::v202309::ActivationSettings* mutable_activation();
  void set_allocated_activation(::kentik::synthetics::v202309::ActivationSettings* activation);
  private:
  const ::kentik::synthetics::v202309::ActivationSettings& _internal_activation() const;
  ::kentik::synthetics::v202309::ActivationSettings* _internal_mutable_activation();
  public:
  void unsafe_arena_set_allocated_activation(
      ::kentik::synthetics::v202309::ActivationSettings* activation);
  ::kentik::synthetics::v202309::ActivationSettings* unsafe_arena_release_activation();

  // float latency_critical = 1[json_name = "latencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_latency_critical();
  float latency_critical() const;
  void set_latency_critical(float value);
  private:
  float _internal_latency_critical() const;
  void _internal_set_latency_critical(float value);
  public:

  // float latency_warning = 2[json_name = "latencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_latency_warning();
  float latency_warning() const;
  void set_latency_warning(float value);
  private:
  float _internal_latency_warning() const;
  void _internal_set_latency_warning(float value);
  public:

  // float packet_loss_critical = 3[json_name = "packetLossCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_packet_loss_critical();
  float packet_loss_critical() const;
  void set_packet_loss_critical(float value);
  private:
  float _internal_packet_loss_critical() const;
  void _internal_set_packet_loss_critical(float value);
  public:

  // float packet_loss_warning = 4[json_name = "packetLossWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_packet_loss_warning();
  float packet_loss_warning() const;
  void set_packet_loss_warning(float value);
  private:
  float _internal_packet_loss_warning() const;
  void _internal_set_packet_loss_warning(float value);
  public:

  // float jitter_critical = 5[json_name = "jitterCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_jitter_critical();
  float jitter_critical() const;
  void set_jitter_critical(float value);
  private:
  float _internal_jitter_critical() const;
  void _internal_set_jitter_critical(float value);
  public:

  // float jitter_warning = 6[json_name = "jitterWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_jitter_warning();
  float jitter_warning() const;
  void set_jitter_warning(float value);
  private:
  float _internal_jitter_warning() const;
  void _internal_set_jitter_warning(float value);
  public:

  // float http_latency_critical = 7[json_name = "httpLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_http_latency_critical();
  float http_latency_critical() const;
  void set_http_latency_critical(float value);
  private:
  float _internal_http_latency_critical() const;
  void _internal_set_http_latency_critical(float value);
  public:

  // float http_latency_warning = 8[json_name = "httpLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_http_latency_warning();
  float http_latency_warning() const;
  void set_http_latency_warning(float value);
  private:
  float _internal_http_latency_warning() const;
  void _internal_set_http_latency_warning(float value);
  public:

  // float latency_critical_stddev = 11[json_name = "latencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_latency_critical_stddev();
  float latency_critical_stddev() const;
  void set_latency_critical_stddev(float value);
  private:
  float _internal_latency_critical_stddev() const;
  void _internal_set_latency_critical_stddev(float value);
  public:

  // float latency_warning_stddev = 12[json_name = "latencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_latency_warning_stddev();
  float latency_warning_stddev() const;
  void set_latency_warning_stddev(float value);
  private:
  float _internal_latency_warning_stddev() const;
  void _internal_set_latency_warning_stddev(float value);
  public:

  // float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_jitter_critical_stddev();
  float jitter_critical_stddev() const;
  void set_jitter_critical_stddev(float value);
  private:
  float _internal_jitter_critical_stddev() const;
  void _internal_set_jitter_critical_stddev(float value);
  public:

  // float jitter_warning_stddev = 14[json_name = "jitterWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_jitter_warning_stddev();
  float jitter_warning_stddev() const;
  void set_jitter_warning_stddev(float value);
  private:
  float _internal_jitter_warning_stddev() const;
  void _internal_set_jitter_warning_stddev(float value);
  public:

  // float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_http_latency_critical_stddev();
  float http_latency_critical_stddev() const;
  void set_http_latency_critical_stddev(float value);
  private:
  float _internal_http_latency_critical_stddev() const;
  void _internal_set_http_latency_critical_stddev(float value);
  public:

  // float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_http_latency_warning_stddev();
  float http_latency_warning_stddev() const;
  void set_http_latency_warning_stddev(float value);
  private:
  float _internal_http_latency_warning_stddev() const;
  void _internal_set_http_latency_warning_stddev(float value);
  public:

  // uint32 unhealthy_subtest_threshold = 17[json_name = "unhealthySubtestThreshold", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_unhealthy_subtest_threshold();
  ::PROTOBUF_NAMESPACE_ID::uint32 unhealthy_subtest_threshold() const;
  void set_unhealthy_subtest_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unhealthy_subtest_threshold() const;
  void _internal_set_unhealthy_subtest_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cert_expiry_warning = 19[json_name = "certExpiryWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_cert_expiry_warning();
  ::PROTOBUF_NAMESPACE_ID::uint32 cert_expiry_warning() const;
  void set_cert_expiry_warning(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cert_expiry_warning() const;
  void _internal_set_cert_expiry_warning(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 cert_expiry_critical = 20[json_name = "certExpiryCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_cert_expiry_critical();
  ::PROTOBUF_NAMESPACE_ID::uint32 cert_expiry_critical() const;
  void set_cert_expiry_critical(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cert_expiry_critical() const;
  void _internal_set_cert_expiry_critical(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float dns_latency_critical = 22[json_name = "dnsLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dns_latency_critical();
  float dns_latency_critical() const;
  void set_dns_latency_critical(float value);
  private:
  float _internal_dns_latency_critical() const;
  void _internal_set_dns_latency_critical(float value);
  public:

  // float dns_latency_warning = 23[json_name = "dnsLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dns_latency_warning();
  float dns_latency_warning() const;
  void set_dns_latency_warning(float value);
  private:
  float _internal_dns_latency_warning() const;
  void _internal_set_dns_latency_warning(float value);
  public:

  // float dns_latency_critical_stddev = 24[json_name = "dnsLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dns_latency_critical_stddev();
  float dns_latency_critical_stddev() const;
  void set_dns_latency_critical_stddev(float value);
  private:
  float _internal_dns_latency_critical_stddev() const;
  void _internal_set_dns_latency_critical_stddev(float value);
  public:

  // float dns_latency_warning_stddev = 25[json_name = "dnsLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dns_latency_warning_stddev();
  float dns_latency_warning_stddev() const;
  void set_dns_latency_warning_stddev(float value);
  private:
  float _internal_dns_latency_warning_stddev() const;
  void _internal_set_dns_latency_warning_stddev(float value);
  public:

  // bool per_agent_alerting = 26[json_name = "perAgentAlerting", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_per_agent_alerting();
  bool per_agent_alerting() const;
  void set_per_agent_alerting(bool value);
  private:
  bool _internal_per_agent_alerting() const;
  void _internal_set_per_agent_alerting(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.HealthSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > http_valid_codes_;
  mutable std::atomic<int> _http_valid_codes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > dns_valid_codes_;
  mutable std::atomic<int> _dns_valid_codes_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dns_valid_ips_;
  ::kentik::synthetics::v202309::ActivationSettings* activation_;
  float latency_critical_;
  float latency_warning_;
  float packet_loss_critical_;
  float packet_loss_warning_;
  float jitter_critical_;
  float jitter_warning_;
  float http_latency_critical_;
  float http_latency_warning_;
  float latency_critical_stddev_;
  float latency_warning_stddev_;
  float jitter_critical_stddev_;
  float jitter_warning_stddev_;
  float http_latency_critical_stddev_;
  float http_latency_warning_stddev_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unhealthy_subtest_threshold_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cert_expiry_warning_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cert_expiry_critical_;
  float dns_latency_critical_;
  float dns_latency_warning_;
  float dns_latency_critical_stddev_;
  float dns_latency_warning_stddev_;
  bool per_agent_alerting_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HostnameTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.HostnameTest) */ {
 public:
  inline HostnameTest() : HostnameTest(nullptr) {};
  virtual ~HostnameTest();

  HostnameTest(const HostnameTest& from);
  HostnameTest(HostnameTest&& from) noexcept
    : HostnameTest() {
    *this = ::std::move(from);
  }

  inline HostnameTest& operator=(const HostnameTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostnameTest& operator=(HostnameTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostnameTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostnameTest* internal_default_instance() {
    return reinterpret_cast<const HostnameTest*>(
               &_HostnameTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(HostnameTest& a, HostnameTest& b) {
    a.Swap(&b);
  }
  inline void Swap(HostnameTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostnameTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostnameTest* New() const final {
    return CreateMaybeMessage<HostnameTest>(nullptr);
  }

  HostnameTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostnameTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostnameTest& from);
  void MergeFrom(const HostnameTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostnameTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.HostnameTest";
  }
  protected:
  explicit HostnameTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
  };
  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.HostnameTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class IpTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.IpTest) */ {
 public:
  inline IpTest() : IpTest(nullptr) {};
  virtual ~IpTest();

  IpTest(const IpTest& from);
  IpTest(IpTest&& from) noexcept
    : IpTest() {
    *this = ::std::move(from);
  }

  inline IpTest& operator=(const IpTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IpTest& operator=(IpTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IpTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IpTest* internal_default_instance() {
    return reinterpret_cast<const IpTest*>(
               &_IpTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IpTest& a, IpTest& b) {
    a.Swap(&b);
  }
  inline void Swap(IpTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IpTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IpTest* New() const final {
    return CreateMaybeMessage<IpTest>(nullptr);
  }

  IpTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IpTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IpTest& from);
  void MergeFrom(const IpTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IpTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.IpTest";
  }
  protected:
  explicit IpTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetsFieldNumber = 1,
    kUseLocalIpFieldNumber = 2,
  };
  // repeated string targets = 1[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  const std::string& targets(int index) const;
  std::string* mutable_targets(int index);
  void set_targets(int index, const std::string& value);
  void set_targets(int index, std::string&& value);
  void set_targets(int index, const char* value);
  void set_targets(int index, const char* value, size_t size);
  std::string* add_targets();
  void add_targets(const std::string& value);
  void add_targets(std::string&& value);
  void add_targets(const char* value);
  void add_targets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targets();
  private:
  const std::string& _internal_targets(int index) const;
  std::string* _internal_add_targets();
  public:

  // bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_use_local_ip();
  bool use_local_ip() const;
  void set_use_local_ip(bool value);
  private:
  bool _internal_use_local_ip() const;
  void _internal_set_use_local_ip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.IpTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targets_;
  bool use_local_ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class AgentTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.AgentTest) */ {
 public:
  inline AgentTest() : AgentTest(nullptr) {};
  virtual ~AgentTest();

  AgentTest(const AgentTest& from);
  AgentTest(AgentTest&& from) noexcept
    : AgentTest() {
    *this = ::std::move(from);
  }

  inline AgentTest& operator=(const AgentTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentTest& operator=(AgentTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentTest* internal_default_instance() {
    return reinterpret_cast<const AgentTest*>(
               &_AgentTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AgentTest& a, AgentTest& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentTest* New() const final {
    return CreateMaybeMessage<AgentTest>(nullptr);
  }

  AgentTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentTest& from);
  void MergeFrom(const AgentTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.AgentTest";
  }
  protected:
  explicit AgentTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kUseLocalIpFieldNumber = 2,
    kReciprocalFieldNumber = 3,
  };
  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_use_local_ip();
  bool use_local_ip() const;
  void set_use_local_ip(bool value);
  private:
  bool _internal_use_local_ip() const;
  void _internal_set_use_local_ip(bool value);
  public:

  // bool reciprocal = 3[json_name = "reciprocal", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_reciprocal();
  bool reciprocal() const;
  void set_reciprocal(bool value);
  private:
  bool _internal_reciprocal() const;
  void _internal_set_reciprocal(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.AgentTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  bool use_local_ip_;
  bool reciprocal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class FlowTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.FlowTest) */ {
 public:
  inline FlowTest() : FlowTest(nullptr) {};
  virtual ~FlowTest();

  FlowTest(const FlowTest& from);
  FlowTest(FlowTest&& from) noexcept
    : FlowTest() {
    *this = ::std::move(from);
  }

  inline FlowTest& operator=(const FlowTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FlowTest& operator=(FlowTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FlowTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlowTest* internal_default_instance() {
    return reinterpret_cast<const FlowTest*>(
               &_FlowTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FlowTest& a, FlowTest& b) {
    a.Swap(&b);
  }
  inline void Swap(FlowTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FlowTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FlowTest* New() const final {
    return CreateMaybeMessage<FlowTest>(nullptr);
  }

  FlowTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FlowTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FlowTest& from);
  void MergeFrom(const FlowTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlowTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.FlowTest";
  }
  protected:
  explicit FlowTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kTypeFieldNumber = 5,
    kInetDirectionFieldNumber = 6,
    kDirectionFieldNumber = 7,
    kTargetRefreshIntervalMillisFieldNumber = 2,
    kMaxProvidersFieldNumber = 3,
    kMaxIpTargetsFieldNumber = 4,
  };
  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string inet_direction = 6[json_name = "inetDirection", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_inet_direction();
  const std::string& inet_direction() const;
  void set_inet_direction(const std::string& value);
  void set_inet_direction(std::string&& value);
  void set_inet_direction(const char* value);
  void set_inet_direction(const char* value, size_t size);
  std::string* mutable_inet_direction();
  std::string* release_inet_direction();
  void set_allocated_inet_direction(std::string* inet_direction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inet_direction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inet_direction(
      std::string* inet_direction);
  private:
  const std::string& _internal_inet_direction() const;
  void _internal_set_inet_direction(const std::string& value);
  std::string* _internal_mutable_inet_direction();
  public:

  // string direction = 7[json_name = "direction", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_direction();
  const std::string& direction() const;
  void set_direction(const std::string& value);
  void set_direction(std::string&& value);
  void set_direction(const char* value);
  void set_direction(const char* value, size_t size);
  std::string* mutable_direction();
  std::string* release_direction();
  void set_allocated_direction(std::string* direction);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_direction();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_direction(
      std::string* direction);
  private:
  const std::string& _internal_direction() const;
  void _internal_set_direction(const std::string& value);
  std::string* _internal_mutable_direction();
  public:

  // uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target_refresh_interval_millis();
  ::PROTOBUF_NAMESPACE_ID::uint32 target_refresh_interval_millis() const;
  void set_target_refresh_interval_millis(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_target_refresh_interval_millis() const;
  void _internal_set_target_refresh_interval_millis(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_providers = 3[json_name = "maxProviders", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_providers();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_providers() const;
  void set_max_providers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_providers() const;
  void _internal_set_max_providers(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 max_ip_targets = 4[json_name = "maxIpTargets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_ip_targets();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ip_targets() const;
  void set_max_ip_targets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_ip_targets() const;
  void _internal_set_max_ip_targets(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.FlowTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inet_direction_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr direction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 target_refresh_interval_millis_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_providers_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_ip_targets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DnsTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.DnsTest) */ {
 public:
  inline DnsTest() : DnsTest(nullptr) {};
  virtual ~DnsTest();

  DnsTest(const DnsTest& from);
  DnsTest(DnsTest&& from) noexcept
    : DnsTest() {
    *this = ::std::move(from);
  }

  inline DnsTest& operator=(const DnsTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DnsTest& operator=(DnsTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DnsTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DnsTest* internal_default_instance() {
    return reinterpret_cast<const DnsTest*>(
               &_DnsTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DnsTest& a, DnsTest& b) {
    a.Swap(&b);
  }
  inline void Swap(DnsTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DnsTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DnsTest* New() const final {
    return CreateMaybeMessage<DnsTest>(nullptr);
  }

  DnsTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DnsTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DnsTest& from);
  void MergeFrom(const DnsTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DnsTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.DnsTest";
  }
  protected:
  explicit DnsTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServersFieldNumber = 4,
    kTargetFieldNumber = 1,
    kTimeoutFieldNumber = 2,
    kRecordTypeFieldNumber = 3,
    kPortFieldNumber = 5,
  };
  // repeated string servers = 4[json_name = "servers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int servers_size() const;
  private:
  int _internal_servers_size() const;
  public:
  void clear_servers();
  const std::string& servers(int index) const;
  std::string* mutable_servers(int index);
  void set_servers(int index, const std::string& value);
  void set_servers(int index, std::string&& value);
  void set_servers(int index, const char* value);
  void set_servers(int index, const char* value, size_t size);
  std::string* add_servers();
  void add_servers(const std::string& value);
  void add_servers(std::string&& value);
  void add_servers(const char* value);
  void add_servers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& servers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_servers();
  private:
  const std::string& _internal_servers(int index) const;
  std::string* _internal_add_servers();
  public:

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // uint32 timeout = 2[json_name = "timeout", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  PROTOBUF_DEPRECATED void clear_timeout();
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  PROTOBUF_DEPRECATED void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .kentik.synthetics.v202309.DNSRecord record_type = 3[json_name = "recordType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_record_type();
  ::kentik::synthetics::v202309::DNSRecord record_type() const;
  void set_record_type(::kentik::synthetics::v202309::DNSRecord value);
  private:
  ::kentik::synthetics::v202309::DNSRecord _internal_record_type() const;
  void _internal_set_record_type(::kentik::synthetics::v202309::DNSRecord value);
  public:

  // uint32 port = 5[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::uint32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.DnsTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> servers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  int record_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class UrlTest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UrlTest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UrlTest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  UrlTest_HeadersEntry_DoNotUse();
  UrlTest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UrlTest_HeadersEntry_DoNotUse& other);
  static const UrlTest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UrlTest_HeadersEntry_DoNotUse*>(&_UrlTest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202309.UrlTest.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202309.UrlTest.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[14];
  }

  public:
};

// -------------------------------------------------------------------

class UrlTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.UrlTest) */ {
 public:
  inline UrlTest() : UrlTest(nullptr) {};
  virtual ~UrlTest();

  UrlTest(const UrlTest& from);
  UrlTest(UrlTest&& from) noexcept
    : UrlTest() {
    *this = ::std::move(from);
  }

  inline UrlTest& operator=(const UrlTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlTest& operator=(UrlTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UrlTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UrlTest* internal_default_instance() {
    return reinterpret_cast<const UrlTest*>(
               &_UrlTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UrlTest& a, UrlTest& b) {
    a.Swap(&b);
  }
  inline void Swap(UrlTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrlTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UrlTest* New() const final {
    return CreateMaybeMessage<UrlTest>(nullptr);
  }

  UrlTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UrlTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UrlTest& from);
  void MergeFrom(const UrlTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UrlTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.UrlTest";
  }
  protected:
  explicit UrlTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 4,
    kTargetFieldNumber = 1,
    kMethodFieldNumber = 3,
    kBodyFieldNumber = 5,
    kTimeoutFieldNumber = 2,
    kIgnoreTlsErrorsFieldNumber = 6,
  };
  // map<string, string> headers = 4[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string method = 3[json_name = "method", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_method();
  const std::string& method() const;
  void set_method(const std::string& value);
  void set_method(std::string&& value);
  void set_method(const char* value);
  void set_method(const char* value, size_t size);
  std::string* mutable_method();
  std::string* release_method();
  void set_allocated_method(std::string* method);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_method();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_method(
      std::string* method);
  private:
  const std::string& _internal_method() const;
  void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // string body = 5[json_name = "body", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_body();
  const std::string& body() const;
  void set_body(const std::string& value);
  void set_body(std::string&& value);
  void set_body(const char* value);
  void set_body(const char* value, size_t size);
  std::string* mutable_body();
  std::string* release_body();
  void set_allocated_body(std::string* body);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_body();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_body(
      std::string* body);
  private:
  const std::string& _internal_body() const;
  void _internal_set_body(const std::string& value);
  std::string* _internal_mutable_body();
  public:

  // uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_ignore_tls_errors();
  bool ignore_tls_errors() const;
  void set_ignore_tls_errors(bool value);
  private:
  bool _internal_ignore_tls_errors() const;
  void _internal_set_ignore_tls_errors(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.UrlTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UrlTest_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  bool ignore_tls_errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PageLoadTest_HeadersEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PageLoadTest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PageLoadTest_HeadersEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PageLoadTest_HeadersEntry_DoNotUse();
  PageLoadTest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PageLoadTest_HeadersEntry_DoNotUse& other);
  static const PageLoadTest_HeadersEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PageLoadTest_HeadersEntry_DoNotUse*>(&_PageLoadTest_HeadersEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202309.PageLoadTest.HeadersEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202309.PageLoadTest.HeadersEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[16];
  }

  public:
};

// -------------------------------------------------------------------

class PageLoadTest_CssSelectorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PageLoadTest_CssSelectorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<PageLoadTest_CssSelectorsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PageLoadTest_CssSelectorsEntry_DoNotUse();
  PageLoadTest_CssSelectorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const PageLoadTest_CssSelectorsEntry_DoNotUse& other);
  static const PageLoadTest_CssSelectorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PageLoadTest_CssSelectorsEntry_DoNotUse*>(&_PageLoadTest_CssSelectorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202309.PageLoadTest.CssSelectorsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202309.PageLoadTest.CssSelectorsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[17];
  }

  public:
};

// -------------------------------------------------------------------

class PageLoadTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.PageLoadTest) */ {
 public:
  inline PageLoadTest() : PageLoadTest(nullptr) {};
  virtual ~PageLoadTest();

  PageLoadTest(const PageLoadTest& from);
  PageLoadTest(PageLoadTest&& from) noexcept
    : PageLoadTest() {
    *this = ::std::move(from);
  }

  inline PageLoadTest& operator=(const PageLoadTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageLoadTest& operator=(PageLoadTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PageLoadTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PageLoadTest* internal_default_instance() {
    return reinterpret_cast<const PageLoadTest*>(
               &_PageLoadTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PageLoadTest& a, PageLoadTest& b) {
    a.Swap(&b);
  }
  inline void Swap(PageLoadTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageLoadTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PageLoadTest* New() const final {
    return CreateMaybeMessage<PageLoadTest>(nullptr);
  }

  PageLoadTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PageLoadTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PageLoadTest& from);
  void MergeFrom(const PageLoadTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PageLoadTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.PageLoadTest";
  }
  protected:
  explicit PageLoadTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 3,
    kCssSelectorsFieldNumber = 5,
    kTargetFieldNumber = 1,
    kTimeoutFieldNumber = 2,
    kIgnoreTlsErrorsFieldNumber = 4,
  };
  // map<string, string> headers = 3[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_headers();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      headers() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_headers();

  // map<string, string> css_selectors = 5[json_name = "cssSelectors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int css_selectors_size() const;
  private:
  int _internal_css_selectors_size() const;
  public:
  void clear_css_selectors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_css_selectors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_css_selectors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      css_selectors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_css_selectors();

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timeout() const;
  void _internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool ignore_tls_errors = 4[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_ignore_tls_errors();
  bool ignore_tls_errors() const;
  void set_ignore_tls_errors(bool value);
  private:
  bool _internal_ignore_tls_errors() const;
  void _internal_set_ignore_tls_errors(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.PageLoadTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PageLoadTest_HeadersEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      PageLoadTest_CssSelectorsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > css_selectors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  bool ignore_tls_errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class NetworkMeshTest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.NetworkMeshTest) */ {
 public:
  inline NetworkMeshTest() : NetworkMeshTest(nullptr) {};
  virtual ~NetworkMeshTest();

  NetworkMeshTest(const NetworkMeshTest& from);
  NetworkMeshTest(NetworkMeshTest&& from) noexcept
    : NetworkMeshTest() {
    *this = ::std::move(from);
  }

  inline NetworkMeshTest& operator=(const NetworkMeshTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkMeshTest& operator=(NetworkMeshTest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkMeshTest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkMeshTest* internal_default_instance() {
    return reinterpret_cast<const NetworkMeshTest*>(
               &_NetworkMeshTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(NetworkMeshTest& a, NetworkMeshTest& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkMeshTest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkMeshTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkMeshTest* New() const final {
    return CreateMaybeMessage<NetworkMeshTest>(nullptr);
  }

  NetworkMeshTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkMeshTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkMeshTest& from);
  void MergeFrom(const NetworkMeshTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkMeshTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.NetworkMeshTest";
  }
  protected:
  explicit NetworkMeshTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseLocalIpFieldNumber = 1,
  };
  // bool use_local_ip = 1[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_use_local_ip();
  bool use_local_ip() const;
  void set_use_local_ip(bool value);
  private:
  bool _internal_use_local_ip() const;
  void _internal_set_use_local_ip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.NetworkMeshTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool use_local_ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class MetricData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.MetricData) */ {
 public:
  inline MetricData() : MetricData(nullptr) {};
  virtual ~MetricData();

  MetricData(const MetricData& from);
  MetricData(MetricData&& from) noexcept
    : MetricData() {
    *this = ::std::move(from);
  }

  inline MetricData& operator=(const MetricData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetricData& operator=(MetricData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetricData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetricData* internal_default_instance() {
    return reinterpret_cast<const MetricData*>(
               &_MetricData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MetricData& a, MetricData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetricData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MetricData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetricData* New() const final {
    return CreateMaybeMessage<MetricData>(nullptr);
  }

  MetricData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetricData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetricData& from);
  void MergeFrom(const MetricData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetricData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.MetricData";
  }
  protected:
  explicit MetricData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 4,
    kCurrentFieldNumber = 1,
    kRollingAvgFieldNumber = 2,
    kRollingStddevFieldNumber = 3,
  };
  // string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_health();
  const std::string& health() const;
  void set_health(const std::string& value);
  void set_health(std::string&& value);
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  std::string* mutable_health();
  std::string* release_health();
  void set_allocated_health(std::string* health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health(
      std::string* health);
  private:
  const std::string& _internal_health() const;
  void _internal_set_health(const std::string& value);
  std::string* _internal_mutable_health();
  public:

  // uint32 current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_current();
  ::PROTOBUF_NAMESPACE_ID::uint32 current() const;
  void set_current(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_current() const;
  void _internal_set_current(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rolling_avg = 2[json_name = "rollingAvg", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_rolling_avg();
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_avg() const;
  void set_rolling_avg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rolling_avg() const;
  void _internal_set_rolling_avg(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rolling_stddev = 3[json_name = "rollingStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_rolling_stddev();
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_stddev() const;
  void set_rolling_stddev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rolling_stddev() const;
  void _internal_set_rolling_stddev(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.MetricData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_;
  ::PROTOBUF_NAMESPACE_ID::uint32 current_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_avg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rolling_stddev_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PacketLossData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.PacketLossData) */ {
 public:
  inline PacketLossData() : PacketLossData(nullptr) {};
  virtual ~PacketLossData();

  PacketLossData(const PacketLossData& from);
  PacketLossData(PacketLossData&& from) noexcept
    : PacketLossData() {
    *this = ::std::move(from);
  }

  inline PacketLossData& operator=(const PacketLossData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketLossData& operator=(PacketLossData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PacketLossData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PacketLossData* internal_default_instance() {
    return reinterpret_cast<const PacketLossData*>(
               &_PacketLossData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(PacketLossData& a, PacketLossData& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketLossData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketLossData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PacketLossData* New() const final {
    return CreateMaybeMessage<PacketLossData>(nullptr);
  }

  PacketLossData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PacketLossData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PacketLossData& from);
  void MergeFrom(const PacketLossData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PacketLossData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.PacketLossData";
  }
  protected:
  explicit PacketLossData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 2,
    kCurrentFieldNumber = 1,
  };
  // string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_health();
  const std::string& health() const;
  void set_health(const std::string& value);
  void set_health(std::string&& value);
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  std::string* mutable_health();
  std::string* release_health();
  void set_allocated_health(std::string* health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health(
      std::string* health);
  private:
  const std::string& _internal_health() const;
  void _internal_set_health(const std::string& value);
  std::string* _internal_mutable_health();
  public:

  // double current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_current();
  double current() const;
  void set_current(double value);
  private:
  double _internal_current() const;
  void _internal_set_current(double value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.PacketLossData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_;
  double current_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PingResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.PingResults) */ {
 public:
  inline PingResults() : PingResults(nullptr) {};
  virtual ~PingResults();

  PingResults(const PingResults& from);
  PingResults(PingResults&& from) noexcept
    : PingResults() {
    *this = ::std::move(from);
  }

  inline PingResults& operator=(const PingResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline PingResults& operator=(PingResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PingResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PingResults* internal_default_instance() {
    return reinterpret_cast<const PingResults*>(
               &_PingResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(PingResults& a, PingResults& b) {
    a.Swap(&b);
  }
  inline void Swap(PingResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PingResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PingResults* New() const final {
    return CreateMaybeMessage<PingResults>(nullptr);
  }

  PingResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PingResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PingResults& from);
  void MergeFrom(const PingResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PingResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.PingResults";
  }
  protected:
  explicit PingResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kDstIpFieldNumber = 5,
    kPacketLossFieldNumber = 2,
    kLatencyFieldNumber = 3,
    kJitterFieldNumber = 4,
  };
  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dst_ip();
  const std::string& dst_ip() const;
  void set_dst_ip(const std::string& value);
  void set_dst_ip(std::string&& value);
  void set_dst_ip(const char* value);
  void set_dst_ip(const char* value, size_t size);
  std::string* mutable_dst_ip();
  std::string* release_dst_ip();
  void set_allocated_dst_ip(std::string* dst_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dst_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dst_ip(
      std::string* dst_ip);
  private:
  const std::string& _internal_dst_ip() const;
  void _internal_set_dst_ip(const std::string& value);
  std::string* _internal_mutable_dst_ip();
  public:

  // .kentik.synthetics.v202309.PacketLossData packet_loss = 2[json_name = "packetLoss", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_packet_loss() const;
  private:
  bool _internal_has_packet_loss() const;
  public:
  void clear_packet_loss();
  const ::kentik::synthetics::v202309::PacketLossData& packet_loss() const;
  ::kentik::synthetics::v202309::PacketLossData* release_packet_loss();
  ::kentik::synthetics::v202309::PacketLossData* mutable_packet_loss();
  void set_allocated_packet_loss(::kentik::synthetics::v202309::PacketLossData* packet_loss);
  private:
  const ::kentik::synthetics::v202309::PacketLossData& _internal_packet_loss() const;
  ::kentik::synthetics::v202309::PacketLossData* _internal_mutable_packet_loss();
  public:
  void unsafe_arena_set_allocated_packet_loss(
      ::kentik::synthetics::v202309::PacketLossData* packet_loss);
  ::kentik::synthetics::v202309::PacketLossData* unsafe_arena_release_packet_loss();

  // .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  const ::kentik::synthetics::v202309::MetricData& latency() const;
  ::kentik::synthetics::v202309::MetricData* release_latency();
  ::kentik::synthetics::v202309::MetricData* mutable_latency();
  void set_allocated_latency(::kentik::synthetics::v202309::MetricData* latency);
  private:
  const ::kentik::synthetics::v202309::MetricData& _internal_latency() const;
  ::kentik::synthetics::v202309::MetricData* _internal_mutable_latency();
  public:
  void unsafe_arena_set_allocated_latency(
      ::kentik::synthetics::v202309::MetricData* latency);
  ::kentik::synthetics::v202309::MetricData* unsafe_arena_release_latency();

  // .kentik.synthetics.v202309.MetricData jitter = 4[json_name = "jitter", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_jitter() const;
  private:
  bool _internal_has_jitter() const;
  public:
  void clear_jitter();
  const ::kentik::synthetics::v202309::MetricData& jitter() const;
  ::kentik::synthetics::v202309::MetricData* release_jitter();
  ::kentik::synthetics::v202309::MetricData* mutable_jitter();
  void set_allocated_jitter(::kentik::synthetics::v202309::MetricData* jitter);
  private:
  const ::kentik::synthetics::v202309::MetricData& _internal_jitter() const;
  ::kentik::synthetics::v202309::MetricData* _internal_mutable_jitter();
  public:
  void unsafe_arena_set_allocated_jitter(
      ::kentik::synthetics::v202309::MetricData* jitter);
  ::kentik::synthetics::v202309::MetricData* unsafe_arena_release_jitter();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.PingResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_;
  ::kentik::synthetics::v202309::PacketLossData* packet_loss_;
  ::kentik::synthetics::v202309::MetricData* latency_;
  ::kentik::synthetics::v202309::MetricData* jitter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HTTPResponseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.HTTPResponseData) */ {
 public:
  inline HTTPResponseData() : HTTPResponseData(nullptr) {};
  virtual ~HTTPResponseData();

  HTTPResponseData(const HTTPResponseData& from);
  HTTPResponseData(HTTPResponseData&& from) noexcept
    : HTTPResponseData() {
    *this = ::std::move(from);
  }

  inline HTTPResponseData& operator=(const HTTPResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPResponseData& operator=(HTTPResponseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTTPResponseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPResponseData* internal_default_instance() {
    return reinterpret_cast<const HTTPResponseData*>(
               &_HTTPResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(HTTPResponseData& a, HTTPResponseData& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPResponseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPResponseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTTPResponseData* New() const final {
    return CreateMaybeMessage<HTTPResponseData>(nullptr);
  }

  HTTPResponseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTTPResponseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTTPResponseData& from);
  void MergeFrom(const HTTPResponseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPResponseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.HTTPResponseData";
  }
  protected:
  explicit HTTPResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kStatusFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // string data = 3[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 2[json_name = "size", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.HTTPResponseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class HTTPResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.HTTPResults) */ {
 public:
  inline HTTPResults() : HTTPResults(nullptr) {};
  virtual ~HTTPResults();

  HTTPResults(const HTTPResults& from);
  HTTPResults(HTTPResults&& from) noexcept
    : HTTPResults() {
    *this = ::std::move(from);
  }

  inline HTTPResults& operator=(const HTTPResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline HTTPResults& operator=(HTTPResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HTTPResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HTTPResults* internal_default_instance() {
    return reinterpret_cast<const HTTPResults*>(
               &_HTTPResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(HTTPResults& a, HTTPResults& b) {
    a.Swap(&b);
  }
  inline void Swap(HTTPResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HTTPResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HTTPResults* New() const final {
    return CreateMaybeMessage<HTTPResults>(nullptr);
  }

  HTTPResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HTTPResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HTTPResults& from);
  void MergeFrom(const HTTPResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HTTPResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.HTTPResults";
  }
  protected:
  explicit HTTPResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kDstIpFieldNumber = 5,
    kLatencyFieldNumber = 2,
    kResponseFieldNumber = 4,
  };
  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dst_ip();
  const std::string& dst_ip() const;
  void set_dst_ip(const std::string& value);
  void set_dst_ip(std::string&& value);
  void set_dst_ip(const char* value);
  void set_dst_ip(const char* value, size_t size);
  std::string* mutable_dst_ip();
  std::string* release_dst_ip();
  void set_allocated_dst_ip(std::string* dst_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dst_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dst_ip(
      std::string* dst_ip);
  private:
  const std::string& _internal_dst_ip() const;
  void _internal_set_dst_ip(const std::string& value);
  std::string* _internal_mutable_dst_ip();
  public:

  // .kentik.synthetics.v202309.MetricData latency = 2[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  const ::kentik::synthetics::v202309::MetricData& latency() const;
  ::kentik::synthetics::v202309::MetricData* release_latency();
  ::kentik::synthetics::v202309::MetricData* mutable_latency();
  void set_allocated_latency(::kentik::synthetics::v202309::MetricData* latency);
  private:
  const ::kentik::synthetics::v202309::MetricData& _internal_latency() const;
  ::kentik::synthetics::v202309::MetricData* _internal_mutable_latency();
  public:
  void unsafe_arena_set_allocated_latency(
      ::kentik::synthetics::v202309::MetricData* latency);
  ::kentik::synthetics::v202309::MetricData* unsafe_arena_release_latency();

  // .kentik.synthetics.v202309.HTTPResponseData response = 4[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::kentik::synthetics::v202309::HTTPResponseData& response() const;
  ::kentik::synthetics::v202309::HTTPResponseData* release_response();
  ::kentik::synthetics::v202309::HTTPResponseData* mutable_response();
  void set_allocated_response(::kentik::synthetics::v202309::HTTPResponseData* response);
  private:
  const ::kentik::synthetics::v202309::HTTPResponseData& _internal_response() const;
  ::kentik::synthetics::v202309::HTTPResponseData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::kentik::synthetics::v202309::HTTPResponseData* response);
  ::kentik::synthetics::v202309::HTTPResponseData* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.HTTPResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dst_ip_;
  ::kentik::synthetics::v202309::MetricData* latency_;
  ::kentik::synthetics::v202309::HTTPResponseData* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DNSResponseData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.DNSResponseData) */ {
 public:
  inline DNSResponseData() : DNSResponseData(nullptr) {};
  virtual ~DNSResponseData();

  DNSResponseData(const DNSResponseData& from);
  DNSResponseData(DNSResponseData&& from) noexcept
    : DNSResponseData() {
    *this = ::std::move(from);
  }

  inline DNSResponseData& operator=(const DNSResponseData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNSResponseData& operator=(DNSResponseData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DNSResponseData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSResponseData* internal_default_instance() {
    return reinterpret_cast<const DNSResponseData*>(
               &_DNSResponseData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DNSResponseData& a, DNSResponseData& b) {
    a.Swap(&b);
  }
  inline void Swap(DNSResponseData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DNSResponseData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DNSResponseData* New() const final {
    return CreateMaybeMessage<DNSResponseData>(nullptr);
  }

  DNSResponseData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DNSResponseData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DNSResponseData& from);
  void MergeFrom(const DNSResponseData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSResponseData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.DNSResponseData";
  }
  protected:
  explicit DNSResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string data = 2[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.DNSResponseData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DNSResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.DNSResults) */ {
 public:
  inline DNSResults() : DNSResults(nullptr) {};
  virtual ~DNSResults();

  DNSResults(const DNSResults& from);
  DNSResults(DNSResults&& from) noexcept
    : DNSResults() {
    *this = ::std::move(from);
  }

  inline DNSResults& operator=(const DNSResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline DNSResults& operator=(DNSResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DNSResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DNSResults* internal_default_instance() {
    return reinterpret_cast<const DNSResults*>(
               &_DNSResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DNSResults& a, DNSResults& b) {
    a.Swap(&b);
  }
  inline void Swap(DNSResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DNSResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DNSResults* New() const final {
    return CreateMaybeMessage<DNSResults>(nullptr);
  }

  DNSResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DNSResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DNSResults& from);
  void MergeFrom(const DNSResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DNSResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.DNSResults";
  }
  protected:
  explicit DNSResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kServerFieldNumber = 2,
    kLatencyFieldNumber = 3,
    kResponseFieldNumber = 5,
  };
  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target();
  const std::string& target() const;
  void set_target(const std::string& value);
  void set_target(std::string&& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  std::string* mutable_target();
  std::string* release_target();
  void set_allocated_target(std::string* target);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target(
      std::string* target);
  private:
  const std::string& _internal_target() const;
  void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string server = 2[json_name = "server", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_server();
  const std::string& server() const;
  void set_server(const std::string& value);
  void set_server(std::string&& value);
  void set_server(const char* value);
  void set_server(const char* value, size_t size);
  std::string* mutable_server();
  std::string* release_server();
  void set_allocated_server(std::string* server);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_server();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_server(
      std::string* server);
  private:
  const std::string& _internal_server() const;
  void _internal_set_server(const std::string& value);
  std::string* _internal_mutable_server();
  public:

  // .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  const ::kentik::synthetics::v202309::MetricData& latency() const;
  ::kentik::synthetics::v202309::MetricData* release_latency();
  ::kentik::synthetics::v202309::MetricData* mutable_latency();
  void set_allocated_latency(::kentik::synthetics::v202309::MetricData* latency);
  private:
  const ::kentik::synthetics::v202309::MetricData& _internal_latency() const;
  ::kentik::synthetics::v202309::MetricData* _internal_mutable_latency();
  public:
  void unsafe_arena_set_allocated_latency(
      ::kentik::synthetics::v202309::MetricData* latency);
  ::kentik::synthetics::v202309::MetricData* unsafe_arena_release_latency();

  // .kentik.synthetics.v202309.DNSResponseData response = 5[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::kentik::synthetics::v202309::DNSResponseData& response() const;
  ::kentik::synthetics::v202309::DNSResponseData* release_response();
  ::kentik::synthetics::v202309::DNSResponseData* mutable_response();
  void set_allocated_response(::kentik::synthetics::v202309::DNSResponseData* response);
  private:
  const ::kentik::synthetics::v202309::DNSResponseData& _internal_response() const;
  ::kentik::synthetics::v202309::DNSResponseData* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::kentik::synthetics::v202309::DNSResponseData* response);
  ::kentik::synthetics::v202309::DNSResponseData* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.DNSResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_;
  ::kentik::synthetics::v202309::MetricData* latency_;
  ::kentik::synthetics::v202309::DNSResponseData* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TaskResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.TaskResults) */ {
 public:
  inline TaskResults() : TaskResults(nullptr) {};
  virtual ~TaskResults();

  TaskResults(const TaskResults& from);
  TaskResults(TaskResults&& from) noexcept
    : TaskResults() {
    *this = ::std::move(from);
  }

  inline TaskResults& operator=(const TaskResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskResults& operator=(TaskResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskResults& default_instance();

  enum TaskTypeCase {
    kPing = 1,
    kHttp = 2,
    kDns = 3,
    TASK_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskResults* internal_default_instance() {
    return reinterpret_cast<const TaskResults*>(
               &_TaskResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(TaskResults& a, TaskResults& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskResults* New() const final {
    return CreateMaybeMessage<TaskResults>(nullptr);
  }

  TaskResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskResults& from);
  void MergeFrom(const TaskResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.TaskResults";
  }
  protected:
  explicit TaskResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHealthFieldNumber = 4,
    kPingFieldNumber = 1,
    kHttpFieldNumber = 2,
    kDnsFieldNumber = 3,
  };
  // string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_health();
  const std::string& health() const;
  void set_health(const std::string& value);
  void set_health(std::string&& value);
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  std::string* mutable_health();
  std::string* release_health();
  void set_allocated_health(std::string* health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health(
      std::string* health);
  private:
  const std::string& _internal_health() const;
  void _internal_set_health(const std::string& value);
  std::string* _internal_mutable_health();
  public:

  // .kentik.synthetics.v202309.PingResults ping = 1[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;
  public:
  void clear_ping();
  const ::kentik::synthetics::v202309::PingResults& ping() const;
  ::kentik::synthetics::v202309::PingResults* release_ping();
  ::kentik::synthetics::v202309::PingResults* mutable_ping();
  void set_allocated_ping(::kentik::synthetics::v202309::PingResults* ping);
  private:
  const ::kentik::synthetics::v202309::PingResults& _internal_ping() const;
  ::kentik::synthetics::v202309::PingResults* _internal_mutable_ping();
  public:
  void unsafe_arena_set_allocated_ping(
      ::kentik::synthetics::v202309::PingResults* ping);
  ::kentik::synthetics::v202309::PingResults* unsafe_arena_release_ping();

  // .kentik.synthetics.v202309.HTTPResults http = 2[json_name = "http", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_http() const;
  private:
  bool _internal_has_http() const;
  public:
  void clear_http();
  const ::kentik::synthetics::v202309::HTTPResults& http() const;
  ::kentik::synthetics::v202309::HTTPResults* release_http();
  ::kentik::synthetics::v202309::HTTPResults* mutable_http();
  void set_allocated_http(::kentik::synthetics::v202309::HTTPResults* http);
  private:
  const ::kentik::synthetics::v202309::HTTPResults& _internal_http() const;
  ::kentik::synthetics::v202309::HTTPResults* _internal_mutable_http();
  public:
  void unsafe_arena_set_allocated_http(
      ::kentik::synthetics::v202309::HTTPResults* http);
  ::kentik::synthetics::v202309::HTTPResults* unsafe_arena_release_http();

  // .kentik.synthetics.v202309.DNSResults dns = 3[json_name = "dns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_dns() const;
  private:
  bool _internal_has_dns() const;
  public:
  void clear_dns();
  const ::kentik::synthetics::v202309::DNSResults& dns() const;
  ::kentik::synthetics::v202309::DNSResults* release_dns();
  ::kentik::synthetics::v202309::DNSResults* mutable_dns();
  void set_allocated_dns(::kentik::synthetics::v202309::DNSResults* dns);
  private:
  const ::kentik::synthetics::v202309::DNSResults& _internal_dns() const;
  ::kentik::synthetics::v202309::DNSResults* _internal_mutable_dns();
  public:
  void unsafe_arena_set_allocated_dns(
      ::kentik::synthetics::v202309::DNSResults* dns);
  ::kentik::synthetics::v202309::DNSResults* unsafe_arena_release_dns();

  void clear_task_type();
  TaskTypeCase task_type_case() const;
  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.TaskResults)
 private:
  class _Internal;
  void set_has_ping();
  void set_has_http();
  void set_has_dns();

  inline bool has_task_type() const;
  inline void clear_has_task_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_;
  union TaskTypeUnion {
    TaskTypeUnion() {}
    ::kentik::synthetics::v202309::PingResults* ping_;
    ::kentik::synthetics::v202309::HTTPResults* http_;
    ::kentik::synthetics::v202309::DNSResults* dns_;
  } task_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class AgentResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.AgentResults) */ {
 public:
  inline AgentResults() : AgentResults(nullptr) {};
  virtual ~AgentResults();

  AgentResults(const AgentResults& from);
  AgentResults(AgentResults&& from) noexcept
    : AgentResults() {
    *this = ::std::move(from);
  }

  inline AgentResults& operator=(const AgentResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentResults& operator=(AgentResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AgentResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AgentResults* internal_default_instance() {
    return reinterpret_cast<const AgentResults*>(
               &_AgentResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(AgentResults& a, AgentResults& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AgentResults* New() const final {
    return CreateMaybeMessage<AgentResults>(nullptr);
  }

  AgentResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AgentResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AgentResults& from);
  void MergeFrom(const AgentResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.AgentResults";
  }
  protected:
  explicit AgentResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 3,
    kAgentIdFieldNumber = 1,
    kHealthFieldNumber = 2,
  };
  // repeated .kentik.synthetics.v202309.TaskResults tasks = 3[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::kentik::synthetics::v202309::TaskResults* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TaskResults >*
      mutable_tasks();
  private:
  const ::kentik::synthetics::v202309::TaskResults& _internal_tasks(int index) const;
  ::kentik::synthetics::v202309::TaskResults* _internal_add_tasks();
  public:
  const ::kentik::synthetics::v202309::TaskResults& tasks(int index) const;
  ::kentik::synthetics::v202309::TaskResults* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TaskResults >&
      tasks() const;

  // string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_agent_id();
  const std::string& agent_id() const;
  void set_agent_id(const std::string& value);
  void set_agent_id(std::string&& value);
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  std::string* mutable_agent_id();
  std::string* release_agent_id();
  void set_allocated_agent_id(std::string* agent_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_agent_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_agent_id(
      std::string* agent_id);
  private:
  const std::string& _internal_agent_id() const;
  void _internal_set_agent_id(const std::string& value);
  std::string* _internal_mutable_agent_id();
  public:

  // string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_health();
  const std::string& health() const;
  void set_health(const std::string& value);
  void set_health(std::string&& value);
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  std::string* mutable_health();
  std::string* release_health();
  void set_allocated_health(std::string* health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health(
      std::string* health);
  private:
  const std::string& _internal_health() const;
  void _internal_set_health(const std::string& value);
  std::string* _internal_mutable_health();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.AgentResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TaskResults > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TestResults PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.TestResults) */ {
 public:
  inline TestResults() : TestResults(nullptr) {};
  virtual ~TestResults();

  TestResults(const TestResults& from);
  TestResults(TestResults&& from) noexcept
    : TestResults() {
    *this = ::std::move(from);
  }

  inline TestResults& operator=(const TestResults& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestResults& operator=(TestResults&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestResults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestResults* internal_default_instance() {
    return reinterpret_cast<const TestResults*>(
               &_TestResults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(TestResults& a, TestResults& b) {
    a.Swap(&b);
  }
  inline void Swap(TestResults* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestResults* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestResults* New() const final {
    return CreateMaybeMessage<TestResults>(nullptr);
  }

  TestResults* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestResults>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestResults& from);
  void MergeFrom(const TestResults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestResults* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.TestResults";
  }
  protected:
  explicit TestResults(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 4,
    kTestIdFieldNumber = 1,
    kHealthFieldNumber = 3,
    kTimeFieldNumber = 2,
  };
  // repeated .kentik.synthetics.v202309.AgentResults agents = 4[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::kentik::synthetics::v202309::AgentResults* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentResults >*
      mutable_agents();
  private:
  const ::kentik::synthetics::v202309::AgentResults& _internal_agents(int index) const;
  ::kentik::synthetics::v202309::AgentResults* _internal_add_agents();
  public:
  const ::kentik::synthetics::v202309::AgentResults& agents(int index) const;
  ::kentik::synthetics::v202309::AgentResults* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentResults >&
      agents() const;

  // string test_id = 1[json_name = "testId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_test_id();
  const std::string& test_id() const;
  void set_test_id(const std::string& value);
  void set_test_id(std::string&& value);
  void set_test_id(const char* value);
  void set_test_id(const char* value, size_t size);
  std::string* mutable_test_id();
  std::string* release_test_id();
  void set_allocated_test_id(std::string* test_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_test_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_test_id(
      std::string* test_id);
  private:
  const std::string& _internal_test_id() const;
  void _internal_set_test_id(const std::string& value);
  std::string* _internal_mutable_test_id();
  public:

  // string health = 3[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_health();
  const std::string& health() const;
  void set_health(const std::string& value);
  void set_health(std::string&& value);
  void set_health(const char* value);
  void set_health(const char* value, size_t size);
  std::string* mutable_health();
  std::string* release_health();
  void set_allocated_health(std::string* health);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_health();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_health(
      std::string* health);
  private:
  const std::string& _internal_health() const;
  void _internal_set_health(const std::string& value);
  std::string* _internal_mutable_health();
  public:

  // .google.protobuf.Timestamp time = 2[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.TestResults)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentResults > agents_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr test_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr health_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Stats PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.Stats) */ {
 public:
  inline Stats() : Stats(nullptr) {};
  virtual ~Stats();

  Stats(const Stats& from);
  Stats(Stats&& from) noexcept
    : Stats() {
    *this = ::std::move(from);
  }

  inline Stats& operator=(const Stats& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stats& operator=(Stats&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stats& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stats* internal_default_instance() {
    return reinterpret_cast<const Stats*>(
               &_Stats_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(Stats& a, Stats& b) {
    a.Swap(&b);
  }
  inline void Swap(Stats* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stats* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stats* New() const final {
    return CreateMaybeMessage<Stats>(nullptr);
  }

  Stats* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stats>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stats& from);
  void MergeFrom(const Stats& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stats* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.Stats";
  }
  protected:
  explicit Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAverageFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // int32 average = 1[json_name = "average", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_average();
  ::PROTOBUF_NAMESPACE_ID::int32 average() const;
  void set_average(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_average() const;
  void _internal_set_average(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 min = 2[json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_min();
  ::PROTOBUF_NAMESPACE_ID::int32 min() const;
  void set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min() const;
  void _internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max = 3[json_name = "max", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max();
  ::PROTOBUF_NAMESPACE_ID::int32 max() const;
  void set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max() const;
  void _internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.Stats)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 average_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Location PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.Location) */ {
 public:
  inline Location() : Location(nullptr) {};
  virtual ~Location();

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return CreateMaybeMessage<Location>(nullptr);
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryFieldNumber = 1,
    kRegionFieldNumber = 2,
    kCityFieldNumber = 3,
    kLatitudeFieldNumber = 8,
    kLongitudeFieldNumber = 9,
  };
  // string country = 1[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // string region = 2[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_region();
  const std::string& region() const;
  void set_region(const std::string& value);
  void set_region(std::string&& value);
  void set_region(const char* value);
  void set_region(const char* value, size_t size);
  std::string* mutable_region();
  std::string* release_region();
  void set_allocated_region(std::string* region);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_region();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_region(
      std::string* region);
  private:
  const std::string& _internal_region() const;
  void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string city = 3[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_city();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_city(
      std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // double latitude = 8[json_name = "latitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 9[json_name = "longitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class NetNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.NetNode) */ {
 public:
  inline NetNode() : NetNode(nullptr) {};
  virtual ~NetNode();

  NetNode(const NetNode& from);
  NetNode(NetNode&& from) noexcept
    : NetNode() {
    *this = ::std::move(from);
  }

  inline NetNode& operator=(const NetNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetNode& operator=(NetNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetNode* internal_default_instance() {
    return reinterpret_cast<const NetNode*>(
               &_NetNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(NetNode& a, NetNode& b) {
    a.Swap(&b);
  }
  inline void Swap(NetNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetNode* New() const final {
    return CreateMaybeMessage<NetNode>(nullptr);
  }

  NetNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetNode& from);
  void MergeFrom(const NetNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.NetNode";
  }
  protected:
  explicit NetNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kAsNameFieldNumber = 4,
    kDnsNameFieldNumber = 6,
    kDeviceIdFieldNumber = 7,
    kSiteIdFieldNumber = 8,
    kLocationFieldNumber = 5,
    kAsnFieldNumber = 3,
  };
  // string ip = 2[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string as_name = 4[json_name = "asName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_as_name();
  const std::string& as_name() const;
  void set_as_name(const std::string& value);
  void set_as_name(std::string&& value);
  void set_as_name(const char* value);
  void set_as_name(const char* value, size_t size);
  std::string* mutable_as_name();
  std::string* release_as_name();
  void set_allocated_as_name(std::string* as_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_as_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_as_name(
      std::string* as_name);
  private:
  const std::string& _internal_as_name() const;
  void _internal_set_as_name(const std::string& value);
  std::string* _internal_mutable_as_name();
  public:

  // string dns_name = 6[json_name = "dnsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_dns_name();
  const std::string& dns_name() const;
  void set_dns_name(const std::string& value);
  void set_dns_name(std::string&& value);
  void set_dns_name(const char* value);
  void set_dns_name(const char* value, size_t size);
  std::string* mutable_dns_name();
  std::string* release_dns_name();
  void set_allocated_dns_name(std::string* dns_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dns_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dns_name(
      std::string* dns_name);
  private:
  const std::string& _internal_dns_name() const;
  void _internal_set_dns_name(const std::string& value);
  std::string* _internal_mutable_dns_name();
  public:

  // string device_id = 7[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_device_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_device_id(
      std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string site_id = 8[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_site_id();
  const std::string& site_id() const;
  void set_site_id(const std::string& value);
  void set_site_id(std::string&& value);
  void set_site_id(const char* value);
  void set_site_id(const char* value, size_t size);
  std::string* mutable_site_id();
  std::string* release_site_id();
  void set_allocated_site_id(std::string* site_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_id(
      std::string* site_id);
  private:
  const std::string& _internal_site_id() const;
  void _internal_set_site_id(const std::string& value);
  std::string* _internal_mutable_site_id();
  public:

  // .kentik.synthetics.v202309.Location location = 5[json_name = "location", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::kentik::synthetics::v202309::Location& location() const;
  ::kentik::synthetics::v202309::Location* release_location();
  ::kentik::synthetics::v202309::Location* mutable_location();
  void set_allocated_location(::kentik::synthetics::v202309::Location* location);
  private:
  const ::kentik::synthetics::v202309::Location& _internal_location() const;
  ::kentik::synthetics::v202309::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::kentik::synthetics::v202309::Location* location);
  ::kentik::synthetics::v202309::Location* unsafe_arena_release_location();

  // uint32 asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.NetNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr as_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dns_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_id_;
  ::kentik::synthetics::v202309::Location* location_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class TraceHop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.TraceHop) */ {
 public:
  inline TraceHop() : TraceHop(nullptr) {};
  virtual ~TraceHop();

  TraceHop(const TraceHop& from);
  TraceHop(TraceHop&& from) noexcept
    : TraceHop() {
    *this = ::std::move(from);
  }

  inline TraceHop& operator=(const TraceHop& from) {
    CopyFrom(from);
    return *this;
  }
  inline TraceHop& operator=(TraceHop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TraceHop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TraceHop* internal_default_instance() {
    return reinterpret_cast<const TraceHop*>(
               &_TraceHop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TraceHop& a, TraceHop& b) {
    a.Swap(&b);
  }
  inline void Swap(TraceHop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TraceHop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TraceHop* New() const final {
    return CreateMaybeMessage<TraceHop>(nullptr);
  }

  TraceHop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TraceHop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TraceHop& from);
  void MergeFrom(const TraceHop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TraceHop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.TraceHop";
  }
  protected:
  explicit TraceHop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 5,
    kLatencyFieldNumber = 3,
  };
  // string node_id = 5[json_name = "nodeId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_node_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_node_id(
      std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // int32 latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_latency();
  ::PROTOBUF_NAMESPACE_ID::int32 latency() const;
  void set_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_latency() const;
  void _internal_set_latency(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.TraceHop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 latency_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class PathTrace PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.PathTrace) */ {
 public:
  inline PathTrace() : PathTrace(nullptr) {};
  virtual ~PathTrace();

  PathTrace(const PathTrace& from);
  PathTrace(PathTrace&& from) noexcept
    : PathTrace() {
    *this = ::std::move(from);
  }

  inline PathTrace& operator=(const PathTrace& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathTrace& operator=(PathTrace&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PathTrace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PathTrace* internal_default_instance() {
    return reinterpret_cast<const PathTrace*>(
               &_PathTrace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PathTrace& a, PathTrace& b) {
    a.Swap(&b);
  }
  inline void Swap(PathTrace* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathTrace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PathTrace* New() const final {
    return CreateMaybeMessage<PathTrace>(nullptr);
  }

  PathTrace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PathTrace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PathTrace& from);
  void MergeFrom(const PathTrace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathTrace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.PathTrace";
  }
  protected:
  explicit PathTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsPathFieldNumber = 1,
    kHopsFieldNumber = 6,
    kIsCompleteFieldNumber = 2,
  };
  // repeated int32 as_path = 1[json_name = "asPath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int as_path_size() const;
  private:
  int _internal_as_path_size() const;
  public:
  void clear_as_path();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_as_path(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_as_path() const;
  void _internal_add_as_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_as_path();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 as_path(int index) const;
  void set_as_path(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_as_path(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      as_path() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_as_path();

  // repeated .kentik.synthetics.v202309.TraceHop hops = 6[json_name = "hops", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int hops_size() const;
  private:
  int _internal_hops_size() const;
  public:
  void clear_hops();
  ::kentik::synthetics::v202309::TraceHop* mutable_hops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TraceHop >*
      mutable_hops();
  private:
  const ::kentik::synthetics::v202309::TraceHop& _internal_hops(int index) const;
  ::kentik::synthetics::v202309::TraceHop* _internal_add_hops();
  public:
  const ::kentik::synthetics::v202309::TraceHop& hops(int index) const;
  ::kentik::synthetics::v202309::TraceHop* add_hops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TraceHop >&
      hops() const;

  // bool is_complete = 2[json_name = "isComplete", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_is_complete();
  bool is_complete() const;
  void set_is_complete(bool value);
  private:
  bool _internal_is_complete() const;
  void _internal_set_is_complete(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.PathTrace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > as_path_;
  mutable std::atomic<int> _as_path_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TraceHop > hops_;
  bool is_complete_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class Path PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.Path) */ {
 public:
  inline Path() : Path(nullptr) {};
  virtual ~Path();

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTracesFieldNumber = 8,
    kAgentIdFieldNumber = 1,
    kTargetIpFieldNumber = 3,
    kHopCountFieldNumber = 4,
    kTimeFieldNumber = 9,
    kMaxAsPathLengthFieldNumber = 7,
  };
  // repeated .kentik.synthetics.v202309.PathTrace traces = 8[json_name = "traces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int traces_size() const;
  private:
  int _internal_traces_size() const;
  public:
  void clear_traces();
  ::kentik::synthetics::v202309::PathTrace* mutable_traces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::PathTrace >*
      mutable_traces();
  private:
  const ::kentik::synthetics::v202309::PathTrace& _internal_traces(int index) const;
  ::kentik::synthetics::v202309::PathTrace* _internal_add_traces();
  public:
  const ::kentik::synthetics::v202309::PathTrace& traces(int index) const;
  ::kentik::synthetics::v202309::PathTrace* add_traces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::PathTrace >&
      traces() const;

  // string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_agent_id();
  const std::string& agent_id() const;
  void set_agent_id(const std::string& value);
  void set_agent_id(std::string&& value);
  void set_agent_id(const char* value);
  void set_agent_id(const char* value, size_t size);
  std::string* mutable_agent_id();
  std::string* release_agent_id();
  void set_allocated_agent_id(std::string* agent_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_agent_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_agent_id(
      std::string* agent_id);
  private:
  const std::string& _internal_agent_id() const;
  void _internal_set_agent_id(const std::string& value);
  std::string* _internal_mutable_agent_id();
  public:

  // string target_ip = 3[json_name = "targetIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_target_ip();
  const std::string& target_ip() const;
  void set_target_ip(const std::string& value);
  void set_target_ip(std::string&& value);
  void set_target_ip(const char* value);
  void set_target_ip(const char* value, size_t size);
  std::string* mutable_target_ip();
  std::string* release_target_ip();
  void set_allocated_target_ip(std::string* target_ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_target_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_target_ip(
      std::string* target_ip);
  private:
  const std::string& _internal_target_ip() const;
  void _internal_set_target_ip(const std::string& value);
  std::string* _internal_mutable_target_ip();
  public:

  // .kentik.synthetics.v202309.Stats hop_count = 4[json_name = "hopCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_hop_count() const;
  private:
  bool _internal_has_hop_count() const;
  public:
  void clear_hop_count();
  const ::kentik::synthetics::v202309::Stats& hop_count() const;
  ::kentik::synthetics::v202309::Stats* release_hop_count();
  ::kentik::synthetics::v202309::Stats* mutable_hop_count();
  void set_allocated_hop_count(::kentik::synthetics::v202309::Stats* hop_count);
  private:
  const ::kentik::synthetics::v202309::Stats& _internal_hop_count() const;
  ::kentik::synthetics::v202309::Stats* _internal_mutable_hop_count();
  public:
  void unsafe_arena_set_allocated_hop_count(
      ::kentik::synthetics::v202309::Stats* hop_count);
  ::kentik::synthetics::v202309::Stats* unsafe_arena_release_hop_count();

  // .google.protobuf.Timestamp time = 9[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // int32 max_as_path_length = 7[json_name = "maxAsPathLength", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_max_as_path_length();
  ::PROTOBUF_NAMESPACE_ID::int32 max_as_path_length() const;
  void set_max_as_path_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_as_path_length() const;
  void _internal_set_max_as_path_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::PathTrace > traces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr agent_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_ip_;
  ::kentik::synthetics::v202309::Stats* hop_count_;
  PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_as_path_length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetResultsForTestsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.GetResultsForTestsRequest) */ {
 public:
  inline GetResultsForTestsRequest() : GetResultsForTestsRequest(nullptr) {};
  virtual ~GetResultsForTestsRequest();

  GetResultsForTestsRequest(const GetResultsForTestsRequest& from);
  GetResultsForTestsRequest(GetResultsForTestsRequest&& from) noexcept
    : GetResultsForTestsRequest() {
    *this = ::std::move(from);
  }

  inline GetResultsForTestsRequest& operator=(const GetResultsForTestsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResultsForTestsRequest& operator=(GetResultsForTestsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResultsForTestsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResultsForTestsRequest* internal_default_instance() {
    return reinterpret_cast<const GetResultsForTestsRequest*>(
               &_GetResultsForTestsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetResultsForTestsRequest& a, GetResultsForTestsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResultsForTestsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResultsForTestsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResultsForTestsRequest* New() const final {
    return CreateMaybeMessage<GetResultsForTestsRequest>(nullptr);
  }

  GetResultsForTestsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResultsForTestsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResultsForTestsRequest& from);
  void MergeFrom(const GetResultsForTestsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResultsForTestsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.GetResultsForTestsRequest";
  }
  protected:
  explicit GetResultsForTestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdsFieldNumber = 1,
    kAgentIdsFieldNumber = 4,
    kTargetsFieldNumber = 5,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
    kAggregateFieldNumber = 6,
  };
  // repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int ids_size() const;
  private:
  int _internal_ids_size() const;
  public:
  void clear_ids();
  const std::string& ids(int index) const;
  std::string* mutable_ids(int index);
  void set_ids(int index, const std::string& value);
  void set_ids(int index, std::string&& value);
  void set_ids(int index, const char* value);
  void set_ids(int index, const char* value, size_t size);
  std::string* add_ids();
  void add_ids(const std::string& value);
  void add_ids(std::string&& value);
  void add_ids(const char* value);
  void add_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ids();
  private:
  const std::string& _internal_ids(int index) const;
  std::string* _internal_add_ids();
  public:

  // repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  const std::string& agent_ids(int index) const;
  std::string* mutable_agent_ids(int index);
  void set_agent_ids(int index, const std::string& value);
  void set_agent_ids(int index, std::string&& value);
  void set_agent_ids(int index, const char* value);
  void set_agent_ids(int index, const char* value, size_t size);
  std::string* add_agent_ids();
  void add_agent_ids(const std::string& value);
  void add_agent_ids(std::string&& value);
  void add_agent_ids(const char* value);
  void add_agent_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_agent_ids();
  private:
  const std::string& _internal_agent_ids(int index) const;
  std::string* _internal_add_agent_ids();
  public:

  // repeated string targets = 5[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int targets_size() const;
  private:
  int _internal_targets_size() const;
  public:
  void clear_targets();
  const std::string& targets(int index) const;
  std::string* mutable_targets(int index);
  void set_targets(int index, const std::string& value);
  void set_targets(int index, std::string&& value);
  void set_targets(int index, const char* value);
  void set_targets(int index, const char* value, size_t size);
  std::string* add_targets();
  void add_targets(const std::string& value);
  void add_targets(std::string&& value);
  void add_targets(const char* value);
  void add_targets(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& targets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_targets();
  private:
  const std::string& _internal_targets(int index) const;
  std::string* _internal_add_targets();
  public:

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // bool aggregate = 6[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_aggregate();
  bool aggregate() const;
  void set_aggregate(bool value);
  private:
  bool _internal_aggregate() const;
  void _internal_set_aggregate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.GetResultsForTestsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> agent_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> targets_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  bool aggregate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetResultsForTestsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.GetResultsForTestsResponse) */ {
 public:
  inline GetResultsForTestsResponse() : GetResultsForTestsResponse(nullptr) {};
  virtual ~GetResultsForTestsResponse();

  GetResultsForTestsResponse(const GetResultsForTestsResponse& from);
  GetResultsForTestsResponse(GetResultsForTestsResponse&& from) noexcept
    : GetResultsForTestsResponse() {
    *this = ::std::move(from);
  }

  inline GetResultsForTestsResponse& operator=(const GetResultsForTestsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResultsForTestsResponse& operator=(GetResultsForTestsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetResultsForTestsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetResultsForTestsResponse* internal_default_instance() {
    return reinterpret_cast<const GetResultsForTestsResponse*>(
               &_GetResultsForTestsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetResultsForTestsResponse& a, GetResultsForTestsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResultsForTestsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResultsForTestsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetResultsForTestsResponse* New() const final {
    return CreateMaybeMessage<GetResultsForTestsResponse>(nullptr);
  }

  GetResultsForTestsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetResultsForTestsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetResultsForTestsResponse& from);
  void MergeFrom(const GetResultsForTestsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResultsForTestsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.GetResultsForTestsResponse";
  }
  protected:
  explicit GetResultsForTestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .kentik.synthetics.v202309.TestResults results = 1[json_name = "results"];
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::kentik::synthetics::v202309::TestResults* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TestResults >*
      mutable_results();
  private:
  const ::kentik::synthetics::v202309::TestResults& _internal_results(int index) const;
  ::kentik::synthetics::v202309::TestResults* _internal_add_results();
  public:
  const ::kentik::synthetics::v202309::TestResults& results(int index) const;
  ::kentik::synthetics::v202309::TestResults* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TestResults >&
      results() const;

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.GetResultsForTestsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TestResults > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetTraceForTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.GetTraceForTestRequest) */ {
 public:
  inline GetTraceForTestRequest() : GetTraceForTestRequest(nullptr) {};
  virtual ~GetTraceForTestRequest();

  GetTraceForTestRequest(const GetTraceForTestRequest& from);
  GetTraceForTestRequest(GetTraceForTestRequest&& from) noexcept
    : GetTraceForTestRequest() {
    *this = ::std::move(from);
  }

  inline GetTraceForTestRequest& operator=(const GetTraceForTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTraceForTestRequest& operator=(GetTraceForTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTraceForTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTraceForTestRequest* internal_default_instance() {
    return reinterpret_cast<const GetTraceForTestRequest*>(
               &_GetTraceForTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(GetTraceForTestRequest& a, GetTraceForTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTraceForTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTraceForTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTraceForTestRequest* New() const final {
    return CreateMaybeMessage<GetTraceForTestRequest>(nullptr);
  }

  GetTraceForTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTraceForTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTraceForTestRequest& from);
  void MergeFrom(const GetTraceForTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTraceForTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.GetTraceForTestRequest";
  }
  protected:
  explicit GetTraceForTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentIdsFieldNumber = 4,
    kTargetIpsFieldNumber = 5,
    kIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int agent_ids_size() const;
  private:
  int _internal_agent_ids_size() const;
  public:
  void clear_agent_ids();
  const std::string& agent_ids(int index) const;
  std::string* mutable_agent_ids(int index);
  void set_agent_ids(int index, const std::string& value);
  void set_agent_ids(int index, std::string&& value);
  void set_agent_ids(int index, const char* value);
  void set_agent_ids(int index, const char* value, size_t size);
  std::string* add_agent_ids();
  void add_agent_ids(const std::string& value);
  void add_agent_ids(std::string&& value);
  void add_agent_ids(const char* value);
  void add_agent_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& agent_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_agent_ids();
  private:
  const std::string& _internal_agent_ids(int index) const;
  std::string* _internal_add_agent_ids();
  public:

  // repeated string target_ips = 5[json_name = "targetIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int target_ips_size() const;
  private:
  int _internal_target_ips_size() const;
  public:
  void clear_target_ips();
  const std::string& target_ips(int index) const;
  std::string* mutable_target_ips(int index);
  void set_target_ips(int index, const std::string& value);
  void set_target_ips(int index, std::string&& value);
  void set_target_ips(int index, const char* value);
  void set_target_ips(int index, const char* value, size_t size);
  std::string* add_target_ips();
  void add_target_ips(const std::string& value);
  void add_target_ips(std::string&& value);
  void add_target_ips(const char* value);
  void add_target_ips(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& target_ips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_target_ips();
  private:
  const std::string& _internal_target_ips(int index) const;
  std::string* _internal_add_target_ips();
  public:

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  void clear_start_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  void clear_end_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.GetTraceForTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> agent_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> target_ips_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetTraceForTestResponse_NodesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetTraceForTestResponse_NodesEntry_DoNotUse, 
    std::string, ::kentik::synthetics::v202309::NetNode,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GetTraceForTestResponse_NodesEntry_DoNotUse, 
    std::string, ::kentik::synthetics::v202309::NetNode,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  GetTraceForTestResponse_NodesEntry_DoNotUse();
  GetTraceForTestResponse_NodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GetTraceForTestResponse_NodesEntry_DoNotUse& other);
  static const GetTraceForTestResponse_NodesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GetTraceForTestResponse_NodesEntry_DoNotUse*>(&_GetTraceForTestResponse_NodesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "kentik.synthetics.v202309.GetTraceForTestResponse.NodesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[39];
  }

  public:
};

// -------------------------------------------------------------------

class GetTraceForTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.GetTraceForTestResponse) */ {
 public:
  inline GetTraceForTestResponse() : GetTraceForTestResponse(nullptr) {};
  virtual ~GetTraceForTestResponse();

  GetTraceForTestResponse(const GetTraceForTestResponse& from);
  GetTraceForTestResponse(GetTraceForTestResponse&& from) noexcept
    : GetTraceForTestResponse() {
    *this = ::std::move(from);
  }

  inline GetTraceForTestResponse& operator=(const GetTraceForTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTraceForTestResponse& operator=(GetTraceForTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTraceForTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTraceForTestResponse* internal_default_instance() {
    return reinterpret_cast<const GetTraceForTestResponse*>(
               &_GetTraceForTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(GetTraceForTestResponse& a, GetTraceForTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTraceForTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTraceForTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTraceForTestResponse* New() const final {
    return CreateMaybeMessage<GetTraceForTestResponse>(nullptr);
  }

  GetTraceForTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTraceForTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTraceForTestResponse& from);
  void MergeFrom(const GetTraceForTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTraceForTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.GetTraceForTestResponse";
  }
  protected:
  explicit GetTraceForTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kPathsFieldNumber = 2,
  };
  // map<string, .kentik.synthetics.v202309.NetNode> nodes = 1[json_name = "nodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >&
      _internal_nodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >*
      _internal_mutable_nodes();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >&
      nodes() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >*
      mutable_nodes();

  // repeated .kentik.synthetics.v202309.Path paths = 2[json_name = "paths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::kentik::synthetics::v202309::Path* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Path >*
      mutable_paths();
  private:
  const ::kentik::synthetics::v202309::Path& _internal_paths(int index) const;
  ::kentik::synthetics::v202309::Path* _internal_add_paths();
  public:
  const ::kentik::synthetics::v202309::Path& paths(int index) const;
  ::kentik::synthetics::v202309::Path* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Path >&
      paths() const;

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.GetTraceForTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      GetTraceForTestResponse_NodesEntry_DoNotUse,
      std::string, ::kentik::synthetics::v202309::NetNode,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Path > paths_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ListAgentsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.ListAgentsRequest) */ {
 public:
  inline ListAgentsRequest() : ListAgentsRequest(nullptr) {};
  virtual ~ListAgentsRequest();

  ListAgentsRequest(const ListAgentsRequest& from);
  ListAgentsRequest(ListAgentsRequest&& from) noexcept
    : ListAgentsRequest() {
    *this = ::std::move(from);
  }

  inline ListAgentsRequest& operator=(const ListAgentsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAgentsRequest& operator=(ListAgentsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAgentsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAgentsRequest* internal_default_instance() {
    return reinterpret_cast<const ListAgentsRequest*>(
               &_ListAgentsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ListAgentsRequest& a, ListAgentsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAgentsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAgentsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAgentsRequest* New() const final {
    return CreateMaybeMessage<ListAgentsRequest>(nullptr);
  }

  ListAgentsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAgentsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAgentsRequest& from);
  void MergeFrom(const ListAgentsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAgentsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.ListAgentsRequest";
  }
  protected:
  explicit ListAgentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.ListAgentsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ListAgentsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.ListAgentsResponse) */ {
 public:
  inline ListAgentsResponse() : ListAgentsResponse(nullptr) {};
  virtual ~ListAgentsResponse();

  ListAgentsResponse(const ListAgentsResponse& from);
  ListAgentsResponse(ListAgentsResponse&& from) noexcept
    : ListAgentsResponse() {
    *this = ::std::move(from);
  }

  inline ListAgentsResponse& operator=(const ListAgentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListAgentsResponse& operator=(ListAgentsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListAgentsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListAgentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListAgentsResponse*>(
               &_ListAgentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ListAgentsResponse& a, ListAgentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListAgentsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListAgentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListAgentsResponse* New() const final {
    return CreateMaybeMessage<ListAgentsResponse>(nullptr);
  }

  ListAgentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListAgentsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListAgentsResponse& from);
  void MergeFrom(const ListAgentsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListAgentsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.ListAgentsResponse";
  }
  protected:
  explicit ListAgentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.synthetics.v202309.Agent agents = 1[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int agents_size() const;
  private:
  int _internal_agents_size() const;
  public:
  void clear_agents();
  ::kentik::synthetics::v202309::Agent* mutable_agents(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Agent >*
      mutable_agents();
  private:
  const ::kentik::synthetics::v202309::Agent& _internal_agents(int index) const;
  ::kentik::synthetics::v202309::Agent* _internal_add_agents();
  public:
  const ::kentik::synthetics::v202309::Agent& agents(int index) const;
  ::kentik::synthetics::v202309::Agent* add_agents();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Agent >&
      agents() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.ListAgentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Agent > agents_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetAgentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.GetAgentRequest) */ {
 public:
  inline GetAgentRequest() : GetAgentRequest(nullptr) {};
  virtual ~GetAgentRequest();

  GetAgentRequest(const GetAgentRequest& from);
  GetAgentRequest(GetAgentRequest&& from) noexcept
    : GetAgentRequest() {
    *this = ::std::move(from);
  }

  inline GetAgentRequest& operator=(const GetAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentRequest& operator=(GetAgentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAgentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAgentRequest* internal_default_instance() {
    return reinterpret_cast<const GetAgentRequest*>(
               &_GetAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetAgentRequest& a, GetAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAgentRequest* New() const final {
    return CreateMaybeMessage<GetAgentRequest>(nullptr);
  }

  GetAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAgentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAgentRequest& from);
  void MergeFrom(const GetAgentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.GetAgentRequest";
  }
  protected:
  explicit GetAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.GetAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetAgentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.GetAgentResponse) */ {
 public:
  inline GetAgentResponse() : GetAgentResponse(nullptr) {};
  virtual ~GetAgentResponse();

  GetAgentResponse(const GetAgentResponse& from);
  GetAgentResponse(GetAgentResponse&& from) noexcept
    : GetAgentResponse() {
    *this = ::std::move(from);
  }

  inline GetAgentResponse& operator=(const GetAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentResponse& operator=(GetAgentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAgentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAgentResponse* internal_default_instance() {
    return reinterpret_cast<const GetAgentResponse*>(
               &_GetAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetAgentResponse& a, GetAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAgentResponse* New() const final {
    return CreateMaybeMessage<GetAgentResponse>(nullptr);
  }

  GetAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAgentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAgentResponse& from);
  void MergeFrom(const GetAgentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.GetAgentResponse";
  }
  protected:
  explicit GetAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202309::Agent& agent() const;
  ::kentik::synthetics::v202309::Agent* release_agent();
  ::kentik::synthetics::v202309::Agent* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202309::Agent* agent);
  private:
  const ::kentik::synthetics::v202309::Agent& _internal_agent() const;
  ::kentik::synthetics::v202309::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202309::Agent* agent);
  ::kentik::synthetics::v202309::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.GetAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202309::Agent* agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class UpdateAgentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.UpdateAgentRequest) */ {
 public:
  inline UpdateAgentRequest() : UpdateAgentRequest(nullptr) {};
  virtual ~UpdateAgentRequest();

  UpdateAgentRequest(const UpdateAgentRequest& from);
  UpdateAgentRequest(UpdateAgentRequest&& from) noexcept
    : UpdateAgentRequest() {
    *this = ::std::move(from);
  }

  inline UpdateAgentRequest& operator=(const UpdateAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAgentRequest& operator=(UpdateAgentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAgentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAgentRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateAgentRequest*>(
               &_UpdateAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(UpdateAgentRequest& a, UpdateAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAgentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAgentRequest* New() const final {
    return CreateMaybeMessage<UpdateAgentRequest>(nullptr);
  }

  UpdateAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAgentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAgentRequest& from);
  void MergeFrom(const UpdateAgentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAgentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.UpdateAgentRequest";
  }
  protected:
  explicit UpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202309::Agent& agent() const;
  ::kentik::synthetics::v202309::Agent* release_agent();
  ::kentik::synthetics::v202309::Agent* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202309::Agent* agent);
  private:
  const ::kentik::synthetics::v202309::Agent& _internal_agent() const;
  ::kentik::synthetics::v202309::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202309::Agent* agent);
  ::kentik::synthetics::v202309::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.UpdateAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202309::Agent* agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class UpdateAgentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.UpdateAgentResponse) */ {
 public:
  inline UpdateAgentResponse() : UpdateAgentResponse(nullptr) {};
  virtual ~UpdateAgentResponse();

  UpdateAgentResponse(const UpdateAgentResponse& from);
  UpdateAgentResponse(UpdateAgentResponse&& from) noexcept
    : UpdateAgentResponse() {
    *this = ::std::move(from);
  }

  inline UpdateAgentResponse& operator=(const UpdateAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateAgentResponse& operator=(UpdateAgentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateAgentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateAgentResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateAgentResponse*>(
               &_UpdateAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(UpdateAgentResponse& a, UpdateAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateAgentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateAgentResponse* New() const final {
    return CreateMaybeMessage<UpdateAgentResponse>(nullptr);
  }

  UpdateAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateAgentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateAgentResponse& from);
  void MergeFrom(const UpdateAgentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateAgentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.UpdateAgentResponse";
  }
  protected:
  explicit UpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgentFieldNumber = 1,
  };
  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_agent() const;
  private:
  bool _internal_has_agent() const;
  public:
  void clear_agent();
  const ::kentik::synthetics::v202309::Agent& agent() const;
  ::kentik::synthetics::v202309::Agent* release_agent();
  ::kentik::synthetics::v202309::Agent* mutable_agent();
  void set_allocated_agent(::kentik::synthetics::v202309::Agent* agent);
  private:
  const ::kentik::synthetics::v202309::Agent& _internal_agent() const;
  ::kentik::synthetics::v202309::Agent* _internal_mutable_agent();
  public:
  void unsafe_arena_set_allocated_agent(
      ::kentik::synthetics::v202309::Agent* agent);
  ::kentik::synthetics::v202309::Agent* unsafe_arena_release_agent();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.UpdateAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202309::Agent* agent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DeleteAgentRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.DeleteAgentRequest) */ {
 public:
  inline DeleteAgentRequest() : DeleteAgentRequest(nullptr) {};
  virtual ~DeleteAgentRequest();

  DeleteAgentRequest(const DeleteAgentRequest& from);
  DeleteAgentRequest(DeleteAgentRequest&& from) noexcept
    : DeleteAgentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteAgentRequest& operator=(const DeleteAgentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAgentRequest& operator=(DeleteAgentRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAgentRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAgentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteAgentRequest*>(
               &_DeleteAgentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(DeleteAgentRequest& a, DeleteAgentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAgentRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAgentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAgentRequest* New() const final {
    return CreateMaybeMessage<DeleteAgentRequest>(nullptr);
  }

  DeleteAgentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAgentRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAgentRequest& from);
  void MergeFrom(const DeleteAgentRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAgentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.DeleteAgentRequest";
  }
  protected:
  explicit DeleteAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.DeleteAgentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DeleteAgentResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.DeleteAgentResponse) */ {
 public:
  inline DeleteAgentResponse() : DeleteAgentResponse(nullptr) {};
  virtual ~DeleteAgentResponse();

  DeleteAgentResponse(const DeleteAgentResponse& from);
  DeleteAgentResponse(DeleteAgentResponse&& from) noexcept
    : DeleteAgentResponse() {
    *this = ::std::move(from);
  }

  inline DeleteAgentResponse& operator=(const DeleteAgentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteAgentResponse& operator=(DeleteAgentResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteAgentResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteAgentResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteAgentResponse*>(
               &_DeleteAgentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(DeleteAgentResponse& a, DeleteAgentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteAgentResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteAgentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteAgentResponse* New() const final {
    return CreateMaybeMessage<DeleteAgentResponse>(nullptr);
  }

  DeleteAgentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteAgentResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteAgentResponse& from);
  void MergeFrom(const DeleteAgentResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteAgentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.DeleteAgentResponse";
  }
  protected:
  explicit DeleteAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.DeleteAgentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ListTestsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.ListTestsRequest) */ {
 public:
  inline ListTestsRequest() : ListTestsRequest(nullptr) {};
  virtual ~ListTestsRequest();

  ListTestsRequest(const ListTestsRequest& from);
  ListTestsRequest(ListTestsRequest&& from) noexcept
    : ListTestsRequest() {
    *this = ::std::move(from);
  }

  inline ListTestsRequest& operator=(const ListTestsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTestsRequest& operator=(ListTestsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTestsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTestsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTestsRequest*>(
               &_ListTestsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ListTestsRequest& a, ListTestsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTestsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTestsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTestsRequest* New() const final {
    return CreateMaybeMessage<ListTestsRequest>(nullptr);
  }

  ListTestsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTestsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTestsRequest& from);
  void MergeFrom(const ListTestsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTestsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.ListTestsRequest";
  }
  protected:
  explicit ListTestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.ListTestsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class ListTestsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.ListTestsResponse) */ {
 public:
  inline ListTestsResponse() : ListTestsResponse(nullptr) {};
  virtual ~ListTestsResponse();

  ListTestsResponse(const ListTestsResponse& from);
  ListTestsResponse(ListTestsResponse&& from) noexcept
    : ListTestsResponse() {
    *this = ::std::move(from);
  }

  inline ListTestsResponse& operator=(const ListTestsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTestsResponse& operator=(ListTestsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListTestsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTestsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTestsResponse*>(
               &_ListTestsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ListTestsResponse& a, ListTestsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTestsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTestsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTestsResponse* New() const final {
    return CreateMaybeMessage<ListTestsResponse>(nullptr);
  }

  ListTestsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTestsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListTestsResponse& from);
  void MergeFrom(const ListTestsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTestsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.ListTestsResponse";
  }
  protected:
  explicit ListTestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.synthetics.v202309.Test tests = 1[json_name = "tests", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int tests_size() const;
  private:
  int _internal_tests_size() const;
  public:
  void clear_tests();
  ::kentik::synthetics::v202309::Test* mutable_tests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Test >*
      mutable_tests();
  private:
  const ::kentik::synthetics::v202309::Test& _internal_tests(int index) const;
  ::kentik::synthetics::v202309::Test* _internal_add_tests();
  public:
  const ::kentik::synthetics::v202309::Test& tests(int index) const;
  ::kentik::synthetics::v202309::Test* add_tests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Test >&
      tests() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.ListTestsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Test > tests_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class CreateTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.CreateTestRequest) */ {
 public:
  inline CreateTestRequest() : CreateTestRequest(nullptr) {};
  virtual ~CreateTestRequest();

  CreateTestRequest(const CreateTestRequest& from);
  CreateTestRequest(CreateTestRequest&& from) noexcept
    : CreateTestRequest() {
    *this = ::std::move(from);
  }

  inline CreateTestRequest& operator=(const CreateTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTestRequest& operator=(CreateTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTestRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTestRequest*>(
               &_CreateTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CreateTestRequest& a, CreateTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTestRequest* New() const final {
    return CreateMaybeMessage<CreateTestRequest>(nullptr);
  }

  CreateTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTestRequest& from);
  void MergeFrom(const CreateTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.CreateTestRequest";
  }
  protected:
  explicit CreateTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202309::Test& test() const;
  ::kentik::synthetics::v202309::Test* release_test();
  ::kentik::synthetics::v202309::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202309::Test* test);
  private:
  const ::kentik::synthetics::v202309::Test& _internal_test() const;
  ::kentik::synthetics::v202309::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202309::Test* test);
  ::kentik::synthetics::v202309::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.CreateTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202309::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class CreateTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.CreateTestResponse) */ {
 public:
  inline CreateTestResponse() : CreateTestResponse(nullptr) {};
  virtual ~CreateTestResponse();

  CreateTestResponse(const CreateTestResponse& from);
  CreateTestResponse(CreateTestResponse&& from) noexcept
    : CreateTestResponse() {
    *this = ::std::move(from);
  }

  inline CreateTestResponse& operator=(const CreateTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTestResponse& operator=(CreateTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTestResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTestResponse*>(
               &_CreateTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CreateTestResponse& a, CreateTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTestResponse* New() const final {
    return CreateMaybeMessage<CreateTestResponse>(nullptr);
  }

  CreateTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateTestResponse& from);
  void MergeFrom(const CreateTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.CreateTestResponse";
  }
  protected:
  explicit CreateTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202309::Test& test() const;
  ::kentik::synthetics::v202309::Test* release_test();
  ::kentik::synthetics::v202309::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202309::Test* test);
  private:
  const ::kentik::synthetics::v202309::Test& _internal_test() const;
  ::kentik::synthetics::v202309::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202309::Test* test);
  ::kentik::synthetics::v202309::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.CreateTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202309::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.GetTestRequest) */ {
 public:
  inline GetTestRequest() : GetTestRequest(nullptr) {};
  virtual ~GetTestRequest();

  GetTestRequest(const GetTestRequest& from);
  GetTestRequest(GetTestRequest&& from) noexcept
    : GetTestRequest() {
    *this = ::std::move(from);
  }

  inline GetTestRequest& operator=(const GetTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTestRequest& operator=(GetTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTestRequest* internal_default_instance() {
    return reinterpret_cast<const GetTestRequest*>(
               &_GetTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetTestRequest& a, GetTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTestRequest* New() const final {
    return CreateMaybeMessage<GetTestRequest>(nullptr);
  }

  GetTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTestRequest& from);
  void MergeFrom(const GetTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.GetTestRequest";
  }
  protected:
  explicit GetTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.GetTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class GetTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.GetTestResponse) */ {
 public:
  inline GetTestResponse() : GetTestResponse(nullptr) {};
  virtual ~GetTestResponse();

  GetTestResponse(const GetTestResponse& from);
  GetTestResponse(GetTestResponse&& from) noexcept
    : GetTestResponse() {
    *this = ::std::move(from);
  }

  inline GetTestResponse& operator=(const GetTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTestResponse& operator=(GetTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTestResponse* internal_default_instance() {
    return reinterpret_cast<const GetTestResponse*>(
               &_GetTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(GetTestResponse& a, GetTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTestResponse* New() const final {
    return CreateMaybeMessage<GetTestResponse>(nullptr);
  }

  GetTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTestResponse& from);
  void MergeFrom(const GetTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.GetTestResponse";
  }
  protected:
  explicit GetTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202309::Test& test() const;
  ::kentik::synthetics::v202309::Test* release_test();
  ::kentik::synthetics::v202309::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202309::Test* test);
  private:
  const ::kentik::synthetics::v202309::Test& _internal_test() const;
  ::kentik::synthetics::v202309::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202309::Test* test);
  ::kentik::synthetics::v202309::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.GetTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202309::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class UpdateTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.UpdateTestRequest) */ {
 public:
  inline UpdateTestRequest() : UpdateTestRequest(nullptr) {};
  virtual ~UpdateTestRequest();

  UpdateTestRequest(const UpdateTestRequest& from);
  UpdateTestRequest(UpdateTestRequest&& from) noexcept
    : UpdateTestRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTestRequest& operator=(const UpdateTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTestRequest& operator=(UpdateTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTestRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTestRequest*>(
               &_UpdateTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(UpdateTestRequest& a, UpdateTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTestRequest* New() const final {
    return CreateMaybeMessage<UpdateTestRequest>(nullptr);
  }

  UpdateTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTestRequest& from);
  void MergeFrom(const UpdateTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.UpdateTestRequest";
  }
  protected:
  explicit UpdateTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202309::Test& test() const;
  ::kentik::synthetics::v202309::Test* release_test();
  ::kentik::synthetics::v202309::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202309::Test* test);
  private:
  const ::kentik::synthetics::v202309::Test& _internal_test() const;
  ::kentik::synthetics::v202309::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202309::Test* test);
  ::kentik::synthetics::v202309::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.UpdateTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202309::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class UpdateTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.UpdateTestResponse) */ {
 public:
  inline UpdateTestResponse() : UpdateTestResponse(nullptr) {};
  virtual ~UpdateTestResponse();

  UpdateTestResponse(const UpdateTestResponse& from);
  UpdateTestResponse(UpdateTestResponse&& from) noexcept
    : UpdateTestResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTestResponse& operator=(const UpdateTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateTestResponse& operator=(UpdateTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTestResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTestResponse*>(
               &_UpdateTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(UpdateTestResponse& a, UpdateTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateTestResponse* New() const final {
    return CreateMaybeMessage<UpdateTestResponse>(nullptr);
  }

  UpdateTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateTestResponse& from);
  void MergeFrom(const UpdateTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.UpdateTestResponse";
  }
  protected:
  explicit UpdateTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTestFieldNumber = 1,
  };
  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_test() const;
  private:
  bool _internal_has_test() const;
  public:
  void clear_test();
  const ::kentik::synthetics::v202309::Test& test() const;
  ::kentik::synthetics::v202309::Test* release_test();
  ::kentik::synthetics::v202309::Test* mutable_test();
  void set_allocated_test(::kentik::synthetics::v202309::Test* test);
  private:
  const ::kentik::synthetics::v202309::Test& _internal_test() const;
  ::kentik::synthetics::v202309::Test* _internal_mutable_test();
  public:
  void unsafe_arena_set_allocated_test(
      ::kentik::synthetics::v202309::Test* test);
  ::kentik::synthetics::v202309::Test* unsafe_arena_release_test();

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.UpdateTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::synthetics::v202309::Test* test_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DeleteTestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.DeleteTestRequest) */ {
 public:
  inline DeleteTestRequest() : DeleteTestRequest(nullptr) {};
  virtual ~DeleteTestRequest();

  DeleteTestRequest(const DeleteTestRequest& from);
  DeleteTestRequest(DeleteTestRequest&& from) noexcept
    : DeleteTestRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTestRequest& operator=(const DeleteTestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTestRequest& operator=(DeleteTestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTestRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTestRequest*>(
               &_DeleteTestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(DeleteTestRequest& a, DeleteTestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTestRequest* New() const final {
    return CreateMaybeMessage<DeleteTestRequest>(nullptr);
  }

  DeleteTestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTestRequest& from);
  void MergeFrom(const DeleteTestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.DeleteTestRequest";
  }
  protected:
  explicit DeleteTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.DeleteTestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class DeleteTestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.DeleteTestResponse) */ {
 public:
  inline DeleteTestResponse() : DeleteTestResponse(nullptr) {};
  virtual ~DeleteTestResponse();

  DeleteTestResponse(const DeleteTestResponse& from);
  DeleteTestResponse(DeleteTestResponse&& from) noexcept
    : DeleteTestResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTestResponse& operator=(const DeleteTestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTestResponse& operator=(DeleteTestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteTestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTestResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTestResponse*>(
               &_DeleteTestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(DeleteTestResponse& a, DeleteTestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTestResponse* New() const final {
    return CreateMaybeMessage<DeleteTestResponse>(nullptr);
  }

  DeleteTestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteTestResponse& from);
  void MergeFrom(const DeleteTestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.DeleteTestResponse";
  }
  protected:
  explicit DeleteTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.DeleteTestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class SetTestStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.SetTestStatusRequest) */ {
 public:
  inline SetTestStatusRequest() : SetTestStatusRequest(nullptr) {};
  virtual ~SetTestStatusRequest();

  SetTestStatusRequest(const SetTestStatusRequest& from);
  SetTestStatusRequest(SetTestStatusRequest&& from) noexcept
    : SetTestStatusRequest() {
    *this = ::std::move(from);
  }

  inline SetTestStatusRequest& operator=(const SetTestStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTestStatusRequest& operator=(SetTestStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTestStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTestStatusRequest* internal_default_instance() {
    return reinterpret_cast<const SetTestStatusRequest*>(
               &_SetTestStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(SetTestStatusRequest& a, SetTestStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTestStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTestStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTestStatusRequest* New() const final {
    return CreateMaybeMessage<SetTestStatusRequest>(nullptr);
  }

  SetTestStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTestStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTestStatusRequest& from);
  void MergeFrom(const SetTestStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTestStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.SetTestStatusRequest";
  }
  protected:
  explicit SetTestStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .kentik.synthetics.v202309.TestStatus status = 2[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_status();
  ::kentik::synthetics::v202309::TestStatus status() const;
  void set_status(::kentik::synthetics::v202309::TestStatus value);
  private:
  ::kentik::synthetics::v202309::TestStatus _internal_status() const;
  void _internal_set_status(::kentik::synthetics::v202309::TestStatus value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.SetTestStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// -------------------------------------------------------------------

class SetTestStatusResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.synthetics.v202309.SetTestStatusResponse) */ {
 public:
  inline SetTestStatusResponse() : SetTestStatusResponse(nullptr) {};
  virtual ~SetTestStatusResponse();

  SetTestStatusResponse(const SetTestStatusResponse& from);
  SetTestStatusResponse(SetTestStatusResponse&& from) noexcept
    : SetTestStatusResponse() {
    *this = ::std::move(from);
  }

  inline SetTestStatusResponse& operator=(const SetTestStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTestStatusResponse& operator=(SetTestStatusResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetTestStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTestStatusResponse* internal_default_instance() {
    return reinterpret_cast<const SetTestStatusResponse*>(
               &_SetTestStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SetTestStatusResponse& a, SetTestStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTestStatusResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTestStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetTestStatusResponse* New() const final {
    return CreateMaybeMessage<SetTestStatusResponse>(nullptr);
  }

  SetTestStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetTestStatusResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetTestStatusResponse& from);
  void MergeFrom(const SetTestStatusResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTestStatusResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.synthetics.v202309.SetTestStatusResponse";
  }
  protected:
  explicit SetTestStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
    return ::descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.synthetics.v202309.SetTestStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Agent

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.id)
  return _internal_id();
}
inline void Agent::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.id)
}
inline std::string* Agent::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.id)
  return _internal_mutable_id();
}
inline const std::string& Agent::_internal_id() const {
  return id_.Get();
}
inline void Agent::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.id)
}
inline void Agent::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.id)
}
inline void Agent::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.id)
}
inline std::string* Agent::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.id)
}
inline std::string* Agent::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.id)
}

// string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_site_name() {
  site_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::site_name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.site_name)
  return _internal_site_name();
}
inline void Agent::set_site_name(const std::string& value) {
  _internal_set_site_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.site_name)
}
inline std::string* Agent::mutable_site_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.site_name)
  return _internal_mutable_site_name();
}
inline const std::string& Agent::_internal_site_name() const {
  return site_name_.Get();
}
inline void Agent::_internal_set_site_name(const std::string& value) {
  
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_site_name(std::string&& value) {
  
  site_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.site_name)
}
inline void Agent::set_site_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.site_name)
}
inline void Agent::set_site_name(const char* value,
    size_t size) {
  
  site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.site_name)
}
inline std::string* Agent::_internal_mutable_site_name() {
  
  return site_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_site_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.site_name)
  return site_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_site_name(std::string* site_name) {
  if (site_name != nullptr) {
    
  } else {
    
  }
  site_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.site_name)
}
inline std::string* Agent::unsafe_arena_release_site_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.site_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return site_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_site_name(
    std::string* site_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_name != nullptr) {
    
  } else {
    
  }
  site_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.site_name)
}

// .kentik.synthetics.v202309.AgentStatus status = 3[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_status() {
  status_ = 0;
}
inline ::kentik::synthetics::v202309::AgentStatus Agent::_internal_status() const {
  return static_cast< ::kentik::synthetics::v202309::AgentStatus >(status_);
}
inline ::kentik::synthetics::v202309::AgentStatus Agent::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.status)
  return _internal_status();
}
inline void Agent::_internal_set_status(::kentik::synthetics::v202309::AgentStatus value) {
  
  status_ = value;
}
inline void Agent::set_status(::kentik::synthetics::v202309::AgentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.status)
}

// string alias = 4[json_name = "alias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_alias() {
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::alias() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.alias)
  return _internal_alias();
}
inline void Agent::set_alias(const std::string& value) {
  _internal_set_alias(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.alias)
}
inline std::string* Agent::mutable_alias() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.alias)
  return _internal_mutable_alias();
}
inline const std::string& Agent::_internal_alias() const {
  return alias_.Get();
}
inline void Agent::_internal_set_alias(const std::string& value) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_alias(std::string&& value) {
  
  alias_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.alias)
}
inline void Agent::set_alias(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.alias)
}
inline void Agent::set_alias(const char* value,
    size_t size) {
  
  alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.alias)
}
inline std::string* Agent::_internal_mutable_alias() {
  
  return alias_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_alias() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.alias)
  return alias_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), alias,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.alias)
}
inline std::string* Agent::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.alias)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return alias_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_alias(
    std::string* alias) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (alias != nullptr) {
    
  } else {
    
  }
  alias_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      alias, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.alias)
}

// string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.type)
  return _internal_type();
}
inline void Agent::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.type)
}
inline std::string* Agent::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.type)
  return _internal_mutable_type();
}
inline const std::string& Agent::_internal_type() const {
  return type_.Get();
}
inline void Agent::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.type)
}
inline void Agent::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.type)
}
inline void Agent::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.type)
}
inline std::string* Agent::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_type() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.type)
}
inline std::string* Agent::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.type)
}

// string os = 6[json_name = "os", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_os() {
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::os() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.os)
  return _internal_os();
}
inline void Agent::set_os(const std::string& value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.os)
}
inline std::string* Agent::mutable_os() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.os)
  return _internal_mutable_os();
}
inline const std::string& Agent::_internal_os() const {
  return os_.Get();
}
inline void Agent::_internal_set_os(const std::string& value) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_os(std::string&& value) {
  
  os_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.os)
}
inline void Agent::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.os)
}
inline void Agent::set_os(const char* value,
    size_t size) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.os)
}
inline std::string* Agent::_internal_mutable_os() {
  
  return os_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_os() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.os)
  return os_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    
  } else {
    
  }
  os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.os)
}
inline std::string* Agent::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.os)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return os_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_os(
    std::string* os) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (os != nullptr) {
    
  } else {
    
  }
  os_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      os, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.os)
}

// string ip = 7[json_name = "ip", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.ip)
  return _internal_ip();
}
inline void Agent::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.ip)
}
inline std::string* Agent::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.ip)
  return _internal_mutable_ip();
}
inline const std::string& Agent::_internal_ip() const {
  return ip_.Get();
}
inline void Agent::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.ip)
}
inline void Agent::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.ip)
}
inline void Agent::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.ip)
}
inline std::string* Agent::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.ip)
}
inline std::string* Agent::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.ip)
}

// double lat = 8[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_lat() {
  lat_ = 0;
}
inline double Agent::_internal_lat() const {
  return lat_;
}
inline double Agent::lat() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.lat)
  return _internal_lat();
}
inline void Agent::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Agent::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.lat)
}

// double long = 9[json_name = "long", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_long_() {
  long__ = 0;
}
inline double Agent::_internal_long_() const {
  return long__;
}
inline double Agent::long_() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.long)
  return _internal_long_();
}
inline void Agent::_internal_set_long_(double value) {
  
  long__ = value;
}
inline void Agent::set_long_(double value) {
  _internal_set_long_(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.long)
}

// .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Agent::_internal_has_last_authed() const {
  return this != internal_default_instance() && last_authed_ != nullptr;
}
inline bool Agent::has_last_authed() const {
  return _internal_has_last_authed();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Agent::_internal_last_authed() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = last_authed_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Agent::last_authed() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.last_authed)
  return _internal_last_authed();
}
inline void Agent::unsafe_arena_set_allocated_last_authed(
    PROTOBUF_NAMESPACE_ID::Timestamp* last_authed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_authed_);
  }
  last_authed_ = last_authed;
  if (last_authed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.last_authed)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Agent::release_last_authed() {
  auto temp = unsafe_arena_release_last_authed();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Agent::unsafe_arena_release_last_authed() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.last_authed)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = last_authed_;
  last_authed_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Agent::_internal_mutable_last_authed() {
  
  if (last_authed_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    last_authed_ = p;
  }
  return last_authed_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Agent::mutable_last_authed() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.last_authed)
  return _internal_mutable_last_authed();
}
inline void Agent::set_allocated_last_authed(PROTOBUF_NAMESPACE_ID::Timestamp* last_authed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_authed_);
  }
  if (last_authed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_authed)->GetArena();
    if (message_arena != submessage_arena) {
      last_authed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_authed, submessage_arena);
    }
    
  } else {
    
  }
  last_authed_ = last_authed;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.last_authed)
}

// .kentik.synthetics.v202309.IPFamily family = 11[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_family() {
  family_ = 0;
}
inline ::kentik::synthetics::v202309::IPFamily Agent::_internal_family() const {
  return static_cast< ::kentik::synthetics::v202309::IPFamily >(family_);
}
inline ::kentik::synthetics::v202309::IPFamily Agent::family() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.family)
  return _internal_family();
}
inline void Agent::_internal_set_family(::kentik::synthetics::v202309::IPFamily value) {
  
  family_ = value;
}
inline void Agent::set_family(::kentik::synthetics::v202309::IPFamily value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.family)
}

// uint32 asn = 12[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Agent::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Agent::asn() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.asn)
  return _internal_asn();
}
inline void Agent::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void Agent::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.asn)
}

// string site_id = 13[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_site_id() {
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::site_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.site_id)
  return _internal_site_id();
}
inline void Agent::set_site_id(const std::string& value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.site_id)
}
inline std::string* Agent::mutable_site_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.site_id)
  return _internal_mutable_site_id();
}
inline const std::string& Agent::_internal_site_id() const {
  return site_id_.Get();
}
inline void Agent::_internal_set_site_id(const std::string& value) {
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_site_id(std::string&& value) {
  
  site_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.site_id)
}
inline void Agent::set_site_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.site_id)
}
inline void Agent::set_site_id(const char* value,
    size_t size) {
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.site_id)
}
inline std::string* Agent::_internal_mutable_site_id() {
  
  return site_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_site_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.site_id)
  return site_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_site_id(std::string* site_id) {
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.site_id)
}
inline std::string* Agent::unsafe_arena_release_site_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.site_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return site_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_site_id(
    std::string* site_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.site_id)
}

// string version = 14[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::version() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.version)
  return _internal_version();
}
inline void Agent::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.version)
}
inline std::string* Agent::mutable_version() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.version)
  return _internal_mutable_version();
}
inline const std::string& Agent::_internal_version() const {
  return version_.Get();
}
inline void Agent::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.version)
}
inline void Agent::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.version)
}
inline void Agent::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.version)
}
inline std::string* Agent::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_version() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.version)
}
inline std::string* Agent::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.version)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return version_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_version(
    std::string* version) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (version != nullptr) {
    
  } else {
    
  }
  version_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      version, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.version)
}

// string city = 16[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::city() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.city)
  return _internal_city();
}
inline void Agent::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.city)
}
inline std::string* Agent::mutable_city() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.city)
  return _internal_mutable_city();
}
inline const std::string& Agent::_internal_city() const {
  return city_.Get();
}
inline void Agent::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.city)
}
inline void Agent::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.city)
}
inline void Agent::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.city)
}
inline std::string* Agent::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_city() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.city)
}
inline std::string* Agent::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    
  } else {
    
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.city)
}

// string region = 17[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_region() {
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::region() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.region)
  return _internal_region();
}
inline void Agent::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.region)
}
inline std::string* Agent::mutable_region() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.region)
  return _internal_mutable_region();
}
inline const std::string& Agent::_internal_region() const {
  return region_.Get();
}
inline void Agent::_internal_set_region(const std::string& value) {
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_region(std::string&& value) {
  
  region_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.region)
}
inline void Agent::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.region)
}
inline void Agent::set_region(const char* value,
    size_t size) {
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.region)
}
inline std::string* Agent::_internal_mutable_region() {
  
  return region_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_region() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.region)
  return region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.region)
}
inline std::string* Agent::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.region)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return region_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_region(
    std::string* region) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (region != nullptr) {
    
  } else {
    
  }
  region_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      region, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.region)
}

// string country = 18[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::country() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.country)
  return _internal_country();
}
inline void Agent::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.country)
}
inline std::string* Agent::mutable_country() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.country)
  return _internal_mutable_country();
}
inline const std::string& Agent::_internal_country() const {
  return country_.Get();
}
inline void Agent::_internal_set_country(const std::string& value) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_country(std::string&& value) {
  
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.country)
}
inline void Agent::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.country)
}
inline void Agent::set_country(const char* value,
    size_t size) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.country)
}
inline std::string* Agent::_internal_mutable_country() {
  
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_country() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.country)
}
inline std::string* Agent::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.country)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country != nullptr) {
    
  } else {
    
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.country)
}

// repeated string test_ids = 19[json_name = "testIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Agent::_internal_test_ids_size() const {
  return test_ids_.size();
}
inline int Agent::test_ids_size() const {
  return _internal_test_ids_size();
}
inline void Agent::clear_test_ids() {
  test_ids_.Clear();
}
inline std::string* Agent::add_test_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.Agent.test_ids)
  return _internal_add_test_ids();
}
inline const std::string& Agent::_internal_test_ids(int index) const {
  return test_ids_.Get(index);
}
inline const std::string& Agent::test_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.test_ids)
  return _internal_test_ids(index);
}
inline std::string* Agent::mutable_test_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.test_ids)
  return test_ids_.Mutable(index);
}
inline void Agent::set_test_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.test_ids)
  test_ids_.Mutable(index)->assign(value);
}
inline void Agent::set_test_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.test_ids)
  test_ids_.Mutable(index)->assign(std::move(value));
}
inline void Agent::set_test_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  test_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.test_ids)
}
inline void Agent::set_test_ids(int index, const char* value, size_t size) {
  test_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.test_ids)
}
inline std::string* Agent::_internal_add_test_ids() {
  return test_ids_.Add();
}
inline void Agent::add_test_ids(const std::string& value) {
  test_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.Agent.test_ids)
}
inline void Agent::add_test_ids(std::string&& value) {
  test_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.Agent.test_ids)
}
inline void Agent::add_test_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  test_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.Agent.test_ids)
}
inline void Agent::add_test_ids(const char* value, size_t size) {
  test_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.Agent.test_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Agent::test_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.Agent.test_ids)
  return test_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Agent::mutable_test_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.Agent.test_ids)
  return &test_ids_;
}

// string local_ip = 20[json_name = "localIp", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_local_ip() {
  local_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::local_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.local_ip)
  return _internal_local_ip();
}
inline void Agent::set_local_ip(const std::string& value) {
  _internal_set_local_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.local_ip)
}
inline std::string* Agent::mutable_local_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.local_ip)
  return _internal_mutable_local_ip();
}
inline const std::string& Agent::_internal_local_ip() const {
  return local_ip_.Get();
}
inline void Agent::_internal_set_local_ip(const std::string& value) {
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_local_ip(std::string&& value) {
  
  local_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.local_ip)
}
inline void Agent::set_local_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.local_ip)
}
inline void Agent::set_local_ip(const char* value,
    size_t size) {
  
  local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.local_ip)
}
inline std::string* Agent::_internal_mutable_local_ip() {
  
  return local_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_local_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.local_ip)
  return local_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_local_ip(std::string* local_ip) {
  if (local_ip != nullptr) {
    
  } else {
    
  }
  local_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), local_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.local_ip)
}
inline std::string* Agent::unsafe_arena_release_local_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.local_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return local_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_local_ip(
    std::string* local_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (local_ip != nullptr) {
    
  } else {
    
  }
  local_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      local_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.local_ip)
}

// string cloud_region = 22[json_name = "cloudRegion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_cloud_region() {
  cloud_region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::cloud_region() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.cloud_region)
  return _internal_cloud_region();
}
inline void Agent::set_cloud_region(const std::string& value) {
  _internal_set_cloud_region(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.cloud_region)
}
inline std::string* Agent::mutable_cloud_region() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.cloud_region)
  return _internal_mutable_cloud_region();
}
inline const std::string& Agent::_internal_cloud_region() const {
  return cloud_region_.Get();
}
inline void Agent::_internal_set_cloud_region(const std::string& value) {
  
  cloud_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_cloud_region(std::string&& value) {
  
  cloud_region_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.cloud_region)
}
inline void Agent::set_cloud_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloud_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.cloud_region)
}
inline void Agent::set_cloud_region(const char* value,
    size_t size) {
  
  cloud_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.cloud_region)
}
inline std::string* Agent::_internal_mutable_cloud_region() {
  
  return cloud_region_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_cloud_region() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.cloud_region)
  return cloud_region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_cloud_region(std::string* cloud_region) {
  if (cloud_region != nullptr) {
    
  } else {
    
  }
  cloud_region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloud_region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.cloud_region)
}
inline std::string* Agent::unsafe_arena_release_cloud_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.cloud_region)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cloud_region_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_cloud_region(
    std::string* cloud_region) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cloud_region != nullptr) {
    
  } else {
    
  }
  cloud_region_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cloud_region, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.cloud_region)
}

// string cloud_provider = 23[json_name = "cloudProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Agent::clear_cloud_provider() {
  cloud_provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Agent::cloud_provider() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.cloud_provider)
  return _internal_cloud_provider();
}
inline void Agent::set_cloud_provider(const std::string& value) {
  _internal_set_cloud_provider(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.cloud_provider)
}
inline std::string* Agent::mutable_cloud_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.cloud_provider)
  return _internal_mutable_cloud_provider();
}
inline const std::string& Agent::_internal_cloud_provider() const {
  return cloud_provider_.Get();
}
inline void Agent::_internal_set_cloud_provider(const std::string& value) {
  
  cloud_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Agent::set_cloud_provider(std::string&& value) {
  
  cloud_provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Agent.cloud_provider)
}
inline void Agent::set_cloud_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cloud_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.cloud_provider)
}
inline void Agent::set_cloud_provider(const char* value,
    size_t size) {
  
  cloud_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.cloud_provider)
}
inline std::string* Agent::_internal_mutable_cloud_provider() {
  
  return cloud_provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Agent::release_cloud_provider() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.cloud_provider)
  return cloud_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Agent::set_allocated_cloud_provider(std::string* cloud_provider) {
  if (cloud_provider != nullptr) {
    
  } else {
    
  }
  cloud_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cloud_provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.cloud_provider)
}
inline std::string* Agent::unsafe_arena_release_cloud_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Agent.cloud_provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return cloud_provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Agent::unsafe_arena_set_allocated_cloud_provider(
    std::string* cloud_provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (cloud_provider != nullptr) {
    
  } else {
    
  }
  cloud_provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      cloud_provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.cloud_provider)
}

// .kentik.synthetics.v202309.ImplementType agent_impl = 24[json_name = "agentImpl", (.google.api.field_behavior) = OUTPUT_ONLY];
inline void Agent::clear_agent_impl() {
  agent_impl_ = 0;
}
inline ::kentik::synthetics::v202309::ImplementType Agent::_internal_agent_impl() const {
  return static_cast< ::kentik::synthetics::v202309::ImplementType >(agent_impl_);
}
inline ::kentik::synthetics::v202309::ImplementType Agent::agent_impl() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.agent_impl)
  return _internal_agent_impl();
}
inline void Agent::_internal_set_agent_impl(::kentik::synthetics::v202309::ImplementType value) {
  
  agent_impl_ = value;
}
inline void Agent::set_agent_impl(::kentik::synthetics::v202309::ImplementType value) {
  _internal_set_agent_impl(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.agent_impl)
}

// repeated string labels = 25[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Agent::_internal_labels_size() const {
  return labels_.size();
}
inline int Agent::labels_size() const {
  return _internal_labels_size();
}
inline void Agent::clear_labels() {
  labels_.Clear();
}
inline std::string* Agent::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.Agent.labels)
  return _internal_add_labels();
}
inline const std::string& Agent::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& Agent::labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.labels)
  return _internal_labels(index);
}
inline std::string* Agent::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.labels)
  return labels_.Mutable(index);
}
inline void Agent::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.labels)
  labels_.Mutable(index)->assign(value);
}
inline void Agent::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Agent.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void Agent::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Agent.labels)
}
inline void Agent::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Agent.labels)
}
inline std::string* Agent::_internal_add_labels() {
  return labels_.Add();
}
inline void Agent::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.Agent.labels)
}
inline void Agent::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.Agent.labels)
}
inline void Agent::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.Agent.labels)
}
inline void Agent::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.Agent.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Agent::labels() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.Agent.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Agent::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.Agent.labels)
  return &labels_;
}

// .kentik.synthetics.v202309.AgentMetadata metadata = 26[json_name = "metadata", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Agent::_internal_has_metadata() const {
  return this != internal_default_instance() && metadata_ != nullptr;
}
inline bool Agent::has_metadata() const {
  return _internal_has_metadata();
}
inline void Agent::clear_metadata() {
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
inline const ::kentik::synthetics::v202309::AgentMetadata& Agent::_internal_metadata() const {
  const ::kentik::synthetics::v202309::AgentMetadata* p = metadata_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::AgentMetadata*>(
      &::kentik::synthetics::v202309::_AgentMetadata_default_instance_);
}
inline const ::kentik::synthetics::v202309::AgentMetadata& Agent::metadata() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Agent.metadata)
  return _internal_metadata();
}
inline void Agent::unsafe_arena_set_allocated_metadata(
    ::kentik::synthetics::v202309::AgentMetadata* metadata) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Agent.metadata)
}
inline ::kentik::synthetics::v202309::AgentMetadata* Agent::release_metadata() {
  auto temp = unsafe_arena_release_metadata();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::AgentMetadata* Agent::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Agent.metadata)
  
  ::kentik::synthetics::v202309::AgentMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::AgentMetadata* Agent::_internal_mutable_metadata() {
  
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::AgentMetadata>(GetArena());
    metadata_ = p;
  }
  return metadata_;
}
inline ::kentik::synthetics::v202309::AgentMetadata* Agent::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Agent.metadata)
  return _internal_mutable_metadata();
}
inline void Agent::set_allocated_metadata(::kentik::synthetics::v202309::AgentMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete metadata_;
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    
  } else {
    
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Agent.metadata)
}

// -------------------------------------------------------------------

// AgentMetadata_IpValue

// string value = 1[json_name = "value"];
inline void AgentMetadata_IpValue::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AgentMetadata_IpValue::value() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
  return _internal_value();
}
inline void AgentMetadata_IpValue::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
}
inline std::string* AgentMetadata_IpValue::mutable_value() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
  return _internal_mutable_value();
}
inline const std::string& AgentMetadata_IpValue::_internal_value() const {
  return value_.Get();
}
inline void AgentMetadata_IpValue::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentMetadata_IpValue::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
}
inline void AgentMetadata_IpValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
}
inline void AgentMetadata_IpValue::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
}
inline std::string* AgentMetadata_IpValue::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentMetadata_IpValue::release_value() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentMetadata_IpValue::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
}
inline std::string* AgentMetadata_IpValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AgentMetadata_IpValue::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.AgentMetadata.IpValue.value)
}

// -------------------------------------------------------------------

// AgentMetadata

// repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv4_addresses = 1[json_name = "privateIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int AgentMetadata::_internal_private_ipv4_addresses_size() const {
  return private_ipv4_addresses_.size();
}
inline int AgentMetadata::private_ipv4_addresses_size() const {
  return _internal_private_ipv4_addresses_size();
}
inline void AgentMetadata::clear_private_ipv4_addresses() {
  private_ipv4_addresses_.Clear();
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::mutable_private_ipv4_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentMetadata.private_ipv4_addresses)
  return private_ipv4_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >*
AgentMetadata::mutable_private_ipv4_addresses() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.AgentMetadata.private_ipv4_addresses)
  return &private_ipv4_addresses_;
}
inline const ::kentik::synthetics::v202309::AgentMetadata_IpValue& AgentMetadata::_internal_private_ipv4_addresses(int index) const {
  return private_ipv4_addresses_.Get(index);
}
inline const ::kentik::synthetics::v202309::AgentMetadata_IpValue& AgentMetadata::private_ipv4_addresses(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentMetadata.private_ipv4_addresses)
  return _internal_private_ipv4_addresses(index);
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::_internal_add_private_ipv4_addresses() {
  return private_ipv4_addresses_.Add();
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::add_private_ipv4_addresses() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.AgentMetadata.private_ipv4_addresses)
  return _internal_add_private_ipv4_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >&
AgentMetadata::private_ipv4_addresses() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.AgentMetadata.private_ipv4_addresses)
  return private_ipv4_addresses_;
}

// repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv4_addresses = 2[json_name = "publicIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int AgentMetadata::_internal_public_ipv4_addresses_size() const {
  return public_ipv4_addresses_.size();
}
inline int AgentMetadata::public_ipv4_addresses_size() const {
  return _internal_public_ipv4_addresses_size();
}
inline void AgentMetadata::clear_public_ipv4_addresses() {
  public_ipv4_addresses_.Clear();
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::mutable_public_ipv4_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentMetadata.public_ipv4_addresses)
  return public_ipv4_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >*
AgentMetadata::mutable_public_ipv4_addresses() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.AgentMetadata.public_ipv4_addresses)
  return &public_ipv4_addresses_;
}
inline const ::kentik::synthetics::v202309::AgentMetadata_IpValue& AgentMetadata::_internal_public_ipv4_addresses(int index) const {
  return public_ipv4_addresses_.Get(index);
}
inline const ::kentik::synthetics::v202309::AgentMetadata_IpValue& AgentMetadata::public_ipv4_addresses(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentMetadata.public_ipv4_addresses)
  return _internal_public_ipv4_addresses(index);
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::_internal_add_public_ipv4_addresses() {
  return public_ipv4_addresses_.Add();
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::add_public_ipv4_addresses() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.AgentMetadata.public_ipv4_addresses)
  return _internal_add_public_ipv4_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >&
AgentMetadata::public_ipv4_addresses() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.AgentMetadata.public_ipv4_addresses)
  return public_ipv4_addresses_;
}

// repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv6_addresses = 3[json_name = "privateIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int AgentMetadata::_internal_private_ipv6_addresses_size() const {
  return private_ipv6_addresses_.size();
}
inline int AgentMetadata::private_ipv6_addresses_size() const {
  return _internal_private_ipv6_addresses_size();
}
inline void AgentMetadata::clear_private_ipv6_addresses() {
  private_ipv6_addresses_.Clear();
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::mutable_private_ipv6_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentMetadata.private_ipv6_addresses)
  return private_ipv6_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >*
AgentMetadata::mutable_private_ipv6_addresses() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.AgentMetadata.private_ipv6_addresses)
  return &private_ipv6_addresses_;
}
inline const ::kentik::synthetics::v202309::AgentMetadata_IpValue& AgentMetadata::_internal_private_ipv6_addresses(int index) const {
  return private_ipv6_addresses_.Get(index);
}
inline const ::kentik::synthetics::v202309::AgentMetadata_IpValue& AgentMetadata::private_ipv6_addresses(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentMetadata.private_ipv6_addresses)
  return _internal_private_ipv6_addresses(index);
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::_internal_add_private_ipv6_addresses() {
  return private_ipv6_addresses_.Add();
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::add_private_ipv6_addresses() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.AgentMetadata.private_ipv6_addresses)
  return _internal_add_private_ipv6_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >&
AgentMetadata::private_ipv6_addresses() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.AgentMetadata.private_ipv6_addresses)
  return private_ipv6_addresses_;
}

// repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv6_addresses = 4[json_name = "publicIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int AgentMetadata::_internal_public_ipv6_addresses_size() const {
  return public_ipv6_addresses_.size();
}
inline int AgentMetadata::public_ipv6_addresses_size() const {
  return _internal_public_ipv6_addresses_size();
}
inline void AgentMetadata::clear_public_ipv6_addresses() {
  public_ipv6_addresses_.Clear();
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::mutable_public_ipv6_addresses(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentMetadata.public_ipv6_addresses)
  return public_ipv6_addresses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >*
AgentMetadata::mutable_public_ipv6_addresses() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.AgentMetadata.public_ipv6_addresses)
  return &public_ipv6_addresses_;
}
inline const ::kentik::synthetics::v202309::AgentMetadata_IpValue& AgentMetadata::_internal_public_ipv6_addresses(int index) const {
  return public_ipv6_addresses_.Get(index);
}
inline const ::kentik::synthetics::v202309::AgentMetadata_IpValue& AgentMetadata::public_ipv6_addresses(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentMetadata.public_ipv6_addresses)
  return _internal_public_ipv6_addresses(index);
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::_internal_add_public_ipv6_addresses() {
  return public_ipv6_addresses_.Add();
}
inline ::kentik::synthetics::v202309::AgentMetadata_IpValue* AgentMetadata::add_public_ipv6_addresses() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.AgentMetadata.public_ipv6_addresses)
  return _internal_add_public_ipv6_addresses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentMetadata_IpValue >&
AgentMetadata::public_ipv6_addresses() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.AgentMetadata.public_ipv6_addresses)
  return public_ipv6_addresses_;
}

// -------------------------------------------------------------------

// Test

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Test::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.id)
  return _internal_id();
}
inline void Test::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Test.id)
}
inline std::string* Test::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.id)
  return _internal_mutable_id();
}
inline const std::string& Test::_internal_id() const {
  return id_.Get();
}
inline void Test::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Test.id)
}
inline void Test::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Test.id)
}
inline void Test::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Test.id)
}
inline std::string* Test::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Test.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Test.id)
}
inline std::string* Test::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Test.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Test::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Test.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Test::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test::name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.name)
  return _internal_name();
}
inline void Test::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Test.name)
}
inline std::string* Test::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.name)
  return _internal_mutable_name();
}
inline const std::string& Test::_internal_name() const {
  return name_.Get();
}
inline void Test::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Test.name)
}
inline void Test::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Test.name)
}
inline void Test::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Test.name)
}
inline std::string* Test::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test::release_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Test.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Test.name)
}
inline std::string* Test::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Test.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Test::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Test.name)
}

// string type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Test::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Test::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.type)
  return _internal_type();
}
inline void Test::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Test.type)
}
inline std::string* Test::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.type)
  return _internal_mutable_type();
}
inline const std::string& Test::_internal_type() const {
  return type_.Get();
}
inline void Test::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Test::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Test.type)
}
inline void Test::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Test.type)
}
inline void Test::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Test.type)
}
inline std::string* Test::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Test::release_type() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Test.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Test.type)
}
inline std::string* Test::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Test.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Test::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Test.type)
}

// .kentik.synthetics.v202309.TestStatus status = 5[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Test::clear_status() {
  status_ = 0;
}
inline ::kentik::synthetics::v202309::TestStatus Test::_internal_status() const {
  return static_cast< ::kentik::synthetics::v202309::TestStatus >(status_);
}
inline ::kentik::synthetics::v202309::TestStatus Test::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.status)
  return _internal_status();
}
inline void Test::_internal_set_status(::kentik::synthetics::v202309::TestStatus value) {
  
  status_ = value;
}
inline void Test::set_status(::kentik::synthetics::v202309::TestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Test.status)
}

// .kentik.synthetics.v202309.TestSettings settings = 6[json_name = "settings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Test::_internal_has_settings() const {
  return this != internal_default_instance() && settings_ != nullptr;
}
inline bool Test::has_settings() const {
  return _internal_has_settings();
}
inline void Test::clear_settings() {
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
}
inline const ::kentik::synthetics::v202309::TestSettings& Test::_internal_settings() const {
  const ::kentik::synthetics::v202309::TestSettings* p = settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::TestSettings*>(
      &::kentik::synthetics::v202309::_TestSettings_default_instance_);
}
inline const ::kentik::synthetics::v202309::TestSettings& Test::settings() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.settings)
  return _internal_settings();
}
inline void Test::unsafe_arena_set_allocated_settings(
    ::kentik::synthetics::v202309::TestSettings* settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settings_);
  }
  settings_ = settings;
  if (settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Test.settings)
}
inline ::kentik::synthetics::v202309::TestSettings* Test::release_settings() {
  auto temp = unsafe_arena_release_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::TestSettings* Test::unsafe_arena_release_settings() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Test.settings)
  
  ::kentik::synthetics::v202309::TestSettings* temp = settings_;
  settings_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::TestSettings* Test::_internal_mutable_settings() {
  
  if (settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::TestSettings>(GetArena());
    settings_ = p;
  }
  return settings_;
}
inline ::kentik::synthetics::v202309::TestSettings* Test::mutable_settings() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.settings)
  return _internal_mutable_settings();
}
inline void Test::set_allocated_settings(::kentik::synthetics::v202309::TestSettings* settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete settings_;
  }
  if (settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(settings);
    if (message_arena != submessage_arena) {
      settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settings, submessage_arena);
    }
    
  } else {
    
  }
  settings_ = settings;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Test.settings)
}

// .google.protobuf.Timestamp cdate = 7[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Test::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool Test::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.cdate)
  return _internal_cdate();
}
inline void Test::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Test.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Test.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.cdate)
  return _internal_mutable_cdate();
}
inline void Test::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Test.cdate)
}

// .google.protobuf.Timestamp edate = 8[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Test::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool Test::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Test::edate() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.edate)
  return _internal_edate();
}
inline void Test::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Test.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Test.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Test::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.edate)
  return _internal_mutable_edate();
}
inline void Test::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Test.edate)
}

// .kentik.core.v202303.UserInfo created_by = 9[json_name = "createdBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Test::_internal_has_created_by() const {
  return this != internal_default_instance() && created_by_ != nullptr;
}
inline bool Test::has_created_by() const {
  return _internal_has_created_by();
}
inline const ::kentik::core::v202303::UserInfo& Test::_internal_created_by() const {
  const ::kentik::core::v202303::UserInfo* p = created_by_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::core::v202303::UserInfo*>(
      &::kentik::core::v202303::_UserInfo_default_instance_);
}
inline const ::kentik::core::v202303::UserInfo& Test::created_by() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.created_by)
  return _internal_created_by();
}
inline void Test::unsafe_arena_set_allocated_created_by(
    ::kentik::core::v202303::UserInfo* created_by) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by_);
  }
  created_by_ = created_by;
  if (created_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Test.created_by)
}
inline ::kentik::core::v202303::UserInfo* Test::release_created_by() {
  auto temp = unsafe_arena_release_created_by();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::core::v202303::UserInfo* Test::unsafe_arena_release_created_by() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Test.created_by)
  
  ::kentik::core::v202303::UserInfo* temp = created_by_;
  created_by_ = nullptr;
  return temp;
}
inline ::kentik::core::v202303::UserInfo* Test::_internal_mutable_created_by() {
  
  if (created_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::core::v202303::UserInfo>(GetArena());
    created_by_ = p;
  }
  return created_by_;
}
inline ::kentik::core::v202303::UserInfo* Test::mutable_created_by() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.created_by)
  return _internal_mutable_created_by();
}
inline void Test::set_allocated_created_by(::kentik::core::v202303::UserInfo* created_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by_);
  }
  if (created_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_by)->GetArena();
    if (message_arena != submessage_arena) {
      created_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_by, submessage_arena);
    }
    
  } else {
    
  }
  created_by_ = created_by;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Test.created_by)
}

// .kentik.core.v202303.UserInfo last_updated_by = 10[json_name = "lastUpdatedBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Test::_internal_has_last_updated_by() const {
  return this != internal_default_instance() && last_updated_by_ != nullptr;
}
inline bool Test::has_last_updated_by() const {
  return _internal_has_last_updated_by();
}
inline const ::kentik::core::v202303::UserInfo& Test::_internal_last_updated_by() const {
  const ::kentik::core::v202303::UserInfo* p = last_updated_by_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::core::v202303::UserInfo*>(
      &::kentik::core::v202303::_UserInfo_default_instance_);
}
inline const ::kentik::core::v202303::UserInfo& Test::last_updated_by() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.last_updated_by)
  return _internal_last_updated_by();
}
inline void Test::unsafe_arena_set_allocated_last_updated_by(
    ::kentik::core::v202303::UserInfo* last_updated_by) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_by_);
  }
  last_updated_by_ = last_updated_by;
  if (last_updated_by) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Test.last_updated_by)
}
inline ::kentik::core::v202303::UserInfo* Test::release_last_updated_by() {
  auto temp = unsafe_arena_release_last_updated_by();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::core::v202303::UserInfo* Test::unsafe_arena_release_last_updated_by() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Test.last_updated_by)
  
  ::kentik::core::v202303::UserInfo* temp = last_updated_by_;
  last_updated_by_ = nullptr;
  return temp;
}
inline ::kentik::core::v202303::UserInfo* Test::_internal_mutable_last_updated_by() {
  
  if (last_updated_by_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::core::v202303::UserInfo>(GetArena());
    last_updated_by_ = p;
  }
  return last_updated_by_;
}
inline ::kentik::core::v202303::UserInfo* Test::mutable_last_updated_by() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.last_updated_by)
  return _internal_mutable_last_updated_by();
}
inline void Test::set_allocated_last_updated_by(::kentik::core::v202303::UserInfo* last_updated_by) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_by_);
  }
  if (last_updated_by) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_updated_by)->GetArena();
    if (message_arena != submessage_arena) {
      last_updated_by = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_updated_by, submessage_arena);
    }
    
  } else {
    
  }
  last_updated_by_ = last_updated_by;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Test.last_updated_by)
}

// repeated string labels = 11[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Test::_internal_labels_size() const {
  return labels_.size();
}
inline int Test::labels_size() const {
  return _internal_labels_size();
}
inline void Test::clear_labels() {
  labels_.Clear();
}
inline std::string* Test::add_labels() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.Test.labels)
  return _internal_add_labels();
}
inline const std::string& Test::_internal_labels(int index) const {
  return labels_.Get(index);
}
inline const std::string& Test::labels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Test.labels)
  return _internal_labels(index);
}
inline std::string* Test::mutable_labels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Test.labels)
  return labels_.Mutable(index);
}
inline void Test::set_labels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Test.labels)
  labels_.Mutable(index)->assign(value);
}
inline void Test::set_labels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Test.labels)
  labels_.Mutable(index)->assign(std::move(value));
}
inline void Test::set_labels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Test.labels)
}
inline void Test::set_labels(int index, const char* value, size_t size) {
  labels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Test.labels)
}
inline std::string* Test::_internal_add_labels() {
  return labels_.Add();
}
inline void Test::add_labels(const std::string& value) {
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.Test.labels)
}
inline void Test::add_labels(std::string&& value) {
  labels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.Test.labels)
}
inline void Test::add_labels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  labels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.Test.labels)
}
inline void Test::add_labels(const char* value, size_t size) {
  labels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.Test.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Test::labels() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.Test.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Test::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.Test.labels)
  return &labels_;
}

// -------------------------------------------------------------------

// TestSettings

// .kentik.synthetics.v202309.HostnameTest hostname = 1[json_name = "hostname"];
inline bool TestSettings::_internal_has_hostname() const {
  return definition_case() == kHostname;
}
inline bool TestSettings::has_hostname() const {
  return _internal_has_hostname();
}
inline void TestSettings::set_has_hostname() {
  _oneof_case_[0] = kHostname;
}
inline void TestSettings::clear_hostname() {
  if (_internal_has_hostname()) {
    if (GetArena() == nullptr) {
      delete definition_.hostname_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::HostnameTest* TestSettings::release_hostname() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.hostname)
  if (_internal_has_hostname()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::HostnameTest* temp = definition_.hostname_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.hostname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::HostnameTest& TestSettings::_internal_hostname() const {
  return _internal_has_hostname()
      ? *definition_.hostname_
      : *reinterpret_cast< ::kentik::synthetics::v202309::HostnameTest*>(&::kentik::synthetics::v202309::_HostnameTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::HostnameTest& TestSettings::hostname() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.hostname)
  return _internal_hostname();
}
inline ::kentik::synthetics::v202309::HostnameTest* TestSettings::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.hostname)
  if (_internal_has_hostname()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::HostnameTest* temp = definition_.hostname_;
    definition_.hostname_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_hostname(::kentik::synthetics::v202309::HostnameTest* hostname) {
  clear_definition();
  if (hostname) {
    set_has_hostname();
    definition_.hostname_ = hostname;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.hostname)
}
inline ::kentik::synthetics::v202309::HostnameTest* TestSettings::_internal_mutable_hostname() {
  if (!_internal_has_hostname()) {
    clear_definition();
    set_has_hostname();
    definition_.hostname_ = CreateMaybeMessage< ::kentik::synthetics::v202309::HostnameTest >(GetArena());
  }
  return definition_.hostname_;
}
inline ::kentik::synthetics::v202309::HostnameTest* TestSettings::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.hostname)
  return _internal_mutable_hostname();
}

// .kentik.synthetics.v202309.IpTest ip = 2[json_name = "ip"];
inline bool TestSettings::_internal_has_ip() const {
  return definition_case() == kIp;
}
inline bool TestSettings::has_ip() const {
  return _internal_has_ip();
}
inline void TestSettings::set_has_ip() {
  _oneof_case_[0] = kIp;
}
inline void TestSettings::clear_ip() {
  if (_internal_has_ip()) {
    if (GetArena() == nullptr) {
      delete definition_.ip_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::IpTest* TestSettings::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.ip)
  if (_internal_has_ip()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::IpTest* temp = definition_.ip_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.ip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::IpTest& TestSettings::_internal_ip() const {
  return _internal_has_ip()
      ? *definition_.ip_
      : *reinterpret_cast< ::kentik::synthetics::v202309::IpTest*>(&::kentik::synthetics::v202309::_IpTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::IpTest& TestSettings::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.ip)
  return _internal_ip();
}
inline ::kentik::synthetics::v202309::IpTest* TestSettings::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.ip)
  if (_internal_has_ip()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::IpTest* temp = definition_.ip_;
    definition_.ip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_ip(::kentik::synthetics::v202309::IpTest* ip) {
  clear_definition();
  if (ip) {
    set_has_ip();
    definition_.ip_ = ip;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.ip)
}
inline ::kentik::synthetics::v202309::IpTest* TestSettings::_internal_mutable_ip() {
  if (!_internal_has_ip()) {
    clear_definition();
    set_has_ip();
    definition_.ip_ = CreateMaybeMessage< ::kentik::synthetics::v202309::IpTest >(GetArena());
  }
  return definition_.ip_;
}
inline ::kentik::synthetics::v202309::IpTest* TestSettings::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.ip)
  return _internal_mutable_ip();
}

// .kentik.synthetics.v202309.AgentTest agent = 3[json_name = "agent"];
inline bool TestSettings::_internal_has_agent() const {
  return definition_case() == kAgent;
}
inline bool TestSettings::has_agent() const {
  return _internal_has_agent();
}
inline void TestSettings::set_has_agent() {
  _oneof_case_[0] = kAgent;
}
inline void TestSettings::clear_agent() {
  if (_internal_has_agent()) {
    if (GetArena() == nullptr) {
      delete definition_.agent_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::AgentTest* TestSettings::release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.agent)
  if (_internal_has_agent()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::AgentTest* temp = definition_.agent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.agent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::AgentTest& TestSettings::_internal_agent() const {
  return _internal_has_agent()
      ? *definition_.agent_
      : *reinterpret_cast< ::kentik::synthetics::v202309::AgentTest*>(&::kentik::synthetics::v202309::_AgentTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::AgentTest& TestSettings::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.agent)
  return _internal_agent();
}
inline ::kentik::synthetics::v202309::AgentTest* TestSettings::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.agent)
  if (_internal_has_agent()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::AgentTest* temp = definition_.agent_;
    definition_.agent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_agent(::kentik::synthetics::v202309::AgentTest* agent) {
  clear_definition();
  if (agent) {
    set_has_agent();
    definition_.agent_ = agent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.agent)
}
inline ::kentik::synthetics::v202309::AgentTest* TestSettings::_internal_mutable_agent() {
  if (!_internal_has_agent()) {
    clear_definition();
    set_has_agent();
    definition_.agent_ = CreateMaybeMessage< ::kentik::synthetics::v202309::AgentTest >(GetArena());
  }
  return definition_.agent_;
}
inline ::kentik::synthetics::v202309::AgentTest* TestSettings::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.agent)
  return _internal_mutable_agent();
}

// .kentik.synthetics.v202309.FlowTest flow = 4[json_name = "flow"];
inline bool TestSettings::_internal_has_flow() const {
  return definition_case() == kFlow;
}
inline bool TestSettings::has_flow() const {
  return _internal_has_flow();
}
inline void TestSettings::set_has_flow() {
  _oneof_case_[0] = kFlow;
}
inline void TestSettings::clear_flow() {
  if (_internal_has_flow()) {
    if (GetArena() == nullptr) {
      delete definition_.flow_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::FlowTest* TestSettings::release_flow() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.flow)
  if (_internal_has_flow()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::FlowTest* temp = definition_.flow_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.flow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::FlowTest& TestSettings::_internal_flow() const {
  return _internal_has_flow()
      ? *definition_.flow_
      : *reinterpret_cast< ::kentik::synthetics::v202309::FlowTest*>(&::kentik::synthetics::v202309::_FlowTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::FlowTest& TestSettings::flow() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.flow)
  return _internal_flow();
}
inline ::kentik::synthetics::v202309::FlowTest* TestSettings::unsafe_arena_release_flow() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.flow)
  if (_internal_has_flow()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::FlowTest* temp = definition_.flow_;
    definition_.flow_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_flow(::kentik::synthetics::v202309::FlowTest* flow) {
  clear_definition();
  if (flow) {
    set_has_flow();
    definition_.flow_ = flow;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.flow)
}
inline ::kentik::synthetics::v202309::FlowTest* TestSettings::_internal_mutable_flow() {
  if (!_internal_has_flow()) {
    clear_definition();
    set_has_flow();
    definition_.flow_ = CreateMaybeMessage< ::kentik::synthetics::v202309::FlowTest >(GetArena());
  }
  return definition_.flow_;
}
inline ::kentik::synthetics::v202309::FlowTest* TestSettings::mutable_flow() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.flow)
  return _internal_mutable_flow();
}

// .kentik.synthetics.v202309.DnsTest dns = 5[json_name = "dns"];
inline bool TestSettings::_internal_has_dns() const {
  return definition_case() == kDns;
}
inline bool TestSettings::has_dns() const {
  return _internal_has_dns();
}
inline void TestSettings::set_has_dns() {
  _oneof_case_[0] = kDns;
}
inline void TestSettings::clear_dns() {
  if (_internal_has_dns()) {
    if (GetArena() == nullptr) {
      delete definition_.dns_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::DnsTest* TestSettings::release_dns() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.dns)
  if (_internal_has_dns()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::DnsTest* temp = definition_.dns_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.dns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::DnsTest& TestSettings::_internal_dns() const {
  return _internal_has_dns()
      ? *definition_.dns_
      : *reinterpret_cast< ::kentik::synthetics::v202309::DnsTest*>(&::kentik::synthetics::v202309::_DnsTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::DnsTest& TestSettings::dns() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.dns)
  return _internal_dns();
}
inline ::kentik::synthetics::v202309::DnsTest* TestSettings::unsafe_arena_release_dns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.dns)
  if (_internal_has_dns()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::DnsTest* temp = definition_.dns_;
    definition_.dns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_dns(::kentik::synthetics::v202309::DnsTest* dns) {
  clear_definition();
  if (dns) {
    set_has_dns();
    definition_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.dns)
}
inline ::kentik::synthetics::v202309::DnsTest* TestSettings::_internal_mutable_dns() {
  if (!_internal_has_dns()) {
    clear_definition();
    set_has_dns();
    definition_.dns_ = CreateMaybeMessage< ::kentik::synthetics::v202309::DnsTest >(GetArena());
  }
  return definition_.dns_;
}
inline ::kentik::synthetics::v202309::DnsTest* TestSettings::mutable_dns() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.dns)
  return _internal_mutable_dns();
}

// .kentik.synthetics.v202309.UrlTest url = 6[json_name = "url"];
inline bool TestSettings::_internal_has_url() const {
  return definition_case() == kUrl;
}
inline bool TestSettings::has_url() const {
  return _internal_has_url();
}
inline void TestSettings::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void TestSettings::clear_url() {
  if (_internal_has_url()) {
    if (GetArena() == nullptr) {
      delete definition_.url_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::UrlTest* TestSettings::release_url() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.url)
  if (_internal_has_url()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::UrlTest* temp = definition_.url_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::UrlTest& TestSettings::_internal_url() const {
  return _internal_has_url()
      ? *definition_.url_
      : *reinterpret_cast< ::kentik::synthetics::v202309::UrlTest*>(&::kentik::synthetics::v202309::_UrlTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::UrlTest& TestSettings::url() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.url)
  return _internal_url();
}
inline ::kentik::synthetics::v202309::UrlTest* TestSettings::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.url)
  if (_internal_has_url()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::UrlTest* temp = definition_.url_;
    definition_.url_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_url(::kentik::synthetics::v202309::UrlTest* url) {
  clear_definition();
  if (url) {
    set_has_url();
    definition_.url_ = url;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.url)
}
inline ::kentik::synthetics::v202309::UrlTest* TestSettings::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_definition();
    set_has_url();
    definition_.url_ = CreateMaybeMessage< ::kentik::synthetics::v202309::UrlTest >(GetArena());
  }
  return definition_.url_;
}
inline ::kentik::synthetics::v202309::UrlTest* TestSettings::mutable_url() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.url)
  return _internal_mutable_url();
}

// .kentik.synthetics.v202309.IpTest network_grid = 7[json_name = "networkGrid"];
inline bool TestSettings::_internal_has_network_grid() const {
  return definition_case() == kNetworkGrid;
}
inline bool TestSettings::has_network_grid() const {
  return _internal_has_network_grid();
}
inline void TestSettings::set_has_network_grid() {
  _oneof_case_[0] = kNetworkGrid;
}
inline void TestSettings::clear_network_grid() {
  if (_internal_has_network_grid()) {
    if (GetArena() == nullptr) {
      delete definition_.network_grid_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::IpTest* TestSettings::release_network_grid() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.network_grid)
  if (_internal_has_network_grid()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::IpTest* temp = definition_.network_grid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.network_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::IpTest& TestSettings::_internal_network_grid() const {
  return _internal_has_network_grid()
      ? *definition_.network_grid_
      : *reinterpret_cast< ::kentik::synthetics::v202309::IpTest*>(&::kentik::synthetics::v202309::_IpTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::IpTest& TestSettings::network_grid() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.network_grid)
  return _internal_network_grid();
}
inline ::kentik::synthetics::v202309::IpTest* TestSettings::unsafe_arena_release_network_grid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.network_grid)
  if (_internal_has_network_grid()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::IpTest* temp = definition_.network_grid_;
    definition_.network_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_network_grid(::kentik::synthetics::v202309::IpTest* network_grid) {
  clear_definition();
  if (network_grid) {
    set_has_network_grid();
    definition_.network_grid_ = network_grid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.network_grid)
}
inline ::kentik::synthetics::v202309::IpTest* TestSettings::_internal_mutable_network_grid() {
  if (!_internal_has_network_grid()) {
    clear_definition();
    set_has_network_grid();
    definition_.network_grid_ = CreateMaybeMessage< ::kentik::synthetics::v202309::IpTest >(GetArena());
  }
  return definition_.network_grid_;
}
inline ::kentik::synthetics::v202309::IpTest* TestSettings::mutable_network_grid() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.network_grid)
  return _internal_mutable_network_grid();
}

// .kentik.synthetics.v202309.PageLoadTest page_load = 8[json_name = "pageLoad"];
inline bool TestSettings::_internal_has_page_load() const {
  return definition_case() == kPageLoad;
}
inline bool TestSettings::has_page_load() const {
  return _internal_has_page_load();
}
inline void TestSettings::set_has_page_load() {
  _oneof_case_[0] = kPageLoad;
}
inline void TestSettings::clear_page_load() {
  if (_internal_has_page_load()) {
    if (GetArena() == nullptr) {
      delete definition_.page_load_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::PageLoadTest* TestSettings::release_page_load() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.page_load)
  if (_internal_has_page_load()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::PageLoadTest* temp = definition_.page_load_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.page_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::PageLoadTest& TestSettings::_internal_page_load() const {
  return _internal_has_page_load()
      ? *definition_.page_load_
      : *reinterpret_cast< ::kentik::synthetics::v202309::PageLoadTest*>(&::kentik::synthetics::v202309::_PageLoadTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::PageLoadTest& TestSettings::page_load() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.page_load)
  return _internal_page_load();
}
inline ::kentik::synthetics::v202309::PageLoadTest* TestSettings::unsafe_arena_release_page_load() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.page_load)
  if (_internal_has_page_load()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::PageLoadTest* temp = definition_.page_load_;
    definition_.page_load_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_page_load(::kentik::synthetics::v202309::PageLoadTest* page_load) {
  clear_definition();
  if (page_load) {
    set_has_page_load();
    definition_.page_load_ = page_load;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.page_load)
}
inline ::kentik::synthetics::v202309::PageLoadTest* TestSettings::_internal_mutable_page_load() {
  if (!_internal_has_page_load()) {
    clear_definition();
    set_has_page_load();
    definition_.page_load_ = CreateMaybeMessage< ::kentik::synthetics::v202309::PageLoadTest >(GetArena());
  }
  return definition_.page_load_;
}
inline ::kentik::synthetics::v202309::PageLoadTest* TestSettings::mutable_page_load() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.page_load)
  return _internal_mutable_page_load();
}

// .kentik.synthetics.v202309.DnsTest dns_grid = 9[json_name = "dnsGrid"];
inline bool TestSettings::_internal_has_dns_grid() const {
  return definition_case() == kDnsGrid;
}
inline bool TestSettings::has_dns_grid() const {
  return _internal_has_dns_grid();
}
inline void TestSettings::set_has_dns_grid() {
  _oneof_case_[0] = kDnsGrid;
}
inline void TestSettings::clear_dns_grid() {
  if (_internal_has_dns_grid()) {
    if (GetArena() == nullptr) {
      delete definition_.dns_grid_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::DnsTest* TestSettings::release_dns_grid() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.dns_grid)
  if (_internal_has_dns_grid()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::DnsTest* temp = definition_.dns_grid_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.dns_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::DnsTest& TestSettings::_internal_dns_grid() const {
  return _internal_has_dns_grid()
      ? *definition_.dns_grid_
      : *reinterpret_cast< ::kentik::synthetics::v202309::DnsTest*>(&::kentik::synthetics::v202309::_DnsTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::DnsTest& TestSettings::dns_grid() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.dns_grid)
  return _internal_dns_grid();
}
inline ::kentik::synthetics::v202309::DnsTest* TestSettings::unsafe_arena_release_dns_grid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.dns_grid)
  if (_internal_has_dns_grid()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::DnsTest* temp = definition_.dns_grid_;
    definition_.dns_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_dns_grid(::kentik::synthetics::v202309::DnsTest* dns_grid) {
  clear_definition();
  if (dns_grid) {
    set_has_dns_grid();
    definition_.dns_grid_ = dns_grid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.dns_grid)
}
inline ::kentik::synthetics::v202309::DnsTest* TestSettings::_internal_mutable_dns_grid() {
  if (!_internal_has_dns_grid()) {
    clear_definition();
    set_has_dns_grid();
    definition_.dns_grid_ = CreateMaybeMessage< ::kentik::synthetics::v202309::DnsTest >(GetArena());
  }
  return definition_.dns_grid_;
}
inline ::kentik::synthetics::v202309::DnsTest* TestSettings::mutable_dns_grid() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.dns_grid)
  return _internal_mutable_dns_grid();
}

// .kentik.synthetics.v202309.NetworkMeshTest network_mesh = 18[json_name = "networkMesh"];
inline bool TestSettings::_internal_has_network_mesh() const {
  return definition_case() == kNetworkMesh;
}
inline bool TestSettings::has_network_mesh() const {
  return _internal_has_network_mesh();
}
inline void TestSettings::set_has_network_mesh() {
  _oneof_case_[0] = kNetworkMesh;
}
inline void TestSettings::clear_network_mesh() {
  if (_internal_has_network_mesh()) {
    if (GetArena() == nullptr) {
      delete definition_.network_mesh_;
    }
    clear_has_definition();
  }
}
inline ::kentik::synthetics::v202309::NetworkMeshTest* TestSettings::release_network_mesh() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.network_mesh)
  if (_internal_has_network_mesh()) {
    clear_has_definition();
      ::kentik::synthetics::v202309::NetworkMeshTest* temp = definition_.network_mesh_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    definition_.network_mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::NetworkMeshTest& TestSettings::_internal_network_mesh() const {
  return _internal_has_network_mesh()
      ? *definition_.network_mesh_
      : *reinterpret_cast< ::kentik::synthetics::v202309::NetworkMeshTest*>(&::kentik::synthetics::v202309::_NetworkMeshTest_default_instance_);
}
inline const ::kentik::synthetics::v202309::NetworkMeshTest& TestSettings::network_mesh() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.network_mesh)
  return _internal_network_mesh();
}
inline ::kentik::synthetics::v202309::NetworkMeshTest* TestSettings::unsafe_arena_release_network_mesh() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.network_mesh)
  if (_internal_has_network_mesh()) {
    clear_has_definition();
    ::kentik::synthetics::v202309::NetworkMeshTest* temp = definition_.network_mesh_;
    definition_.network_mesh_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TestSettings::unsafe_arena_set_allocated_network_mesh(::kentik::synthetics::v202309::NetworkMeshTest* network_mesh) {
  clear_definition();
  if (network_mesh) {
    set_has_network_mesh();
    definition_.network_mesh_ = network_mesh;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.network_mesh)
}
inline ::kentik::synthetics::v202309::NetworkMeshTest* TestSettings::_internal_mutable_network_mesh() {
  if (!_internal_has_network_mesh()) {
    clear_definition();
    set_has_network_mesh();
    definition_.network_mesh_ = CreateMaybeMessage< ::kentik::synthetics::v202309::NetworkMeshTest >(GetArena());
  }
  return definition_.network_mesh_;
}
inline ::kentik::synthetics::v202309::NetworkMeshTest* TestSettings::mutable_network_mesh() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.network_mesh)
  return _internal_mutable_network_mesh();
}

// repeated string agent_ids = 10[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int TestSettings::_internal_agent_ids_size() const {
  return agent_ids_.size();
}
inline int TestSettings::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void TestSettings::clear_agent_ids() {
  agent_ids_.Clear();
}
inline std::string* TestSettings::add_agent_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.TestSettings.agent_ids)
  return _internal_add_agent_ids();
}
inline const std::string& TestSettings::_internal_agent_ids(int index) const {
  return agent_ids_.Get(index);
}
inline const std::string& TestSettings::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.agent_ids)
  return _internal_agent_ids(index);
}
inline std::string* TestSettings::mutable_agent_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.agent_ids)
  return agent_ids_.Mutable(index);
}
inline void TestSettings::set_agent_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.agent_ids)
  agent_ids_.Mutable(index)->assign(value);
}
inline void TestSettings::set_agent_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.agent_ids)
  agent_ids_.Mutable(index)->assign(std::move(value));
}
inline void TestSettings::set_agent_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TestSettings.agent_ids)
}
inline void TestSettings::set_agent_ids(int index, const char* value, size_t size) {
  agent_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TestSettings.agent_ids)
}
inline std::string* TestSettings::_internal_add_agent_ids() {
  return agent_ids_.Add();
}
inline void TestSettings::add_agent_ids(const std::string& value) {
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.TestSettings.agent_ids)
}
inline void TestSettings::add_agent_ids(std::string&& value) {
  agent_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.TestSettings.agent_ids)
}
inline void TestSettings::add_agent_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.TestSettings.agent_ids)
}
inline void TestSettings::add_agent_ids(const char* value, size_t size) {
  agent_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.TestSettings.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestSettings::agent_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.TestSettings.agent_ids)
  return agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestSettings::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.TestSettings.agent_ids)
  return &agent_ids_;
}

// repeated string tasks = 11[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int TestSettings::_internal_tasks_size() const {
  return tasks_.size();
}
inline int TestSettings::tasks_size() const {
  return _internal_tasks_size();
}
inline void TestSettings::clear_tasks() {
  tasks_.Clear();
}
inline std::string* TestSettings::add_tasks() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.TestSettings.tasks)
  return _internal_add_tasks();
}
inline const std::string& TestSettings::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const std::string& TestSettings::tasks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.tasks)
  return _internal_tasks(index);
}
inline std::string* TestSettings::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.tasks)
  return tasks_.Mutable(index);
}
inline void TestSettings::set_tasks(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.tasks)
  tasks_.Mutable(index)->assign(value);
}
inline void TestSettings::set_tasks(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.tasks)
  tasks_.Mutable(index)->assign(std::move(value));
}
inline void TestSettings::set_tasks(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TestSettings.tasks)
}
inline void TestSettings::set_tasks(int index, const char* value, size_t size) {
  tasks_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TestSettings.tasks)
}
inline std::string* TestSettings::_internal_add_tasks() {
  return tasks_.Add();
}
inline void TestSettings::add_tasks(const std::string& value) {
  tasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.TestSettings.tasks)
}
inline void TestSettings::add_tasks(std::string&& value) {
  tasks_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.TestSettings.tasks)
}
inline void TestSettings::add_tasks(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tasks_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.TestSettings.tasks)
}
inline void TestSettings::add_tasks(const char* value, size_t size) {
  tasks_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.TestSettings.tasks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestSettings::tasks() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.TestSettings.tasks)
  return tasks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestSettings::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.TestSettings.tasks)
  return &tasks_;
}

// .kentik.synthetics.v202309.HealthSettings health_settings = 12[json_name = "healthSettings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool TestSettings::_internal_has_health_settings() const {
  return this != internal_default_instance() && health_settings_ != nullptr;
}
inline bool TestSettings::has_health_settings() const {
  return _internal_has_health_settings();
}
inline void TestSettings::clear_health_settings() {
  if (GetArena() == nullptr && health_settings_ != nullptr) {
    delete health_settings_;
  }
  health_settings_ = nullptr;
}
inline const ::kentik::synthetics::v202309::HealthSettings& TestSettings::_internal_health_settings() const {
  const ::kentik::synthetics::v202309::HealthSettings* p = health_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::HealthSettings*>(
      &::kentik::synthetics::v202309::_HealthSettings_default_instance_);
}
inline const ::kentik::synthetics::v202309::HealthSettings& TestSettings::health_settings() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.health_settings)
  return _internal_health_settings();
}
inline void TestSettings::unsafe_arena_set_allocated_health_settings(
    ::kentik::synthetics::v202309::HealthSettings* health_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(health_settings_);
  }
  health_settings_ = health_settings;
  if (health_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.health_settings)
}
inline ::kentik::synthetics::v202309::HealthSettings* TestSettings::release_health_settings() {
  auto temp = unsafe_arena_release_health_settings();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::HealthSettings* TestSettings::unsafe_arena_release_health_settings() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.health_settings)
  
  ::kentik::synthetics::v202309::HealthSettings* temp = health_settings_;
  health_settings_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::HealthSettings* TestSettings::_internal_mutable_health_settings() {
  
  if (health_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::HealthSettings>(GetArena());
    health_settings_ = p;
  }
  return health_settings_;
}
inline ::kentik::synthetics::v202309::HealthSettings* TestSettings::mutable_health_settings() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.health_settings)
  return _internal_mutable_health_settings();
}
inline void TestSettings::set_allocated_health_settings(::kentik::synthetics::v202309::HealthSettings* health_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete health_settings_;
  }
  if (health_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(health_settings);
    if (message_arena != submessage_arena) {
      health_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health_settings, submessage_arena);
    }
    
  } else {
    
  }
  health_settings_ = health_settings;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.health_settings)
}

// .kentik.synthetics.v202309.TestPingSettings ping = 13[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool TestSettings::_internal_has_ping() const {
  return this != internal_default_instance() && ping_ != nullptr;
}
inline bool TestSettings::has_ping() const {
  return _internal_has_ping();
}
inline void TestSettings::clear_ping() {
  if (GetArena() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
}
inline const ::kentik::synthetics::v202309::TestPingSettings& TestSettings::_internal_ping() const {
  const ::kentik::synthetics::v202309::TestPingSettings* p = ping_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::TestPingSettings*>(
      &::kentik::synthetics::v202309::_TestPingSettings_default_instance_);
}
inline const ::kentik::synthetics::v202309::TestPingSettings& TestSettings::ping() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.ping)
  return _internal_ping();
}
inline void TestSettings::unsafe_arena_set_allocated_ping(
    ::kentik::synthetics::v202309::TestPingSettings* ping) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ping_);
  }
  ping_ = ping;
  if (ping) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.ping)
}
inline ::kentik::synthetics::v202309::TestPingSettings* TestSettings::release_ping() {
  auto temp = unsafe_arena_release_ping();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::TestPingSettings* TestSettings::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.ping)
  
  ::kentik::synthetics::v202309::TestPingSettings* temp = ping_;
  ping_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::TestPingSettings* TestSettings::_internal_mutable_ping() {
  
  if (ping_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::TestPingSettings>(GetArena());
    ping_ = p;
  }
  return ping_;
}
inline ::kentik::synthetics::v202309::TestPingSettings* TestSettings::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.ping)
  return _internal_mutable_ping();
}
inline void TestSettings::set_allocated_ping(::kentik::synthetics::v202309::TestPingSettings* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ping_;
  }
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    
  } else {
    
  }
  ping_ = ping;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.ping)
}

// .kentik.synthetics.v202309.TestTraceSettings trace = 14[json_name = "trace", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool TestSettings::_internal_has_trace() const {
  return this != internal_default_instance() && trace_ != nullptr;
}
inline bool TestSettings::has_trace() const {
  return _internal_has_trace();
}
inline void TestSettings::clear_trace() {
  if (GetArena() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
}
inline const ::kentik::synthetics::v202309::TestTraceSettings& TestSettings::_internal_trace() const {
  const ::kentik::synthetics::v202309::TestTraceSettings* p = trace_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::TestTraceSettings*>(
      &::kentik::synthetics::v202309::_TestTraceSettings_default_instance_);
}
inline const ::kentik::synthetics::v202309::TestTraceSettings& TestSettings::trace() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.trace)
  return _internal_trace();
}
inline void TestSettings::unsafe_arena_set_allocated_trace(
    ::kentik::synthetics::v202309::TestTraceSettings* trace) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trace_);
  }
  trace_ = trace;
  if (trace) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.trace)
}
inline ::kentik::synthetics::v202309::TestTraceSettings* TestSettings::release_trace() {
  auto temp = unsafe_arena_release_trace();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::TestTraceSettings* TestSettings::unsafe_arena_release_trace() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.trace)
  
  ::kentik::synthetics::v202309::TestTraceSettings* temp = trace_;
  trace_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::TestTraceSettings* TestSettings::_internal_mutable_trace() {
  
  if (trace_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::TestTraceSettings>(GetArena());
    trace_ = p;
  }
  return trace_;
}
inline ::kentik::synthetics::v202309::TestTraceSettings* TestSettings::mutable_trace() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.trace)
  return _internal_mutable_trace();
}
inline void TestSettings::set_allocated_trace(::kentik::synthetics::v202309::TestTraceSettings* trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete trace_;
  }
  if (trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(trace);
    if (message_arena != submessage_arena) {
      trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trace, submessage_arena);
    }
    
  } else {
    
  }
  trace_ = trace;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.trace)
}

// uint32 period = 15[json_name = "period", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestSettings::clear_period() {
  period_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::_internal_period() const {
  return period_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestSettings::period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.period)
  return _internal_period();
}
inline void TestSettings::_internal_set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  period_ = value;
}
inline void TestSettings::set_period(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.period)
}

// .kentik.synthetics.v202309.IPFamily family = 16[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestSettings::clear_family() {
  family_ = 0;
}
inline ::kentik::synthetics::v202309::IPFamily TestSettings::_internal_family() const {
  return static_cast< ::kentik::synthetics::v202309::IPFamily >(family_);
}
inline ::kentik::synthetics::v202309::IPFamily TestSettings::family() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.family)
  return _internal_family();
}
inline void TestSettings::_internal_set_family(::kentik::synthetics::v202309::IPFamily value) {
  
  family_ = value;
}
inline void TestSettings::set_family(::kentik::synthetics::v202309::IPFamily value) {
  _internal_set_family(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.family)
}

// repeated string notification_channels = 17[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int TestSettings::_internal_notification_channels_size() const {
  return notification_channels_.size();
}
inline int TestSettings::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void TestSettings::clear_notification_channels() {
  notification_channels_.Clear();
}
inline std::string* TestSettings::add_notification_channels() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.TestSettings.notification_channels)
  return _internal_add_notification_channels();
}
inline const std::string& TestSettings::_internal_notification_channels(int index) const {
  return notification_channels_.Get(index);
}
inline const std::string& TestSettings::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.notification_channels)
  return _internal_notification_channels(index);
}
inline std::string* TestSettings::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.notification_channels)
  return notification_channels_.Mutable(index);
}
inline void TestSettings::set_notification_channels(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.notification_channels)
  notification_channels_.Mutable(index)->assign(value);
}
inline void TestSettings::set_notification_channels(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.notification_channels)
  notification_channels_.Mutable(index)->assign(std::move(value));
}
inline void TestSettings::set_notification_channels(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_channels_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TestSettings.notification_channels)
}
inline void TestSettings::set_notification_channels(int index, const char* value, size_t size) {
  notification_channels_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TestSettings.notification_channels)
}
inline std::string* TestSettings::_internal_add_notification_channels() {
  return notification_channels_.Add();
}
inline void TestSettings::add_notification_channels(const std::string& value) {
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.TestSettings.notification_channels)
}
inline void TestSettings::add_notification_channels(std::string&& value) {
  notification_channels_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.TestSettings.notification_channels)
}
inline void TestSettings::add_notification_channels(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notification_channels_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.TestSettings.notification_channels)
}
inline void TestSettings::add_notification_channels(const char* value, size_t size) {
  notification_channels_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.TestSettings.notification_channels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestSettings::notification_channels() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.TestSettings.notification_channels)
  return notification_channels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestSettings::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.TestSettings.notification_channels)
  return &notification_channels_;
}

// string notes = 19[json_name = "notes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestSettings::clear_notes() {
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestSettings::notes() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestSettings.notes)
  return _internal_notes();
}
inline void TestSettings::set_notes(const std::string& value) {
  _internal_set_notes(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestSettings.notes)
}
inline std::string* TestSettings::mutable_notes() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestSettings.notes)
  return _internal_mutable_notes();
}
inline const std::string& TestSettings::_internal_notes() const {
  return notes_.Get();
}
inline void TestSettings::_internal_set_notes(const std::string& value) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestSettings::set_notes(std::string&& value) {
  
  notes_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.TestSettings.notes)
}
inline void TestSettings::set_notes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TestSettings.notes)
}
inline void TestSettings::set_notes(const char* value,
    size_t size) {
  
  notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TestSettings.notes)
}
inline std::string* TestSettings::_internal_mutable_notes() {
  
  return notes_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestSettings::release_notes() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestSettings.notes)
  return notes_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestSettings::set_allocated_notes(std::string* notes) {
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notes,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.notes)
}
inline std::string* TestSettings::unsafe_arena_release_notes() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestSettings.notes)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return notes_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestSettings::unsafe_arena_set_allocated_notes(
    std::string* notes) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (notes != nullptr) {
    
  } else {
    
  }
  notes_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      notes, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestSettings.notes)
}

inline bool TestSettings::has_definition() const {
  return definition_case() != DEFINITION_NOT_SET;
}
inline void TestSettings::clear_has_definition() {
  _oneof_case_[0] = DEFINITION_NOT_SET;
}
inline TestSettings::DefinitionCase TestSettings::definition_case() const {
  return TestSettings::DefinitionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TestPingSettings

// uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestPingSettings::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPingSettings::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPingSettings::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestPingSettings.count)
  return _internal_count();
}
inline void TestPingSettings::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void TestPingSettings::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestPingSettings.count)
}

// string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestPingSettings::clear_protocol() {
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestPingSettings::protocol() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestPingSettings.protocol)
  return _internal_protocol();
}
inline void TestPingSettings::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestPingSettings.protocol)
}
inline std::string* TestPingSettings::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestPingSettings.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& TestPingSettings::_internal_protocol() const {
  return protocol_.Get();
}
inline void TestPingSettings::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestPingSettings::set_protocol(std::string&& value) {
  
  protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.TestPingSettings.protocol)
}
inline void TestPingSettings::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TestPingSettings.protocol)
}
inline void TestPingSettings::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TestPingSettings.protocol)
}
inline std::string* TestPingSettings::_internal_mutable_protocol() {
  
  return protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestPingSettings::release_protocol() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestPingSettings.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestPingSettings::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestPingSettings.protocol)
}
inline std::string* TestPingSettings::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestPingSettings.protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestPingSettings::unsafe_arena_set_allocated_protocol(
    std::string* protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestPingSettings.protocol)
}

// uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestPingSettings::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPingSettings::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPingSettings::port() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestPingSettings.port)
  return _internal_port();
}
inline void TestPingSettings::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void TestPingSettings::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestPingSettings.port)
}

// uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestPingSettings::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPingSettings::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPingSettings::timeout() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestPingSettings.timeout)
  return _internal_timeout();
}
inline void TestPingSettings::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
}
inline void TestPingSettings::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestPingSettings.timeout)
}

// float delay = 5[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestPingSettings::clear_delay() {
  delay_ = 0;
}
inline float TestPingSettings::_internal_delay() const {
  return delay_;
}
inline float TestPingSettings::delay() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestPingSettings.delay)
  return _internal_delay();
}
inline void TestPingSettings::_internal_set_delay(float value) {
  
  delay_ = value;
}
inline void TestPingSettings::set_delay(float value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestPingSettings.delay)
}

// uint32 dscp = 6[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestPingSettings::clear_dscp() {
  dscp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPingSettings::_internal_dscp() const {
  return dscp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestPingSettings::dscp() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestPingSettings.dscp)
  return _internal_dscp();
}
inline void TestPingSettings::_internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dscp_ = value;
}
inline void TestPingSettings::set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dscp(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestPingSettings.dscp)
}

// -------------------------------------------------------------------

// TestTraceSettings

// uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestTraceSettings::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestTraceSettings.count)
  return _internal_count();
}
inline void TestTraceSettings::_internal_set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
}
inline void TestTraceSettings::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestTraceSettings.count)
}

// string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestTraceSettings::clear_protocol() {
  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestTraceSettings::protocol() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestTraceSettings.protocol)
  return _internal_protocol();
}
inline void TestTraceSettings::set_protocol(const std::string& value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestTraceSettings.protocol)
}
inline std::string* TestTraceSettings::mutable_protocol() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestTraceSettings.protocol)
  return _internal_mutable_protocol();
}
inline const std::string& TestTraceSettings::_internal_protocol() const {
  return protocol_.Get();
}
inline void TestTraceSettings::_internal_set_protocol(const std::string& value) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestTraceSettings::set_protocol(std::string&& value) {
  
  protocol_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.TestTraceSettings.protocol)
}
inline void TestTraceSettings::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TestTraceSettings.protocol)
}
inline void TestTraceSettings::set_protocol(const char* value,
    size_t size) {
  
  protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TestTraceSettings.protocol)
}
inline std::string* TestTraceSettings::_internal_mutable_protocol() {
  
  return protocol_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestTraceSettings::release_protocol() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestTraceSettings.protocol)
  return protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestTraceSettings::set_allocated_protocol(std::string* protocol) {
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestTraceSettings.protocol)
}
inline std::string* TestTraceSettings::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestTraceSettings.protocol)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return protocol_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestTraceSettings::unsafe_arena_set_allocated_protocol(
    std::string* protocol) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (protocol != nullptr) {
    
  } else {
    
  }
  protocol_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      protocol, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestTraceSettings.protocol)
}

// uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestTraceSettings::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::port() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestTraceSettings.port)
  return _internal_port();
}
inline void TestTraceSettings::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void TestTraceSettings::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestTraceSettings.port)
}

// uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestTraceSettings::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::timeout() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestTraceSettings.timeout)
  return _internal_timeout();
}
inline void TestTraceSettings::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
}
inline void TestTraceSettings::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestTraceSettings.timeout)
}

// uint32 limit = 5[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestTraceSettings::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::limit() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestTraceSettings.limit)
  return _internal_limit();
}
inline void TestTraceSettings::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void TestTraceSettings::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestTraceSettings.limit)
}

// float delay = 6[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestTraceSettings::clear_delay() {
  delay_ = 0;
}
inline float TestTraceSettings::_internal_delay() const {
  return delay_;
}
inline float TestTraceSettings::delay() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestTraceSettings.delay)
  return _internal_delay();
}
inline void TestTraceSettings::_internal_set_delay(float value) {
  
  delay_ = value;
}
inline void TestTraceSettings::set_delay(float value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestTraceSettings.delay)
}

// uint32 dscp = 7[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestTraceSettings::clear_dscp() {
  dscp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::_internal_dscp() const {
  return dscp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TestTraceSettings::dscp() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestTraceSettings.dscp)
  return _internal_dscp();
}
inline void TestTraceSettings::_internal_set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  dscp_ = value;
}
inline void TestTraceSettings::set_dscp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dscp(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestTraceSettings.dscp)
}

// -------------------------------------------------------------------

// ActivationSettings

// string grace_period = 1[json_name = "gracePeriod", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ActivationSettings::clear_grace_period() {
  grace_period_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActivationSettings::grace_period() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.ActivationSettings.grace_period)
  return _internal_grace_period();
}
inline void ActivationSettings::set_grace_period(const std::string& value) {
  _internal_set_grace_period(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.ActivationSettings.grace_period)
}
inline std::string* ActivationSettings::mutable_grace_period() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.ActivationSettings.grace_period)
  return _internal_mutable_grace_period();
}
inline const std::string& ActivationSettings::_internal_grace_period() const {
  return grace_period_.Get();
}
inline void ActivationSettings::_internal_set_grace_period(const std::string& value) {
  
  grace_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActivationSettings::set_grace_period(std::string&& value) {
  
  grace_period_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.ActivationSettings.grace_period)
}
inline void ActivationSettings::set_grace_period(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  grace_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.ActivationSettings.grace_period)
}
inline void ActivationSettings::set_grace_period(const char* value,
    size_t size) {
  
  grace_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.ActivationSettings.grace_period)
}
inline std::string* ActivationSettings::_internal_mutable_grace_period() {
  
  return grace_period_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActivationSettings::release_grace_period() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.ActivationSettings.grace_period)
  return grace_period_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivationSettings::set_allocated_grace_period(std::string* grace_period) {
  if (grace_period != nullptr) {
    
  } else {
    
  }
  grace_period_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), grace_period,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.ActivationSettings.grace_period)
}
inline std::string* ActivationSettings::unsafe_arena_release_grace_period() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.ActivationSettings.grace_period)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return grace_period_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ActivationSettings::unsafe_arena_set_allocated_grace_period(
    std::string* grace_period) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (grace_period != nullptr) {
    
  } else {
    
  }
  grace_period_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      grace_period, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.ActivationSettings.grace_period)
}

// string time_unit = 2[json_name = "timeUnit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ActivationSettings::clear_time_unit() {
  time_unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActivationSettings::time_unit() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.ActivationSettings.time_unit)
  return _internal_time_unit();
}
inline void ActivationSettings::set_time_unit(const std::string& value) {
  _internal_set_time_unit(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.ActivationSettings.time_unit)
}
inline std::string* ActivationSettings::mutable_time_unit() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.ActivationSettings.time_unit)
  return _internal_mutable_time_unit();
}
inline const std::string& ActivationSettings::_internal_time_unit() const {
  return time_unit_.Get();
}
inline void ActivationSettings::_internal_set_time_unit(const std::string& value) {
  
  time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActivationSettings::set_time_unit(std::string&& value) {
  
  time_unit_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.ActivationSettings.time_unit)
}
inline void ActivationSettings::set_time_unit(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.ActivationSettings.time_unit)
}
inline void ActivationSettings::set_time_unit(const char* value,
    size_t size) {
  
  time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.ActivationSettings.time_unit)
}
inline std::string* ActivationSettings::_internal_mutable_time_unit() {
  
  return time_unit_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActivationSettings::release_time_unit() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.ActivationSettings.time_unit)
  return time_unit_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivationSettings::set_allocated_time_unit(std::string* time_unit) {
  if (time_unit != nullptr) {
    
  } else {
    
  }
  time_unit_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_unit,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.ActivationSettings.time_unit)
}
inline std::string* ActivationSettings::unsafe_arena_release_time_unit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.ActivationSettings.time_unit)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return time_unit_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ActivationSettings::unsafe_arena_set_allocated_time_unit(
    std::string* time_unit) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time_unit != nullptr) {
    
  } else {
    
  }
  time_unit_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time_unit, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.ActivationSettings.time_unit)
}

// string time_window = 3[json_name = "timeWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ActivationSettings::clear_time_window() {
  time_window_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActivationSettings::time_window() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.ActivationSettings.time_window)
  return _internal_time_window();
}
inline void ActivationSettings::set_time_window(const std::string& value) {
  _internal_set_time_window(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.ActivationSettings.time_window)
}
inline std::string* ActivationSettings::mutable_time_window() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.ActivationSettings.time_window)
  return _internal_mutable_time_window();
}
inline const std::string& ActivationSettings::_internal_time_window() const {
  return time_window_.Get();
}
inline void ActivationSettings::_internal_set_time_window(const std::string& value) {
  
  time_window_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActivationSettings::set_time_window(std::string&& value) {
  
  time_window_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.ActivationSettings.time_window)
}
inline void ActivationSettings::set_time_window(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  time_window_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.ActivationSettings.time_window)
}
inline void ActivationSettings::set_time_window(const char* value,
    size_t size) {
  
  time_window_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.ActivationSettings.time_window)
}
inline std::string* ActivationSettings::_internal_mutable_time_window() {
  
  return time_window_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActivationSettings::release_time_window() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.ActivationSettings.time_window)
  return time_window_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivationSettings::set_allocated_time_window(std::string* time_window) {
  if (time_window != nullptr) {
    
  } else {
    
  }
  time_window_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time_window,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.ActivationSettings.time_window)
}
inline std::string* ActivationSettings::unsafe_arena_release_time_window() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.ActivationSettings.time_window)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return time_window_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ActivationSettings::unsafe_arena_set_allocated_time_window(
    std::string* time_window) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time_window != nullptr) {
    
  } else {
    
  }
  time_window_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time_window, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.ActivationSettings.time_window)
}

// string times = 4[json_name = "times", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ActivationSettings::clear_times() {
  times_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ActivationSettings::times() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.ActivationSettings.times)
  return _internal_times();
}
inline void ActivationSettings::set_times(const std::string& value) {
  _internal_set_times(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.ActivationSettings.times)
}
inline std::string* ActivationSettings::mutable_times() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.ActivationSettings.times)
  return _internal_mutable_times();
}
inline const std::string& ActivationSettings::_internal_times() const {
  return times_.Get();
}
inline void ActivationSettings::_internal_set_times(const std::string& value) {
  
  times_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ActivationSettings::set_times(std::string&& value) {
  
  times_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.ActivationSettings.times)
}
inline void ActivationSettings::set_times(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  times_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.ActivationSettings.times)
}
inline void ActivationSettings::set_times(const char* value,
    size_t size) {
  
  times_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.ActivationSettings.times)
}
inline std::string* ActivationSettings::_internal_mutable_times() {
  
  return times_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ActivationSettings::release_times() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.ActivationSettings.times)
  return times_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ActivationSettings::set_allocated_times(std::string* times) {
  if (times != nullptr) {
    
  } else {
    
  }
  times_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), times,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.ActivationSettings.times)
}
inline std::string* ActivationSettings::unsafe_arena_release_times() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.ActivationSettings.times)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return times_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ActivationSettings::unsafe_arena_set_allocated_times(
    std::string* times) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (times != nullptr) {
    
  } else {
    
  }
  times_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      times, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.ActivationSettings.times)
}

// -------------------------------------------------------------------

// HealthSettings

// float latency_critical = 1[json_name = "latencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_latency_critical() {
  latency_critical_ = 0;
}
inline float HealthSettings::_internal_latency_critical() const {
  return latency_critical_;
}
inline float HealthSettings::latency_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.latency_critical)
  return _internal_latency_critical();
}
inline void HealthSettings::_internal_set_latency_critical(float value) {
  
  latency_critical_ = value;
}
inline void HealthSettings::set_latency_critical(float value) {
  _internal_set_latency_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.latency_critical)
}

// float latency_warning = 2[json_name = "latencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_latency_warning() {
  latency_warning_ = 0;
}
inline float HealthSettings::_internal_latency_warning() const {
  return latency_warning_;
}
inline float HealthSettings::latency_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.latency_warning)
  return _internal_latency_warning();
}
inline void HealthSettings::_internal_set_latency_warning(float value) {
  
  latency_warning_ = value;
}
inline void HealthSettings::set_latency_warning(float value) {
  _internal_set_latency_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.latency_warning)
}

// float packet_loss_critical = 3[json_name = "packetLossCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_packet_loss_critical() {
  packet_loss_critical_ = 0;
}
inline float HealthSettings::_internal_packet_loss_critical() const {
  return packet_loss_critical_;
}
inline float HealthSettings::packet_loss_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.packet_loss_critical)
  return _internal_packet_loss_critical();
}
inline void HealthSettings::_internal_set_packet_loss_critical(float value) {
  
  packet_loss_critical_ = value;
}
inline void HealthSettings::set_packet_loss_critical(float value) {
  _internal_set_packet_loss_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.packet_loss_critical)
}

// float packet_loss_warning = 4[json_name = "packetLossWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_packet_loss_warning() {
  packet_loss_warning_ = 0;
}
inline float HealthSettings::_internal_packet_loss_warning() const {
  return packet_loss_warning_;
}
inline float HealthSettings::packet_loss_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.packet_loss_warning)
  return _internal_packet_loss_warning();
}
inline void HealthSettings::_internal_set_packet_loss_warning(float value) {
  
  packet_loss_warning_ = value;
}
inline void HealthSettings::set_packet_loss_warning(float value) {
  _internal_set_packet_loss_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.packet_loss_warning)
}

// float jitter_critical = 5[json_name = "jitterCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_jitter_critical() {
  jitter_critical_ = 0;
}
inline float HealthSettings::_internal_jitter_critical() const {
  return jitter_critical_;
}
inline float HealthSettings::jitter_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.jitter_critical)
  return _internal_jitter_critical();
}
inline void HealthSettings::_internal_set_jitter_critical(float value) {
  
  jitter_critical_ = value;
}
inline void HealthSettings::set_jitter_critical(float value) {
  _internal_set_jitter_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.jitter_critical)
}

// float jitter_warning = 6[json_name = "jitterWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_jitter_warning() {
  jitter_warning_ = 0;
}
inline float HealthSettings::_internal_jitter_warning() const {
  return jitter_warning_;
}
inline float HealthSettings::jitter_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.jitter_warning)
  return _internal_jitter_warning();
}
inline void HealthSettings::_internal_set_jitter_warning(float value) {
  
  jitter_warning_ = value;
}
inline void HealthSettings::set_jitter_warning(float value) {
  _internal_set_jitter_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.jitter_warning)
}

// float http_latency_critical = 7[json_name = "httpLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_http_latency_critical() {
  http_latency_critical_ = 0;
}
inline float HealthSettings::_internal_http_latency_critical() const {
  return http_latency_critical_;
}
inline float HealthSettings::http_latency_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.http_latency_critical)
  return _internal_http_latency_critical();
}
inline void HealthSettings::_internal_set_http_latency_critical(float value) {
  
  http_latency_critical_ = value;
}
inline void HealthSettings::set_http_latency_critical(float value) {
  _internal_set_http_latency_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.http_latency_critical)
}

// float http_latency_warning = 8[json_name = "httpLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_http_latency_warning() {
  http_latency_warning_ = 0;
}
inline float HealthSettings::_internal_http_latency_warning() const {
  return http_latency_warning_;
}
inline float HealthSettings::http_latency_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.http_latency_warning)
  return _internal_http_latency_warning();
}
inline void HealthSettings::_internal_set_http_latency_warning(float value) {
  
  http_latency_warning_ = value;
}
inline void HealthSettings::set_http_latency_warning(float value) {
  _internal_set_http_latency_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.http_latency_warning)
}

// repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int HealthSettings::_internal_http_valid_codes_size() const {
  return http_valid_codes_.size();
}
inline int HealthSettings::http_valid_codes_size() const {
  return _internal_http_valid_codes_size();
}
inline void HealthSettings::clear_http_valid_codes() {
  http_valid_codes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::_internal_http_valid_codes(int index) const {
  return http_valid_codes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::http_valid_codes(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.http_valid_codes)
  return _internal_http_valid_codes(index);
}
inline void HealthSettings::set_http_valid_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  http_valid_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.http_valid_codes)
}
inline void HealthSettings::_internal_add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  http_valid_codes_.Add(value);
}
inline void HealthSettings::add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_http_valid_codes(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.HealthSettings.http_valid_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HealthSettings::_internal_http_valid_codes() const {
  return http_valid_codes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HealthSettings::http_valid_codes() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.HealthSettings.http_valid_codes)
  return _internal_http_valid_codes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HealthSettings::_internal_mutable_http_valid_codes() {
  return &http_valid_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HealthSettings::mutable_http_valid_codes() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.HealthSettings.http_valid_codes)
  return _internal_mutable_http_valid_codes();
}

// repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int HealthSettings::_internal_dns_valid_codes_size() const {
  return dns_valid_codes_.size();
}
inline int HealthSettings::dns_valid_codes_size() const {
  return _internal_dns_valid_codes_size();
}
inline void HealthSettings::clear_dns_valid_codes() {
  dns_valid_codes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::_internal_dns_valid_codes(int index) const {
  return dns_valid_codes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::dns_valid_codes(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.dns_valid_codes)
  return _internal_dns_valid_codes(index);
}
inline void HealthSettings::set_dns_valid_codes(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dns_valid_codes_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.dns_valid_codes)
}
inline void HealthSettings::_internal_add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  dns_valid_codes_.Add(value);
}
inline void HealthSettings::add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_add_dns_valid_codes(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.HealthSettings.dns_valid_codes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HealthSettings::_internal_dns_valid_codes() const {
  return dns_valid_codes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
HealthSettings::dns_valid_codes() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.HealthSettings.dns_valid_codes)
  return _internal_dns_valid_codes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HealthSettings::_internal_mutable_dns_valid_codes() {
  return &dns_valid_codes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
HealthSettings::mutable_dns_valid_codes() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.HealthSettings.dns_valid_codes)
  return _internal_mutable_dns_valid_codes();
}

// float latency_critical_stddev = 11[json_name = "latencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_latency_critical_stddev() {
  latency_critical_stddev_ = 0;
}
inline float HealthSettings::_internal_latency_critical_stddev() const {
  return latency_critical_stddev_;
}
inline float HealthSettings::latency_critical_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.latency_critical_stddev)
  return _internal_latency_critical_stddev();
}
inline void HealthSettings::_internal_set_latency_critical_stddev(float value) {
  
  latency_critical_stddev_ = value;
}
inline void HealthSettings::set_latency_critical_stddev(float value) {
  _internal_set_latency_critical_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.latency_critical_stddev)
}

// float latency_warning_stddev = 12[json_name = "latencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_latency_warning_stddev() {
  latency_warning_stddev_ = 0;
}
inline float HealthSettings::_internal_latency_warning_stddev() const {
  return latency_warning_stddev_;
}
inline float HealthSettings::latency_warning_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.latency_warning_stddev)
  return _internal_latency_warning_stddev();
}
inline void HealthSettings::_internal_set_latency_warning_stddev(float value) {
  
  latency_warning_stddev_ = value;
}
inline void HealthSettings::set_latency_warning_stddev(float value) {
  _internal_set_latency_warning_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.latency_warning_stddev)
}

// float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_jitter_critical_stddev() {
  jitter_critical_stddev_ = 0;
}
inline float HealthSettings::_internal_jitter_critical_stddev() const {
  return jitter_critical_stddev_;
}
inline float HealthSettings::jitter_critical_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.jitter_critical_stddev)
  return _internal_jitter_critical_stddev();
}
inline void HealthSettings::_internal_set_jitter_critical_stddev(float value) {
  
  jitter_critical_stddev_ = value;
}
inline void HealthSettings::set_jitter_critical_stddev(float value) {
  _internal_set_jitter_critical_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.jitter_critical_stddev)
}

// float jitter_warning_stddev = 14[json_name = "jitterWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_jitter_warning_stddev() {
  jitter_warning_stddev_ = 0;
}
inline float HealthSettings::_internal_jitter_warning_stddev() const {
  return jitter_warning_stddev_;
}
inline float HealthSettings::jitter_warning_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.jitter_warning_stddev)
  return _internal_jitter_warning_stddev();
}
inline void HealthSettings::_internal_set_jitter_warning_stddev(float value) {
  
  jitter_warning_stddev_ = value;
}
inline void HealthSettings::set_jitter_warning_stddev(float value) {
  _internal_set_jitter_warning_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.jitter_warning_stddev)
}

// float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_http_latency_critical_stddev() {
  http_latency_critical_stddev_ = 0;
}
inline float HealthSettings::_internal_http_latency_critical_stddev() const {
  return http_latency_critical_stddev_;
}
inline float HealthSettings::http_latency_critical_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.http_latency_critical_stddev)
  return _internal_http_latency_critical_stddev();
}
inline void HealthSettings::_internal_set_http_latency_critical_stddev(float value) {
  
  http_latency_critical_stddev_ = value;
}
inline void HealthSettings::set_http_latency_critical_stddev(float value) {
  _internal_set_http_latency_critical_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.http_latency_critical_stddev)
}

// float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_http_latency_warning_stddev() {
  http_latency_warning_stddev_ = 0;
}
inline float HealthSettings::_internal_http_latency_warning_stddev() const {
  return http_latency_warning_stddev_;
}
inline float HealthSettings::http_latency_warning_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.http_latency_warning_stddev)
  return _internal_http_latency_warning_stddev();
}
inline void HealthSettings::_internal_set_http_latency_warning_stddev(float value) {
  
  http_latency_warning_stddev_ = value;
}
inline void HealthSettings::set_http_latency_warning_stddev(float value) {
  _internal_set_http_latency_warning_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.http_latency_warning_stddev)
}

// uint32 unhealthy_subtest_threshold = 17[json_name = "unhealthySubtestThreshold", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_unhealthy_subtest_threshold() {
  unhealthy_subtest_threshold_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::_internal_unhealthy_subtest_threshold() const {
  return unhealthy_subtest_threshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::unhealthy_subtest_threshold() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.unhealthy_subtest_threshold)
  return _internal_unhealthy_subtest_threshold();
}
inline void HealthSettings::_internal_set_unhealthy_subtest_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unhealthy_subtest_threshold_ = value;
}
inline void HealthSettings::set_unhealthy_subtest_threshold(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unhealthy_subtest_threshold(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.unhealthy_subtest_threshold)
}

// .kentik.synthetics.v202309.ActivationSettings activation = 18[json_name = "activation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool HealthSettings::_internal_has_activation() const {
  return this != internal_default_instance() && activation_ != nullptr;
}
inline bool HealthSettings::has_activation() const {
  return _internal_has_activation();
}
inline void HealthSettings::clear_activation() {
  if (GetArena() == nullptr && activation_ != nullptr) {
    delete activation_;
  }
  activation_ = nullptr;
}
inline const ::kentik::synthetics::v202309::ActivationSettings& HealthSettings::_internal_activation() const {
  const ::kentik::synthetics::v202309::ActivationSettings* p = activation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::ActivationSettings*>(
      &::kentik::synthetics::v202309::_ActivationSettings_default_instance_);
}
inline const ::kentik::synthetics::v202309::ActivationSettings& HealthSettings::activation() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.activation)
  return _internal_activation();
}
inline void HealthSettings::unsafe_arena_set_allocated_activation(
    ::kentik::synthetics::v202309::ActivationSettings* activation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activation_);
  }
  activation_ = activation;
  if (activation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.HealthSettings.activation)
}
inline ::kentik::synthetics::v202309::ActivationSettings* HealthSettings::release_activation() {
  auto temp = unsafe_arena_release_activation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::ActivationSettings* HealthSettings::unsafe_arena_release_activation() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.HealthSettings.activation)
  
  ::kentik::synthetics::v202309::ActivationSettings* temp = activation_;
  activation_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::ActivationSettings* HealthSettings::_internal_mutable_activation() {
  
  if (activation_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::ActivationSettings>(GetArena());
    activation_ = p;
  }
  return activation_;
}
inline ::kentik::synthetics::v202309::ActivationSettings* HealthSettings::mutable_activation() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.HealthSettings.activation)
  return _internal_mutable_activation();
}
inline void HealthSettings::set_allocated_activation(::kentik::synthetics::v202309::ActivationSettings* activation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete activation_;
  }
  if (activation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(activation);
    if (message_arena != submessage_arena) {
      activation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation, submessage_arena);
    }
    
  } else {
    
  }
  activation_ = activation;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.HealthSettings.activation)
}

// uint32 cert_expiry_warning = 19[json_name = "certExpiryWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_cert_expiry_warning() {
  cert_expiry_warning_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::_internal_cert_expiry_warning() const {
  return cert_expiry_warning_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::cert_expiry_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.cert_expiry_warning)
  return _internal_cert_expiry_warning();
}
inline void HealthSettings::_internal_set_cert_expiry_warning(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cert_expiry_warning_ = value;
}
inline void HealthSettings::set_cert_expiry_warning(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cert_expiry_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.cert_expiry_warning)
}

// uint32 cert_expiry_critical = 20[json_name = "certExpiryCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_cert_expiry_critical() {
  cert_expiry_critical_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::_internal_cert_expiry_critical() const {
  return cert_expiry_critical_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HealthSettings::cert_expiry_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.cert_expiry_critical)
  return _internal_cert_expiry_critical();
}
inline void HealthSettings::_internal_set_cert_expiry_critical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cert_expiry_critical_ = value;
}
inline void HealthSettings::set_cert_expiry_critical(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cert_expiry_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.cert_expiry_critical)
}

// string dns_valid_ips = 21[json_name = "dnsValidIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_dns_valid_ips() {
  dns_valid_ips_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HealthSettings::dns_valid_ips() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
  return _internal_dns_valid_ips();
}
inline void HealthSettings::set_dns_valid_ips(const std::string& value) {
  _internal_set_dns_valid_ips(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
}
inline std::string* HealthSettings::mutable_dns_valid_ips() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
  return _internal_mutable_dns_valid_ips();
}
inline const std::string& HealthSettings::_internal_dns_valid_ips() const {
  return dns_valid_ips_.Get();
}
inline void HealthSettings::_internal_set_dns_valid_ips(const std::string& value) {
  
  dns_valid_ips_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HealthSettings::set_dns_valid_ips(std::string&& value) {
  
  dns_valid_ips_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
}
inline void HealthSettings::set_dns_valid_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dns_valid_ips_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
}
inline void HealthSettings::set_dns_valid_ips(const char* value,
    size_t size) {
  
  dns_valid_ips_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
}
inline std::string* HealthSettings::_internal_mutable_dns_valid_ips() {
  
  return dns_valid_ips_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HealthSettings::release_dns_valid_ips() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
  return dns_valid_ips_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HealthSettings::set_allocated_dns_valid_ips(std::string* dns_valid_ips) {
  if (dns_valid_ips != nullptr) {
    
  } else {
    
  }
  dns_valid_ips_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dns_valid_ips,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
}
inline std::string* HealthSettings::unsafe_arena_release_dns_valid_ips() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dns_valid_ips_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HealthSettings::unsafe_arena_set_allocated_dns_valid_ips(
    std::string* dns_valid_ips) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dns_valid_ips != nullptr) {
    
  } else {
    
  }
  dns_valid_ips_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dns_valid_ips, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.HealthSettings.dns_valid_ips)
}

// float dns_latency_critical = 22[json_name = "dnsLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_dns_latency_critical() {
  dns_latency_critical_ = 0;
}
inline float HealthSettings::_internal_dns_latency_critical() const {
  return dns_latency_critical_;
}
inline float HealthSettings::dns_latency_critical() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.dns_latency_critical)
  return _internal_dns_latency_critical();
}
inline void HealthSettings::_internal_set_dns_latency_critical(float value) {
  
  dns_latency_critical_ = value;
}
inline void HealthSettings::set_dns_latency_critical(float value) {
  _internal_set_dns_latency_critical(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.dns_latency_critical)
}

// float dns_latency_warning = 23[json_name = "dnsLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_dns_latency_warning() {
  dns_latency_warning_ = 0;
}
inline float HealthSettings::_internal_dns_latency_warning() const {
  return dns_latency_warning_;
}
inline float HealthSettings::dns_latency_warning() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.dns_latency_warning)
  return _internal_dns_latency_warning();
}
inline void HealthSettings::_internal_set_dns_latency_warning(float value) {
  
  dns_latency_warning_ = value;
}
inline void HealthSettings::set_dns_latency_warning(float value) {
  _internal_set_dns_latency_warning(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.dns_latency_warning)
}

// float dns_latency_critical_stddev = 24[json_name = "dnsLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_dns_latency_critical_stddev() {
  dns_latency_critical_stddev_ = 0;
}
inline float HealthSettings::_internal_dns_latency_critical_stddev() const {
  return dns_latency_critical_stddev_;
}
inline float HealthSettings::dns_latency_critical_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.dns_latency_critical_stddev)
  return _internal_dns_latency_critical_stddev();
}
inline void HealthSettings::_internal_set_dns_latency_critical_stddev(float value) {
  
  dns_latency_critical_stddev_ = value;
}
inline void HealthSettings::set_dns_latency_critical_stddev(float value) {
  _internal_set_dns_latency_critical_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.dns_latency_critical_stddev)
}

// float dns_latency_warning_stddev = 25[json_name = "dnsLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_dns_latency_warning_stddev() {
  dns_latency_warning_stddev_ = 0;
}
inline float HealthSettings::_internal_dns_latency_warning_stddev() const {
  return dns_latency_warning_stddev_;
}
inline float HealthSettings::dns_latency_warning_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.dns_latency_warning_stddev)
  return _internal_dns_latency_warning_stddev();
}
inline void HealthSettings::_internal_set_dns_latency_warning_stddev(float value) {
  
  dns_latency_warning_stddev_ = value;
}
inline void HealthSettings::set_dns_latency_warning_stddev(float value) {
  _internal_set_dns_latency_warning_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.dns_latency_warning_stddev)
}

// bool per_agent_alerting = 26[json_name = "perAgentAlerting", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HealthSettings::clear_per_agent_alerting() {
  per_agent_alerting_ = false;
}
inline bool HealthSettings::_internal_per_agent_alerting() const {
  return per_agent_alerting_;
}
inline bool HealthSettings::per_agent_alerting() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HealthSettings.per_agent_alerting)
  return _internal_per_agent_alerting();
}
inline void HealthSettings::_internal_set_per_agent_alerting(bool value) {
  
  per_agent_alerting_ = value;
}
inline void HealthSettings::set_per_agent_alerting(bool value) {
  _internal_set_per_agent_alerting(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HealthSettings.per_agent_alerting)
}

// -------------------------------------------------------------------

// HostnameTest

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HostnameTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HostnameTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HostnameTest.target)
  return _internal_target();
}
inline void HostnameTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HostnameTest.target)
}
inline std::string* HostnameTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.HostnameTest.target)
  return _internal_mutable_target();
}
inline const std::string& HostnameTest::_internal_target() const {
  return target_.Get();
}
inline void HostnameTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HostnameTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.HostnameTest.target)
}
inline void HostnameTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.HostnameTest.target)
}
inline void HostnameTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.HostnameTest.target)
}
inline std::string* HostnameTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HostnameTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.HostnameTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HostnameTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.HostnameTest.target)
}
inline std::string* HostnameTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.HostnameTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HostnameTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.HostnameTest.target)
}

// -------------------------------------------------------------------

// IpTest

// repeated string targets = 1[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int IpTest::_internal_targets_size() const {
  return targets_.size();
}
inline int IpTest::targets_size() const {
  return _internal_targets_size();
}
inline void IpTest::clear_targets() {
  targets_.Clear();
}
inline std::string* IpTest::add_targets() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.IpTest.targets)
  return _internal_add_targets();
}
inline const std::string& IpTest::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const std::string& IpTest::targets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.IpTest.targets)
  return _internal_targets(index);
}
inline std::string* IpTest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.IpTest.targets)
  return targets_.Mutable(index);
}
inline void IpTest::set_targets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.IpTest.targets)
  targets_.Mutable(index)->assign(value);
}
inline void IpTest::set_targets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.IpTest.targets)
  targets_.Mutable(index)->assign(std::move(value));
}
inline void IpTest::set_targets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.IpTest.targets)
}
inline void IpTest::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.IpTest.targets)
}
inline std::string* IpTest::_internal_add_targets() {
  return targets_.Add();
}
inline void IpTest::add_targets(const std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.IpTest.targets)
}
inline void IpTest::add_targets(std::string&& value) {
  targets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.IpTest.targets)
}
inline void IpTest::add_targets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.IpTest.targets)
}
inline void IpTest::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.IpTest.targets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IpTest::targets() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.IpTest.targets)
  return targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IpTest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.IpTest.targets)
  return &targets_;
}

// bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void IpTest::clear_use_local_ip() {
  use_local_ip_ = false;
}
inline bool IpTest::_internal_use_local_ip() const {
  return use_local_ip_;
}
inline bool IpTest::use_local_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.IpTest.use_local_ip)
  return _internal_use_local_ip();
}
inline void IpTest::_internal_set_use_local_ip(bool value) {
  
  use_local_ip_ = value;
}
inline void IpTest::set_use_local_ip(bool value) {
  _internal_set_use_local_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.IpTest.use_local_ip)
}

// -------------------------------------------------------------------

// AgentTest

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AgentTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AgentTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentTest.target)
  return _internal_target();
}
inline void AgentTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.AgentTest.target)
}
inline std::string* AgentTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentTest.target)
  return _internal_mutable_target();
}
inline const std::string& AgentTest::_internal_target() const {
  return target_.Get();
}
inline void AgentTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.AgentTest.target)
}
inline void AgentTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.AgentTest.target)
}
inline void AgentTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.AgentTest.target)
}
inline std::string* AgentTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.AgentTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.AgentTest.target)
}
inline std::string* AgentTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.AgentTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AgentTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.AgentTest.target)
}

// bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AgentTest::clear_use_local_ip() {
  use_local_ip_ = false;
}
inline bool AgentTest::_internal_use_local_ip() const {
  return use_local_ip_;
}
inline bool AgentTest::use_local_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentTest.use_local_ip)
  return _internal_use_local_ip();
}
inline void AgentTest::_internal_set_use_local_ip(bool value) {
  
  use_local_ip_ = value;
}
inline void AgentTest::set_use_local_ip(bool value) {
  _internal_set_use_local_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.AgentTest.use_local_ip)
}

// bool reciprocal = 3[json_name = "reciprocal", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AgentTest::clear_reciprocal() {
  reciprocal_ = false;
}
inline bool AgentTest::_internal_reciprocal() const {
  return reciprocal_;
}
inline bool AgentTest::reciprocal() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentTest.reciprocal)
  return _internal_reciprocal();
}
inline void AgentTest::_internal_set_reciprocal(bool value) {
  
  reciprocal_ = value;
}
inline void AgentTest::set_reciprocal(bool value) {
  _internal_set_reciprocal(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.AgentTest.reciprocal)
}

// -------------------------------------------------------------------

// FlowTest

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void FlowTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.FlowTest.target)
  return _internal_target();
}
inline void FlowTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.FlowTest.target)
}
inline std::string* FlowTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.FlowTest.target)
  return _internal_mutable_target();
}
inline const std::string& FlowTest::_internal_target() const {
  return target_.Get();
}
inline void FlowTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.FlowTest.target)
}
inline void FlowTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.FlowTest.target)
}
inline void FlowTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.FlowTest.target)
}
inline std::string* FlowTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.FlowTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.FlowTest.target)
}
inline std::string* FlowTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.FlowTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlowTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.FlowTest.target)
}

// uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void FlowTest::clear_target_refresh_interval_millis() {
  target_refresh_interval_millis_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::_internal_target_refresh_interval_millis() const {
  return target_refresh_interval_millis_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::target_refresh_interval_millis() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.FlowTest.target_refresh_interval_millis)
  return _internal_target_refresh_interval_millis();
}
inline void FlowTest::_internal_set_target_refresh_interval_millis(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  target_refresh_interval_millis_ = value;
}
inline void FlowTest::set_target_refresh_interval_millis(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_target_refresh_interval_millis(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.FlowTest.target_refresh_interval_millis)
}

// uint32 max_providers = 3[json_name = "maxProviders", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void FlowTest::clear_max_providers() {
  max_providers_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::_internal_max_providers() const {
  return max_providers_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::max_providers() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.FlowTest.max_providers)
  return _internal_max_providers();
}
inline void FlowTest::_internal_set_max_providers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_providers_ = value;
}
inline void FlowTest::set_max_providers(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_providers(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.FlowTest.max_providers)
}

// uint32 max_ip_targets = 4[json_name = "maxIpTargets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void FlowTest::clear_max_ip_targets() {
  max_ip_targets_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::_internal_max_ip_targets() const {
  return max_ip_targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FlowTest::max_ip_targets() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.FlowTest.max_ip_targets)
  return _internal_max_ip_targets();
}
inline void FlowTest::_internal_set_max_ip_targets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_ip_targets_ = value;
}
inline void FlowTest::set_max_ip_targets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_ip_targets(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.FlowTest.max_ip_targets)
}

// string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void FlowTest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowTest::type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.FlowTest.type)
  return _internal_type();
}
inline void FlowTest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.FlowTest.type)
}
inline std::string* FlowTest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.FlowTest.type)
  return _internal_mutable_type();
}
inline const std::string& FlowTest::_internal_type() const {
  return type_.Get();
}
inline void FlowTest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowTest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.FlowTest.type)
}
inline void FlowTest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.FlowTest.type)
}
inline void FlowTest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.FlowTest.type)
}
inline std::string* FlowTest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowTest::release_type() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.FlowTest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowTest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.FlowTest.type)
}
inline std::string* FlowTest::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.FlowTest.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlowTest::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.FlowTest.type)
}

// string inet_direction = 6[json_name = "inetDirection", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void FlowTest::clear_inet_direction() {
  inet_direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowTest::inet_direction() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.FlowTest.inet_direction)
  return _internal_inet_direction();
}
inline void FlowTest::set_inet_direction(const std::string& value) {
  _internal_set_inet_direction(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.FlowTest.inet_direction)
}
inline std::string* FlowTest::mutable_inet_direction() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.FlowTest.inet_direction)
  return _internal_mutable_inet_direction();
}
inline const std::string& FlowTest::_internal_inet_direction() const {
  return inet_direction_.Get();
}
inline void FlowTest::_internal_set_inet_direction(const std::string& value) {
  
  inet_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowTest::set_inet_direction(std::string&& value) {
  
  inet_direction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.FlowTest.inet_direction)
}
inline void FlowTest::set_inet_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inet_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.FlowTest.inet_direction)
}
inline void FlowTest::set_inet_direction(const char* value,
    size_t size) {
  
  inet_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.FlowTest.inet_direction)
}
inline std::string* FlowTest::_internal_mutable_inet_direction() {
  
  return inet_direction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowTest::release_inet_direction() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.FlowTest.inet_direction)
  return inet_direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowTest::set_allocated_inet_direction(std::string* inet_direction) {
  if (inet_direction != nullptr) {
    
  } else {
    
  }
  inet_direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inet_direction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.FlowTest.inet_direction)
}
inline std::string* FlowTest::unsafe_arena_release_inet_direction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.FlowTest.inet_direction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return inet_direction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlowTest::unsafe_arena_set_allocated_inet_direction(
    std::string* inet_direction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inet_direction != nullptr) {
    
  } else {
    
  }
  inet_direction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inet_direction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.FlowTest.inet_direction)
}

// string direction = 7[json_name = "direction", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void FlowTest::clear_direction() {
  direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& FlowTest::direction() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.FlowTest.direction)
  return _internal_direction();
}
inline void FlowTest::set_direction(const std::string& value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.FlowTest.direction)
}
inline std::string* FlowTest::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.FlowTest.direction)
  return _internal_mutable_direction();
}
inline const std::string& FlowTest::_internal_direction() const {
  return direction_.Get();
}
inline void FlowTest::_internal_set_direction(const std::string& value) {
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FlowTest::set_direction(std::string&& value) {
  
  direction_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.FlowTest.direction)
}
inline void FlowTest::set_direction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.FlowTest.direction)
}
inline void FlowTest::set_direction(const char* value,
    size_t size) {
  
  direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.FlowTest.direction)
}
inline std::string* FlowTest::_internal_mutable_direction() {
  
  return direction_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FlowTest::release_direction() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.FlowTest.direction)
  return direction_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FlowTest::set_allocated_direction(std::string* direction) {
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), direction,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.FlowTest.direction)
}
inline std::string* FlowTest::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.FlowTest.direction)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return direction_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FlowTest::unsafe_arena_set_allocated_direction(
    std::string* direction) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (direction != nullptr) {
    
  } else {
    
  }
  direction_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      direction, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.FlowTest.direction)
}

// -------------------------------------------------------------------

// DnsTest

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DnsTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DnsTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DnsTest.target)
  return _internal_target();
}
inline void DnsTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DnsTest.target)
}
inline std::string* DnsTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DnsTest.target)
  return _internal_mutable_target();
}
inline const std::string& DnsTest::_internal_target() const {
  return target_.Get();
}
inline void DnsTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DnsTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.DnsTest.target)
}
inline void DnsTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.DnsTest.target)
}
inline void DnsTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.DnsTest.target)
}
inline std::string* DnsTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DnsTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.DnsTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DnsTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.DnsTest.target)
}
inline std::string* DnsTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.DnsTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DnsTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.DnsTest.target)
}

// uint32 timeout = 2[json_name = "timeout", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DnsTest::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DnsTest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DnsTest::timeout() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DnsTest.timeout)
  return _internal_timeout();
}
inline void DnsTest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
}
inline void DnsTest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DnsTest.timeout)
}

// .kentik.synthetics.v202309.DNSRecord record_type = 3[json_name = "recordType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DnsTest::clear_record_type() {
  record_type_ = 0;
}
inline ::kentik::synthetics::v202309::DNSRecord DnsTest::_internal_record_type() const {
  return static_cast< ::kentik::synthetics::v202309::DNSRecord >(record_type_);
}
inline ::kentik::synthetics::v202309::DNSRecord DnsTest::record_type() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DnsTest.record_type)
  return _internal_record_type();
}
inline void DnsTest::_internal_set_record_type(::kentik::synthetics::v202309::DNSRecord value) {
  
  record_type_ = value;
}
inline void DnsTest::set_record_type(::kentik::synthetics::v202309::DNSRecord value) {
  _internal_set_record_type(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DnsTest.record_type)
}

// repeated string servers = 4[json_name = "servers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int DnsTest::_internal_servers_size() const {
  return servers_.size();
}
inline int DnsTest::servers_size() const {
  return _internal_servers_size();
}
inline void DnsTest::clear_servers() {
  servers_.Clear();
}
inline std::string* DnsTest::add_servers() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.DnsTest.servers)
  return _internal_add_servers();
}
inline const std::string& DnsTest::_internal_servers(int index) const {
  return servers_.Get(index);
}
inline const std::string& DnsTest::servers(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DnsTest.servers)
  return _internal_servers(index);
}
inline std::string* DnsTest::mutable_servers(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DnsTest.servers)
  return servers_.Mutable(index);
}
inline void DnsTest::set_servers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DnsTest.servers)
  servers_.Mutable(index)->assign(value);
}
inline void DnsTest::set_servers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DnsTest.servers)
  servers_.Mutable(index)->assign(std::move(value));
}
inline void DnsTest::set_servers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.DnsTest.servers)
}
inline void DnsTest::set_servers(int index, const char* value, size_t size) {
  servers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.DnsTest.servers)
}
inline std::string* DnsTest::_internal_add_servers() {
  return servers_.Add();
}
inline void DnsTest::add_servers(const std::string& value) {
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.DnsTest.servers)
}
inline void DnsTest::add_servers(std::string&& value) {
  servers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.DnsTest.servers)
}
inline void DnsTest::add_servers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  servers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.DnsTest.servers)
}
inline void DnsTest::add_servers(const char* value, size_t size) {
  servers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.DnsTest.servers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DnsTest::servers() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.DnsTest.servers)
  return servers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DnsTest::mutable_servers() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.DnsTest.servers)
  return &servers_;
}

// uint32 port = 5[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DnsTest::clear_port() {
  port_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DnsTest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DnsTest::port() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DnsTest.port)
  return _internal_port();
}
inline void DnsTest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  port_ = value;
}
inline void DnsTest::set_port(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DnsTest.port)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UrlTest

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UrlTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UrlTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UrlTest.target)
  return _internal_target();
}
inline void UrlTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.UrlTest.target)
}
inline std::string* UrlTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.UrlTest.target)
  return _internal_mutable_target();
}
inline const std::string& UrlTest::_internal_target() const {
  return target_.Get();
}
inline void UrlTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UrlTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.UrlTest.target)
}
inline void UrlTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.UrlTest.target)
}
inline void UrlTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.UrlTest.target)
}
inline std::string* UrlTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UrlTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.UrlTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UrlTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.UrlTest.target)
}
inline std::string* UrlTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.UrlTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UrlTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.UrlTest.target)
}

// uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UrlTest::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UrlTest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UrlTest::timeout() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UrlTest.timeout)
  return _internal_timeout();
}
inline void UrlTest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
}
inline void UrlTest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.UrlTest.timeout)
}

// string method = 3[json_name = "method", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UrlTest::clear_method() {
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UrlTest::method() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UrlTest.method)
  return _internal_method();
}
inline void UrlTest::set_method(const std::string& value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.UrlTest.method)
}
inline std::string* UrlTest::mutable_method() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.UrlTest.method)
  return _internal_mutable_method();
}
inline const std::string& UrlTest::_internal_method() const {
  return method_.Get();
}
inline void UrlTest::_internal_set_method(const std::string& value) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UrlTest::set_method(std::string&& value) {
  
  method_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.UrlTest.method)
}
inline void UrlTest::set_method(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.UrlTest.method)
}
inline void UrlTest::set_method(const char* value,
    size_t size) {
  
  method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.UrlTest.method)
}
inline std::string* UrlTest::_internal_mutable_method() {
  
  return method_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UrlTest::release_method() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.UrlTest.method)
  return method_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UrlTest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    
  } else {
    
  }
  method_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.UrlTest.method)
}
inline std::string* UrlTest::unsafe_arena_release_method() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.UrlTest.method)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return method_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UrlTest::unsafe_arena_set_allocated_method(
    std::string* method) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (method != nullptr) {
    
  } else {
    
  }
  method_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      method, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.UrlTest.method)
}

// map<string, string> headers = 4[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int UrlTest::_internal_headers_size() const {
  return headers_.size();
}
inline int UrlTest::headers_size() const {
  return _internal_headers_size();
}
inline void UrlTest::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
UrlTest::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
UrlTest::headers() const {
  // @@protoc_insertion_point(field_map:kentik.synthetics.v202309.UrlTest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
UrlTest::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
UrlTest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:kentik.synthetics.v202309.UrlTest.headers)
  return _internal_mutable_headers();
}

// string body = 5[json_name = "body", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UrlTest::clear_body() {
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& UrlTest::body() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UrlTest.body)
  return _internal_body();
}
inline void UrlTest::set_body(const std::string& value) {
  _internal_set_body(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.UrlTest.body)
}
inline std::string* UrlTest::mutable_body() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.UrlTest.body)
  return _internal_mutable_body();
}
inline const std::string& UrlTest::_internal_body() const {
  return body_.Get();
}
inline void UrlTest::_internal_set_body(const std::string& value) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UrlTest::set_body(std::string&& value) {
  
  body_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.UrlTest.body)
}
inline void UrlTest::set_body(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.UrlTest.body)
}
inline void UrlTest::set_body(const char* value,
    size_t size) {
  
  body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.UrlTest.body)
}
inline std::string* UrlTest::_internal_mutable_body() {
  
  return body_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UrlTest::release_body() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.UrlTest.body)
  return body_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UrlTest::set_allocated_body(std::string* body) {
  if (body != nullptr) {
    
  } else {
    
  }
  body_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), body,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.UrlTest.body)
}
inline std::string* UrlTest::unsafe_arena_release_body() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.UrlTest.body)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return body_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UrlTest::unsafe_arena_set_allocated_body(
    std::string* body) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (body != nullptr) {
    
  } else {
    
  }
  body_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      body, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.UrlTest.body)
}

// bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void UrlTest::clear_ignore_tls_errors() {
  ignore_tls_errors_ = false;
}
inline bool UrlTest::_internal_ignore_tls_errors() const {
  return ignore_tls_errors_;
}
inline bool UrlTest::ignore_tls_errors() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UrlTest.ignore_tls_errors)
  return _internal_ignore_tls_errors();
}
inline void UrlTest::_internal_set_ignore_tls_errors(bool value) {
  
  ignore_tls_errors_ = value;
}
inline void UrlTest::set_ignore_tls_errors(bool value) {
  _internal_set_ignore_tls_errors(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.UrlTest.ignore_tls_errors)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PageLoadTest

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PageLoadTest::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PageLoadTest::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PageLoadTest.target)
  return _internal_target();
}
inline void PageLoadTest::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PageLoadTest.target)
}
inline std::string* PageLoadTest::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.PageLoadTest.target)
  return _internal_mutable_target();
}
inline const std::string& PageLoadTest::_internal_target() const {
  return target_.Get();
}
inline void PageLoadTest::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PageLoadTest::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.PageLoadTest.target)
}
inline void PageLoadTest::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.PageLoadTest.target)
}
inline void PageLoadTest::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.PageLoadTest.target)
}
inline std::string* PageLoadTest::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PageLoadTest::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.PageLoadTest.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PageLoadTest::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.PageLoadTest.target)
}
inline std::string* PageLoadTest::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.PageLoadTest.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PageLoadTest::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.PageLoadTest.target)
}

// uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PageLoadTest::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageLoadTest::_internal_timeout() const {
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PageLoadTest::timeout() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PageLoadTest.timeout)
  return _internal_timeout();
}
inline void PageLoadTest::_internal_set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
}
inline void PageLoadTest::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timeout(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PageLoadTest.timeout)
}

// map<string, string> headers = 3[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int PageLoadTest::_internal_headers_size() const {
  return headers_.size();
}
inline int PageLoadTest::headers_size() const {
  return _internal_headers_size();
}
inline void PageLoadTest::clear_headers() {
  headers_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PageLoadTest::_internal_headers() const {
  return headers_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PageLoadTest::headers() const {
  // @@protoc_insertion_point(field_map:kentik.synthetics.v202309.PageLoadTest.headers)
  return _internal_headers();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PageLoadTest::_internal_mutable_headers() {
  return headers_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PageLoadTest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_map:kentik.synthetics.v202309.PageLoadTest.headers)
  return _internal_mutable_headers();
}

// bool ignore_tls_errors = 4[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PageLoadTest::clear_ignore_tls_errors() {
  ignore_tls_errors_ = false;
}
inline bool PageLoadTest::_internal_ignore_tls_errors() const {
  return ignore_tls_errors_;
}
inline bool PageLoadTest::ignore_tls_errors() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PageLoadTest.ignore_tls_errors)
  return _internal_ignore_tls_errors();
}
inline void PageLoadTest::_internal_set_ignore_tls_errors(bool value) {
  
  ignore_tls_errors_ = value;
}
inline void PageLoadTest::set_ignore_tls_errors(bool value) {
  _internal_set_ignore_tls_errors(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PageLoadTest.ignore_tls_errors)
}

// map<string, string> css_selectors = 5[json_name = "cssSelectors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int PageLoadTest::_internal_css_selectors_size() const {
  return css_selectors_.size();
}
inline int PageLoadTest::css_selectors_size() const {
  return _internal_css_selectors_size();
}
inline void PageLoadTest::clear_css_selectors() {
  css_selectors_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PageLoadTest::_internal_css_selectors() const {
  return css_selectors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
PageLoadTest::css_selectors() const {
  // @@protoc_insertion_point(field_map:kentik.synthetics.v202309.PageLoadTest.css_selectors)
  return _internal_css_selectors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PageLoadTest::_internal_mutable_css_selectors() {
  return css_selectors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
PageLoadTest::mutable_css_selectors() {
  // @@protoc_insertion_point(field_mutable_map:kentik.synthetics.v202309.PageLoadTest.css_selectors)
  return _internal_mutable_css_selectors();
}

// -------------------------------------------------------------------

// NetworkMeshTest

// bool use_local_ip = 1[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NetworkMeshTest::clear_use_local_ip() {
  use_local_ip_ = false;
}
inline bool NetworkMeshTest::_internal_use_local_ip() const {
  return use_local_ip_;
}
inline bool NetworkMeshTest::use_local_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.NetworkMeshTest.use_local_ip)
  return _internal_use_local_ip();
}
inline void NetworkMeshTest::_internal_set_use_local_ip(bool value) {
  
  use_local_ip_ = value;
}
inline void NetworkMeshTest::set_use_local_ip(bool value) {
  _internal_set_use_local_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.NetworkMeshTest.use_local_ip)
}

// -------------------------------------------------------------------

// MetricData

// uint32 current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void MetricData::clear_current() {
  current_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetricData::_internal_current() const {
  return current_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetricData::current() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.MetricData.current)
  return _internal_current();
}
inline void MetricData::_internal_set_current(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  current_ = value;
}
inline void MetricData::set_current(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.MetricData.current)
}

// uint32 rolling_avg = 2[json_name = "rollingAvg", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void MetricData::clear_rolling_avg() {
  rolling_avg_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetricData::_internal_rolling_avg() const {
  return rolling_avg_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetricData::rolling_avg() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.MetricData.rolling_avg)
  return _internal_rolling_avg();
}
inline void MetricData::_internal_set_rolling_avg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rolling_avg_ = value;
}
inline void MetricData::set_rolling_avg(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rolling_avg(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.MetricData.rolling_avg)
}

// uint32 rolling_stddev = 3[json_name = "rollingStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void MetricData::clear_rolling_stddev() {
  rolling_stddev_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetricData::_internal_rolling_stddev() const {
  return rolling_stddev_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MetricData::rolling_stddev() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.MetricData.rolling_stddev)
  return _internal_rolling_stddev();
}
inline void MetricData::_internal_set_rolling_stddev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  rolling_stddev_ = value;
}
inline void MetricData::set_rolling_stddev(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rolling_stddev(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.MetricData.rolling_stddev)
}

// string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void MetricData::clear_health() {
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& MetricData::health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.MetricData.health)
  return _internal_health();
}
inline void MetricData::set_health(const std::string& value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.MetricData.health)
}
inline std::string* MetricData::mutable_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.MetricData.health)
  return _internal_mutable_health();
}
inline const std::string& MetricData::_internal_health() const {
  return health_.Get();
}
inline void MetricData::_internal_set_health(const std::string& value) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void MetricData::set_health(std::string&& value) {
  
  health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.MetricData.health)
}
inline void MetricData::set_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.MetricData.health)
}
inline void MetricData::set_health(const char* value,
    size_t size) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.MetricData.health)
}
inline std::string* MetricData::_internal_mutable_health() {
  
  return health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* MetricData::release_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.MetricData.health)
  return health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MetricData::set_allocated_health(std::string* health) {
  if (health != nullptr) {
    
  } else {
    
  }
  health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.MetricData.health)
}
inline std::string* MetricData::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.MetricData.health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void MetricData::unsafe_arena_set_allocated_health(
    std::string* health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health != nullptr) {
    
  } else {
    
  }
  health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.MetricData.health)
}

// -------------------------------------------------------------------

// PacketLossData

// double current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PacketLossData::clear_current() {
  current_ = 0;
}
inline double PacketLossData::_internal_current() const {
  return current_;
}
inline double PacketLossData::current() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PacketLossData.current)
  return _internal_current();
}
inline void PacketLossData::_internal_set_current(double value) {
  
  current_ = value;
}
inline void PacketLossData::set_current(double value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PacketLossData.current)
}

// string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PacketLossData::clear_health() {
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PacketLossData::health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PacketLossData.health)
  return _internal_health();
}
inline void PacketLossData::set_health(const std::string& value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PacketLossData.health)
}
inline std::string* PacketLossData::mutable_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.PacketLossData.health)
  return _internal_mutable_health();
}
inline const std::string& PacketLossData::_internal_health() const {
  return health_.Get();
}
inline void PacketLossData::_internal_set_health(const std::string& value) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PacketLossData::set_health(std::string&& value) {
  
  health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.PacketLossData.health)
}
inline void PacketLossData::set_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.PacketLossData.health)
}
inline void PacketLossData::set_health(const char* value,
    size_t size) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.PacketLossData.health)
}
inline std::string* PacketLossData::_internal_mutable_health() {
  
  return health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PacketLossData::release_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.PacketLossData.health)
  return health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PacketLossData::set_allocated_health(std::string* health) {
  if (health != nullptr) {
    
  } else {
    
  }
  health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.PacketLossData.health)
}
inline std::string* PacketLossData::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.PacketLossData.health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PacketLossData::unsafe_arena_set_allocated_health(
    std::string* health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health != nullptr) {
    
  } else {
    
  }
  health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.PacketLossData.health)
}

// -------------------------------------------------------------------

// PingResults

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PingResults::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PingResults::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PingResults.target)
  return _internal_target();
}
inline void PingResults::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PingResults.target)
}
inline std::string* PingResults::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.PingResults.target)
  return _internal_mutable_target();
}
inline const std::string& PingResults::_internal_target() const {
  return target_.Get();
}
inline void PingResults::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PingResults::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.PingResults.target)
}
inline void PingResults::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.PingResults.target)
}
inline void PingResults::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.PingResults.target)
}
inline std::string* PingResults::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PingResults::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.PingResults.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PingResults::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.PingResults.target)
}
inline std::string* PingResults::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.PingResults.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PingResults::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.PingResults.target)
}

// .kentik.synthetics.v202309.PacketLossData packet_loss = 2[json_name = "packetLoss", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool PingResults::_internal_has_packet_loss() const {
  return this != internal_default_instance() && packet_loss_ != nullptr;
}
inline bool PingResults::has_packet_loss() const {
  return _internal_has_packet_loss();
}
inline void PingResults::clear_packet_loss() {
  if (GetArena() == nullptr && packet_loss_ != nullptr) {
    delete packet_loss_;
  }
  packet_loss_ = nullptr;
}
inline const ::kentik::synthetics::v202309::PacketLossData& PingResults::_internal_packet_loss() const {
  const ::kentik::synthetics::v202309::PacketLossData* p = packet_loss_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::PacketLossData*>(
      &::kentik::synthetics::v202309::_PacketLossData_default_instance_);
}
inline const ::kentik::synthetics::v202309::PacketLossData& PingResults::packet_loss() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PingResults.packet_loss)
  return _internal_packet_loss();
}
inline void PingResults::unsafe_arena_set_allocated_packet_loss(
    ::kentik::synthetics::v202309::PacketLossData* packet_loss) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packet_loss_);
  }
  packet_loss_ = packet_loss;
  if (packet_loss) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.PingResults.packet_loss)
}
inline ::kentik::synthetics::v202309::PacketLossData* PingResults::release_packet_loss() {
  auto temp = unsafe_arena_release_packet_loss();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::PacketLossData* PingResults::unsafe_arena_release_packet_loss() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.PingResults.packet_loss)
  
  ::kentik::synthetics::v202309::PacketLossData* temp = packet_loss_;
  packet_loss_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::PacketLossData* PingResults::_internal_mutable_packet_loss() {
  
  if (packet_loss_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::PacketLossData>(GetArena());
    packet_loss_ = p;
  }
  return packet_loss_;
}
inline ::kentik::synthetics::v202309::PacketLossData* PingResults::mutable_packet_loss() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.PingResults.packet_loss)
  return _internal_mutable_packet_loss();
}
inline void PingResults::set_allocated_packet_loss(::kentik::synthetics::v202309::PacketLossData* packet_loss) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete packet_loss_;
  }
  if (packet_loss) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(packet_loss);
    if (message_arena != submessage_arena) {
      packet_loss = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_loss, submessage_arena);
    }
    
  } else {
    
  }
  packet_loss_ = packet_loss;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.PingResults.packet_loss)
}

// .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool PingResults::_internal_has_latency() const {
  return this != internal_default_instance() && latency_ != nullptr;
}
inline bool PingResults::has_latency() const {
  return _internal_has_latency();
}
inline void PingResults::clear_latency() {
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
}
inline const ::kentik::synthetics::v202309::MetricData& PingResults::_internal_latency() const {
  const ::kentik::synthetics::v202309::MetricData* p = latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::MetricData*>(
      &::kentik::synthetics::v202309::_MetricData_default_instance_);
}
inline const ::kentik::synthetics::v202309::MetricData& PingResults::latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PingResults.latency)
  return _internal_latency();
}
inline void PingResults::unsafe_arena_set_allocated_latency(
    ::kentik::synthetics::v202309::MetricData* latency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_);
  }
  latency_ = latency;
  if (latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.PingResults.latency)
}
inline ::kentik::synthetics::v202309::MetricData* PingResults::release_latency() {
  auto temp = unsafe_arena_release_latency();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::MetricData* PingResults::unsafe_arena_release_latency() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.PingResults.latency)
  
  ::kentik::synthetics::v202309::MetricData* temp = latency_;
  latency_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::MetricData* PingResults::_internal_mutable_latency() {
  
  if (latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::MetricData>(GetArena());
    latency_ = p;
  }
  return latency_;
}
inline ::kentik::synthetics::v202309::MetricData* PingResults::mutable_latency() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.PingResults.latency)
  return _internal_mutable_latency();
}
inline void PingResults::set_allocated_latency(::kentik::synthetics::v202309::MetricData* latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete latency_;
  }
  if (latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latency);
    if (message_arena != submessage_arena) {
      latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.PingResults.latency)
}

// .kentik.synthetics.v202309.MetricData jitter = 4[json_name = "jitter", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool PingResults::_internal_has_jitter() const {
  return this != internal_default_instance() && jitter_ != nullptr;
}
inline bool PingResults::has_jitter() const {
  return _internal_has_jitter();
}
inline void PingResults::clear_jitter() {
  if (GetArena() == nullptr && jitter_ != nullptr) {
    delete jitter_;
  }
  jitter_ = nullptr;
}
inline const ::kentik::synthetics::v202309::MetricData& PingResults::_internal_jitter() const {
  const ::kentik::synthetics::v202309::MetricData* p = jitter_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::MetricData*>(
      &::kentik::synthetics::v202309::_MetricData_default_instance_);
}
inline const ::kentik::synthetics::v202309::MetricData& PingResults::jitter() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PingResults.jitter)
  return _internal_jitter();
}
inline void PingResults::unsafe_arena_set_allocated_jitter(
    ::kentik::synthetics::v202309::MetricData* jitter) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(jitter_);
  }
  jitter_ = jitter;
  if (jitter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.PingResults.jitter)
}
inline ::kentik::synthetics::v202309::MetricData* PingResults::release_jitter() {
  auto temp = unsafe_arena_release_jitter();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::MetricData* PingResults::unsafe_arena_release_jitter() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.PingResults.jitter)
  
  ::kentik::synthetics::v202309::MetricData* temp = jitter_;
  jitter_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::MetricData* PingResults::_internal_mutable_jitter() {
  
  if (jitter_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::MetricData>(GetArena());
    jitter_ = p;
  }
  return jitter_;
}
inline ::kentik::synthetics::v202309::MetricData* PingResults::mutable_jitter() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.PingResults.jitter)
  return _internal_mutable_jitter();
}
inline void PingResults::set_allocated_jitter(::kentik::synthetics::v202309::MetricData* jitter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete jitter_;
  }
  if (jitter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(jitter);
    if (message_arena != submessage_arena) {
      jitter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jitter, submessage_arena);
    }
    
  } else {
    
  }
  jitter_ = jitter;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.PingResults.jitter)
}

// string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PingResults::clear_dst_ip() {
  dst_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PingResults::dst_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PingResults.dst_ip)
  return _internal_dst_ip();
}
inline void PingResults::set_dst_ip(const std::string& value) {
  _internal_set_dst_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PingResults.dst_ip)
}
inline std::string* PingResults::mutable_dst_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.PingResults.dst_ip)
  return _internal_mutable_dst_ip();
}
inline const std::string& PingResults::_internal_dst_ip() const {
  return dst_ip_.Get();
}
inline void PingResults::_internal_set_dst_ip(const std::string& value) {
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PingResults::set_dst_ip(std::string&& value) {
  
  dst_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.PingResults.dst_ip)
}
inline void PingResults::set_dst_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.PingResults.dst_ip)
}
inline void PingResults::set_dst_ip(const char* value,
    size_t size) {
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.PingResults.dst_ip)
}
inline std::string* PingResults::_internal_mutable_dst_ip() {
  
  return dst_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PingResults::release_dst_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.PingResults.dst_ip)
  return dst_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PingResults::set_allocated_dst_ip(std::string* dst_ip) {
  if (dst_ip != nullptr) {
    
  } else {
    
  }
  dst_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.PingResults.dst_ip)
}
inline std::string* PingResults::unsafe_arena_release_dst_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.PingResults.dst_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dst_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PingResults::unsafe_arena_set_allocated_dst_ip(
    std::string* dst_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dst_ip != nullptr) {
    
  } else {
    
  }
  dst_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dst_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.PingResults.dst_ip)
}

// -------------------------------------------------------------------

// HTTPResponseData

// uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HTTPResponseData::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPResponseData::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPResponseData::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HTTPResponseData.status)
  return _internal_status();
}
inline void HTTPResponseData::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void HTTPResponseData::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HTTPResponseData.status)
}

// uint32 size = 2[json_name = "size", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HTTPResponseData::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPResponseData::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HTTPResponseData::size() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HTTPResponseData.size)
  return _internal_size();
}
inline void HTTPResponseData::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void HTTPResponseData::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HTTPResponseData.size)
}

// string data = 3[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HTTPResponseData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPResponseData::data() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HTTPResponseData.data)
  return _internal_data();
}
inline void HTTPResponseData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HTTPResponseData.data)
}
inline std::string* HTTPResponseData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.HTTPResponseData.data)
  return _internal_mutable_data();
}
inline const std::string& HTTPResponseData::_internal_data() const {
  return data_.Get();
}
inline void HTTPResponseData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPResponseData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.HTTPResponseData.data)
}
inline void HTTPResponseData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.HTTPResponseData.data)
}
inline void HTTPResponseData::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.HTTPResponseData.data)
}
inline std::string* HTTPResponseData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPResponseData::release_data() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.HTTPResponseData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPResponseData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.HTTPResponseData.data)
}
inline std::string* HTTPResponseData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.HTTPResponseData.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPResponseData::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.HTTPResponseData.data)
}

// -------------------------------------------------------------------

// HTTPResults

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HTTPResults::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPResults::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HTTPResults.target)
  return _internal_target();
}
inline void HTTPResults::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HTTPResults.target)
}
inline std::string* HTTPResults::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.HTTPResults.target)
  return _internal_mutable_target();
}
inline const std::string& HTTPResults::_internal_target() const {
  return target_.Get();
}
inline void HTTPResults::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPResults::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.HTTPResults.target)
}
inline void HTTPResults::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.HTTPResults.target)
}
inline void HTTPResults::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.HTTPResults.target)
}
inline std::string* HTTPResults::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPResults::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.HTTPResults.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPResults::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.HTTPResults.target)
}
inline std::string* HTTPResults::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.HTTPResults.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPResults::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.HTTPResults.target)
}

// .kentik.synthetics.v202309.MetricData latency = 2[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool HTTPResults::_internal_has_latency() const {
  return this != internal_default_instance() && latency_ != nullptr;
}
inline bool HTTPResults::has_latency() const {
  return _internal_has_latency();
}
inline void HTTPResults::clear_latency() {
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
}
inline const ::kentik::synthetics::v202309::MetricData& HTTPResults::_internal_latency() const {
  const ::kentik::synthetics::v202309::MetricData* p = latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::MetricData*>(
      &::kentik::synthetics::v202309::_MetricData_default_instance_);
}
inline const ::kentik::synthetics::v202309::MetricData& HTTPResults::latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HTTPResults.latency)
  return _internal_latency();
}
inline void HTTPResults::unsafe_arena_set_allocated_latency(
    ::kentik::synthetics::v202309::MetricData* latency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_);
  }
  latency_ = latency;
  if (latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.HTTPResults.latency)
}
inline ::kentik::synthetics::v202309::MetricData* HTTPResults::release_latency() {
  auto temp = unsafe_arena_release_latency();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::MetricData* HTTPResults::unsafe_arena_release_latency() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.HTTPResults.latency)
  
  ::kentik::synthetics::v202309::MetricData* temp = latency_;
  latency_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::MetricData* HTTPResults::_internal_mutable_latency() {
  
  if (latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::MetricData>(GetArena());
    latency_ = p;
  }
  return latency_;
}
inline ::kentik::synthetics::v202309::MetricData* HTTPResults::mutable_latency() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.HTTPResults.latency)
  return _internal_mutable_latency();
}
inline void HTTPResults::set_allocated_latency(::kentik::synthetics::v202309::MetricData* latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete latency_;
  }
  if (latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latency);
    if (message_arena != submessage_arena) {
      latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.HTTPResults.latency)
}

// .kentik.synthetics.v202309.HTTPResponseData response = 4[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool HTTPResults::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool HTTPResults::has_response() const {
  return _internal_has_response();
}
inline void HTTPResults::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::kentik::synthetics::v202309::HTTPResponseData& HTTPResults::_internal_response() const {
  const ::kentik::synthetics::v202309::HTTPResponseData* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::HTTPResponseData*>(
      &::kentik::synthetics::v202309::_HTTPResponseData_default_instance_);
}
inline const ::kentik::synthetics::v202309::HTTPResponseData& HTTPResults::response() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HTTPResults.response)
  return _internal_response();
}
inline void HTTPResults::unsafe_arena_set_allocated_response(
    ::kentik::synthetics::v202309::HTTPResponseData* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.HTTPResults.response)
}
inline ::kentik::synthetics::v202309::HTTPResponseData* HTTPResults::release_response() {
  auto temp = unsafe_arena_release_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::HTTPResponseData* HTTPResults::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.HTTPResults.response)
  
  ::kentik::synthetics::v202309::HTTPResponseData* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::HTTPResponseData* HTTPResults::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::HTTPResponseData>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::kentik::synthetics::v202309::HTTPResponseData* HTTPResults::mutable_response() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.HTTPResults.response)
  return _internal_mutable_response();
}
inline void HTTPResults::set_allocated_response(::kentik::synthetics::v202309::HTTPResponseData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.HTTPResults.response)
}

// string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void HTTPResults::clear_dst_ip() {
  dst_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& HTTPResults::dst_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.HTTPResults.dst_ip)
  return _internal_dst_ip();
}
inline void HTTPResults::set_dst_ip(const std::string& value) {
  _internal_set_dst_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.HTTPResults.dst_ip)
}
inline std::string* HTTPResults::mutable_dst_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.HTTPResults.dst_ip)
  return _internal_mutable_dst_ip();
}
inline const std::string& HTTPResults::_internal_dst_ip() const {
  return dst_ip_.Get();
}
inline void HTTPResults::_internal_set_dst_ip(const std::string& value) {
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HTTPResults::set_dst_ip(std::string&& value) {
  
  dst_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.HTTPResults.dst_ip)
}
inline void HTTPResults::set_dst_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.HTTPResults.dst_ip)
}
inline void HTTPResults::set_dst_ip(const char* value,
    size_t size) {
  
  dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.HTTPResults.dst_ip)
}
inline std::string* HTTPResults::_internal_mutable_dst_ip() {
  
  return dst_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HTTPResults::release_dst_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.HTTPResults.dst_ip)
  return dst_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HTTPResults::set_allocated_dst_ip(std::string* dst_ip) {
  if (dst_ip != nullptr) {
    
  } else {
    
  }
  dst_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dst_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.HTTPResults.dst_ip)
}
inline std::string* HTTPResults::unsafe_arena_release_dst_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.HTTPResults.dst_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dst_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HTTPResults::unsafe_arena_set_allocated_dst_ip(
    std::string* dst_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dst_ip != nullptr) {
    
  } else {
    
  }
  dst_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dst_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.HTTPResults.dst_ip)
}

// -------------------------------------------------------------------

// DNSResponseData

// uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DNSResponseData::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSResponseData::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DNSResponseData::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DNSResponseData.status)
  return _internal_status();
}
inline void DNSResponseData::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void DNSResponseData::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DNSResponseData.status)
}

// string data = 2[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DNSResponseData::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DNSResponseData::data() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DNSResponseData.data)
  return _internal_data();
}
inline void DNSResponseData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DNSResponseData.data)
}
inline std::string* DNSResponseData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DNSResponseData.data)
  return _internal_mutable_data();
}
inline const std::string& DNSResponseData::_internal_data() const {
  return data_.Get();
}
inline void DNSResponseData::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DNSResponseData::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.DNSResponseData.data)
}
inline void DNSResponseData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.DNSResponseData.data)
}
inline void DNSResponseData::set_data(const char* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.DNSResponseData.data)
}
inline std::string* DNSResponseData::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DNSResponseData::release_data() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.DNSResponseData.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DNSResponseData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.DNSResponseData.data)
}
inline std::string* DNSResponseData::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.DNSResponseData.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DNSResponseData::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.DNSResponseData.data)
}

// -------------------------------------------------------------------

// DNSResults

// string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DNSResults::clear_target() {
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DNSResults::target() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DNSResults.target)
  return _internal_target();
}
inline void DNSResults::set_target(const std::string& value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DNSResults.target)
}
inline std::string* DNSResults::mutable_target() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DNSResults.target)
  return _internal_mutable_target();
}
inline const std::string& DNSResults::_internal_target() const {
  return target_.Get();
}
inline void DNSResults::_internal_set_target(const std::string& value) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DNSResults::set_target(std::string&& value) {
  
  target_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.DNSResults.target)
}
inline void DNSResults::set_target(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.DNSResults.target)
}
inline void DNSResults::set_target(const char* value,
    size_t size) {
  
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.DNSResults.target)
}
inline std::string* DNSResults::_internal_mutable_target() {
  
  return target_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DNSResults::release_target() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.DNSResults.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DNSResults::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.DNSResults.target)
}
inline std::string* DNSResults::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.DNSResults.target)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DNSResults::unsafe_arena_set_allocated_target(
    std::string* target) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target != nullptr) {
    
  } else {
    
  }
  target_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.DNSResults.target)
}

// string server = 2[json_name = "server", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DNSResults::clear_server() {
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DNSResults::server() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DNSResults.server)
  return _internal_server();
}
inline void DNSResults::set_server(const std::string& value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DNSResults.server)
}
inline std::string* DNSResults::mutable_server() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DNSResults.server)
  return _internal_mutable_server();
}
inline const std::string& DNSResults::_internal_server() const {
  return server_.Get();
}
inline void DNSResults::_internal_set_server(const std::string& value) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DNSResults::set_server(std::string&& value) {
  
  server_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.DNSResults.server)
}
inline void DNSResults::set_server(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.DNSResults.server)
}
inline void DNSResults::set_server(const char* value,
    size_t size) {
  
  server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.DNSResults.server)
}
inline std::string* DNSResults::_internal_mutable_server() {
  
  return server_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DNSResults::release_server() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.DNSResults.server)
  return server_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DNSResults::set_allocated_server(std::string* server) {
  if (server != nullptr) {
    
  } else {
    
  }
  server_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.DNSResults.server)
}
inline std::string* DNSResults::unsafe_arena_release_server() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.DNSResults.server)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return server_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DNSResults::unsafe_arena_set_allocated_server(
    std::string* server) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (server != nullptr) {
    
  } else {
    
  }
  server_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      server, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.DNSResults.server)
}

// .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DNSResults::_internal_has_latency() const {
  return this != internal_default_instance() && latency_ != nullptr;
}
inline bool DNSResults::has_latency() const {
  return _internal_has_latency();
}
inline void DNSResults::clear_latency() {
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
}
inline const ::kentik::synthetics::v202309::MetricData& DNSResults::_internal_latency() const {
  const ::kentik::synthetics::v202309::MetricData* p = latency_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::MetricData*>(
      &::kentik::synthetics::v202309::_MetricData_default_instance_);
}
inline const ::kentik::synthetics::v202309::MetricData& DNSResults::latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DNSResults.latency)
  return _internal_latency();
}
inline void DNSResults::unsafe_arena_set_allocated_latency(
    ::kentik::synthetics::v202309::MetricData* latency) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_);
  }
  latency_ = latency;
  if (latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.DNSResults.latency)
}
inline ::kentik::synthetics::v202309::MetricData* DNSResults::release_latency() {
  auto temp = unsafe_arena_release_latency();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::MetricData* DNSResults::unsafe_arena_release_latency() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.DNSResults.latency)
  
  ::kentik::synthetics::v202309::MetricData* temp = latency_;
  latency_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::MetricData* DNSResults::_internal_mutable_latency() {
  
  if (latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::MetricData>(GetArena());
    latency_ = p;
  }
  return latency_;
}
inline ::kentik::synthetics::v202309::MetricData* DNSResults::mutable_latency() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DNSResults.latency)
  return _internal_mutable_latency();
}
inline void DNSResults::set_allocated_latency(::kentik::synthetics::v202309::MetricData* latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete latency_;
  }
  if (latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(latency);
    if (message_arena != submessage_arena) {
      latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.DNSResults.latency)
}

// .kentik.synthetics.v202309.DNSResponseData response = 5[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool DNSResults::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool DNSResults::has_response() const {
  return _internal_has_response();
}
inline void DNSResults::clear_response() {
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
}
inline const ::kentik::synthetics::v202309::DNSResponseData& DNSResults::_internal_response() const {
  const ::kentik::synthetics::v202309::DNSResponseData* p = response_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::DNSResponseData*>(
      &::kentik::synthetics::v202309::_DNSResponseData_default_instance_);
}
inline const ::kentik::synthetics::v202309::DNSResponseData& DNSResults::response() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DNSResults.response)
  return _internal_response();
}
inline void DNSResults::unsafe_arena_set_allocated_response(
    ::kentik::synthetics::v202309::DNSResponseData* response) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.DNSResults.response)
}
inline ::kentik::synthetics::v202309::DNSResponseData* DNSResults::release_response() {
  auto temp = unsafe_arena_release_response();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::DNSResponseData* DNSResults::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.DNSResults.response)
  
  ::kentik::synthetics::v202309::DNSResponseData* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::DNSResponseData* DNSResults::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::DNSResponseData>(GetArena());
    response_ = p;
  }
  return response_;
}
inline ::kentik::synthetics::v202309::DNSResponseData* DNSResults::mutable_response() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DNSResults.response)
  return _internal_mutable_response();
}
inline void DNSResults::set_allocated_response(::kentik::synthetics::v202309::DNSResponseData* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.DNSResults.response)
}

// -------------------------------------------------------------------

// TaskResults

// .kentik.synthetics.v202309.PingResults ping = 1[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool TaskResults::_internal_has_ping() const {
  return task_type_case() == kPing;
}
inline bool TaskResults::has_ping() const {
  return _internal_has_ping();
}
inline void TaskResults::set_has_ping() {
  _oneof_case_[0] = kPing;
}
inline void TaskResults::clear_ping() {
  if (_internal_has_ping()) {
    if (GetArena() == nullptr) {
      delete task_type_.ping_;
    }
    clear_has_task_type();
  }
}
inline ::kentik::synthetics::v202309::PingResults* TaskResults::release_ping() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TaskResults.ping)
  if (_internal_has_ping()) {
    clear_has_task_type();
      ::kentik::synthetics::v202309::PingResults* temp = task_type_.ping_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    task_type_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::PingResults& TaskResults::_internal_ping() const {
  return _internal_has_ping()
      ? *task_type_.ping_
      : *reinterpret_cast< ::kentik::synthetics::v202309::PingResults*>(&::kentik::synthetics::v202309::_PingResults_default_instance_);
}
inline const ::kentik::synthetics::v202309::PingResults& TaskResults::ping() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TaskResults.ping)
  return _internal_ping();
}
inline ::kentik::synthetics::v202309::PingResults* TaskResults::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TaskResults.ping)
  if (_internal_has_ping()) {
    clear_has_task_type();
    ::kentik::synthetics::v202309::PingResults* temp = task_type_.ping_;
    task_type_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskResults::unsafe_arena_set_allocated_ping(::kentik::synthetics::v202309::PingResults* ping) {
  clear_task_type();
  if (ping) {
    set_has_ping();
    task_type_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TaskResults.ping)
}
inline ::kentik::synthetics::v202309::PingResults* TaskResults::_internal_mutable_ping() {
  if (!_internal_has_ping()) {
    clear_task_type();
    set_has_ping();
    task_type_.ping_ = CreateMaybeMessage< ::kentik::synthetics::v202309::PingResults >(GetArena());
  }
  return task_type_.ping_;
}
inline ::kentik::synthetics::v202309::PingResults* TaskResults::mutable_ping() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TaskResults.ping)
  return _internal_mutable_ping();
}

// .kentik.synthetics.v202309.HTTPResults http = 2[json_name = "http", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool TaskResults::_internal_has_http() const {
  return task_type_case() == kHttp;
}
inline bool TaskResults::has_http() const {
  return _internal_has_http();
}
inline void TaskResults::set_has_http() {
  _oneof_case_[0] = kHttp;
}
inline void TaskResults::clear_http() {
  if (_internal_has_http()) {
    if (GetArena() == nullptr) {
      delete task_type_.http_;
    }
    clear_has_task_type();
  }
}
inline ::kentik::synthetics::v202309::HTTPResults* TaskResults::release_http() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TaskResults.http)
  if (_internal_has_http()) {
    clear_has_task_type();
      ::kentik::synthetics::v202309::HTTPResults* temp = task_type_.http_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    task_type_.http_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::HTTPResults& TaskResults::_internal_http() const {
  return _internal_has_http()
      ? *task_type_.http_
      : *reinterpret_cast< ::kentik::synthetics::v202309::HTTPResults*>(&::kentik::synthetics::v202309::_HTTPResults_default_instance_);
}
inline const ::kentik::synthetics::v202309::HTTPResults& TaskResults::http() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TaskResults.http)
  return _internal_http();
}
inline ::kentik::synthetics::v202309::HTTPResults* TaskResults::unsafe_arena_release_http() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TaskResults.http)
  if (_internal_has_http()) {
    clear_has_task_type();
    ::kentik::synthetics::v202309::HTTPResults* temp = task_type_.http_;
    task_type_.http_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskResults::unsafe_arena_set_allocated_http(::kentik::synthetics::v202309::HTTPResults* http) {
  clear_task_type();
  if (http) {
    set_has_http();
    task_type_.http_ = http;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TaskResults.http)
}
inline ::kentik::synthetics::v202309::HTTPResults* TaskResults::_internal_mutable_http() {
  if (!_internal_has_http()) {
    clear_task_type();
    set_has_http();
    task_type_.http_ = CreateMaybeMessage< ::kentik::synthetics::v202309::HTTPResults >(GetArena());
  }
  return task_type_.http_;
}
inline ::kentik::synthetics::v202309::HTTPResults* TaskResults::mutable_http() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TaskResults.http)
  return _internal_mutable_http();
}

// .kentik.synthetics.v202309.DNSResults dns = 3[json_name = "dns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool TaskResults::_internal_has_dns() const {
  return task_type_case() == kDns;
}
inline bool TaskResults::has_dns() const {
  return _internal_has_dns();
}
inline void TaskResults::set_has_dns() {
  _oneof_case_[0] = kDns;
}
inline void TaskResults::clear_dns() {
  if (_internal_has_dns()) {
    if (GetArena() == nullptr) {
      delete task_type_.dns_;
    }
    clear_has_task_type();
  }
}
inline ::kentik::synthetics::v202309::DNSResults* TaskResults::release_dns() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TaskResults.dns)
  if (_internal_has_dns()) {
    clear_has_task_type();
      ::kentik::synthetics::v202309::DNSResults* temp = task_type_.dns_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    task_type_.dns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::kentik::synthetics::v202309::DNSResults& TaskResults::_internal_dns() const {
  return _internal_has_dns()
      ? *task_type_.dns_
      : *reinterpret_cast< ::kentik::synthetics::v202309::DNSResults*>(&::kentik::synthetics::v202309::_DNSResults_default_instance_);
}
inline const ::kentik::synthetics::v202309::DNSResults& TaskResults::dns() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TaskResults.dns)
  return _internal_dns();
}
inline ::kentik::synthetics::v202309::DNSResults* TaskResults::unsafe_arena_release_dns() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TaskResults.dns)
  if (_internal_has_dns()) {
    clear_has_task_type();
    ::kentik::synthetics::v202309::DNSResults* temp = task_type_.dns_;
    task_type_.dns_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TaskResults::unsafe_arena_set_allocated_dns(::kentik::synthetics::v202309::DNSResults* dns) {
  clear_task_type();
  if (dns) {
    set_has_dns();
    task_type_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TaskResults.dns)
}
inline ::kentik::synthetics::v202309::DNSResults* TaskResults::_internal_mutable_dns() {
  if (!_internal_has_dns()) {
    clear_task_type();
    set_has_dns();
    task_type_.dns_ = CreateMaybeMessage< ::kentik::synthetics::v202309::DNSResults >(GetArena());
  }
  return task_type_.dns_;
}
inline ::kentik::synthetics::v202309::DNSResults* TaskResults::mutable_dns() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TaskResults.dns)
  return _internal_mutable_dns();
}

// string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TaskResults::clear_health() {
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TaskResults::health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TaskResults.health)
  return _internal_health();
}
inline void TaskResults::set_health(const std::string& value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TaskResults.health)
}
inline std::string* TaskResults::mutable_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TaskResults.health)
  return _internal_mutable_health();
}
inline const std::string& TaskResults::_internal_health() const {
  return health_.Get();
}
inline void TaskResults::_internal_set_health(const std::string& value) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TaskResults::set_health(std::string&& value) {
  
  health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.TaskResults.health)
}
inline void TaskResults::set_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TaskResults.health)
}
inline void TaskResults::set_health(const char* value,
    size_t size) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TaskResults.health)
}
inline std::string* TaskResults::_internal_mutable_health() {
  
  return health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TaskResults::release_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TaskResults.health)
  return health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TaskResults::set_allocated_health(std::string* health) {
  if (health != nullptr) {
    
  } else {
    
  }
  health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TaskResults.health)
}
inline std::string* TaskResults::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TaskResults.health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TaskResults::unsafe_arena_set_allocated_health(
    std::string* health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health != nullptr) {
    
  } else {
    
  }
  health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TaskResults.health)
}

inline bool TaskResults::has_task_type() const {
  return task_type_case() != TASK_TYPE_NOT_SET;
}
inline void TaskResults::clear_has_task_type() {
  _oneof_case_[0] = TASK_TYPE_NOT_SET;
}
inline TaskResults::TaskTypeCase TaskResults::task_type_case() const {
  return TaskResults::TaskTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AgentResults

// string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AgentResults::clear_agent_id() {
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AgentResults::agent_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentResults.agent_id)
  return _internal_agent_id();
}
inline void AgentResults::set_agent_id(const std::string& value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.AgentResults.agent_id)
}
inline std::string* AgentResults::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentResults.agent_id)
  return _internal_mutable_agent_id();
}
inline const std::string& AgentResults::_internal_agent_id() const {
  return agent_id_.Get();
}
inline void AgentResults::_internal_set_agent_id(const std::string& value) {
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentResults::set_agent_id(std::string&& value) {
  
  agent_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.AgentResults.agent_id)
}
inline void AgentResults::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.AgentResults.agent_id)
}
inline void AgentResults::set_agent_id(const char* value,
    size_t size) {
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.AgentResults.agent_id)
}
inline std::string* AgentResults::_internal_mutable_agent_id() {
  
  return agent_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentResults::release_agent_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.AgentResults.agent_id)
  return agent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentResults::set_allocated_agent_id(std::string* agent_id) {
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.AgentResults.agent_id)
}
inline std::string* AgentResults::unsafe_arena_release_agent_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.AgentResults.agent_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return agent_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AgentResults::unsafe_arena_set_allocated_agent_id(
    std::string* agent_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agent_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.AgentResults.agent_id)
}

// string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void AgentResults::clear_health() {
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AgentResults::health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentResults.health)
  return _internal_health();
}
inline void AgentResults::set_health(const std::string& value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.AgentResults.health)
}
inline std::string* AgentResults::mutable_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentResults.health)
  return _internal_mutable_health();
}
inline const std::string& AgentResults::_internal_health() const {
  return health_.Get();
}
inline void AgentResults::_internal_set_health(const std::string& value) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AgentResults::set_health(std::string&& value) {
  
  health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.AgentResults.health)
}
inline void AgentResults::set_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.AgentResults.health)
}
inline void AgentResults::set_health(const char* value,
    size_t size) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.AgentResults.health)
}
inline std::string* AgentResults::_internal_mutable_health() {
  
  return health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AgentResults::release_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.AgentResults.health)
  return health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AgentResults::set_allocated_health(std::string* health) {
  if (health != nullptr) {
    
  } else {
    
  }
  health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.AgentResults.health)
}
inline std::string* AgentResults::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.AgentResults.health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AgentResults::unsafe_arena_set_allocated_health(
    std::string* health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health != nullptr) {
    
  } else {
    
  }
  health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.AgentResults.health)
}

// repeated .kentik.synthetics.v202309.TaskResults tasks = 3[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int AgentResults::_internal_tasks_size() const {
  return tasks_.size();
}
inline int AgentResults::tasks_size() const {
  return _internal_tasks_size();
}
inline void AgentResults::clear_tasks() {
  tasks_.Clear();
}
inline ::kentik::synthetics::v202309::TaskResults* AgentResults::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.AgentResults.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TaskResults >*
AgentResults::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.AgentResults.tasks)
  return &tasks_;
}
inline const ::kentik::synthetics::v202309::TaskResults& AgentResults::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::kentik::synthetics::v202309::TaskResults& AgentResults::tasks(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.AgentResults.tasks)
  return _internal_tasks(index);
}
inline ::kentik::synthetics::v202309::TaskResults* AgentResults::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::kentik::synthetics::v202309::TaskResults* AgentResults::add_tasks() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.AgentResults.tasks)
  return _internal_add_tasks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TaskResults >&
AgentResults::tasks() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.AgentResults.tasks)
  return tasks_;
}

// -------------------------------------------------------------------

// TestResults

// string test_id = 1[json_name = "testId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestResults::clear_test_id() {
  test_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestResults::test_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestResults.test_id)
  return _internal_test_id();
}
inline void TestResults::set_test_id(const std::string& value) {
  _internal_set_test_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestResults.test_id)
}
inline std::string* TestResults::mutable_test_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestResults.test_id)
  return _internal_mutable_test_id();
}
inline const std::string& TestResults::_internal_test_id() const {
  return test_id_.Get();
}
inline void TestResults::_internal_set_test_id(const std::string& value) {
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestResults::set_test_id(std::string&& value) {
  
  test_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.TestResults.test_id)
}
inline void TestResults::set_test_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TestResults.test_id)
}
inline void TestResults::set_test_id(const char* value,
    size_t size) {
  
  test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TestResults.test_id)
}
inline std::string* TestResults::_internal_mutable_test_id() {
  
  return test_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestResults::release_test_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestResults.test_id)
  return test_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestResults::set_allocated_test_id(std::string* test_id) {
  if (test_id != nullptr) {
    
  } else {
    
  }
  test_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), test_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestResults.test_id)
}
inline std::string* TestResults::unsafe_arena_release_test_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestResults.test_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return test_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestResults::unsafe_arena_set_allocated_test_id(
    std::string* test_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (test_id != nullptr) {
    
  } else {
    
  }
  test_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      test_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestResults.test_id)
}

// .google.protobuf.Timestamp time = 2[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool TestResults::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool TestResults::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TestResults::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TestResults::time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestResults.time)
  return _internal_time();
}
inline void TestResults::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestResults.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TestResults::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TestResults::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestResults.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TestResults::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TestResults::mutable_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestResults.time)
  return _internal_mutable_time();
}
inline void TestResults::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestResults.time)
}

// string health = 3[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TestResults::clear_health() {
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TestResults::health() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestResults.health)
  return _internal_health();
}
inline void TestResults::set_health(const std::string& value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TestResults.health)
}
inline std::string* TestResults::mutable_health() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestResults.health)
  return _internal_mutable_health();
}
inline const std::string& TestResults::_internal_health() const {
  return health_.Get();
}
inline void TestResults::_internal_set_health(const std::string& value) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TestResults::set_health(std::string&& value) {
  
  health_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.TestResults.health)
}
inline void TestResults::set_health(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TestResults.health)
}
inline void TestResults::set_health(const char* value,
    size_t size) {
  
  health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TestResults.health)
}
inline std::string* TestResults::_internal_mutable_health() {
  
  return health_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TestResults::release_health() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TestResults.health)
  return health_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TestResults::set_allocated_health(std::string* health) {
  if (health != nullptr) {
    
  } else {
    
  }
  health_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), health,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestResults.health)
}
inline std::string* TestResults::unsafe_arena_release_health() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TestResults.health)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return health_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TestResults::unsafe_arena_set_allocated_health(
    std::string* health) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (health != nullptr) {
    
  } else {
    
  }
  health_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      health, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TestResults.health)
}

// repeated .kentik.synthetics.v202309.AgentResults agents = 4[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int TestResults::_internal_agents_size() const {
  return agents_.size();
}
inline int TestResults::agents_size() const {
  return _internal_agents_size();
}
inline void TestResults::clear_agents() {
  agents_.Clear();
}
inline ::kentik::synthetics::v202309::AgentResults* TestResults::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TestResults.agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentResults >*
TestResults::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.TestResults.agents)
  return &agents_;
}
inline const ::kentik::synthetics::v202309::AgentResults& TestResults::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::kentik::synthetics::v202309::AgentResults& TestResults::agents(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TestResults.agents)
  return _internal_agents(index);
}
inline ::kentik::synthetics::v202309::AgentResults* TestResults::_internal_add_agents() {
  return agents_.Add();
}
inline ::kentik::synthetics::v202309::AgentResults* TestResults::add_agents() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.TestResults.agents)
  return _internal_add_agents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::AgentResults >&
TestResults::agents() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.TestResults.agents)
  return agents_;
}

// -------------------------------------------------------------------

// Stats

// int32 average = 1[json_name = "average", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Stats::clear_average() {
  average_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::_internal_average() const {
  return average_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::average() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Stats.average)
  return _internal_average();
}
inline void Stats::_internal_set_average(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  average_ = value;
}
inline void Stats::set_average(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_average(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Stats.average)
}

// int32 min = 2[json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Stats::clear_min() {
  min_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::_internal_min() const {
  return min_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::min() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Stats.min)
  return _internal_min();
}
inline void Stats::_internal_set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_ = value;
}
inline void Stats::set_min(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Stats.min)
}

// int32 max = 3[json_name = "max", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Stats::clear_max() {
  max_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::_internal_max() const {
  return max_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stats::max() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Stats.max)
  return _internal_max();
}
inline void Stats::_internal_set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_ = value;
}
inline void Stats::set_max(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Stats.max)
}

// -------------------------------------------------------------------

// Location

// double latitude = 8[json_name = "latitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Location::clear_latitude() {
  latitude_ = 0;
}
inline double Location::_internal_latitude() const {
  return latitude_;
}
inline double Location::latitude() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Location::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Location.latitude)
}

// double longitude = 9[json_name = "longitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Location::clear_longitude() {
  longitude_ = 0;
}
inline double Location::_internal_longitude() const {
  return longitude_;
}
inline double Location::longitude() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Location::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Location.longitude)
}

// string country = 1[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Location::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Location::country() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Location.country)
  return _internal_country();
}
inline void Location::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Location.country)
}
inline std::string* Location::mutable_country() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Location.country)
  return _internal_mutable_country();
}
inline const std::string& Location::_internal_country() const {
  return country_.Get();
}
inline void Location::_internal_set_country(const std::string& value) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Location::set_country(std::string&& value) {
  
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Location.country)
}
inline void Location::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Location.country)
}
inline void Location::set_country(const char* value,
    size_t size) {
  
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Location.country)
}
inline std::string* Location::_internal_mutable_country() {
  
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Location::release_country() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Location.country)
  return country_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Location::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    
  } else {
    
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Location.country)
}
inline std::string* Location::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Location.country)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Location::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country != nullptr) {
    
  } else {
    
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Location.country)
}

// string region = 2[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Location::clear_region() {
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Location::region() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Location.region)
  return _internal_region();
}
inline void Location::set_region(const std::string& value) {
  _internal_set_region(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Location.region)
}
inline std::string* Location::mutable_region() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Location.region)
  return _internal_mutable_region();
}
inline const std::string& Location::_internal_region() const {
  return region_.Get();
}
inline void Location::_internal_set_region(const std::string& value) {
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Location::set_region(std::string&& value) {
  
  region_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Location.region)
}
inline void Location::set_region(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Location.region)
}
inline void Location::set_region(const char* value,
    size_t size) {
  
  region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Location.region)
}
inline std::string* Location::_internal_mutable_region() {
  
  return region_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Location::release_region() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Location.region)
  return region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Location::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Location.region)
}
inline std::string* Location::unsafe_arena_release_region() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Location.region)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return region_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Location::unsafe_arena_set_allocated_region(
    std::string* region) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (region != nullptr) {
    
  } else {
    
  }
  region_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      region, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Location.region)
}

// string city = 3[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Location::clear_city() {
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Location::city() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Location.city)
  return _internal_city();
}
inline void Location::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Location.city)
}
inline std::string* Location::mutable_city() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Location.city)
  return _internal_mutable_city();
}
inline const std::string& Location::_internal_city() const {
  return city_.Get();
}
inline void Location::_internal_set_city(const std::string& value) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Location::set_city(std::string&& value) {
  
  city_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Location.city)
}
inline void Location::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Location.city)
}
inline void Location::set_city(const char* value,
    size_t size) {
  
  city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Location.city)
}
inline std::string* Location::_internal_mutable_city() {
  
  return city_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Location::release_city() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Location.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Location::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Location.city)
}
inline std::string* Location::unsafe_arena_release_city() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Location.city)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return city_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Location::unsafe_arena_set_allocated_city(
    std::string* city) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (city != nullptr) {
    
  } else {
    
  }
  city_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      city, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Location.city)
}

// -------------------------------------------------------------------

// NetNode

// string ip = 2[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NetNode::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetNode::ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.NetNode.ip)
  return _internal_ip();
}
inline void NetNode::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.NetNode.ip)
}
inline std::string* NetNode::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.NetNode.ip)
  return _internal_mutable_ip();
}
inline const std::string& NetNode::_internal_ip() const {
  return ip_.Get();
}
inline void NetNode::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetNode::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.NetNode.ip)
}
inline void NetNode::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.NetNode.ip)
}
inline void NetNode::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.NetNode.ip)
}
inline std::string* NetNode::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetNode::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.NetNode.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetNode::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.NetNode.ip)
}
inline std::string* NetNode::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.NetNode.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetNode::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.NetNode.ip)
}

// uint32 asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NetNode::clear_asn() {
  asn_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetNode::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetNode::asn() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.NetNode.asn)
  return _internal_asn();
}
inline void NetNode::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  asn_ = value;
}
inline void NetNode::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.NetNode.asn)
}

// string as_name = 4[json_name = "asName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NetNode::clear_as_name() {
  as_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetNode::as_name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.NetNode.as_name)
  return _internal_as_name();
}
inline void NetNode::set_as_name(const std::string& value) {
  _internal_set_as_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.NetNode.as_name)
}
inline std::string* NetNode::mutable_as_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.NetNode.as_name)
  return _internal_mutable_as_name();
}
inline const std::string& NetNode::_internal_as_name() const {
  return as_name_.Get();
}
inline void NetNode::_internal_set_as_name(const std::string& value) {
  
  as_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetNode::set_as_name(std::string&& value) {
  
  as_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.NetNode.as_name)
}
inline void NetNode::set_as_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  as_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.NetNode.as_name)
}
inline void NetNode::set_as_name(const char* value,
    size_t size) {
  
  as_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.NetNode.as_name)
}
inline std::string* NetNode::_internal_mutable_as_name() {
  
  return as_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetNode::release_as_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.NetNode.as_name)
  return as_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetNode::set_allocated_as_name(std::string* as_name) {
  if (as_name != nullptr) {
    
  } else {
    
  }
  as_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), as_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.NetNode.as_name)
}
inline std::string* NetNode::unsafe_arena_release_as_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.NetNode.as_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return as_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetNode::unsafe_arena_set_allocated_as_name(
    std::string* as_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (as_name != nullptr) {
    
  } else {
    
  }
  as_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      as_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.NetNode.as_name)
}

// .kentik.synthetics.v202309.Location location = 5[json_name = "location", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool NetNode::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool NetNode::has_location() const {
  return _internal_has_location();
}
inline void NetNode::clear_location() {
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Location& NetNode::_internal_location() const {
  const ::kentik::synthetics::v202309::Location* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Location*>(
      &::kentik::synthetics::v202309::_Location_default_instance_);
}
inline const ::kentik::synthetics::v202309::Location& NetNode::location() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.NetNode.location)
  return _internal_location();
}
inline void NetNode::unsafe_arena_set_allocated_location(
    ::kentik::synthetics::v202309::Location* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.NetNode.location)
}
inline ::kentik::synthetics::v202309::Location* NetNode::release_location() {
  auto temp = unsafe_arena_release_location();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Location* NetNode::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.NetNode.location)
  
  ::kentik::synthetics::v202309::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Location* NetNode::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Location>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::kentik::synthetics::v202309::Location* NetNode::mutable_location() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.NetNode.location)
  return _internal_mutable_location();
}
inline void NetNode::set_allocated_location(::kentik::synthetics::v202309::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.NetNode.location)
}

// string dns_name = 6[json_name = "dnsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NetNode::clear_dns_name() {
  dns_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetNode::dns_name() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.NetNode.dns_name)
  return _internal_dns_name();
}
inline void NetNode::set_dns_name(const std::string& value) {
  _internal_set_dns_name(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.NetNode.dns_name)
}
inline std::string* NetNode::mutable_dns_name() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.NetNode.dns_name)
  return _internal_mutable_dns_name();
}
inline const std::string& NetNode::_internal_dns_name() const {
  return dns_name_.Get();
}
inline void NetNode::_internal_set_dns_name(const std::string& value) {
  
  dns_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetNode::set_dns_name(std::string&& value) {
  
  dns_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.NetNode.dns_name)
}
inline void NetNode::set_dns_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dns_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.NetNode.dns_name)
}
inline void NetNode::set_dns_name(const char* value,
    size_t size) {
  
  dns_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.NetNode.dns_name)
}
inline std::string* NetNode::_internal_mutable_dns_name() {
  
  return dns_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetNode::release_dns_name() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.NetNode.dns_name)
  return dns_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetNode::set_allocated_dns_name(std::string* dns_name) {
  if (dns_name != nullptr) {
    
  } else {
    
  }
  dns_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dns_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.NetNode.dns_name)
}
inline std::string* NetNode::unsafe_arena_release_dns_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.NetNode.dns_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return dns_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetNode::unsafe_arena_set_allocated_dns_name(
    std::string* dns_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dns_name != nullptr) {
    
  } else {
    
  }
  dns_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dns_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.NetNode.dns_name)
}

// string device_id = 7[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NetNode::clear_device_id() {
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetNode::device_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.NetNode.device_id)
  return _internal_device_id();
}
inline void NetNode::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.NetNode.device_id)
}
inline std::string* NetNode::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.NetNode.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& NetNode::_internal_device_id() const {
  return device_id_.Get();
}
inline void NetNode::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetNode::set_device_id(std::string&& value) {
  
  device_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.NetNode.device_id)
}
inline void NetNode::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.NetNode.device_id)
}
inline void NetNode::set_device_id(const char* value,
    size_t size) {
  
  device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.NetNode.device_id)
}
inline std::string* NetNode::_internal_mutable_device_id() {
  
  return device_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetNode::release_device_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.NetNode.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetNode::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.NetNode.device_id)
}
inline std::string* NetNode::unsafe_arena_release_device_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.NetNode.device_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return device_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetNode::unsafe_arena_set_allocated_device_id(
    std::string* device_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      device_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.NetNode.device_id)
}

// string site_id = 8[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NetNode::clear_site_id() {
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NetNode::site_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.NetNode.site_id)
  return _internal_site_id();
}
inline void NetNode::set_site_id(const std::string& value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.NetNode.site_id)
}
inline std::string* NetNode::mutable_site_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.NetNode.site_id)
  return _internal_mutable_site_id();
}
inline const std::string& NetNode::_internal_site_id() const {
  return site_id_.Get();
}
inline void NetNode::_internal_set_site_id(const std::string& value) {
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NetNode::set_site_id(std::string&& value) {
  
  site_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.NetNode.site_id)
}
inline void NetNode::set_site_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.NetNode.site_id)
}
inline void NetNode::set_site_id(const char* value,
    size_t size) {
  
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.NetNode.site_id)
}
inline std::string* NetNode::_internal_mutable_site_id() {
  
  return site_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NetNode::release_site_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.NetNode.site_id)
  return site_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NetNode::set_allocated_site_id(std::string* site_id) {
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.NetNode.site_id)
}
inline std::string* NetNode::unsafe_arena_release_site_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.NetNode.site_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return site_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NetNode::unsafe_arena_set_allocated_site_id(
    std::string* site_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_id != nullptr) {
    
  } else {
    
  }
  site_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.NetNode.site_id)
}

// -------------------------------------------------------------------

// TraceHop

// int32 latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TraceHop::clear_latency() {
  latency_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::_internal_latency() const {
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TraceHop::latency() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TraceHop.latency)
  return _internal_latency();
}
inline void TraceHop::_internal_set_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  latency_ = value;
}
inline void TraceHop::set_latency(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TraceHop.latency)
}

// string node_id = 5[json_name = "nodeId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void TraceHop::clear_node_id() {
  node_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TraceHop::node_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.TraceHop.node_id)
  return _internal_node_id();
}
inline void TraceHop::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.TraceHop.node_id)
}
inline std::string* TraceHop::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.TraceHop.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& TraceHop::_internal_node_id() const {
  return node_id_.Get();
}
inline void TraceHop::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TraceHop::set_node_id(std::string&& value) {
  
  node_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.TraceHop.node_id)
}
inline void TraceHop::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.TraceHop.node_id)
}
inline void TraceHop::set_node_id(const char* value,
    size_t size) {
  
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.TraceHop.node_id)
}
inline std::string* TraceHop::_internal_mutable_node_id() {
  
  return node_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TraceHop::release_node_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.TraceHop.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TraceHop::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TraceHop.node_id)
}
inline std::string* TraceHop::unsafe_arena_release_node_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.TraceHop.node_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return node_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TraceHop::unsafe_arena_set_allocated_node_id(
    std::string* node_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      node_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.TraceHop.node_id)
}

// -------------------------------------------------------------------

// PathTrace

// repeated int32 as_path = 1[json_name = "asPath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int PathTrace::_internal_as_path_size() const {
  return as_path_.size();
}
inline int PathTrace::as_path_size() const {
  return _internal_as_path_size();
}
inline void PathTrace::clear_as_path() {
  as_path_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathTrace::_internal_as_path(int index) const {
  return as_path_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PathTrace::as_path(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PathTrace.as_path)
  return _internal_as_path(index);
}
inline void PathTrace::set_as_path(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  as_path_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PathTrace.as_path)
}
inline void PathTrace::_internal_add_as_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  as_path_.Add(value);
}
inline void PathTrace::add_as_path(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_as_path(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.PathTrace.as_path)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PathTrace::_internal_as_path() const {
  return as_path_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
PathTrace::as_path() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.PathTrace.as_path)
  return _internal_as_path();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PathTrace::_internal_mutable_as_path() {
  return &as_path_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
PathTrace::mutable_as_path() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.PathTrace.as_path)
  return _internal_mutable_as_path();
}

// bool is_complete = 2[json_name = "isComplete", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void PathTrace::clear_is_complete() {
  is_complete_ = false;
}
inline bool PathTrace::_internal_is_complete() const {
  return is_complete_;
}
inline bool PathTrace::is_complete() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PathTrace.is_complete)
  return _internal_is_complete();
}
inline void PathTrace::_internal_set_is_complete(bool value) {
  
  is_complete_ = value;
}
inline void PathTrace::set_is_complete(bool value) {
  _internal_set_is_complete(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.PathTrace.is_complete)
}

// repeated .kentik.synthetics.v202309.TraceHop hops = 6[json_name = "hops", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int PathTrace::_internal_hops_size() const {
  return hops_.size();
}
inline int PathTrace::hops_size() const {
  return _internal_hops_size();
}
inline void PathTrace::clear_hops() {
  hops_.Clear();
}
inline ::kentik::synthetics::v202309::TraceHop* PathTrace::mutable_hops(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.PathTrace.hops)
  return hops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TraceHop >*
PathTrace::mutable_hops() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.PathTrace.hops)
  return &hops_;
}
inline const ::kentik::synthetics::v202309::TraceHop& PathTrace::_internal_hops(int index) const {
  return hops_.Get(index);
}
inline const ::kentik::synthetics::v202309::TraceHop& PathTrace::hops(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.PathTrace.hops)
  return _internal_hops(index);
}
inline ::kentik::synthetics::v202309::TraceHop* PathTrace::_internal_add_hops() {
  return hops_.Add();
}
inline ::kentik::synthetics::v202309::TraceHop* PathTrace::add_hops() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.PathTrace.hops)
  return _internal_add_hops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TraceHop >&
PathTrace::hops() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.PathTrace.hops)
  return hops_;
}

// -------------------------------------------------------------------

// Path

// string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Path::clear_agent_id() {
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Path::agent_id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Path.agent_id)
  return _internal_agent_id();
}
inline void Path::set_agent_id(const std::string& value) {
  _internal_set_agent_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Path.agent_id)
}
inline std::string* Path::mutable_agent_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Path.agent_id)
  return _internal_mutable_agent_id();
}
inline const std::string& Path::_internal_agent_id() const {
  return agent_id_.Get();
}
inline void Path::_internal_set_agent_id(const std::string& value) {
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Path::set_agent_id(std::string&& value) {
  
  agent_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Path.agent_id)
}
inline void Path::set_agent_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Path.agent_id)
}
inline void Path::set_agent_id(const char* value,
    size_t size) {
  
  agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Path.agent_id)
}
inline std::string* Path::_internal_mutable_agent_id() {
  
  return agent_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Path::release_agent_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Path.agent_id)
  return agent_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Path::set_allocated_agent_id(std::string* agent_id) {
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), agent_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Path.agent_id)
}
inline std::string* Path::unsafe_arena_release_agent_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Path.agent_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return agent_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Path::unsafe_arena_set_allocated_agent_id(
    std::string* agent_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (agent_id != nullptr) {
    
  } else {
    
  }
  agent_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      agent_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Path.agent_id)
}

// string target_ip = 3[json_name = "targetIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Path::clear_target_ip() {
  target_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Path::target_ip() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Path.target_ip)
  return _internal_target_ip();
}
inline void Path::set_target_ip(const std::string& value) {
  _internal_set_target_ip(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Path.target_ip)
}
inline std::string* Path::mutable_target_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Path.target_ip)
  return _internal_mutable_target_ip();
}
inline const std::string& Path::_internal_target_ip() const {
  return target_ip_.Get();
}
inline void Path::_internal_set_target_ip(const std::string& value) {
  
  target_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Path::set_target_ip(std::string&& value) {
  
  target_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.Path.target_ip)
}
inline void Path::set_target_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.Path.target_ip)
}
inline void Path::set_target_ip(const char* value,
    size_t size) {
  
  target_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.Path.target_ip)
}
inline std::string* Path::_internal_mutable_target_ip() {
  
  return target_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Path::release_target_ip() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Path.target_ip)
  return target_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Path::set_allocated_target_ip(std::string* target_ip) {
  if (target_ip != nullptr) {
    
  } else {
    
  }
  target_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Path.target_ip)
}
inline std::string* Path::unsafe_arena_release_target_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.Path.target_ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return target_ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Path::unsafe_arena_set_allocated_target_ip(
    std::string* target_ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (target_ip != nullptr) {
    
  } else {
    
  }
  target_ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      target_ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Path.target_ip)
}

// .kentik.synthetics.v202309.Stats hop_count = 4[json_name = "hopCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Path::_internal_has_hop_count() const {
  return this != internal_default_instance() && hop_count_ != nullptr;
}
inline bool Path::has_hop_count() const {
  return _internal_has_hop_count();
}
inline void Path::clear_hop_count() {
  if (GetArena() == nullptr && hop_count_ != nullptr) {
    delete hop_count_;
  }
  hop_count_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Stats& Path::_internal_hop_count() const {
  const ::kentik::synthetics::v202309::Stats* p = hop_count_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Stats*>(
      &::kentik::synthetics::v202309::_Stats_default_instance_);
}
inline const ::kentik::synthetics::v202309::Stats& Path::hop_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Path.hop_count)
  return _internal_hop_count();
}
inline void Path::unsafe_arena_set_allocated_hop_count(
    ::kentik::synthetics::v202309::Stats* hop_count) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hop_count_);
  }
  hop_count_ = hop_count;
  if (hop_count) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Path.hop_count)
}
inline ::kentik::synthetics::v202309::Stats* Path::release_hop_count() {
  auto temp = unsafe_arena_release_hop_count();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Stats* Path::unsafe_arena_release_hop_count() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Path.hop_count)
  
  ::kentik::synthetics::v202309::Stats* temp = hop_count_;
  hop_count_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Stats* Path::_internal_mutable_hop_count() {
  
  if (hop_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Stats>(GetArena());
    hop_count_ = p;
  }
  return hop_count_;
}
inline ::kentik::synthetics::v202309::Stats* Path::mutable_hop_count() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Path.hop_count)
  return _internal_mutable_hop_count();
}
inline void Path::set_allocated_hop_count(::kentik::synthetics::v202309::Stats* hop_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hop_count_;
  }
  if (hop_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hop_count);
    if (message_arena != submessage_arena) {
      hop_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hop_count, submessage_arena);
    }
    
  } else {
    
  }
  hop_count_ = hop_count;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Path.hop_count)
}

// int32 max_as_path_length = 7[json_name = "maxAsPathLength", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Path::clear_max_as_path_length() {
  max_as_path_length_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Path::_internal_max_as_path_length() const {
  return max_as_path_length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Path::max_as_path_length() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Path.max_as_path_length)
  return _internal_max_as_path_length();
}
inline void Path::_internal_set_max_as_path_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_as_path_length_ = value;
}
inline void Path::set_max_as_path_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_as_path_length(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.Path.max_as_path_length)
}

// repeated .kentik.synthetics.v202309.PathTrace traces = 8[json_name = "traces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Path::_internal_traces_size() const {
  return traces_.size();
}
inline int Path::traces_size() const {
  return _internal_traces_size();
}
inline void Path::clear_traces() {
  traces_.Clear();
}
inline ::kentik::synthetics::v202309::PathTrace* Path::mutable_traces(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Path.traces)
  return traces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::PathTrace >*
Path::mutable_traces() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.Path.traces)
  return &traces_;
}
inline const ::kentik::synthetics::v202309::PathTrace& Path::_internal_traces(int index) const {
  return traces_.Get(index);
}
inline const ::kentik::synthetics::v202309::PathTrace& Path::traces(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Path.traces)
  return _internal_traces(index);
}
inline ::kentik::synthetics::v202309::PathTrace* Path::_internal_add_traces() {
  return traces_.Add();
}
inline ::kentik::synthetics::v202309::PathTrace* Path::add_traces() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.Path.traces)
  return _internal_add_traces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::PathTrace >&
Path::traces() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.Path.traces)
  return traces_;
}

// .google.protobuf.Timestamp time = 9[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Path::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Path::has_time() const {
  return _internal_has_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Path::_internal_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& Path::time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.Path.time)
  return _internal_time();
}
inline void Path::unsafe_arena_set_allocated_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.Path.time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Path::release_time() {
  auto temp = unsafe_arena_release_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Path::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.Path.time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Path::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    time_ = p;
  }
  return time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* Path::mutable_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.Path.time)
  return _internal_mutable_time();
}
inline void Path::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.Path.time)
}

// -------------------------------------------------------------------

// GetResultsForTestsRequest

// repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int GetResultsForTestsRequest::_internal_ids_size() const {
  return ids_.size();
}
inline int GetResultsForTestsRequest::ids_size() const {
  return _internal_ids_size();
}
inline void GetResultsForTestsRequest::clear_ids() {
  ids_.Clear();
}
inline std::string* GetResultsForTestsRequest::add_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
  return _internal_add_ids();
}
inline const std::string& GetResultsForTestsRequest::_internal_ids(int index) const {
  return ids_.Get(index);
}
inline const std::string& GetResultsForTestsRequest::ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
  return _internal_ids(index);
}
inline std::string* GetResultsForTestsRequest::mutable_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
  return ids_.Mutable(index);
}
inline void GetResultsForTestsRequest::set_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
  ids_.Mutable(index)->assign(value);
}
inline void GetResultsForTestsRequest::set_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
  ids_.Mutable(index)->assign(std::move(value));
}
inline void GetResultsForTestsRequest::set_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
}
inline void GetResultsForTestsRequest::set_ids(int index, const char* value, size_t size) {
  ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
}
inline std::string* GetResultsForTestsRequest::_internal_add_ids() {
  return ids_.Add();
}
inline void GetResultsForTestsRequest::add_ids(const std::string& value) {
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
}
inline void GetResultsForTestsRequest::add_ids(std::string&& value) {
  ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
}
inline void GetResultsForTestsRequest::add_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
}
inline void GetResultsForTestsRequest::add_ids(const char* value, size_t size) {
  ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetResultsForTestsRequest::ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
  return ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetResultsForTestsRequest::mutable_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.GetResultsForTestsRequest.ids)
  return &ids_;
}

// .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetResultsForTestsRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool GetResultsForTestsRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetResultsForTestsRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetResultsForTestsRequest::start_time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetResultsForTestsRequest.start_time)
  return _internal_start_time();
}
inline void GetResultsForTestsRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetResultsForTestsRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetResultsForTestsRequest::release_start_time() {
  auto temp = unsafe_arena_release_start_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetResultsForTestsRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetResultsForTestsRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetResultsForTestsRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetResultsForTestsRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetResultsForTestsRequest.start_time)
  return _internal_mutable_start_time();
}
inline void GetResultsForTestsRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetResultsForTestsRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetResultsForTestsRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool GetResultsForTestsRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetResultsForTestsRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetResultsForTestsRequest::end_time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetResultsForTestsRequest.end_time)
  return _internal_end_time();
}
inline void GetResultsForTestsRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetResultsForTestsRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetResultsForTestsRequest::release_end_time() {
  auto temp = unsafe_arena_release_end_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetResultsForTestsRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetResultsForTestsRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetResultsForTestsRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetResultsForTestsRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetResultsForTestsRequest.end_time)
  return _internal_mutable_end_time();
}
inline void GetResultsForTestsRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetResultsForTestsRequest.end_time)
}

// repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int GetResultsForTestsRequest::_internal_agent_ids_size() const {
  return agent_ids_.size();
}
inline int GetResultsForTestsRequest::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void GetResultsForTestsRequest::clear_agent_ids() {
  agent_ids_.Clear();
}
inline std::string* GetResultsForTestsRequest::add_agent_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
  return _internal_add_agent_ids();
}
inline const std::string& GetResultsForTestsRequest::_internal_agent_ids(int index) const {
  return agent_ids_.Get(index);
}
inline const std::string& GetResultsForTestsRequest::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
  return _internal_agent_ids(index);
}
inline std::string* GetResultsForTestsRequest::mutable_agent_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
  return agent_ids_.Mutable(index);
}
inline void GetResultsForTestsRequest::set_agent_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
  agent_ids_.Mutable(index)->assign(value);
}
inline void GetResultsForTestsRequest::set_agent_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
  agent_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetResultsForTestsRequest::set_agent_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
}
inline void GetResultsForTestsRequest::set_agent_ids(int index, const char* value, size_t size) {
  agent_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
}
inline std::string* GetResultsForTestsRequest::_internal_add_agent_ids() {
  return agent_ids_.Add();
}
inline void GetResultsForTestsRequest::add_agent_ids(const std::string& value) {
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
}
inline void GetResultsForTestsRequest::add_agent_ids(std::string&& value) {
  agent_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
}
inline void GetResultsForTestsRequest::add_agent_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
}
inline void GetResultsForTestsRequest::add_agent_ids(const char* value, size_t size) {
  agent_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetResultsForTestsRequest::agent_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
  return agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetResultsForTestsRequest::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids)
  return &agent_ids_;
}

// repeated string targets = 5[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int GetResultsForTestsRequest::_internal_targets_size() const {
  return targets_.size();
}
inline int GetResultsForTestsRequest::targets_size() const {
  return _internal_targets_size();
}
inline void GetResultsForTestsRequest::clear_targets() {
  targets_.Clear();
}
inline std::string* GetResultsForTestsRequest::add_targets() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
  return _internal_add_targets();
}
inline const std::string& GetResultsForTestsRequest::_internal_targets(int index) const {
  return targets_.Get(index);
}
inline const std::string& GetResultsForTestsRequest::targets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
  return _internal_targets(index);
}
inline std::string* GetResultsForTestsRequest::mutable_targets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
  return targets_.Mutable(index);
}
inline void GetResultsForTestsRequest::set_targets(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
  targets_.Mutable(index)->assign(value);
}
inline void GetResultsForTestsRequest::set_targets(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
  targets_.Mutable(index)->assign(std::move(value));
}
inline void GetResultsForTestsRequest::set_targets(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
}
inline void GetResultsForTestsRequest::set_targets(int index, const char* value, size_t size) {
  targets_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
}
inline std::string* GetResultsForTestsRequest::_internal_add_targets() {
  return targets_.Add();
}
inline void GetResultsForTestsRequest::add_targets(const std::string& value) {
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
}
inline void GetResultsForTestsRequest::add_targets(std::string&& value) {
  targets_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
}
inline void GetResultsForTestsRequest::add_targets(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  targets_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
}
inline void GetResultsForTestsRequest::add_targets(const char* value, size_t size) {
  targets_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetResultsForTestsRequest::targets() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
  return targets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetResultsForTestsRequest::mutable_targets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.GetResultsForTestsRequest.targets)
  return &targets_;
}

// bool aggregate = 6[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetResultsForTestsRequest::clear_aggregate() {
  aggregate_ = false;
}
inline bool GetResultsForTestsRequest::_internal_aggregate() const {
  return aggregate_;
}
inline bool GetResultsForTestsRequest::aggregate() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetResultsForTestsRequest.aggregate)
  return _internal_aggregate();
}
inline void GetResultsForTestsRequest::_internal_set_aggregate(bool value) {
  
  aggregate_ = value;
}
inline void GetResultsForTestsRequest::set_aggregate(bool value) {
  _internal_set_aggregate(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetResultsForTestsRequest.aggregate)
}

// -------------------------------------------------------------------

// GetResultsForTestsResponse

// repeated .kentik.synthetics.v202309.TestResults results = 1[json_name = "results"];
inline int GetResultsForTestsResponse::_internal_results_size() const {
  return results_.size();
}
inline int GetResultsForTestsResponse::results_size() const {
  return _internal_results_size();
}
inline void GetResultsForTestsResponse::clear_results() {
  results_.Clear();
}
inline ::kentik::synthetics::v202309::TestResults* GetResultsForTestsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetResultsForTestsResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TestResults >*
GetResultsForTestsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.GetResultsForTestsResponse.results)
  return &results_;
}
inline const ::kentik::synthetics::v202309::TestResults& GetResultsForTestsResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::kentik::synthetics::v202309::TestResults& GetResultsForTestsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetResultsForTestsResponse.results)
  return _internal_results(index);
}
inline ::kentik::synthetics::v202309::TestResults* GetResultsForTestsResponse::_internal_add_results() {
  return results_.Add();
}
inline ::kentik::synthetics::v202309::TestResults* GetResultsForTestsResponse::add_results() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetResultsForTestsResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::TestResults >&
GetResultsForTestsResponse::results() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.GetResultsForTestsResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// GetTraceForTestRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetTraceForTestRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetTraceForTestRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetTraceForTestRequest.id)
  return _internal_id();
}
inline void GetTraceForTestRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetTraceForTestRequest.id)
}
inline std::string* GetTraceForTestRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetTraceForTestRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetTraceForTestRequest::_internal_id() const {
  return id_.Get();
}
inline void GetTraceForTestRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetTraceForTestRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.GetTraceForTestRequest.id)
}
inline void GetTraceForTestRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.GetTraceForTestRequest.id)
}
inline void GetTraceForTestRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.GetTraceForTestRequest.id)
}
inline std::string* GetTraceForTestRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetTraceForTestRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetTraceForTestRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTraceForTestRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetTraceForTestRequest.id)
}
inline std::string* GetTraceForTestRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.GetTraceForTestRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetTraceForTestRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetTraceForTestRequest.id)
}

// .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetTraceForTestRequest::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool GetTraceForTestRequest::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceForTestRequest::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceForTestRequest::start_time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetTraceForTestRequest.start_time)
  return _internal_start_time();
}
inline void GetTraceForTestRequest::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetTraceForTestRequest.start_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::release_start_time() {
  auto temp = unsafe_arena_release_start_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetTraceForTestRequest.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetTraceForTestRequest.start_time)
  return _internal_mutable_start_time();
}
inline void GetTraceForTestRequest::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetTraceForTestRequest.start_time)
}

// .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetTraceForTestRequest::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool GetTraceForTestRequest::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceForTestRequest::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& GetTraceForTestRequest::end_time() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetTraceForTestRequest.end_time)
  return _internal_end_time();
}
inline void GetTraceForTestRequest::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetTraceForTestRequest.end_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::release_end_time() {
  auto temp = unsafe_arena_release_end_time();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetTraceForTestRequest.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* GetTraceForTestRequest::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetTraceForTestRequest.end_time)
  return _internal_mutable_end_time();
}
inline void GetTraceForTestRequest::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetTraceForTestRequest.end_time)
}

// repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int GetTraceForTestRequest::_internal_agent_ids_size() const {
  return agent_ids_.size();
}
inline int GetTraceForTestRequest::agent_ids_size() const {
  return _internal_agent_ids_size();
}
inline void GetTraceForTestRequest::clear_agent_ids() {
  agent_ids_.Clear();
}
inline std::string* GetTraceForTestRequest::add_agent_ids() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
  return _internal_add_agent_ids();
}
inline const std::string& GetTraceForTestRequest::_internal_agent_ids(int index) const {
  return agent_ids_.Get(index);
}
inline const std::string& GetTraceForTestRequest::agent_ids(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
  return _internal_agent_ids(index);
}
inline std::string* GetTraceForTestRequest::mutable_agent_ids(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
  return agent_ids_.Mutable(index);
}
inline void GetTraceForTestRequest::set_agent_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
  agent_ids_.Mutable(index)->assign(value);
}
inline void GetTraceForTestRequest::set_agent_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
  agent_ids_.Mutable(index)->assign(std::move(value));
}
inline void GetTraceForTestRequest::set_agent_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
}
inline void GetTraceForTestRequest::set_agent_ids(int index, const char* value, size_t size) {
  agent_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
}
inline std::string* GetTraceForTestRequest::_internal_add_agent_ids() {
  return agent_ids_.Add();
}
inline void GetTraceForTestRequest::add_agent_ids(const std::string& value) {
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
}
inline void GetTraceForTestRequest::add_agent_ids(std::string&& value) {
  agent_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
}
inline void GetTraceForTestRequest::add_agent_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agent_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
}
inline void GetTraceForTestRequest::add_agent_ids(const char* value, size_t size) {
  agent_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTraceForTestRequest::agent_ids() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
  return agent_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTraceForTestRequest::mutable_agent_ids() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids)
  return &agent_ids_;
}

// repeated string target_ips = 5[json_name = "targetIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int GetTraceForTestRequest::_internal_target_ips_size() const {
  return target_ips_.size();
}
inline int GetTraceForTestRequest::target_ips_size() const {
  return _internal_target_ips_size();
}
inline void GetTraceForTestRequest::clear_target_ips() {
  target_ips_.Clear();
}
inline std::string* GetTraceForTestRequest::add_target_ips() {
  // @@protoc_insertion_point(field_add_mutable:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
  return _internal_add_target_ips();
}
inline const std::string& GetTraceForTestRequest::_internal_target_ips(int index) const {
  return target_ips_.Get(index);
}
inline const std::string& GetTraceForTestRequest::target_ips(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
  return _internal_target_ips(index);
}
inline std::string* GetTraceForTestRequest::mutable_target_ips(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
  return target_ips_.Mutable(index);
}
inline void GetTraceForTestRequest::set_target_ips(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
  target_ips_.Mutable(index)->assign(value);
}
inline void GetTraceForTestRequest::set_target_ips(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
  target_ips_.Mutable(index)->assign(std::move(value));
}
inline void GetTraceForTestRequest::set_target_ips(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_ips_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
}
inline void GetTraceForTestRequest::set_target_ips(int index, const char* value, size_t size) {
  target_ips_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
}
inline std::string* GetTraceForTestRequest::_internal_add_target_ips() {
  return target_ips_.Add();
}
inline void GetTraceForTestRequest::add_target_ips(const std::string& value) {
  target_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
}
inline void GetTraceForTestRequest::add_target_ips(std::string&& value) {
  target_ips_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
}
inline void GetTraceForTestRequest::add_target_ips(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  target_ips_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
}
inline void GetTraceForTestRequest::add_target_ips(const char* value, size_t size) {
  target_ips_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTraceForTestRequest::target_ips() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
  return target_ips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTraceForTestRequest::mutable_target_ips() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.GetTraceForTestRequest.target_ips)
  return &target_ips_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetTraceForTestResponse

// map<string, .kentik.synthetics.v202309.NetNode> nodes = 1[json_name = "nodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int GetTraceForTestResponse::_internal_nodes_size() const {
  return nodes_.size();
}
inline int GetTraceForTestResponse::nodes_size() const {
  return _internal_nodes_size();
}
inline void GetTraceForTestResponse::clear_nodes() {
  nodes_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >&
GetTraceForTestResponse::_internal_nodes() const {
  return nodes_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >&
GetTraceForTestResponse::nodes() const {
  // @@protoc_insertion_point(field_map:kentik.synthetics.v202309.GetTraceForTestResponse.nodes)
  return _internal_nodes();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >*
GetTraceForTestResponse::_internal_mutable_nodes() {
  return nodes_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >*
GetTraceForTestResponse::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_map:kentik.synthetics.v202309.GetTraceForTestResponse.nodes)
  return _internal_mutable_nodes();
}

// repeated .kentik.synthetics.v202309.Path paths = 2[json_name = "paths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int GetTraceForTestResponse::_internal_paths_size() const {
  return paths_.size();
}
inline int GetTraceForTestResponse::paths_size() const {
  return _internal_paths_size();
}
inline void GetTraceForTestResponse::clear_paths() {
  paths_.Clear();
}
inline ::kentik::synthetics::v202309::Path* GetTraceForTestResponse::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetTraceForTestResponse.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Path >*
GetTraceForTestResponse::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.GetTraceForTestResponse.paths)
  return &paths_;
}
inline const ::kentik::synthetics::v202309::Path& GetTraceForTestResponse::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::kentik::synthetics::v202309::Path& GetTraceForTestResponse::paths(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetTraceForTestResponse.paths)
  return _internal_paths(index);
}
inline ::kentik::synthetics::v202309::Path* GetTraceForTestResponse::_internal_add_paths() {
  return paths_.Add();
}
inline ::kentik::synthetics::v202309::Path* GetTraceForTestResponse::add_paths() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.GetTraceForTestResponse.paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Path >&
GetTraceForTestResponse::paths() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.GetTraceForTestResponse.paths)
  return paths_;
}

// -------------------------------------------------------------------

// ListAgentsRequest

// -------------------------------------------------------------------

// ListAgentsResponse

// repeated .kentik.synthetics.v202309.Agent agents = 1[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListAgentsResponse::_internal_agents_size() const {
  return agents_.size();
}
inline int ListAgentsResponse::agents_size() const {
  return _internal_agents_size();
}
inline void ListAgentsResponse::clear_agents() {
  agents_.Clear();
}
inline ::kentik::synthetics::v202309::Agent* ListAgentsResponse::mutable_agents(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.ListAgentsResponse.agents)
  return agents_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Agent >*
ListAgentsResponse::mutable_agents() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.ListAgentsResponse.agents)
  return &agents_;
}
inline const ::kentik::synthetics::v202309::Agent& ListAgentsResponse::_internal_agents(int index) const {
  return agents_.Get(index);
}
inline const ::kentik::synthetics::v202309::Agent& ListAgentsResponse::agents(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.ListAgentsResponse.agents)
  return _internal_agents(index);
}
inline ::kentik::synthetics::v202309::Agent* ListAgentsResponse::_internal_add_agents() {
  return agents_.Add();
}
inline ::kentik::synthetics::v202309::Agent* ListAgentsResponse::add_agents() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.ListAgentsResponse.agents)
  return _internal_add_agents();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Agent >&
ListAgentsResponse::agents() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.ListAgentsResponse.agents)
  return agents_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListAgentsResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAgentsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListAgentsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.ListAgentsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListAgentsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListAgentsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.ListAgentsResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetAgentRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetAgentRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAgentRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetAgentRequest.id)
  return _internal_id();
}
inline void GetAgentRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetAgentRequest.id)
}
inline std::string* GetAgentRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetAgentRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetAgentRequest::_internal_id() const {
  return id_.Get();
}
inline void GetAgentRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAgentRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.GetAgentRequest.id)
}
inline void GetAgentRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.GetAgentRequest.id)
}
inline void GetAgentRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.GetAgentRequest.id)
}
inline std::string* GetAgentRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAgentRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetAgentRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAgentRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetAgentRequest.id)
}
inline std::string* GetAgentRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.GetAgentRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetAgentRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetAgentRequest.id)
}

// -------------------------------------------------------------------

// GetAgentResponse

// .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetAgentResponse::_internal_has_agent() const {
  return this != internal_default_instance() && agent_ != nullptr;
}
inline bool GetAgentResponse::has_agent() const {
  return _internal_has_agent();
}
inline void GetAgentResponse::clear_agent() {
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Agent& GetAgentResponse::_internal_agent() const {
  const ::kentik::synthetics::v202309::Agent* p = agent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Agent*>(
      &::kentik::synthetics::v202309::_Agent_default_instance_);
}
inline const ::kentik::synthetics::v202309::Agent& GetAgentResponse::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetAgentResponse.agent)
  return _internal_agent();
}
inline void GetAgentResponse::unsafe_arena_set_allocated_agent(
    ::kentik::synthetics::v202309::Agent* agent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_);
  }
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetAgentResponse.agent)
}
inline ::kentik::synthetics::v202309::Agent* GetAgentResponse::release_agent() {
  auto temp = unsafe_arena_release_agent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Agent* GetAgentResponse::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetAgentResponse.agent)
  
  ::kentik::synthetics::v202309::Agent* temp = agent_;
  agent_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Agent* GetAgentResponse::_internal_mutable_agent() {
  
  if (agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Agent>(GetArena());
    agent_ = p;
  }
  return agent_;
}
inline ::kentik::synthetics::v202309::Agent* GetAgentResponse::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetAgentResponse.agent)
  return _internal_mutable_agent();
}
inline void GetAgentResponse::set_allocated_agent(::kentik::synthetics::v202309::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agent_;
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetAgentResponse.agent)
}

// -------------------------------------------------------------------

// UpdateAgentRequest

// .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateAgentRequest::_internal_has_agent() const {
  return this != internal_default_instance() && agent_ != nullptr;
}
inline bool UpdateAgentRequest::has_agent() const {
  return _internal_has_agent();
}
inline void UpdateAgentRequest::clear_agent() {
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Agent& UpdateAgentRequest::_internal_agent() const {
  const ::kentik::synthetics::v202309::Agent* p = agent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Agent*>(
      &::kentik::synthetics::v202309::_Agent_default_instance_);
}
inline const ::kentik::synthetics::v202309::Agent& UpdateAgentRequest::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UpdateAgentRequest.agent)
  return _internal_agent();
}
inline void UpdateAgentRequest::unsafe_arena_set_allocated_agent(
    ::kentik::synthetics::v202309::Agent* agent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_);
  }
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.UpdateAgentRequest.agent)
}
inline ::kentik::synthetics::v202309::Agent* UpdateAgentRequest::release_agent() {
  auto temp = unsafe_arena_release_agent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Agent* UpdateAgentRequest::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.UpdateAgentRequest.agent)
  
  ::kentik::synthetics::v202309::Agent* temp = agent_;
  agent_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Agent* UpdateAgentRequest::_internal_mutable_agent() {
  
  if (agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Agent>(GetArena());
    agent_ = p;
  }
  return agent_;
}
inline ::kentik::synthetics::v202309::Agent* UpdateAgentRequest::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.UpdateAgentRequest.agent)
  return _internal_mutable_agent();
}
inline void UpdateAgentRequest::set_allocated_agent(::kentik::synthetics::v202309::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agent_;
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.UpdateAgentRequest.agent)
}

// -------------------------------------------------------------------

// UpdateAgentResponse

// .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateAgentResponse::_internal_has_agent() const {
  return this != internal_default_instance() && agent_ != nullptr;
}
inline bool UpdateAgentResponse::has_agent() const {
  return _internal_has_agent();
}
inline void UpdateAgentResponse::clear_agent() {
  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Agent& UpdateAgentResponse::_internal_agent() const {
  const ::kentik::synthetics::v202309::Agent* p = agent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Agent*>(
      &::kentik::synthetics::v202309::_Agent_default_instance_);
}
inline const ::kentik::synthetics::v202309::Agent& UpdateAgentResponse::agent() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UpdateAgentResponse.agent)
  return _internal_agent();
}
inline void UpdateAgentResponse::unsafe_arena_set_allocated_agent(
    ::kentik::synthetics::v202309::Agent* agent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(agent_);
  }
  agent_ = agent;
  if (agent) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.UpdateAgentResponse.agent)
}
inline ::kentik::synthetics::v202309::Agent* UpdateAgentResponse::release_agent() {
  auto temp = unsafe_arena_release_agent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Agent* UpdateAgentResponse::unsafe_arena_release_agent() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.UpdateAgentResponse.agent)
  
  ::kentik::synthetics::v202309::Agent* temp = agent_;
  agent_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Agent* UpdateAgentResponse::_internal_mutable_agent() {
  
  if (agent_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Agent>(GetArena());
    agent_ = p;
  }
  return agent_;
}
inline ::kentik::synthetics::v202309::Agent* UpdateAgentResponse::mutable_agent() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.UpdateAgentResponse.agent)
  return _internal_mutable_agent();
}
inline void UpdateAgentResponse::set_allocated_agent(::kentik::synthetics::v202309::Agent* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete agent_;
  }
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    
  } else {
    
  }
  agent_ = agent;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.UpdateAgentResponse.agent)
}

// -------------------------------------------------------------------

// DeleteAgentRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeleteAgentRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteAgentRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DeleteAgentRequest.id)
  return _internal_id();
}
inline void DeleteAgentRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DeleteAgentRequest.id)
}
inline std::string* DeleteAgentRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DeleteAgentRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteAgentRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteAgentRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteAgentRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.DeleteAgentRequest.id)
}
inline void DeleteAgentRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.DeleteAgentRequest.id)
}
inline void DeleteAgentRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.DeleteAgentRequest.id)
}
inline std::string* DeleteAgentRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteAgentRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.DeleteAgentRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteAgentRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.DeleteAgentRequest.id)
}
inline std::string* DeleteAgentRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.DeleteAgentRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteAgentRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.DeleteAgentRequest.id)
}

// -------------------------------------------------------------------

// DeleteAgentResponse

// -------------------------------------------------------------------

// ListTestsRequest

// -------------------------------------------------------------------

// ListTestsResponse

// repeated .kentik.synthetics.v202309.Test tests = 1[json_name = "tests", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListTestsResponse::_internal_tests_size() const {
  return tests_.size();
}
inline int ListTestsResponse::tests_size() const {
  return _internal_tests_size();
}
inline void ListTestsResponse::clear_tests() {
  tests_.Clear();
}
inline ::kentik::synthetics::v202309::Test* ListTestsResponse::mutable_tests(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.ListTestsResponse.tests)
  return tests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Test >*
ListTestsResponse::mutable_tests() {
  // @@protoc_insertion_point(field_mutable_list:kentik.synthetics.v202309.ListTestsResponse.tests)
  return &tests_;
}
inline const ::kentik::synthetics::v202309::Test& ListTestsResponse::_internal_tests(int index) const {
  return tests_.Get(index);
}
inline const ::kentik::synthetics::v202309::Test& ListTestsResponse::tests(int index) const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.ListTestsResponse.tests)
  return _internal_tests(index);
}
inline ::kentik::synthetics::v202309::Test* ListTestsResponse::_internal_add_tests() {
  return tests_.Add();
}
inline ::kentik::synthetics::v202309::Test* ListTestsResponse::add_tests() {
  // @@protoc_insertion_point(field_add:kentik.synthetics.v202309.ListTestsResponse.tests)
  return _internal_add_tests();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::synthetics::v202309::Test >&
ListTestsResponse::tests() const {
  // @@protoc_insertion_point(field_list:kentik.synthetics.v202309.ListTestsResponse.tests)
  return tests_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListTestsResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTestsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTestsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.ListTestsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListTestsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void ListTestsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.ListTestsResponse.invalid_count)
}

// -------------------------------------------------------------------

// CreateTestRequest

// .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateTestRequest::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool CreateTestRequest::has_test() const {
  return _internal_has_test();
}
inline void CreateTestRequest::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Test& CreateTestRequest::_internal_test() const {
  const ::kentik::synthetics::v202309::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Test*>(
      &::kentik::synthetics::v202309::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202309::Test& CreateTestRequest::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.CreateTestRequest.test)
  return _internal_test();
}
inline void CreateTestRequest::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202309::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.CreateTestRequest.test)
}
inline ::kentik::synthetics::v202309::Test* CreateTestRequest::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Test* CreateTestRequest::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.CreateTestRequest.test)
  
  ::kentik::synthetics::v202309::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Test* CreateTestRequest::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202309::Test* CreateTestRequest::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.CreateTestRequest.test)
  return _internal_mutable_test();
}
inline void CreateTestRequest::set_allocated_test(::kentik::synthetics::v202309::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.CreateTestRequest.test)
}

// -------------------------------------------------------------------

// CreateTestResponse

// .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CreateTestResponse::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool CreateTestResponse::has_test() const {
  return _internal_has_test();
}
inline void CreateTestResponse::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Test& CreateTestResponse::_internal_test() const {
  const ::kentik::synthetics::v202309::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Test*>(
      &::kentik::synthetics::v202309::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202309::Test& CreateTestResponse::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.CreateTestResponse.test)
  return _internal_test();
}
inline void CreateTestResponse::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202309::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.CreateTestResponse.test)
}
inline ::kentik::synthetics::v202309::Test* CreateTestResponse::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Test* CreateTestResponse::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.CreateTestResponse.test)
  
  ::kentik::synthetics::v202309::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Test* CreateTestResponse::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202309::Test* CreateTestResponse::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.CreateTestResponse.test)
  return _internal_mutable_test();
}
inline void CreateTestResponse::set_allocated_test(::kentik::synthetics::v202309::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.CreateTestResponse.test)
}

// -------------------------------------------------------------------

// GetTestRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetTestRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetTestRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetTestRequest.id)
  return _internal_id();
}
inline void GetTestRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.GetTestRequest.id)
}
inline std::string* GetTestRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetTestRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetTestRequest::_internal_id() const {
  return id_.Get();
}
inline void GetTestRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetTestRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.GetTestRequest.id)
}
inline void GetTestRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.GetTestRequest.id)
}
inline void GetTestRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.GetTestRequest.id)
}
inline std::string* GetTestRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetTestRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetTestRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetTestRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetTestRequest.id)
}
inline std::string* GetTestRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.GetTestRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetTestRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetTestRequest.id)
}

// -------------------------------------------------------------------

// GetTestResponse

// .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetTestResponse::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool GetTestResponse::has_test() const {
  return _internal_has_test();
}
inline void GetTestResponse::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Test& GetTestResponse::_internal_test() const {
  const ::kentik::synthetics::v202309::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Test*>(
      &::kentik::synthetics::v202309::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202309::Test& GetTestResponse::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.GetTestResponse.test)
  return _internal_test();
}
inline void GetTestResponse::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202309::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.GetTestResponse.test)
}
inline ::kentik::synthetics::v202309::Test* GetTestResponse::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Test* GetTestResponse::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.GetTestResponse.test)
  
  ::kentik::synthetics::v202309::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Test* GetTestResponse::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202309::Test* GetTestResponse::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.GetTestResponse.test)
  return _internal_mutable_test();
}
inline void GetTestResponse::set_allocated_test(::kentik::synthetics::v202309::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.GetTestResponse.test)
}

// -------------------------------------------------------------------

// UpdateTestRequest

// .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateTestRequest::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool UpdateTestRequest::has_test() const {
  return _internal_has_test();
}
inline void UpdateTestRequest::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Test& UpdateTestRequest::_internal_test() const {
  const ::kentik::synthetics::v202309::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Test*>(
      &::kentik::synthetics::v202309::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202309::Test& UpdateTestRequest::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UpdateTestRequest.test)
  return _internal_test();
}
inline void UpdateTestRequest::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202309::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.UpdateTestRequest.test)
}
inline ::kentik::synthetics::v202309::Test* UpdateTestRequest::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Test* UpdateTestRequest::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.UpdateTestRequest.test)
  
  ::kentik::synthetics::v202309::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Test* UpdateTestRequest::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202309::Test* UpdateTestRequest::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.UpdateTestRequest.test)
  return _internal_mutable_test();
}
inline void UpdateTestRequest::set_allocated_test(::kentik::synthetics::v202309::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.UpdateTestRequest.test)
}

// -------------------------------------------------------------------

// UpdateTestResponse

// .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool UpdateTestResponse::_internal_has_test() const {
  return this != internal_default_instance() && test_ != nullptr;
}
inline bool UpdateTestResponse::has_test() const {
  return _internal_has_test();
}
inline void UpdateTestResponse::clear_test() {
  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
}
inline const ::kentik::synthetics::v202309::Test& UpdateTestResponse::_internal_test() const {
  const ::kentik::synthetics::v202309::Test* p = test_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::synthetics::v202309::Test*>(
      &::kentik::synthetics::v202309::_Test_default_instance_);
}
inline const ::kentik::synthetics::v202309::Test& UpdateTestResponse::test() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.UpdateTestResponse.test)
  return _internal_test();
}
inline void UpdateTestResponse::unsafe_arena_set_allocated_test(
    ::kentik::synthetics::v202309::Test* test) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(test_);
  }
  test_ = test;
  if (test) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.UpdateTestResponse.test)
}
inline ::kentik::synthetics::v202309::Test* UpdateTestResponse::release_test() {
  auto temp = unsafe_arena_release_test();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::synthetics::v202309::Test* UpdateTestResponse::unsafe_arena_release_test() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.UpdateTestResponse.test)
  
  ::kentik::synthetics::v202309::Test* temp = test_;
  test_ = nullptr;
  return temp;
}
inline ::kentik::synthetics::v202309::Test* UpdateTestResponse::_internal_mutable_test() {
  
  if (test_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::synthetics::v202309::Test>(GetArena());
    test_ = p;
  }
  return test_;
}
inline ::kentik::synthetics::v202309::Test* UpdateTestResponse::mutable_test() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.UpdateTestResponse.test)
  return _internal_mutable_test();
}
inline void UpdateTestResponse::set_allocated_test(::kentik::synthetics::v202309::Test* test) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete test_;
  }
  if (test) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(test);
    if (message_arena != submessage_arena) {
      test = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, test, submessage_arena);
    }
    
  } else {
    
  }
  test_ = test;
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.UpdateTestResponse.test)
}

// -------------------------------------------------------------------

// DeleteTestRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void DeleteTestRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeleteTestRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.DeleteTestRequest.id)
  return _internal_id();
}
inline void DeleteTestRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.DeleteTestRequest.id)
}
inline std::string* DeleteTestRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.DeleteTestRequest.id)
  return _internal_mutable_id();
}
inline const std::string& DeleteTestRequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteTestRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeleteTestRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.DeleteTestRequest.id)
}
inline void DeleteTestRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.DeleteTestRequest.id)
}
inline void DeleteTestRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.DeleteTestRequest.id)
}
inline std::string* DeleteTestRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeleteTestRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.DeleteTestRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeleteTestRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.DeleteTestRequest.id)
}
inline std::string* DeleteTestRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.DeleteTestRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeleteTestRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.DeleteTestRequest.id)
}

// -------------------------------------------------------------------

// DeleteTestResponse

// -------------------------------------------------------------------

// SetTestStatusRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SetTestStatusRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetTestStatusRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.SetTestStatusRequest.id)
  return _internal_id();
}
inline void SetTestStatusRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.SetTestStatusRequest.id)
}
inline std::string* SetTestStatusRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.synthetics.v202309.SetTestStatusRequest.id)
  return _internal_mutable_id();
}
inline const std::string& SetTestStatusRequest::_internal_id() const {
  return id_.Get();
}
inline void SetTestStatusRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetTestStatusRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.synthetics.v202309.SetTestStatusRequest.id)
}
inline void SetTestStatusRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.synthetics.v202309.SetTestStatusRequest.id)
}
inline void SetTestStatusRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.synthetics.v202309.SetTestStatusRequest.id)
}
inline std::string* SetTestStatusRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetTestStatusRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.synthetics.v202309.SetTestStatusRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetTestStatusRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.SetTestStatusRequest.id)
}
inline std::string* SetTestStatusRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.synthetics.v202309.SetTestStatusRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetTestStatusRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.synthetics.v202309.SetTestStatusRequest.id)
}

// .kentik.synthetics.v202309.TestStatus status = 2[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SetTestStatusRequest::clear_status() {
  status_ = 0;
}
inline ::kentik::synthetics::v202309::TestStatus SetTestStatusRequest::_internal_status() const {
  return static_cast< ::kentik::synthetics::v202309::TestStatus >(status_);
}
inline ::kentik::synthetics::v202309::TestStatus SetTestStatusRequest::status() const {
  // @@protoc_insertion_point(field_get:kentik.synthetics.v202309.SetTestStatusRequest.status)
  return _internal_status();
}
inline void SetTestStatusRequest::_internal_set_status(::kentik::synthetics::v202309::TestStatus value) {
  
  status_ = value;
}
inline void SetTestStatusRequest::set_status(::kentik::synthetics::v202309::TestStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:kentik.synthetics.v202309.SetTestStatusRequest.status)
}

// -------------------------------------------------------------------

// SetTestStatusResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202309
}  // namespace synthetics
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::synthetics::v202309::ImplementType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202309::ImplementType>() {
  return ::kentik::synthetics::v202309::ImplementType_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202309::IPFamily> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202309::IPFamily>() {
  return ::kentik::synthetics::v202309::IPFamily_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202309::TestStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202309::TestStatus>() {
  return ::kentik::synthetics::v202309::TestStatus_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202309::AgentStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202309::AgentStatus>() {
  return ::kentik::synthetics::v202309::AgentStatus_descriptor();
}
template <> struct is_proto_enum< ::kentik::synthetics::v202309::DNSRecord> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::synthetics::v202309::DNSRecord>() {
  return ::kentik::synthetics::v202309::DNSRecord_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto
