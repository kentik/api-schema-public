// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/synthetics/v202309/synthetics.proto

#include "kentik/synthetics/v202309/synthetics.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fcore_2fv202303_2fuser_5finfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UserInfo_kentik_2fcore_2fv202303_2fuser_5finfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivationSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentMetadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentMetadata_IpValue_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNSResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DNSResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTraceForTestResponse_NodesEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTTPResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HTTPResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HealthSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostnameTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetNode_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkMeshTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PacketLossData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PageLoadTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageLoadTest_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageLoadTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Path_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathTrace_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PingResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stats_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TaskResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPingSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_TestSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceHop_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UrlTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UrlTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto;
namespace kentik {
namespace synthetics {
namespace v202309 {
class AgentDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Agent> _instance;
} _Agent_default_instance_;
class AgentMetadata_IpValueDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentMetadata_IpValue> _instance;
} _AgentMetadata_IpValue_default_instance_;
class AgentMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentMetadata> _instance;
} _AgentMetadata_default_instance_;
class TestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test> _instance;
} _Test_default_instance_;
class TestSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestSettings> _instance;
  const ::kentik::synthetics::v202309::HostnameTest* hostname_;
  const ::kentik::synthetics::v202309::IpTest* ip_;
  const ::kentik::synthetics::v202309::AgentTest* agent_;
  const ::kentik::synthetics::v202309::FlowTest* flow_;
  const ::kentik::synthetics::v202309::DnsTest* dns_;
  const ::kentik::synthetics::v202309::UrlTest* url_;
  const ::kentik::synthetics::v202309::IpTest* network_grid_;
  const ::kentik::synthetics::v202309::PageLoadTest* page_load_;
  const ::kentik::synthetics::v202309::DnsTest* dns_grid_;
  const ::kentik::synthetics::v202309::NetworkMeshTest* network_mesh_;
} _TestSettings_default_instance_;
class TestPingSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestPingSettings> _instance;
} _TestPingSettings_default_instance_;
class TestTraceSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestTraceSettings> _instance;
} _TestTraceSettings_default_instance_;
class ActivationSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActivationSettings> _instance;
} _ActivationSettings_default_instance_;
class HealthSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HealthSettings> _instance;
} _HealthSettings_default_instance_;
class HostnameTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HostnameTest> _instance;
} _HostnameTest_default_instance_;
class IpTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IpTest> _instance;
} _IpTest_default_instance_;
class AgentTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentTest> _instance;
} _AgentTest_default_instance_;
class FlowTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FlowTest> _instance;
} _FlowTest_default_instance_;
class DnsTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DnsTest> _instance;
} _DnsTest_default_instance_;
class UrlTest_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UrlTest_HeadersEntry_DoNotUse> _instance;
} _UrlTest_HeadersEntry_DoNotUse_default_instance_;
class UrlTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UrlTest> _instance;
} _UrlTest_default_instance_;
class PageLoadTest_HeadersEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PageLoadTest_HeadersEntry_DoNotUse> _instance;
} _PageLoadTest_HeadersEntry_DoNotUse_default_instance_;
class PageLoadTest_CssSelectorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PageLoadTest_CssSelectorsEntry_DoNotUse> _instance;
} _PageLoadTest_CssSelectorsEntry_DoNotUse_default_instance_;
class PageLoadTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PageLoadTest> _instance;
} _PageLoadTest_default_instance_;
class NetworkMeshTestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkMeshTest> _instance;
} _NetworkMeshTest_default_instance_;
class MetricDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MetricData> _instance;
} _MetricData_default_instance_;
class PacketLossDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PacketLossData> _instance;
} _PacketLossData_default_instance_;
class PingResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PingResults> _instance;
} _PingResults_default_instance_;
class HTTPResponseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTTPResponseData> _instance;
} _HTTPResponseData_default_instance_;
class HTTPResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HTTPResults> _instance;
} _HTTPResults_default_instance_;
class DNSResponseDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DNSResponseData> _instance;
} _DNSResponseData_default_instance_;
class DNSResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DNSResults> _instance;
} _DNSResults_default_instance_;
class TaskResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskResults> _instance;
  const ::kentik::synthetics::v202309::PingResults* ping_;
  const ::kentik::synthetics::v202309::HTTPResults* http_;
  const ::kentik::synthetics::v202309::DNSResults* dns_;
} _TaskResults_default_instance_;
class AgentResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentResults> _instance;
} _AgentResults_default_instance_;
class TestResultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TestResults> _instance;
} _TestResults_default_instance_;
class StatsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stats> _instance;
} _Stats_default_instance_;
class LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Location> _instance;
} _Location_default_instance_;
class NetNodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetNode> _instance;
} _NetNode_default_instance_;
class TraceHopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TraceHop> _instance;
} _TraceHop_default_instance_;
class PathTraceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PathTrace> _instance;
} _PathTrace_default_instance_;
class PathDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Path> _instance;
} _Path_default_instance_;
class GetResultsForTestsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResultsForTestsRequest> _instance;
} _GetResultsForTestsRequest_default_instance_;
class GetResultsForTestsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetResultsForTestsResponse> _instance;
} _GetResultsForTestsResponse_default_instance_;
class GetTraceForTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTraceForTestRequest> _instance;
} _GetTraceForTestRequest_default_instance_;
class GetTraceForTestResponse_NodesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTraceForTestResponse_NodesEntry_DoNotUse> _instance;
} _GetTraceForTestResponse_NodesEntry_DoNotUse_default_instance_;
class GetTraceForTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTraceForTestResponse> _instance;
} _GetTraceForTestResponse_default_instance_;
class ListAgentsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAgentsRequest> _instance;
} _ListAgentsRequest_default_instance_;
class ListAgentsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAgentsResponse> _instance;
} _ListAgentsResponse_default_instance_;
class GetAgentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAgentRequest> _instance;
} _GetAgentRequest_default_instance_;
class GetAgentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAgentResponse> _instance;
} _GetAgentResponse_default_instance_;
class UpdateAgentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAgentRequest> _instance;
} _UpdateAgentRequest_default_instance_;
class UpdateAgentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAgentResponse> _instance;
} _UpdateAgentResponse_default_instance_;
class DeleteAgentRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAgentRequest> _instance;
} _DeleteAgentRequest_default_instance_;
class DeleteAgentResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAgentResponse> _instance;
} _DeleteAgentResponse_default_instance_;
class ListTestsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTestsRequest> _instance;
} _ListTestsRequest_default_instance_;
class ListTestsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTestsResponse> _instance;
} _ListTestsResponse_default_instance_;
class CreateTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTestRequest> _instance;
} _CreateTestRequest_default_instance_;
class CreateTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateTestResponse> _instance;
} _CreateTestResponse_default_instance_;
class GetTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTestRequest> _instance;
} _GetTestRequest_default_instance_;
class GetTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTestResponse> _instance;
} _GetTestResponse_default_instance_;
class UpdateTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateTestRequest> _instance;
} _UpdateTestRequest_default_instance_;
class UpdateTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateTestResponse> _instance;
} _UpdateTestResponse_default_instance_;
class DeleteTestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTestRequest> _instance;
} _DeleteTestRequest_default_instance_;
class DeleteTestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTestResponse> _instance;
} _DeleteTestResponse_default_instance_;
class SetTestStatusRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTestStatusRequest> _instance;
} _SetTestStatusRequest_default_instance_;
class SetTestStatusResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetTestStatusResponse> _instance;
} _SetTestStatusResponse_default_instance_;
class AgentAlertDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AgentAlert> _instance;
} _AgentAlert_default_instance_;
class CreateAgentAlertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAgentAlertRequest> _instance;
} _CreateAgentAlertRequest_default_instance_;
class CreateAgentAlertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateAgentAlertResponse> _instance;
} _CreateAgentAlertResponse_default_instance_;
class UpdateAgentAlertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAgentAlertRequest> _instance;
} _UpdateAgentAlertRequest_default_instance_;
class UpdateAgentAlertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateAgentAlertResponse> _instance;
} _UpdateAgentAlertResponse_default_instance_;
class GetAgentAlertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAgentAlertRequest> _instance;
} _GetAgentAlertRequest_default_instance_;
class GetAgentAlertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetAgentAlertResponse> _instance;
} _GetAgentAlertResponse_default_instance_;
class ListAgentAlertsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAgentAlertsRequest> _instance;
} _ListAgentAlertsRequest_default_instance_;
class ListAgentAlertsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListAgentAlertsResponse> _instance;
} _ListAgentAlertsResponse_default_instance_;
class DeleteAgentAlertRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAgentAlertRequest> _instance;
} _DeleteAgentAlertRequest_default_instance_;
class DeleteAgentAlertResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteAgentAlertResponse> _instance;
} _DeleteAgentAlertResponse_default_instance_;
}  // namespace v202309
}  // namespace synthetics
}  // namespace kentik
static void InitDefaultsscc_info_ActivationSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_ActivationSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::ActivationSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::ActivationSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ActivationSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ActivationSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_Agent_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::Agent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::Agent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_AgentMetadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_AgentAlert_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::AgentAlert();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::AgentAlert::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_AgentMetadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_AgentMetadata_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::AgentMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::AgentMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentMetadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgentMetadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_AgentMetadata_IpValue_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_AgentMetadata_IpValue_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_AgentMetadata_IpValue_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::AgentMetadata_IpValue();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::AgentMetadata_IpValue::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentMetadata_IpValue_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentMetadata_IpValue_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_AgentResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_AgentResults_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::AgentResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::AgentResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AgentResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AgentResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_TaskResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_AgentTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_AgentTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::AgentTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::AgentTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AgentTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AgentTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_CreateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_CreateAgentAlertRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::CreateAgentAlertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::CreateAgentAlertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_CreateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_CreateAgentAlertResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::CreateAgentAlertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::CreateAgentAlertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_CreateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_CreateTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::CreateTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::CreateTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_CreateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_CreateTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::CreateTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::CreateTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_DNSResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DNSResponseData_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DNSResponseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DNSResponseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DNSResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DNSResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DNSResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DNSResults_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DNSResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DNSResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DNSResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DNSResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_DNSResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_DeleteAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DeleteAgentAlertRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DeleteAgentAlertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DeleteAgentAlertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DeleteAgentAlertResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DeleteAgentAlertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DeleteAgentAlertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DeleteAgentRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DeleteAgentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DeleteAgentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DeleteAgentResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DeleteAgentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DeleteAgentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DeleteTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DeleteTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DeleteTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DeleteTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DeleteTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DeleteTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_DnsTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_DnsTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::DnsTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::DnsTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DnsTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DnsTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_FlowTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_FlowTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::FlowTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::FlowTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FlowTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FlowTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_GetAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetAgentAlertRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetAgentAlertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetAgentAlertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_GetAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetAgentAlertResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetAgentAlertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetAgentAlertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetAgentRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetAgentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetAgentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_GetAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetAgentResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetAgentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetAgentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetResultsForTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetResultsForTestsRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetResultsForTestsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetResultsForTestsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetResultsForTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetResultsForTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetResultsForTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetResultsForTestsResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetResultsForTestsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetResultsForTestsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetResultsForTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetResultsForTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_TestResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_GetTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetTraceForTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetTraceForTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetTraceForTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetTraceForTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetTraceForTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::GetTraceForTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_GetTraceForTestResponse_NodesEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_Path_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_GetTraceForTestResponse_NodesEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_GetTraceForTestResponse_NodesEntry_DoNotUse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse();
  }
  ::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetTraceForTestResponse_NodesEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetTraceForTestResponse_NodesEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_NetNode_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_HTTPResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_HTTPResponseData_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::HTTPResponseData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::HTTPResponseData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HTTPResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HTTPResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_HTTPResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_HTTPResults_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::HTTPResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::HTTPResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_HTTPResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_HTTPResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_HTTPResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_HealthSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_HealthSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::HealthSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::HealthSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HealthSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HealthSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_ActivationSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_HostnameTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_HostnameTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::HostnameTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::HostnameTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HostnameTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HostnameTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_IpTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_IpTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::IpTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::IpTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IpTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IpTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ListAgentAlertsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_ListAgentAlertsRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::ListAgentAlertsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::ListAgentAlertsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAgentAlertsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAgentAlertsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ListAgentAlertsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_ListAgentAlertsResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::ListAgentAlertsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::ListAgentAlertsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAgentAlertsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAgentAlertsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_ListAgentsRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::ListAgentsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::ListAgentsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_ListAgentsResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::ListAgentsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::ListAgentsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_ListTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_ListTestsRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::ListTestsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::ListTestsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_ListTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_ListTestsResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::ListTestsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::ListTestsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_Location_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_Location_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Location_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Location_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_MetricData_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::MetricData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::MetricData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_NetNode_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_NetNode_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::NetNode();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::NetNode::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NetNode_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NetNode_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Location_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_NetworkMeshTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_NetworkMeshTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::NetworkMeshTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::NetworkMeshTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkMeshTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkMeshTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_PacketLossData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_PacketLossData_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::PacketLossData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::PacketLossData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PacketLossData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PacketLossData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_PageLoadTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_PageLoadTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::PageLoadTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::PageLoadTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PageLoadTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PageLoadTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_PageLoadTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_PageLoadTest_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_PageLoadTest_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_PageLoadTest_CssSelectorsEntry_DoNotUse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse();
  }
  ::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageLoadTest_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PageLoadTest_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_PageLoadTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_PageLoadTest_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse();
  }
  ::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PageLoadTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PageLoadTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Path_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_Path_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::Path();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::Path::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Path_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Path_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Stats_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_PathTrace_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_PathTrace_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_PathTrace_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::PathTrace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::PathTrace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PathTrace_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PathTrace_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_TraceHop_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_PingResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_PingResults_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::PingResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::PingResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PingResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PingResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_PacketLossData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_SetTestStatusRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::SetTestStatusRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::SetTestStatusRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_SetTestStatusResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::SetTestStatusResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::SetTestStatusResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_Stats_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_Stats_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::Stats();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::Stats::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stats_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stats_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TaskResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_TaskResults_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::TaskResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::TaskResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TaskResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TaskResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_PingResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_HTTPResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_DNSResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_Test_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::Test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::Test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_TestSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_UserInfo_kentik_2fcore_2fv202303_2fuser_5finfo_2eproto.base,}};

static void InitDefaultsscc_info_TestPingSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_TestPingSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::TestPingSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::TestPingSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestPingSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestPingSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TestResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_TestResults_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::TestResults();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::TestResults::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TestResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TestResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_AgentResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TestSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_TestSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::TestSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::TestSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_TestSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_TestSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_HostnameTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_IpTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_AgentTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_FlowTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_DnsTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_UrlTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_PageLoadTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_NetworkMeshTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_HealthSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_TestPingSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
      &scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_TestTraceSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_TestTraceSettings_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::TestTraceSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::TestTraceSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TestTraceSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_TraceHop_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_TraceHop_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::TraceHop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::TraceHop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TraceHop_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TraceHop_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_UpdateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_UpdateAgentAlertRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::UpdateAgentAlertRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::UpdateAgentAlertRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static void InitDefaultsscc_info_UpdateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_UpdateAgentAlertResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::UpdateAgentAlertResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::UpdateAgentAlertResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_UpdateAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_UpdateAgentRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::UpdateAgentRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::UpdateAgentRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_UpdateAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_UpdateAgentResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::UpdateAgentResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::UpdateAgentResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_UpdateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_UpdateTestRequest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::UpdateTestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::UpdateTestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_UpdateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_UpdateTestResponse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::UpdateTestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::UpdateTestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_UrlTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_UrlTest_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::UrlTest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::synthetics::v202309::UrlTest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UrlTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UrlTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {
      &scc_info_UrlTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,}};

static void InitDefaultsscc_info_UrlTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::synthetics::v202309::_UrlTest_HeadersEntry_DoNotUse_default_instance_;
    new (ptr) ::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse();
  }
  ::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UrlTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UrlTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto[72];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, site_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, alias_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, os_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, lat_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, long__),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, last_authed_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, family_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, site_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, version_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, city_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, region_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, country_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, test_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, local_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, cloud_region_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, cloud_provider_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, agent_impl_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, labels_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Agent, metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentMetadata_IpValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentMetadata_IpValue, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentMetadata, private_ipv4_addresses_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentMetadata, public_ipv4_addresses_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentMetadata, private_ipv6_addresses_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentMetadata, public_ipv6_addresses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, settings_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, edate_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, created_by_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, last_updated_by_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Test, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, hostname_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, ip_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, agent_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, flow_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, dns_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, url_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, network_grid_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, page_load_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, dns_grid_),
  offsetof(::kentik::synthetics::v202309::TestSettingsDefaultTypeInternal, network_mesh_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, agent_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, tasks_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, health_settings_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, ping_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, trace_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, family_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, notification_channels_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, notes_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestSettings, definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestPingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestPingSettings, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestPingSettings, protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestPingSettings, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestPingSettings, timeout_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestPingSettings, delay_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestPingSettings, dscp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestTraceSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestTraceSettings, count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestTraceSettings, protocol_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestTraceSettings, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestTraceSettings, timeout_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestTraceSettings, limit_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestTraceSettings, delay_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestTraceSettings, dscp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ActivationSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ActivationSettings, grace_period_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ActivationSettings, time_unit_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ActivationSettings, time_window_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ActivationSettings, times_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, latency_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, latency_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, packet_loss_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, packet_loss_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, jitter_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, jitter_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, http_latency_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, http_latency_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, http_valid_codes_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, dns_valid_codes_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, latency_critical_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, latency_warning_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, jitter_critical_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, jitter_warning_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, http_latency_critical_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, http_latency_warning_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, unhealthy_subtest_threshold_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, activation_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, cert_expiry_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, cert_expiry_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, dns_valid_ips_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, dns_latency_critical_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, dns_latency_warning_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, dns_latency_critical_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, dns_latency_warning_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HealthSettings, per_agent_alerting_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HostnameTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HostnameTest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::IpTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::IpTest, targets_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::IpTest, use_local_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentTest, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentTest, use_local_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentTest, reciprocal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::FlowTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::FlowTest, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::FlowTest, target_refresh_interval_millis_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::FlowTest, max_providers_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::FlowTest, max_ip_targets_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::FlowTest, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::FlowTest, inet_direction_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::FlowTest, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DnsTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DnsTest, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DnsTest, timeout_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DnsTest, record_type_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DnsTest, servers_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DnsTest, port_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest, timeout_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest, method_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest, headers_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest, body_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UrlTest, ignore_tls_errors_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest, timeout_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest, headers_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest, ignore_tls_errors_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PageLoadTest, css_selectors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetworkMeshTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetworkMeshTest, use_local_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::MetricData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::MetricData, current_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::MetricData, rolling_avg_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::MetricData, rolling_stddev_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::MetricData, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PacketLossData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PacketLossData, current_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PacketLossData, health_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PingResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PingResults, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PingResults, packet_loss_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PingResults, latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PingResults, jitter_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PingResults, dst_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResponseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResponseData, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResponseData, size_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResponseData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResults, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResults, latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResults, response_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::HTTPResults, dst_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DNSResponseData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DNSResponseData, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DNSResponseData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DNSResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DNSResults, target_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DNSResults, server_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DNSResults, latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DNSResults, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TaskResults, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TaskResults, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::kentik::synthetics::v202309::TaskResultsDefaultTypeInternal, ping_),
  offsetof(::kentik::synthetics::v202309::TaskResultsDefaultTypeInternal, http_),
  offsetof(::kentik::synthetics::v202309::TaskResultsDefaultTypeInternal, dns_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TaskResults, health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TaskResults, task_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentResults, agent_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentResults, health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentResults, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestResults, test_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestResults, time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestResults, health_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TestResults, agents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Stats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Stats, average_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Stats, min_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Stats, max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Location, longitude_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Location, country_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Location, region_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Location, city_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetNode, ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetNode, asn_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetNode, as_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetNode, location_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetNode, dns_name_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetNode, device_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::NetNode, site_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TraceHop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TraceHop, latency_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::TraceHop, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PathTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PathTrace, as_path_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PathTrace, is_complete_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::PathTrace, hops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Path, agent_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Path, target_ip_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Path, hop_count_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Path, max_as_path_length_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Path, traces_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::Path, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsRequest, ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsRequest, agent_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsRequest, targets_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsRequest, aggregate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetResultsForTestsResponse, results_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestRequest, start_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestRequest, end_time_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestRequest, agent_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestRequest, target_ips_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestResponse, nodes_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTraceForTestResponse, paths_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListAgentsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListAgentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListAgentsResponse, agents_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListAgentsResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetAgentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetAgentRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetAgentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetAgentResponse, agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentRequest, agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentResponse, agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteAgentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteAgentRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteAgentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListTestsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListTestsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListTestsResponse, tests_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListTestsResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateTestRequest, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateTestResponse, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTestRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetTestResponse, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateTestRequest, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateTestResponse, test_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteTestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteTestRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteTestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::SetTestStatusRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::SetTestStatusRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::SetTestStatusRequest, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::SetTestStatusResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentAlert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentAlert, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentAlert, threshold_seconds_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentAlert, notification_channel_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentAlert, agent_id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::AgentAlert, agent_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateAgentAlertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateAgentAlertRequest, threshold_seconds_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateAgentAlertRequest, notification_channel_ids_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateAgentAlertRequest, agent_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateAgentAlertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::CreateAgentAlertResponse, agent_alert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentAlertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentAlertRequest, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentAlertRequest, threshold_seconds_),
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentAlertRequest, notification_channel_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentAlertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::UpdateAgentAlertResponse, agent_alert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetAgentAlertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetAgentAlertRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetAgentAlertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::GetAgentAlertResponse, agent_alert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListAgentAlertsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListAgentAlertsRequest, agent_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListAgentAlertsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::ListAgentAlertsResponse, agent_alerts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteAgentAlertRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteAgentAlertRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::synthetics::v202309::DeleteAgentAlertResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::synthetics::v202309::Agent)},
  { 29, -1, sizeof(::kentik::synthetics::v202309::AgentMetadata_IpValue)},
  { 35, -1, sizeof(::kentik::synthetics::v202309::AgentMetadata)},
  { 44, -1, sizeof(::kentik::synthetics::v202309::Test)},
  { 59, -1, sizeof(::kentik::synthetics::v202309::TestSettings)},
  { 84, -1, sizeof(::kentik::synthetics::v202309::TestPingSettings)},
  { 95, -1, sizeof(::kentik::synthetics::v202309::TestTraceSettings)},
  { 107, -1, sizeof(::kentik::synthetics::v202309::ActivationSettings)},
  { 116, -1, sizeof(::kentik::synthetics::v202309::HealthSettings)},
  { 147, -1, sizeof(::kentik::synthetics::v202309::HostnameTest)},
  { 153, -1, sizeof(::kentik::synthetics::v202309::IpTest)},
  { 160, -1, sizeof(::kentik::synthetics::v202309::AgentTest)},
  { 168, -1, sizeof(::kentik::synthetics::v202309::FlowTest)},
  { 180, -1, sizeof(::kentik::synthetics::v202309::DnsTest)},
  { 190, 197, sizeof(::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse)},
  { 199, -1, sizeof(::kentik::synthetics::v202309::UrlTest)},
  { 210, 217, sizeof(::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse)},
  { 219, 226, sizeof(::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse)},
  { 228, -1, sizeof(::kentik::synthetics::v202309::PageLoadTest)},
  { 238, -1, sizeof(::kentik::synthetics::v202309::NetworkMeshTest)},
  { 244, -1, sizeof(::kentik::synthetics::v202309::MetricData)},
  { 253, -1, sizeof(::kentik::synthetics::v202309::PacketLossData)},
  { 260, -1, sizeof(::kentik::synthetics::v202309::PingResults)},
  { 270, -1, sizeof(::kentik::synthetics::v202309::HTTPResponseData)},
  { 278, -1, sizeof(::kentik::synthetics::v202309::HTTPResults)},
  { 287, -1, sizeof(::kentik::synthetics::v202309::DNSResponseData)},
  { 294, -1, sizeof(::kentik::synthetics::v202309::DNSResults)},
  { 303, -1, sizeof(::kentik::synthetics::v202309::TaskResults)},
  { 313, -1, sizeof(::kentik::synthetics::v202309::AgentResults)},
  { 321, -1, sizeof(::kentik::synthetics::v202309::TestResults)},
  { 330, -1, sizeof(::kentik::synthetics::v202309::Stats)},
  { 338, -1, sizeof(::kentik::synthetics::v202309::Location)},
  { 348, -1, sizeof(::kentik::synthetics::v202309::NetNode)},
  { 360, -1, sizeof(::kentik::synthetics::v202309::TraceHop)},
  { 367, -1, sizeof(::kentik::synthetics::v202309::PathTrace)},
  { 375, -1, sizeof(::kentik::synthetics::v202309::Path)},
  { 386, -1, sizeof(::kentik::synthetics::v202309::GetResultsForTestsRequest)},
  { 397, -1, sizeof(::kentik::synthetics::v202309::GetResultsForTestsResponse)},
  { 403, -1, sizeof(::kentik::synthetics::v202309::GetTraceForTestRequest)},
  { 413, 420, sizeof(::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse)},
  { 422, -1, sizeof(::kentik::synthetics::v202309::GetTraceForTestResponse)},
  { 429, -1, sizeof(::kentik::synthetics::v202309::ListAgentsRequest)},
  { 434, -1, sizeof(::kentik::synthetics::v202309::ListAgentsResponse)},
  { 441, -1, sizeof(::kentik::synthetics::v202309::GetAgentRequest)},
  { 447, -1, sizeof(::kentik::synthetics::v202309::GetAgentResponse)},
  { 453, -1, sizeof(::kentik::synthetics::v202309::UpdateAgentRequest)},
  { 459, -1, sizeof(::kentik::synthetics::v202309::UpdateAgentResponse)},
  { 465, -1, sizeof(::kentik::synthetics::v202309::DeleteAgentRequest)},
  { 471, -1, sizeof(::kentik::synthetics::v202309::DeleteAgentResponse)},
  { 476, -1, sizeof(::kentik::synthetics::v202309::ListTestsRequest)},
  { 481, -1, sizeof(::kentik::synthetics::v202309::ListTestsResponse)},
  { 488, -1, sizeof(::kentik::synthetics::v202309::CreateTestRequest)},
  { 494, -1, sizeof(::kentik::synthetics::v202309::CreateTestResponse)},
  { 500, -1, sizeof(::kentik::synthetics::v202309::GetTestRequest)},
  { 506, -1, sizeof(::kentik::synthetics::v202309::GetTestResponse)},
  { 512, -1, sizeof(::kentik::synthetics::v202309::UpdateTestRequest)},
  { 518, -1, sizeof(::kentik::synthetics::v202309::UpdateTestResponse)},
  { 524, -1, sizeof(::kentik::synthetics::v202309::DeleteTestRequest)},
  { 530, -1, sizeof(::kentik::synthetics::v202309::DeleteTestResponse)},
  { 535, -1, sizeof(::kentik::synthetics::v202309::SetTestStatusRequest)},
  { 542, -1, sizeof(::kentik::synthetics::v202309::SetTestStatusResponse)},
  { 547, -1, sizeof(::kentik::synthetics::v202309::AgentAlert)},
  { 557, -1, sizeof(::kentik::synthetics::v202309::CreateAgentAlertRequest)},
  { 565, -1, sizeof(::kentik::synthetics::v202309::CreateAgentAlertResponse)},
  { 571, -1, sizeof(::kentik::synthetics::v202309::UpdateAgentAlertRequest)},
  { 579, -1, sizeof(::kentik::synthetics::v202309::UpdateAgentAlertResponse)},
  { 585, -1, sizeof(::kentik::synthetics::v202309::GetAgentAlertRequest)},
  { 591, -1, sizeof(::kentik::synthetics::v202309::GetAgentAlertResponse)},
  { 597, -1, sizeof(::kentik::synthetics::v202309::ListAgentAlertsRequest)},
  { 603, -1, sizeof(::kentik::synthetics::v202309::ListAgentAlertsResponse)},
  { 609, -1, sizeof(::kentik::synthetics::v202309::DeleteAgentAlertRequest)},
  { 615, -1, sizeof(::kentik::synthetics::v202309::DeleteAgentAlertResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_Agent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_AgentMetadata_IpValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_AgentMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_Test_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_TestSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_TestPingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_TestTraceSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_ActivationSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_HealthSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_HostnameTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_IpTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_AgentTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_FlowTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DnsTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_UrlTest_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_UrlTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_PageLoadTest_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_PageLoadTest_CssSelectorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_PageLoadTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_NetworkMeshTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_MetricData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_PacketLossData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_PingResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_HTTPResponseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_HTTPResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DNSResponseData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DNSResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_TaskResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_AgentResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_TestResults_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_Stats_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_NetNode_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_TraceHop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_PathTrace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_Path_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetResultsForTestsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetResultsForTestsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetTraceForTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetTraceForTestResponse_NodesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetTraceForTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_ListAgentsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_ListAgentsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetAgentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetAgentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_UpdateAgentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_UpdateAgentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DeleteAgentRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DeleteAgentResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_ListTestsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_ListTestsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_CreateTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_CreateTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_UpdateTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_UpdateTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DeleteTestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DeleteTestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_SetTestStatusRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_SetTestStatusResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_AgentAlert_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_CreateAgentAlertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_CreateAgentAlertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_UpdateAgentAlertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_UpdateAgentAlertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetAgentAlertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_GetAgentAlertResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_ListAgentAlertsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_ListAgentAlertsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DeleteAgentAlertRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::synthetics::v202309::_DeleteAgentAlertResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*kentik/synthetics/v202309/synthetics.p"
  "roto\022\031kentik.synthetics.v202309\032\034google/"
  "api/annotations.proto\032\027google/api/client"
  ".proto\032\037google/api/field_behavior.proto\032"
  "\037google/protobuf/timestamp.proto\032.protoc"
  "-gen-openapiv2/options/annotations.proto"
  "\032%kentik/core/v202303/annotations.proto\032"
  "#kentik/core/v202303/user_info.proto\"\367\016\n"
  "\005Agent\0227\n\002id\030\001 \001(\tB\'\222A 2\036Unique identifi"
  "er of the agent\342A\001\003R\002id\022I\n\tsite_name\030\002 \001"
  "(\tB,\222A)2\'Name of the site where agent is"
  " locatedR\010siteName\022W\n\006status\030\003 \001(\0162&.ken"
  "tik.synthetics.v202309.AgentStatusB\027\222A\0242"
  "\022Operational statusR\006status\022F\n\005alias\030\004 \001"
  "(\tB0\222A-2+User selected descriptive name "
  "of the agentR\005alias\022=\n\004type\030\005 \001(\tB)\222A\"2 "
  "Type of agent (global | private)\342A\001\003R\004ty"
  "pe\022B\n\002os\030\006 \001(\tB2\222A+2)OS version of serve"
  "r/VM hosting the agent\342A\001\003R\002os\022I\n\002ip\030\007 \001"
  "(\tB9\030\001\222A02.Public IP address of the agen"
  "t (auto-detected)\342A\001\003R\002ip\022L\n\003lat\030\010 \001(\001B:"
  "\222A725Latitude of agent\'s location (signe"
  "d decimal degrees)R\003lat\022O\n\004long\030\t \001(\001B;\222"
  "A826Longitude of agent\'s location (signe"
  "d decimal degrees)R\004long\022i\n\013last_authed\030"
  "\n \001(\0132\032.google.protobuf.TimestampB,\222A%2#"
  "Timestamp of the last authorization\342A\001\003R"
  "\nlastAuthed\022j\n\006family\030\013 \001(\0162#.kentik.syn"
  "thetics.v202309.IPFamilyB-\222A*2(IP addres"
  "s family supported by the agentR\006family\022"
  "B\n\003asn\030\014 \001(\rB0\222A-2+ASN of the AS owning "
  "agent\'s public addressR\003asn\022X\n\007site_id\030\r"
  " \001(\tB\?\222A<2:ID of the site hosting the ag"
  "ent (if configured in Kentik)R\006siteId\022@\n"
  "\007version\030\016 \001(\tB&\222A\0372\035Software version of"
  " the agent\342A\001\003R\007version\0228\n\004city\030\020 \001(\tB$\222"
  "A!2\037City where the agent is locatedR\004cit"
  "y\022D\n\006region\030\021 \001(\tB,\222A)2\'Geographical reg"
  "ion of agent\'s locationR\006region\022:\n\007count"
  "ry\030\022 \001(\tB \222A\0352\033Country of agent\'s locati"
  "onR\007country\022K\n\010test_ids\030\023 \003(\tB0\222A)2\'IDs "
  "of user\'s test running on the agent\342A\001\003R"
  "\007testIds\022B\n\010local_ip\030\024 \001(\tB\'\030\001\222A\"2 Inter"
  "nal IP address of the agentR\007localIp\022O\n\014"
  "cloud_region\030\026 \001(\tB,\222A)2\'Cloud region (i"
  "f any) hosting the agentR\013cloudRegion\022U\n"
  "\016cloud_provider\030\027 \001(\tB.\222A+2)Cloud provid"
  "er (if any) hosting the agentR\rcloudProv"
  "ider\022M\n\nagent_impl\030\030 \001(\0162(.kentik.synthe"
  "tics.v202309.ImplementTypeB\004\342A\001\003R\tagentI"
  "mpl\022N\n\006labels\030\031 \003(\tB6\222A321List of names "
  "of labels associated with the agentR\006lab"
  "els\022\220\001\n\010metadata\030\032 \001(\0132(.kentik.syntheti"
  "cs.v202309.AgentMetadataBJ\222AG2EAdditiona"
  "l information about agent\'s configuratio"
  "n and run-time stateR\010metadata\"\352\004\n\rAgent"
  "Metadata\022\213\001\n\026private_ipv4_addresses\030\001 \003("
  "\01320.kentik.synthetics.v202309.AgentMetad"
  "ata.IpValueB#\222A 2\036List of private IPv4 a"
  "ddressesR\024privateIpv4Addresses\022\214\001\n\025publi"
  "c_ipv4_addresses\030\002 \003(\01320.kentik.syntheti"
  "cs.v202309.AgentMetadata.IpValueB&\222A\0372\035L"
  "ist of public IPv4 addresses\342A\001\003R\023public"
  "Ipv4Addresses\022\213\001\n\026private_ipv6_addresses"
  "\030\003 \003(\01320.kentik.synthetics.v202309.Agent"
  "Metadata.IpValueB#\222A 2\036List of private I"
  "Pv6 addressesR\024privateIpv6Addresses\022\214\001\n\025"
  "public_ipv6_addresses\030\004 \003(\01320.kentik.syn"
  "thetics.v202309.AgentMetadata.IpValueB&\222"
  "A\0372\035List of public IPv6 addresses\342A\001\003R\023p"
  "ublicIpv6Addresses\032\037\n\007IpValue\022\024\n\005value\030\001"
  " \001(\tR\005value\"\266\006\n\004Test\022.\n\002id\030\001 \001(\tB\036\222A\0272\025U"
  "nique ID of the test\342A\001\003R\002id\0227\n\004name\030\002 \001"
  "(\tB#\222A 2\036User selected name of the testR"
  "\004name\022)\n\004type\030\003 \001(\tB\025\222A\0222\020Type of the te"
  "stR\004type\022b\n\006status\030\005 \001(\0162%.kentik.synthe"
  "tics.v202309.TestStatusB#\222A 2\036Operationa"
  "l status of the testR\006status\022\\\n\010settings"
  "\030\006 \001(\0132\'.kentik.synthetics.v202309.TestS"
  "ettingsB\027\222A\0242\022Test configurationR\010settin"
  "gs\022S\n\005cdate\030\007 \001(\0132\032.google.protobuf.Time"
  "stampB!\222A\0322\030Creation timestamp (UTC)\342A\001\003"
  "R\005cdate\022\\\n\005edate\030\010 \001(\0132\032.google.protobuf"
  ".TimestampB*\222A#2!Last modification times"
  "tamp (UTC)\342A\001\003R\005edate\022_\n\ncreated_by\030\t \001("
  "\0132\035.kentik.core.v202303.UserInfoB!\222A\0322\030I"
  "dentity of test creator\342A\001\003R\tcreatedBy\022\177"
  "\n\017last_updated_by\030\n \001(\0132\035.kentik.core.v2"
  "02303.UserInfoB8\222A12/Identity of use tha"
  "t has modified the test last\342A\001\003R\rlastUp"
  "datedBy\022C\n\006labels\030\013 \003(\tB+\222A(2&Set of lab"
  "els associated with the testR\006labels\"\324\014\n"
  "\014TestSettings\022E\n\010hostname\030\001 \001(\0132\'.kentik"
  ".synthetics.v202309.HostnameTestH\000R\010host"
  "name\0223\n\002ip\030\002 \001(\0132!.kentik.synthetics.v20"
  "2309.IpTestH\000R\002ip\022<\n\005agent\030\003 \001(\0132$.kenti"
  "k.synthetics.v202309.AgentTestH\000R\005agent\022"
  "9\n\004flow\030\004 \001(\0132#.kentik.synthetics.v20230"
  "9.FlowTestH\000R\004flow\0226\n\003dns\030\005 \001(\0132\".kentik"
  ".synthetics.v202309.DnsTestH\000R\003dns\0226\n\003ur"
  "l\030\006 \001(\0132\".kentik.synthetics.v202309.UrlT"
  "estH\000R\003url\022F\n\014network_grid\030\007 \001(\0132!.kenti"
  "k.synthetics.v202309.IpTestH\000R\013networkGr"
  "id\022F\n\tpage_load\030\010 \001(\0132\'.kentik.synthetic"
  "s.v202309.PageLoadTestH\000R\010pageLoad\022\?\n\010dn"
  "s_grid\030\t \001(\0132\".kentik.synthetics.v202309"
  ".DnsTestH\000R\007dnsGrid\022O\n\014network_mesh\030\022 \001("
  "\0132*.kentik.synthetics.v202309.NetworkMes"
  "hTestH\000R\013networkMesh\022[\n\tagent_ids\030\n \003(\tB"
  ">\222A;29IDs of agents assigned to run task"
  "s on behalf of the testR\010agentIds\022A\n\005tas"
  "ks\030\013 \003(\tB+\222A(2&List of task names to run"
  " for the testR\005tasks\022\251\001\n\017health_settings"
  "\030\014 \001(\0132).kentik.synthetics.v202309.Healt"
  "hSettingsBU\222AR2PHealth evaluation thresh"
  "olds, acceptable responses and alarm act"
  "ivation settingsR\016healthSettings\022i\n\004ping"
  "\030\r \001(\0132+.kentik.synthetics.v202309.TestP"
  "ingSettingsB(\222A%2#Ping tasks configurati"
  "on parametersR\004ping\022q\n\005trace\030\016 \001(\0132,.ken"
  "tik.synthetics.v202309.TestTraceSettings"
  "B-\222A*2(Traceroute task configuration par"
  "ametersR\005trace\022@\n\006period\030\017 \001(\rB(\222A%2#Tes"
  "t evaluation period (in seconds)R\006period"
  "\022\201\001\n\006family\030\020 \001(\0162#.kentik.synthetics.v2"
  "02309.IPFamilyBD\222AA2\?IP address family t"
  "o select from available DNS name resolut"
  "ionsR\006family\022\177\n\025notification_channels\030\021 "
  "\003(\tBJ\222AG2EList of IDs of notification ch"
  "annels for alarms triggered by the testR"
  "\024notificationChannels\022>\n\005notes\030\023 \001(\tB(\222A"
  "%2#Add a note or comment for this testR\005"
  "notesB\014\n\ndefinition\"\314\003\n\020TestPingSettings"
  "\022K\n\005count\030\001 \001(\rB5\222A220Number of probe pa"
  "ckets to send in one iterationR\005count\022G\n"
  "\010protocol\030\002 \001(\tB+\222A(2&Transport protocol"
  " to use (icmp | tcp)R\010protocol\022F\n\004port\030\003"
  " \001(\rB2\222A/2-Target port for TCP probes (i"
  "gnored for ICMP)R\004port\022P\n\007timeout\030\004 \001(\rB"
  "6\222A321Timeout in milliseconds for execut"
  "ion of the taskR\007timeout\022<\n\005delay\030\005 \001(\002B"
  "&\222A#2!Inter-probe delay in millisecondsR"
  "\005delay\022J\n\004dscp\030\006 \001(\rB6\222A321DSCP code to "
  "be set in IP header of probe packetsR\004ds"
  "cp\"\251\004\n\021TestTraceSettings\022K\n\005count\030\001 \001(\rB"
  "5\222A220Number of probe packets to send in"
  " one iterationR\005count\022M\n\010protocol\030\002 \001(\tB"
  "1\222A.2,Transport protocol to use (icmp | "
  "tcp | udp)R\010protocol\022M\n\004port\030\003 \001(\rB9\222A62"
  "4Target port for TCP or UDP probes (igno"
  "red for ICMP)R\004port\022P\n\007timeout\030\004 \001(\rB6\222A"
  "321Timeout in milliseconds for execution"
  " of the taskR\007timeout\022M\n\005limit\030\005 \001(\rB7\222A"
  "422Maximum number of hops to probe (i.e."
  " maximum TTL)R\005limit\022<\n\005delay\030\006 \001(\002B&\222A#"
  "2!Inter-probe delay in millisecondsR\005del"
  "ay\022J\n\004dscp\030\007 \001(\rB6\222A321DSCP code to be s"
  "et in IP header of probe packetsR\004dscp\"\306"
  "\003\n\022ActivationSettings\022\202\001\n\014grace_period\030\001"
  " \001(\tB_\222A\\2ZPeriod of healthy status in m"
  "inutes within the time window not cancel"
  "ling alarm activationR\013gracePeriod\022N\n\tti"
  "me_unit\030\002 \001(\tB1\222A.2,Time unit for specif"
  "ying time window (m | h)R\010timeUnit\022]\n\013ti"
  "me_window\030\003 \001(\tB<\222A927Time window for ev"
  "aluating of test for alarm activationR\nt"
  "imeWindow\022|\n\005times\030\004 \001(\tBf\222Ac2aNumber of"
  " occurrences of unhealthy test status wi"
  "thin the time window triggering alarm ac"
  "tivationR\005times\"\241\034\n\016HealthSettings\022\177\n\020la"
  "tency_critical\030\001 \001(\002BT\222AQ2OThreshold for"
  " ping response latency (in microseconds)"
  " to trigger critical alarmR\017latencyCriti"
  "cal\022|\n\017latency_warning\030\002 \001(\002BS\222AP2NThres"
  "hold for ping response latency (in micro"
  "seconds) to trigger warning alarmR\016laten"
  "cyWarning\022v\n\024packet_loss_critical\030\003 \001(\002B"
  "D\222AA2\?Threshold for ping packet loss (in"
  " %) to trigger critical alarmR\022packetLos"
  "sCritical\022s\n\023packet_loss_warning\030\004 \001(\002BC"
  "\222A@2>Threshold for ping packet loss (in "
  "%) to trigger warning alarmR\021packetLossW"
  "arning\022s\n\017jitter_critical\030\005 \001(\002BJ\222AG2ETh"
  "reshold for ping jitter (in microseconds"
  ") to trigger critical alarmR\016jitterCriti"
  "cal\022q\n\016jitter_warning\030\006 \001(\002BJ\222AG2EThresh"
  "old for ping jitter (in microseconds) to"
  " trigger critical alarmR\rjitterWarning\022\210"
  "\001\n\025http_latency_critical\030\007 \001(\002BT\222AQ2OThr"
  "eshold for HTTP response latency (in mic"
  "roseconds) to trigger critical alarmR\023ht"
  "tpLatencyCritical\022\205\001\n\024http_latency_warni"
  "ng\030\010 \001(\002BS\222AP2NThreshold for HTTP respon"
  "se latency (in microseconds) to trigger "
  "warning alarmR\022httpLatencyWarning\022a\n\020htt"
  "p_valid_codes\030\t \003(\rB7\222A422List of HTTP s"
  "tatus codes indicating healthy stateR\016ht"
  "tpValidCodes\022^\n\017dns_valid_codes\030\n \003(\rB6\222"
  "A321List of DNS status codes indicating "
  "healthy stateR\rdnsValidCodes\022\242\001\n\027latency"
  "_critical_stddev\030\013 \001(\002Bj\222Ag2eThreshold f"
  "or standard deviation (in microseconds) "
  "of ping response latency to trigger crit"
  "ical alarmR\025latencyCriticalStddev\022\237\001\n\026la"
  "tency_warning_stddev\030\014 \001(\002Bi\222Af2dThresho"
  "ld for standard deviation (in microsecon"
  "ds) of ping response latency to trigger "
  "warning alarmR\024latencyWarningStddev\022\226\001\n\026"
  "jitter_critical_stddev\030\r \001(\002B`\222A]2[Thres"
  "hold for standard deviation of ping jitt"
  "er (in microseconds) to trigger critical"
  " alarmR\024jitterCriticalStddev\022\223\001\n\025jitter_"
  "warning_stddev\030\016 \001(\002B_\222A\\2ZThreshold for"
  " standard deviation of ping jitter (in m"
  "icroseconds) to trigger warning alarmR\023j"
  "itterWarningStddev\022\253\001\n\034http_latency_crit"
  "ical_stddev\030\017 \001(\002Bj\222Ag2eThreshold for st"
  "andard deviation of HTTP response latenc"
  "y (in microseconds) to trigger critical "
  "alarmR\031httpLatencyCriticalStddev\022\250\001\n\033htt"
  "p_latency_warning_stddev\030\020 \001(\002Bi\222Af2dThr"
  "eshold for standard deviation of HTTP re"
  "sponse latency (in microseconds) to trig"
  "ger warning alarmR\030httpLatencyWarningStd"
  "dev\022\255\001\n\033unhealthy_subtest_threshold\030\021 \001("
  "\rBm\222Aj2hNumber of tasks (across all agen"
  "ts) that must report unhealthy status in"
  " order for alarm to be triggeredR\031unheal"
  "thySubtestThreshold\022m\n\nactivation\030\022 \001(\0132"
  "-.kentik.synthetics.v202309.ActivationSe"
  "ttingsB\036\222A\0332\031Alarm activation settingsR\n"
  "activation\022\213\001\n\023cert_expiry_warning\030\023 \001(\r"
  "B[\222AX2VThreshold for remaining validity "
  "of TLS certificate (in days) to trigger "
  "warning alarmR\021certExpiryWarning\022\216\001\n\024cer"
  "t_expiry_critical\030\024 \001(\rB\\\222AY2WThreshold "
  "for remaining validity of TLS certificat"
  "e (in days) to trigger critical alarmR\022c"
  "ertExpiryCritical\022\210\001\n\rdns_valid_ips\030\025 \001("
  "\tBd\222Aa2_Comma separated list of IP addre"
  "sses expected to be received in response"
  " to DNS A or AAAA queryR\013dnsValidIps\022\205\001\n"
  "\024dns_latency_critical\030\026 \001(\002BS\222AP2NThresh"
  "old for DNS response latency (in microse"
  "conds) to trigger critical alarmR\022dnsLat"
  "encyCritical\022\202\001\n\023dns_latency_warning\030\027 \001"
  "(\002BR\222AO2MThreshold for DNS response late"
  "ncy (in microseconds) to trigger warning"
  " alarmR\021dnsLatencyWarning\022\250\001\n\033dns_latenc"
  "y_critical_stddev\030\030 \001(\002Bi\222Af2dThreshold "
  "for standard deviation (in microseconds)"
  " of DNS response latency to trigger crit"
  "ical alarmR\030dnsLatencyCriticalStddev\022\245\001\n"
  "\032dns_latency_warning_stddev\030\031 \001(\002Bh\222Ae2c"
  "Threshold for standard deviation (in mic"
  "roseconds) of DNS response latency to tr"
  "igger warning alarmR\027dnsLatencyWarningSt"
  "ddev\022m\n\022per_agent_alerting\030\032 \001(\010B\?\222A<2:B"
  "oolean value indicating whether to use p"
  "er-agent alertingR\020perAgentAlerting\"X\n\014H"
  "ostnameTest\022H\n\006target\030\001 \001(\tB0\222A-2+Fully "
  "qualified DNS name of the target hostR\006t"
  "arget\"\310\001\n\006IpTest\022>\n\007targets\030\001 \003(\tB$\222A!2\037"
  "List of IP addresses of targetsR\007targets"
  "\022~\n\014use_local_ip\030\002 \001(\010B\\\222AY2WBoolean val"
  "ue indicating whether to use local (priv"
  "ate) IP address of the target agentsR\nus"
  "eLocalIp\"\245\002\n\tAgentTest\0223\n\006target\030\001 \001(\tB\033"
  "\222A\0302\026ID of the target agentR\006target\022}\n\014u"
  "se_local_ip\030\002 \001(\010B[\222AX2VBoolean value in"
  "dicating whether to use local (private) "
  "IP address of the target agentR\nuseLocal"
  "Ip\022d\n\nreciprocal\030\003 \001(\010BD\222AA2\?Boolean val"
  "ue indicating whether to make the test b"
  "idirectionalR\nreciprocal\"\213\007\n\010FlowTest\022\207\001"
  "\n\006target\030\001 \001(\tBo\222Al2jTarget ASN, CDN, Co"
  "untry, Region of City for autonomous tes"
  "t (type of value depends on flow test su"
  "b-type)R\006target\022\236\001\n\036target_refresh_inter"
  "val_millis\030\002 \001(\rBY\222AV2TPeriod (in millis"
  "econds) for refreshing list of targets b"
  "ased on available flow dataR\033targetRefre"
  "shIntervalMillis\022^\n\rmax_providers\030\003 \001(\rB"
  "9\222A624Maximum number of IP providers to "
  "track autonomouslyR\014maxProviders\022p\n\016max_"
  "ip_targets\030\004 \001(\rBJ\222AG2EMaximum number of"
  " target IP addresses to select based flo"
  "w data queryR\014maxIpTargets\022W\n\004type\030\005 \001(\t"
  "BC\222A@2>Autonomous test sub-type (asn | c"
  "dn | country | region | city)R\004type\022\250\001\n\016"
  "inet_direction\030\006 \001(\tB\200\001\222A}2{Selection of"
  " address from flow data (src = source ad"
  "dress in inbound flows | dst = destinati"
  "on addresses in outbound flows)R\rinetDir"
  "ection\022~\n\tdirection\030\007 \001(\tB`\222A]2[Directio"
  "n of flows to match target attribute for"
  " extraction of target addresses (src | d"
  "st)R\tdirection\"\357\002\n\007DnsTest\022>\n\006target\030\001 \001"
  "(\tB&\222A#2!Fully qualified DNS name to que"
  "ryR\006target\022F\n\007timeout\030\002 \001(\rB,\030\001\222A\'2%--- "
  "Deprecated: value is ignored. ---R\007timeo"
  "ut\022g\n\013record_type\030\003 \001(\0162$.kentik.synthet"
  "ics.v202309.DNSRecordB \222A\0352\033Type of DNS "
  "record to queryR\nrecordType\022B\n\007servers\030\004"
  " \003(\tB(\222A%2#List of IP addresses of DNS s"
  "erversR\007servers\022/\n\004port\030\005 \001(\rB\033\222A\0302\026Targ"
  "et DNS server portR\004port\"\306\004\n\007UrlTest\0229\n\006"
  "target\030\001 \001(\tB!\222A\0362\034HTTP or HTTPS URL to "
  "requestR\006target\022I\n\007timeout\030\002 \001(\rB/\222A,2*H"
  "TTP transaction timeout (in milliseconds"
  ")R\007timeout\022Q\n\006method\030\003 \001(\tB9\222A624HTTP me"
  "thod to use (GET | HEAD | PATCH | POST |"
  " PUT)R\006method\022\177\n\007headers\030\004 \003(\0132/.kentik."
  "synthetics.v202309.UrlTest.HeadersEntryB"
  "4\222A12/Map of HTTP header values keyed by"
  " header namesR\007headers\022*\n\004body\030\005 \001(\tB\026\222A"
  "\0232\021HTTP request bodyR\004body\022y\n\021ignore_tls"
  "_errors\030\006 \001(\010BM\222AJ2HBoolean indicating w"
  "hether to ignore TLS certificate verific"
  "ation errorsR\017ignoreTlsErrors\032:\n\014Headers"
  "Entry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005"
  "value:\0028\001\"\254\005\n\014PageLoadTest\0229\n\006target\030\001 \001"
  "(\tB!\222A\0362\034HTTP or HTTPS URL to requestR\006t"
  "arget\022I\n\007timeout\030\002 \001(\rB/\222A,2*HTTP transa"
  "ction timeout (in milliseconds)R\007timeout"
  "\022\204\001\n\007headers\030\003 \003(\01324.kentik.synthetics.v"
  "202309.PageLoadTest.HeadersEntryB4\222A12/M"
  "ap of HTTP header values keyed by header"
  " namesR\007headers\022y\n\021ignore_tls_errors\030\004 \001"
  "(\010BM\222AJ2HBoolean indicating whether to i"
  "gnore TLS certificate verification error"
  "sR\017ignoreTlsErrors\022\226\001\n\rcss_selectors\030\005 \003"
  "(\01329.kentik.synthetics.v202309.PageLoadT"
  "est.CssSelectorsEntryB6\222A321Map of CSS s"
  "elector values keyed by selector nameR\014c"
  "ssSelectors\032:\n\014HeadersEntry\022\020\n\003key\030\001 \001(\t"
  "R\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\032\?\n\021CssSe"
  "lectorsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030"
  "\002 \001(\tR\005value:\0028\001\"\221\001\n\017NetworkMeshTest\022~\n\014"
  "use_local_ip\030\001 \001(\010B\\\222AY2WBoolean value i"
  "ndicating whether to use local (private)"
  " IP address of the target agentsR\nuseLoc"
  "alIp\"\307\002\n\nMetricData\0226\n\007current\030\001 \001(\rB\034\222A"
  "\0312\027Current value of metricR\007current\022\?\n\013r"
  "olling_avg\030\002 \001(\rB\036\222A\0332\031Rolling average o"
  "f metricR\nrollingAvg\022[\n\016rolling_stddev\030\003"
  " \001(\rB4\222A12/Rolling average of standard d"
  "eviation of metricR\rrollingStddev\022c\n\006hea"
  "lth\030\004 \001(\tBK\222AH2FHealth evaluation status"
  " for the metric (healthy | warning | cri"
  "tical)R\006health\"\257\001\n\016PacketLossData\0228\n\007cur"
  "rent\030\001 \001(\001B\036\222A\0332\031Current packet loss val"
  "ueR\007current\022c\n\006health\030\002 \001(\tBK\222AH2FHealth"
  " evaluation status for the metric (healt"
  "hy | warning | critical)R\006health\"\326\003\n\013Pin"
  "gResults\022E\n\006target\030\001 \001(\tB-\222A*2(Hostname "
  "or address of the probed targetR\006target\022"
  "n\n\013packet_loss\030\002 \001(\0132).kentik.synthetics"
  ".v202309.PacketLossDataB\"\222A\0372\035Packet los"
  "s metric and healthR\npacketLoss\022f\n\007laten"
  "cy\030\003 \001(\0132%.kentik.synthetics.v202309.Met"
  "ricDataB%\222A\"2 Packet latency metric and "
  "healthR\007latency\022o\n\006jitter\030\004 \001(\0132%.kentik"
  ".synthetics.v202309.MetricDataB0\222A-2+Lat"
  "ency jitter (variance) metric and health"
  "R\006jitter\0227\n\006dst_ip\030\005 \001(\tB \222A\0352\033IP addres"
  "s of probed targetR\005dstIp\"\371\001\n\020HTTPRespon"
  "seData\0224\n\006status\030\001 \001(\rB\034\222A\0312\027HTTP status"
  " in responseR\006status\022>\n\004size\030\002 \001(\rB*\222A\'2"
  "%Total size of  received response bodyR\004"
  "size\022o\n\004data\030\003 \001(\tB[\222AX2VDetailed inform"
  "ation about transaction timing, connecti"
  "on characteristics and responseR\004data\"\344\002"
  "\n\013HTTPResults\022.\n\006target\030\001 \001(\tB\026\222A\0232\021Targ"
  "et probed URLR\006target\022m\n\007latency\030\002 \001(\0132%"
  ".kentik.synthetics.v202309.MetricDataB,\222"
  "A)2\'HTTP response latency metric and hea"
  "lthR\007latency\022v\n\010response\030\004 \001(\0132+.kentik."
  "synthetics.v202309.HTTPResponseDataB-\222A*"
  "2(Information about received HTTP respon"
  "seR\010response\022>\n\006dst_ip\030\005 \001(\tB\'\222A$2\"IP ad"
  "dress of probed target serverR\005dstIp\"\207\001\n"
  "\017DNSResponseData\0220\n\006status\030\001 \001(\rB\030\222A\0252\023R"
  "eceived DNS statusR\006status\022B\n\004data\030\002 \001(\t"
  "B.\222A+2)Text rendering of received DNS re"
  "solutionR\004data\"\335\002\n\nDNSResults\022/\n\006target\030"
  "\001 \001(\tB\027\222A\0242\022Queried DNS recordR\006target\022:"
  "\n\006server\030\002 \001(\tB\"\222A\0372\035DNS server used for"
  " the queryR\006server\022l\n\007latency\030\003 \001(\0132%.ke"
  "ntik.synthetics.v202309.MetricDataB+\222A(2"
  "&DNS response latency metric and healthR"
  "\007latency\022t\n\010response\030\005 \001(\0132*.kentik.synt"
  "hetics.v202309.DNSResponseDataB,\222A)2\'Inf"
  "ormation about received DNS responseR\010re"
  "sponse\"\203\003\n\013TaskResults\022e\n\004ping\030\001 \001(\0132&.k"
  "entik.synthetics.v202309.PingResultsB\'\222A"
  "$2\"Entry containing ping task resultsH\000R"
  "\004ping\022e\n\004http\030\002 \001(\0132&.kentik.synthetics."
  "v202309.HTTPResultsB\'\222A$2\"Entry containi"
  "ng HTTP task resultsH\000R\004http\022a\n\003dns\030\003 \001("
  "\0132%.kentik.synthetics.v202309.DNSResults"
  "B&\222A#2!Entry containing DNS task results"
  "H\000R\003dns\0226\n\006health\030\004 \001(\tB\036\222A\0332\031Health sta"
  "tus of the taskR\006healthB\013\n\ttask_type\"\236\002\n"
  "\014AgentResults\022A\n\010agent_id\030\001 \001(\tB&\222A#2!ID"
  " of the agent providing resultsR\007agentId"
  "\022b\n\006health\030\002 \001(\tBJ\222AG2EOverall health st"
  "atus of all task for the test executed b"
  "y this agentR\006health\022g\n\005tasks\030\003 \003(\0132&.ke"
  "ntik.synthetics.v202309.TaskResultsB)\222A&"
  "2$List of results for individual tasksR\005"
  "tasks\"\352\002\n\013TestResults\022K\n\007test_id\030\001 \001(\tB2"
  "\222A/2-ID of the test for which results ar"
  "e providedR\006testId\022L\n\004time\030\002 \001(\0132\032.googl"
  "e.protobuf.TimestampB\034\222A\0312\027Results times"
  "tamp (UTC)R\004time\0226\n\006health\030\003 \001(\tB\036\222A\0332\031H"
  "ealth status of the testR\006health\022\207\001\n\006age"
  "nts\030\004 \003(\0132\'.kentik.synthetics.v202309.Ag"
  "entResultsBF\222AC2AList of results from ag"
  "ents executing tasks on behalf of the te"
  "stR\006agents\"\201\001\n\005Stats\022,\n\007average\030\001 \001(\005B\022\222"
  "A\0172\rAverage valueR\007average\022$\n\003min\030\002 \001(\005B"
  "\022\222A\0172\rMinimum valueR\003min\022$\n\003max\030\003 \001(\005B\022\222"
  "A\0172\rMaximum valueR\003max\"\301\002\n\010Location\022C\n\010l"
  "atitude\030\010 \001(\001B\'\222A$2\"Latitude in signed d"
  "ecimal degreesR\010latitude\022F\n\tlongitude\030\t "
  "\001(\001B(\222A%2#Longitude in signed decimal de"
  "greesR\tlongitude\0226\n\007country\030\001 \001(\tB\034\222A\0312\027"
  "Country of the locationR\007country\022A\n\006regi"
  "on\030\002 \001(\tB)\222A&2$Geographic region within "
  "the countryR\006region\022-\n\004city\030\003 \001(\tB\031\222A\0262\024"
  "City of the locationR\004city\"\206\005\n\007NetNode\022H"
  "\n\002ip\030\002 \001(\tB8\222A523IP address of the node "
  "in standard textual notationR\002ip\022\?\n\003asn\030"
  "\003 \001(\rB-\222A*2(AS number owning the address"
  " of the nodeR\003asn\022K\n\007as_name\030\004 \001(\tB2\222A/2"
  "-Name of the AS owning the address of th"
  "e nodeR\006asName\022h\n\010location\030\005 \001(\0132#.kenti"
  "k.synthetics.v202309.LocationB\'\222A$2\"Loca"
  "tion of IP address of the nodeR\010location"
  "\022Y\n\010dns_name\030\006 \001(\tB>\222A;29DNS name of the"
  " node (obtained by reverse DNS resolutio"
  "n)R\007dnsName\022f\n\tdevice_id\030\007 \001(\tBI\222AF2DID "
  "of the device corresponding with the nod"
  "e in Kentik configurationR\010deviceId\022v\n\007s"
  "ite_id\030\010 \001(\tB]\222AZ2XID of the site contai"
  "ning the device corresponding with the n"
  "ode in Kentik configurationR\006siteId\"\363\001\n\010"
  "TraceHop\022v\n\007latency\030\003 \001(\005B\\\222AY2WRound-tr"
  "ip packet latency to the node (in micros"
  "econds) - 0 if no response was receivedR"
  "\007latency\022o\n\007node_id\030\005 \001(\tBV\222AS2QID of th"
  "e node for this hop in the Nodes map  - "
  "empty if no response was receivedR\006nodeI"
  "d\"\374\001\n\tPathTrace\022:\n\007as_path\030\001 \003(\005B!\222A\0362\034A"
  "S path of the network traceR\006asPath\022Z\n\013i"
  "s_complete\030\002 \001(\010B9\222A624Indication whethe"
  "r response from target was receivedR\nisC"
  "omplete\022W\n\004hops\030\006 \003(\0132#.kentik.synthetic"
  "s.v202309.TraceHopB\036\222A\0332\031List of hops in"
  " the traceR\004hops\"\250\004\n\004Path\022H\n\010agent_id\030\001 "
  "\001(\tB-\222A*2(ID of the agent generating the"
  " path dataR\007agentId\022F\n\ttarget_ip\030\003 \001(\tB)"
  "\222A&2$IP address of the target of the pat"
  "hR\010targetIp\022j\n\thop_count\030\004 \001(\0132 .kentik."
  "synthetics.v202309.StatsB+\222A(2&Hop count"
  " statistics across all tracesR\010hopCount\022"
  "]\n\022max_as_path_length\030\007 \001(\005B0\222A-2+Maximu"
  "m length of AS path across all tracesR\017m"
  "axAsPathLength\022]\n\006traces\030\010 \003(\0132$.kentik."
  "synthetics.v202309.PathTraceB\037\222A\0342\032Data "
  "for individual tracesR\006traces\022d\n\004time\030\t "
  "\001(\0132\032.google.protobuf.TimestampB4\222A12/Ti"
  "mestamp (UTC) of initiation of the path "
  "traceR\004time\"\225\005\n\031GetResultsForTestsReques"
  "t\022I\n\003ids\030\001 \003(\tB7\222A02.List of test IDs fo"
  "r which to retrieve results\342A\001\002R\003ids\022y\n\n"
  "start_time\030\002 \001(\0132\032.google.protobuf.Times"
  "tampB>\222A725Timestamp of the oldest resul"
  "ts to include in results\342A\001\002R\tstartTime\022"
  "u\n\010end_time\030\003 \001(\0132\032.google.protobuf.Time"
  "stampB>\222A725Timestamp of the newest resu"
  "lts to include in results\342A\001\002R\007endTime\022P"
  "\n\tagent_ids\030\004 \003(\tB3\222A02.List of agent ID"
  "s from which to return resultsR\010agentIds"
  "\022]\n\007targets\030\005 \003(\tBC\222A@2>List of targets "
  "(test dependent) for which to retrieve r"
  "esultsR\007targets\022\211\001\n\taggregate\030\006 \001(\010Bk\222Ah"
  "2fIf true, retrieve result aggregated ac"
  "ross the requested time period, else ret"
  "urn complete time seriesR\taggregate\"^\n\032G"
  "etResultsForTestsResponse\022@\n\007results\030\001 \003"
  "(\0132&.kentik.synthetics.v202309.TestResul"
  "tsR\007results\"\212\004\n\026GetTraceForTestRequest\022M"
  "\n\002id\030\001 \001(\tB=\222A:28ID of test for which to"
  " retrieve network path trace dataR\002id\022y\n"
  "\nstart_time\030\002 \001(\0132\032.google.protobuf.Time"
  "stampB>\222A725Timestamp of the oldest resu"
  "lts to include in results\342A\001\002R\tstartTime"
  "\022u\n\010end_time\030\003 \001(\0132\032.google.protobuf.Tim"
  "estampB>\222A725Timestamp of the newest res"
  "ults to include in results\342A\001\002R\007endTime\022"
  "P\n\tagent_ids\030\004 \003(\tB3\222A02.List of agent I"
  "Ds from which to return resultsR\010agentId"
  "s\022]\n\ntarget_ips\030\005 \003(\tB>\222A;29List of targ"
  "et IP addresses for which to retrieve re"
  "sultsR\ttargetIps\"\346\002\n\027GetTraceForTestResp"
  "onse\022\213\001\n\005nodes\030\001 \003(\0132=.kentik.synthetics"
  ".v202309.GetTraceForTestResponse.NodesEn"
  "tryB6\222A321Map of network node informatio"
  "n keyed by node IDsR\005nodes\022_\n\005paths\030\002 \003("
  "\0132\037.kentik.synthetics.v202309.PathB(\222A%2"
  "#List of retrieved network path dataR\005pa"
  "ths\032\\\n\nNodesEntry\022\020\n\003key\030\001 \001(\tR\003key\0228\n\005v"
  "alue\030\002 \001(\0132\".kentik.synthetics.v202309.N"
  "etNodeR\005value:\0028\001\"\023\n\021ListAgentsRequest\"\324"
  "\001\n\022ListAgentsResponse\022W\n\006agents\030\001 \003(\0132 ."
  "kentik.synthetics.v202309.AgentB\035\222A\0322\030Li"
  "st of available agentsR\006agents\022e\n\rinvali"
  "d_count\030\002 \001(\rB@\222A=2;Number of invalid en"
  "tries encountered while collecting dataR"
  "\014invalidCount\"E\n\017GetAgentRequest\0222\n\002id\030\001"
  " \001(\tB\"\222A\0332\031ID of the requested agent\342A\001\002"
  "R\002id\"t\n\020GetAgentResponse\022`\n\005agent\030\001 \001(\0132"
  " .kentik.synthetics.v202309.AgentB(\222A%2#"
  "Agent configuration and status dataR\005age"
  "nt\"k\n\022UpdateAgentRequest\022U\n\005agent\030\001 \001(\0132"
  " .kentik.synthetics.v202309.AgentB\035\222A\0322\030"
  "Agent configuration dataR\005agent\"w\n\023Updat"
  "eAgentResponse\022`\n\005agent\030\001 \001(\0132 .kentik.s"
  "ynthetics.v202309.AgentB(\222A%2#Agent conf"
  "iguration and status dataR\005agent\"L\n\022Dele"
  "teAgentRequest\0226\n\002id\030\001 \001(\tB&\222A\0372\035ID of t"
  "he agent to be deleted\342A\001\002R\002id\"\025\n\023Delete"
  "AgentResponse\"\022\n\020ListTestsRequest\"\341\001\n\021Li"
  "stTestsResponse\022e\n\005tests\030\001 \003(\0132\037.kentik."
  "synthetics.v202309.TestB.\222A+2)List of co"
  "nfigured active or paused testsR\005tests\022e"
  "\n\rinvalid_count\030\002 \001(\rB@\222A=2;Number of in"
  "valid entries encountered while collecti"
  "ng dataR\014invalidCount\"j\n\021CreateTestReque"
  "st\022U\n\004test\030\001 \001(\0132\037.kentik.synthetics.v20"
  "2309.TestB \222A\0312\027Test configuration data\342"
  "A\001\002R\004test\"r\n\022CreateTestResponse\022\\\n\004test\030"
  "\001 \001(\0132\037.kentik.synthetics.v202309.TestB\'"
  "\222A$2\"Test configuration and status dataR"
  "\004test\"\?\n\016GetTestRequest\022-\n\002id\030\001 \001(\tB\035\222A\026"
  "2\024ID of requested test\342A\001\002R\002id\"o\n\017GetTes"
  "tResponse\022\\\n\004test\030\001 \001(\0132\037.kentik.synthet"
  "ics.v202309.TestB\'\222A$2\"Test configuratio"
  "n and status dataR\004test\"f\n\021UpdateTestReq"
  "uest\022Q\n\004test\030\001 \001(\0132\037.kentik.synthetics.v"
  "202309.TestB\034\222A\0312\027Test configuration dat"
  "aR\004test\"r\n\022UpdateTestResponse\022\\\n\004test\030\001 "
  "\001(\0132\037.kentik.synthetics.v202309.TestB\'\222A"
  "$2\"Test configuration and status dataR\004t"
  "est\"J\n\021DeleteTestRequest\0225\n\002id\030\001 \001(\tB%\222A"
  "\0362\034ID of the test to be deleted\342A\001\002R\002id\""
  "\024\n\022DeleteTestResponse\"\272\001\n\024SetTestStatusR"
  "equest\022F\n\002id\030\001 \001(\tB6\222A/2-ID of the test "
  "which status is to be modified\342A\001\002R\002id\022Z"
  "\n\006status\030\002 \001(\0162%.kentik.synthetics.v2023"
  "09.TestStatusB\033\222A\0242\022Target test status\342A"
  "\001\002R\006status\"\027\n\025SetTestStatusResponse\"\275\001\n\n"
  "AgentAlert\022\016\n\002id\030\001 \001(\tR\002id\022+\n\021threshold_"
  "seconds\030\002 \001(\rR\020thresholdSeconds\0228\n\030notif"
  "ication_channel_ids\030\003 \003(\tR\026notificationC"
  "hannelIds\022\031\n\010agent_id\030\004 \001(\tR\007agentId\022\035\n\n"
  "agent_name\030\005 \001(\tR\tagentName\"\233\001\n\027CreateAg"
  "entAlertRequest\022+\n\021threshold_seconds\030\001 \001"
  "(\rR\020thresholdSeconds\0228\n\030notification_cha"
  "nnel_ids\030\002 \003(\tR\026notificationChannelIds\022\031"
  "\n\010agent_id\030\003 \001(\tR\007agentId\"b\n\030CreateAgent"
  "AlertResponse\022F\n\013agent_alert\030\001 \001(\0132%.ken"
  "tik.synthetics.v202309.AgentAlertR\nagent"
  "Alert\"\220\001\n\027UpdateAgentAlertRequest\022\016\n\002id\030"
  "\001 \001(\tR\002id\022+\n\021threshold_seconds\030\002 \001(\rR\020th"
  "resholdSeconds\0228\n\030notification_channel_i"
  "ds\030\003 \003(\tR\026notificationChannelIds\"b\n\030Upda"
  "teAgentAlertResponse\022F\n\013agent_alert\030\001 \001("
  "\0132%.kentik.synthetics.v202309.AgentAlert"
  "R\nagentAlert\"&\n\024GetAgentAlertRequest\022\016\n\002"
  "id\030\001 \001(\tR\002id\"_\n\025GetAgentAlertResponse\022F\n"
  "\013agent_alert\030\001 \001(\0132%.kentik.synthetics.v"
  "202309.AgentAlertR\nagentAlert\"5\n\026ListAge"
  "ntAlertsRequest\022\033\n\tagent_ids\030\001 \003(\tR\010agen"
  "tIds\"c\n\027ListAgentAlertsResponse\022H\n\014agent"
  "_alerts\030\001 \003(\0132%.kentik.synthetics.v20230"
  "9.AgentAlertR\013agentAlerts\")\n\027DeleteAgent"
  "AlertRequest\022\016\n\002id\030\001 \001(\tR\002id\"\032\n\030DeleteAg"
  "entAlertResponse*}\n\rImplementType\022\036\n\032IMP"
  "LEMENT_TYPE_UNSPECIFIED\020\000\022\027\n\023IMPLEMENT_T"
  "YPE_RUST\020\001\022\027\n\023IMPLEMENT_TYPE_NODE\020\002\022\032\n\026I"
  "MPLEMENT_TYPE_NETWORK\020\003*]\n\010IPFamily\022\031\n\025I"
  "P_FAMILY_UNSPECIFIED\020\000\022\020\n\014IP_FAMILY_V4\020\001"
  "\022\020\n\014IP_FAMILY_V6\020\002\022\022\n\016IP_FAMILY_DUAL\020\003*\213"
  "\001\n\nTestStatus\022\033\n\027TEST_STATUS_UNSPECIFIED"
  "\020\000\022\026\n\022TEST_STATUS_ACTIVE\020\001\022\026\n\022TEST_STATU"
  "S_PAUSED\020\002\022\027\n\023TEST_STATUS_DELETED\020\003\022\027\n\023T"
  "EST_STATUS_PREVIEW\020\004*q\n\013AgentStatus\022\034\n\030A"
  "GENT_STATUS_UNSPECIFIED\020\000\022\023\n\017AGENT_STATU"
  "S_OK\020\001\022\025\n\021AGENT_STATUS_WAIT\020\002\022\030\n\024AGENT_S"
  "TATUS_DELETED\020\003*\310\001\n\tDNSRecord\022\032\n\026DNS_REC"
  "ORD_UNSPECIFIED\020\000\022\020\n\014DNS_RECORD_A\020\001\022\023\n\017D"
  "NS_RECORD_AAAA\020\002\022\024\n\020DNS_RECORD_CNAME\020\003\022\024"
  "\n\020DNS_RECORD_DNAME\020\004\022\021\n\rDNS_RECORD_NS\020\005\022"
  "\021\n\rDNS_RECORD_MX\020\006\022\022\n\016DNS_RECORD_PTR\020\007\022\022"
  "\n\016DNS_RECORD_SOA\020\0102\312\005\n\025SyntheticsDataSer"
  "vice\022\263\002\n\022GetResultsForTests\0224.kentik.syn"
  "thetics.v202309.GetResultsForTestsReques"
  "t\0325.kentik.synthetics.v202309.GetResults"
  "ForTestsResponse\"\257\001\222As\022\025Get results for "
  "tests\032FReturns probe results for a set o"
  "f tests for specified period of time.*\022G"
  "etResultsForTests\362\327\002\017synthetics:read\202\323\344\223"
  "\002 \"\033/synthetics/v202309/results:\001*\022\320\002\n\017G"
  "etTraceForTest\0221.kentik.synthetics.v2023"
  "09.GetTraceForTestRequest\0322.kentik.synth"
  "etics.v202309.GetTraceForTestResponse\"\325\001"
  "\222A\232\001\022!Get network trace data for a test\032"
  "dGet network trace data for a specific s"
  "ynthetic test. The test must have tracer"
  "oute task configured.*\017GetTraceForTest\362\327"
  "\002\017synthetics:read\202\323\344\223\002\036\"\031/synthetics/v20"
  "2309/trace:\001*\032(\312A\023grpc.api.kentik.com\352\327\002"
  "\nsynthetics\220\330\002\0032\206&\n\026SyntheticsAdminServi"
  "ce\022\247\002\n\nListAgents\022,.kentik.synthetics.v2"
  "02309.ListAgentsRequest\032-.kentik.synthet"
  "ics.v202309.ListAgentsResponse\"\273\001\222Ac\022\025Li"
  "st available agents\032>Returns list of all"
  " synthetic agents available in the accou"
  "nt.*\nListAgents\362\327\002\025admin.synthetics:read"
  "\222\330\002\026synthetics.agent::read\202\323\344\223\002\034\022\032/synth"
  "etics/v202309/agents\022\247\002\n\010GetAgent\022*.kent"
  "ik.synthetics.v202309.GetAgentRequest\032+."
  "kentik.synthetics.v202309.GetAgentRespon"
  "se\"\301\001\222Ad\022\036Get information about an agent"
  "\0328Returns information about the requeste"
  "d synthetic agent.*\010GetAgent\362\327\002\025admin.sy"
  "nthetics:read\222\330\002\026synthetics.agent::read\202"
  "\323\344\223\002!\022\037/synthetics/v202309/agents/{id}\022\263"
  "\002\n\013UpdateAgent\022-.kentik.synthetics.v2023"
  "09.UpdateAgentRequest\032..kentik.synthetic"
  "s.v202309.UpdateAgentResponse\"\304\001\222A[\022 Upd"
  "ate configuration of an agent\032*Update co"
  "nfiguration of a synthetic agent.*\013Updat"
  "eAgent\362\327\002\026admin.synthetics:write\222\330\002\030synt"
  "hetics.agent::update\202\323\344\223\002*\032%/synthetics/"
  "v202309/agents/{agent.id}:\001*\022\311\002\n\013DeleteA"
  "gent\022-.kentik.synthetics.v202309.DeleteA"
  "gentRequest\032..kentik.synthetics.v202309."
  "DeleteAgentResponse\"\332\001\222Az\022\017Delete an age"
  "nt\032ZDeletes the requested agent. The del"
  "eted agent is removed from configuration"
  " of all tests.*\013DeleteAgent\362\327\002\026admin.syn"
  "thetics:write\222\330\002\030synthetics.agent::delet"
  "e\202\323\344\223\002!*\037/synthetics/v202309/agents/{id}"
  "\022\237\002\n\tListTests\022+.kentik.synthetics.v2023"
  "09.ListTestsRequest\032,.kentik.synthetics."
  "v202309.ListTestsResponse\"\266\001\222A`\022\016List al"
  "l tests\032CReturns a list of all configure"
  "d active and paused synthetic tests.*\tLi"
  "stTests\362\327\002\025admin.synthetics:read\222\330\002\025synt"
  "hetics.test::read\202\323\344\223\002\033\022\031/synthetics/v20"
  "2309/tests\022\252\002\n\nCreateTest\022,.kentik.synth"
  "etics.v202309.CreateTestRequest\032-.kentik"
  ".synthetics.v202309.CreateTestResponse\"\276"
  "\001\222Ab\022\rCreate a test\032ECreate synthetic te"
  "st based on configuration provided in th"
  "e request.*\nCreateTest\362\327\002\026admin.syntheti"
  "cs:write\222\330\002\027synthetics.test::create\202\323\344\223\002"
  "\036\"\031/synthetics/v202309/tests:\001*\022\251\002\n\007GetT"
  "est\022).kentik.synthetics.v202309.GetTestR"
  "equest\032*.kentik.synthetics.v202309.GetTe"
  "stResponse\"\306\001\222Ak\022\034Get information about "
  "a test\032BReturns configuration and status"
  " for the requested synthetic test.*\007GetT"
  "est\362\327\002\025admin.synthetics:read\222\330\002\025syntheti"
  "cs.test::read\202\323\344\223\002 \022\036/synthetics/v202309"
  "/tests/{id}\022\252\002\n\nUpdateTest\022,.kentik.synt"
  "hetics.v202309.UpdateTestRequest\032-.kenti"
  "k.synthetics.v202309.UpdateTestResponse\""
  "\276\001\222AX\022\036Update configuration of a test\032*U"
  "pdates configuration of a synthetic test"
  ".*\nUpdateTest\362\327\002\026admin.synthetics:write\222"
  "\330\002\027synthetics.test::update\202\323\344\223\002(\032#/synth"
  "etics/v202309/tests/{test.id}:\001*\022\314\002\n\nDel"
  "eteTest\022,.kentik.synthetics.v202309.Dele"
  "teTestRequest\032-.kentik.synthetics.v20230"
  "9.DeleteTestResponse\"\340\001\222A\201\001\022\030Delete a sy"
  "nthetic test.\032YDeletes the synthetics te"
  "st. All accumulated results for the test"
  " cease to be accessible.*\nDeleteTest\362\327\002\026"
  "admin.synthetics:write\222\330\002\027synthetics.tes"
  "t::delete\202\323\344\223\002 *\036/synthetics/v202309/tes"
  "ts/{id}\022\262\002\n\rSetTestStatus\022/.kentik.synth"
  "etics.v202309.SetTestStatusRequest\0320.ken"
  "tik.synthetics.v202309.SetTestStatusResp"
  "onse\"\275\001\222AU\022!Update status of a synthetic"
  " test\032!Update status of a synthetic test"
  "*\rSetTestStatus\362\327\002\026admin.synthetics:writ"
  "e\222\330\002\027synthetics.test::update\202\323\344\223\002*\032%/syn"
  "thetics/v202309/tests/{id}/status:\001*\022\302\002\n"
  "\020CreateAgentAlert\0222.kentik.synthetics.v2"
  "02309.CreateAgentAlertRequest\0323.kentik.s"
  "ynthetics.v202309.CreateAgentAlertRespon"
  "se\"\304\001\222Aa\022#Create an agent alert configur"
  "ation\032(Creates a new agent alert configu"
  "ration.*\020CreateAgentAlert\362\327\002\026admin.synth"
  "etics:write\222\330\002\030synthetics.agent::create\202"
  "\323\344\223\002$\"\037/synthetics/v202309/agentAlerts:\001"
  "*\022\211\003\n\020UpdateAgentAlert\0222.kentik.syntheti"
  "cs.v202309.UpdateAgentAlertRequest\0323.ken"
  "tik.synthetics.v202309.UpdateAgentAlertR"
  "esponse\"\213\002\222A\242\001\022#Update an agent alert co"
  "nfiguration\032iUpdates an existing agent a"
  "lert configuration with the time thresho"
  "ld and notification channels provided.*\020"
  "UpdateAgentAlert\362\327\002\026admin.synthetics:wri"
  "te\222\330\002\030synthetics.agent::update\202\323\344\223\002)\032$/s"
  "ynthetics/v202309/agentAlerts/{id}:\001*\022\272\002"
  "\n\rGetAgentAlert\022/.kentik.synthetics.v202"
  "309.GetAgentAlertRequest\0320.kentik.synthe"
  "tics.v202309.GetAgentAlertResponse\"\305\001\222Ac"
  "\022 Get an agent alert configuration\0320Retr"
  "ieves an existing agent alert configurat"
  "ion.*\rGetAgentAlert\362\327\002\025admin.synthetics:"
  "read\222\330\002\026synthetics.agent::read\202\323\344\223\002&\022$/s"
  "ynthetics/v202309/agentAlerts/{id}\022\336\002\n\017L"
  "istAgentAlerts\0221.kentik.synthetics.v2023"
  "09.ListAgentAlertsRequest\0322.kentik.synth"
  "etics.v202309.ListAgentAlertsResponse\"\343\001"
  "\222A\205\001\022\037List agent alert configurations\032QL"
  "ists all agent alert configurations, opt"
  "ionally filtered by a list of agent ids."
  "*\017ListAgentAlerts\362\327\002\025admin.synthetics:re"
  "ad\222\330\002\026synthetics.agent::read\202\323\344\223\002!\022\037/syn"
  "thetics/v202309/agentAlerts\022\312\002\n\020DeleteAg"
  "entAlert\0222.kentik.synthetics.v202309.Del"
  "eteAgentAlertRequest\0323.kentik.synthetics"
  ".v202309.DeleteAgentAlertResponse\"\314\001\222Ag\022"
  "#Delete an agent alert configuration\032.De"
  "letes an existing agent alert configurat"
  "ion.*\020DeleteAgentAlert\362\327\002\026admin.syntheti"
  "cs:write\222\330\002\030synthetics.agent::delete\202\323\344\223"
  "\002&*$/synthetics/v202309/agentAlerts/{id}"
  "\032.\312A\023grpc.api.kentik.com\352\327\002\020admin.synthe"
  "tics\220\330\002\003B\370@ZOgithub.com/kentik/api-schem"
  "a-public/gen/go/kentik/synthetics/v20230"
  "9;synthetics\222A\243@\022\271>\n\031Synthetics Monitori"
  "ng API\022\313=# Overview\nThe Synthetics Monit"
  "oring API provides programmatic access t"
  "o Kentik\'s [synthetic monitoring system]"
  "(https://kb.kentik.com/v4/Ma00.htm). The"
  " API consists of two endpoints:\n| Endpoi"
  "nt | Purpose |\n|-----------|---------|\n|"
  " SyntheticsAdminService | CRUD operation"
  "s for synthetic tests, agents, and offli"
  "ne agent alerts |\n| SyntheticsDataServic"
  "e  | Retrieval of synthetic test results"
  " and network traces |\n\nBoth REST endpoin"
  "t and gRPC RPCs are provided.\nNote: API "
  "version v202309 is the same as v202202 e"
  "xcept that the timestamps returned for s"
  "ynthetic test results are closer to when"
  " the test was actually run.\n### Known Li"
  "mitations\nThe API currently does not sup"
  "port the following [Synthetic Test Types"
  "](https://kb.kentik.com/v4/Ma00.htm#Ma00"
  "-Synthetic_Test_Types):\n* BGP Monitor te"
  "sts, which are supported in a [separate "
  "API](https://github.com/kentik/api-schem"
  "a-public/blob/master/proto/kentik/bgp_mo"
  "nitoring/v202205beta1/bgp_monitoring.pro"
  "to)\n* Transaction tests.\n\n### Additional"
  " Public Resources\nKentik community [Pyth"
  "on](https://github.com/kentik/community_"
  "sdk_python) and [Go](https://github.com/"
  "kentik/community_sdk_golang) SDKs provid"
  "e language-specific support for using th"
  "is and other Kentik APIs. These SDKs can"
  " be also used as example code for develo"
  "pment. \n A [Terraform provider](https://"
  "registry.terraform.io/providers/kentik/k"
  "entik-synthetics) is available for confi"
  "guring tests and agents for Kentik synth"
  "etic monitoring.\n# Anatomy of a Syntheti"
  "c Test\nEach `Test` consists of one or mo"
  "re tasks. Tasks are executed by monitori"
  "ng `Agents` that send synthetic traffic "
  "(probes) over the network. The API curre"
  "ntly supports following tasks:\n| Task na"
  "me  | Purpose |\n|------------|---------|"
  "\n| ping       | Test basic address, and "
  "optionally TCP port reachability |\n| tra"
  "ceroute (a.k.a. trace)| Discover unidire"
  "ctional network path |\n| http | Perform "
  "a simple HTTP/HTTPS request |\n| page-loa"
  "d | Use headless Chromium to execute an "
  "HTTP/HTTPS request |\n| dns | Execute a D"
  "NS query|\n\nThe set of tasks executed on "
  "behalf of a given test depends on the `t"
  "ype` of that test. The following test ty"
  "pes are currently supported by the API:\n"
  "| API type | Portal (UI) equivalent | Ta"
  "sks |\n|---------------|--------------|--"
  "-----|\n| ip | IP Address | ping, tracero"
  "ute |\n| hostname | Hostname | ping, trac"
  "eroute |\n| network_grid | Network Grid |"
  " ping, traceroute |\n| agent | Agent-to-A"
  "gent | ping, traceroute |\n| network_mesh"
  " | Network Mesh | ping, traceroute |\n| f"
  "low | Autonomous Tests (5 variants) | pi"
  "ng, traceroute |\n| url | HTTP(S) or API "
  "| http, ping (optional), traceroute (opt"
  "ional) |\n| page_load | Page Load | page-"
  "load, ping (optional), traceroute (optio"
  "nal) |\n| dns | DNS Server Monitor | dns "
  "|\n| dns_grid | DNS Server Grid | dns |\n\n"
  "***Note:*** `ping` and `traceroute` task"
  "s are always run together (never one wit"
  "hout the other).\n\n# Test Attributes and "
  "Settings\nThe attributes of the test obje"
  "ct enable configuration of test settings"
  ", access to test metadata, and access to"
  " runtime state information.\n### State an"
  "d Metadata Attributes\n The following tab"
  "le lists the metadata and state attribut"
  "es:\n| Attribute | Access | Purpose |\n|--"
  "---------|--------|---------|\n| id | RO "
  "| System-generated unique identifier of "
  "the test |\n| name | RW | User specified "
  "name for the test (need not be unique) |"
  "\n| type | RO (after creation) | Type of "
  "the test (set on creation; read-only the"
  "reafter) |\n| status | RW | Life-cycle st"
  "atus of the test |\n| cdate | RO | Creati"
  "on timestamp |\n| edate | RO | Last-modif"
  "ication timestamp |\n| created_by | RO | "
  "Identity of the user that created the te"
  "st |\n| last_updated_by | RO | Identity o"
  "f the latest user to modify the test |\n|"
  " labels | RW | List of names of labels a"
  "pplied to the test |\n\nTest configuration"
  " is performed via the test\'s `settings` "
  "attribute. Some settings are common to a"
  "ll tests while others are specific to te"
  "sts of a given type.\n### Common Test Set"
  "tings\nThe following settings are used fo"
  "r tests of all types:\n| Attribute | Purp"
  "ose | Required |\n|-----------|---------|"
  "----------|\n| agentIds  | IDs of agents "
  "to execute tasks for the test | YES |\n| "
  "period | Test execution interval in seco"
  "nds | NO (default 60s) |\n| family | IP a"
  "ddress family. Used only for tests whose"
  " type is url or dns. Selects which type "
  "of DNS resource is queried for resolving"
  " hostname to target address | NO (defaul"
  "t IP_FAMILY_DUAL) |\n| notificationChanne"
  "ls | List of notification channels for t"
  "he test | NO (default empty list) |\n| he"
  "althSettings | A HealthSettings object t"
  "hat configures health settings for this "
  "test, which includes metric thresholds t"
  "hat define health status (warning and cr"
  "itical) and trigger associated alarms. |"
  " YES |\n| ping | A TestPingSettings objec"
  "t that configures the ping task of the t"
  "est | NO (default depends on test type) "
  "|\n| trace | A TestTraceSettings object t"
  "hat configures the trace task of the tes"
  "t | NO (default depends on test type) |\n"
  "| tasks | List of names of the tasks tha"
  "t will be executed for this test | YES |"
  "\n\n### Type-specific Settings\nEach test t"
  "ype has its own configuration object tha"
  "t represents the settings for that type."
  " These type-specific objects are referen"
  "ced by the attributes in `Test.settings`"
  ":\n| Test type    | Settings attribute | "
  "Configuration object |\n|--------------|-"
  "------------------------|---------------"
  "------------|\n| ip           | ip       "
  "               | IpTest                 "
  "   |\n| hostname     | hostname          "
  "      | HostnameTest              |\n| ne"
  "twork_grid | networkGrid             | I"
  "pTest                    |\n| agent      "
  "  | agent                   | AgentTest "
  "                |\n| network_mesh | netwo"
  "rkMesh             | NetworkMeshTest    "
  "       |\n| flow         | flow          "
  "          | FlowTest                  |\n"
  "| url          | url                    "
  " | UrlTest                   |\n| page_lo"
  "ad    | pageLoad                | PageLo"
  "adTest              |\n| dns          | d"
  "ns                     | DnsTest        "
  "           |\n| dns_grid     | dnsGrid   "
  "              | DnsTest                 "
  "  |\n\n# Test Results\nResults of synthetic"
  " tests are returned as a sequence of `Te"
  "stResults` objects. Each such object rep"
  "resents measurements and health evaluati"
  "on for a single test at specific point i"
  "n time. Measurements and health evaluati"
  "on are grouped by agent and by task.\nGra"
  "nularity of timestamps in test results d"
  "epends on the frequency (period) of the "
  "test and on the requested time range. Th"
  "e minimum granularity is 1 minute (even "
  "when period < 1 minute). The longer the "
  "time range, the lower the granularity.\n#"
  " Network Traces\nSynthetic tests that inc"
  "lude the `traceroute` task collect the u"
  "nidirectional network path from the agen"
  "t to the target for each agent/target pa"
  "ir. The trace data are returned in the `"
  "GetTraceForTestResponse` object. The `pa"
  "ths` attribute of this object contains t"
  "he collected network path for each agent"
  "/target pair and the round-trip time (RT"
  "T) to each hop.\nHops in actual network t"
  "races are identified by a `nodeId`. The "
  "mapping of node IDs to address, name, lo"
  "cation, and other attributes of the hop "
  "is provided in a map that is stored in t"
  "he `nodes` attribute of the `GetTraceFor"
  "TestResponse` object.\n# Agents\nThe Kenti"
  "k synthetic monitoring system recognizes"
  " 2 types of agents:\n* **Global** (public"
  "): Managed by Kentik and available to ev"
  "ery Kentik user. All information about g"
  "lobal agents in this API is read-only.\n*"
  " **Private**: Deployed by each customer "
  "and available only to that customer.\nTo "
  "be visible in this API, a private agent "
  "must first associate itself with a custo"
  "mer account by contacting the Kentik sys"
  "tem (via private API). Once the agent is"
  " associated it can be authorized via the"
  " API by changing its `status` to `AGENT_"
  "STATUS_OK`. For more information about p"
  "rivate agent deployment, see [**Syntheti"
  "c Agent Deployments**](https://kb.kentik"
  ".com/v4/Ma01.htm#Ma01-Synthetic_Agent_De"
  "ployments).\n\"E\n\026Kentik API Engineering\022+"
  "https://github.com/kentik/api-schema-pub"
  "lic2\007v202309*\001\0022\020application/json:\020appli"
  "cation/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Auth-Em"
  "ail \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-Token "
  "\002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r`\n\"Kentik synt"
  "hetic monitoring system\022:https://kb.kent"
  "ik.com/v4/Ma00.htm#Ma00-Synthetics_Overv"
  "iewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto_deps[7] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fuser_5finfo_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto_sccs[72] = {
  &scc_info_ActivationSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_AgentMetadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_AgentMetadata_IpValue_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_AgentResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_AgentTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_CreateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_CreateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_CreateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_CreateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DNSResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DNSResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DeleteAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DeleteAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_DnsTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_FlowTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetResultsForTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetResultsForTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_GetTraceForTestResponse_NodesEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_HTTPResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_HTTPResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_HealthSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_HostnameTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_IpTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_ListAgentAlertsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_ListAgentAlertsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_ListTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_ListTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_Location_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_NetNode_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_NetworkMeshTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_PacketLossData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_PageLoadTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_PageLoadTest_CssSelectorsEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_PageLoadTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_Path_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_PathTrace_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_PingResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_Stats_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_TaskResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_TestPingSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_TestResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_TestSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_TraceHop_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_UpdateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_UpdateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_UpdateAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_UpdateAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_UpdateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_UpdateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_UrlTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
  &scc_info_UrlTest_HeadersEntry_DoNotUse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto, "kentik/synthetics/v202309/synthetics.proto", 38211,
  &descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto_once, descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto_sccs, descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto_deps, 72, 7,
  schemas, file_default_instances, TableStruct_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto::offsets,
  file_level_metadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto, 72, file_level_enum_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto, file_level_service_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto)), true);
namespace kentik {
namespace synthetics {
namespace v202309 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ImplementType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto[0];
}
bool ImplementType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* IPFamily_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto[1];
}
bool IPFamily_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto[2];
}
bool TestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AgentStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto[3];
}
bool AgentStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DNSRecord_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto);
  return file_level_enum_descriptors_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto[4];
}
bool DNSRecord_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Agent::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_Agent_default_instance_._instance.get_mutable()->last_authed_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202309::_Agent_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::kentik::synthetics::v202309::AgentMetadata*>(
      ::kentik::synthetics::v202309::AgentMetadata::internal_default_instance());
}
class Agent::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& last_authed(const Agent* msg);
  static const ::kentik::synthetics::v202309::AgentMetadata& metadata(const Agent* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Agent::_Internal::last_authed(const Agent* msg) {
  return *msg->last_authed_;
}
const ::kentik::synthetics::v202309::AgentMetadata&
Agent::_Internal::metadata(const Agent* msg) {
  return *msg->metadata_;
}
void Agent::clear_last_authed() {
  if (GetArena() == nullptr && last_authed_ != nullptr) {
    delete last_authed_;
  }
  last_authed_ = nullptr;
}
Agent::Agent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  test_ids_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.Agent)
}
Agent::Agent(const Agent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      test_ids_(from.test_ids_),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_name().empty()) {
    site_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_name(),
      GetArena());
  }
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_alias().empty()) {
    alias_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_alias(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_os().empty()) {
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_os(),
      GetArena());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_id().empty()) {
    site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_id(),
      GetArena());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_version(),
      GetArena());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_city(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  local_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_ip().empty()) {
    local_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_local_ip(),
      GetArena());
  }
  cloud_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cloud_region().empty()) {
    cloud_region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cloud_region(),
      GetArena());
  }
  cloud_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cloud_provider().empty()) {
    cloud_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_cloud_provider(),
      GetArena());
  }
  if (from._internal_has_last_authed()) {
    last_authed_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.last_authed_);
  } else {
    last_authed_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::kentik::synthetics::v202309::AgentMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&agent_impl_) -
    reinterpret_cast<char*>(&status_)) + sizeof(agent_impl_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.Agent)
}

void Agent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloud_region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloud_provider_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&last_authed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_impl_) -
      reinterpret_cast<char*>(&last_authed_)) + sizeof(agent_impl_));
}

Agent::~Agent() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.Agent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Agent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  alias_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloud_region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cloud_provider_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete last_authed_;
  if (this != internal_default_instance()) delete metadata_;
}

void Agent::ArenaDtor(void* object) {
  Agent* _this = reinterpret_cast< Agent* >(object);
  (void)_this;
}
void Agent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Agent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Agent& Agent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Agent_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Agent::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  test_ids_.Clear();
  labels_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloud_region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloud_provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && last_authed_ != nullptr) {
    delete last_authed_;
  }
  last_authed_ = nullptr;
  if (GetArena() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&agent_impl_) -
      reinterpret_cast<char*>(&status_)) + sizeof(agent_impl_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Agent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_site_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.site_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.AgentStatus status = 3[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kentik::synthetics::v202309::AgentStatus>(val));
        } else goto handle_unusual;
        continue;
      // string alias = 4[json_name = "alias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_alias();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.alias"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string os = 6[json_name = "os", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.os"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip = 7[json_name = "ip", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double lat = 8[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double long = 9[json_name = "long", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          long__ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_authed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.IPFamily family = 11[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_family(static_cast<::kentik::synthetics::v202309::IPFamily>(val));
        } else goto handle_unusual;
        continue;
      // uint32 asn = 12[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string site_id = 13[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_site_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.site_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 14[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 16[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 17[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string country = 18[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string test_ids = 19[json_name = "testIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_test_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.test_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // string local_ip = 20[json_name = "localIp", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_local_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.local_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cloud_region = 22[json_name = "cloudRegion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_cloud_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.cloud_region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cloud_provider = 23[json_name = "cloudProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_cloud_provider();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.cloud_provider"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.ImplementType agent_impl = 24[json_name = "agentImpl", (.google.api.field_behavior) = OUTPUT_ONLY];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_agent_impl(static_cast<::kentik::synthetics::v202309::ImplementType>(val));
        } else goto handle_unusual;
        continue;
      // repeated string labels = 25[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Agent.labels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.AgentMetadata metadata = 26[json_name = "metadata", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Agent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.Agent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_name().data(), static_cast<int>(this->_internal_site_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.site_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_site_name(), target);
  }

  // .kentik.synthetics.v202309.AgentStatus status = 3[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status(), target);
  }

  // string alias = 4[json_name = "alias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->alias().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_alias().data(), static_cast<int>(this->_internal_alias().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.alias");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_alias(), target);
  }

  // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // string os = 6[json_name = "os", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->os().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.os");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_os(), target);
  }

  // string ip = 7[json_name = "ip", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.ip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ip(), target);
  }

  // double lat = 8[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_lat(), target);
  }

  // double long = 9[json_name = "long", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_long_(), target);
  }

  // .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_last_authed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::last_authed(this), target, stream);
  }

  // .kentik.synthetics.v202309.IPFamily family = 11[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_family(), target);
  }

  // uint32 asn = 12[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_asn(), target);
  }

  // string site_id = 13[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_id().data(), static_cast<int>(this->_internal_site_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.site_id");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_site_id(), target);
  }

  // string version = 14[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.version");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_version(), target);
  }

  // string city = 16[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.city");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_city(), target);
  }

  // string region = 17[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.region");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_region(), target);
  }

  // string country = 18[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.country");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_country(), target);
  }

  // repeated string test_ids = 19[json_name = "testIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_test_ids_size(); i < n; i++) {
    const auto& s = this->_internal_test_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.test_ids");
    target = stream->WriteString(19, s, target);
  }

  // string local_ip = 20[json_name = "localIp", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->local_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_ip().data(), static_cast<int>(this->_internal_local_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.local_ip");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_local_ip(), target);
  }

  // string cloud_region = 22[json_name = "cloudRegion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cloud_region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloud_region().data(), static_cast<int>(this->_internal_cloud_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.cloud_region");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_cloud_region(), target);
  }

  // string cloud_provider = 23[json_name = "cloudProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cloud_provider().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cloud_provider().data(), static_cast<int>(this->_internal_cloud_provider().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.cloud_provider");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_cloud_provider(), target);
  }

  // .kentik.synthetics.v202309.ImplementType agent_impl = 24[json_name = "agentImpl", (.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->agent_impl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      24, this->_internal_agent_impl(), target);
  }

  // repeated string labels = 25[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Agent.labels");
    target = stream->WriteString(25, s, target);
  }

  // .kentik.synthetics.v202309.AgentMetadata metadata = 26[json_name = "metadata", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.Agent)
  return target;
}

size_t Agent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.Agent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string test_ids = 19[json_name = "testIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(test_ids_.size());
  for (int i = 0, n = test_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      test_ids_.Get(i));
  }

  // repeated string labels = 25[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string site_name = 2[json_name = "siteName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_name());
  }

  // string alias = 4[json_name = "alias", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_alias());
  }

  // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string os = 6[json_name = "os", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->os().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string ip = 7[json_name = "ip", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string site_id = 13[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_id());
  }

  // string version = 14[json_name = "version", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string city = 16[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->city().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // string region = 17[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->region().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string country = 18[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->country().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string local_ip = 20[json_name = "localIp", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->local_ip().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_ip());
  }

  // string cloud_region = 22[json_name = "cloudRegion", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cloud_region().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloud_region());
  }

  // string cloud_provider = 23[json_name = "cloudProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cloud_provider().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cloud_provider());
  }

  // .google.protobuf.Timestamp last_authed = 10[json_name = "lastAuthed", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_last_authed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_authed_);
  }

  // .kentik.synthetics.v202309.AgentMetadata metadata = 26[json_name = "metadata", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .kentik.synthetics.v202309.AgentStatus status = 3[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .kentik.synthetics.v202309.IPFamily family = 11[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->family() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_family());
  }

  // double lat = 8[json_name = "lat", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double long = 9[json_name = "long", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->long_() <= 0 && this->long_() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 asn = 12[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  // .kentik.synthetics.v202309.ImplementType agent_impl = 24[json_name = "agentImpl", (.google.api.field_behavior) = OUTPUT_ONLY];
  if (this->agent_impl() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_agent_impl());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Agent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  const Agent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Agent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.Agent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.Agent)
    MergeFrom(*source);
  }
}

void Agent::MergeFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.Agent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  test_ids_.MergeFrom(from.test_ids_);
  labels_.MergeFrom(from.labels_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.site_name().size() > 0) {
    _internal_set_site_name(from._internal_site_name());
  }
  if (from.alias().size() > 0) {
    _internal_set_alias(from._internal_alias());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.os().size() > 0) {
    _internal_set_os(from._internal_os());
  }
  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.site_id().size() > 0) {
    _internal_set_site_id(from._internal_site_id());
  }
  if (from.version().size() > 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.city().size() > 0) {
    _internal_set_city(from._internal_city());
  }
  if (from.region().size() > 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
  if (from.local_ip().size() > 0) {
    _internal_set_local_ip(from._internal_local_ip());
  }
  if (from.cloud_region().size() > 0) {
    _internal_set_cloud_region(from._internal_cloud_region());
  }
  if (from.cloud_provider().size() > 0) {
    _internal_set_cloud_provider(from._internal_cloud_provider());
  }
  if (from.has_last_authed()) {
    _internal_mutable_last_authed()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_last_authed());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::kentik::synthetics::v202309::AgentMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.family() != 0) {
    _internal_set_family(from._internal_family());
  }
  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.long_() <= 0 && from.long_() >= 0)) {
    _internal_set_long_(from._internal_long_());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
  if (from.agent_impl() != 0) {
    _internal_set_agent_impl(from._internal_agent_impl());
  }
}

void Agent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Agent::CopyFrom(const Agent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.Agent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Agent::IsInitialized() const {
  return true;
}

void Agent::InternalSwap(Agent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  test_ids_.InternalSwap(&other->test_ids_);
  labels_.InternalSwap(&other->labels_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_name_.Swap(&other->site_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  alias_.Swap(&other->alias_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.Swap(&other->os_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_id_.Swap(&other->site_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  local_ip_.Swap(&other->local_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloud_region_.Swap(&other->cloud_region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  cloud_provider_.Swap(&other->cloud_provider_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Agent, agent_impl_)
      + sizeof(Agent::agent_impl_)
      - PROTOBUF_FIELD_OFFSET(Agent, last_authed_)>(
          reinterpret_cast<char*>(&last_authed_),
          reinterpret_cast<char*>(&other->last_authed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Agent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentMetadata_IpValue::InitAsDefaultInstance() {
}
class AgentMetadata_IpValue::_Internal {
 public:
};

AgentMetadata_IpValue::AgentMetadata_IpValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.AgentMetadata.IpValue)
}
AgentMetadata_IpValue::AgentMetadata_IpValue(const AgentMetadata_IpValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.AgentMetadata.IpValue)
}

void AgentMetadata_IpValue::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentMetadata_IpValue_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AgentMetadata_IpValue::~AgentMetadata_IpValue() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.AgentMetadata.IpValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentMetadata_IpValue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgentMetadata_IpValue::ArenaDtor(void* object) {
  AgentMetadata_IpValue* _this = reinterpret_cast< AgentMetadata_IpValue* >(object);
  (void)_this;
}
void AgentMetadata_IpValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentMetadata_IpValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentMetadata_IpValue& AgentMetadata_IpValue::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentMetadata_IpValue_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void AgentMetadata_IpValue::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.AgentMetadata.IpValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentMetadata_IpValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1[json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.AgentMetadata.IpValue.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentMetadata_IpValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.AgentMetadata.IpValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1[json_name = "value"];
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.AgentMetadata.IpValue.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.AgentMetadata.IpValue)
  return target;
}

size_t AgentMetadata_IpValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.AgentMetadata.IpValue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1[json_name = "value"];
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentMetadata_IpValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.AgentMetadata.IpValue)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentMetadata_IpValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentMetadata_IpValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.AgentMetadata.IpValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.AgentMetadata.IpValue)
    MergeFrom(*source);
  }
}

void AgentMetadata_IpValue::MergeFrom(const AgentMetadata_IpValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.AgentMetadata.IpValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {
    _internal_set_value(from._internal_value());
  }
}

void AgentMetadata_IpValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.AgentMetadata.IpValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentMetadata_IpValue::CopyFrom(const AgentMetadata_IpValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.AgentMetadata.IpValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentMetadata_IpValue::IsInitialized() const {
  return true;
}

void AgentMetadata_IpValue::InternalSwap(AgentMetadata_IpValue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentMetadata_IpValue::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentMetadata::InitAsDefaultInstance() {
}
class AgentMetadata::_Internal {
 public:
};

AgentMetadata::AgentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  private_ipv4_addresses_(arena),
  public_ipv4_addresses_(arena),
  private_ipv6_addresses_(arena),
  public_ipv6_addresses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.AgentMetadata)
}
AgentMetadata::AgentMetadata(const AgentMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      private_ipv4_addresses_(from.private_ipv4_addresses_),
      public_ipv4_addresses_(from.public_ipv4_addresses_),
      private_ipv6_addresses_(from.private_ipv6_addresses_),
      public_ipv6_addresses_(from.public_ipv6_addresses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.AgentMetadata)
}

void AgentMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentMetadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
}

AgentMetadata::~AgentMetadata() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.AgentMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AgentMetadata::ArenaDtor(void* object) {
  AgentMetadata* _this = reinterpret_cast< AgentMetadata* >(object);
  (void)_this;
}
void AgentMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentMetadata& AgentMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentMetadata_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void AgentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.AgentMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  private_ipv4_addresses_.Clear();
  public_ipv4_addresses_.Clear();
  private_ipv6_addresses_.Clear();
  public_ipv6_addresses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv4_addresses = 1[json_name = "privateIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_private_ipv4_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv4_addresses = 2[json_name = "publicIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_ipv4_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv6_addresses = 3[json_name = "privateIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_private_ipv6_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv6_addresses = 4[json_name = "publicIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_ipv6_addresses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.AgentMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv4_addresses = 1[json_name = "privateIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_private_ipv4_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_private_ipv4_addresses(i), target, stream);
  }

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv4_addresses = 2[json_name = "publicIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_public_ipv4_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_public_ipv4_addresses(i), target, stream);
  }

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv6_addresses = 3[json_name = "privateIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_private_ipv6_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_private_ipv6_addresses(i), target, stream);
  }

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv6_addresses = 4[json_name = "publicIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_public_ipv6_addresses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_public_ipv6_addresses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.AgentMetadata)
  return target;
}

size_t AgentMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.AgentMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv4_addresses = 1[json_name = "privateIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_private_ipv4_addresses_size();
  for (const auto& msg : this->private_ipv4_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv4_addresses = 2[json_name = "publicIpv4Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_public_ipv4_addresses_size();
  for (const auto& msg : this->public_ipv4_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue private_ipv6_addresses = 3[json_name = "privateIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_private_ipv6_addresses_size();
  for (const auto& msg : this->private_ipv6_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .kentik.synthetics.v202309.AgentMetadata.IpValue public_ipv6_addresses = 4[json_name = "publicIpv6Addresses", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_public_ipv6_addresses_size();
  for (const auto& msg : this->public_ipv6_addresses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.AgentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.AgentMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.AgentMetadata)
    MergeFrom(*source);
  }
}

void AgentMetadata::MergeFrom(const AgentMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.AgentMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  private_ipv4_addresses_.MergeFrom(from.private_ipv4_addresses_);
  public_ipv4_addresses_.MergeFrom(from.public_ipv4_addresses_);
  private_ipv6_addresses_.MergeFrom(from.private_ipv6_addresses_);
  public_ipv6_addresses_.MergeFrom(from.public_ipv6_addresses_);
}

void AgentMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.AgentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentMetadata::CopyFrom(const AgentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.AgentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentMetadata::IsInitialized() const {
  return true;
}

void AgentMetadata::InternalSwap(AgentMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  private_ipv4_addresses_.InternalSwap(&other->private_ipv4_addresses_);
  public_ipv4_addresses_.InternalSwap(&other->public_ipv4_addresses_);
  private_ipv6_addresses_.InternalSwap(&other->private_ipv6_addresses_);
  public_ipv6_addresses_.InternalSwap(&other->public_ipv6_addresses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Test::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_Test_default_instance_._instance.get_mutable()->settings_ = const_cast< ::kentik::synthetics::v202309::TestSettings*>(
      ::kentik::synthetics::v202309::TestSettings::internal_default_instance());
  ::kentik::synthetics::v202309::_Test_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202309::_Test_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202309::_Test_default_instance_._instance.get_mutable()->created_by_ = const_cast< ::kentik::core::v202303::UserInfo*>(
      ::kentik::core::v202303::UserInfo::internal_default_instance());
  ::kentik::synthetics::v202309::_Test_default_instance_._instance.get_mutable()->last_updated_by_ = const_cast< ::kentik::core::v202303::UserInfo*>(
      ::kentik::core::v202303::UserInfo::internal_default_instance());
}
class Test::_Internal {
 public:
  static const ::kentik::synthetics::v202309::TestSettings& settings(const Test* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const Test* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const Test* msg);
  static const ::kentik::core::v202303::UserInfo& created_by(const Test* msg);
  static const ::kentik::core::v202303::UserInfo& last_updated_by(const Test* msg);
};

const ::kentik::synthetics::v202309::TestSettings&
Test::_Internal::settings(const Test* msg) {
  return *msg->settings_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Test::_Internal::cdate(const Test* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Test::_Internal::edate(const Test* msg) {
  return *msg->edate_;
}
const ::kentik::core::v202303::UserInfo&
Test::_Internal::created_by(const Test* msg) {
  return *msg->created_by_;
}
const ::kentik::core::v202303::UserInfo&
Test::_Internal::last_updated_by(const Test* msg) {
  return *msg->last_updated_by_;
}
void Test::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void Test::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
void Test::clear_created_by() {
  if (GetArena() == nullptr && created_by_ != nullptr) {
    delete created_by_;
  }
  created_by_ = nullptr;
}
void Test::clear_last_updated_by() {
  if (GetArena() == nullptr && last_updated_by_ != nullptr) {
    delete last_updated_by_;
  }
  last_updated_by_ = nullptr;
}
Test::Test(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.Test)
}
Test::Test(const Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  if (from._internal_has_settings()) {
    settings_ = new ::kentik::synthetics::v202309::TestSettings(*from.settings_);
  } else {
    settings_ = nullptr;
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  if (from._internal_has_created_by()) {
    created_by_ = new ::kentik::core::v202303::UserInfo(*from.created_by_);
  } else {
    created_by_ = nullptr;
  }
  if (from._internal_has_last_updated_by()) {
    last_updated_by_ = new ::kentik::core::v202303::UserInfo(*from.last_updated_by_);
  } else {
    last_updated_by_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.Test)
}

void Test::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&settings_)) + sizeof(status_));
}

Test::~Test() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.Test)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete settings_;
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
  if (this != internal_default_instance()) delete created_by_;
  if (this != internal_default_instance()) delete last_updated_by_;
}

void Test::ArenaDtor(void* object) {
  Test* _this = reinterpret_cast< Test* >(object);
  (void)_this;
}
void Test::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test& Test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Test::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && settings_ != nullptr) {
    delete settings_;
  }
  settings_ = nullptr;
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  if (GetArena() == nullptr && created_by_ != nullptr) {
    delete created_by_;
  }
  created_by_ = nullptr;
  if (GetArena() == nullptr && last_updated_by_ != nullptr) {
    delete last_updated_by_;
  }
  last_updated_by_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Test.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Test.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Test.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.TestStatus status = 5[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kentik::synthetics::v202309::TestStatus>(val));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.TestSettings settings = 6[json_name = "settings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 7[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 8[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.core.v202303.UserInfo created_by = 9[json_name = "createdBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_by(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.core.v202303.UserInfo last_updated_by = 10[json_name = "lastUpdatedBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_updated_by(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string labels = 11[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Test.labels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Test.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Test.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Test.type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type(), target);
  }

  // .kentik.synthetics.v202309.TestStatus status = 5[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // .kentik.synthetics.v202309.TestSettings settings = 6[json_name = "settings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::settings(this), target, stream);
  }

  // .google.protobuf.Timestamp cdate = 7[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 8[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::edate(this), target, stream);
  }

  // .kentik.core.v202303.UserInfo created_by = 9[json_name = "createdBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_created_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::created_by(this), target, stream);
  }

  // .kentik.core.v202303.UserInfo last_updated_by = 10[json_name = "lastUpdatedBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_last_updated_by()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::last_updated_by(this), target, stream);
  }

  // repeated string labels = 11[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Test.labels");
    target = stream->WriteString(11, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.Test)
  return target;
}

size_t Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.Test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string labels = 11[json_name = "labels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .kentik.synthetics.v202309.TestSettings settings = 6[json_name = "settings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *settings_);
  }

  // .google.protobuf.Timestamp cdate = 7[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 8[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .kentik.core.v202303.UserInfo created_by = 9[json_name = "createdBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_created_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_by_);
  }

  // .kentik.core.v202303.UserInfo last_updated_by = 10[json_name = "lastUpdatedBy", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_last_updated_by()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *last_updated_by_);
  }

  // .kentik.synthetics.v202309.TestStatus status = 5[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.Test)
  GOOGLE_DCHECK_NE(&from, this);
  const Test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.Test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.Test)
    MergeFrom(*source);
  }
}

void Test::MergeFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.has_settings()) {
    _internal_mutable_settings()->::kentik::synthetics::v202309::TestSettings::MergeFrom(from._internal_settings());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.has_created_by()) {
    _internal_mutable_created_by()->::kentik::core::v202303::UserInfo::MergeFrom(from._internal_created_by());
  }
  if (from.has_last_updated_by()) {
    _internal_mutable_last_updated_by()->::kentik::core::v202303::UserInfo::MergeFrom(from._internal_last_updated_by());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void Test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test::CopyFrom(const Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test::IsInitialized() const {
  return true;
}

void Test::InternalSwap(Test* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Test, status_)
      + sizeof(Test::status_)
      - PROTOBUF_FIELD_OFFSET(Test, settings_)>(
          reinterpret_cast<char*>(&settings_),
          reinterpret_cast<char*>(&other->settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Test::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestSettings::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.hostname_ = const_cast< ::kentik::synthetics::v202309::HostnameTest*>(
      ::kentik::synthetics::v202309::HostnameTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.ip_ = const_cast< ::kentik::synthetics::v202309::IpTest*>(
      ::kentik::synthetics::v202309::IpTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.agent_ = const_cast< ::kentik::synthetics::v202309::AgentTest*>(
      ::kentik::synthetics::v202309::AgentTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.flow_ = const_cast< ::kentik::synthetics::v202309::FlowTest*>(
      ::kentik::synthetics::v202309::FlowTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.dns_ = const_cast< ::kentik::synthetics::v202309::DnsTest*>(
      ::kentik::synthetics::v202309::DnsTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.url_ = const_cast< ::kentik::synthetics::v202309::UrlTest*>(
      ::kentik::synthetics::v202309::UrlTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.network_grid_ = const_cast< ::kentik::synthetics::v202309::IpTest*>(
      ::kentik::synthetics::v202309::IpTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.page_load_ = const_cast< ::kentik::synthetics::v202309::PageLoadTest*>(
      ::kentik::synthetics::v202309::PageLoadTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.dns_grid_ = const_cast< ::kentik::synthetics::v202309::DnsTest*>(
      ::kentik::synthetics::v202309::DnsTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_.network_mesh_ = const_cast< ::kentik::synthetics::v202309::NetworkMeshTest*>(
      ::kentik::synthetics::v202309::NetworkMeshTest::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_._instance.get_mutable()->health_settings_ = const_cast< ::kentik::synthetics::v202309::HealthSettings*>(
      ::kentik::synthetics::v202309::HealthSettings::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_._instance.get_mutable()->ping_ = const_cast< ::kentik::synthetics::v202309::TestPingSettings*>(
      ::kentik::synthetics::v202309::TestPingSettings::internal_default_instance());
  ::kentik::synthetics::v202309::_TestSettings_default_instance_._instance.get_mutable()->trace_ = const_cast< ::kentik::synthetics::v202309::TestTraceSettings*>(
      ::kentik::synthetics::v202309::TestTraceSettings::internal_default_instance());
}
class TestSettings::_Internal {
 public:
  static const ::kentik::synthetics::v202309::HostnameTest& hostname(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::IpTest& ip(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::AgentTest& agent(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::FlowTest& flow(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::DnsTest& dns(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::UrlTest& url(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::IpTest& network_grid(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::PageLoadTest& page_load(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::DnsTest& dns_grid(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::NetworkMeshTest& network_mesh(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::HealthSettings& health_settings(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::TestPingSettings& ping(const TestSettings* msg);
  static const ::kentik::synthetics::v202309::TestTraceSettings& trace(const TestSettings* msg);
};

const ::kentik::synthetics::v202309::HostnameTest&
TestSettings::_Internal::hostname(const TestSettings* msg) {
  return *msg->definition_.hostname_;
}
const ::kentik::synthetics::v202309::IpTest&
TestSettings::_Internal::ip(const TestSettings* msg) {
  return *msg->definition_.ip_;
}
const ::kentik::synthetics::v202309::AgentTest&
TestSettings::_Internal::agent(const TestSettings* msg) {
  return *msg->definition_.agent_;
}
const ::kentik::synthetics::v202309::FlowTest&
TestSettings::_Internal::flow(const TestSettings* msg) {
  return *msg->definition_.flow_;
}
const ::kentik::synthetics::v202309::DnsTest&
TestSettings::_Internal::dns(const TestSettings* msg) {
  return *msg->definition_.dns_;
}
const ::kentik::synthetics::v202309::UrlTest&
TestSettings::_Internal::url(const TestSettings* msg) {
  return *msg->definition_.url_;
}
const ::kentik::synthetics::v202309::IpTest&
TestSettings::_Internal::network_grid(const TestSettings* msg) {
  return *msg->definition_.network_grid_;
}
const ::kentik::synthetics::v202309::PageLoadTest&
TestSettings::_Internal::page_load(const TestSettings* msg) {
  return *msg->definition_.page_load_;
}
const ::kentik::synthetics::v202309::DnsTest&
TestSettings::_Internal::dns_grid(const TestSettings* msg) {
  return *msg->definition_.dns_grid_;
}
const ::kentik::synthetics::v202309::NetworkMeshTest&
TestSettings::_Internal::network_mesh(const TestSettings* msg) {
  return *msg->definition_.network_mesh_;
}
const ::kentik::synthetics::v202309::HealthSettings&
TestSettings::_Internal::health_settings(const TestSettings* msg) {
  return *msg->health_settings_;
}
const ::kentik::synthetics::v202309::TestPingSettings&
TestSettings::_Internal::ping(const TestSettings* msg) {
  return *msg->ping_;
}
const ::kentik::synthetics::v202309::TestTraceSettings&
TestSettings::_Internal::trace(const TestSettings* msg) {
  return *msg->trace_;
}
void TestSettings::set_allocated_hostname(::kentik::synthetics::v202309::HostnameTest* hostname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (hostname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hostname);
    if (message_arena != submessage_arena) {
      hostname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hostname, submessage_arena);
    }
    set_has_hostname();
    definition_.hostname_ = hostname;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.hostname)
}
void TestSettings::set_allocated_ip(::kentik::synthetics::v202309::IpTest* ip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (ip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ip);
    if (message_arena != submessage_arena) {
      ip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ip, submessage_arena);
    }
    set_has_ip();
    definition_.ip_ = ip;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.ip)
}
void TestSettings::set_allocated_agent(::kentik::synthetics::v202309::AgentTest* agent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (agent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(agent);
    if (message_arena != submessage_arena) {
      agent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, agent, submessage_arena);
    }
    set_has_agent();
    definition_.agent_ = agent;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.agent)
}
void TestSettings::set_allocated_flow(::kentik::synthetics::v202309::FlowTest* flow) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (flow) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(flow);
    if (message_arena != submessage_arena) {
      flow = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, flow, submessage_arena);
    }
    set_has_flow();
    definition_.flow_ = flow;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.flow)
}
void TestSettings::set_allocated_dns(::kentik::synthetics::v202309::DnsTest* dns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (dns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dns);
    if (message_arena != submessage_arena) {
      dns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns, submessage_arena);
    }
    set_has_dns();
    definition_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.dns)
}
void TestSettings::set_allocated_url(::kentik::synthetics::v202309::UrlTest* url) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (url) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(url);
    if (message_arena != submessage_arena) {
      url = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, url, submessage_arena);
    }
    set_has_url();
    definition_.url_ = url;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.url)
}
void TestSettings::set_allocated_network_grid(::kentik::synthetics::v202309::IpTest* network_grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (network_grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network_grid);
    if (message_arena != submessage_arena) {
      network_grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_grid, submessage_arena);
    }
    set_has_network_grid();
    definition_.network_grid_ = network_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.network_grid)
}
void TestSettings::set_allocated_page_load(::kentik::synthetics::v202309::PageLoadTest* page_load) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (page_load) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(page_load);
    if (message_arena != submessage_arena) {
      page_load = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, page_load, submessage_arena);
    }
    set_has_page_load();
    definition_.page_load_ = page_load;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.page_load)
}
void TestSettings::set_allocated_dns_grid(::kentik::synthetics::v202309::DnsTest* dns_grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (dns_grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dns_grid);
    if (message_arena != submessage_arena) {
      dns_grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns_grid, submessage_arena);
    }
    set_has_dns_grid();
    definition_.dns_grid_ = dns_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.dns_grid)
}
void TestSettings::set_allocated_network_mesh(::kentik::synthetics::v202309::NetworkMeshTest* network_mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_definition();
  if (network_mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(network_mesh);
    if (message_arena != submessage_arena) {
      network_mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_mesh, submessage_arena);
    }
    set_has_network_mesh();
    definition_.network_mesh_ = network_mesh;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TestSettings.network_mesh)
}
TestSettings::TestSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_ids_(arena),
  tasks_(arena),
  notification_channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.TestSettings)
}
TestSettings::TestSettings(const TestSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_ids_(from.agent_ids_),
      tasks_(from.tasks_),
      notification_channels_(from.notification_channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_notes().empty()) {
    notes_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_notes(),
      GetArena());
  }
  if (from._internal_has_health_settings()) {
    health_settings_ = new ::kentik::synthetics::v202309::HealthSettings(*from.health_settings_);
  } else {
    health_settings_ = nullptr;
  }
  if (from._internal_has_ping()) {
    ping_ = new ::kentik::synthetics::v202309::TestPingSettings(*from.ping_);
  } else {
    ping_ = nullptr;
  }
  if (from._internal_has_trace()) {
    trace_ = new ::kentik::synthetics::v202309::TestTraceSettings(*from.trace_);
  } else {
    trace_ = nullptr;
  }
  ::memcpy(&period_, &from.period_,
    static_cast<size_t>(reinterpret_cast<char*>(&family_) -
    reinterpret_cast<char*>(&period_)) + sizeof(family_));
  clear_has_definition();
  switch (from.definition_case()) {
    case kHostname: {
      _internal_mutable_hostname()->::kentik::synthetics::v202309::HostnameTest::MergeFrom(from._internal_hostname());
      break;
    }
    case kIp: {
      _internal_mutable_ip()->::kentik::synthetics::v202309::IpTest::MergeFrom(from._internal_ip());
      break;
    }
    case kAgent: {
      _internal_mutable_agent()->::kentik::synthetics::v202309::AgentTest::MergeFrom(from._internal_agent());
      break;
    }
    case kFlow: {
      _internal_mutable_flow()->::kentik::synthetics::v202309::FlowTest::MergeFrom(from._internal_flow());
      break;
    }
    case kDns: {
      _internal_mutable_dns()->::kentik::synthetics::v202309::DnsTest::MergeFrom(from._internal_dns());
      break;
    }
    case kUrl: {
      _internal_mutable_url()->::kentik::synthetics::v202309::UrlTest::MergeFrom(from._internal_url());
      break;
    }
    case kNetworkGrid: {
      _internal_mutable_network_grid()->::kentik::synthetics::v202309::IpTest::MergeFrom(from._internal_network_grid());
      break;
    }
    case kPageLoad: {
      _internal_mutable_page_load()->::kentik::synthetics::v202309::PageLoadTest::MergeFrom(from._internal_page_load());
      break;
    }
    case kDnsGrid: {
      _internal_mutable_dns_grid()->::kentik::synthetics::v202309::DnsTest::MergeFrom(from._internal_dns_grid());
      break;
    }
    case kNetworkMesh: {
      _internal_mutable_network_mesh()->::kentik::synthetics::v202309::NetworkMeshTest::MergeFrom(from._internal_network_mesh());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.TestSettings)
}

void TestSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  notes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&health_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&health_settings_)) + sizeof(family_));
  clear_has_definition();
}

TestSettings::~TestSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.TestSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  notes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete health_settings_;
  if (this != internal_default_instance()) delete ping_;
  if (this != internal_default_instance()) delete trace_;
  if (has_definition()) {
    clear_definition();
  }
}

void TestSettings::ArenaDtor(void* object) {
  TestSettings* _this = reinterpret_cast< TestSettings* >(object);
  (void)_this;
}
void TestSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestSettings& TestSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestSettings::clear_definition() {
// @@protoc_insertion_point(one_of_clear_start:kentik.synthetics.v202309.TestSettings)
  switch (definition_case()) {
    case kHostname: {
      if (GetArena() == nullptr) {
        delete definition_.hostname_;
      }
      break;
    }
    case kIp: {
      if (GetArena() == nullptr) {
        delete definition_.ip_;
      }
      break;
    }
    case kAgent: {
      if (GetArena() == nullptr) {
        delete definition_.agent_;
      }
      break;
    }
    case kFlow: {
      if (GetArena() == nullptr) {
        delete definition_.flow_;
      }
      break;
    }
    case kDns: {
      if (GetArena() == nullptr) {
        delete definition_.dns_;
      }
      break;
    }
    case kUrl: {
      if (GetArena() == nullptr) {
        delete definition_.url_;
      }
      break;
    }
    case kNetworkGrid: {
      if (GetArena() == nullptr) {
        delete definition_.network_grid_;
      }
      break;
    }
    case kPageLoad: {
      if (GetArena() == nullptr) {
        delete definition_.page_load_;
      }
      break;
    }
    case kDnsGrid: {
      if (GetArena() == nullptr) {
        delete definition_.dns_grid_;
      }
      break;
    }
    case kNetworkMesh: {
      if (GetArena() == nullptr) {
        delete definition_.network_mesh_;
      }
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEFINITION_NOT_SET;
}


void TestSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.TestSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_ids_.Clear();
  tasks_.Clear();
  notification_channels_.Clear();
  notes_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && health_settings_ != nullptr) {
    delete health_settings_;
  }
  health_settings_ = nullptr;
  if (GetArena() == nullptr && ping_ != nullptr) {
    delete ping_;
  }
  ping_ = nullptr;
  if (GetArena() == nullptr && trace_ != nullptr) {
    delete trace_;
  }
  trace_ = nullptr;
  ::memset(&period_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&family_) -
      reinterpret_cast<char*>(&period_)) + sizeof(family_));
  clear_definition();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.HostnameTest hostname = 1[json_name = "hostname"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hostname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.IpTest ip = 2[json_name = "ip"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.AgentTest agent = 3[json_name = "agent"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.FlowTest flow = 4[json_name = "flow"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_flow(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.DnsTest dns = 5[json_name = "dns"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.UrlTest url = 6[json_name = "url"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.IpTest network_grid = 7[json_name = "networkGrid"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.PageLoadTest page_load = 8[json_name = "pageLoad"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.DnsTest dns_grid = 9[json_name = "dnsGrid"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string agent_ids = 10[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agent_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TestSettings.agent_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string tasks = 11[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tasks();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TestSettings.tasks"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.HealthSettings health_settings = 12[json_name = "healthSettings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_health_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.TestPingSettings ping = 13[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.TestTraceSettings trace = 14[json_name = "trace", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_trace(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 period = 15[json_name = "period", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          period_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.IPFamily family = 16[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_family(static_cast<::kentik::synthetics::v202309::IPFamily>(val));
        } else goto handle_unusual;
        continue;
      // repeated string notification_channels = 17[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_notification_channels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TestSettings.notification_channels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.NetworkMeshTest network_mesh = 18[json_name = "networkMesh"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string notes = 19[json_name = "notes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_notes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TestSettings.notes"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.TestSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.HostnameTest hostname = 1[json_name = "hostname"];
  if (_internal_has_hostname()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::hostname(this), target, stream);
  }

  // .kentik.synthetics.v202309.IpTest ip = 2[json_name = "ip"];
  if (_internal_has_ip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ip(this), target, stream);
  }

  // .kentik.synthetics.v202309.AgentTest agent = 3[json_name = "agent"];
  if (_internal_has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::agent(this), target, stream);
  }

  // .kentik.synthetics.v202309.FlowTest flow = 4[json_name = "flow"];
  if (_internal_has_flow()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::flow(this), target, stream);
  }

  // .kentik.synthetics.v202309.DnsTest dns = 5[json_name = "dns"];
  if (_internal_has_dns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::dns(this), target, stream);
  }

  // .kentik.synthetics.v202309.UrlTest url = 6[json_name = "url"];
  if (_internal_has_url()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::url(this), target, stream);
  }

  // .kentik.synthetics.v202309.IpTest network_grid = 7[json_name = "networkGrid"];
  if (_internal_has_network_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::network_grid(this), target, stream);
  }

  // .kentik.synthetics.v202309.PageLoadTest page_load = 8[json_name = "pageLoad"];
  if (_internal_has_page_load()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::page_load(this), target, stream);
  }

  // .kentik.synthetics.v202309.DnsTest dns_grid = 9[json_name = "dnsGrid"];
  if (_internal_has_dns_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::dns_grid(this), target, stream);
  }

  // repeated string agent_ids = 10[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_agent_ids_size(); i < n; i++) {
    const auto& s = this->_internal_agent_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TestSettings.agent_ids");
    target = stream->WriteString(10, s, target);
  }

  // repeated string tasks = 11[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_tasks_size(); i < n; i++) {
    const auto& s = this->_internal_tasks(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TestSettings.tasks");
    target = stream->WriteString(11, s, target);
  }

  // .kentik.synthetics.v202309.HealthSettings health_settings = 12[json_name = "healthSettings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_health_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::health_settings(this), target, stream);
  }

  // .kentik.synthetics.v202309.TestPingSettings ping = 13[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::ping(this), target, stream);
  }

  // .kentik.synthetics.v202309.TestTraceSettings trace = 14[json_name = "trace", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_trace()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::trace(this), target, stream);
  }

  // uint32 period = 15[json_name = "period", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->period() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_period(), target);
  }

  // .kentik.synthetics.v202309.IPFamily family = 16[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->family() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_family(), target);
  }

  // repeated string notification_channels = 17[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_notification_channels_size(); i < n; i++) {
    const auto& s = this->_internal_notification_channels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TestSettings.notification_channels");
    target = stream->WriteString(17, s, target);
  }

  // .kentik.synthetics.v202309.NetworkMeshTest network_mesh = 18[json_name = "networkMesh"];
  if (_internal_has_network_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::network_mesh(this), target, stream);
  }

  // string notes = 19[json_name = "notes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->notes().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TestSettings.notes");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.TestSettings)
  return target;
}

size_t TestSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.TestSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string agent_ids = 10[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(agent_ids_.size());
  for (int i = 0, n = agent_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      agent_ids_.Get(i));
  }

  // repeated string tasks = 11[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(tasks_.size());
  for (int i = 0, n = tasks_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      tasks_.Get(i));
  }

  // repeated string notification_channels = 17[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notification_channels_.size());
  for (int i = 0, n = notification_channels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notification_channels_.Get(i));
  }

  // string notes = 19[json_name = "notes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->notes().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  // .kentik.synthetics.v202309.HealthSettings health_settings = 12[json_name = "healthSettings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_health_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *health_settings_);
  }

  // .kentik.synthetics.v202309.TestPingSettings ping = 13[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_ping()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ping_);
  }

  // .kentik.synthetics.v202309.TestTraceSettings trace = 14[json_name = "trace", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_trace()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trace_);
  }

  // uint32 period = 15[json_name = "period", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->period() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_period());
  }

  // .kentik.synthetics.v202309.IPFamily family = 16[json_name = "family", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->family() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_family());
  }

  switch (definition_case()) {
    // .kentik.synthetics.v202309.HostnameTest hostname = 1[json_name = "hostname"];
    case kHostname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.hostname_);
      break;
    }
    // .kentik.synthetics.v202309.IpTest ip = 2[json_name = "ip"];
    case kIp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.ip_);
      break;
    }
    // .kentik.synthetics.v202309.AgentTest agent = 3[json_name = "agent"];
    case kAgent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.agent_);
      break;
    }
    // .kentik.synthetics.v202309.FlowTest flow = 4[json_name = "flow"];
    case kFlow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.flow_);
      break;
    }
    // .kentik.synthetics.v202309.DnsTest dns = 5[json_name = "dns"];
    case kDns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.dns_);
      break;
    }
    // .kentik.synthetics.v202309.UrlTest url = 6[json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.url_);
      break;
    }
    // .kentik.synthetics.v202309.IpTest network_grid = 7[json_name = "networkGrid"];
    case kNetworkGrid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.network_grid_);
      break;
    }
    // .kentik.synthetics.v202309.PageLoadTest page_load = 8[json_name = "pageLoad"];
    case kPageLoad: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.page_load_);
      break;
    }
    // .kentik.synthetics.v202309.DnsTest dns_grid = 9[json_name = "dnsGrid"];
    case kDnsGrid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.dns_grid_);
      break;
    }
    // .kentik.synthetics.v202309.NetworkMeshTest network_mesh = 18[json_name = "networkMesh"];
    case kNetworkMesh: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *definition_.network_mesh_);
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.TestSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TestSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.TestSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.TestSettings)
    MergeFrom(*source);
  }
}

void TestSettings::MergeFrom(const TestSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.TestSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_ids_.MergeFrom(from.agent_ids_);
  tasks_.MergeFrom(from.tasks_);
  notification_channels_.MergeFrom(from.notification_channels_);
  if (from.notes().size() > 0) {
    _internal_set_notes(from._internal_notes());
  }
  if (from.has_health_settings()) {
    _internal_mutable_health_settings()->::kentik::synthetics::v202309::HealthSettings::MergeFrom(from._internal_health_settings());
  }
  if (from.has_ping()) {
    _internal_mutable_ping()->::kentik::synthetics::v202309::TestPingSettings::MergeFrom(from._internal_ping());
  }
  if (from.has_trace()) {
    _internal_mutable_trace()->::kentik::synthetics::v202309::TestTraceSettings::MergeFrom(from._internal_trace());
  }
  if (from.period() != 0) {
    _internal_set_period(from._internal_period());
  }
  if (from.family() != 0) {
    _internal_set_family(from._internal_family());
  }
  switch (from.definition_case()) {
    case kHostname: {
      _internal_mutable_hostname()->::kentik::synthetics::v202309::HostnameTest::MergeFrom(from._internal_hostname());
      break;
    }
    case kIp: {
      _internal_mutable_ip()->::kentik::synthetics::v202309::IpTest::MergeFrom(from._internal_ip());
      break;
    }
    case kAgent: {
      _internal_mutable_agent()->::kentik::synthetics::v202309::AgentTest::MergeFrom(from._internal_agent());
      break;
    }
    case kFlow: {
      _internal_mutable_flow()->::kentik::synthetics::v202309::FlowTest::MergeFrom(from._internal_flow());
      break;
    }
    case kDns: {
      _internal_mutable_dns()->::kentik::synthetics::v202309::DnsTest::MergeFrom(from._internal_dns());
      break;
    }
    case kUrl: {
      _internal_mutable_url()->::kentik::synthetics::v202309::UrlTest::MergeFrom(from._internal_url());
      break;
    }
    case kNetworkGrid: {
      _internal_mutable_network_grid()->::kentik::synthetics::v202309::IpTest::MergeFrom(from._internal_network_grid());
      break;
    }
    case kPageLoad: {
      _internal_mutable_page_load()->::kentik::synthetics::v202309::PageLoadTest::MergeFrom(from._internal_page_load());
      break;
    }
    case kDnsGrid: {
      _internal_mutable_dns_grid()->::kentik::synthetics::v202309::DnsTest::MergeFrom(from._internal_dns_grid());
      break;
    }
    case kNetworkMesh: {
      _internal_mutable_network_mesh()->::kentik::synthetics::v202309::NetworkMeshTest::MergeFrom(from._internal_network_mesh());
      break;
    }
    case DEFINITION_NOT_SET: {
      break;
    }
  }
}

void TestSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.TestSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestSettings::CopyFrom(const TestSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.TestSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestSettings::IsInitialized() const {
  return true;
}

void TestSettings::InternalSwap(TestSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_ids_.InternalSwap(&other->agent_ids_);
  tasks_.InternalSwap(&other->tasks_);
  notification_channels_.InternalSwap(&other->notification_channels_);
  notes_.Swap(&other->notes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestSettings, family_)
      + sizeof(TestSettings::family_)
      - PROTOBUF_FIELD_OFFSET(TestSettings, health_settings_)>(
          reinterpret_cast<char*>(&health_settings_),
          reinterpret_cast<char*>(&other->health_settings_));
  swap(definition_, other->definition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestPingSettings::InitAsDefaultInstance() {
}
class TestPingSettings::_Internal {
 public:
};

TestPingSettings::TestPingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.TestPingSettings)
}
TestPingSettings::TestPingSettings(const TestPingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol(),
      GetArena());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&dscp_) -
    reinterpret_cast<char*>(&count_)) + sizeof(dscp_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.TestPingSettings)
}

void TestPingSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestPingSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dscp_) -
      reinterpret_cast<char*>(&count_)) + sizeof(dscp_));
}

TestPingSettings::~TestPingSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.TestPingSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestPingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestPingSettings::ArenaDtor(void* object) {
  TestPingSettings* _this = reinterpret_cast< TestPingSettings* >(object);
  (void)_this;
}
void TestPingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestPingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestPingSettings& TestPingSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestPingSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestPingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.TestPingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dscp_) -
      reinterpret_cast<char*>(&count_)) + sizeof(dscp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestPingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TestPingSettings.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float delay = 5[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 dscp = 6[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          dscp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestPingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.TestPingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TestPingSettings.protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocol(), target);
  }

  // uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timeout(), target);
  }

  // float delay = 5[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_delay(), target);
  }

  // uint32 dscp = 6[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dscp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_dscp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.TestPingSettings)
  return target;
}

size_t TestPingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.TestPingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  // float delay = 5[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 dscp = 6[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dscp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dscp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestPingSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.TestPingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TestPingSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestPingSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.TestPingSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.TestPingSettings)
    MergeFrom(*source);
  }
}

void TestPingSettings::MergeFrom(const TestPingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.TestPingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (!(from.delay() <= 0 && from.delay() >= 0)) {
    _internal_set_delay(from._internal_delay());
  }
  if (from.dscp() != 0) {
    _internal_set_dscp(from._internal_dscp());
  }
}

void TestPingSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.TestPingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestPingSettings::CopyFrom(const TestPingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.TestPingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestPingSettings::IsInitialized() const {
  return true;
}

void TestPingSettings::InternalSwap(TestPingSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestPingSettings, dscp_)
      + sizeof(TestPingSettings::dscp_)
      - PROTOBUF_FIELD_OFFSET(TestPingSettings, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestPingSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestTraceSettings::InitAsDefaultInstance() {
}
class TestTraceSettings::_Internal {
 public:
};

TestTraceSettings::TestTraceSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.TestTraceSettings)
}
TestTraceSettings::TestTraceSettings(const TestTraceSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_protocol(),
      GetArena());
  }
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&dscp_) -
    reinterpret_cast<char*>(&count_)) + sizeof(dscp_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.TestTraceSettings)
}

void TestTraceSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dscp_) -
      reinterpret_cast<char*>(&count_)) + sizeof(dscp_));
}

TestTraceSettings::~TestTraceSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.TestTraceSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestTraceSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TestTraceSettings::ArenaDtor(void* object) {
  TestTraceSettings* _this = reinterpret_cast< TestTraceSettings* >(object);
  (void)_this;
}
void TestTraceSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestTraceSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestTraceSettings& TestTraceSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestTraceSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestTraceSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.TestTraceSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  protocol_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dscp_) -
      reinterpret_cast<char*>(&count_)) + sizeof(dscp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestTraceSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TestTraceSettings.protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 limit = 5[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float delay = 6[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 dscp = 7[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          dscp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestTraceSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.TestTraceSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  // string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TestTraceSettings.protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocol(), target);
  }

  // uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_timeout(), target);
  }

  // uint32 limit = 5[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_limit(), target);
  }

  // float delay = 6[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_delay(), target);
  }

  // uint32 dscp = 7[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dscp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_dscp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.TestTraceSettings)
  return target;
}

size_t TestTraceSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.TestTraceSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string protocol = 2[json_name = "protocol", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // uint32 count = 1[json_name = "count", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  // uint32 port = 3[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  // uint32 timeout = 4[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  // uint32 limit = 5[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->limit() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_limit());
  }

  // float delay = 6[json_name = "delay", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->delay() <= 0 && this->delay() >= 0)) {
    total_size += 1 + 4;
  }

  // uint32 dscp = 7[json_name = "dscp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dscp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dscp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestTraceSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.TestTraceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const TestTraceSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestTraceSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.TestTraceSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.TestTraceSettings)
    MergeFrom(*source);
  }
}

void TestTraceSettings::MergeFrom(const TestTraceSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.TestTraceSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol().size() > 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.limit() != 0) {
    _internal_set_limit(from._internal_limit());
  }
  if (!(from.delay() <= 0 && from.delay() >= 0)) {
    _internal_set_delay(from._internal_delay());
  }
  if (from.dscp() != 0) {
    _internal_set_dscp(from._internal_dscp());
  }
}

void TestTraceSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.TestTraceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestTraceSettings::CopyFrom(const TestTraceSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.TestTraceSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestTraceSettings::IsInitialized() const {
  return true;
}

void TestTraceSettings::InternalSwap(TestTraceSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestTraceSettings, dscp_)
      + sizeof(TestTraceSettings::dscp_)
      - PROTOBUF_FIELD_OFFSET(TestTraceSettings, count_)>(
          reinterpret_cast<char*>(&count_),
          reinterpret_cast<char*>(&other->count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestTraceSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ActivationSettings::InitAsDefaultInstance() {
}
class ActivationSettings::_Internal {
 public:
};

ActivationSettings::ActivationSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.ActivationSettings)
}
ActivationSettings::ActivationSettings(const ActivationSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  grace_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_grace_period().empty()) {
    grace_period_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_grace_period(),
      GetArena());
  }
  time_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_unit().empty()) {
    time_unit_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time_unit(),
      GetArena());
  }
  time_window_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_window().empty()) {
    time_window_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time_window(),
      GetArena());
  }
  times_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_times().empty()) {
    times_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_times(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.ActivationSettings)
}

void ActivationSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActivationSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  grace_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_unit_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_window_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  times_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ActivationSettings::~ActivationSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.ActivationSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActivationSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  grace_period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_unit_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_window_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  times_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivationSettings::ArenaDtor(void* object) {
  ActivationSettings* _this = reinterpret_cast< ActivationSettings* >(object);
  (void)_this;
}
void ActivationSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActivationSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActivationSettings& ActivationSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActivationSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ActivationSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.ActivationSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  grace_period_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_unit_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_window_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  times_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivationSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string grace_period = 1[json_name = "gracePeriod", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_grace_period();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.ActivationSettings.grace_period"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_unit = 2[json_name = "timeUnit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_time_unit();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.ActivationSettings.time_unit"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_window = 3[json_name = "timeWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time_window();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.ActivationSettings.time_window"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string times = 4[json_name = "times", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_times();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.ActivationSettings.times"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActivationSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.ActivationSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string grace_period = 1[json_name = "gracePeriod", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->grace_period().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_grace_period().data(), static_cast<int>(this->_internal_grace_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.ActivationSettings.grace_period");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_grace_period(), target);
  }

  // string time_unit = 2[json_name = "timeUnit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->time_unit().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_unit().data(), static_cast<int>(this->_internal_time_unit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.ActivationSettings.time_unit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_time_unit(), target);
  }

  // string time_window = 3[json_name = "timeWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->time_window().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_window().data(), static_cast<int>(this->_internal_time_window().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.ActivationSettings.time_window");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_window(), target);
  }

  // string times = 4[json_name = "times", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->times().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_times().data(), static_cast<int>(this->_internal_times().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.ActivationSettings.times");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_times(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.ActivationSettings)
  return target;
}

size_t ActivationSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.ActivationSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string grace_period = 1[json_name = "gracePeriod", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->grace_period().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_grace_period());
  }

  // string time_unit = 2[json_name = "timeUnit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->time_unit().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_unit());
  }

  // string time_window = 3[json_name = "timeWindow", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->time_window().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_window());
  }

  // string times = 4[json_name = "times", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->times().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_times());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActivationSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.ActivationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const ActivationSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActivationSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.ActivationSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.ActivationSettings)
    MergeFrom(*source);
  }
}

void ActivationSettings::MergeFrom(const ActivationSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.ActivationSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.grace_period().size() > 0) {
    _internal_set_grace_period(from._internal_grace_period());
  }
  if (from.time_unit().size() > 0) {
    _internal_set_time_unit(from._internal_time_unit());
  }
  if (from.time_window().size() > 0) {
    _internal_set_time_window(from._internal_time_window());
  }
  if (from.times().size() > 0) {
    _internal_set_times(from._internal_times());
  }
}

void ActivationSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.ActivationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivationSettings::CopyFrom(const ActivationSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.ActivationSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivationSettings::IsInitialized() const {
  return true;
}

void ActivationSettings::InternalSwap(ActivationSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  grace_period_.Swap(&other->grace_period_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_unit_.Swap(&other->time_unit_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_window_.Swap(&other->time_window_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  times_.Swap(&other->times_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivationSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HealthSettings::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_HealthSettings_default_instance_._instance.get_mutable()->activation_ = const_cast< ::kentik::synthetics::v202309::ActivationSettings*>(
      ::kentik::synthetics::v202309::ActivationSettings::internal_default_instance());
}
class HealthSettings::_Internal {
 public:
  static const ::kentik::synthetics::v202309::ActivationSettings& activation(const HealthSettings* msg);
};

const ::kentik::synthetics::v202309::ActivationSettings&
HealthSettings::_Internal::activation(const HealthSettings* msg) {
  return *msg->activation_;
}
HealthSettings::HealthSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  http_valid_codes_(arena),
  dns_valid_codes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.HealthSettings)
}
HealthSettings::HealthSettings(const HealthSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      http_valid_codes_(from.http_valid_codes_),
      dns_valid_codes_(from.dns_valid_codes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dns_valid_ips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dns_valid_ips().empty()) {
    dns_valid_ips_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dns_valid_ips(),
      GetArena());
  }
  if (from._internal_has_activation()) {
    activation_ = new ::kentik::synthetics::v202309::ActivationSettings(*from.activation_);
  } else {
    activation_ = nullptr;
  }
  ::memcpy(&latency_critical_, &from.latency_critical_,
    static_cast<size_t>(reinterpret_cast<char*>(&per_agent_alerting_) -
    reinterpret_cast<char*>(&latency_critical_)) + sizeof(per_agent_alerting_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.HealthSettings)
}

void HealthSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HealthSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  dns_valid_ips_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&activation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_agent_alerting_) -
      reinterpret_cast<char*>(&activation_)) + sizeof(per_agent_alerting_));
}

HealthSettings::~HealthSettings() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.HealthSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HealthSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  dns_valid_ips_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete activation_;
}

void HealthSettings::ArenaDtor(void* object) {
  HealthSettings* _this = reinterpret_cast< HealthSettings* >(object);
  (void)_this;
}
void HealthSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HealthSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HealthSettings& HealthSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HealthSettings_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HealthSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.HealthSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  http_valid_codes_.Clear();
  dns_valid_codes_.Clear();
  dns_valid_ips_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && activation_ != nullptr) {
    delete activation_;
  }
  activation_ = nullptr;
  ::memset(&latency_critical_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&per_agent_alerting_) -
      reinterpret_cast<char*>(&latency_critical_)) + sizeof(per_agent_alerting_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HealthSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float latency_critical = 1[json_name = "latencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          latency_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latency_warning = 2[json_name = "latencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          latency_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float packet_loss_critical = 3[json_name = "packetLossCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          packet_loss_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float packet_loss_warning = 4[json_name = "packetLossWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          packet_loss_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jitter_critical = 5[json_name = "jitterCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          jitter_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jitter_warning = 6[json_name = "jitterWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          jitter_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float http_latency_critical = 7[json_name = "httpLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          http_latency_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float http_latency_warning = 8[json_name = "httpLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          http_latency_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_http_valid_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72) {
          _internal_add_http_valid_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_dns_valid_codes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80) {
          _internal_add_dns_valid_codes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float latency_critical_stddev = 11[json_name = "latencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          latency_critical_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latency_warning_stddev = 12[json_name = "latencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          latency_warning_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          jitter_critical_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float jitter_warning_stddev = 14[json_name = "jitterWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          jitter_warning_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          http_latency_critical_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          http_latency_warning_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // uint32 unhealthy_subtest_threshold = 17[json_name = "unhealthySubtestThreshold", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          unhealthy_subtest_threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.ActivationSettings activation = 18[json_name = "activation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cert_expiry_warning = 19[json_name = "certExpiryWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          cert_expiry_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 cert_expiry_critical = 20[json_name = "certExpiryCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          cert_expiry_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dns_valid_ips = 21[json_name = "dnsValidIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_dns_valid_ips();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.HealthSettings.dns_valid_ips"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float dns_latency_critical = 22[json_name = "dnsLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          dns_latency_critical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dns_latency_warning = 23[json_name = "dnsLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          dns_latency_warning_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dns_latency_critical_stddev = 24[json_name = "dnsLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          dns_latency_critical_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dns_latency_warning_stddev = 25[json_name = "dnsLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 205)) {
          dns_latency_warning_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool per_agent_alerting = 26[json_name = "perAgentAlerting", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          per_agent_alerting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HealthSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.HealthSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float latency_critical = 1[json_name = "latencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latency_critical() <= 0 && this->latency_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_latency_critical(), target);
  }

  // float latency_warning = 2[json_name = "latencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latency_warning() <= 0 && this->latency_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latency_warning(), target);
  }

  // float packet_loss_critical = 3[json_name = "packetLossCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->packet_loss_critical() <= 0 && this->packet_loss_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_packet_loss_critical(), target);
  }

  // float packet_loss_warning = 4[json_name = "packetLossWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->packet_loss_warning() <= 0 && this->packet_loss_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_packet_loss_warning(), target);
  }

  // float jitter_critical = 5[json_name = "jitterCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->jitter_critical() <= 0 && this->jitter_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_jitter_critical(), target);
  }

  // float jitter_warning = 6[json_name = "jitterWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->jitter_warning() <= 0 && this->jitter_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_jitter_warning(), target);
  }

  // float http_latency_critical = 7[json_name = "httpLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->http_latency_critical() <= 0 && this->http_latency_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_http_latency_critical(), target);
  }

  // float http_latency_warning = 8[json_name = "httpLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->http_latency_warning() <= 0 && this->http_latency_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_http_latency_warning(), target);
  }

  // repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    int byte_size = _http_valid_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          9, _internal_http_valid_codes(), byte_size, target);
    }
  }

  // repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    int byte_size = _dns_valid_codes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          10, _internal_dns_valid_codes(), byte_size, target);
    }
  }

  // float latency_critical_stddev = 11[json_name = "latencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latency_critical_stddev() <= 0 && this->latency_critical_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_latency_critical_stddev(), target);
  }

  // float latency_warning_stddev = 12[json_name = "latencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latency_warning_stddev() <= 0 && this->latency_warning_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_latency_warning_stddev(), target);
  }

  // float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->jitter_critical_stddev() <= 0 && this->jitter_critical_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_jitter_critical_stddev(), target);
  }

  // float jitter_warning_stddev = 14[json_name = "jitterWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->jitter_warning_stddev() <= 0 && this->jitter_warning_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_jitter_warning_stddev(), target);
  }

  // float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->http_latency_critical_stddev() <= 0 && this->http_latency_critical_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_http_latency_critical_stddev(), target);
  }

  // float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->http_latency_warning_stddev() <= 0 && this->http_latency_warning_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_http_latency_warning_stddev(), target);
  }

  // uint32 unhealthy_subtest_threshold = 17[json_name = "unhealthySubtestThreshold", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->unhealthy_subtest_threshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_unhealthy_subtest_threshold(), target);
  }

  // .kentik.synthetics.v202309.ActivationSettings activation = 18[json_name = "activation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_activation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::activation(this), target, stream);
  }

  // uint32 cert_expiry_warning = 19[json_name = "certExpiryWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cert_expiry_warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_cert_expiry_warning(), target);
  }

  // uint32 cert_expiry_critical = 20[json_name = "certExpiryCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cert_expiry_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_cert_expiry_critical(), target);
  }

  // string dns_valid_ips = 21[json_name = "dnsValidIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dns_valid_ips().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dns_valid_ips().data(), static_cast<int>(this->_internal_dns_valid_ips().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.HealthSettings.dns_valid_ips");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_dns_valid_ips(), target);
  }

  // float dns_latency_critical = 22[json_name = "dnsLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->dns_latency_critical() <= 0 && this->dns_latency_critical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_dns_latency_critical(), target);
  }

  // float dns_latency_warning = 23[json_name = "dnsLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->dns_latency_warning() <= 0 && this->dns_latency_warning() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_dns_latency_warning(), target);
  }

  // float dns_latency_critical_stddev = 24[json_name = "dnsLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->dns_latency_critical_stddev() <= 0 && this->dns_latency_critical_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_dns_latency_critical_stddev(), target);
  }

  // float dns_latency_warning_stddev = 25[json_name = "dnsLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->dns_latency_warning_stddev() <= 0 && this->dns_latency_warning_stddev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(25, this->_internal_dns_latency_warning_stddev(), target);
  }

  // bool per_agent_alerting = 26[json_name = "perAgentAlerting", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->per_agent_alerting() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->_internal_per_agent_alerting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.HealthSettings)
  return target;
}

size_t HealthSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.HealthSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 http_valid_codes = 9[json_name = "httpValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->http_valid_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _http_valid_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 dns_valid_codes = 10[json_name = "dnsValidCodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->dns_valid_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _dns_valid_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string dns_valid_ips = 21[json_name = "dnsValidIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dns_valid_ips().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dns_valid_ips());
  }

  // .kentik.synthetics.v202309.ActivationSettings activation = 18[json_name = "activation", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_activation()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activation_);
  }

  // float latency_critical = 1[json_name = "latencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latency_critical() <= 0 && this->latency_critical() >= 0)) {
    total_size += 1 + 4;
  }

  // float latency_warning = 2[json_name = "latencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latency_warning() <= 0 && this->latency_warning() >= 0)) {
    total_size += 1 + 4;
  }

  // float packet_loss_critical = 3[json_name = "packetLossCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->packet_loss_critical() <= 0 && this->packet_loss_critical() >= 0)) {
    total_size += 1 + 4;
  }

  // float packet_loss_warning = 4[json_name = "packetLossWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->packet_loss_warning() <= 0 && this->packet_loss_warning() >= 0)) {
    total_size += 1 + 4;
  }

  // float jitter_critical = 5[json_name = "jitterCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->jitter_critical() <= 0 && this->jitter_critical() >= 0)) {
    total_size += 1 + 4;
  }

  // float jitter_warning = 6[json_name = "jitterWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->jitter_warning() <= 0 && this->jitter_warning() >= 0)) {
    total_size += 1 + 4;
  }

  // float http_latency_critical = 7[json_name = "httpLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->http_latency_critical() <= 0 && this->http_latency_critical() >= 0)) {
    total_size += 1 + 4;
  }

  // float http_latency_warning = 8[json_name = "httpLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->http_latency_warning() <= 0 && this->http_latency_warning() >= 0)) {
    total_size += 1 + 4;
  }

  // float latency_critical_stddev = 11[json_name = "latencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latency_critical_stddev() <= 0 && this->latency_critical_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float latency_warning_stddev = 12[json_name = "latencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latency_warning_stddev() <= 0 && this->latency_warning_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float jitter_critical_stddev = 13[json_name = "jitterCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->jitter_critical_stddev() <= 0 && this->jitter_critical_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float jitter_warning_stddev = 14[json_name = "jitterWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->jitter_warning_stddev() <= 0 && this->jitter_warning_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float http_latency_critical_stddev = 15[json_name = "httpLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->http_latency_critical_stddev() <= 0 && this->http_latency_critical_stddev() >= 0)) {
    total_size += 1 + 4;
  }

  // float http_latency_warning_stddev = 16[json_name = "httpLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->http_latency_warning_stddev() <= 0 && this->http_latency_warning_stddev() >= 0)) {
    total_size += 2 + 4;
  }

  // uint32 unhealthy_subtest_threshold = 17[json_name = "unhealthySubtestThreshold", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->unhealthy_subtest_threshold() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unhealthy_subtest_threshold());
  }

  // uint32 cert_expiry_warning = 19[json_name = "certExpiryWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cert_expiry_warning() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cert_expiry_warning());
  }

  // uint32 cert_expiry_critical = 20[json_name = "certExpiryCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->cert_expiry_critical() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_cert_expiry_critical());
  }

  // float dns_latency_critical = 22[json_name = "dnsLatencyCritical", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->dns_latency_critical() <= 0 && this->dns_latency_critical() >= 0)) {
    total_size += 2 + 4;
  }

  // float dns_latency_warning = 23[json_name = "dnsLatencyWarning", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->dns_latency_warning() <= 0 && this->dns_latency_warning() >= 0)) {
    total_size += 2 + 4;
  }

  // float dns_latency_critical_stddev = 24[json_name = "dnsLatencyCriticalStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->dns_latency_critical_stddev() <= 0 && this->dns_latency_critical_stddev() >= 0)) {
    total_size += 2 + 4;
  }

  // float dns_latency_warning_stddev = 25[json_name = "dnsLatencyWarningStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->dns_latency_warning_stddev() <= 0 && this->dns_latency_warning_stddev() >= 0)) {
    total_size += 2 + 4;
  }

  // bool per_agent_alerting = 26[json_name = "perAgentAlerting", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->per_agent_alerting() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HealthSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.HealthSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const HealthSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HealthSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.HealthSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.HealthSettings)
    MergeFrom(*source);
  }
}

void HealthSettings::MergeFrom(const HealthSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.HealthSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  http_valid_codes_.MergeFrom(from.http_valid_codes_);
  dns_valid_codes_.MergeFrom(from.dns_valid_codes_);
  if (from.dns_valid_ips().size() > 0) {
    _internal_set_dns_valid_ips(from._internal_dns_valid_ips());
  }
  if (from.has_activation()) {
    _internal_mutable_activation()->::kentik::synthetics::v202309::ActivationSettings::MergeFrom(from._internal_activation());
  }
  if (!(from.latency_critical() <= 0 && from.latency_critical() >= 0)) {
    _internal_set_latency_critical(from._internal_latency_critical());
  }
  if (!(from.latency_warning() <= 0 && from.latency_warning() >= 0)) {
    _internal_set_latency_warning(from._internal_latency_warning());
  }
  if (!(from.packet_loss_critical() <= 0 && from.packet_loss_critical() >= 0)) {
    _internal_set_packet_loss_critical(from._internal_packet_loss_critical());
  }
  if (!(from.packet_loss_warning() <= 0 && from.packet_loss_warning() >= 0)) {
    _internal_set_packet_loss_warning(from._internal_packet_loss_warning());
  }
  if (!(from.jitter_critical() <= 0 && from.jitter_critical() >= 0)) {
    _internal_set_jitter_critical(from._internal_jitter_critical());
  }
  if (!(from.jitter_warning() <= 0 && from.jitter_warning() >= 0)) {
    _internal_set_jitter_warning(from._internal_jitter_warning());
  }
  if (!(from.http_latency_critical() <= 0 && from.http_latency_critical() >= 0)) {
    _internal_set_http_latency_critical(from._internal_http_latency_critical());
  }
  if (!(from.http_latency_warning() <= 0 && from.http_latency_warning() >= 0)) {
    _internal_set_http_latency_warning(from._internal_http_latency_warning());
  }
  if (!(from.latency_critical_stddev() <= 0 && from.latency_critical_stddev() >= 0)) {
    _internal_set_latency_critical_stddev(from._internal_latency_critical_stddev());
  }
  if (!(from.latency_warning_stddev() <= 0 && from.latency_warning_stddev() >= 0)) {
    _internal_set_latency_warning_stddev(from._internal_latency_warning_stddev());
  }
  if (!(from.jitter_critical_stddev() <= 0 && from.jitter_critical_stddev() >= 0)) {
    _internal_set_jitter_critical_stddev(from._internal_jitter_critical_stddev());
  }
  if (!(from.jitter_warning_stddev() <= 0 && from.jitter_warning_stddev() >= 0)) {
    _internal_set_jitter_warning_stddev(from._internal_jitter_warning_stddev());
  }
  if (!(from.http_latency_critical_stddev() <= 0 && from.http_latency_critical_stddev() >= 0)) {
    _internal_set_http_latency_critical_stddev(from._internal_http_latency_critical_stddev());
  }
  if (!(from.http_latency_warning_stddev() <= 0 && from.http_latency_warning_stddev() >= 0)) {
    _internal_set_http_latency_warning_stddev(from._internal_http_latency_warning_stddev());
  }
  if (from.unhealthy_subtest_threshold() != 0) {
    _internal_set_unhealthy_subtest_threshold(from._internal_unhealthy_subtest_threshold());
  }
  if (from.cert_expiry_warning() != 0) {
    _internal_set_cert_expiry_warning(from._internal_cert_expiry_warning());
  }
  if (from.cert_expiry_critical() != 0) {
    _internal_set_cert_expiry_critical(from._internal_cert_expiry_critical());
  }
  if (!(from.dns_latency_critical() <= 0 && from.dns_latency_critical() >= 0)) {
    _internal_set_dns_latency_critical(from._internal_dns_latency_critical());
  }
  if (!(from.dns_latency_warning() <= 0 && from.dns_latency_warning() >= 0)) {
    _internal_set_dns_latency_warning(from._internal_dns_latency_warning());
  }
  if (!(from.dns_latency_critical_stddev() <= 0 && from.dns_latency_critical_stddev() >= 0)) {
    _internal_set_dns_latency_critical_stddev(from._internal_dns_latency_critical_stddev());
  }
  if (!(from.dns_latency_warning_stddev() <= 0 && from.dns_latency_warning_stddev() >= 0)) {
    _internal_set_dns_latency_warning_stddev(from._internal_dns_latency_warning_stddev());
  }
  if (from.per_agent_alerting() != 0) {
    _internal_set_per_agent_alerting(from._internal_per_agent_alerting());
  }
}

void HealthSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.HealthSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HealthSettings::CopyFrom(const HealthSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.HealthSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HealthSettings::IsInitialized() const {
  return true;
}

void HealthSettings::InternalSwap(HealthSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  http_valid_codes_.InternalSwap(&other->http_valid_codes_);
  dns_valid_codes_.InternalSwap(&other->dns_valid_codes_);
  dns_valid_ips_.Swap(&other->dns_valid_ips_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HealthSettings, per_agent_alerting_)
      + sizeof(HealthSettings::per_agent_alerting_)
      - PROTOBUF_FIELD_OFFSET(HealthSettings, activation_)>(
          reinterpret_cast<char*>(&activation_),
          reinterpret_cast<char*>(&other->activation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HealthSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HostnameTest::InitAsDefaultInstance() {
}
class HostnameTest::_Internal {
 public:
};

HostnameTest::HostnameTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.HostnameTest)
}
HostnameTest::HostnameTest(const HostnameTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.HostnameTest)
}

void HostnameTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HostnameTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

HostnameTest::~HostnameTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.HostnameTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HostnameTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HostnameTest::ArenaDtor(void* object) {
  HostnameTest* _this = reinterpret_cast< HostnameTest* >(object);
  (void)_this;
}
void HostnameTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HostnameTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HostnameTest& HostnameTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HostnameTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HostnameTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.HostnameTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HostnameTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.HostnameTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HostnameTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.HostnameTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.HostnameTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.HostnameTest)
  return target;
}

size_t HostnameTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.HostnameTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostnameTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.HostnameTest)
  GOOGLE_DCHECK_NE(&from, this);
  const HostnameTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HostnameTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.HostnameTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.HostnameTest)
    MergeFrom(*source);
  }
}

void HostnameTest::MergeFrom(const HostnameTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.HostnameTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
}

void HostnameTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.HostnameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostnameTest::CopyFrom(const HostnameTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.HostnameTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostnameTest::IsInitialized() const {
  return true;
}

void HostnameTest::InternalSwap(HostnameTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata HostnameTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IpTest::InitAsDefaultInstance() {
}
class IpTest::_Internal {
 public:
};

IpTest::IpTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.IpTest)
}
IpTest::IpTest(const IpTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  use_local_ip_ = from.use_local_ip_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.IpTest)
}

void IpTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IpTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  use_local_ip_ = false;
}

IpTest::~IpTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.IpTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IpTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IpTest::ArenaDtor(void* object) {
  IpTest* _this = reinterpret_cast< IpTest* >(object);
  (void)_this;
}
void IpTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IpTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IpTest& IpTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IpTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void IpTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.IpTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  targets_.Clear();
  use_local_ip_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IpTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string targets = 1[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.IpTest.targets"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_local_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IpTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.IpTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string targets = 1[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_targets_size(); i < n; i++) {
    const auto& s = this->_internal_targets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.IpTest.targets");
    target = stream->WriteString(1, s, target);
  }

  // bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_local_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_local_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.IpTest)
  return target;
}

size_t IpTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.IpTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string targets = 1[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(targets_.size());
  for (int i = 0, n = targets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      targets_.Get(i));
  }

  // bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_local_ip() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IpTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.IpTest)
  GOOGLE_DCHECK_NE(&from, this);
  const IpTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IpTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.IpTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.IpTest)
    MergeFrom(*source);
  }
}

void IpTest::MergeFrom(const IpTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.IpTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  targets_.MergeFrom(from.targets_);
  if (from.use_local_ip() != 0) {
    _internal_set_use_local_ip(from._internal_use_local_ip());
  }
}

void IpTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.IpTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpTest::CopyFrom(const IpTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.IpTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpTest::IsInitialized() const {
  return true;
}

void IpTest::InternalSwap(IpTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  targets_.InternalSwap(&other->targets_);
  swap(use_local_ip_, other->use_local_ip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IpTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentTest::InitAsDefaultInstance() {
}
class AgentTest::_Internal {
 public:
};

AgentTest::AgentTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.AgentTest)
}
AgentTest::AgentTest(const AgentTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  ::memcpy(&use_local_ip_, &from.use_local_ip_,
    static_cast<size_t>(reinterpret_cast<char*>(&reciprocal_) -
    reinterpret_cast<char*>(&use_local_ip_)) + sizeof(reciprocal_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.AgentTest)
}

void AgentTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&use_local_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reciprocal_) -
      reinterpret_cast<char*>(&use_local_ip_)) + sizeof(reciprocal_));
}

AgentTest::~AgentTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.AgentTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgentTest::ArenaDtor(void* object) {
  AgentTest* _this = reinterpret_cast< AgentTest* >(object);
  (void)_this;
}
void AgentTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentTest& AgentTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void AgentTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.AgentTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&use_local_ip_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reciprocal_) -
      reinterpret_cast<char*>(&use_local_ip_)) + sizeof(reciprocal_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.AgentTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          use_local_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool reciprocal = 3[json_name = "reciprocal", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reciprocal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.AgentTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.AgentTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_local_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_use_local_ip(), target);
  }

  // bool reciprocal = 3[json_name = "reciprocal", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->reciprocal() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_reciprocal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.AgentTest)
  return target;
}

size_t AgentTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.AgentTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // bool use_local_ip = 2[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_local_ip() != 0) {
    total_size += 1 + 1;
  }

  // bool reciprocal = 3[json_name = "reciprocal", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->reciprocal() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.AgentTest)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.AgentTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.AgentTest)
    MergeFrom(*source);
  }
}

void AgentTest::MergeFrom(const AgentTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.AgentTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.use_local_ip() != 0) {
    _internal_set_use_local_ip(from._internal_use_local_ip());
  }
  if (from.reciprocal() != 0) {
    _internal_set_reciprocal(from._internal_reciprocal());
  }
}

void AgentTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.AgentTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentTest::CopyFrom(const AgentTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.AgentTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentTest::IsInitialized() const {
  return true;
}

void AgentTest::InternalSwap(AgentTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentTest, reciprocal_)
      + sizeof(AgentTest::reciprocal_)
      - PROTOBUF_FIELD_OFFSET(AgentTest, use_local_ip_)>(
          reinterpret_cast<char*>(&use_local_ip_),
          reinterpret_cast<char*>(&other->use_local_ip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FlowTest::InitAsDefaultInstance() {
}
class FlowTest::_Internal {
 public:
};

FlowTest::FlowTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.FlowTest)
}
FlowTest::FlowTest(const FlowTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArena());
  }
  inet_direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_inet_direction().empty()) {
    inet_direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inet_direction(),
      GetArena());
  }
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_direction().empty()) {
    direction_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_direction(),
      GetArena());
  }
  ::memcpy(&target_refresh_interval_millis_, &from.target_refresh_interval_millis_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_ip_targets_) -
    reinterpret_cast<char*>(&target_refresh_interval_millis_)) + sizeof(max_ip_targets_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.FlowTest)
}

void FlowTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FlowTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inet_direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_refresh_interval_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_ip_targets_) -
      reinterpret_cast<char*>(&target_refresh_interval_millis_)) + sizeof(max_ip_targets_));
}

FlowTest::~FlowTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.FlowTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FlowTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inet_direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  direction_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FlowTest::ArenaDtor(void* object) {
  FlowTest* _this = reinterpret_cast< FlowTest* >(object);
  (void)_this;
}
void FlowTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FlowTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FlowTest& FlowTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FlowTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void FlowTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.FlowTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inet_direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&target_refresh_interval_millis_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_ip_targets_) -
      reinterpret_cast<char*>(&target_refresh_interval_millis_)) + sizeof(max_ip_targets_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FlowTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.FlowTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          target_refresh_interval_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_providers = 3[json_name = "maxProviders", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_providers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_ip_targets = 4[json_name = "maxIpTargets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_ip_targets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.FlowTest.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string inet_direction = 6[json_name = "inetDirection", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_inet_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.FlowTest.inet_direction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string direction = 7[json_name = "direction", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_direction();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.FlowTest.direction"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FlowTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.FlowTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.FlowTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target_refresh_interval_millis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_target_refresh_interval_millis(), target);
  }

  // uint32 max_providers = 3[json_name = "maxProviders", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_providers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_max_providers(), target);
  }

  // uint32 max_ip_targets = 4[json_name = "maxIpTargets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_ip_targets() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_max_ip_targets(), target);
  }

  // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.FlowTest.type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_type(), target);
  }

  // string inet_direction = 6[json_name = "inetDirection", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->inet_direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_inet_direction().data(), static_cast<int>(this->_internal_inet_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.FlowTest.inet_direction");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_inet_direction(), target);
  }

  // string direction = 7[json_name = "direction", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->direction().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_direction().data(), static_cast<int>(this->_internal_direction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.FlowTest.direction");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.FlowTest)
  return target;
}

size_t FlowTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.FlowTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string type = 5[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string inet_direction = 6[json_name = "inetDirection", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->inet_direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inet_direction());
  }

  // string direction = 7[json_name = "direction", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->direction().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_direction());
  }

  // uint32 target_refresh_interval_millis = 2[json_name = "targetRefreshIntervalMillis", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target_refresh_interval_millis() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_target_refresh_interval_millis());
  }

  // uint32 max_providers = 3[json_name = "maxProviders", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_providers() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_providers());
  }

  // uint32 max_ip_targets = 4[json_name = "maxIpTargets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_ip_targets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_ip_targets());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlowTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.FlowTest)
  GOOGLE_DCHECK_NE(&from, this);
  const FlowTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FlowTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.FlowTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.FlowTest)
    MergeFrom(*source);
  }
}

void FlowTest::MergeFrom(const FlowTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.FlowTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.inet_direction().size() > 0) {
    _internal_set_inet_direction(from._internal_inet_direction());
  }
  if (from.direction().size() > 0) {
    _internal_set_direction(from._internal_direction());
  }
  if (from.target_refresh_interval_millis() != 0) {
    _internal_set_target_refresh_interval_millis(from._internal_target_refresh_interval_millis());
  }
  if (from.max_providers() != 0) {
    _internal_set_max_providers(from._internal_max_providers());
  }
  if (from.max_ip_targets() != 0) {
    _internal_set_max_ip_targets(from._internal_max_ip_targets());
  }
}

void FlowTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.FlowTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlowTest::CopyFrom(const FlowTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.FlowTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlowTest::IsInitialized() const {
  return true;
}

void FlowTest::InternalSwap(FlowTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inet_direction_.Swap(&other->inet_direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  direction_.Swap(&other->direction_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FlowTest, max_ip_targets_)
      + sizeof(FlowTest::max_ip_targets_)
      - PROTOBUF_FIELD_OFFSET(FlowTest, target_refresh_interval_millis_)>(
          reinterpret_cast<char*>(&target_refresh_interval_millis_),
          reinterpret_cast<char*>(&other->target_refresh_interval_millis_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FlowTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DnsTest::InitAsDefaultInstance() {
}
class DnsTest::_Internal {
 public:
};

DnsTest::DnsTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  servers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DnsTest)
}
DnsTest::DnsTest(const DnsTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      servers_(from.servers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DnsTest)
}

void DnsTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DnsTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(port_));
}

DnsTest::~DnsTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DnsTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DnsTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DnsTest::ArenaDtor(void* object) {
  DnsTest* _this = reinterpret_cast< DnsTest* >(object);
  (void)_this;
}
void DnsTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DnsTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DnsTest& DnsTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DnsTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DnsTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DnsTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  servers_.Clear();
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DnsTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.DnsTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout = 2[json_name = "timeout", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.DNSRecord record_type = 3[json_name = "recordType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_record_type(static_cast<::kentik::synthetics::v202309::DNSRecord>(val));
        } else goto handle_unusual;
        continue;
      // repeated string servers = 4[json_name = "servers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_servers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.DnsTest.servers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 port = 5[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DnsTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DnsTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.DnsTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 timeout = 2[json_name = "timeout", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout(), target);
  }

  // .kentik.synthetics.v202309.DNSRecord record_type = 3[json_name = "recordType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->record_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_record_type(), target);
  }

  // repeated string servers = 4[json_name = "servers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_servers_size(); i < n; i++) {
    const auto& s = this->_internal_servers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.DnsTest.servers");
    target = stream->WriteString(4, s, target);
  }

  // uint32 port = 5[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DnsTest)
  return target;
}

size_t DnsTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DnsTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string servers = 4[json_name = "servers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(servers_.size());
  for (int i = 0, n = servers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      servers_.Get(i));
  }

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // uint32 timeout = 2[json_name = "timeout", deprecated = true, (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  // .kentik.synthetics.v202309.DNSRecord record_type = 3[json_name = "recordType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->record_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_record_type());
  }

  // uint32 port = 5[json_name = "port", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DnsTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DnsTest)
  GOOGLE_DCHECK_NE(&from, this);
  const DnsTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DnsTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DnsTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DnsTest)
    MergeFrom(*source);
  }
}

void DnsTest::MergeFrom(const DnsTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DnsTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  servers_.MergeFrom(from.servers_);
  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.record_type() != 0) {
    _internal_set_record_type(from._internal_record_type());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void DnsTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DnsTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DnsTest::CopyFrom(const DnsTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DnsTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DnsTest::IsInitialized() const {
  return true;
}

void DnsTest::InternalSwap(DnsTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  servers_.InternalSwap(&other->servers_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DnsTest, port_)
      + sizeof(DnsTest::port_)
      - PROTOBUF_FIELD_OFFSET(DnsTest, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DnsTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UrlTest_HeadersEntry_DoNotUse::UrlTest_HeadersEntry_DoNotUse() {}
UrlTest_HeadersEntry_DoNotUse::UrlTest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UrlTest_HeadersEntry_DoNotUse::MergeFrom(const UrlTest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UrlTest_HeadersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UrlTest_HeadersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void UrlTest::InitAsDefaultInstance() {
}
class UrlTest::_Internal {
 public:
};

UrlTest::UrlTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.UrlTest)
}
UrlTest::UrlTest(const UrlTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_method(),
      GetArena());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_body(),
      GetArena());
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_tls_errors_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(ignore_tls_errors_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.UrlTest)
}

void UrlTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UrlTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_tls_errors_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(ignore_tls_errors_));
}

UrlTest::~UrlTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.UrlTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UrlTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UrlTest::ArenaDtor(void* object) {
  UrlTest* _this = reinterpret_cast< UrlTest* >(object);
  (void)_this;
}
void UrlTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UrlTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UrlTest& UrlTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UrlTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UrlTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.UrlTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  method_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_tls_errors_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(ignore_tls_errors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UrlTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.UrlTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method = 3[json_name = "method", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.UrlTest.method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> headers = 4[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // string body = 5[json_name = "body", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.UrlTest.body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ignore_tls_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UrlTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.UrlTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.UrlTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout(), target);
  }

  // string method = 3[json_name = "method", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.UrlTest.method");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_method(), target);
  }

  // map<string, string> headers = 4[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202309.UrlTest.HeadersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202309.UrlTest.HeadersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UrlTest_HeadersEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = UrlTest_HeadersEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string body = 5[json_name = "body", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->body().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.UrlTest.body");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_body(), target);
  }

  // bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ignore_tls_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ignore_tls_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.UrlTest)
  return target;
}

size_t UrlTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.UrlTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 4[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += UrlTest_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string method = 3[json_name = "method", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string body = 5[json_name = "body", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->body().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  // bool ignore_tls_errors = 6[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ignore_tls_errors() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.UrlTest)
  GOOGLE_DCHECK_NE(&from, this);
  const UrlTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UrlTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.UrlTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.UrlTest)
    MergeFrom(*source);
  }
}

void UrlTest::MergeFrom(const UrlTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.UrlTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.method().size() > 0) {
    _internal_set_method(from._internal_method());
  }
  if (from.body().size() > 0) {
    _internal_set_body(from._internal_body());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.ignore_tls_errors() != 0) {
    _internal_set_ignore_tls_errors(from._internal_ignore_tls_errors());
  }
}

void UrlTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.UrlTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UrlTest::CopyFrom(const UrlTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.UrlTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlTest::IsInitialized() const {
  return true;
}

void UrlTest::InternalSwap(UrlTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.Swap(&other->headers_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  method_.Swap(&other->method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  body_.Swap(&other->body_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UrlTest, ignore_tls_errors_)
      + sizeof(UrlTest::ignore_tls_errors_)
      - PROTOBUF_FIELD_OFFSET(UrlTest, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UrlTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PageLoadTest_HeadersEntry_DoNotUse::PageLoadTest_HeadersEntry_DoNotUse() {}
PageLoadTest_HeadersEntry_DoNotUse::PageLoadTest_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PageLoadTest_HeadersEntry_DoNotUse::MergeFrom(const PageLoadTest_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PageLoadTest_HeadersEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PageLoadTest_HeadersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

PageLoadTest_CssSelectorsEntry_DoNotUse::PageLoadTest_CssSelectorsEntry_DoNotUse() {}
PageLoadTest_CssSelectorsEntry_DoNotUse::PageLoadTest_CssSelectorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PageLoadTest_CssSelectorsEntry_DoNotUse::MergeFrom(const PageLoadTest_CssSelectorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PageLoadTest_CssSelectorsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PageLoadTest_CssSelectorsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PageLoadTest::InitAsDefaultInstance() {
}
class PageLoadTest::_Internal {
 public:
};

PageLoadTest::PageLoadTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena),
  css_selectors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.PageLoadTest)
}
PageLoadTest::PageLoadTest(const PageLoadTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  css_selectors_.MergeFrom(from.css_selectors_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  ::memcpy(&timeout_, &from.timeout_,
    static_cast<size_t>(reinterpret_cast<char*>(&ignore_tls_errors_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(ignore_tls_errors_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.PageLoadTest)
}

void PageLoadTest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PageLoadTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_tls_errors_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(ignore_tls_errors_));
}

PageLoadTest::~PageLoadTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.PageLoadTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PageLoadTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PageLoadTest::ArenaDtor(void* object) {
  PageLoadTest* _this = reinterpret_cast< PageLoadTest* >(object);
  (void)_this;
}
void PageLoadTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PageLoadTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PageLoadTest& PageLoadTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PageLoadTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PageLoadTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.PageLoadTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  css_selectors_.Clear();
  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&timeout_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_tls_errors_) -
      reinterpret_cast<char*>(&timeout_)) + sizeof(ignore_tls_errors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PageLoadTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.PageLoadTest.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> headers = 3[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool ignore_tls_errors = 4[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ignore_tls_errors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> css_selectors = 5[json_name = "cssSelectors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&css_selectors_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PageLoadTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.PageLoadTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.PageLoadTest.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_timeout(), target);
  }

  // map<string, string> headers = 3[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202309.PageLoadTest.HeadersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202309.PageLoadTest.HeadersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PageLoadTest_HeadersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = PageLoadTest_HeadersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool ignore_tls_errors = 4[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ignore_tls_errors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ignore_tls_errors(), target);
  }

  // map<string, string> css_selectors = 5[json_name = "cssSelectors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_css_selectors().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202309.PageLoadTest.CssSelectorsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202309.PageLoadTest.CssSelectorsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_css_selectors().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_css_selectors().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_css_selectors().begin();
          it != this->_internal_css_selectors().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PageLoadTest_CssSelectorsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_css_selectors().begin();
          it != this->_internal_css_selectors().end(); ++it) {
        target = PageLoadTest_CssSelectorsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.PageLoadTest)
  return target;
}

size_t PageLoadTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.PageLoadTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> headers = 3[json_name = "headers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += PageLoadTest_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> css_selectors = 5[json_name = "cssSelectors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_css_selectors_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_css_selectors().begin();
      it != this->_internal_css_selectors().end(); ++it) {
    total_size += PageLoadTest_CssSelectorsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // uint32 timeout = 2[json_name = "timeout", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_timeout());
  }

  // bool ignore_tls_errors = 4[json_name = "ignoreTlsErrors", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ignore_tls_errors() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageLoadTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.PageLoadTest)
  GOOGLE_DCHECK_NE(&from, this);
  const PageLoadTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PageLoadTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.PageLoadTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.PageLoadTest)
    MergeFrom(*source);
  }
}

void PageLoadTest::MergeFrom(const PageLoadTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.PageLoadTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  css_selectors_.MergeFrom(from.css_selectors_);
  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.timeout() != 0) {
    _internal_set_timeout(from._internal_timeout());
  }
  if (from.ignore_tls_errors() != 0) {
    _internal_set_ignore_tls_errors(from._internal_ignore_tls_errors());
  }
}

void PageLoadTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.PageLoadTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PageLoadTest::CopyFrom(const PageLoadTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.PageLoadTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageLoadTest::IsInitialized() const {
  return true;
}

void PageLoadTest::InternalSwap(PageLoadTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  headers_.Swap(&other->headers_);
  css_selectors_.Swap(&other->css_selectors_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageLoadTest, ignore_tls_errors_)
      + sizeof(PageLoadTest::ignore_tls_errors_)
      - PROTOBUF_FIELD_OFFSET(PageLoadTest, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PageLoadTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkMeshTest::InitAsDefaultInstance() {
}
class NetworkMeshTest::_Internal {
 public:
};

NetworkMeshTest::NetworkMeshTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.NetworkMeshTest)
}
NetworkMeshTest::NetworkMeshTest(const NetworkMeshTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  use_local_ip_ = from.use_local_ip_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.NetworkMeshTest)
}

void NetworkMeshTest::SharedCtor() {
  use_local_ip_ = false;
}

NetworkMeshTest::~NetworkMeshTest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.NetworkMeshTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetworkMeshTest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NetworkMeshTest::ArenaDtor(void* object) {
  NetworkMeshTest* _this = reinterpret_cast< NetworkMeshTest* >(object);
  (void)_this;
}
void NetworkMeshTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetworkMeshTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkMeshTest& NetworkMeshTest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkMeshTest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void NetworkMeshTest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.NetworkMeshTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_local_ip_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetworkMeshTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool use_local_ip = 1[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          use_local_ip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkMeshTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.NetworkMeshTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_local_ip = 1[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_local_ip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_local_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.NetworkMeshTest)
  return target;
}

size_t NetworkMeshTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.NetworkMeshTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool use_local_ip = 1[json_name = "useLocalIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->use_local_ip() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkMeshTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.NetworkMeshTest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkMeshTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkMeshTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.NetworkMeshTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.NetworkMeshTest)
    MergeFrom(*source);
  }
}

void NetworkMeshTest::MergeFrom(const NetworkMeshTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.NetworkMeshTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.use_local_ip() != 0) {
    _internal_set_use_local_ip(from._internal_use_local_ip());
  }
}

void NetworkMeshTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.NetworkMeshTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkMeshTest::CopyFrom(const NetworkMeshTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.NetworkMeshTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkMeshTest::IsInitialized() const {
  return true;
}

void NetworkMeshTest::InternalSwap(NetworkMeshTest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(use_local_ip_, other->use_local_ip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkMeshTest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MetricData::InitAsDefaultInstance() {
}
class MetricData::_Internal {
 public:
};

MetricData::MetricData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.MetricData)
}
MetricData::MetricData(const MetricData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_health().empty()) {
    health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_health(),
      GetArena());
  }
  ::memcpy(&current_, &from.current_,
    static_cast<size_t>(reinterpret_cast<char*>(&rolling_stddev_) -
    reinterpret_cast<char*>(&current_)) + sizeof(rolling_stddev_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.MetricData)
}

void MetricData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rolling_stddev_) -
      reinterpret_cast<char*>(&current_)) + sizeof(rolling_stddev_));
}

MetricData::~MetricData() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.MetricData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MetricData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MetricData::ArenaDtor(void* object) {
  MetricData* _this = reinterpret_cast< MetricData* >(object);
  (void)_this;
}
void MetricData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MetricData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MetricData& MetricData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MetricData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void MetricData::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.MetricData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&current_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rolling_stddev_) -
      reinterpret_cast<char*>(&current_)) + sizeof(rolling_stddev_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rolling_avg = 2[json_name = "rollingAvg", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rolling_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rolling_stddev = 3[json_name = "rollingStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          rolling_stddev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.MetricData.health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MetricData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.MetricData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->current() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_current(), target);
  }

  // uint32 rolling_avg = 2[json_name = "rollingAvg", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->rolling_avg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rolling_avg(), target);
  }

  // uint32 rolling_stddev = 3[json_name = "rollingStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->rolling_stddev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_rolling_stddev(), target);
  }

  // string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_health().data(), static_cast<int>(this->_internal_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.MetricData.health");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_health(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.MetricData)
  return target;
}

size_t MetricData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.MetricData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_health());
  }

  // uint32 current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->current() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_current());
  }

  // uint32 rolling_avg = 2[json_name = "rollingAvg", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->rolling_avg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rolling_avg());
  }

  // uint32 rolling_stddev = 3[json_name = "rollingStddev", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->rolling_stddev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rolling_stddev());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetricData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.MetricData)
  GOOGLE_DCHECK_NE(&from, this);
  const MetricData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MetricData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.MetricData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.MetricData)
    MergeFrom(*source);
  }
}

void MetricData::MergeFrom(const MetricData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.MetricData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.health().size() > 0) {
    _internal_set_health(from._internal_health());
  }
  if (from.current() != 0) {
    _internal_set_current(from._internal_current());
  }
  if (from.rolling_avg() != 0) {
    _internal_set_rolling_avg(from._internal_rolling_avg());
  }
  if (from.rolling_stddev() != 0) {
    _internal_set_rolling_stddev(from._internal_rolling_stddev());
  }
}

void MetricData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.MetricData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetricData::CopyFrom(const MetricData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.MetricData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricData::IsInitialized() const {
  return true;
}

void MetricData::InternalSwap(MetricData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  health_.Swap(&other->health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricData, rolling_stddev_)
      + sizeof(MetricData::rolling_stddev_)
      - PROTOBUF_FIELD_OFFSET(MetricData, current_)>(
          reinterpret_cast<char*>(&current_),
          reinterpret_cast<char*>(&other->current_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PacketLossData::InitAsDefaultInstance() {
}
class PacketLossData::_Internal {
 public:
};

PacketLossData::PacketLossData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.PacketLossData)
}
PacketLossData::PacketLossData(const PacketLossData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_health().empty()) {
    health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_health(),
      GetArena());
  }
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.PacketLossData)
}

void PacketLossData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PacketLossData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  current_ = 0;
}

PacketLossData::~PacketLossData() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.PacketLossData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PacketLossData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PacketLossData::ArenaDtor(void* object) {
  PacketLossData* _this = reinterpret_cast< PacketLossData* >(object);
  (void)_this;
}
void PacketLossData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PacketLossData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PacketLossData& PacketLossData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PacketLossData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PacketLossData::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.PacketLossData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  current_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PacketLossData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.PacketLossData.health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PacketLossData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.PacketLossData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->current() <= 0 && this->current() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_current(), target);
  }

  // string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_health().data(), static_cast<int>(this->_internal_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.PacketLossData.health");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_health(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.PacketLossData)
  return target;
}

size_t PacketLossData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.PacketLossData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_health());
  }

  // double current = 1[json_name = "current", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->current() <= 0 && this->current() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketLossData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.PacketLossData)
  GOOGLE_DCHECK_NE(&from, this);
  const PacketLossData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PacketLossData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.PacketLossData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.PacketLossData)
    MergeFrom(*source);
  }
}

void PacketLossData::MergeFrom(const PacketLossData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.PacketLossData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.health().size() > 0) {
    _internal_set_health(from._internal_health());
  }
  if (!(from.current() <= 0 && from.current() >= 0)) {
    _internal_set_current(from._internal_current());
  }
}

void PacketLossData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.PacketLossData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PacketLossData::CopyFrom(const PacketLossData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.PacketLossData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketLossData::IsInitialized() const {
  return true;
}

void PacketLossData::InternalSwap(PacketLossData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  health_.Swap(&other->health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(current_, other->current_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PacketLossData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PingResults::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_PingResults_default_instance_._instance.get_mutable()->packet_loss_ = const_cast< ::kentik::synthetics::v202309::PacketLossData*>(
      ::kentik::synthetics::v202309::PacketLossData::internal_default_instance());
  ::kentik::synthetics::v202309::_PingResults_default_instance_._instance.get_mutable()->latency_ = const_cast< ::kentik::synthetics::v202309::MetricData*>(
      ::kentik::synthetics::v202309::MetricData::internal_default_instance());
  ::kentik::synthetics::v202309::_PingResults_default_instance_._instance.get_mutable()->jitter_ = const_cast< ::kentik::synthetics::v202309::MetricData*>(
      ::kentik::synthetics::v202309::MetricData::internal_default_instance());
}
class PingResults::_Internal {
 public:
  static const ::kentik::synthetics::v202309::PacketLossData& packet_loss(const PingResults* msg);
  static const ::kentik::synthetics::v202309::MetricData& latency(const PingResults* msg);
  static const ::kentik::synthetics::v202309::MetricData& jitter(const PingResults* msg);
};

const ::kentik::synthetics::v202309::PacketLossData&
PingResults::_Internal::packet_loss(const PingResults* msg) {
  return *msg->packet_loss_;
}
const ::kentik::synthetics::v202309::MetricData&
PingResults::_Internal::latency(const PingResults* msg) {
  return *msg->latency_;
}
const ::kentik::synthetics::v202309::MetricData&
PingResults::_Internal::jitter(const PingResults* msg) {
  return *msg->jitter_;
}
PingResults::PingResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.PingResults)
}
PingResults::PingResults(const PingResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  dst_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dst_ip().empty()) {
    dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dst_ip(),
      GetArena());
  }
  if (from._internal_has_packet_loss()) {
    packet_loss_ = new ::kentik::synthetics::v202309::PacketLossData(*from.packet_loss_);
  } else {
    packet_loss_ = nullptr;
  }
  if (from._internal_has_latency()) {
    latency_ = new ::kentik::synthetics::v202309::MetricData(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  if (from._internal_has_jitter()) {
    jitter_ = new ::kentik::synthetics::v202309::MetricData(*from.jitter_);
  } else {
    jitter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.PingResults)
}

void PingResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PingResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&packet_loss_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&jitter_) -
      reinterpret_cast<char*>(&packet_loss_)) + sizeof(jitter_));
}

PingResults::~PingResults() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.PingResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PingResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete packet_loss_;
  if (this != internal_default_instance()) delete latency_;
  if (this != internal_default_instance()) delete jitter_;
}

void PingResults::ArenaDtor(void* object) {
  PingResults* _this = reinterpret_cast< PingResults* >(object);
  (void)_this;
}
void PingResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PingResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PingResults& PingResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PingResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PingResults::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.PingResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && packet_loss_ != nullptr) {
    delete packet_loss_;
  }
  packet_loss_ = nullptr;
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
  if (GetArena() == nullptr && jitter_ != nullptr) {
    delete jitter_;
  }
  jitter_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PingResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.PingResults.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.PacketLossData packet_loss = 2[json_name = "packetLoss", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_loss(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.MetricData jitter = 4[json_name = "jitter", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_jitter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dst_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.PingResults.dst_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PingResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.PingResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.PingResults.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // .kentik.synthetics.v202309.PacketLossData packet_loss = 2[json_name = "packetLoss", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_packet_loss()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::packet_loss(this), target, stream);
  }

  // .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::latency(this), target, stream);
  }

  // .kentik.synthetics.v202309.MetricData jitter = 4[json_name = "jitter", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_jitter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::jitter(this), target, stream);
  }

  // string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst_ip().data(), static_cast<int>(this->_internal_dst_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.PingResults.dst_ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dst_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.PingResults)
  return target;
}

size_t PingResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.PingResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst_ip());
  }

  // .kentik.synthetics.v202309.PacketLossData packet_loss = 2[json_name = "packetLoss", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_packet_loss()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *packet_loss_);
  }

  // .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_);
  }

  // .kentik.synthetics.v202309.MetricData jitter = 4[json_name = "jitter", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_jitter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *jitter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.PingResults)
  GOOGLE_DCHECK_NE(&from, this);
  const PingResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PingResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.PingResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.PingResults)
    MergeFrom(*source);
  }
}

void PingResults::MergeFrom(const PingResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.PingResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.dst_ip().size() > 0) {
    _internal_set_dst_ip(from._internal_dst_ip());
  }
  if (from.has_packet_loss()) {
    _internal_mutable_packet_loss()->::kentik::synthetics::v202309::PacketLossData::MergeFrom(from._internal_packet_loss());
  }
  if (from.has_latency()) {
    _internal_mutable_latency()->::kentik::synthetics::v202309::MetricData::MergeFrom(from._internal_latency());
  }
  if (from.has_jitter()) {
    _internal_mutable_jitter()->::kentik::synthetics::v202309::MetricData::MergeFrom(from._internal_jitter());
  }
}

void PingResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.PingResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingResults::CopyFrom(const PingResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.PingResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingResults::IsInitialized() const {
  return true;
}

void PingResults::InternalSwap(PingResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_ip_.Swap(&other->dst_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PingResults, jitter_)
      + sizeof(PingResults::jitter_)
      - PROTOBUF_FIELD_OFFSET(PingResults, packet_loss_)>(
          reinterpret_cast<char*>(&packet_loss_),
          reinterpret_cast<char*>(&other->packet_loss_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PingResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HTTPResponseData::InitAsDefaultInstance() {
}
class HTTPResponseData::_Internal {
 public:
};

HTTPResponseData::HTTPResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.HTTPResponseData)
}
HTTPResponseData::HTTPResponseData(const HTTPResponseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&status_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.HTTPResponseData)
}

void HTTPResponseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTTPResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&status_)) + sizeof(size_));
}

HTTPResponseData::~HTTPResponseData() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.HTTPResponseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HTTPResponseData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HTTPResponseData::ArenaDtor(void* object) {
  HTTPResponseData* _this = reinterpret_cast< HTTPResponseData* >(object);
  (void)_this;
}
void HTTPResponseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HTTPResponseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTTPResponseData& HTTPResponseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTTPResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HTTPResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.HTTPResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&status_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HTTPResponseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2[json_name = "size", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 3[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.HTTPResponseData.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTTPResponseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.HTTPResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // uint32 size = 2[json_name = "size", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  // string data = 3[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.HTTPResponseData.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.HTTPResponseData)
  return target;
}

size_t HTTPResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.HTTPResponseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 3[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  // uint32 size = 2[json_name = "size", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTTPResponseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.HTTPResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPResponseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTTPResponseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.HTTPResponseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.HTTPResponseData)
    MergeFrom(*source);
  }
}

void HTTPResponseData::MergeFrom(const HTTPResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.HTTPResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void HTTPResponseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.HTTPResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPResponseData::CopyFrom(const HTTPResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.HTTPResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPResponseData::IsInitialized() const {
  return true;
}

void HTTPResponseData::InternalSwap(HTTPResponseData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HTTPResponseData, size_)
      + sizeof(HTTPResponseData::size_)
      - PROTOBUF_FIELD_OFFSET(HTTPResponseData, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HTTPResponseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HTTPResults::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_HTTPResults_default_instance_._instance.get_mutable()->latency_ = const_cast< ::kentik::synthetics::v202309::MetricData*>(
      ::kentik::synthetics::v202309::MetricData::internal_default_instance());
  ::kentik::synthetics::v202309::_HTTPResults_default_instance_._instance.get_mutable()->response_ = const_cast< ::kentik::synthetics::v202309::HTTPResponseData*>(
      ::kentik::synthetics::v202309::HTTPResponseData::internal_default_instance());
}
class HTTPResults::_Internal {
 public:
  static const ::kentik::synthetics::v202309::MetricData& latency(const HTTPResults* msg);
  static const ::kentik::synthetics::v202309::HTTPResponseData& response(const HTTPResults* msg);
};

const ::kentik::synthetics::v202309::MetricData&
HTTPResults::_Internal::latency(const HTTPResults* msg) {
  return *msg->latency_;
}
const ::kentik::synthetics::v202309::HTTPResponseData&
HTTPResults::_Internal::response(const HTTPResults* msg) {
  return *msg->response_;
}
HTTPResults::HTTPResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.HTTPResults)
}
HTTPResults::HTTPResults(const HTTPResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  dst_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dst_ip().empty()) {
    dst_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dst_ip(),
      GetArena());
  }
  if (from._internal_has_latency()) {
    latency_ = new ::kentik::synthetics::v202309::MetricData(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::kentik::synthetics::v202309::HTTPResponseData(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.HTTPResults)
}

void HTTPResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HTTPResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&latency_)) + sizeof(response_));
}

HTTPResults::~HTTPResults() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.HTTPResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HTTPResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dst_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete latency_;
  if (this != internal_default_instance()) delete response_;
}

void HTTPResults::ArenaDtor(void* object) {
  HTTPResults* _this = reinterpret_cast< HTTPResults* >(object);
  (void)_this;
}
void HTTPResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HTTPResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HTTPResults& HTTPResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HTTPResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void HTTPResults::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.HTTPResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HTTPResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.HTTPResults.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.MetricData latency = 2[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.HTTPResponseData response = 4[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_dst_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.HTTPResults.dst_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HTTPResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.HTTPResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.HTTPResults.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // .kentik.synthetics.v202309.MetricData latency = 2[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::latency(this), target, stream);
  }

  // .kentik.synthetics.v202309.HTTPResponseData response = 4[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::response(this), target, stream);
  }

  // string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dst_ip().data(), static_cast<int>(this->_internal_dst_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.HTTPResults.dst_ip");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_dst_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.HTTPResults)
  return target;
}

size_t HTTPResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.HTTPResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string dst_ip = 5[json_name = "dstIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dst_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dst_ip());
  }

  // .kentik.synthetics.v202309.MetricData latency = 2[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_);
  }

  // .kentik.synthetics.v202309.HTTPResponseData response = 4[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HTTPResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.HTTPResults)
  GOOGLE_DCHECK_NE(&from, this);
  const HTTPResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HTTPResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.HTTPResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.HTTPResults)
    MergeFrom(*source);
  }
}

void HTTPResults::MergeFrom(const HTTPResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.HTTPResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.dst_ip().size() > 0) {
    _internal_set_dst_ip(from._internal_dst_ip());
  }
  if (from.has_latency()) {
    _internal_mutable_latency()->::kentik::synthetics::v202309::MetricData::MergeFrom(from._internal_latency());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::kentik::synthetics::v202309::HTTPResponseData::MergeFrom(from._internal_response());
  }
}

void HTTPResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.HTTPResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HTTPResults::CopyFrom(const HTTPResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.HTTPResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HTTPResults::IsInitialized() const {
  return true;
}

void HTTPResults::InternalSwap(HTTPResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dst_ip_.Swap(&other->dst_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HTTPResults, response_)
      + sizeof(HTTPResults::response_)
      - PROTOBUF_FIELD_OFFSET(HTTPResults, latency_)>(
          reinterpret_cast<char*>(&latency_),
          reinterpret_cast<char*>(&other->latency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HTTPResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DNSResponseData::InitAsDefaultInstance() {
}
class DNSResponseData::_Internal {
 public:
};

DNSResponseData::DNSResponseData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DNSResponseData)
}
DNSResponseData::DNSResponseData(const DNSResponseData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DNSResponseData)
}

void DNSResponseData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DNSResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
}

DNSResponseData::~DNSResponseData() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DNSResponseData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DNSResponseData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DNSResponseData::ArenaDtor(void* object) {
  DNSResponseData* _this = reinterpret_cast< DNSResponseData* >(object);
  (void)_this;
}
void DNSResponseData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DNSResponseData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DNSResponseData& DNSResponseData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DNSResponseData_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DNSResponseData::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DNSResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSResponseData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 2[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.DNSResponseData.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DNSResponseData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DNSResponseData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // string data = 2[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.DNSResponseData.data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DNSResponseData)
  return target;
}

size_t DNSResponseData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DNSResponseData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 2[json_name = "data", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint32 status = 1[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNSResponseData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DNSResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSResponseData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DNSResponseData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DNSResponseData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DNSResponseData)
    MergeFrom(*source);
  }
}

void DNSResponseData::MergeFrom(const DNSResponseData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DNSResponseData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void DNSResponseData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DNSResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSResponseData::CopyFrom(const DNSResponseData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DNSResponseData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSResponseData::IsInitialized() const {
  return true;
}

void DNSResponseData::InternalSwap(DNSResponseData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSResponseData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DNSResults::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_DNSResults_default_instance_._instance.get_mutable()->latency_ = const_cast< ::kentik::synthetics::v202309::MetricData*>(
      ::kentik::synthetics::v202309::MetricData::internal_default_instance());
  ::kentik::synthetics::v202309::_DNSResults_default_instance_._instance.get_mutable()->response_ = const_cast< ::kentik::synthetics::v202309::DNSResponseData*>(
      ::kentik::synthetics::v202309::DNSResponseData::internal_default_instance());
}
class DNSResults::_Internal {
 public:
  static const ::kentik::synthetics::v202309::MetricData& latency(const DNSResults* msg);
  static const ::kentik::synthetics::v202309::DNSResponseData& response(const DNSResults* msg);
};

const ::kentik::synthetics::v202309::MetricData&
DNSResults::_Internal::latency(const DNSResults* msg) {
  return *msg->latency_;
}
const ::kentik::synthetics::v202309::DNSResponseData&
DNSResults::_Internal::response(const DNSResults* msg) {
  return *msg->response_;
}
DNSResults::DNSResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DNSResults)
}
DNSResults::DNSResults(const DNSResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target().empty()) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target(),
      GetArena());
  }
  server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server().empty()) {
    server_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_server(),
      GetArena());
  }
  if (from._internal_has_latency()) {
    latency_ = new ::kentik::synthetics::v202309::MetricData(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  if (from._internal_has_response()) {
    response_ = new ::kentik::synthetics::v202309::DNSResponseData(*from.response_);
  } else {
    response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DNSResults)
}

void DNSResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DNSResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&latency_)) + sizeof(response_));
}

DNSResults::~DNSResults() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DNSResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DNSResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete latency_;
  if (this != internal_default_instance()) delete response_;
}

void DNSResults::ArenaDtor(void* object) {
  DNSResults* _this = reinterpret_cast< DNSResults* >(object);
  (void)_this;
}
void DNSResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DNSResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DNSResults& DNSResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DNSResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DNSResults::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DNSResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
  if (GetArena() == nullptr && response_ != nullptr) {
    delete response_;
  }
  response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DNSResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.DNSResults.target"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server = 2[json_name = "server", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.DNSResults.server"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.DNSResponseData response = 5[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DNSResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DNSResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.DNSResults.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // string server = 2[json_name = "server", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->server().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server().data(), static_cast<int>(this->_internal_server().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.DNSResults.server");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server(), target);
  }

  // .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_latency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::latency(this), target, stream);
  }

  // .kentik.synthetics.v202309.DNSResponseData response = 5[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DNSResults)
  return target;
}

size_t DNSResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DNSResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1[json_name = "target", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string server = 2[json_name = "server", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->server().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server());
  }

  // .kentik.synthetics.v202309.MetricData latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_);
  }

  // .kentik.synthetics.v202309.DNSResponseData response = 5[json_name = "response", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DNSResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DNSResults)
  GOOGLE_DCHECK_NE(&from, this);
  const DNSResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DNSResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DNSResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DNSResults)
    MergeFrom(*source);
  }
}

void DNSResults::MergeFrom(const DNSResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DNSResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.target().size() > 0) {
    _internal_set_target(from._internal_target());
  }
  if (from.server().size() > 0) {
    _internal_set_server(from._internal_server());
  }
  if (from.has_latency()) {
    _internal_mutable_latency()->::kentik::synthetics::v202309::MetricData::MergeFrom(from._internal_latency());
  }
  if (from.has_response()) {
    _internal_mutable_response()->::kentik::synthetics::v202309::DNSResponseData::MergeFrom(from._internal_response());
  }
}

void DNSResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DNSResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DNSResults::CopyFrom(const DNSResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DNSResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DNSResults::IsInitialized() const {
  return true;
}

void DNSResults::InternalSwap(DNSResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  target_.Swap(&other->target_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  server_.Swap(&other->server_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DNSResults, response_)
      + sizeof(DNSResults::response_)
      - PROTOBUF_FIELD_OFFSET(DNSResults, latency_)>(
          reinterpret_cast<char*>(&latency_),
          reinterpret_cast<char*>(&other->latency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DNSResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskResults::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_TaskResults_default_instance_.ping_ = const_cast< ::kentik::synthetics::v202309::PingResults*>(
      ::kentik::synthetics::v202309::PingResults::internal_default_instance());
  ::kentik::synthetics::v202309::_TaskResults_default_instance_.http_ = const_cast< ::kentik::synthetics::v202309::HTTPResults*>(
      ::kentik::synthetics::v202309::HTTPResults::internal_default_instance());
  ::kentik::synthetics::v202309::_TaskResults_default_instance_.dns_ = const_cast< ::kentik::synthetics::v202309::DNSResults*>(
      ::kentik::synthetics::v202309::DNSResults::internal_default_instance());
}
class TaskResults::_Internal {
 public:
  static const ::kentik::synthetics::v202309::PingResults& ping(const TaskResults* msg);
  static const ::kentik::synthetics::v202309::HTTPResults& http(const TaskResults* msg);
  static const ::kentik::synthetics::v202309::DNSResults& dns(const TaskResults* msg);
};

const ::kentik::synthetics::v202309::PingResults&
TaskResults::_Internal::ping(const TaskResults* msg) {
  return *msg->task_type_.ping_;
}
const ::kentik::synthetics::v202309::HTTPResults&
TaskResults::_Internal::http(const TaskResults* msg) {
  return *msg->task_type_.http_;
}
const ::kentik::synthetics::v202309::DNSResults&
TaskResults::_Internal::dns(const TaskResults* msg) {
  return *msg->task_type_.dns_;
}
void TaskResults::set_allocated_ping(::kentik::synthetics::v202309::PingResults* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_task_type();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    task_type_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TaskResults.ping)
}
void TaskResults::set_allocated_http(::kentik::synthetics::v202309::HTTPResults* http) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_task_type();
  if (http) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(http);
    if (message_arena != submessage_arena) {
      http = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, http, submessage_arena);
    }
    set_has_http();
    task_type_.http_ = http;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TaskResults.http)
}
void TaskResults::set_allocated_dns(::kentik::synthetics::v202309::DNSResults* dns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_task_type();
  if (dns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dns);
    if (message_arena != submessage_arena) {
      dns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dns, submessage_arena);
    }
    set_has_dns();
    task_type_.dns_ = dns;
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.synthetics.v202309.TaskResults.dns)
}
TaskResults::TaskResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.TaskResults)
}
TaskResults::TaskResults(const TaskResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_health().empty()) {
    health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_health(),
      GetArena());
  }
  clear_has_task_type();
  switch (from.task_type_case()) {
    case kPing: {
      _internal_mutable_ping()->::kentik::synthetics::v202309::PingResults::MergeFrom(from._internal_ping());
      break;
    }
    case kHttp: {
      _internal_mutable_http()->::kentik::synthetics::v202309::HTTPResults::MergeFrom(from._internal_http());
      break;
    }
    case kDns: {
      _internal_mutable_dns()->::kentik::synthetics::v202309::DNSResults::MergeFrom(from._internal_dns());
      break;
    }
    case TASK_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.TaskResults)
}

void TaskResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_task_type();
}

TaskResults::~TaskResults() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.TaskResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TaskResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_task_type()) {
    clear_task_type();
  }
}

void TaskResults::ArenaDtor(void* object) {
  TaskResults* _this = reinterpret_cast< TaskResults* >(object);
  (void)_this;
}
void TaskResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TaskResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskResults& TaskResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TaskResults::clear_task_type() {
// @@protoc_insertion_point(one_of_clear_start:kentik.synthetics.v202309.TaskResults)
  switch (task_type_case()) {
    case kPing: {
      if (GetArena() == nullptr) {
        delete task_type_.ping_;
      }
      break;
    }
    case kHttp: {
      if (GetArena() == nullptr) {
        delete task_type_.http_;
      }
      break;
    }
    case kDns: {
      if (GetArena() == nullptr) {
        delete task_type_.dns_;
      }
      break;
    }
    case TASK_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TASK_TYPE_NOT_SET;
}


void TaskResults::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.TaskResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_task_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.PingResults ping = 1[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.HTTPResults http = 2[json_name = "http", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_http(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.DNSResults dns = 3[json_name = "dns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dns(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TaskResults.health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.TaskResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.PingResults ping = 1[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ping(this), target, stream);
  }

  // .kentik.synthetics.v202309.HTTPResults http = 2[json_name = "http", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_http()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::http(this), target, stream);
  }

  // .kentik.synthetics.v202309.DNSResults dns = 3[json_name = "dns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (_internal_has_dns()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dns(this), target, stream);
  }

  // string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_health().data(), static_cast<int>(this->_internal_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TaskResults.health");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_health(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.TaskResults)
  return target;
}

size_t TaskResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.TaskResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string health = 4[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_health());
  }

  switch (task_type_case()) {
    // .kentik.synthetics.v202309.PingResults ping = 1[json_name = "ping", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_type_.ping_);
      break;
    }
    // .kentik.synthetics.v202309.HTTPResults http = 2[json_name = "http", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kHttp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_type_.http_);
      break;
    }
    // .kentik.synthetics.v202309.DNSResults dns = 3[json_name = "dns", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
    case kDns: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *task_type_.dns_);
      break;
    }
    case TASK_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.TaskResults)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.TaskResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.TaskResults)
    MergeFrom(*source);
  }
}

void TaskResults::MergeFrom(const TaskResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.TaskResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.health().size() > 0) {
    _internal_set_health(from._internal_health());
  }
  switch (from.task_type_case()) {
    case kPing: {
      _internal_mutable_ping()->::kentik::synthetics::v202309::PingResults::MergeFrom(from._internal_ping());
      break;
    }
    case kHttp: {
      _internal_mutable_http()->::kentik::synthetics::v202309::HTTPResults::MergeFrom(from._internal_http());
      break;
    }
    case kDns: {
      _internal_mutable_dns()->::kentik::synthetics::v202309::DNSResults::MergeFrom(from._internal_dns());
      break;
    }
    case TASK_TYPE_NOT_SET: {
      break;
    }
  }
}

void TaskResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.TaskResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskResults::CopyFrom(const TaskResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.TaskResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskResults::IsInitialized() const {
  return true;
}

void TaskResults::InternalSwap(TaskResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  health_.Swap(&other->health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(task_type_, other->task_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentResults::InitAsDefaultInstance() {
}
class AgentResults::_Internal {
 public:
};

AgentResults::AgentResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tasks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.AgentResults)
}
AgentResults::AgentResults(const AgentResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tasks_(from.tasks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agent_id(),
      GetArena());
  }
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_health().empty()) {
    health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_health(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.AgentResults)
}

void AgentResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AgentResults::~AgentResults() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.AgentResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgentResults::ArenaDtor(void* object) {
  AgentResults* _this = reinterpret_cast< AgentResults* >(object);
  (void)_this;
}
void AgentResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentResults& AgentResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void AgentResults::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.AgentResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tasks_.Clear();
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.AgentResults.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.AgentResults.health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202309.TaskResults tasks = 3[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.AgentResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.AgentResults.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_health().data(), static_cast<int>(this->_internal_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.AgentResults.health");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_health(), target);
  }

  // repeated .kentik.synthetics.v202309.TaskResults tasks = 3[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_tasks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.AgentResults)
  return target;
}

size_t AgentResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.AgentResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.TaskResults tasks = 3[json_name = "tasks", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string health = 2[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_health());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.AgentResults)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.AgentResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.AgentResults)
    MergeFrom(*source);
  }
}

void AgentResults::MergeFrom(const AgentResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.AgentResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tasks_.MergeFrom(from.tasks_);
  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.health().size() > 0) {
    _internal_set_health(from._internal_health());
  }
}

void AgentResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.AgentResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentResults::CopyFrom(const AgentResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.AgentResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentResults::IsInitialized() const {
  return true;
}

void AgentResults::InternalSwap(AgentResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tasks_.InternalSwap(&other->tasks_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  health_.Swap(&other->health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TestResults::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_TestResults_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class TestResults::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const TestResults* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
TestResults::_Internal::time(const TestResults* msg) {
  return *msg->time_;
}
void TestResults::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
TestResults::TestResults(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.TestResults)
}
TestResults::TestResults(const TestResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  test_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_test_id().empty()) {
    test_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_test_id(),
      GetArena());
  }
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_health().empty()) {
    health_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_health(),
      GetArena());
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.TestResults)
}

void TestResults::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TestResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  test_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = nullptr;
}

TestResults::~TestResults() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.TestResults)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TestResults::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  test_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  health_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete time_;
}

void TestResults::ArenaDtor(void* object) {
  TestResults* _this = reinterpret_cast< TestResults* >(object);
  (void)_this;
}
void TestResults::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TestResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TestResults& TestResults::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TestResults_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TestResults::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.TestResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  test_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  health_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestResults::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string test_id = 1[json_name = "testId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_test_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TestResults.test_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 2[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string health = 3[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_health();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TestResults.health"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202309.AgentResults agents = 4[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TestResults::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.TestResults)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string test_id = 1[json_name = "testId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->test_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_test_id().data(), static_cast<int>(this->_internal_test_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TestResults.test_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_test_id(), target);
  }

  // .google.protobuf.Timestamp time = 2[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time(this), target, stream);
  }

  // string health = 3[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_health().data(), static_cast<int>(this->_internal_health().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TestResults.health");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_health(), target);
  }

  // repeated .kentik.synthetics.v202309.AgentResults agents = 4[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_agents(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.TestResults)
  return target;
}

size_t TestResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.TestResults)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.AgentResults agents = 4[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string test_id = 1[json_name = "testId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->test_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_test_id());
  }

  // string health = 3[json_name = "health", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->health().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_health());
  }

  // .google.protobuf.Timestamp time = 2[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TestResults::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.TestResults)
  GOOGLE_DCHECK_NE(&from, this);
  const TestResults* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TestResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.TestResults)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.TestResults)
    MergeFrom(*source);
  }
}

void TestResults::MergeFrom(const TestResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.TestResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.test_id().size() > 0) {
    _internal_set_test_id(from._internal_test_id());
  }
  if (from.health().size() > 0) {
    _internal_set_health(from._internal_health());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
}

void TestResults::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.TestResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestResults::CopyFrom(const TestResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.TestResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResults::IsInitialized() const {
  return true;
}

void TestResults::InternalSwap(TestResults* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  test_id_.Swap(&other->test_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  health_.Swap(&other->health_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TestResults::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Stats::InitAsDefaultInstance() {
}
class Stats::_Internal {
 public:
};

Stats::Stats(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.Stats)
}
Stats::Stats(const Stats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&average_, &from.average_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&average_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.Stats)
}

void Stats::SharedCtor() {
  ::memset(&average_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&average_)) + sizeof(max_));
}

Stats::~Stats() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.Stats)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stats::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Stats::ArenaDtor(void* object) {
  Stats* _this = reinterpret_cast< Stats* >(object);
  (void)_this;
}
void Stats::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stats& Stats::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stats_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&average_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&average_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stats::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 average = 1[json_name = "average", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          average_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 min = 2[json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max = 3[json_name = "max", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stats::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.Stats)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 average = 1[json_name = "average", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->average() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_average(), target);
  }

  // int32 min = 2[json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_min(), target);
  }

  // int32 max = 3[json_name = "max", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.Stats)
  return target;
}

size_t Stats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.Stats)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 average = 1[json_name = "average", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->average() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_average());
  }

  // int32 min = 2[json_name = "min", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->min() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_min());
  }

  // int32 max = 3[json_name = "max", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stats::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  const Stats* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.Stats)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.Stats)
    MergeFrom(*source);
  }
}

void Stats::MergeFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.Stats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.average() != 0) {
    _internal_set_average(from._internal_average());
  }
  if (from.min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from.max() != 0) {
    _internal_set_max(from._internal_max());
  }
}

void Stats::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stats::CopyFrom(const Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stats::IsInitialized() const {
  return true;
}

void Stats::InternalSwap(Stats* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stats, max_)
      + sizeof(Stats::max_)
      - PROTOBUF_FIELD_OFFSET(Stats, average_)>(
          reinterpret_cast<char*>(&average_),
          reinterpret_cast<char*>(&other->average_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stats::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Location::InitAsDefaultInstance() {
}
class Location::_Internal {
 public:
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_country().empty()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_region().empty()) {
    region_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_region(),
      GetArena());
  }
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_city().empty()) {
    city_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_city(),
      GetArena());
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.Location)
}

void Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Location_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.Location)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  region_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  city_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Location& Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Location_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string country = 1[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Location.country"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string region = 2[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_region();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Location.region"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string city = 3[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_city();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Location.city"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double latitude = 8[json_name = "latitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude = 9[json_name = "longitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string country = 1[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->country().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Location.country");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_country(), target);
  }

  // string region = 2[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->region().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_region().data(), static_cast<int>(this->_internal_region().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Location.region");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_region(), target);
  }

  // string city = 3[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->city().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_city().data(), static_cast<int>(this->_internal_city().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Location.city");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_city(), target);
  }

  // double latitude = 8[json_name = "latitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_latitude(), target);
  }

  // double longitude = 9[json_name = "longitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string country = 1[json_name = "country", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->country().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  // string region = 2[json_name = "region", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->region().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_region());
  }

  // string city = 3[json_name = "city", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->city().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_city());
  }

  // double latitude = 8[json_name = "latitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude = 9[json_name = "longitude", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.country().size() > 0) {
    _internal_set_country(from._internal_country());
  }
  if (from.region().size() > 0) {
    _internal_set_region(from._internal_region());
  }
  if (from.city().size() > 0) {
    _internal_set_city(from._internal_city());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
}

void Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  region_.Swap(&other->region_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  city_.Swap(&other->city_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, longitude_)
      + sizeof(Location::longitude_)
      - PROTOBUF_FIELD_OFFSET(Location, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetNode::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_NetNode_default_instance_._instance.get_mutable()->location_ = const_cast< ::kentik::synthetics::v202309::Location*>(
      ::kentik::synthetics::v202309::Location::internal_default_instance());
}
class NetNode::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Location& location(const NetNode* msg);
};

const ::kentik::synthetics::v202309::Location&
NetNode::_Internal::location(const NetNode* msg) {
  return *msg->location_;
}
NetNode::NetNode(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.NetNode)
}
NetNode::NetNode(const NetNode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  as_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_as_name().empty()) {
    as_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_as_name(),
      GetArena());
  }
  dns_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dns_name().empty()) {
    dns_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dns_name(),
      GetArena());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_device_id(),
      GetArena());
  }
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_site_id().empty()) {
    site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_id(),
      GetArena());
  }
  if (from._internal_has_location()) {
    location_ = new ::kentik::synthetics::v202309::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  asn_ = from.asn_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.NetNode)
}

void NetNode::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetNode_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dns_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&asn_) -
      reinterpret_cast<char*>(&location_)) + sizeof(asn_));
}

NetNode::~NetNode() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.NetNode)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NetNode::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  as_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dns_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  site_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
}

void NetNode::ArenaDtor(void* object) {
  NetNode* _this = reinterpret_cast< NetNode* >(object);
  (void)_this;
}
void NetNode::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NetNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetNode& NetNode::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetNode_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void NetNode::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.NetNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  as_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dns_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  asn_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NetNode::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 2[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.NetNode.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          asn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string as_name = 4[json_name = "asName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_as_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.NetNode.as_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.Location location = 5[json_name = "location", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dns_name = 6[json_name = "dnsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_dns_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.NetNode.dns_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string device_id = 7[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.NetNode.device_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string site_id = 8[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_site_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.NetNode.site_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetNode::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.NetNode)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 2[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.NetNode.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // uint32 asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->asn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_asn(), target);
  }

  // string as_name = 4[json_name = "asName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->as_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_as_name().data(), static_cast<int>(this->_internal_as_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.NetNode.as_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_as_name(), target);
  }

  // .kentik.synthetics.v202309.Location location = 5[json_name = "location", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::location(this), target, stream);
  }

  // string dns_name = 6[json_name = "dnsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dns_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dns_name().data(), static_cast<int>(this->_internal_dns_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.NetNode.dns_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_dns_name(), target);
  }

  // string device_id = 7[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_id().data(), static_cast<int>(this->_internal_device_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.NetNode.device_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_device_id(), target);
  }

  // string site_id = 8[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_id().data(), static_cast<int>(this->_internal_site_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.NetNode.site_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_site_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.NetNode)
  return target;
}

size_t NetNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.NetNode)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string as_name = 4[json_name = "asName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->as_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_as_name());
  }

  // string dns_name = 6[json_name = "dnsName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->dns_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dns_name());
  }

  // string device_id = 7[json_name = "deviceId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->device_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_id());
  }

  // string site_id = 8[json_name = "siteId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->site_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_id());
  }

  // .kentik.synthetics.v202309.Location location = 5[json_name = "location", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // uint32 asn = 3[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->asn() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_asn());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetNode::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.NetNode)
  GOOGLE_DCHECK_NE(&from, this);
  const NetNode* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.NetNode)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.NetNode)
    MergeFrom(*source);
  }
}

void NetNode::MergeFrom(const NetNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.NetNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.as_name().size() > 0) {
    _internal_set_as_name(from._internal_as_name());
  }
  if (from.dns_name().size() > 0) {
    _internal_set_dns_name(from._internal_dns_name());
  }
  if (from.device_id().size() > 0) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.site_id().size() > 0) {
    _internal_set_site_id(from._internal_site_id());
  }
  if (from.has_location()) {
    _internal_mutable_location()->::kentik::synthetics::v202309::Location::MergeFrom(from._internal_location());
  }
  if (from.asn() != 0) {
    _internal_set_asn(from._internal_asn());
  }
}

void NetNode::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.NetNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetNode::CopyFrom(const NetNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.NetNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetNode::IsInitialized() const {
  return true;
}

void NetNode::InternalSwap(NetNode* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  as_name_.Swap(&other->as_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dns_name_.Swap(&other->dns_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  device_id_.Swap(&other->device_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  site_id_.Swap(&other->site_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NetNode, asn_)
      + sizeof(NetNode::asn_)
      - PROTOBUF_FIELD_OFFSET(NetNode, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NetNode::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TraceHop::InitAsDefaultInstance() {
}
class TraceHop::_Internal {
 public:
};

TraceHop::TraceHop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.TraceHop)
}
TraceHop::TraceHop(const TraceHop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_node_id().empty()) {
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_node_id(),
      GetArena());
  }
  latency_ = from.latency_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.TraceHop)
}

void TraceHop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TraceHop_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  latency_ = 0;
}

TraceHop::~TraceHop() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.TraceHop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TraceHop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TraceHop::ArenaDtor(void* object) {
  TraceHop* _this = reinterpret_cast< TraceHop* >(object);
  (void)_this;
}
void TraceHop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TraceHop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TraceHop& TraceHop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TraceHop_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void TraceHop::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.TraceHop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  latency_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TraceHop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string node_id = 5[json_name = "nodeId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.TraceHop.node_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TraceHop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.TraceHop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_latency(), target);
  }

  // string node_id = 5[json_name = "nodeId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->node_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.TraceHop.node_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.TraceHop)
  return target;
}

size_t TraceHop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.TraceHop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 5[json_name = "nodeId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->node_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // int32 latency = 3[json_name = "latency", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_latency());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TraceHop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.TraceHop)
  GOOGLE_DCHECK_NE(&from, this);
  const TraceHop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TraceHop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.TraceHop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.TraceHop)
    MergeFrom(*source);
  }
}

void TraceHop::MergeFrom(const TraceHop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.TraceHop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.node_id().size() > 0) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from.latency() != 0) {
    _internal_set_latency(from._internal_latency());
  }
}

void TraceHop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.TraceHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceHop::CopyFrom(const TraceHop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.TraceHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceHop::IsInitialized() const {
  return true;
}

void TraceHop::InternalSwap(TraceHop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  node_id_.Swap(&other->node_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(latency_, other->latency_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TraceHop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PathTrace::InitAsDefaultInstance() {
}
class PathTrace::_Internal {
 public:
};

PathTrace::PathTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  as_path_(arena),
  hops_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.PathTrace)
}
PathTrace::PathTrace(const PathTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      as_path_(from.as_path_),
      hops_(from.hops_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_complete_ = from.is_complete_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.PathTrace)
}

void PathTrace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PathTrace_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  is_complete_ = false;
}

PathTrace::~PathTrace() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.PathTrace)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PathTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PathTrace::ArenaDtor(void* object) {
  PathTrace* _this = reinterpret_cast< PathTrace* >(object);
  (void)_this;
}
void PathTrace::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PathTrace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PathTrace& PathTrace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PathTrace_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void PathTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.PathTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  as_path_.Clear();
  hops_.Clear();
  is_complete_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PathTrace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 as_path = 1[json_name = "asPath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_as_path(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_as_path(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_complete = 2[json_name = "isComplete", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_complete_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202309.TraceHop hops = 6[json_name = "hops", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PathTrace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.PathTrace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 as_path = 1[json_name = "asPath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    int byte_size = _as_path_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_as_path(), byte_size, target);
    }
  }

  // bool is_complete = 2[json_name = "isComplete", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->is_complete() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_complete(), target);
  }

  // repeated .kentik.synthetics.v202309.TraceHop hops = 6[json_name = "hops", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_hops(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.PathTrace)
  return target;
}

size_t PathTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.PathTrace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 as_path = 1[json_name = "asPath", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->as_path_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _as_path_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .kentik.synthetics.v202309.TraceHop hops = 6[json_name = "hops", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_hops_size();
  for (const auto& msg : this->hops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_complete = 2[json_name = "isComplete", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->is_complete() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PathTrace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.PathTrace)
  GOOGLE_DCHECK_NE(&from, this);
  const PathTrace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PathTrace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.PathTrace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.PathTrace)
    MergeFrom(*source);
  }
}

void PathTrace::MergeFrom(const PathTrace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.PathTrace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  as_path_.MergeFrom(from.as_path_);
  hops_.MergeFrom(from.hops_);
  if (from.is_complete() != 0) {
    _internal_set_is_complete(from._internal_is_complete());
  }
}

void PathTrace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.PathTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathTrace::CopyFrom(const PathTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.PathTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathTrace::IsInitialized() const {
  return true;
}

void PathTrace::InternalSwap(PathTrace* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  as_path_.InternalSwap(&other->as_path_);
  hops_.InternalSwap(&other->hops_);
  swap(is_complete_, other->is_complete_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PathTrace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Path::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_Path_default_instance_._instance.get_mutable()->hop_count_ = const_cast< ::kentik::synthetics::v202309::Stats*>(
      ::kentik::synthetics::v202309::Stats::internal_default_instance());
  ::kentik::synthetics::v202309::_Path_default_instance_._instance.get_mutable()->time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Path::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Stats& hop_count(const Path* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const Path* msg);
};

const ::kentik::synthetics::v202309::Stats&
Path::_Internal::hop_count(const Path* msg) {
  return *msg->hop_count_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
Path::_Internal::time(const Path* msg) {
  return *msg->time_;
}
void Path::clear_time() {
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  traces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      traces_(from.traces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agent_id(),
      GetArena());
  }
  target_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_target_ip().empty()) {
    target_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_target_ip(),
      GetArena());
  }
  if (from._internal_has_hop_count()) {
    hop_count_ = new ::kentik::synthetics::v202309::Stats(*from.hop_count_);
  } else {
    hop_count_ = nullptr;
  }
  if (from._internal_has_time()) {
    time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  max_as_path_length_ = from.max_as_path_length_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.Path)
}

void Path::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Path_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hop_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_as_path_length_) -
      reinterpret_cast<char*>(&hop_count_)) + sizeof(max_as_path_length_));
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.Path)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete hop_count_;
  if (this != internal_default_instance()) delete time_;
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Path& Path::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Path_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  traces_.Clear();
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && hop_count_ != nullptr) {
    delete hop_count_;
  }
  hop_count_ = nullptr;
  if (GetArena() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  max_as_path_length_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Path.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string target_ip = 3[json_name = "targetIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_target_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.Path.target_ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.Stats hop_count = 4[json_name = "hopCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hop_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_as_path_length = 7[json_name = "maxAsPathLength", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          max_as_path_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202309.PathTrace traces = 8[json_name = "traces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 9[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Path::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.Path)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Path.agent_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_id(), target);
  }

  // string target_ip = 3[json_name = "targetIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target_ip().data(), static_cast<int>(this->_internal_target_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.Path.target_ip");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target_ip(), target);
  }

  // .kentik.synthetics.v202309.Stats hop_count = 4[json_name = "hopCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_hop_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hop_count(this), target, stream);
  }

  // int32 max_as_path_length = 7[json_name = "maxAsPathLength", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_as_path_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_max_as_path_length(), target);
  }

  // repeated .kentik.synthetics.v202309.PathTrace traces = 8[json_name = "traces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_traces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_traces(i), target, stream);
  }

  // .google.protobuf.Timestamp time = 9[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.Path)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.PathTrace traces = 8[json_name = "traces", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_traces_size();
  for (const auto& msg : this->traces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string agent_id = 1[json_name = "agentId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string target_ip = 3[json_name = "targetIp", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->target_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target_ip());
  }

  // .kentik.synthetics.v202309.Stats hop_count = 4[json_name = "hopCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_hop_count()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hop_count_);
  }

  // .google.protobuf.Timestamp time = 9[json_name = "time", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // int32 max_as_path_length = 7[json_name = "maxAsPathLength", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->max_as_path_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_as_path_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Path::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.Path)
  GOOGLE_DCHECK_NE(&from, this);
  const Path* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Path>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.Path)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.Path)
    MergeFrom(*source);
  }
}

void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.Path)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  traces_.MergeFrom(from.traces_);
  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.target_ip().size() > 0) {
    _internal_set_target_ip(from._internal_target_ip());
  }
  if (from.has_hop_count()) {
    _internal_mutable_hop_count()->::kentik::synthetics::v202309::Stats::MergeFrom(from._internal_hop_count());
  }
  if (from.has_time()) {
    _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from.max_as_path_length() != 0) {
    _internal_set_max_as_path_length(from._internal_max_as_path_length());
  }
}

void Path::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  traces_.InternalSwap(&other->traces_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  target_ip_.Swap(&other->target_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Path, max_as_path_length_)
      + sizeof(Path::max_as_path_length_)
      - PROTOBUF_FIELD_OFFSET(Path, hop_count_)>(
          reinterpret_cast<char*>(&hop_count_),
          reinterpret_cast<char*>(&other->hop_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetResultsForTestsRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_GetResultsForTestsRequest_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202309::_GetResultsForTestsRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetResultsForTestsRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const GetResultsForTestsRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const GetResultsForTestsRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetResultsForTestsRequest::_Internal::start_time(const GetResultsForTestsRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetResultsForTestsRequest::_Internal::end_time(const GetResultsForTestsRequest* msg) {
  return *msg->end_time_;
}
void GetResultsForTestsRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void GetResultsForTestsRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
GetResultsForTestsRequest::GetResultsForTestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ids_(arena),
  agent_ids_(arena),
  targets_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetResultsForTestsRequest)
}
GetResultsForTestsRequest::GetResultsForTestsRequest(const GetResultsForTestsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ids_(from.ids_),
      agent_ids_(from.agent_ids_),
      targets_(from.targets_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  aggregate_ = from.aggregate_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetResultsForTestsRequest)
}

void GetResultsForTestsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResultsForTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&aggregate_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(aggregate_));
}

GetResultsForTestsRequest::~GetResultsForTestsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetResultsForTestsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResultsForTestsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void GetResultsForTestsRequest::ArenaDtor(void* object) {
  GetResultsForTestsRequest* _this = reinterpret_cast< GetResultsForTestsRequest* >(object);
  (void)_this;
}
void GetResultsForTestsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResultsForTestsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResultsForTestsRequest& GetResultsForTestsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResultsForTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetResultsForTestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetResultsForTestsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ids_.Clear();
  agent_ids_.Clear();
  targets_.Clear();
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  aggregate_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResultsForTestsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetResultsForTestsRequest.ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agent_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string targets = 5[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_targets();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetResultsForTestsRequest.targets"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool aggregate = 6[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          aggregate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResultsForTestsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetResultsForTestsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetResultsForTestsRequest.ids");
    target = stream->WriteString(1, s, target);
  }

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  // repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_agent_ids_size(); i < n; i++) {
    const auto& s = this->_internal_agent_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetResultsForTestsRequest.agent_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string targets = 5[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_targets_size(); i < n; i++) {
    const auto& s = this->_internal_targets(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetResultsForTestsRequest.targets");
    target = stream->WriteString(5, s, target);
  }

  // bool aggregate = 6[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->aggregate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_aggregate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetResultsForTestsRequest)
  return target;
}

size_t GetResultsForTestsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetResultsForTestsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ids = 1[json_name = "ids", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ids_.size());
  for (int i = 0, n = ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ids_.Get(i));
  }

  // repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(agent_ids_.size());
  for (int i = 0, n = agent_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      agent_ids_.Get(i));
  }

  // repeated string targets = 5[json_name = "targets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(targets_.size());
  for (int i = 0, n = targets_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      targets_.Get(i));
  }

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // bool aggregate = 6[json_name = "aggregate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->aggregate() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResultsForTestsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetResultsForTestsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResultsForTestsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResultsForTestsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetResultsForTestsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetResultsForTestsRequest)
    MergeFrom(*source);
  }
}

void GetResultsForTestsRequest::MergeFrom(const GetResultsForTestsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetResultsForTestsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ids_.MergeFrom(from.ids_);
  agent_ids_.MergeFrom(from.agent_ids_);
  targets_.MergeFrom(from.targets_);
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from.aggregate() != 0) {
    _internal_set_aggregate(from._internal_aggregate());
  }
}

void GetResultsForTestsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetResultsForTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResultsForTestsRequest::CopyFrom(const GetResultsForTestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetResultsForTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResultsForTestsRequest::IsInitialized() const {
  return true;
}

void GetResultsForTestsRequest::InternalSwap(GetResultsForTestsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ids_.InternalSwap(&other->ids_);
  agent_ids_.InternalSwap(&other->agent_ids_);
  targets_.InternalSwap(&other->targets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetResultsForTestsRequest, aggregate_)
      + sizeof(GetResultsForTestsRequest::aggregate_)
      - PROTOBUF_FIELD_OFFSET(GetResultsForTestsRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResultsForTestsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetResultsForTestsResponse::InitAsDefaultInstance() {
}
class GetResultsForTestsResponse::_Internal {
 public:
};

GetResultsForTestsResponse::GetResultsForTestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  results_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetResultsForTestsResponse)
}
GetResultsForTestsResponse::GetResultsForTestsResponse(const GetResultsForTestsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      results_(from.results_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetResultsForTestsResponse)
}

void GetResultsForTestsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetResultsForTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
}

GetResultsForTestsResponse::~GetResultsForTestsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetResultsForTestsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetResultsForTestsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetResultsForTestsResponse::ArenaDtor(void* object) {
  GetResultsForTestsResponse* _this = reinterpret_cast< GetResultsForTestsResponse* >(object);
  (void)_this;
}
void GetResultsForTestsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResultsForTestsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetResultsForTestsResponse& GetResultsForTestsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetResultsForTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetResultsForTestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetResultsForTestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  results_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResultsForTestsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202309.TestResults results = 1[json_name = "results"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetResultsForTestsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetResultsForTestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.TestResults results = 1[json_name = "results"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_results_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_results(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetResultsForTestsResponse)
  return target;
}

size_t GetResultsForTestsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetResultsForTestsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.TestResults results = 1[json_name = "results"];
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResultsForTestsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetResultsForTestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetResultsForTestsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetResultsForTestsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetResultsForTestsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetResultsForTestsResponse)
    MergeFrom(*source);
  }
}

void GetResultsForTestsResponse::MergeFrom(const GetResultsForTestsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetResultsForTestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  results_.MergeFrom(from.results_);
}

void GetResultsForTestsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetResultsForTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetResultsForTestsResponse::CopyFrom(const GetResultsForTestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetResultsForTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResultsForTestsResponse::IsInitialized() const {
  return true;
}

void GetResultsForTestsResponse::InternalSwap(GetResultsForTestsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  results_.InternalSwap(&other->results_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResultsForTestsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTraceForTestRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_GetTraceForTestRequest_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::synthetics::v202309::_GetTraceForTestRequest_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class GetTraceForTestRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const GetTraceForTestRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const GetTraceForTestRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
GetTraceForTestRequest::_Internal::start_time(const GetTraceForTestRequest* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
GetTraceForTestRequest::_Internal::end_time(const GetTraceForTestRequest* msg) {
  return *msg->end_time_;
}
void GetTraceForTestRequest::clear_start_time() {
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void GetTraceForTestRequest::clear_end_time() {
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
GetTraceForTestRequest::GetTraceForTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_ids_(arena),
  target_ips_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetTraceForTestRequest)
}
GetTraceForTestRequest::GetTraceForTestRequest(const GetTraceForTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_ids_(from.agent_ids_),
      target_ips_(from.target_ips_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetTraceForTestRequest)
}

void GetTraceForTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(end_time_));
}

GetTraceForTestRequest::~GetTraceForTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetTraceForTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTraceForTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
}

void GetTraceForTestRequest::ArenaDtor(void* object) {
  GetTraceForTestRequest* _this = reinterpret_cast< GetTraceForTestRequest* >(object);
  (void)_this;
}
void GetTraceForTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTraceForTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTraceForTestRequest& GetTraceForTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTraceForTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetTraceForTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetTraceForTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_ids_.Clear();
  target_ips_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArena() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTraceForTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetTraceForTestRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agent_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string target_ips = 5[json_name = "targetIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target_ips();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetTraceForTestRequest.target_ips"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTraceForTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetTraceForTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetTraceForTestRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_start_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_end_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::end_time(this), target, stream);
  }

  // repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_agent_ids_size(); i < n; i++) {
    const auto& s = this->_internal_agent_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetTraceForTestRequest.agent_ids");
    target = stream->WriteString(4, s, target);
  }

  // repeated string target_ips = 5[json_name = "targetIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (int i = 0, n = this->_internal_target_ips_size(); i < n; i++) {
    const auto& s = this->_internal_target_ips(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetTraceForTestRequest.target_ips");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetTraceForTestRequest)
  return target;
}

size_t GetTraceForTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetTraceForTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string agent_ids = 4[json_name = "agentIds", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(agent_ids_.size());
  for (int i = 0, n = agent_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      agent_ids_.Get(i));
  }

  // repeated string target_ips = 5[json_name = "targetIps", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(target_ips_.size());
  for (int i = 0, n = target_ips_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      target_ips_.Get(i));
  }

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .google.protobuf.Timestamp start_time = 2[json_name = "startTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 3[json_name = "endTime", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTraceForTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetTraceForTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTraceForTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTraceForTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetTraceForTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetTraceForTestRequest)
    MergeFrom(*source);
  }
}

void GetTraceForTestRequest::MergeFrom(const GetTraceForTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetTraceForTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_ids_.MergeFrom(from.agent_ids_);
  target_ips_.MergeFrom(from.target_ips_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
}

void GetTraceForTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetTraceForTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTraceForTestRequest::CopyFrom(const GetTraceForTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetTraceForTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTraceForTestRequest::IsInitialized() const {
  return true;
}

void GetTraceForTestRequest::InternalSwap(GetTraceForTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_ids_.InternalSwap(&other->agent_ids_);
  target_ips_.InternalSwap(&other->target_ips_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, end_time_)
      + sizeof(GetTraceForTestRequest::end_time_)
      - PROTOBUF_FIELD_OFFSET(GetTraceForTestRequest, start_time_)>(
          reinterpret_cast<char*>(&start_time_),
          reinterpret_cast<char*>(&other->start_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTraceForTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GetTraceForTestResponse_NodesEntry_DoNotUse::GetTraceForTestResponse_NodesEntry_DoNotUse() {}
GetTraceForTestResponse_NodesEntry_DoNotUse::GetTraceForTestResponse_NodesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GetTraceForTestResponse_NodesEntry_DoNotUse::MergeFrom(const GetTraceForTestResponse_NodesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GetTraceForTestResponse_NodesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void GetTraceForTestResponse_NodesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void GetTraceForTestResponse::InitAsDefaultInstance() {
}
class GetTraceForTestResponse::_Internal {
 public:
};

GetTraceForTestResponse::GetTraceForTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  nodes_(arena),
  paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetTraceForTestResponse)
}
GetTraceForTestResponse::GetTraceForTestResponse(const GetTraceForTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nodes_.MergeFrom(from.nodes_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetTraceForTestResponse)
}

void GetTraceForTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
}

GetTraceForTestResponse::~GetTraceForTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetTraceForTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTraceForTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetTraceForTestResponse::ArenaDtor(void* object) {
  GetTraceForTestResponse* _this = reinterpret_cast< GetTraceForTestResponse* >(object);
  (void)_this;
}
void GetTraceForTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTraceForTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTraceForTestResponse& GetTraceForTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTraceForTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetTraceForTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetTraceForTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  paths_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTraceForTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, .kentik.synthetics.v202309.NetNode> nodes = 1[json_name = "nodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nodes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .kentik.synthetics.v202309.Path paths = 2[json_name = "paths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_paths(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTraceForTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetTraceForTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .kentik.synthetics.v202309.NetNode> nodes = 1[json_name = "nodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (!this->_internal_nodes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "kentik.synthetics.v202309.GetTraceForTestResponse.NodesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nodes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nodes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >::const_iterator
          it = this->_internal_nodes().begin();
          it != this->_internal_nodes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GetTraceForTestResponse_NodesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >::const_iterator
          it = this->_internal_nodes().begin();
          it != this->_internal_nodes().end(); ++it) {
        target = GetTraceForTestResponse_NodesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .kentik.synthetics.v202309.Path paths = 2[json_name = "paths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_paths_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_paths(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetTraceForTestResponse)
  return target;
}

size_t GetTraceForTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetTraceForTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .kentik.synthetics.v202309.NetNode> nodes = 1[json_name = "nodes", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nodes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::kentik::synthetics::v202309::NetNode >::const_iterator
      it = this->_internal_nodes().begin();
      it != this->_internal_nodes().end(); ++it) {
    total_size += GetTraceForTestResponse_NodesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .kentik.synthetics.v202309.Path paths = 2[json_name = "paths", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_paths_size();
  for (const auto& msg : this->paths_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTraceForTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetTraceForTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTraceForTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTraceForTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetTraceForTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetTraceForTestResponse)
    MergeFrom(*source);
  }
}

void GetTraceForTestResponse::MergeFrom(const GetTraceForTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetTraceForTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  paths_.MergeFrom(from.paths_);
}

void GetTraceForTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetTraceForTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTraceForTestResponse::CopyFrom(const GetTraceForTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetTraceForTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTraceForTestResponse::IsInitialized() const {
  return true;
}

void GetTraceForTestResponse::InternalSwap(GetTraceForTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  nodes_.Swap(&other->nodes_);
  paths_.InternalSwap(&other->paths_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTraceForTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAgentsRequest::InitAsDefaultInstance() {
}
class ListAgentsRequest::_Internal {
 public:
};

ListAgentsRequest::ListAgentsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.ListAgentsRequest)
}
ListAgentsRequest::ListAgentsRequest(const ListAgentsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.ListAgentsRequest)
}

void ListAgentsRequest::SharedCtor() {
}

ListAgentsRequest::~ListAgentsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.ListAgentsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAgentsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAgentsRequest::ArenaDtor(void* object) {
  ListAgentsRequest* _this = reinterpret_cast< ListAgentsRequest* >(object);
  (void)_this;
}
void ListAgentsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAgentsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAgentsRequest& ListAgentsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAgentsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListAgentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.ListAgentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAgentsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAgentsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.ListAgentsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.ListAgentsRequest)
  return target;
}

size_t ListAgentsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.ListAgentsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAgentsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.ListAgentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAgentsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAgentsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.ListAgentsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.ListAgentsRequest)
    MergeFrom(*source);
  }
}

void ListAgentsRequest::MergeFrom(const ListAgentsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.ListAgentsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListAgentsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.ListAgentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAgentsRequest::CopyFrom(const ListAgentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.ListAgentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAgentsRequest::IsInitialized() const {
  return true;
}

void ListAgentsRequest::InternalSwap(ListAgentsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAgentsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAgentsResponse::InitAsDefaultInstance() {
}
class ListAgentsResponse::_Internal {
 public:
};

ListAgentsResponse::ListAgentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agents_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.ListAgentsResponse)
}
ListAgentsResponse::ListAgentsResponse(const ListAgentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agents_(from.agents_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.ListAgentsResponse)
}

void ListAgentsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  invalid_count_ = 0u;
}

ListAgentsResponse::~ListAgentsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.ListAgentsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAgentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAgentsResponse::ArenaDtor(void* object) {
  ListAgentsResponse* _this = reinterpret_cast< ListAgentsResponse* >(object);
  (void)_this;
}
void ListAgentsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAgentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAgentsResponse& ListAgentsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAgentsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListAgentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.ListAgentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agents_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAgentsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202309.Agent agents = 1[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agents(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAgentsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.ListAgentsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.Agent agents = 1[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agents_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agents(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.ListAgentsResponse)
  return target;
}

size_t ListAgentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.ListAgentsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.Agent agents = 1[json_name = "agents", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_agents_size();
  for (const auto& msg : this->agents_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAgentsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.ListAgentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAgentsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAgentsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.ListAgentsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.ListAgentsResponse)
    MergeFrom(*source);
  }
}

void ListAgentsResponse::MergeFrom(const ListAgentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.ListAgentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agents_.MergeFrom(from.agents_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListAgentsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.ListAgentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAgentsResponse::CopyFrom(const ListAgentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.ListAgentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAgentsResponse::IsInitialized() const {
  return true;
}

void ListAgentsResponse::InternalSwap(ListAgentsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agents_.InternalSwap(&other->agents_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAgentsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAgentRequest::InitAsDefaultInstance() {
}
class GetAgentRequest::_Internal {
 public:
};

GetAgentRequest::GetAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetAgentRequest)
}
GetAgentRequest::GetAgentRequest(const GetAgentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetAgentRequest)
}

void GetAgentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAgentRequest::~GetAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetAgentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAgentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAgentRequest::ArenaDtor(void* object) {
  GetAgentRequest* _this = reinterpret_cast< GetAgentRequest* >(object);
  (void)_this;
}
void GetAgentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAgentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAgentRequest& GetAgentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAgentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetAgentRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAgentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetAgentRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetAgentRequest)
  return target;
}

size_t GetAgentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetAgentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAgentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAgentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAgentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetAgentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetAgentRequest)
    MergeFrom(*source);
  }
}

void GetAgentRequest::MergeFrom(const GetAgentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetAgentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentRequest::CopyFrom(const GetAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentRequest::IsInitialized() const {
  return true;
}

void GetAgentRequest::InternalSwap(GetAgentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAgentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAgentResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_GetAgentResponse_default_instance_._instance.get_mutable()->agent_ = const_cast< ::kentik::synthetics::v202309::Agent*>(
      ::kentik::synthetics::v202309::Agent::internal_default_instance());
}
class GetAgentResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Agent& agent(const GetAgentResponse* msg);
};

const ::kentik::synthetics::v202309::Agent&
GetAgentResponse::_Internal::agent(const GetAgentResponse* msg) {
  return *msg->agent_;
}
GetAgentResponse::GetAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetAgentResponse)
}
GetAgentResponse::GetAgentResponse(const GetAgentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent()) {
    agent_ = new ::kentik::synthetics::v202309::Agent(*from.agent_);
  } else {
    agent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetAgentResponse)
}

void GetAgentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_ = nullptr;
}

GetAgentResponse::~GetAgentResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetAgentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAgentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_;
}

void GetAgentResponse::ArenaDtor(void* object) {
  GetAgentResponse* _this = reinterpret_cast< GetAgentResponse* >(object);
  (void)_this;
}
void GetAgentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAgentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAgentResponse& GetAgentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetAgentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAgentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAgentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetAgentResponse)
  return target;
}

size_t GetAgentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetAgentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAgentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAgentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAgentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetAgentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetAgentResponse)
    MergeFrom(*source);
  }
}

void GetAgentResponse::MergeFrom(const GetAgentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent()) {
    _internal_mutable_agent()->::kentik::synthetics::v202309::Agent::MergeFrom(from._internal_agent());
  }
}

void GetAgentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentResponse::CopyFrom(const GetAgentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentResponse::IsInitialized() const {
  return true;
}

void GetAgentResponse::InternalSwap(GetAgentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(agent_, other->agent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAgentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAgentRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_UpdateAgentRequest_default_instance_._instance.get_mutable()->agent_ = const_cast< ::kentik::synthetics::v202309::Agent*>(
      ::kentik::synthetics::v202309::Agent::internal_default_instance());
}
class UpdateAgentRequest::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Agent& agent(const UpdateAgentRequest* msg);
};

const ::kentik::synthetics::v202309::Agent&
UpdateAgentRequest::_Internal::agent(const UpdateAgentRequest* msg) {
  return *msg->agent_;
}
UpdateAgentRequest::UpdateAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.UpdateAgentRequest)
}
UpdateAgentRequest::UpdateAgentRequest(const UpdateAgentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent()) {
    agent_ = new ::kentik::synthetics::v202309::Agent(*from.agent_);
  } else {
    agent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.UpdateAgentRequest)
}

void UpdateAgentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_ = nullptr;
}

UpdateAgentRequest::~UpdateAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.UpdateAgentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateAgentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_;
}

void UpdateAgentRequest::ArenaDtor(void* object) {
  UpdateAgentRequest* _this = reinterpret_cast< UpdateAgentRequest* >(object);
  (void)_this;
}
void UpdateAgentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAgentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAgentRequest& UpdateAgentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UpdateAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.UpdateAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAgentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAgentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.UpdateAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.UpdateAgentRequest)
  return target;
}

size_t UpdateAgentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.UpdateAgentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAgentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.UpdateAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAgentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAgentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.UpdateAgentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.UpdateAgentRequest)
    MergeFrom(*source);
  }
}

void UpdateAgentRequest::MergeFrom(const UpdateAgentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.UpdateAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent()) {
    _internal_mutable_agent()->::kentik::synthetics::v202309::Agent::MergeFrom(from._internal_agent());
  }
}

void UpdateAgentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.UpdateAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAgentRequest::CopyFrom(const UpdateAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.UpdateAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAgentRequest::IsInitialized() const {
  return true;
}

void UpdateAgentRequest::InternalSwap(UpdateAgentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(agent_, other->agent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAgentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAgentResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_UpdateAgentResponse_default_instance_._instance.get_mutable()->agent_ = const_cast< ::kentik::synthetics::v202309::Agent*>(
      ::kentik::synthetics::v202309::Agent::internal_default_instance());
}
class UpdateAgentResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Agent& agent(const UpdateAgentResponse* msg);
};

const ::kentik::synthetics::v202309::Agent&
UpdateAgentResponse::_Internal::agent(const UpdateAgentResponse* msg) {
  return *msg->agent_;
}
UpdateAgentResponse::UpdateAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.UpdateAgentResponse)
}
UpdateAgentResponse::UpdateAgentResponse(const UpdateAgentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent()) {
    agent_ = new ::kentik::synthetics::v202309::Agent(*from.agent_);
  } else {
    agent_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.UpdateAgentResponse)
}

void UpdateAgentResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_ = nullptr;
}

UpdateAgentResponse::~UpdateAgentResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.UpdateAgentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateAgentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_;
}

void UpdateAgentResponse::ArenaDtor(void* object) {
  UpdateAgentResponse* _this = reinterpret_cast< UpdateAgentResponse* >(object);
  (void)_this;
}
void UpdateAgentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAgentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAgentResponse& UpdateAgentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UpdateAgentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.UpdateAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_ != nullptr) {
    delete agent_;
  }
  agent_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAgentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAgentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.UpdateAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_agent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.UpdateAgentResponse)
  return target;
}

size_t UpdateAgentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.UpdateAgentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Agent agent = 1[json_name = "agent", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_agent()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAgentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.UpdateAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAgentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAgentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.UpdateAgentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.UpdateAgentResponse)
    MergeFrom(*source);
  }
}

void UpdateAgentResponse::MergeFrom(const UpdateAgentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.UpdateAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent()) {
    _internal_mutable_agent()->::kentik::synthetics::v202309::Agent::MergeFrom(from._internal_agent());
  }
}

void UpdateAgentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.UpdateAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAgentResponse::CopyFrom(const UpdateAgentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.UpdateAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAgentResponse::IsInitialized() const {
  return true;
}

void UpdateAgentResponse::InternalSwap(UpdateAgentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(agent_, other->agent_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAgentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAgentRequest::InitAsDefaultInstance() {
}
class DeleteAgentRequest::_Internal {
 public:
};

DeleteAgentRequest::DeleteAgentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DeleteAgentRequest)
}
DeleteAgentRequest::DeleteAgentRequest(const DeleteAgentRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DeleteAgentRequest)
}

void DeleteAgentRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteAgentRequest::~DeleteAgentRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DeleteAgentRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAgentRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteAgentRequest::ArenaDtor(void* object) {
  DeleteAgentRequest* _this = reinterpret_cast< DeleteAgentRequest* >(object);
  (void)_this;
}
void DeleteAgentRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAgentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAgentRequest& DeleteAgentRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAgentRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteAgentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DeleteAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAgentRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.DeleteAgentRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAgentRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DeleteAgentRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.DeleteAgentRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DeleteAgentRequest)
  return target;
}

size_t DeleteAgentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DeleteAgentRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAgentRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DeleteAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAgentRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAgentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DeleteAgentRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DeleteAgentRequest)
    MergeFrom(*source);
  }
}

void DeleteAgentRequest::MergeFrom(const DeleteAgentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DeleteAgentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteAgentRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DeleteAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAgentRequest::CopyFrom(const DeleteAgentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DeleteAgentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAgentRequest::IsInitialized() const {
  return true;
}

void DeleteAgentRequest::InternalSwap(DeleteAgentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAgentRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAgentResponse::InitAsDefaultInstance() {
}
class DeleteAgentResponse::_Internal {
 public:
};

DeleteAgentResponse::DeleteAgentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DeleteAgentResponse)
}
DeleteAgentResponse::DeleteAgentResponse(const DeleteAgentResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DeleteAgentResponse)
}

void DeleteAgentResponse::SharedCtor() {
}

DeleteAgentResponse::~DeleteAgentResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DeleteAgentResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAgentResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteAgentResponse::ArenaDtor(void* object) {
  DeleteAgentResponse* _this = reinterpret_cast< DeleteAgentResponse* >(object);
  (void)_this;
}
void DeleteAgentResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAgentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAgentResponse& DeleteAgentResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAgentResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteAgentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DeleteAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAgentResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAgentResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DeleteAgentResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DeleteAgentResponse)
  return target;
}

size_t DeleteAgentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DeleteAgentResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAgentResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DeleteAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAgentResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAgentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DeleteAgentResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DeleteAgentResponse)
    MergeFrom(*source);
  }
}

void DeleteAgentResponse::MergeFrom(const DeleteAgentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DeleteAgentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteAgentResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DeleteAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAgentResponse::CopyFrom(const DeleteAgentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DeleteAgentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAgentResponse::IsInitialized() const {
  return true;
}

void DeleteAgentResponse::InternalSwap(DeleteAgentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAgentResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTestsRequest::InitAsDefaultInstance() {
}
class ListTestsRequest::_Internal {
 public:
};

ListTestsRequest::ListTestsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.ListTestsRequest)
}
ListTestsRequest::ListTestsRequest(const ListTestsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.ListTestsRequest)
}

void ListTestsRequest::SharedCtor() {
}

ListTestsRequest::~ListTestsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.ListTestsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTestsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListTestsRequest::ArenaDtor(void* object) {
  ListTestsRequest* _this = reinterpret_cast< ListTestsRequest* >(object);
  (void)_this;
}
void ListTestsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTestsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTestsRequest& ListTestsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTestsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListTestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.ListTestsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTestsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTestsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.ListTestsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.ListTestsRequest)
  return target;
}

size_t ListTestsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.ListTestsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTestsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.ListTestsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTestsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTestsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.ListTestsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.ListTestsRequest)
    MergeFrom(*source);
  }
}

void ListTestsRequest::MergeFrom(const ListTestsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.ListTestsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListTestsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.ListTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTestsRequest::CopyFrom(const ListTestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.ListTestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTestsRequest::IsInitialized() const {
  return true;
}

void ListTestsRequest::InternalSwap(ListTestsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTestsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTestsResponse::InitAsDefaultInstance() {
}
class ListTestsResponse::_Internal {
 public:
};

ListTestsResponse::ListTestsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tests_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.ListTestsResponse)
}
ListTestsResponse::ListTestsResponse(const ListTestsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      tests_(from.tests_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.ListTestsResponse)
}

void ListTestsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  invalid_count_ = 0u;
}

ListTestsResponse::~ListTestsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.ListTestsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListTestsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListTestsResponse::ArenaDtor(void* object) {
  ListTestsResponse* _this = reinterpret_cast< ListTestsResponse* >(object);
  (void)_this;
}
void ListTestsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTestsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTestsResponse& ListTestsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTestsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListTestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.ListTestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tests_.Clear();
  invalid_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTestsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202309.Test tests = 1[json_name = "tests", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTestsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.ListTestsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.Test tests = 1[json_name = "tests", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tests_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_tests(i), target, stream);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.ListTestsResponse)
  return target;
}

size_t ListTestsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.ListTestsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.Test tests = 1[json_name = "tests", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_tests_size();
  for (const auto& msg : this->tests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTestsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.ListTestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTestsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTestsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.ListTestsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.ListTestsResponse)
    MergeFrom(*source);
  }
}

void ListTestsResponse::MergeFrom(const ListTestsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.ListTestsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tests_.MergeFrom(from.tests_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListTestsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.ListTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTestsResponse::CopyFrom(const ListTestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.ListTestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTestsResponse::IsInitialized() const {
  return true;
}

void ListTestsResponse::InternalSwap(ListTestsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  tests_.InternalSwap(&other->tests_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTestsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTestRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_CreateTestRequest_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202309::Test*>(
      ::kentik::synthetics::v202309::Test::internal_default_instance());
}
class CreateTestRequest::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Test& test(const CreateTestRequest* msg);
};

const ::kentik::synthetics::v202309::Test&
CreateTestRequest::_Internal::test(const CreateTestRequest* msg) {
  return *msg->test_;
}
CreateTestRequest::CreateTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.CreateTestRequest)
}
CreateTestRequest::CreateTestRequest(const CreateTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202309::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.CreateTestRequest)
}

void CreateTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

CreateTestRequest::~CreateTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.CreateTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void CreateTestRequest::ArenaDtor(void* object) {
  CreateTestRequest* _this = reinterpret_cast< CreateTestRequest* >(object);
  (void)_this;
}
void CreateTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTestRequest& CreateTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void CreateTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.CreateTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.CreateTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.CreateTestRequest)
  return target;
}

size_t CreateTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.CreateTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.CreateTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.CreateTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.CreateTestRequest)
    MergeFrom(*source);
  }
}

void CreateTestRequest::MergeFrom(const CreateTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.CreateTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202309::Test::MergeFrom(from._internal_test());
  }
}

void CreateTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.CreateTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTestRequest::CopyFrom(const CreateTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.CreateTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTestRequest::IsInitialized() const {
  return true;
}

void CreateTestRequest::InternalSwap(CreateTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateTestResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_CreateTestResponse_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202309::Test*>(
      ::kentik::synthetics::v202309::Test::internal_default_instance());
}
class CreateTestResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Test& test(const CreateTestResponse* msg);
};

const ::kentik::synthetics::v202309::Test&
CreateTestResponse::_Internal::test(const CreateTestResponse* msg) {
  return *msg->test_;
}
CreateTestResponse::CreateTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.CreateTestResponse)
}
CreateTestResponse::CreateTestResponse(const CreateTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202309::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.CreateTestResponse)
}

void CreateTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

CreateTestResponse::~CreateTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.CreateTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void CreateTestResponse::ArenaDtor(void* object) {
  CreateTestResponse* _this = reinterpret_cast< CreateTestResponse* >(object);
  (void)_this;
}
void CreateTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateTestResponse& CreateTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void CreateTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.CreateTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.CreateTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.CreateTestResponse)
  return target;
}

size_t CreateTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.CreateTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.CreateTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.CreateTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.CreateTestResponse)
    MergeFrom(*source);
  }
}

void CreateTestResponse::MergeFrom(const CreateTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.CreateTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202309::Test::MergeFrom(from._internal_test());
  }
}

void CreateTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.CreateTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTestResponse::CopyFrom(const CreateTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.CreateTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTestResponse::IsInitialized() const {
  return true;
}

void CreateTestResponse::InternalSwap(CreateTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTestRequest::InitAsDefaultInstance() {
}
class GetTestRequest::_Internal {
 public:
};

GetTestRequest::GetTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetTestRequest)
}
GetTestRequest::GetTestRequest(const GetTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetTestRequest)
}

void GetTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTestRequest::~GetTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTestRequest::ArenaDtor(void* object) {
  GetTestRequest* _this = reinterpret_cast< GetTestRequest* >(object);
  (void)_this;
}
void GetTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTestRequest& GetTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetTestRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetTestRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetTestRequest)
  return target;
}

size_t GetTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetTestRequest)
    MergeFrom(*source);
  }
}

void GetTestRequest::MergeFrom(const GetTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTestRequest::CopyFrom(const GetTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTestRequest::IsInitialized() const {
  return true;
}

void GetTestRequest::InternalSwap(GetTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTestResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_GetTestResponse_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202309::Test*>(
      ::kentik::synthetics::v202309::Test::internal_default_instance());
}
class GetTestResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Test& test(const GetTestResponse* msg);
};

const ::kentik::synthetics::v202309::Test&
GetTestResponse::_Internal::test(const GetTestResponse* msg) {
  return *msg->test_;
}
GetTestResponse::GetTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetTestResponse)
}
GetTestResponse::GetTestResponse(const GetTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202309::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetTestResponse)
}

void GetTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

GetTestResponse::~GetTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void GetTestResponse::ArenaDtor(void* object) {
  GetTestResponse* _this = reinterpret_cast< GetTestResponse* >(object);
  (void)_this;
}
void GetTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTestResponse& GetTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetTestResponse)
  return target;
}

size_t GetTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetTestResponse)
    MergeFrom(*source);
  }
}

void GetTestResponse::MergeFrom(const GetTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202309::Test::MergeFrom(from._internal_test());
  }
}

void GetTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTestResponse::CopyFrom(const GetTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTestResponse::IsInitialized() const {
  return true;
}

void GetTestResponse::InternalSwap(GetTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateTestRequest::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_UpdateTestRequest_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202309::Test*>(
      ::kentik::synthetics::v202309::Test::internal_default_instance());
}
class UpdateTestRequest::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Test& test(const UpdateTestRequest* msg);
};

const ::kentik::synthetics::v202309::Test&
UpdateTestRequest::_Internal::test(const UpdateTestRequest* msg) {
  return *msg->test_;
}
UpdateTestRequest::UpdateTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.UpdateTestRequest)
}
UpdateTestRequest::UpdateTestRequest(const UpdateTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202309::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.UpdateTestRequest)
}

void UpdateTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

UpdateTestRequest::~UpdateTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.UpdateTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void UpdateTestRequest::ArenaDtor(void* object) {
  UpdateTestRequest* _this = reinterpret_cast< UpdateTestRequest* >(object);
  (void)_this;
}
void UpdateTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTestRequest& UpdateTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UpdateTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.UpdateTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.UpdateTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.UpdateTestRequest)
  return target;
}

size_t UpdateTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.UpdateTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.UpdateTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.UpdateTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.UpdateTestRequest)
    MergeFrom(*source);
  }
}

void UpdateTestRequest::MergeFrom(const UpdateTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.UpdateTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202309::Test::MergeFrom(from._internal_test());
  }
}

void UpdateTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.UpdateTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTestRequest::CopyFrom(const UpdateTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.UpdateTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTestRequest::IsInitialized() const {
  return true;
}

void UpdateTestRequest::InternalSwap(UpdateTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateTestResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_UpdateTestResponse_default_instance_._instance.get_mutable()->test_ = const_cast< ::kentik::synthetics::v202309::Test*>(
      ::kentik::synthetics::v202309::Test::internal_default_instance());
}
class UpdateTestResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202309::Test& test(const UpdateTestResponse* msg);
};

const ::kentik::synthetics::v202309::Test&
UpdateTestResponse::_Internal::test(const UpdateTestResponse* msg) {
  return *msg->test_;
}
UpdateTestResponse::UpdateTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.UpdateTestResponse)
}
UpdateTestResponse::UpdateTestResponse(const UpdateTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_test()) {
    test_ = new ::kentik::synthetics::v202309::Test(*from.test_);
  } else {
    test_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.UpdateTestResponse)
}

void UpdateTestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  test_ = nullptr;
}

UpdateTestResponse::~UpdateTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.UpdateTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete test_;
}

void UpdateTestResponse::ArenaDtor(void* object) {
  UpdateTestResponse* _this = reinterpret_cast< UpdateTestResponse* >(object);
  (void)_this;
}
void UpdateTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTestResponse& UpdateTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UpdateTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.UpdateTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && test_ != nullptr) {
    delete test_;
  }
  test_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_test(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.UpdateTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::test(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.UpdateTestResponse)
  return target;
}

size_t UpdateTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.UpdateTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.Test test = 1[json_name = "test", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_test()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *test_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.UpdateTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.UpdateTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.UpdateTestResponse)
    MergeFrom(*source);
  }
}

void UpdateTestResponse::MergeFrom(const UpdateTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.UpdateTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_test()) {
    _internal_mutable_test()->::kentik::synthetics::v202309::Test::MergeFrom(from._internal_test());
  }
}

void UpdateTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.UpdateTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTestResponse::CopyFrom(const UpdateTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.UpdateTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTestResponse::IsInitialized() const {
  return true;
}

void UpdateTestResponse::InternalSwap(UpdateTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(test_, other->test_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTestRequest::InitAsDefaultInstance() {
}
class DeleteTestRequest::_Internal {
 public:
};

DeleteTestRequest::DeleteTestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DeleteTestRequest)
}
DeleteTestRequest::DeleteTestRequest(const DeleteTestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DeleteTestRequest)
}

void DeleteTestRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTestRequest::~DeleteTestRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DeleteTestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTestRequest::ArenaDtor(void* object) {
  DeleteTestRequest* _this = reinterpret_cast< DeleteTestRequest* >(object);
  (void)_this;
}
void DeleteTestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTestRequest& DeleteTestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTestRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteTestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DeleteTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.DeleteTestRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DeleteTestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.DeleteTestRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DeleteTestRequest)
  return target;
}

size_t DeleteTestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DeleteTestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DeleteTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DeleteTestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DeleteTestRequest)
    MergeFrom(*source);
  }
}

void DeleteTestRequest::MergeFrom(const DeleteTestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DeleteTestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteTestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DeleteTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTestRequest::CopyFrom(const DeleteTestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DeleteTestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTestRequest::IsInitialized() const {
  return true;
}

void DeleteTestRequest::InternalSwap(DeleteTestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTestResponse::InitAsDefaultInstance() {
}
class DeleteTestResponse::_Internal {
 public:
};

DeleteTestResponse::DeleteTestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DeleteTestResponse)
}
DeleteTestResponse::DeleteTestResponse(const DeleteTestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DeleteTestResponse)
}

void DeleteTestResponse::SharedCtor() {
}

DeleteTestResponse::~DeleteTestResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DeleteTestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteTestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteTestResponse::ArenaDtor(void* object) {
  DeleteTestResponse* _this = reinterpret_cast< DeleteTestResponse* >(object);
  (void)_this;
}
void DeleteTestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTestResponse& DeleteTestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTestResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteTestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DeleteTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DeleteTestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DeleteTestResponse)
  return target;
}

size_t DeleteTestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DeleteTestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DeleteTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DeleteTestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DeleteTestResponse)
    MergeFrom(*source);
  }
}

void DeleteTestResponse::MergeFrom(const DeleteTestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DeleteTestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteTestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DeleteTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTestResponse::CopyFrom(const DeleteTestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DeleteTestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTestResponse::IsInitialized() const {
  return true;
}

void DeleteTestResponse::InternalSwap(DeleteTestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTestStatusRequest::InitAsDefaultInstance() {
}
class SetTestStatusRequest::_Internal {
 public:
};

SetTestStatusRequest::SetTestStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.SetTestStatusRequest)
}
SetTestStatusRequest::SetTestStatusRequest(const SetTestStatusRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.SetTestStatusRequest)
}

void SetTestStatusRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

SetTestStatusRequest::~SetTestStatusRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.SetTestStatusRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetTestStatusRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetTestStatusRequest::ArenaDtor(void* object) {
  SetTestStatusRequest* _this = reinterpret_cast< SetTestStatusRequest* >(object);
  (void)_this;
}
void SetTestStatusRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTestStatusRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTestStatusRequest& SetTestStatusRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTestStatusRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void SetTestStatusRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.SetTestStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTestStatusRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.SetTestStatusRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.synthetics.v202309.TestStatus status = 2[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::kentik::synthetics::v202309::TestStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTestStatusRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.SetTestStatusRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.SetTestStatusRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .kentik.synthetics.v202309.TestStatus status = 2[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.SetTestStatusRequest)
  return target;
}

size_t SetTestStatusRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.SetTestStatusRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .kentik.synthetics.v202309.TestStatus status = 2[json_name = "status", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTestStatusRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.SetTestStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTestStatusRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTestStatusRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.SetTestStatusRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.SetTestStatusRequest)
    MergeFrom(*source);
  }
}

void SetTestStatusRequest::MergeFrom(const SetTestStatusRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.SetTestStatusRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SetTestStatusRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.SetTestStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTestStatusRequest::CopyFrom(const SetTestStatusRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.SetTestStatusRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTestStatusRequest::IsInitialized() const {
  return true;
}

void SetTestStatusRequest::InternalSwap(SetTestStatusRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTestStatusRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetTestStatusResponse::InitAsDefaultInstance() {
}
class SetTestStatusResponse::_Internal {
 public:
};

SetTestStatusResponse::SetTestStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.SetTestStatusResponse)
}
SetTestStatusResponse::SetTestStatusResponse(const SetTestStatusResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.SetTestStatusResponse)
}

void SetTestStatusResponse::SharedCtor() {
}

SetTestStatusResponse::~SetTestStatusResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.SetTestStatusResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetTestStatusResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetTestStatusResponse::ArenaDtor(void* object) {
  SetTestStatusResponse* _this = reinterpret_cast< SetTestStatusResponse* >(object);
  (void)_this;
}
void SetTestStatusResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetTestStatusResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetTestStatusResponse& SetTestStatusResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetTestStatusResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void SetTestStatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.SetTestStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetTestStatusResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetTestStatusResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.SetTestStatusResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.SetTestStatusResponse)
  return target;
}

size_t SetTestStatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.SetTestStatusResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTestStatusResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.SetTestStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetTestStatusResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetTestStatusResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.SetTestStatusResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.SetTestStatusResponse)
    MergeFrom(*source);
  }
}

void SetTestStatusResponse::MergeFrom(const SetTestStatusResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.SetTestStatusResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetTestStatusResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.SetTestStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetTestStatusResponse::CopyFrom(const SetTestStatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.SetTestStatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTestStatusResponse::IsInitialized() const {
  return true;
}

void SetTestStatusResponse::InternalSwap(SetTestStatusResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetTestStatusResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AgentAlert::InitAsDefaultInstance() {
}
class AgentAlert::_Internal {
 public:
};

AgentAlert::AgentAlert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notification_channel_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.AgentAlert)
}
AgentAlert::AgentAlert(const AgentAlert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_channel_ids_(from.notification_channel_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agent_id(),
      GetArena());
  }
  agent_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_name().empty()) {
    agent_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agent_name(),
      GetArena());
  }
  threshold_seconds_ = from.threshold_seconds_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.AgentAlert)
}

void AgentAlert::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agent_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  threshold_seconds_ = 0u;
}

AgentAlert::~AgentAlert() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.AgentAlert)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentAlert::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  agent_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AgentAlert::ArenaDtor(void* object) {
  AgentAlert* _this = reinterpret_cast< AgentAlert* >(object);
  (void)_this;
}
void AgentAlert::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentAlert::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AgentAlert& AgentAlert::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AgentAlert_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void AgentAlert::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.AgentAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_channel_ids_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  agent_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  threshold_seconds_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentAlert::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.AgentAlert.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 threshold_seconds = 2[json_name = "thresholdSeconds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          threshold_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string notification_channel_ids = 3[json_name = "notificationChannelIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notification_channel_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.AgentAlert.notification_channel_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string agent_id = 4[json_name = "agentId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.AgentAlert.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string agent_name = 5[json_name = "agentName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_agent_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.AgentAlert.agent_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentAlert::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.AgentAlert)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.AgentAlert.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 threshold_seconds = 2[json_name = "thresholdSeconds"];
  if (this->threshold_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_threshold_seconds(), target);
  }

  // repeated string notification_channel_ids = 3[json_name = "notificationChannelIds"];
  for (int i = 0, n = this->_internal_notification_channel_ids_size(); i < n; i++) {
    const auto& s = this->_internal_notification_channel_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.AgentAlert.notification_channel_ids");
    target = stream->WriteString(3, s, target);
  }

  // string agent_id = 4[json_name = "agentId"];
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.AgentAlert.agent_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_agent_id(), target);
  }

  // string agent_name = 5[json_name = "agentName"];
  if (this->agent_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_name().data(), static_cast<int>(this->_internal_agent_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.AgentAlert.agent_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_agent_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.AgentAlert)
  return target;
}

size_t AgentAlert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.AgentAlert)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string notification_channel_ids = 3[json_name = "notificationChannelIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notification_channel_ids_.size());
  for (int i = 0, n = notification_channel_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notification_channel_ids_.Get(i));
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string agent_id = 4[json_name = "agentId"];
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // string agent_name = 5[json_name = "agentName"];
  if (this->agent_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_name());
  }

  // uint32 threshold_seconds = 2[json_name = "thresholdSeconds"];
  if (this->threshold_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_threshold_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentAlert::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.AgentAlert)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentAlert* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentAlert>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.AgentAlert)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.AgentAlert)
    MergeFrom(*source);
  }
}

void AgentAlert::MergeFrom(const AgentAlert& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.AgentAlert)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_channel_ids_.MergeFrom(from.notification_channel_ids_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.agent_name().size() > 0) {
    _internal_set_agent_name(from._internal_agent_name());
  }
  if (from.threshold_seconds() != 0) {
    _internal_set_threshold_seconds(from._internal_threshold_seconds());
  }
}

void AgentAlert::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.AgentAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentAlert::CopyFrom(const AgentAlert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.AgentAlert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentAlert::IsInitialized() const {
  return true;
}

void AgentAlert::InternalSwap(AgentAlert* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notification_channel_ids_.InternalSwap(&other->notification_channel_ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  agent_name_.Swap(&other->agent_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(threshold_seconds_, other->threshold_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentAlert::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAgentAlertRequest::InitAsDefaultInstance() {
}
class CreateAgentAlertRequest::_Internal {
 public:
};

CreateAgentAlertRequest::CreateAgentAlertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notification_channel_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.CreateAgentAlertRequest)
}
CreateAgentAlertRequest::CreateAgentAlertRequest(const CreateAgentAlertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_channel_ids_(from.notification_channel_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_id().empty()) {
    agent_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_agent_id(),
      GetArena());
  }
  threshold_seconds_ = from.threshold_seconds_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.CreateAgentAlertRequest)
}

void CreateAgentAlertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  threshold_seconds_ = 0u;
}

CreateAgentAlertRequest::~CreateAgentAlertRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.CreateAgentAlertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAgentAlertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  agent_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateAgentAlertRequest::ArenaDtor(void* object) {
  CreateAgentAlertRequest* _this = reinterpret_cast< CreateAgentAlertRequest* >(object);
  (void)_this;
}
void CreateAgentAlertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAgentAlertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAgentAlertRequest& CreateAgentAlertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void CreateAgentAlertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.CreateAgentAlertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_channel_ids_.Clear();
  agent_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  threshold_seconds_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAgentAlertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 threshold_seconds = 1[json_name = "thresholdSeconds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          threshold_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string notification_channel_ids = 2[json_name = "notificationChannelIds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notification_channel_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.CreateAgentAlertRequest.notification_channel_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string agent_id = 3[json_name = "agentId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_agent_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.CreateAgentAlertRequest.agent_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAgentAlertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.CreateAgentAlertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 threshold_seconds = 1[json_name = "thresholdSeconds"];
  if (this->threshold_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_threshold_seconds(), target);
  }

  // repeated string notification_channel_ids = 2[json_name = "notificationChannelIds"];
  for (int i = 0, n = this->_internal_notification_channel_ids_size(); i < n; i++) {
    const auto& s = this->_internal_notification_channel_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.CreateAgentAlertRequest.notification_channel_ids");
    target = stream->WriteString(2, s, target);
  }

  // string agent_id = 3[json_name = "agentId"];
  if (this->agent_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_id().data(), static_cast<int>(this->_internal_agent_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.CreateAgentAlertRequest.agent_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_agent_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.CreateAgentAlertRequest)
  return target;
}

size_t CreateAgentAlertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.CreateAgentAlertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string notification_channel_ids = 2[json_name = "notificationChannelIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notification_channel_ids_.size());
  for (int i = 0, n = notification_channel_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notification_channel_ids_.Get(i));
  }

  // string agent_id = 3[json_name = "agentId"];
  if (this->agent_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_id());
  }

  // uint32 threshold_seconds = 1[json_name = "thresholdSeconds"];
  if (this->threshold_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_threshold_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAgentAlertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.CreateAgentAlertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAgentAlertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAgentAlertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.CreateAgentAlertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.CreateAgentAlertRequest)
    MergeFrom(*source);
  }
}

void CreateAgentAlertRequest::MergeFrom(const CreateAgentAlertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.CreateAgentAlertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_channel_ids_.MergeFrom(from.notification_channel_ids_);
  if (from.agent_id().size() > 0) {
    _internal_set_agent_id(from._internal_agent_id());
  }
  if (from.threshold_seconds() != 0) {
    _internal_set_threshold_seconds(from._internal_threshold_seconds());
  }
}

void CreateAgentAlertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.CreateAgentAlertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAgentAlertRequest::CopyFrom(const CreateAgentAlertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.CreateAgentAlertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAgentAlertRequest::IsInitialized() const {
  return true;
}

void CreateAgentAlertRequest::InternalSwap(CreateAgentAlertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notification_channel_ids_.InternalSwap(&other->notification_channel_ids_);
  agent_id_.Swap(&other->agent_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(threshold_seconds_, other->threshold_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAgentAlertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateAgentAlertResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_CreateAgentAlertResponse_default_instance_._instance.get_mutable()->agent_alert_ = const_cast< ::kentik::synthetics::v202309::AgentAlert*>(
      ::kentik::synthetics::v202309::AgentAlert::internal_default_instance());
}
class CreateAgentAlertResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202309::AgentAlert& agent_alert(const CreateAgentAlertResponse* msg);
};

const ::kentik::synthetics::v202309::AgentAlert&
CreateAgentAlertResponse::_Internal::agent_alert(const CreateAgentAlertResponse* msg) {
  return *msg->agent_alert_;
}
CreateAgentAlertResponse::CreateAgentAlertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.CreateAgentAlertResponse)
}
CreateAgentAlertResponse::CreateAgentAlertResponse(const CreateAgentAlertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent_alert()) {
    agent_alert_ = new ::kentik::synthetics::v202309::AgentAlert(*from.agent_alert_);
  } else {
    agent_alert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.CreateAgentAlertResponse)
}

void CreateAgentAlertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_alert_ = nullptr;
}

CreateAgentAlertResponse::~CreateAgentAlertResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.CreateAgentAlertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateAgentAlertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_alert_;
}

void CreateAgentAlertResponse::ArenaDtor(void* object) {
  CreateAgentAlertResponse* _this = reinterpret_cast< CreateAgentAlertResponse* >(object);
  (void)_this;
}
void CreateAgentAlertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateAgentAlertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateAgentAlertResponse& CreateAgentAlertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void CreateAgentAlertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.CreateAgentAlertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_alert_ != nullptr) {
    delete agent_alert_;
  }
  agent_alert_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateAgentAlertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_alert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateAgentAlertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.CreateAgentAlertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
  if (this->has_agent_alert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_alert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.CreateAgentAlertResponse)
  return target;
}

size_t CreateAgentAlertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.CreateAgentAlertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
  if (this->has_agent_alert()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_alert_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateAgentAlertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.CreateAgentAlertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAgentAlertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateAgentAlertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.CreateAgentAlertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.CreateAgentAlertResponse)
    MergeFrom(*source);
  }
}

void CreateAgentAlertResponse::MergeFrom(const CreateAgentAlertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.CreateAgentAlertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent_alert()) {
    _internal_mutable_agent_alert()->::kentik::synthetics::v202309::AgentAlert::MergeFrom(from._internal_agent_alert());
  }
}

void CreateAgentAlertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.CreateAgentAlertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAgentAlertResponse::CopyFrom(const CreateAgentAlertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.CreateAgentAlertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAgentAlertResponse::IsInitialized() const {
  return true;
}

void CreateAgentAlertResponse::InternalSwap(CreateAgentAlertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(agent_alert_, other->agent_alert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateAgentAlertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAgentAlertRequest::InitAsDefaultInstance() {
}
class UpdateAgentAlertRequest::_Internal {
 public:
};

UpdateAgentAlertRequest::UpdateAgentAlertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notification_channel_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.UpdateAgentAlertRequest)
}
UpdateAgentAlertRequest::UpdateAgentAlertRequest(const UpdateAgentAlertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_channel_ids_(from.notification_channel_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  threshold_seconds_ = from.threshold_seconds_;
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.UpdateAgentAlertRequest)
}

void UpdateAgentAlertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  threshold_seconds_ = 0u;
}

UpdateAgentAlertRequest::~UpdateAgentAlertRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateAgentAlertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateAgentAlertRequest::ArenaDtor(void* object) {
  UpdateAgentAlertRequest* _this = reinterpret_cast< UpdateAgentAlertRequest* >(object);
  (void)_this;
}
void UpdateAgentAlertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAgentAlertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAgentAlertRequest& UpdateAgentAlertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UpdateAgentAlertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_channel_ids_.Clear();
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  threshold_seconds_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAgentAlertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.UpdateAgentAlertRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 threshold_seconds = 2[json_name = "thresholdSeconds"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          threshold_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string notification_channel_ids = 3[json_name = "notificationChannelIds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notification_channel_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.UpdateAgentAlertRequest.notification_channel_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAgentAlertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.UpdateAgentAlertRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint32 threshold_seconds = 2[json_name = "thresholdSeconds"];
  if (this->threshold_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_threshold_seconds(), target);
  }

  // repeated string notification_channel_ids = 3[json_name = "notificationChannelIds"];
  for (int i = 0, n = this->_internal_notification_channel_ids_size(); i < n; i++) {
    const auto& s = this->_internal_notification_channel_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.UpdateAgentAlertRequest.notification_channel_ids");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  return target;
}

size_t UpdateAgentAlertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string notification_channel_ids = 3[json_name = "notificationChannelIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notification_channel_ids_.size());
  for (int i = 0, n = notification_channel_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notification_channel_ids_.Get(i));
  }

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint32 threshold_seconds = 2[json_name = "thresholdSeconds"];
  if (this->threshold_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_threshold_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAgentAlertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAgentAlertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAgentAlertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.UpdateAgentAlertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.UpdateAgentAlertRequest)
    MergeFrom(*source);
  }
}

void UpdateAgentAlertRequest::MergeFrom(const UpdateAgentAlertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_channel_ids_.MergeFrom(from.notification_channel_ids_);
  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.threshold_seconds() != 0) {
    _internal_set_threshold_seconds(from._internal_threshold_seconds());
  }
}

void UpdateAgentAlertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAgentAlertRequest::CopyFrom(const UpdateAgentAlertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.UpdateAgentAlertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAgentAlertRequest::IsInitialized() const {
  return true;
}

void UpdateAgentAlertRequest::InternalSwap(UpdateAgentAlertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notification_channel_ids_.InternalSwap(&other->notification_channel_ids_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(threshold_seconds_, other->threshold_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAgentAlertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateAgentAlertResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_UpdateAgentAlertResponse_default_instance_._instance.get_mutable()->agent_alert_ = const_cast< ::kentik::synthetics::v202309::AgentAlert*>(
      ::kentik::synthetics::v202309::AgentAlert::internal_default_instance());
}
class UpdateAgentAlertResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202309::AgentAlert& agent_alert(const UpdateAgentAlertResponse* msg);
};

const ::kentik::synthetics::v202309::AgentAlert&
UpdateAgentAlertResponse::_Internal::agent_alert(const UpdateAgentAlertResponse* msg) {
  return *msg->agent_alert_;
}
UpdateAgentAlertResponse::UpdateAgentAlertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.UpdateAgentAlertResponse)
}
UpdateAgentAlertResponse::UpdateAgentAlertResponse(const UpdateAgentAlertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent_alert()) {
    agent_alert_ = new ::kentik::synthetics::v202309::AgentAlert(*from.agent_alert_);
  } else {
    agent_alert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.UpdateAgentAlertResponse)
}

void UpdateAgentAlertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_alert_ = nullptr;
}

UpdateAgentAlertResponse::~UpdateAgentAlertResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateAgentAlertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_alert_;
}

void UpdateAgentAlertResponse::ArenaDtor(void* object) {
  UpdateAgentAlertResponse* _this = reinterpret_cast< UpdateAgentAlertResponse* >(object);
  (void)_this;
}
void UpdateAgentAlertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateAgentAlertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateAgentAlertResponse& UpdateAgentAlertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void UpdateAgentAlertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_alert_ != nullptr) {
    delete agent_alert_;
  }
  agent_alert_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateAgentAlertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_alert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateAgentAlertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
  if (this->has_agent_alert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_alert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  return target;
}

size_t UpdateAgentAlertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
  if (this->has_agent_alert()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_alert_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateAgentAlertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateAgentAlertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateAgentAlertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.UpdateAgentAlertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.UpdateAgentAlertResponse)
    MergeFrom(*source);
  }
}

void UpdateAgentAlertResponse::MergeFrom(const UpdateAgentAlertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent_alert()) {
    _internal_mutable_agent_alert()->::kentik::synthetics::v202309::AgentAlert::MergeFrom(from._internal_agent_alert());
  }
}

void UpdateAgentAlertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateAgentAlertResponse::CopyFrom(const UpdateAgentAlertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.UpdateAgentAlertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateAgentAlertResponse::IsInitialized() const {
  return true;
}

void UpdateAgentAlertResponse::InternalSwap(UpdateAgentAlertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(agent_alert_, other->agent_alert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateAgentAlertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAgentAlertRequest::InitAsDefaultInstance() {
}
class GetAgentAlertRequest::_Internal {
 public:
};

GetAgentAlertRequest::GetAgentAlertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetAgentAlertRequest)
}
GetAgentAlertRequest::GetAgentAlertRequest(const GetAgentAlertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetAgentAlertRequest)
}

void GetAgentAlertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetAgentAlertRequest::~GetAgentAlertRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetAgentAlertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAgentAlertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetAgentAlertRequest::ArenaDtor(void* object) {
  GetAgentAlertRequest* _this = reinterpret_cast< GetAgentAlertRequest* >(object);
  (void)_this;
}
void GetAgentAlertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAgentAlertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAgentAlertRequest& GetAgentAlertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetAgentAlertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetAgentAlertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAgentAlertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.GetAgentAlertRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAgentAlertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetAgentAlertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.GetAgentAlertRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetAgentAlertRequest)
  return target;
}

size_t GetAgentAlertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetAgentAlertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAgentAlertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetAgentAlertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAgentAlertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAgentAlertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetAgentAlertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetAgentAlertRequest)
    MergeFrom(*source);
  }
}

void GetAgentAlertRequest::MergeFrom(const GetAgentAlertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetAgentAlertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetAgentAlertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetAgentAlertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentAlertRequest::CopyFrom(const GetAgentAlertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetAgentAlertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentAlertRequest::IsInitialized() const {
  return true;
}

void GetAgentAlertRequest::InternalSwap(GetAgentAlertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAgentAlertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetAgentAlertResponse::InitAsDefaultInstance() {
  ::kentik::synthetics::v202309::_GetAgentAlertResponse_default_instance_._instance.get_mutable()->agent_alert_ = const_cast< ::kentik::synthetics::v202309::AgentAlert*>(
      ::kentik::synthetics::v202309::AgentAlert::internal_default_instance());
}
class GetAgentAlertResponse::_Internal {
 public:
  static const ::kentik::synthetics::v202309::AgentAlert& agent_alert(const GetAgentAlertResponse* msg);
};

const ::kentik::synthetics::v202309::AgentAlert&
GetAgentAlertResponse::_Internal::agent_alert(const GetAgentAlertResponse* msg) {
  return *msg->agent_alert_;
}
GetAgentAlertResponse::GetAgentAlertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.GetAgentAlertResponse)
}
GetAgentAlertResponse::GetAgentAlertResponse(const GetAgentAlertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_agent_alert()) {
    agent_alert_ = new ::kentik::synthetics::v202309::AgentAlert(*from.agent_alert_);
  } else {
    agent_alert_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.GetAgentAlertResponse)
}

void GetAgentAlertResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  agent_alert_ = nullptr;
}

GetAgentAlertResponse::~GetAgentAlertResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.GetAgentAlertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetAgentAlertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete agent_alert_;
}

void GetAgentAlertResponse::ArenaDtor(void* object) {
  GetAgentAlertResponse* _this = reinterpret_cast< GetAgentAlertResponse* >(object);
  (void)_this;
}
void GetAgentAlertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetAgentAlertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetAgentAlertResponse& GetAgentAlertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void GetAgentAlertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.GetAgentAlertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && agent_alert_ != nullptr) {
    delete agent_alert_;
  }
  agent_alert_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetAgentAlertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_agent_alert(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetAgentAlertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.GetAgentAlertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
  if (this->has_agent_alert()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::agent_alert(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.GetAgentAlertResponse)
  return target;
}

size_t GetAgentAlertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.GetAgentAlertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.synthetics.v202309.AgentAlert agent_alert = 1[json_name = "agentAlert"];
  if (this->has_agent_alert()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *agent_alert_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetAgentAlertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.GetAgentAlertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAgentAlertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetAgentAlertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.GetAgentAlertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.GetAgentAlertResponse)
    MergeFrom(*source);
  }
}

void GetAgentAlertResponse::MergeFrom(const GetAgentAlertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.GetAgentAlertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_agent_alert()) {
    _internal_mutable_agent_alert()->::kentik::synthetics::v202309::AgentAlert::MergeFrom(from._internal_agent_alert());
  }
}

void GetAgentAlertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.GetAgentAlertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAgentAlertResponse::CopyFrom(const GetAgentAlertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.GetAgentAlertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAgentAlertResponse::IsInitialized() const {
  return true;
}

void GetAgentAlertResponse::InternalSwap(GetAgentAlertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(agent_alert_, other->agent_alert_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetAgentAlertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAgentAlertsRequest::InitAsDefaultInstance() {
}
class ListAgentAlertsRequest::_Internal {
 public:
};

ListAgentAlertsRequest::ListAgentAlertsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.ListAgentAlertsRequest)
}
ListAgentAlertsRequest::ListAgentAlertsRequest(const ListAgentAlertsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_ids_(from.agent_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.ListAgentAlertsRequest)
}

void ListAgentAlertsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAgentAlertsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
}

ListAgentAlertsRequest::~ListAgentAlertsRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.ListAgentAlertsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAgentAlertsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAgentAlertsRequest::ArenaDtor(void* object) {
  ListAgentAlertsRequest* _this = reinterpret_cast< ListAgentAlertsRequest* >(object);
  (void)_this;
}
void ListAgentAlertsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAgentAlertsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAgentAlertsRequest& ListAgentAlertsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAgentAlertsRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListAgentAlertsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.ListAgentAlertsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAgentAlertsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string agent_ids = 1[json_name = "agentIds"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agent_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.ListAgentAlertsRequest.agent_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAgentAlertsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.ListAgentAlertsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string agent_ids = 1[json_name = "agentIds"];
  for (int i = 0, n = this->_internal_agent_ids_size(); i < n; i++) {
    const auto& s = this->_internal_agent_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.ListAgentAlertsRequest.agent_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.ListAgentAlertsRequest)
  return target;
}

size_t ListAgentAlertsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.ListAgentAlertsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string agent_ids = 1[json_name = "agentIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(agent_ids_.size());
  for (int i = 0, n = agent_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      agent_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAgentAlertsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.ListAgentAlertsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAgentAlertsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAgentAlertsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.ListAgentAlertsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.ListAgentAlertsRequest)
    MergeFrom(*source);
  }
}

void ListAgentAlertsRequest::MergeFrom(const ListAgentAlertsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.ListAgentAlertsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_ids_.MergeFrom(from.agent_ids_);
}

void ListAgentAlertsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.ListAgentAlertsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAgentAlertsRequest::CopyFrom(const ListAgentAlertsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.ListAgentAlertsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAgentAlertsRequest::IsInitialized() const {
  return true;
}

void ListAgentAlertsRequest::InternalSwap(ListAgentAlertsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_ids_.InternalSwap(&other->agent_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAgentAlertsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListAgentAlertsResponse::InitAsDefaultInstance() {
}
class ListAgentAlertsResponse::_Internal {
 public:
};

ListAgentAlertsResponse::ListAgentAlertsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  agent_alerts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.ListAgentAlertsResponse)
}
ListAgentAlertsResponse::ListAgentAlertsResponse(const ListAgentAlertsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      agent_alerts_(from.agent_alerts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.ListAgentAlertsResponse)
}

void ListAgentAlertsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListAgentAlertsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
}

ListAgentAlertsResponse::~ListAgentAlertsResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.ListAgentAlertsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListAgentAlertsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListAgentAlertsResponse::ArenaDtor(void* object) {
  ListAgentAlertsResponse* _this = reinterpret_cast< ListAgentAlertsResponse* >(object);
  (void)_this;
}
void ListAgentAlertsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListAgentAlertsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListAgentAlertsResponse& ListAgentAlertsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListAgentAlertsResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void ListAgentAlertsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.ListAgentAlertsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_alerts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListAgentAlertsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.synthetics.v202309.AgentAlert agent_alerts = 1[json_name = "agentAlerts"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_agent_alerts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListAgentAlertsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.ListAgentAlertsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.AgentAlert agent_alerts = 1[json_name = "agentAlerts"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_agent_alerts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_agent_alerts(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.ListAgentAlertsResponse)
  return target;
}

size_t ListAgentAlertsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.ListAgentAlertsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.synthetics.v202309.AgentAlert agent_alerts = 1[json_name = "agentAlerts"];
  total_size += 1UL * this->_internal_agent_alerts_size();
  for (const auto& msg : this->agent_alerts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListAgentAlertsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.ListAgentAlertsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAgentAlertsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListAgentAlertsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.ListAgentAlertsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.ListAgentAlertsResponse)
    MergeFrom(*source);
  }
}

void ListAgentAlertsResponse::MergeFrom(const ListAgentAlertsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.ListAgentAlertsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  agent_alerts_.MergeFrom(from.agent_alerts_);
}

void ListAgentAlertsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.ListAgentAlertsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAgentAlertsResponse::CopyFrom(const ListAgentAlertsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.ListAgentAlertsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAgentAlertsResponse::IsInitialized() const {
  return true;
}

void ListAgentAlertsResponse::InternalSwap(ListAgentAlertsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  agent_alerts_.InternalSwap(&other->agent_alerts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListAgentAlertsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAgentAlertRequest::InitAsDefaultInstance() {
}
class DeleteAgentAlertRequest::_Internal {
 public:
};

DeleteAgentAlertRequest::DeleteAgentAlertRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DeleteAgentAlertRequest)
}
DeleteAgentAlertRequest::DeleteAgentAlertRequest(const DeleteAgentAlertRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DeleteAgentAlertRequest)
}

void DeleteAgentAlertRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteAgentAlertRequest::~DeleteAgentAlertRequest() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAgentAlertRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteAgentAlertRequest::ArenaDtor(void* object) {
  DeleteAgentAlertRequest* _this = reinterpret_cast< DeleteAgentAlertRequest* >(object);
  (void)_this;
}
void DeleteAgentAlertRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAgentAlertRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAgentAlertRequest& DeleteAgentAlertRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAgentAlertRequest_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteAgentAlertRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAgentAlertRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.synthetics.v202309.DeleteAgentAlertRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAgentAlertRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.synthetics.v202309.DeleteAgentAlertRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  return target;
}

size_t DeleteAgentAlertRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAgentAlertRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAgentAlertRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAgentAlertRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DeleteAgentAlertRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DeleteAgentAlertRequest)
    MergeFrom(*source);
  }
}

void DeleteAgentAlertRequest::MergeFrom(const DeleteAgentAlertRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeleteAgentAlertRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAgentAlertRequest::CopyFrom(const DeleteAgentAlertRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DeleteAgentAlertRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAgentAlertRequest::IsInitialized() const {
  return true;
}

void DeleteAgentAlertRequest::InternalSwap(DeleteAgentAlertRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAgentAlertRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteAgentAlertResponse::InitAsDefaultInstance() {
}
class DeleteAgentAlertResponse::_Internal {
 public:
};

DeleteAgentAlertResponse::DeleteAgentAlertResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.synthetics.v202309.DeleteAgentAlertResponse)
}
DeleteAgentAlertResponse::DeleteAgentAlertResponse(const DeleteAgentAlertResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.synthetics.v202309.DeleteAgentAlertResponse)
}

void DeleteAgentAlertResponse::SharedCtor() {
}

DeleteAgentAlertResponse::~DeleteAgentAlertResponse() {
  // @@protoc_insertion_point(destructor:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteAgentAlertResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DeleteAgentAlertResponse::ArenaDtor(void* object) {
  DeleteAgentAlertResponse* _this = reinterpret_cast< DeleteAgentAlertResponse* >(object);
  (void)_this;
}
void DeleteAgentAlertResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteAgentAlertResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteAgentAlertResponse& DeleteAgentAlertResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteAgentAlertResponse_kentik_2fsynthetics_2fv202309_2fsynthetics_2eproto.base);
  return *internal_default_instance();
}


void DeleteAgentAlertResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteAgentAlertResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteAgentAlertResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  return target;
}

size_t DeleteAgentAlertResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteAgentAlertResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAgentAlertResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteAgentAlertResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.synthetics.v202309.DeleteAgentAlertResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.synthetics.v202309.DeleteAgentAlertResponse)
    MergeFrom(*source);
  }
}

void DeleteAgentAlertResponse::MergeFrom(const DeleteAgentAlertResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteAgentAlertResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAgentAlertResponse::CopyFrom(const DeleteAgentAlertResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.synthetics.v202309.DeleteAgentAlertResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAgentAlertResponse::IsInitialized() const {
  return true;
}

void DeleteAgentAlertResponse::InternalSwap(DeleteAgentAlertResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteAgentAlertResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202309
}  // namespace synthetics
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::Agent* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::Agent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::Agent >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::AgentMetadata_IpValue* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::AgentMetadata_IpValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::AgentMetadata_IpValue >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::AgentMetadata* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::AgentMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::AgentMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::Test* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::Test >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::Test >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::TestSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::TestSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::TestSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::TestPingSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::TestPingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::TestPingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::TestTraceSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::TestTraceSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::TestTraceSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::ActivationSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::ActivationSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::ActivationSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::HealthSettings* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::HealthSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::HealthSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::HostnameTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::HostnameTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::HostnameTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::IpTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::IpTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::IpTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::AgentTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::AgentTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::AgentTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::FlowTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::FlowTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::FlowTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DnsTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DnsTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DnsTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::UrlTest_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::UrlTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::UrlTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::UrlTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::PageLoadTest_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::PageLoadTest_CssSelectorsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::PageLoadTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::PageLoadTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::PageLoadTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::NetworkMeshTest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::NetworkMeshTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::NetworkMeshTest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::MetricData* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::MetricData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::MetricData >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::PacketLossData* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::PacketLossData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::PacketLossData >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::PingResults* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::PingResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::PingResults >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::HTTPResponseData* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::HTTPResponseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::HTTPResponseData >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::HTTPResults* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::HTTPResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::HTTPResults >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DNSResponseData* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DNSResponseData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DNSResponseData >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DNSResults* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DNSResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DNSResults >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::TaskResults* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::TaskResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::TaskResults >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::AgentResults* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::AgentResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::AgentResults >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::TestResults* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::TestResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::TestResults >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::Stats* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::Stats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::Stats >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::Location* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::NetNode* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::NetNode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::NetNode >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::TraceHop* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::TraceHop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::TraceHop >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::PathTrace* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::PathTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::PathTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::Path* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetResultsForTestsRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetResultsForTestsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetResultsForTestsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetResultsForTestsResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetResultsForTestsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetResultsForTestsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetTraceForTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetTraceForTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetTraceForTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetTraceForTestResponse_NodesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetTraceForTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetTraceForTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetTraceForTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::ListAgentsRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::ListAgentsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::ListAgentsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::ListAgentsResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::ListAgentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::ListAgentsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetAgentRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetAgentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetAgentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetAgentResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetAgentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetAgentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::UpdateAgentRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::UpdateAgentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::UpdateAgentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::UpdateAgentResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::UpdateAgentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::UpdateAgentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DeleteAgentRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DeleteAgentRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DeleteAgentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DeleteAgentResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DeleteAgentResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DeleteAgentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::ListTestsRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::ListTestsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::ListTestsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::ListTestsResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::ListTestsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::ListTestsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::CreateTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::CreateTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::CreateTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::CreateTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::CreateTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::CreateTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::UpdateTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::UpdateTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::UpdateTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::UpdateTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::UpdateTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::UpdateTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DeleteTestRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DeleteTestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DeleteTestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DeleteTestResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DeleteTestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DeleteTestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::SetTestStatusRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::SetTestStatusRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::SetTestStatusRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::SetTestStatusResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::SetTestStatusResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::SetTestStatusResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::AgentAlert* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::AgentAlert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::AgentAlert >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::CreateAgentAlertRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::CreateAgentAlertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::CreateAgentAlertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::CreateAgentAlertResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::CreateAgentAlertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::CreateAgentAlertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::UpdateAgentAlertRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::UpdateAgentAlertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::UpdateAgentAlertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::UpdateAgentAlertResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::UpdateAgentAlertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::UpdateAgentAlertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetAgentAlertRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetAgentAlertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetAgentAlertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::GetAgentAlertResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::GetAgentAlertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::GetAgentAlertResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::ListAgentAlertsRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::ListAgentAlertsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::ListAgentAlertsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::ListAgentAlertsResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::ListAgentAlertsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::ListAgentAlertsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DeleteAgentAlertRequest* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DeleteAgentAlertRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DeleteAgentAlertRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::synthetics::v202309::DeleteAgentAlertResponse* Arena::CreateMaybeMessage< ::kentik::synthetics::v202309::DeleteAgentAlertResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::synthetics::v202309::DeleteAgentAlertResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
