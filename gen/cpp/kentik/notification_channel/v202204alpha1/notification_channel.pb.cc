// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/notification_channel/v202204alpha1/notification_channel.proto

#include "kentik/notification_channel/v202204alpha1/notification_channel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto;
namespace kentik {
namespace notification_channel {
namespace v202204alpha1 {
class NotificationChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotificationChannel> _instance;
} _NotificationChannel_default_instance_;
class ListNotificationChannelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNotificationChannelsRequest> _instance;
} _ListNotificationChannelsRequest_default_instance_;
class ListNotificationChannelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNotificationChannelsResponse> _instance;
} _ListNotificationChannelsResponse_default_instance_;
class GetNotificationChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNotificationChannelRequest> _instance;
} _GetNotificationChannelRequest_default_instance_;
class GetNotificationChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNotificationChannelResponse> _instance;
} _GetNotificationChannelResponse_default_instance_;
}  // namespace v202204alpha1
}  // namespace notification_channel
}  // namespace kentik
static void InitDefaultsscc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202204alpha1::_GetNotificationChannelRequest_default_instance_;
    new (ptr) ::kentik::notification_channel::v202204alpha1::GetNotificationChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202204alpha1::GetNotificationChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto}, {}};

static void InitDefaultsscc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202204alpha1::_GetNotificationChannelResponse_default_instance_;
    new (ptr) ::kentik::notification_channel::v202204alpha1::GetNotificationChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202204alpha1::GetNotificationChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto}, {
      &scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base,}};

static void InitDefaultsscc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202204alpha1::_ListNotificationChannelsRequest_default_instance_;
    new (ptr) ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto}, {}};

static void InitDefaultsscc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202204alpha1::_ListNotificationChannelsResponse_default_instance_;
    new (ptr) ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto}, {
      &scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base,}};

static void InitDefaultsscc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202204alpha1::_NotificationChannel_default_instance_;
    new (ptr) ::kentik::notification_channel::v202204alpha1::NotificationChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202204alpha1::NotificationChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::NotificationChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::NotificationChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::NotificationChannel, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::NotificationChannel, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::NotificationChannel, status_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::NotificationChannel, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::NotificationChannel, edate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::ListNotificationChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse, notification_channels_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::GetNotificationChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::GetNotificationChannelRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::GetNotificationChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202204alpha1::GetNotificationChannelResponse, notification_channel_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::notification_channel::v202204alpha1::NotificationChannel)},
  { 11, -1, sizeof(::kentik::notification_channel::v202204alpha1::ListNotificationChannelsRequest)},
  { 16, -1, sizeof(::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse)},
  { 23, -1, sizeof(::kentik::notification_channel::v202204alpha1::GetNotificationChannelRequest)},
  { 29, -1, sizeof(::kentik::notification_channel::v202204alpha1::GetNotificationChannelResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202204alpha1::_NotificationChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202204alpha1::_ListNotificationChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202204alpha1::_ListNotificationChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202204alpha1::_GetNotificationChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202204alpha1::_GetNotificationChannelResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\nDkentik/notification_channel/v202204alp"
  "ha1/notification_channel.proto\022)kentik.n"
  "otification_channel.v202204alpha1\032\034googl"
  "e/api/annotations.proto\032\027google/api/clie"
  "nt.proto\032.protoc-gen-openapiv2/options/a"
  "nnotations.proto\032%kentik/core/v202303/an"
  "notations.proto\032\037google/protobuf/timesta"
  "mp.proto\"\201\002\n\023NotificationChannel\022\016\n\002id\030\001"
  " \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022J\n\004type\030\003 \001"
  "(\01626.kentik.notification_channel.v202204"
  "alpha1.ChannelTypeR\004type\022\026\n\006status\030\004 \001(\t"
  "R\006status\0220\n\005cdate\030\005 \001(\0132\032.google.protobu"
  "f.TimestampR\005cdate\0220\n\005edate\030\006 \001(\0132\032.goog"
  "le.protobuf.TimestampR\005edate\"!\n\037ListNoti"
  "ficationChannelsRequest\"\274\001\n ListNotifica"
  "tionChannelsResponse\022s\n\025notification_cha"
  "nnels\030\001 \003(\0132>.kentik.notification_channe"
  "l.v202204alpha1.NotificationChannelR\024not"
  "ificationChannels\022#\n\rinvalid_count\030\002 \001(\005"
  "R\014invalidCount\"/\n\035GetNotificationChannel"
  "Request\022\016\n\002id\030\001 \001(\tR\002id\"\223\001\n\036GetNotificat"
  "ionChannelResponse\022q\n\024notification_chann"
  "el\030\001 \001(\0132>.kentik.notification_channel.v"
  "202204alpha1.NotificationChannelR\023notifi"
  "cationChannel*\352\002\n\013ChannelType\022\034\n\030CHANNEL"
  "_TYPE_UNSPECIFIED\020\000\022\031\n\025CHANNEL_TYPE_XMAT"
  "TERS\020\001\022\026\n\022CHANNEL_TYPE_SLACK\020\002\022\033\n\027CHANNE"
  "L_TYPE_SERVICENOW\020\003\022\027\n\023CHANNEL_TYPE_SYSL"
  "OG\020\004\022\031\n\025CHANNEL_TYPE_OPSGENIE\020\005\022\037\n\033CHANN"
  "EL_TYPE_CUSTOM_WEBHOOK\020\006\022\027\n\023CHANNEL_TYPE"
  "_SPLUNK\020\007\022\030\n\024CHANNEL_TYPE_MSTEAMS\020\010\022\025\n\021C"
  "HANNEL_TYPE_JSON\020\t\022\026\n\022CHANNEL_TYPE_EMAIL"
  "\020\n\022\032\n\026CHANNEL_TYPE_VICTOROPS\020\013\022\032\n\026CHANNE"
  "L_TYPE_PAGERDUTY\020\0142\227\007\n\032NotificationChann"
  "elService\022\230\003\n\030ListNotificationChannels\022J"
  ".kentik.notification_channel.v202204alph"
  "a1.ListNotificationChannelsRequest\032K.ken"
  "tik.notification_channel.v202204alpha1.L"
  "istNotificationChannelsResponse\"\342\001\222A{\022!F"
  "etch Search NotificationChannels\032<Return"
  " list of notification_channels matches s"
  "earch critera.*\030ListNotificationChannels"
  "\362\327\002\037admin.notification_channel:read\202\323\344\223\002"
  ";\0229/notification_channel/v202204alpha1/n"
  "otification_channels\022\243\003\n\026GetNotification"
  "Channel\022H.kentik.notification_channel.v2"
  "02204alpha1.GetNotificationChannelReques"
  "t\032I.kentik.notification_channel.v202204a"
  "lpha1.GetNotificationChannelResponse\"\363\001\222"
  "A\206\001\022)Get information about NotificationC"
  "hannel\032AReturns information about notifi"
  "cation_channel specified with ID.*\026GetNo"
  "tificationChannel\362\327\002\037admin.notification_"
  "channel:read\202\323\344\223\002@\022>/notification_channe"
  "l/v202204alpha1/notification_channels/{i"
  "d}\0328\312A\023grpc.api.kentik.com\352\327\002\032admin.noti"
  "fication_channel\220\330\002\003B\340\003Zegithub.com/kent"
  "ik/api-schema-public/go/kentik/notificat"
  "ion_channel/v202204alpha1;notification_c"
  "hannel\222A\365\002\022\216\001\n\027NotificationChannel API\022K"
  "--- This API has been deprecated and wil"
  "l be removed in the near future ---\"\030\n\026K"
  "entik API Engineering2\014202204alpha1*\001\0022\020"
  "application/json:\020application/jsonZD\n\036\n\005"
  "email\022\025\010\002\032\017X-CH-Auth-Email \002\n\"\n\005token\022\031\010"
  "\002\032\023X-CH-Auth-API-Token \002b\026\n\t\n\005email\022\000\n\t\n"
  "\005token\022\000r]\n%General information about Ke"
  "ntik APIs\0224https://kb.kentik.com/v0/Ab09"
  ".htm#Ab09-APIs_Overviewb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_deps[5] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202303_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_sccs[5] = {
  &scc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base,
  &scc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base,
  &scc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base,
  &scc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base,
  &scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto, "kentik/notification_channel/v202204alpha1/notification_channel.proto", 2751,
  &descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_once, descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_sccs, descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_deps, 5, 5,
  schemas, file_default_instances, TableStruct_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto::offsets,
  file_level_metadata_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto, 5, file_level_enum_descriptors_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto, file_level_service_descriptors_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto)), true);
namespace kentik {
namespace notification_channel {
namespace v202204alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto);
  return file_level_enum_descriptors_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto[0];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NotificationChannel::InitAsDefaultInstance() {
  ::kentik::notification_channel::v202204alpha1::_NotificationChannel_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::notification_channel::v202204alpha1::_NotificationChannel_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NotificationChannel::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const NotificationChannel* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const NotificationChannel* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
NotificationChannel::_Internal::cdate(const NotificationChannel* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
NotificationChannel::_Internal::edate(const NotificationChannel* msg) {
  return *msg->edate_;
}
void NotificationChannel::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void NotificationChannel::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
NotificationChannel::NotificationChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202204alpha1.NotificationChannel)
}
NotificationChannel::NotificationChannel(const NotificationChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_status(),
      GetArena());
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202204alpha1.NotificationChannel)
}

void NotificationChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&cdate_)) + sizeof(type_));
}

NotificationChannel::~NotificationChannel() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202204alpha1.NotificationChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotificationChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
}

void NotificationChannel::ArenaDtor(void* object) {
  NotificationChannel* _this = reinterpret_cast< NotificationChannel* >(object);
  (void)_this;
}
void NotificationChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotificationChannel& NotificationChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void NotificationChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202204alpha1.NotificationChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.notification_channel.v202204alpha1.NotificationChannel.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.notification_channel.v202204alpha1.NotificationChannel.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.notification_channel.v202204alpha1.ChannelType type = 3[json_name = "type"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::notification_channel::v202204alpha1::ChannelType>(val));
        } else goto handle_unusual;
        continue;
      // string status = 4[json_name = "status"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.notification_channel.v202204alpha1.NotificationChannel.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 5[json_name = "cdate"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 6[json_name = "edate"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotificationChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202204alpha1.NotificationChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.notification_channel.v202204alpha1.NotificationChannel.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.notification_channel.v202204alpha1.NotificationChannel.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .kentik.notification_channel.v202204alpha1.ChannelType type = 3[json_name = "type"];
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // string status = 4[json_name = "status"];
  if (this->status().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.notification_channel.v202204alpha1.NotificationChannel.status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status(), target);
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate"];
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 6[json_name = "edate"];
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::edate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202204alpha1.NotificationChannel)
  return target;
}

size_t NotificationChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202204alpha1.NotificationChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name"];
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string status = 4[json_name = "status"];
  if (this->status().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate"];
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 6[json_name = "edate"];
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .kentik.notification_channel.v202204alpha1.ChannelType type = 3[json_name = "type"];
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202204alpha1.NotificationChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotificationChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202204alpha1.NotificationChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202204alpha1.NotificationChannel)
    MergeFrom(*source);
  }
}

void NotificationChannel::MergeFrom(const NotificationChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202204alpha1.NotificationChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.status().size() > 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void NotificationChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202204alpha1.NotificationChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationChannel::CopyFrom(const NotificationChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202204alpha1.NotificationChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationChannel::IsInitialized() const {
  return true;
}

void NotificationChannel::InternalSwap(NotificationChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_.Swap(&other->status_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationChannel, type_)
      + sizeof(NotificationChannel::type_)
      - PROTOBUF_FIELD_OFFSET(NotificationChannel, cdate_)>(
          reinterpret_cast<char*>(&cdate_),
          reinterpret_cast<char*>(&other->cdate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListNotificationChannelsRequest::InitAsDefaultInstance() {
}
class ListNotificationChannelsRequest::_Internal {
 public:
};

ListNotificationChannelsRequest::ListNotificationChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
}
ListNotificationChannelsRequest::ListNotificationChannelsRequest(const ListNotificationChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
}

void ListNotificationChannelsRequest::SharedCtor() {
}

ListNotificationChannelsRequest::~ListNotificationChannelsRequest() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListNotificationChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListNotificationChannelsRequest::ArenaDtor(void* object) {
  ListNotificationChannelsRequest* _this = reinterpret_cast< ListNotificationChannelsRequest* >(object);
  (void)_this;
}
void ListNotificationChannelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNotificationChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNotificationChannelsRequest& ListNotificationChannelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void ListNotificationChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNotificationChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNotificationChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  return target;
}

size_t ListNotificationChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNotificationChannelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNotificationChannelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNotificationChannelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
    MergeFrom(*source);
  }
}

void ListNotificationChannelsRequest::MergeFrom(const ListNotificationChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListNotificationChannelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNotificationChannelsRequest::CopyFrom(const ListNotificationChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNotificationChannelsRequest::IsInitialized() const {
  return true;
}

void ListNotificationChannelsRequest::InternalSwap(ListNotificationChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNotificationChannelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListNotificationChannelsResponse::InitAsDefaultInstance() {
}
class ListNotificationChannelsResponse::_Internal {
 public:
};

ListNotificationChannelsResponse::ListNotificationChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notification_channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
}
ListNotificationChannelsResponse::ListNotificationChannelsResponse(const ListNotificationChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_channels_(from.notification_channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
}

void ListNotificationChannelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  invalid_count_ = 0;
}

ListNotificationChannelsResponse::~ListNotificationChannelsResponse() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListNotificationChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListNotificationChannelsResponse::ArenaDtor(void* object) {
  ListNotificationChannelsResponse* _this = reinterpret_cast< ListNotificationChannelsResponse* >(object);
  (void)_this;
}
void ListNotificationChannelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNotificationChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNotificationChannelsResponse& ListNotificationChannelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void ListNotificationChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_channels_.Clear();
  invalid_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNotificationChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channels = 1[json_name = "notificationChannels"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 invalid_count = 2[json_name = "invalidCount"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNotificationChannelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channels = 1[json_name = "notificationChannels"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notification_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notification_channels(i), target, stream);
  }

  // int32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  return target;
}

size_t ListNotificationChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channels = 1[json_name = "notificationChannels"];
  total_size += 1UL * this->_internal_notification_channels_size();
  for (const auto& msg : this->notification_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 invalid_count = 2[json_name = "invalidCount"];
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNotificationChannelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNotificationChannelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNotificationChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
    MergeFrom(*source);
  }
}

void ListNotificationChannelsResponse::MergeFrom(const ListNotificationChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_channels_.MergeFrom(from.notification_channels_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListNotificationChannelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNotificationChannelsResponse::CopyFrom(const ListNotificationChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNotificationChannelsResponse::IsInitialized() const {
  return true;
}

void ListNotificationChannelsResponse::InternalSwap(ListNotificationChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notification_channels_.InternalSwap(&other->notification_channels_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNotificationChannelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNotificationChannelRequest::InitAsDefaultInstance() {
}
class GetNotificationChannelRequest::_Internal {
 public:
};

GetNotificationChannelRequest::GetNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
}
GetNotificationChannelRequest::GetNotificationChannelRequest(const GetNotificationChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
}

void GetNotificationChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNotificationChannelRequest::~GetNotificationChannelRequest() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNotificationChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNotificationChannelRequest::ArenaDtor(void* object) {
  GetNotificationChannelRequest* _this = reinterpret_cast< GetNotificationChannelRequest* >(object);
  (void)_this;
}
void GetNotificationChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNotificationChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNotificationChannelRequest& GetNotificationChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void GetNotificationChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNotificationChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNotificationChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  return target;
}

size_t GetNotificationChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id"];
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNotificationChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNotificationChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNotificationChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
    MergeFrom(*source);
  }
}

void GetNotificationChannelRequest::MergeFrom(const GetNotificationChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetNotificationChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNotificationChannelRequest::CopyFrom(const GetNotificationChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotificationChannelRequest::IsInitialized() const {
  return true;
}

void GetNotificationChannelRequest::InternalSwap(GetNotificationChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNotificationChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNotificationChannelResponse::InitAsDefaultInstance() {
  ::kentik::notification_channel::v202204alpha1::_GetNotificationChannelResponse_default_instance_._instance.get_mutable()->notification_channel_ = const_cast< ::kentik::notification_channel::v202204alpha1::NotificationChannel*>(
      ::kentik::notification_channel::v202204alpha1::NotificationChannel::internal_default_instance());
}
class GetNotificationChannelResponse::_Internal {
 public:
  static const ::kentik::notification_channel::v202204alpha1::NotificationChannel& notification_channel(const GetNotificationChannelResponse* msg);
};

const ::kentik::notification_channel::v202204alpha1::NotificationChannel&
GetNotificationChannelResponse::_Internal::notification_channel(const GetNotificationChannelResponse* msg) {
  return *msg->notification_channel_;
}
GetNotificationChannelResponse::GetNotificationChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
}
GetNotificationChannelResponse::GetNotificationChannelResponse(const GetNotificationChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_notification_channel()) {
    notification_channel_ = new ::kentik::notification_channel::v202204alpha1::NotificationChannel(*from.notification_channel_);
  } else {
    notification_channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
}

void GetNotificationChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  notification_channel_ = nullptr;
}

GetNotificationChannelResponse::~GetNotificationChannelResponse() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNotificationChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete notification_channel_;
}

void GetNotificationChannelResponse::ArenaDtor(void* object) {
  GetNotificationChannelResponse* _this = reinterpret_cast< GetNotificationChannelResponse* >(object);
  (void)_this;
}
void GetNotificationChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNotificationChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNotificationChannelResponse& GetNotificationChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void GetNotificationChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && notification_channel_ != nullptr) {
    delete notification_channel_;
  }
  notification_channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNotificationChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channel = 1[json_name = "notificationChannel"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNotificationChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channel = 1[json_name = "notificationChannel"];
  if (this->has_notification_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::notification_channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  return target;
}

size_t GetNotificationChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channel = 1[json_name = "notificationChannel"];
  if (this->has_notification_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notification_channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNotificationChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNotificationChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNotificationChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
    MergeFrom(*source);
  }
}

void GetNotificationChannelResponse::MergeFrom(const GetNotificationChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_notification_channel()) {
    _internal_mutable_notification_channel()->::kentik::notification_channel::v202204alpha1::NotificationChannel::MergeFrom(from._internal_notification_channel());
  }
}

void GetNotificationChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNotificationChannelResponse::CopyFrom(const GetNotificationChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotificationChannelResponse::IsInitialized() const {
  return true;
}

void GetNotificationChannelResponse::InternalSwap(GetNotificationChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(notification_channel_, other->notification_channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNotificationChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202204alpha1
}  // namespace notification_channel
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202204alpha1::NotificationChannel* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202204alpha1::NotificationChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202204alpha1::NotificationChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsRequest* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202204alpha1::ListNotificationChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202204alpha1::GetNotificationChannelRequest* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202204alpha1::GetNotificationChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202204alpha1::GetNotificationChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202204alpha1::GetNotificationChannelResponse* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202204alpha1::GetNotificationChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202204alpha1::GetNotificationChannelResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
