// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: kentik/notification_channel/v202204alpha1/notification_channel.proto
// Protobuf C++ Version: 5.29.3

#ifndef kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_2epb_2eh
#define kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
#include "google/protobuf/timestamp.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto;
namespace kentik {
namespace notification_channel {
namespace v202204alpha1 {
class GetNotificationChannelRequest;
struct GetNotificationChannelRequestDefaultTypeInternal;
extern GetNotificationChannelRequestDefaultTypeInternal _GetNotificationChannelRequest_default_instance_;
class GetNotificationChannelResponse;
struct GetNotificationChannelResponseDefaultTypeInternal;
extern GetNotificationChannelResponseDefaultTypeInternal _GetNotificationChannelResponse_default_instance_;
class ListNotificationChannelsRequest;
struct ListNotificationChannelsRequestDefaultTypeInternal;
extern ListNotificationChannelsRequestDefaultTypeInternal _ListNotificationChannelsRequest_default_instance_;
class ListNotificationChannelsResponse;
struct ListNotificationChannelsResponseDefaultTypeInternal;
extern ListNotificationChannelsResponseDefaultTypeInternal _ListNotificationChannelsResponse_default_instance_;
class NotificationChannel;
struct NotificationChannelDefaultTypeInternal;
extern NotificationChannelDefaultTypeInternal _NotificationChannel_default_instance_;
}  // namespace v202204alpha1
}  // namespace notification_channel
}  // namespace kentik
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace kentik {
namespace notification_channel {
namespace v202204alpha1 {
enum ChannelType : int {
  CHANNEL_TYPE_UNSPECIFIED = 0,
  CHANNEL_TYPE_XMATTERS = 1,
  CHANNEL_TYPE_SLACK = 2,
  CHANNEL_TYPE_SERVICENOW = 3,
  CHANNEL_TYPE_SYSLOG = 4,
  CHANNEL_TYPE_OPSGENIE = 5,
  CHANNEL_TYPE_CUSTOM_WEBHOOK = 6,
  CHANNEL_TYPE_SPLUNK = 7,
  CHANNEL_TYPE_MSTEAMS = 8,
  CHANNEL_TYPE_JSON = 9,
  CHANNEL_TYPE_EMAIL = 10,
  CHANNEL_TYPE_VICTOROPS = 11,
  CHANNEL_TYPE_PAGERDUTY = 12,
  ChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ChannelType_IsValid(int value);
extern const uint32_t ChannelType_internal_data_[];
constexpr ChannelType ChannelType_MIN = static_cast<ChannelType>(0);
constexpr ChannelType ChannelType_MAX = static_cast<ChannelType>(12);
constexpr int ChannelType_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor*
ChannelType_descriptor();
template <typename T>
const std::string& ChannelType_Name(T value) {
  static_assert(std::is_same<T, ChannelType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ChannelType_Name().");
  return ChannelType_Name(static_cast<ChannelType>(value));
}
template <>
inline const std::string& ChannelType_Name(ChannelType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ChannelType_descriptor,
                                                 0, 12>(
      static_cast<int>(value));
}
inline bool ChannelType_Parse(absl::string_view name, ChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelType>(
      ChannelType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ListNotificationChannelsRequest final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest) */ {
 public:
  inline ListNotificationChannelsRequest() : ListNotificationChannelsRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListNotificationChannelsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListNotificationChannelsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListNotificationChannelsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListNotificationChannelsRequest(const ListNotificationChannelsRequest& from) : ListNotificationChannelsRequest(nullptr, from) {}
  inline ListNotificationChannelsRequest(ListNotificationChannelsRequest&& from) noexcept
      : ListNotificationChannelsRequest(nullptr, std::move(from)) {}
  inline ListNotificationChannelsRequest& operator=(const ListNotificationChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationChannelsRequest& operator=(ListNotificationChannelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationChannelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelsRequest*>(
        &_ListNotificationChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(ListNotificationChannelsRequest& a, ListNotificationChannelsRequest& b) { a.Swap(&b); }
  inline void Swap(ListNotificationChannelsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationChannelsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationChannelsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<ListNotificationChannelsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListNotificationChannelsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListNotificationChannelsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest"; }

 protected:
  explicit ListNotificationChannelsRequest(::google::protobuf::Arena* arena);
  ListNotificationChannelsRequest(::google::protobuf::Arena* arena, const ListNotificationChannelsRequest& from);
  ListNotificationChannelsRequest(::google::protobuf::Arena* arena, ListNotificationChannelsRequest&& from) noexcept
      : ListNotificationChannelsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202204alpha1.ListNotificationChannelsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListNotificationChannelsRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationChannelRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest) */ {
 public:
  inline GetNotificationChannelRequest() : GetNotificationChannelRequest(nullptr) {}
  ~GetNotificationChannelRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetNotificationChannelRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetNotificationChannelRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetNotificationChannelRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetNotificationChannelRequest(const GetNotificationChannelRequest& from) : GetNotificationChannelRequest(nullptr, from) {}
  inline GetNotificationChannelRequest(GetNotificationChannelRequest&& from) noexcept
      : GetNotificationChannelRequest(nullptr, std::move(from)) {}
  inline GetNotificationChannelRequest& operator=(const GetNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationChannelRequest& operator=(GetNotificationChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNotificationChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelRequest*>(
        &_GetNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GetNotificationChannelRequest& a, GetNotificationChannelRequest& b) { a.Swap(&b); }
  inline void Swap(GetNotificationChannelRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationChannelRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNotificationChannelRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetNotificationChannelRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNotificationChannelRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetNotificationChannelRequest& from) { GetNotificationChannelRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetNotificationChannelRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest"; }

 protected:
  explicit GetNotificationChannelRequest(::google::protobuf::Arena* arena);
  GetNotificationChannelRequest(::google::protobuf::Arena* arena, const GetNotificationChannelRequest& from);
  GetNotificationChannelRequest(::google::protobuf::Arena* arena, GetNotificationChannelRequest&& from) noexcept
      : GetNotificationChannelRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      82, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetNotificationChannelRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class NotificationChannel final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202204alpha1.NotificationChannel) */ {
 public:
  inline NotificationChannel() : NotificationChannel(nullptr) {}
  ~NotificationChannel() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(NotificationChannel* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(NotificationChannel));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR NotificationChannel(
      ::google::protobuf::internal::ConstantInitialized);

  inline NotificationChannel(const NotificationChannel& from) : NotificationChannel(nullptr, from) {}
  inline NotificationChannel(NotificationChannel&& from) noexcept
      : NotificationChannel(nullptr, std::move(from)) {}
  inline NotificationChannel& operator=(const NotificationChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationChannel& operator=(NotificationChannel&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationChannel& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationChannel* internal_default_instance() {
    return reinterpret_cast<const NotificationChannel*>(
        &_NotificationChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(NotificationChannel& a, NotificationChannel& b) { a.Swap(&b); }
  inline void Swap(NotificationChannel* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationChannel* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationChannel* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<NotificationChannel>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NotificationChannel& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const NotificationChannel& from) { NotificationChannel::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(NotificationChannel* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.notification_channel.v202204alpha1.NotificationChannel"; }

 protected:
  explicit NotificationChannel(::google::protobuf::Arena* arena);
  NotificationChannel(::google::protobuf::Arena* arena, const NotificationChannel& from);
  NotificationChannel(::google::protobuf::Arena* arena, NotificationChannel&& from) noexcept
      : NotificationChannel(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kStatusFieldNumber = 4,
    kCdateFieldNumber = 5,
    kEdateFieldNumber = 6,
    kTypeFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string name = 2 [json_name = "name"];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string status = 4 [json_name = "status"];
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // .google.protobuf.Timestamp cdate = 5 [json_name = "cdate"];
  bool has_cdate() const;
  void clear_cdate() ;
  const ::google::protobuf::Timestamp& cdate() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_cdate();
  ::google::protobuf::Timestamp* mutable_cdate();
  void set_allocated_cdate(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_cdate(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_cdate();

  private:
  const ::google::protobuf::Timestamp& _internal_cdate() const;
  ::google::protobuf::Timestamp* _internal_mutable_cdate();

  public:
  // .google.protobuf.Timestamp edate = 6 [json_name = "edate"];
  bool has_edate() const;
  void clear_edate() ;
  const ::google::protobuf::Timestamp& edate() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_edate();
  ::google::protobuf::Timestamp* mutable_edate();
  void set_allocated_edate(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_edate(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_edate();

  private:
  const ::google::protobuf::Timestamp& _internal_edate() const;
  ::google::protobuf::Timestamp* _internal_mutable_edate();

  public:
  // .kentik.notification_channel.v202204alpha1.ChannelType type = 3 [json_name = "type"];
  void clear_type() ;
  ::kentik::notification_channel::v202204alpha1::ChannelType type() const;
  void set_type(::kentik::notification_channel::v202204alpha1::ChannelType value);

  private:
  ::kentik::notification_channel::v202204alpha1::ChannelType _internal_type() const;
  void _internal_set_type(::kentik::notification_channel::v202204alpha1::ChannelType value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202204alpha1.NotificationChannel)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      82, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const NotificationChannel& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::Timestamp* cdate_;
    ::google::protobuf::Timestamp* edate_;
    int type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationChannelsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse) */ {
 public:
  inline ListNotificationChannelsResponse() : ListNotificationChannelsResponse(nullptr) {}
  ~ListNotificationChannelsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ListNotificationChannelsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ListNotificationChannelsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ListNotificationChannelsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline ListNotificationChannelsResponse(const ListNotificationChannelsResponse& from) : ListNotificationChannelsResponse(nullptr, from) {}
  inline ListNotificationChannelsResponse(ListNotificationChannelsResponse&& from) noexcept
      : ListNotificationChannelsResponse(nullptr, std::move(from)) {}
  inline ListNotificationChannelsResponse& operator=(const ListNotificationChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationChannelsResponse& operator=(ListNotificationChannelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNotificationChannelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNotificationChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelsResponse*>(
        &_ListNotificationChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(ListNotificationChannelsResponse& a, ListNotificationChannelsResponse& b) { a.Swap(&b); }
  inline void Swap(ListNotificationChannelsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationChannelsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNotificationChannelsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ListNotificationChannelsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ListNotificationChannelsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ListNotificationChannelsResponse& from) { ListNotificationChannelsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ListNotificationChannelsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse"; }

 protected:
  explicit ListNotificationChannelsResponse(::google::protobuf::Arena* arena);
  ListNotificationChannelsResponse(::google::protobuf::Arena* arena, const ListNotificationChannelsResponse& from);
  ListNotificationChannelsResponse(::google::protobuf::Arena* arena, ListNotificationChannelsResponse&& from) noexcept
      : ListNotificationChannelsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNotificationChannelsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channels = 1 [json_name = "notificationChannels"];
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;

  public:
  void clear_notification_channels() ;
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* mutable_notification_channels(int index);
  ::google::protobuf::RepeatedPtrField<::kentik::notification_channel::v202204alpha1::NotificationChannel>* mutable_notification_channels();

  private:
  const ::google::protobuf::RepeatedPtrField<::kentik::notification_channel::v202204alpha1::NotificationChannel>& _internal_notification_channels() const;
  ::google::protobuf::RepeatedPtrField<::kentik::notification_channel::v202204alpha1::NotificationChannel>* _internal_mutable_notification_channels();
  public:
  const ::kentik::notification_channel::v202204alpha1::NotificationChannel& notification_channels(int index) const;
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* add_notification_channels();
  const ::google::protobuf::RepeatedPtrField<::kentik::notification_channel::v202204alpha1::NotificationChannel>& notification_channels() const;
  // int32 invalid_count = 2 [json_name = "invalidCount"];
  void clear_invalid_count() ;
  ::int32_t invalid_count() const;
  void set_invalid_count(::int32_t value);

  private:
  ::int32_t _internal_invalid_count() const;
  void _internal_set_invalid_count(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ListNotificationChannelsResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::kentik::notification_channel::v202204alpha1::NotificationChannel > notification_channels_;
    ::int32_t invalid_count_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationChannelResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse) */ {
 public:
  inline GetNotificationChannelResponse() : GetNotificationChannelResponse(nullptr) {}
  ~GetNotificationChannelResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetNotificationChannelResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetNotificationChannelResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetNotificationChannelResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetNotificationChannelResponse(const GetNotificationChannelResponse& from) : GetNotificationChannelResponse(nullptr, from) {}
  inline GetNotificationChannelResponse(GetNotificationChannelResponse&& from) noexcept
      : GetNotificationChannelResponse(nullptr, std::move(from)) {}
  inline GetNotificationChannelResponse& operator=(const GetNotificationChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationChannelResponse& operator=(GetNotificationChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNotificationChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNotificationChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelResponse*>(
        &_GetNotificationChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GetNotificationChannelResponse& a, GetNotificationChannelResponse& b) { a.Swap(&b); }
  inline void Swap(GetNotificationChannelResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationChannelResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNotificationChannelResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetNotificationChannelResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetNotificationChannelResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetNotificationChannelResponse& from) { GetNotificationChannelResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetNotificationChannelResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse"; }

 protected:
  explicit GetNotificationChannelResponse(::google::protobuf::Arena* arena);
  GetNotificationChannelResponse(::google::protobuf::Arena* arena, const GetNotificationChannelResponse& from);
  GetNotificationChannelResponse(::google::protobuf::Arena* arena, GetNotificationChannelResponse&& from) noexcept
      : GetNotificationChannelResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kNotificationChannelFieldNumber = 1,
  };
  // .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channel = 1 [json_name = "notificationChannel"];
  bool has_notification_channel() const;
  void clear_notification_channel() ;
  const ::kentik::notification_channel::v202204alpha1::NotificationChannel& notification_channel() const;
  PROTOBUF_NODISCARD ::kentik::notification_channel::v202204alpha1::NotificationChannel* release_notification_channel();
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* mutable_notification_channel();
  void set_allocated_notification_channel(::kentik::notification_channel::v202204alpha1::NotificationChannel* value);
  void unsafe_arena_set_allocated_notification_channel(::kentik::notification_channel::v202204alpha1::NotificationChannel* value);
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* unsafe_arena_release_notification_channel();

  private:
  const ::kentik::notification_channel::v202204alpha1::NotificationChannel& _internal_notification_channel() const;
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* _internal_mutable_notification_channel();

  public:
  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetNotificationChannelResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::kentik::notification_channel::v202204alpha1::NotificationChannel* notification_channel_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// NotificationChannel

// string id = 1 [json_name = "id"];
inline void NotificationChannel::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& NotificationChannel::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.NotificationChannel.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationChannel::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202204alpha1.NotificationChannel.id)
}
inline std::string* NotificationChannel::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202204alpha1.NotificationChannel.id)
  return _s;
}
inline const std::string& NotificationChannel::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void NotificationChannel::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* NotificationChannel::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* NotificationChannel::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202204alpha1.NotificationChannel.id)
  return _impl_.id_.Release();
}
inline void NotificationChannel::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202204alpha1.NotificationChannel.id)
}

// string name = 2 [json_name = "name"];
inline void NotificationChannel::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& NotificationChannel::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.NotificationChannel.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationChannel::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202204alpha1.NotificationChannel.name)
}
inline std::string* NotificationChannel::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202204alpha1.NotificationChannel.name)
  return _s;
}
inline const std::string& NotificationChannel::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void NotificationChannel::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* NotificationChannel::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* NotificationChannel::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202204alpha1.NotificationChannel.name)
  return _impl_.name_.Release();
}
inline void NotificationChannel::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202204alpha1.NotificationChannel.name)
}

// .kentik.notification_channel.v202204alpha1.ChannelType type = 3 [json_name = "type"];
inline void NotificationChannel::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = 0;
}
inline ::kentik::notification_channel::v202204alpha1::ChannelType NotificationChannel::type() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.NotificationChannel.type)
  return _internal_type();
}
inline void NotificationChannel::set_type(::kentik::notification_channel::v202204alpha1::ChannelType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202204alpha1.NotificationChannel.type)
}
inline ::kentik::notification_channel::v202204alpha1::ChannelType NotificationChannel::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::kentik::notification_channel::v202204alpha1::ChannelType>(_impl_.type_);
}
inline void NotificationChannel::_internal_set_type(::kentik::notification_channel::v202204alpha1::ChannelType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_ = value;
}

// string status = 4 [json_name = "status"];
inline void NotificationChannel::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& NotificationChannel::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.NotificationChannel.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void NotificationChannel::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202204alpha1.NotificationChannel.status)
}
inline std::string* NotificationChannel::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202204alpha1.NotificationChannel.status)
  return _s;
}
inline const std::string& NotificationChannel::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void NotificationChannel::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* NotificationChannel::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* NotificationChannel::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202204alpha1.NotificationChannel.status)
  return _impl_.status_.Release();
}
inline void NotificationChannel::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202204alpha1.NotificationChannel.status)
}

// .google.protobuf.Timestamp cdate = 5 [json_name = "cdate"];
inline bool NotificationChannel::has_cdate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cdate_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& NotificationChannel::_internal_cdate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.cdate_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& NotificationChannel::cdate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.NotificationChannel.cdate)
  return _internal_cdate();
}
inline void NotificationChannel::unsafe_arena_set_allocated_cdate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cdate_);
  }
  _impl_.cdate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202204alpha1.NotificationChannel.cdate)
}
inline ::google::protobuf::Timestamp* NotificationChannel::release_cdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.cdate_;
  _impl_.cdate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* NotificationChannel::unsafe_arena_release_cdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202204alpha1.NotificationChannel.cdate)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.cdate_;
  _impl_.cdate_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* NotificationChannel::_internal_mutable_cdate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cdate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.cdate_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.cdate_;
}
inline ::google::protobuf::Timestamp* NotificationChannel::mutable_cdate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_cdate();
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202204alpha1.NotificationChannel.cdate)
  return _msg;
}
inline void NotificationChannel::set_allocated_cdate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cdate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cdate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202204alpha1.NotificationChannel.cdate)
}

// .google.protobuf.Timestamp edate = 6 [json_name = "edate"];
inline bool NotificationChannel::has_edate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.edate_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& NotificationChannel::_internal_edate() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.edate_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& NotificationChannel::edate() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.NotificationChannel.edate)
  return _internal_edate();
}
inline void NotificationChannel::unsafe_arena_set_allocated_edate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edate_);
  }
  _impl_.edate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202204alpha1.NotificationChannel.edate)
}
inline ::google::protobuf::Timestamp* NotificationChannel::release_edate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.edate_;
  _impl_.edate_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* NotificationChannel::unsafe_arena_release_edate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202204alpha1.NotificationChannel.edate)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.edate_;
  _impl_.edate_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* NotificationChannel::_internal_mutable_edate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.edate_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.edate_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.edate_;
}
inline ::google::protobuf::Timestamp* NotificationChannel::mutable_edate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_edate();
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202204alpha1.NotificationChannel.edate)
  return _msg;
}
inline void NotificationChannel::set_allocated_edate(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.edate_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.edate_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202204alpha1.NotificationChannel.edate)
}

// -------------------------------------------------------------------

// ListNotificationChannelsRequest

// -------------------------------------------------------------------

// ListNotificationChannelsResponse

// repeated .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channels = 1 [json_name = "notificationChannels"];
inline int ListNotificationChannelsResponse::_internal_notification_channels_size() const {
  return _internal_notification_channels().size();
}
inline int ListNotificationChannelsResponse::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void ListNotificationChannelsResponse::clear_notification_channels() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.notification_channels_.Clear();
}
inline ::kentik::notification_channel::v202204alpha1::NotificationChannel* ListNotificationChannelsResponse::mutable_notification_channels(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse.notification_channels)
  return _internal_mutable_notification_channels()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::kentik::notification_channel::v202204alpha1::NotificationChannel>* ListNotificationChannelsResponse::mutable_notification_channels()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse.notification_channels)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_notification_channels();
}
inline const ::kentik::notification_channel::v202204alpha1::NotificationChannel& ListNotificationChannelsResponse::notification_channels(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse.notification_channels)
  return _internal_notification_channels().Get(index);
}
inline ::kentik::notification_channel::v202204alpha1::NotificationChannel* ListNotificationChannelsResponse::add_notification_channels() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* _add = _internal_mutable_notification_channels()->Add();
  // @@protoc_insertion_point(field_add:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse.notification_channels)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::kentik::notification_channel::v202204alpha1::NotificationChannel>& ListNotificationChannelsResponse::notification_channels() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse.notification_channels)
  return _internal_notification_channels();
}
inline const ::google::protobuf::RepeatedPtrField<::kentik::notification_channel::v202204alpha1::NotificationChannel>&
ListNotificationChannelsResponse::_internal_notification_channels() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.notification_channels_;
}
inline ::google::protobuf::RepeatedPtrField<::kentik::notification_channel::v202204alpha1::NotificationChannel>*
ListNotificationChannelsResponse::_internal_mutable_notification_channels() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.notification_channels_;
}

// int32 invalid_count = 2 [json_name = "invalidCount"];
inline void ListNotificationChannelsResponse::clear_invalid_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.invalid_count_ = 0;
}
inline ::int32_t ListNotificationChannelsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListNotificationChannelsResponse::set_invalid_count(::int32_t value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202204alpha1.ListNotificationChannelsResponse.invalid_count)
}
inline ::int32_t ListNotificationChannelsResponse::_internal_invalid_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.invalid_count_;
}
inline void ListNotificationChannelsResponse::_internal_set_invalid_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.invalid_count_ = value;
}

// -------------------------------------------------------------------

// GetNotificationChannelRequest

// string id = 1 [json_name = "id"];
inline void GetNotificationChannelRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& GetNotificationChannelRequest::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetNotificationChannelRequest::set_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest.id)
}
inline std::string* GetNotificationChannelRequest::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest.id)
  return _s;
}
inline const std::string& GetNotificationChannelRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_.Get();
}
inline void GetNotificationChannelRequest::_internal_set_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.Set(value, GetArena());
}
inline std::string* GetNotificationChannelRequest::_internal_mutable_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* GetNotificationChannelRequest::release_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest.id)
  return _impl_.id_.Release();
}
inline void GetNotificationChannelRequest::set_allocated_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202204alpha1.GetNotificationChannelRequest.id)
}

// -------------------------------------------------------------------

// GetNotificationChannelResponse

// .kentik.notification_channel.v202204alpha1.NotificationChannel notification_channel = 1 [json_name = "notificationChannel"];
inline bool GetNotificationChannelResponse::has_notification_channel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.notification_channel_ != nullptr);
  return value;
}
inline void GetNotificationChannelResponse::clear_notification_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.notification_channel_ != nullptr) _impl_.notification_channel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::kentik::notification_channel::v202204alpha1::NotificationChannel& GetNotificationChannelResponse::_internal_notification_channel() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::kentik::notification_channel::v202204alpha1::NotificationChannel* p = _impl_.notification_channel_;
  return p != nullptr ? *p : reinterpret_cast<const ::kentik::notification_channel::v202204alpha1::NotificationChannel&>(::kentik::notification_channel::v202204alpha1::_NotificationChannel_default_instance_);
}
inline const ::kentik::notification_channel::v202204alpha1::NotificationChannel& GetNotificationChannelResponse::notification_channel() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse.notification_channel)
  return _internal_notification_channel();
}
inline void GetNotificationChannelResponse::unsafe_arena_set_allocated_notification_channel(::kentik::notification_channel::v202204alpha1::NotificationChannel* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.notification_channel_);
  }
  _impl_.notification_channel_ = reinterpret_cast<::kentik::notification_channel::v202204alpha1::NotificationChannel*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse.notification_channel)
}
inline ::kentik::notification_channel::v202204alpha1::NotificationChannel* GetNotificationChannelResponse::release_notification_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* released = _impl_.notification_channel_;
  _impl_.notification_channel_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::kentik::notification_channel::v202204alpha1::NotificationChannel* GetNotificationChannelResponse::unsafe_arena_release_notification_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse.notification_channel)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* temp = _impl_.notification_channel_;
  _impl_.notification_channel_ = nullptr;
  return temp;
}
inline ::kentik::notification_channel::v202204alpha1::NotificationChannel* GetNotificationChannelResponse::_internal_mutable_notification_channel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.notification_channel_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::kentik::notification_channel::v202204alpha1::NotificationChannel>(GetArena());
    _impl_.notification_channel_ = reinterpret_cast<::kentik::notification_channel::v202204alpha1::NotificationChannel*>(p);
  }
  return _impl_.notification_channel_;
}
inline ::kentik::notification_channel::v202204alpha1::NotificationChannel* GetNotificationChannelResponse::mutable_notification_channel() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::kentik::notification_channel::v202204alpha1::NotificationChannel* _msg = _internal_mutable_notification_channel();
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse.notification_channel)
  return _msg;
}
inline void GetNotificationChannelResponse::set_allocated_notification_channel(::kentik::notification_channel::v202204alpha1::NotificationChannel* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.notification_channel_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.notification_channel_ = reinterpret_cast<::kentik::notification_channel::v202204alpha1::NotificationChannel*>(value);
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202204alpha1.GetNotificationChannelResponse.notification_channel)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v202204alpha1
}  // namespace notification_channel
}  // namespace kentik


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::kentik::notification_channel::v202204alpha1::ChannelType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::kentik::notification_channel::v202204alpha1::ChannelType>() {
  return ::kentik::notification_channel::v202204alpha1::ChannelType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // kentik_2fnotification_5fchannel_2fv202204alpha1_2fnotification_5fchannel_2eproto_2epb_2eh
