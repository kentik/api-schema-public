// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/notification_channel/v202210/notification_channel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202303/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
namespace kentik {
namespace notification_channel {
namespace v202210 {
class GetNotificationChannelRequest;
class GetNotificationChannelRequestDefaultTypeInternal;
extern GetNotificationChannelRequestDefaultTypeInternal _GetNotificationChannelRequest_default_instance_;
class GetNotificationChannelResponse;
class GetNotificationChannelResponseDefaultTypeInternal;
extern GetNotificationChannelResponseDefaultTypeInternal _GetNotificationChannelResponse_default_instance_;
class ListNotificationChannelsRequest;
class ListNotificationChannelsRequestDefaultTypeInternal;
extern ListNotificationChannelsRequestDefaultTypeInternal _ListNotificationChannelsRequest_default_instance_;
class ListNotificationChannelsResponse;
class ListNotificationChannelsResponseDefaultTypeInternal;
extern ListNotificationChannelsResponseDefaultTypeInternal _ListNotificationChannelsResponse_default_instance_;
class NotificationChannel;
class NotificationChannelDefaultTypeInternal;
extern NotificationChannelDefaultTypeInternal _NotificationChannel_default_instance_;
class SearchNotificationChannelsRequest;
class SearchNotificationChannelsRequestDefaultTypeInternal;
extern SearchNotificationChannelsRequestDefaultTypeInternal _SearchNotificationChannelsRequest_default_instance_;
class SearchNotificationChannelsResponse;
class SearchNotificationChannelsResponseDefaultTypeInternal;
extern SearchNotificationChannelsResponseDefaultTypeInternal _SearchNotificationChannelsResponse_default_instance_;
}  // namespace v202210
}  // namespace notification_channel
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::notification_channel::v202210::GetNotificationChannelRequest* Arena::CreateMaybeMessage<::kentik::notification_channel::v202210::GetNotificationChannelRequest>(Arena*);
template<> ::kentik::notification_channel::v202210::GetNotificationChannelResponse* Arena::CreateMaybeMessage<::kentik::notification_channel::v202210::GetNotificationChannelResponse>(Arena*);
template<> ::kentik::notification_channel::v202210::ListNotificationChannelsRequest* Arena::CreateMaybeMessage<::kentik::notification_channel::v202210::ListNotificationChannelsRequest>(Arena*);
template<> ::kentik::notification_channel::v202210::ListNotificationChannelsResponse* Arena::CreateMaybeMessage<::kentik::notification_channel::v202210::ListNotificationChannelsResponse>(Arena*);
template<> ::kentik::notification_channel::v202210::NotificationChannel* Arena::CreateMaybeMessage<::kentik::notification_channel::v202210::NotificationChannel>(Arena*);
template<> ::kentik::notification_channel::v202210::SearchNotificationChannelsRequest* Arena::CreateMaybeMessage<::kentik::notification_channel::v202210::SearchNotificationChannelsRequest>(Arena*);
template<> ::kentik::notification_channel::v202210::SearchNotificationChannelsResponse* Arena::CreateMaybeMessage<::kentik::notification_channel::v202210::SearchNotificationChannelsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace notification_channel {
namespace v202210 {

enum ChannelType : int {
  CHANNEL_TYPE_UNSPECIFIED = 0,
  CHANNEL_TYPE_XMATTERS = 1,
  CHANNEL_TYPE_SLACK = 2,
  CHANNEL_TYPE_SERVICENOW = 3,
  CHANNEL_TYPE_SYSLOG = 4,
  CHANNEL_TYPE_OPSGENIE = 5,
  CHANNEL_TYPE_CUSTOM_WEBHOOK = 6,
  CHANNEL_TYPE_SPLUNK = 7,
  CHANNEL_TYPE_MSTEAMS = 8,
  CHANNEL_TYPE_JSON = 9,
  CHANNEL_TYPE_EMAIL = 10,
  CHANNEL_TYPE_VICTOROPS = 11,
  CHANNEL_TYPE_PAGERDUTY = 12,
  ChannelType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ChannelType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ChannelType_IsValid(int value);
constexpr ChannelType ChannelType_MIN = CHANNEL_TYPE_UNSPECIFIED;
constexpr ChannelType ChannelType_MAX = CHANNEL_TYPE_PAGERDUTY;
constexpr int ChannelType_ARRAYSIZE = ChannelType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor();
template<typename T>
inline const std::string& ChannelType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelType_descriptor(), enum_t_value);
}
inline bool ChannelType_Parse(
    const std::string& name, ChannelType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelType>(
    ChannelType_descriptor(), name, value);
}
// ===================================================================

class NotificationChannel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202210.NotificationChannel) */ {
 public:
  inline NotificationChannel() : NotificationChannel(nullptr) {};
  virtual ~NotificationChannel();

  NotificationChannel(const NotificationChannel& from);
  NotificationChannel(NotificationChannel&& from) noexcept
    : NotificationChannel() {
    *this = ::std::move(from);
  }

  inline NotificationChannel& operator=(const NotificationChannel& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationChannel& operator=(NotificationChannel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotificationChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotificationChannel* internal_default_instance() {
    return reinterpret_cast<const NotificationChannel*>(
               &_NotificationChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationChannel& a, NotificationChannel& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationChannel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationChannel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotificationChannel* New() const final {
    return CreateMaybeMessage<NotificationChannel>(nullptr);
  }

  NotificationChannel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotificationChannel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotificationChannel& from);
  void MergeFrom(const NotificationChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationChannel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.notification_channel.v202210.NotificationChannel";
  }
  protected:
  explicit NotificationChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto);
    return ::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kCdateFieldNumber = 5,
    kEdateFieldNumber = 6,
    kTypeFieldNumber = 3,
    kEnabledFieldNumber = 4,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_cdate() const;
  private:
  bool _internal_has_cdate() const;
  public:
  void clear_cdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_cdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cdate();
  void set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cdate();
  public:
  void unsafe_arena_set_allocated_cdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* cdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cdate();

  // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_edate() const;
  private:
  bool _internal_has_edate() const;
  public:
  void clear_edate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_edate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_edate();
  void set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_edate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_edate();
  public:
  void unsafe_arena_set_allocated_edate(
      PROTOBUF_NAMESPACE_ID::Timestamp* edate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_edate();

  // .kentik.notification_channel.v202210.ChannelType type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_type();
  ::kentik::notification_channel::v202210::ChannelType type() const;
  void set_type(::kentik::notification_channel::v202210::ChannelType value);
  private:
  ::kentik::notification_channel::v202210::ChannelType _internal_type() const;
  void _internal_set_type(::kentik::notification_channel::v202210::ChannelType value);
  public:

  // bool enabled = 4[json_name = "enabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202210.NotificationChannel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* cdate_;
  PROTOBUF_NAMESPACE_ID::Timestamp* edate_;
  int type_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationChannelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202210.ListNotificationChannelsRequest) */ {
 public:
  inline ListNotificationChannelsRequest() : ListNotificationChannelsRequest(nullptr) {};
  virtual ~ListNotificationChannelsRequest();

  ListNotificationChannelsRequest(const ListNotificationChannelsRequest& from);
  ListNotificationChannelsRequest(ListNotificationChannelsRequest&& from) noexcept
    : ListNotificationChannelsRequest() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelsRequest& operator=(const ListNotificationChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationChannelsRequest& operator=(ListNotificationChannelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNotificationChannelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotificationChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelsRequest*>(
               &_ListNotificationChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListNotificationChannelsRequest& a, ListNotificationChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationChannelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationChannelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNotificationChannelsRequest* New() const final {
    return CreateMaybeMessage<ListNotificationChannelsRequest>(nullptr);
  }

  ListNotificationChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNotificationChannelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNotificationChannelsRequest& from);
  void MergeFrom(const ListNotificationChannelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.notification_channel.v202210.ListNotificationChannelsRequest";
  }
  protected:
  explicit ListNotificationChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto);
    return ::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class ListNotificationChannelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202210.ListNotificationChannelsResponse) */ {
 public:
  inline ListNotificationChannelsResponse() : ListNotificationChannelsResponse(nullptr) {};
  virtual ~ListNotificationChannelsResponse();

  ListNotificationChannelsResponse(const ListNotificationChannelsResponse& from);
  ListNotificationChannelsResponse(ListNotificationChannelsResponse&& from) noexcept
    : ListNotificationChannelsResponse() {
    *this = ::std::move(from);
  }

  inline ListNotificationChannelsResponse& operator=(const ListNotificationChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNotificationChannelsResponse& operator=(ListNotificationChannelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListNotificationChannelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNotificationChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNotificationChannelsResponse*>(
               &_ListNotificationChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListNotificationChannelsResponse& a, ListNotificationChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNotificationChannelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNotificationChannelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListNotificationChannelsResponse* New() const final {
    return CreateMaybeMessage<ListNotificationChannelsResponse>(nullptr);
  }

  ListNotificationChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListNotificationChannelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListNotificationChannelsResponse& from);
  void MergeFrom(const ListNotificationChannelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNotificationChannelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.notification_channel.v202210.ListNotificationChannelsResponse";
  }
  protected:
  explicit ListNotificationChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto);
    return ::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationChannelsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  ::kentik::notification_channel::v202210::NotificationChannel* mutable_notification_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel >*
      mutable_notification_channels();
  private:
  const ::kentik::notification_channel::v202210::NotificationChannel& _internal_notification_channels(int index) const;
  ::kentik::notification_channel::v202210::NotificationChannel* _internal_add_notification_channels();
  public:
  const ::kentik::notification_channel::v202210::NotificationChannel& notification_channels(int index) const;
  ::kentik::notification_channel::v202210::NotificationChannel* add_notification_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel >&
      notification_channels() const;

  // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel > notification_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202210.GetNotificationChannelRequest) */ {
 public:
  inline GetNotificationChannelRequest() : GetNotificationChannelRequest(nullptr) {};
  virtual ~GetNotificationChannelRequest();

  GetNotificationChannelRequest(const GetNotificationChannelRequest& from);
  GetNotificationChannelRequest(GetNotificationChannelRequest&& from) noexcept
    : GetNotificationChannelRequest() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelRequest& operator=(const GetNotificationChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationChannelRequest& operator=(GetNotificationChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNotificationChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNotificationChannelRequest* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelRequest*>(
               &_GetNotificationChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetNotificationChannelRequest& a, GetNotificationChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNotificationChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNotificationChannelRequest* New() const final {
    return CreateMaybeMessage<GetNotificationChannelRequest>(nullptr);
  }

  GetNotificationChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNotificationChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNotificationChannelRequest& from);
  void MergeFrom(const GetNotificationChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.notification_channel.v202210.GetNotificationChannelRequest";
  }
  protected:
  explicit GetNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto);
    return ::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202210.GetNotificationChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class GetNotificationChannelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202210.GetNotificationChannelResponse) */ {
 public:
  inline GetNotificationChannelResponse() : GetNotificationChannelResponse(nullptr) {};
  virtual ~GetNotificationChannelResponse();

  GetNotificationChannelResponse(const GetNotificationChannelResponse& from);
  GetNotificationChannelResponse(GetNotificationChannelResponse&& from) noexcept
    : GetNotificationChannelResponse() {
    *this = ::std::move(from);
  }

  inline GetNotificationChannelResponse& operator=(const GetNotificationChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNotificationChannelResponse& operator=(GetNotificationChannelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetNotificationChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNotificationChannelResponse* internal_default_instance() {
    return reinterpret_cast<const GetNotificationChannelResponse*>(
               &_GetNotificationChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetNotificationChannelResponse& a, GetNotificationChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNotificationChannelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNotificationChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetNotificationChannelResponse* New() const final {
    return CreateMaybeMessage<GetNotificationChannelResponse>(nullptr);
  }

  GetNotificationChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetNotificationChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetNotificationChannelResponse& from);
  void MergeFrom(const GetNotificationChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNotificationChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.notification_channel.v202210.GetNotificationChannelResponse";
  }
  protected:
  explicit GetNotificationChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto);
    return ::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationChannelFieldNumber = 1,
  };
  // .kentik.notification_channel.v202210.NotificationChannel notification_channel = 1[json_name = "notificationChannel", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_notification_channel() const;
  private:
  bool _internal_has_notification_channel() const;
  public:
  void clear_notification_channel();
  const ::kentik::notification_channel::v202210::NotificationChannel& notification_channel() const;
  ::kentik::notification_channel::v202210::NotificationChannel* release_notification_channel();
  ::kentik::notification_channel::v202210::NotificationChannel* mutable_notification_channel();
  void set_allocated_notification_channel(::kentik::notification_channel::v202210::NotificationChannel* notification_channel);
  private:
  const ::kentik::notification_channel::v202210::NotificationChannel& _internal_notification_channel() const;
  ::kentik::notification_channel::v202210::NotificationChannel* _internal_mutable_notification_channel();
  public:
  void unsafe_arena_set_allocated_notification_channel(
      ::kentik::notification_channel::v202210::NotificationChannel* notification_channel);
  ::kentik::notification_channel::v202210::NotificationChannel* unsafe_arena_release_notification_channel();

  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202210.GetNotificationChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::notification_channel::v202210::NotificationChannel* notification_channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class SearchNotificationChannelsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202210.SearchNotificationChannelsRequest) */ {
 public:
  inline SearchNotificationChannelsRequest() : SearchNotificationChannelsRequest(nullptr) {};
  virtual ~SearchNotificationChannelsRequest();

  SearchNotificationChannelsRequest(const SearchNotificationChannelsRequest& from);
  SearchNotificationChannelsRequest(SearchNotificationChannelsRequest&& from) noexcept
    : SearchNotificationChannelsRequest() {
    *this = ::std::move(from);
  }

  inline SearchNotificationChannelsRequest& operator=(const SearchNotificationChannelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchNotificationChannelsRequest& operator=(SearchNotificationChannelsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchNotificationChannelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchNotificationChannelsRequest* internal_default_instance() {
    return reinterpret_cast<const SearchNotificationChannelsRequest*>(
               &_SearchNotificationChannelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SearchNotificationChannelsRequest& a, SearchNotificationChannelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchNotificationChannelsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchNotificationChannelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchNotificationChannelsRequest* New() const final {
    return CreateMaybeMessage<SearchNotificationChannelsRequest>(nullptr);
  }

  SearchNotificationChannelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchNotificationChannelsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchNotificationChannelsRequest& from);
  void MergeFrom(const SearchNotificationChannelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchNotificationChannelsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.notification_channel.v202210.SearchNotificationChannelsRequest";
  }
  protected:
  explicit SearchNotificationChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto);
    return ::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypesFieldNumber = 2,
    kNamePatternFieldNumber = 1,
    kIncludeDisabledFieldNumber = 3,
  };
  // repeated .kentik.notification_channel.v202210.ChannelType types = 2[json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  private:
  ::kentik::notification_channel::v202210::ChannelType _internal_types(int index) const;
  void _internal_add_types(::kentik::notification_channel::v202210::ChannelType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_types();
  public:
  ::kentik::notification_channel::v202210::ChannelType types(int index) const;
  void set_types(int index, ::kentik::notification_channel::v202210::ChannelType value);
  void add_types(::kentik::notification_channel::v202210::ChannelType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_types();

  // string name_pattern = 1[json_name = "namePattern", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name_pattern();
  const std::string& name_pattern() const;
  void set_name_pattern(const std::string& value);
  void set_name_pattern(std::string&& value);
  void set_name_pattern(const char* value);
  void set_name_pattern(const char* value, size_t size);
  std::string* mutable_name_pattern();
  std::string* release_name_pattern();
  void set_allocated_name_pattern(std::string* name_pattern);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name_pattern();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name_pattern(
      std::string* name_pattern);
  private:
  const std::string& _internal_name_pattern() const;
  void _internal_set_name_pattern(const std::string& value);
  std::string* _internal_mutable_name_pattern();
  public:

  // bool include_disabled = 3[json_name = "includeDisabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_include_disabled();
  bool include_disabled() const;
  void set_include_disabled(bool value);
  private:
  bool _internal_include_disabled() const;
  void _internal_set_include_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> types_;
  mutable std::atomic<int> _types_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_pattern_;
  bool include_disabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
};
// -------------------------------------------------------------------

class SearchNotificationChannelsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.notification_channel.v202210.SearchNotificationChannelsResponse) */ {
 public:
  inline SearchNotificationChannelsResponse() : SearchNotificationChannelsResponse(nullptr) {};
  virtual ~SearchNotificationChannelsResponse();

  SearchNotificationChannelsResponse(const SearchNotificationChannelsResponse& from);
  SearchNotificationChannelsResponse(SearchNotificationChannelsResponse&& from) noexcept
    : SearchNotificationChannelsResponse() {
    *this = ::std::move(from);
  }

  inline SearchNotificationChannelsResponse& operator=(const SearchNotificationChannelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchNotificationChannelsResponse& operator=(SearchNotificationChannelsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SearchNotificationChannelsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SearchNotificationChannelsResponse* internal_default_instance() {
    return reinterpret_cast<const SearchNotificationChannelsResponse*>(
               &_SearchNotificationChannelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SearchNotificationChannelsResponse& a, SearchNotificationChannelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchNotificationChannelsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchNotificationChannelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SearchNotificationChannelsResponse* New() const final {
    return CreateMaybeMessage<SearchNotificationChannelsResponse>(nullptr);
  }

  SearchNotificationChannelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SearchNotificationChannelsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SearchNotificationChannelsResponse& from);
  void MergeFrom(const SearchNotificationChannelsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchNotificationChannelsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.notification_channel.v202210.SearchNotificationChannelsResponse";
  }
  protected:
  explicit SearchNotificationChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto);
    return ::descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNotificationChannelsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int notification_channels_size() const;
  private:
  int _internal_notification_channels_size() const;
  public:
  void clear_notification_channels();
  ::kentik::notification_channel::v202210::NotificationChannel* mutable_notification_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel >*
      mutable_notification_channels();
  private:
  const ::kentik::notification_channel::v202210::NotificationChannel& _internal_notification_channels(int index) const;
  ::kentik::notification_channel::v202210::NotificationChannel* _internal_add_notification_channels();
  public:
  const ::kentik::notification_channel::v202210::NotificationChannel& notification_channels(int index) const;
  ::kentik::notification_channel::v202210::NotificationChannel* add_notification_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel >&
      notification_channels() const;

  // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel > notification_channels_;
  ::PROTOBUF_NAMESPACE_ID::int32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationChannel

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NotificationChannel::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NotificationChannel::id() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.NotificationChannel.id)
  return _internal_id();
}
inline void NotificationChannel::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.NotificationChannel.id)
}
inline std::string* NotificationChannel::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.NotificationChannel.id)
  return _internal_mutable_id();
}
inline const std::string& NotificationChannel::_internal_id() const {
  return id_.Get();
}
inline void NotificationChannel::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NotificationChannel::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.notification_channel.v202210.NotificationChannel.id)
}
inline void NotificationChannel::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.notification_channel.v202210.NotificationChannel.id)
}
inline void NotificationChannel::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.notification_channel.v202210.NotificationChannel.id)
}
inline std::string* NotificationChannel::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NotificationChannel::release_id() {
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202210.NotificationChannel.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationChannel::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202210.NotificationChannel.id)
}
inline std::string* NotificationChannel::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.notification_channel.v202210.NotificationChannel.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NotificationChannel::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202210.NotificationChannel.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NotificationChannel::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NotificationChannel::name() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.NotificationChannel.name)
  return _internal_name();
}
inline void NotificationChannel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.NotificationChannel.name)
}
inline std::string* NotificationChannel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.NotificationChannel.name)
  return _internal_mutable_name();
}
inline const std::string& NotificationChannel::_internal_name() const {
  return name_.Get();
}
inline void NotificationChannel::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NotificationChannel::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.notification_channel.v202210.NotificationChannel.name)
}
inline void NotificationChannel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.notification_channel.v202210.NotificationChannel.name)
}
inline void NotificationChannel::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.notification_channel.v202210.NotificationChannel.name)
}
inline std::string* NotificationChannel::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NotificationChannel::release_name() {
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202210.NotificationChannel.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NotificationChannel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202210.NotificationChannel.name)
}
inline std::string* NotificationChannel::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.notification_channel.v202210.NotificationChannel.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NotificationChannel::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202210.NotificationChannel.name)
}

// .kentik.notification_channel.v202210.ChannelType type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NotificationChannel::clear_type() {
  type_ = 0;
}
inline ::kentik::notification_channel::v202210::ChannelType NotificationChannel::_internal_type() const {
  return static_cast< ::kentik::notification_channel::v202210::ChannelType >(type_);
}
inline ::kentik::notification_channel::v202210::ChannelType NotificationChannel::type() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.NotificationChannel.type)
  return _internal_type();
}
inline void NotificationChannel::_internal_set_type(::kentik::notification_channel::v202210::ChannelType value) {
  
  type_ = value;
}
inline void NotificationChannel::set_type(::kentik::notification_channel::v202210::ChannelType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.NotificationChannel.type)
}

// bool enabled = 4[json_name = "enabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void NotificationChannel::clear_enabled() {
  enabled_ = false;
}
inline bool NotificationChannel::_internal_enabled() const {
  return enabled_;
}
inline bool NotificationChannel::enabled() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.NotificationChannel.enabled)
  return _internal_enabled();
}
inline void NotificationChannel::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void NotificationChannel::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.NotificationChannel.enabled)
}

// .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool NotificationChannel::_internal_has_cdate() const {
  return this != internal_default_instance() && cdate_ != nullptr;
}
inline bool NotificationChannel::has_cdate() const {
  return _internal_has_cdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NotificationChannel::_internal_cdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = cdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NotificationChannel::cdate() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.NotificationChannel.cdate)
  return _internal_cdate();
}
inline void NotificationChannel::unsafe_arena_set_allocated_cdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  cdate_ = cdate;
  if (cdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202210.NotificationChannel.cdate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NotificationChannel::release_cdate() {
  auto temp = unsafe_arena_release_cdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NotificationChannel::unsafe_arena_release_cdate() {
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202210.NotificationChannel.cdate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = cdate_;
  cdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NotificationChannel::_internal_mutable_cdate() {
  
  if (cdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    cdate_ = p;
  }
  return cdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NotificationChannel::mutable_cdate() {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.NotificationChannel.cdate)
  return _internal_mutable_cdate();
}
inline void NotificationChannel::set_allocated_cdate(PROTOBUF_NAMESPACE_ID::Timestamp* cdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate_);
  }
  if (cdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cdate)->GetArena();
    if (message_arena != submessage_arena) {
      cdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cdate, submessage_arena);
    }
    
  } else {
    
  }
  cdate_ = cdate;
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202210.NotificationChannel.cdate)
}

// .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool NotificationChannel::_internal_has_edate() const {
  return this != internal_default_instance() && edate_ != nullptr;
}
inline bool NotificationChannel::has_edate() const {
  return _internal_has_edate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NotificationChannel::_internal_edate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = edate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& NotificationChannel::edate() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.NotificationChannel.edate)
  return _internal_edate();
}
inline void NotificationChannel::unsafe_arena_set_allocated_edate(
    PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  edate_ = edate;
  if (edate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202210.NotificationChannel.edate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NotificationChannel::release_edate() {
  auto temp = unsafe_arena_release_edate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NotificationChannel::unsafe_arena_release_edate() {
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202210.NotificationChannel.edate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = edate_;
  edate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NotificationChannel::_internal_mutable_edate() {
  
  if (edate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    edate_ = p;
  }
  return edate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* NotificationChannel::mutable_edate() {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.NotificationChannel.edate)
  return _internal_mutable_edate();
}
inline void NotificationChannel::set_allocated_edate(PROTOBUF_NAMESPACE_ID::Timestamp* edate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate_);
  }
  if (edate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(edate)->GetArena();
    if (message_arena != submessage_arena) {
      edate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, edate, submessage_arena);
    }
    
  } else {
    
  }
  edate_ = edate;
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202210.NotificationChannel.edate)
}

// -------------------------------------------------------------------

// ListNotificationChannelsRequest

// -------------------------------------------------------------------

// ListNotificationChannelsResponse

// repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListNotificationChannelsResponse::_internal_notification_channels_size() const {
  return notification_channels_.size();
}
inline int ListNotificationChannelsResponse::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void ListNotificationChannelsResponse::clear_notification_channels() {
  notification_channels_.Clear();
}
inline ::kentik::notification_channel::v202210::NotificationChannel* ListNotificationChannelsResponse::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.ListNotificationChannelsResponse.notification_channels)
  return notification_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel >*
ListNotificationChannelsResponse::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.notification_channel.v202210.ListNotificationChannelsResponse.notification_channels)
  return &notification_channels_;
}
inline const ::kentik::notification_channel::v202210::NotificationChannel& ListNotificationChannelsResponse::_internal_notification_channels(int index) const {
  return notification_channels_.Get(index);
}
inline const ::kentik::notification_channel::v202210::NotificationChannel& ListNotificationChannelsResponse::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.ListNotificationChannelsResponse.notification_channels)
  return _internal_notification_channels(index);
}
inline ::kentik::notification_channel::v202210::NotificationChannel* ListNotificationChannelsResponse::_internal_add_notification_channels() {
  return notification_channels_.Add();
}
inline ::kentik::notification_channel::v202210::NotificationChannel* ListNotificationChannelsResponse::add_notification_channels() {
  // @@protoc_insertion_point(field_add:kentik.notification_channel.v202210.ListNotificationChannelsResponse.notification_channels)
  return _internal_add_notification_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel >&
ListNotificationChannelsResponse::notification_channels() const {
  // @@protoc_insertion_point(field_list:kentik.notification_channel.v202210.ListNotificationChannelsResponse.notification_channels)
  return notification_channels_;
}

// int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ListNotificationChannelsResponse::clear_invalid_count() {
  invalid_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListNotificationChannelsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListNotificationChannelsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.ListNotificationChannelsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void ListNotificationChannelsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invalid_count_ = value;
}
inline void ListNotificationChannelsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.ListNotificationChannelsResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetNotificationChannelRequest

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetNotificationChannelRequest::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetNotificationChannelRequest::id() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
  return _internal_id();
}
inline void GetNotificationChannelRequest::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
}
inline std::string* GetNotificationChannelRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetNotificationChannelRequest::_internal_id() const {
  return id_.Get();
}
inline void GetNotificationChannelRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetNotificationChannelRequest::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
}
inline void GetNotificationChannelRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
}
inline void GetNotificationChannelRequest::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
}
inline std::string* GetNotificationChannelRequest::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetNotificationChannelRequest::release_id() {
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetNotificationChannelRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
}
inline std::string* GetNotificationChannelRequest::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetNotificationChannelRequest::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202210.GetNotificationChannelRequest.id)
}

// -------------------------------------------------------------------

// GetNotificationChannelResponse

// .kentik.notification_channel.v202210.NotificationChannel notification_channel = 1[json_name = "notificationChannel", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetNotificationChannelResponse::_internal_has_notification_channel() const {
  return this != internal_default_instance() && notification_channel_ != nullptr;
}
inline bool GetNotificationChannelResponse::has_notification_channel() const {
  return _internal_has_notification_channel();
}
inline void GetNotificationChannelResponse::clear_notification_channel() {
  if (GetArena() == nullptr && notification_channel_ != nullptr) {
    delete notification_channel_;
  }
  notification_channel_ = nullptr;
}
inline const ::kentik::notification_channel::v202210::NotificationChannel& GetNotificationChannelResponse::_internal_notification_channel() const {
  const ::kentik::notification_channel::v202210::NotificationChannel* p = notification_channel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::notification_channel::v202210::NotificationChannel*>(
      &::kentik::notification_channel::v202210::_NotificationChannel_default_instance_);
}
inline const ::kentik::notification_channel::v202210::NotificationChannel& GetNotificationChannelResponse::notification_channel() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.GetNotificationChannelResponse.notification_channel)
  return _internal_notification_channel();
}
inline void GetNotificationChannelResponse::unsafe_arena_set_allocated_notification_channel(
    ::kentik::notification_channel::v202210::NotificationChannel* notification_channel) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(notification_channel_);
  }
  notification_channel_ = notification_channel;
  if (notification_channel) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202210.GetNotificationChannelResponse.notification_channel)
}
inline ::kentik::notification_channel::v202210::NotificationChannel* GetNotificationChannelResponse::release_notification_channel() {
  auto temp = unsafe_arena_release_notification_channel();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::notification_channel::v202210::NotificationChannel* GetNotificationChannelResponse::unsafe_arena_release_notification_channel() {
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202210.GetNotificationChannelResponse.notification_channel)
  
  ::kentik::notification_channel::v202210::NotificationChannel* temp = notification_channel_;
  notification_channel_ = nullptr;
  return temp;
}
inline ::kentik::notification_channel::v202210::NotificationChannel* GetNotificationChannelResponse::_internal_mutable_notification_channel() {
  
  if (notification_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::notification_channel::v202210::NotificationChannel>(GetArena());
    notification_channel_ = p;
  }
  return notification_channel_;
}
inline ::kentik::notification_channel::v202210::NotificationChannel* GetNotificationChannelResponse::mutable_notification_channel() {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.GetNotificationChannelResponse.notification_channel)
  return _internal_mutable_notification_channel();
}
inline void GetNotificationChannelResponse::set_allocated_notification_channel(::kentik::notification_channel::v202210::NotificationChannel* notification_channel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete notification_channel_;
  }
  if (notification_channel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(notification_channel);
    if (message_arena != submessage_arena) {
      notification_channel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notification_channel, submessage_arena);
    }
    
  } else {
    
  }
  notification_channel_ = notification_channel;
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202210.GetNotificationChannelResponse.notification_channel)
}

// -------------------------------------------------------------------

// SearchNotificationChannelsRequest

// string name_pattern = 1[json_name = "namePattern", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SearchNotificationChannelsRequest::clear_name_pattern() {
  name_pattern_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SearchNotificationChannelsRequest::name_pattern() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
  return _internal_name_pattern();
}
inline void SearchNotificationChannelsRequest::set_name_pattern(const std::string& value) {
  _internal_set_name_pattern(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
}
inline std::string* SearchNotificationChannelsRequest::mutable_name_pattern() {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
  return _internal_mutable_name_pattern();
}
inline const std::string& SearchNotificationChannelsRequest::_internal_name_pattern() const {
  return name_pattern_.Get();
}
inline void SearchNotificationChannelsRequest::_internal_set_name_pattern(const std::string& value) {
  
  name_pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SearchNotificationChannelsRequest::set_name_pattern(std::string&& value) {
  
  name_pattern_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
}
inline void SearchNotificationChannelsRequest::set_name_pattern(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
}
inline void SearchNotificationChannelsRequest::set_name_pattern(const char* value,
    size_t size) {
  
  name_pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
}
inline std::string* SearchNotificationChannelsRequest::_internal_mutable_name_pattern() {
  
  return name_pattern_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SearchNotificationChannelsRequest::release_name_pattern() {
  // @@protoc_insertion_point(field_release:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
  return name_pattern_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SearchNotificationChannelsRequest::set_allocated_name_pattern(std::string* name_pattern) {
  if (name_pattern != nullptr) {
    
  } else {
    
  }
  name_pattern_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_pattern,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
}
inline std::string* SearchNotificationChannelsRequest::unsafe_arena_release_name_pattern() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_pattern_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SearchNotificationChannelsRequest::unsafe_arena_set_allocated_name_pattern(
    std::string* name_pattern) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name_pattern != nullptr) {
    
  } else {
    
  }
  name_pattern_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name_pattern, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern)
}

// repeated .kentik.notification_channel.v202210.ChannelType types = 2[json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int SearchNotificationChannelsRequest::_internal_types_size() const {
  return types_.size();
}
inline int SearchNotificationChannelsRequest::types_size() const {
  return _internal_types_size();
}
inline void SearchNotificationChannelsRequest::clear_types() {
  types_.Clear();
}
inline ::kentik::notification_channel::v202210::ChannelType SearchNotificationChannelsRequest::_internal_types(int index) const {
  return static_cast< ::kentik::notification_channel::v202210::ChannelType >(types_.Get(index));
}
inline ::kentik::notification_channel::v202210::ChannelType SearchNotificationChannelsRequest::types(int index) const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.types)
  return _internal_types(index);
}
inline void SearchNotificationChannelsRequest::set_types(int index, ::kentik::notification_channel::v202210::ChannelType value) {
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.types)
}
inline void SearchNotificationChannelsRequest::_internal_add_types(::kentik::notification_channel::v202210::ChannelType value) {
  types_.Add(value);
}
inline void SearchNotificationChannelsRequest::add_types(::kentik::notification_channel::v202210::ChannelType value) {
  // @@protoc_insertion_point(field_add:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.types)
  _internal_add_types(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
SearchNotificationChannelsRequest::types() const {
  // @@protoc_insertion_point(field_list:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SearchNotificationChannelsRequest::_internal_mutable_types() {
  return &types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
SearchNotificationChannelsRequest::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.types)
  return _internal_mutable_types();
}

// bool include_disabled = 3[json_name = "includeDisabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SearchNotificationChannelsRequest::clear_include_disabled() {
  include_disabled_ = false;
}
inline bool SearchNotificationChannelsRequest::_internal_include_disabled() const {
  return include_disabled_;
}
inline bool SearchNotificationChannelsRequest::include_disabled() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.include_disabled)
  return _internal_include_disabled();
}
inline void SearchNotificationChannelsRequest::_internal_set_include_disabled(bool value) {
  
  include_disabled_ = value;
}
inline void SearchNotificationChannelsRequest::set_include_disabled(bool value) {
  _internal_set_include_disabled(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.SearchNotificationChannelsRequest.include_disabled)
}

// -------------------------------------------------------------------

// SearchNotificationChannelsResponse

// repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int SearchNotificationChannelsResponse::_internal_notification_channels_size() const {
  return notification_channels_.size();
}
inline int SearchNotificationChannelsResponse::notification_channels_size() const {
  return _internal_notification_channels_size();
}
inline void SearchNotificationChannelsResponse::clear_notification_channels() {
  notification_channels_.Clear();
}
inline ::kentik::notification_channel::v202210::NotificationChannel* SearchNotificationChannelsResponse::mutable_notification_channels(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.notification_channel.v202210.SearchNotificationChannelsResponse.notification_channels)
  return notification_channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel >*
SearchNotificationChannelsResponse::mutable_notification_channels() {
  // @@protoc_insertion_point(field_mutable_list:kentik.notification_channel.v202210.SearchNotificationChannelsResponse.notification_channels)
  return &notification_channels_;
}
inline const ::kentik::notification_channel::v202210::NotificationChannel& SearchNotificationChannelsResponse::_internal_notification_channels(int index) const {
  return notification_channels_.Get(index);
}
inline const ::kentik::notification_channel::v202210::NotificationChannel& SearchNotificationChannelsResponse::notification_channels(int index) const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.SearchNotificationChannelsResponse.notification_channels)
  return _internal_notification_channels(index);
}
inline ::kentik::notification_channel::v202210::NotificationChannel* SearchNotificationChannelsResponse::_internal_add_notification_channels() {
  return notification_channels_.Add();
}
inline ::kentik::notification_channel::v202210::NotificationChannel* SearchNotificationChannelsResponse::add_notification_channels() {
  // @@protoc_insertion_point(field_add:kentik.notification_channel.v202210.SearchNotificationChannelsResponse.notification_channels)
  return _internal_add_notification_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::notification_channel::v202210::NotificationChannel >&
SearchNotificationChannelsResponse::notification_channels() const {
  // @@protoc_insertion_point(field_list:kentik.notification_channel.v202210.SearchNotificationChannelsResponse.notification_channels)
  return notification_channels_;
}

// int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void SearchNotificationChannelsResponse::clear_invalid_count() {
  invalid_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchNotificationChannelsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SearchNotificationChannelsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.notification_channel.v202210.SearchNotificationChannelsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void SearchNotificationChannelsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  invalid_count_ = value;
}
inline void SearchNotificationChannelsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.notification_channel.v202210.SearchNotificationChannelsResponse.invalid_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202210
}  // namespace notification_channel
}  // namespace kentik

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kentik::notification_channel::v202210::ChannelType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::kentik::notification_channel::v202210::ChannelType>() {
  return ::kentik::notification_channel::v202210::ChannelType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto
