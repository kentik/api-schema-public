// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/notification_channel/v202210/notification_channel.proto

#include "kentik/notification_channel/v202210/notification_channel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto;
namespace kentik {
namespace notification_channel {
namespace v202210 {
class NotificationChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NotificationChannel> _instance;
} _NotificationChannel_default_instance_;
class ListNotificationChannelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNotificationChannelsRequest> _instance;
} _ListNotificationChannelsRequest_default_instance_;
class ListNotificationChannelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListNotificationChannelsResponse> _instance;
} _ListNotificationChannelsResponse_default_instance_;
class GetNotificationChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNotificationChannelRequest> _instance;
} _GetNotificationChannelRequest_default_instance_;
class GetNotificationChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetNotificationChannelResponse> _instance;
} _GetNotificationChannelResponse_default_instance_;
class SearchNotificationChannelsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchNotificationChannelsRequest> _instance;
} _SearchNotificationChannelsRequest_default_instance_;
class SearchNotificationChannelsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SearchNotificationChannelsResponse> _instance;
} _SearchNotificationChannelsResponse_default_instance_;
}  // namespace v202210
}  // namespace notification_channel
}  // namespace kentik
static void InitDefaultsscc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202210::_GetNotificationChannelRequest_default_instance_;
    new (ptr) ::kentik::notification_channel::v202210::GetNotificationChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202210::GetNotificationChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto}, {}};

static void InitDefaultsscc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202210::_GetNotificationChannelResponse_default_instance_;
    new (ptr) ::kentik::notification_channel::v202210::GetNotificationChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202210::GetNotificationChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto}, {
      &scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,}};

static void InitDefaultsscc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202210::_ListNotificationChannelsRequest_default_instance_;
    new (ptr) ::kentik::notification_channel::v202210::ListNotificationChannelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202210::ListNotificationChannelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto}, {}};

static void InitDefaultsscc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202210::_ListNotificationChannelsResponse_default_instance_;
    new (ptr) ::kentik::notification_channel::v202210::ListNotificationChannelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202210::ListNotificationChannelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto}, {
      &scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,}};

static void InitDefaultsscc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202210::_NotificationChannel_default_instance_;
    new (ptr) ::kentik::notification_channel::v202210::NotificationChannel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202210::NotificationChannel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SearchNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202210::_SearchNotificationChannelsRequest_default_instance_;
    new (ptr) ::kentik::notification_channel::v202210::SearchNotificationChannelsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202210::SearchNotificationChannelsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SearchNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SearchNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto}, {}};

static void InitDefaultsscc_info_SearchNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::kentik::notification_channel::v202210::_SearchNotificationChannelsResponse_default_instance_;
    new (ptr) ::kentik::notification_channel::v202210::SearchNotificationChannelsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::kentik::notification_channel::v202210::SearchNotificationChannelsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SearchNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SearchNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto}, {
      &scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::NotificationChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::NotificationChannel, id_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::NotificationChannel, name_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::NotificationChannel, type_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::NotificationChannel, enabled_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::NotificationChannel, cdate_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::NotificationChannel, edate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::ListNotificationChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::ListNotificationChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::ListNotificationChannelsResponse, notification_channels_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::ListNotificationChannelsResponse, invalid_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::GetNotificationChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::GetNotificationChannelRequest, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::GetNotificationChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::GetNotificationChannelResponse, notification_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::SearchNotificationChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::SearchNotificationChannelsRequest, name_pattern_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::SearchNotificationChannelsRequest, types_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::SearchNotificationChannelsRequest, include_disabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::SearchNotificationChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::SearchNotificationChannelsResponse, notification_channels_),
  PROTOBUF_FIELD_OFFSET(::kentik::notification_channel::v202210::SearchNotificationChannelsResponse, invalid_count_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::kentik::notification_channel::v202210::NotificationChannel)},
  { 11, -1, sizeof(::kentik::notification_channel::v202210::ListNotificationChannelsRequest)},
  { 16, -1, sizeof(::kentik::notification_channel::v202210::ListNotificationChannelsResponse)},
  { 23, -1, sizeof(::kentik::notification_channel::v202210::GetNotificationChannelRequest)},
  { 29, -1, sizeof(::kentik::notification_channel::v202210::GetNotificationChannelResponse)},
  { 35, -1, sizeof(::kentik::notification_channel::v202210::SearchNotificationChannelsRequest)},
  { 43, -1, sizeof(::kentik::notification_channel::v202210::SearchNotificationChannelsResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202210::_NotificationChannel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202210::_ListNotificationChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202210::_ListNotificationChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202210::_GetNotificationChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202210::_GetNotificationChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202210::_SearchNotificationChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::kentik::notification_channel::v202210::_SearchNotificationChannelsResponse_default_instance_),
};

const char descriptor_table_protodef_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n>kentik/notification_channel/v202210/no"
  "tification_channel.proto\022#kentik.notific"
  "ation_channel.v202210\032\034google/api/annota"
  "tions.proto\032\027google/api/client.proto\032\037go"
  "ogle/api/field_behavior.proto\032.protoc-ge"
  "n-openapiv2/options/annotations.proto\032+k"
  "entik/core/v202012alpha1/annotations.pro"
  "to\032\037google/protobuf/timestamp.proto\"\347\003\n\023"
  "NotificationChannel\0229\n\002id\030\001 \001(\tB)\222A\"2 Un"
  "ique identifier of the channel\342A\001\003R\002id\022>"
  "\n\004name\030\002 \001(\tB*\222A#2!User selected name of"
  " the channel\342A\001\003R\004name\022h\n\004type\030\003 \001(\01620.k"
  "entik.notification_channel.v202210.Chann"
  "elTypeB\"\222A\0332\031Notification channel type\342A"
  "\001\003R\004type\0228\n\007enabled\030\004 \001(\010B\036\222A\0272\025Administ"
  "rative status\342A\001\003R\007enabled\022S\n\005cdate\030\005 \001("
  "\0132\032.google.protobuf.TimestampB!\222A\0322\030Crea"
  "tion timestamp (UTC)\342A\001\003R\005cdate\022\\\n\005edate"
  "\030\006 \001(\0132\032.google.protobuf.TimestampB*\222A#2"
  "!Last modification timestamp (UTC)\342A\001\003R\005"
  "edate\"!\n\037ListNotificationChannelsRequest"
  "\"\277\002\n ListNotificationChannelsResponse\022\225\001"
  "\n\025notification_channels\030\001 \003(\01328.kentik.n"
  "otification_channel.v202210.Notification"
  "ChannelB&\222A\0372\035List of notification chann"
  "els\342A\001\003R\024notificationChannels\022\202\001\n\rinvali"
  "d_count\030\002 \001(\005B]\222AV2TNumber of invalid en"
  "tries that were not included in the list"
  " (should be always zero)\342A\001\003R\014invalidCou"
  "nt\"M\n\035GetNotificationChannelRequest\022,\n\002i"
  "d\030\001 \001(\tB\034\222A\0252\023Request channel ID.\342A\001\003R\002i"
  "d\"\270\001\n\036GetNotificationChannelResponse\022\225\001\n"
  "\024notification_channel\030\001 \001(\01328.kentik.not"
  "ification_channel.v202210.NotificationCh"
  "annelB(\222A!2\037Data for the requested chann"
  "el.\342A\001\003R\023notificationChannel\"\205\004\n!SearchN"
  "otificationChannelsRequest\022\343\001\n\014name_patt"
  "ern\030\001 \001(\tB\277\001\222A\273\0012\270\001Regular expression pa"
  "ttern for matching the name attribute of"
  " channels. Empty string matches any name"
  ", otherwise the regular expression must "
  "consume all characters in the channel na"
  "me.R\013namePattern\022\233\001\n\005types\030\002 \003(\01620.kenti"
  "k.notification_channel.v202210.ChannelTy"
  "peBS\222AP2NList of ChannelType enum values"
  " to match. Empty list matches any channe"
  "l type.R\005types\022\\\n\020include_disabled\030\003 \001(\010"
  "B1\222A.2%Include disabled channels in resu"
  "lts.:\005falseR\017includeDisabled\"\313\002\n\"SearchN"
  "otificationChannelsResponse\022\237\001\n\025notifica"
  "tion_channels\030\001 \003(\01328.kentik.notificatio"
  "n_channel.v202210.NotificationChannelB0\222"
  "A)2\'List of matching notification channe"
  "ls.\342A\001\003R\024notificationChannels\022\202\001\n\rinvali"
  "d_count\030\002 \001(\005B]\222AV2TNumber of invalid en"
  "tries that were not included in the list"
  " (should be always zero)\342A\001\003R\014invalidCou"
  "nt*\352\002\n\013ChannelType\022\034\n\030CHANNEL_TYPE_UNSPE"
  "CIFIED\020\000\022\031\n\025CHANNEL_TYPE_XMATTERS\020\001\022\026\n\022C"
  "HANNEL_TYPE_SLACK\020\002\022\033\n\027CHANNEL_TYPE_SERV"
  "ICENOW\020\003\022\027\n\023CHANNEL_TYPE_SYSLOG\020\004\022\031\n\025CHA"
  "NNEL_TYPE_OPSGENIE\020\005\022\037\n\033CHANNEL_TYPE_CUS"
  "TOM_WEBHOOK\020\006\022\027\n\023CHANNEL_TYPE_SPLUNK\020\007\022\030"
  "\n\024CHANNEL_TYPE_MSTEAMS\020\010\022\025\n\021CHANNEL_TYPE"
  "_JSON\020\t\022\026\n\022CHANNEL_TYPE_EMAIL\020\n\022\032\n\026CHANN"
  "EL_TYPE_VICTOROPS\020\013\022\032\n\026CHANNEL_TYPE_PAGE"
  "RDUTY\020\0142\261\013\n\032NotificationChannelService\022\202"
  "\003\n\030ListNotificationChannels\022D.kentik.not"
  "ification_channel.v202210.ListNotificati"
  "onChannelsRequest\032E.kentik.notification_"
  "channel.v202210.ListNotificationChannels"
  "Response\"\330\001\222Aw\022$List available notificat"
  "ion channels\0325Returns list of all config"
  "ured notification channels.*\030ListNotific"
  "ationChannels\362\327\002\037admin.notification_chan"
  "nel:read\202\323\344\223\0025\0223/notification_channel/v2"
  "02210/notification_channels\022\225\003\n\026GetNotif"
  "icationChannel\022B.kentik.notification_cha"
  "nnel.v202210.GetNotificationChannelReque"
  "st\032C.kentik.notification_channel.v202210"
  ".GetNotificationChannelResponse\"\361\001\222A\212\001\022,"
  "Get information about a notification cha"
  "nnel\032BReturns information about a notifi"
  "cation channel with specific ID.*\026GetNot"
  "ificationChannel\362\327\002\037admin.notification_c"
  "hannel:read\202\323\344\223\002:\0228/notification_channel"
  "/v202210/notification_channels/{id}\022\273\004\n\032"
  "SearchNotificationChannels\022F.kentik.noti"
  "fication_channel.v202210.SearchNotificat"
  "ionChannelsRequest\032G.kentik.notification"
  "_channel.v202210.SearchNotificationChann"
  "elsResponse\"\213\003\222A\237\002\0221Retrieve notificatio"
  "n channels matching criteria.\032\315\001Returns "
  "list of all notification channels matchi"
  "ng request criteria. Match criteria are "
  "treated as a logical AND, i.e. all provi"
  "ded criteria must match in order for an "
  "entry to be included in the response.*\032S"
  "earchNotificationChannels\362\327\002\037admin.notif"
  "ication_channel:read\202\323\344\223\002\?\":/notificatio"
  "n_channel/v202210/notification_channels/"
  "search:\001*\0328\312A\023grpc.api.kentik.com\352\327\002\032adm"
  "in.notification_channel\220\330\002\003B\266\nZ\\github.c"
  "om/kentik/api-schema/gen/go/kentik/notif"
  "ication_channel/v202210;notification_cha"
  "nnel\222A\324\t\022\225\010\n\030Notification Channel API\022\250\007"
  "# Overview\nThe Notification Channel APIs"
  " enable you to retrieve IDs for the chan"
  "nels in your organization\'s collection o"
  "f notification channels (see [Notificati"
  "ons](https://kb.kentik.com/v4/Cb24.htm))"
  ". Each channel includes a channel type ("
  "e.g. email, Slack, PagerDuty, etc.) and "
  "a set of targets (recipients). Using the"
  " ID of a given channel, you can assign a"
  " set of recipients to receive notificati"
  "ons from Kentik alerts and synthetic tes"
  "ts, including those generated by the [Sy"
  "nthetics Monitoring APIs](https://kb.ken"
  "tik.com/v0/Oa09.htm) and [BGP Monitoring"
  " APIs](https://kb.kentik.com/v0/Oa07.htm"
  ").\n\nBoth REST endpoints and gRPC RPCs ar"
  "e provided.\n# Limitations\nThe use of thi"
  "s API is currently subject to the follow"
  "ing limitations:\n* **Read-only**: Creati"
  "on, modification, and deletion of channe"
  "ls is not supported.\n* **No v3 channels*"
  "*: No support is (or will be) provided f"
  "or notification channels created in Kent"
  "ik\'s v3 portal.\n\"E\n\026Kentik API Engineeri"
  "ng\022+https://github.com/kentik/api-schema"
  "-public2\007v202210*\001\0022\020application/json:\020a"
  "pplication/jsonZD\n\036\n\005email\022\025\010\002\032\017X-CH-Aut"
  "h-Email \002\n\"\n\005token\022\031\010\002\032\023X-CH-Auth-API-To"
  "ken \002b\026\n\t\n\005email\022\000\n\t\n\005token\022\000r5\n\026More ab"
  "out Kentik APIs\022\033https://docs.kentik.com"
  "/apib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_kentik_2fcore_2fv202012alpha1_2fannotations_2eproto,
  &::descriptor_table_protoc_2dgen_2dopenapiv2_2foptions_2fannotations_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto_sccs[7] = {
  &scc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,
  &scc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,
  &scc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,
  &scc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,
  &scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,
  &scc_info_SearchNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,
  &scc_info_SearchNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto = {
  false, false, descriptor_table_protodef_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto, "kentik/notification_channel/v202210/notification_channel.proto", 5452,
  &descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto_once, descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto_sccs, descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto_deps, 7, 6,
  schemas, file_default_instances, TableStruct_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto::offsets,
  file_level_metadata_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto, 7, file_level_enum_descriptors_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto, file_level_service_descriptors_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto)), true);
namespace kentik {
namespace notification_channel {
namespace v202210 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto);
  return file_level_enum_descriptors_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto[0];
}
bool ChannelType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NotificationChannel::InitAsDefaultInstance() {
  ::kentik::notification_channel::v202210::_NotificationChannel_default_instance_._instance.get_mutable()->cdate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::kentik::notification_channel::v202210::_NotificationChannel_default_instance_._instance.get_mutable()->edate_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class NotificationChannel::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& cdate(const NotificationChannel* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& edate(const NotificationChannel* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
NotificationChannel::_Internal::cdate(const NotificationChannel* msg) {
  return *msg->cdate_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
NotificationChannel::_Internal::edate(const NotificationChannel* msg) {
  return *msg->edate_;
}
void NotificationChannel::clear_cdate() {
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
}
void NotificationChannel::clear_edate() {
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
}
NotificationChannel::NotificationChannel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202210.NotificationChannel)
}
NotificationChannel::NotificationChannel(const NotificationChannel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  if (from._internal_has_cdate()) {
    cdate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.cdate_);
  } else {
    cdate_ = nullptr;
  }
  if (from._internal_has_edate()) {
    edate_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.edate_);
  } else {
    edate_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202210.NotificationChannel)
}

void NotificationChannel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&cdate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&cdate_)) + sizeof(enabled_));
}

NotificationChannel::~NotificationChannel() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202210.NotificationChannel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NotificationChannel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cdate_;
  if (this != internal_default_instance()) delete edate_;
}

void NotificationChannel::ArenaDtor(void* object) {
  NotificationChannel* _this = reinterpret_cast< NotificationChannel* >(object);
  (void)_this;
}
void NotificationChannel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NotificationChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NotificationChannel& NotificationChannel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NotificationChannel_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void NotificationChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202210.NotificationChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && cdate_ != nullptr) {
    delete cdate_;
  }
  cdate_ = nullptr;
  if (GetArena() == nullptr && edate_ != nullptr) {
    delete edate_;
  }
  edate_ = nullptr;
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&type_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NotificationChannel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.notification_channel.v202210.NotificationChannel.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.notification_channel.v202210.NotificationChannel.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .kentik.notification_channel.v202210.ChannelType type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::kentik::notification_channel::v202210::ChannelType>(val));
        } else goto handle_unusual;
        continue;
      // bool enabled = 4[json_name = "enabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cdate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_edate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NotificationChannel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202210.NotificationChannel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.notification_channel.v202210.NotificationChannel.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.notification_channel.v202210.NotificationChannel.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .kentik.notification_channel.v202210.ChannelType type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // bool enabled = 4[json_name = "enabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enabled(), target);
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cdate(this), target, stream);
  }

  // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::edate(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202210.NotificationChannel)
  return target;
}

size_t NotificationChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202210.NotificationChannel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp cdate = 5[json_name = "cdate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_cdate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cdate_);
  }

  // .google.protobuf.Timestamp edate = 6[json_name = "edate", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_edate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *edate_);
  }

  // .kentik.notification_channel.v202210.ChannelType type = 3[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool enabled = 4[json_name = "enabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationChannel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202210.NotificationChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const NotificationChannel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NotificationChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202210.NotificationChannel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202210.NotificationChannel)
    MergeFrom(*source);
  }
}

void NotificationChannel::MergeFrom(const NotificationChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202210.NotificationChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_cdate()) {
    _internal_mutable_cdate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_cdate());
  }
  if (from.has_edate()) {
    _internal_mutable_edate()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_edate());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void NotificationChannel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202210.NotificationChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotificationChannel::CopyFrom(const NotificationChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202210.NotificationChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationChannel::IsInitialized() const {
  return true;
}

void NotificationChannel::InternalSwap(NotificationChannel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationChannel, enabled_)
      + sizeof(NotificationChannel::enabled_)
      - PROTOBUF_FIELD_OFFSET(NotificationChannel, cdate_)>(
          reinterpret_cast<char*>(&cdate_),
          reinterpret_cast<char*>(&other->cdate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NotificationChannel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListNotificationChannelsRequest::InitAsDefaultInstance() {
}
class ListNotificationChannelsRequest::_Internal {
 public:
};

ListNotificationChannelsRequest::ListNotificationChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
}
ListNotificationChannelsRequest::ListNotificationChannelsRequest(const ListNotificationChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
}

void ListNotificationChannelsRequest::SharedCtor() {
}

ListNotificationChannelsRequest::~ListNotificationChannelsRequest() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListNotificationChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListNotificationChannelsRequest::ArenaDtor(void* object) {
  ListNotificationChannelsRequest* _this = reinterpret_cast< ListNotificationChannelsRequest* >(object);
  (void)_this;
}
void ListNotificationChannelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNotificationChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNotificationChannelsRequest& ListNotificationChannelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void ListNotificationChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNotificationChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNotificationChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  return target;
}

size_t ListNotificationChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNotificationChannelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNotificationChannelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNotificationChannelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
    MergeFrom(*source);
  }
}

void ListNotificationChannelsRequest::MergeFrom(const ListNotificationChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListNotificationChannelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNotificationChannelsRequest::CopyFrom(const ListNotificationChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202210.ListNotificationChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNotificationChannelsRequest::IsInitialized() const {
  return true;
}

void ListNotificationChannelsRequest::InternalSwap(ListNotificationChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNotificationChannelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListNotificationChannelsResponse::InitAsDefaultInstance() {
}
class ListNotificationChannelsResponse::_Internal {
 public:
};

ListNotificationChannelsResponse::ListNotificationChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notification_channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
}
ListNotificationChannelsResponse::ListNotificationChannelsResponse(const ListNotificationChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_channels_(from.notification_channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
}

void ListNotificationChannelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  invalid_count_ = 0;
}

ListNotificationChannelsResponse::~ListNotificationChannelsResponse() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ListNotificationChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ListNotificationChannelsResponse::ArenaDtor(void* object) {
  ListNotificationChannelsResponse* _this = reinterpret_cast< ListNotificationChannelsResponse* >(object);
  (void)_this;
}
void ListNotificationChannelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListNotificationChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListNotificationChannelsResponse& ListNotificationChannelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void ListNotificationChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_channels_.Clear();
  invalid_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListNotificationChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListNotificationChannelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notification_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notification_channels(i), target, stream);
  }

  // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  return target;
}

size_t ListNotificationChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_notification_channels_size();
  for (const auto& msg : this->notification_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListNotificationChannelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListNotificationChannelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListNotificationChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
    MergeFrom(*source);
  }
}

void ListNotificationChannelsResponse::MergeFrom(const ListNotificationChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_channels_.MergeFrom(from.notification_channels_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void ListNotificationChannelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListNotificationChannelsResponse::CopyFrom(const ListNotificationChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202210.ListNotificationChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListNotificationChannelsResponse::IsInitialized() const {
  return true;
}

void ListNotificationChannelsResponse::InternalSwap(ListNotificationChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notification_channels_.InternalSwap(&other->notification_channels_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListNotificationChannelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNotificationChannelRequest::InitAsDefaultInstance() {
}
class GetNotificationChannelRequest::_Internal {
 public:
};

GetNotificationChannelRequest::GetNotificationChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202210.GetNotificationChannelRequest)
}
GetNotificationChannelRequest::GetNotificationChannelRequest(const GetNotificationChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202210.GetNotificationChannelRequest)
}

void GetNotificationChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetNotificationChannelRequest::~GetNotificationChannelRequest() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNotificationChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetNotificationChannelRequest::ArenaDtor(void* object) {
  GetNotificationChannelRequest* _this = reinterpret_cast< GetNotificationChannelRequest* >(object);
  (void)_this;
}
void GetNotificationChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNotificationChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNotificationChannelRequest& GetNotificationChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNotificationChannelRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void GetNotificationChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNotificationChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.notification_channel.v202210.GetNotificationChannelRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNotificationChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.notification_channel.v202210.GetNotificationChannelRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  return target;
}

size_t GetNotificationChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNotificationChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNotificationChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNotificationChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202210.GetNotificationChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202210.GetNotificationChannelRequest)
    MergeFrom(*source);
  }
}

void GetNotificationChannelRequest::MergeFrom(const GetNotificationChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
}

void GetNotificationChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNotificationChannelRequest::CopyFrom(const GetNotificationChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202210.GetNotificationChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotificationChannelRequest::IsInitialized() const {
  return true;
}

void GetNotificationChannelRequest::InternalSwap(GetNotificationChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNotificationChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetNotificationChannelResponse::InitAsDefaultInstance() {
  ::kentik::notification_channel::v202210::_GetNotificationChannelResponse_default_instance_._instance.get_mutable()->notification_channel_ = const_cast< ::kentik::notification_channel::v202210::NotificationChannel*>(
      ::kentik::notification_channel::v202210::NotificationChannel::internal_default_instance());
}
class GetNotificationChannelResponse::_Internal {
 public:
  static const ::kentik::notification_channel::v202210::NotificationChannel& notification_channel(const GetNotificationChannelResponse* msg);
};

const ::kentik::notification_channel::v202210::NotificationChannel&
GetNotificationChannelResponse::_Internal::notification_channel(const GetNotificationChannelResponse* msg) {
  return *msg->notification_channel_;
}
GetNotificationChannelResponse::GetNotificationChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202210.GetNotificationChannelResponse)
}
GetNotificationChannelResponse::GetNotificationChannelResponse(const GetNotificationChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_notification_channel()) {
    notification_channel_ = new ::kentik::notification_channel::v202210::NotificationChannel(*from.notification_channel_);
  } else {
    notification_channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202210.GetNotificationChannelResponse)
}

void GetNotificationChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  notification_channel_ = nullptr;
}

GetNotificationChannelResponse::~GetNotificationChannelResponse() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetNotificationChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete notification_channel_;
}

void GetNotificationChannelResponse::ArenaDtor(void* object) {
  GetNotificationChannelResponse* _this = reinterpret_cast< GetNotificationChannelResponse* >(object);
  (void)_this;
}
void GetNotificationChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetNotificationChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetNotificationChannelResponse& GetNotificationChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetNotificationChannelResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void GetNotificationChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && notification_channel_ != nullptr) {
    delete notification_channel_;
  }
  notification_channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetNotificationChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .kentik.notification_channel.v202210.NotificationChannel notification_channel = 1[json_name = "notificationChannel", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification_channel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetNotificationChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .kentik.notification_channel.v202210.NotificationChannel notification_channel = 1[json_name = "notificationChannel", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_notification_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::notification_channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  return target;
}

size_t GetNotificationChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .kentik.notification_channel.v202210.NotificationChannel notification_channel = 1[json_name = "notificationChannel", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->has_notification_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *notification_channel_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetNotificationChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetNotificationChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetNotificationChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202210.GetNotificationChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202210.GetNotificationChannelResponse)
    MergeFrom(*source);
  }
}

void GetNotificationChannelResponse::MergeFrom(const GetNotificationChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_notification_channel()) {
    _internal_mutable_notification_channel()->::kentik::notification_channel::v202210::NotificationChannel::MergeFrom(from._internal_notification_channel());
  }
}

void GetNotificationChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetNotificationChannelResponse::CopyFrom(const GetNotificationChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202210.GetNotificationChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetNotificationChannelResponse::IsInitialized() const {
  return true;
}

void GetNotificationChannelResponse::InternalSwap(GetNotificationChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(notification_channel_, other->notification_channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetNotificationChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchNotificationChannelsRequest::InitAsDefaultInstance() {
}
class SearchNotificationChannelsRequest::_Internal {
 public:
};

SearchNotificationChannelsRequest::SearchNotificationChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
}
SearchNotificationChannelsRequest::SearchNotificationChannelsRequest(const SearchNotificationChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      types_(from.types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_pattern().empty()) {
    name_pattern_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name_pattern(),
      GetArena());
  }
  include_disabled_ = from.include_disabled_;
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
}

void SearchNotificationChannelsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  name_pattern_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  include_disabled_ = false;
}

SearchNotificationChannelsRequest::~SearchNotificationChannelsRequest() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchNotificationChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_pattern_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SearchNotificationChannelsRequest::ArenaDtor(void* object) {
  SearchNotificationChannelsRequest* _this = reinterpret_cast< SearchNotificationChannelsRequest* >(object);
  (void)_this;
}
void SearchNotificationChannelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchNotificationChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchNotificationChannelsRequest& SearchNotificationChannelsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchNotificationChannelsRequest_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void SearchNotificationChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  types_.Clear();
  name_pattern_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  include_disabled_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchNotificationChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name_pattern = 1[json_name = "namePattern", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name_pattern();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .kentik.notification_channel.v202210.ChannelType types = 2[json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_types(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_types(static_cast<::kentik::notification_channel::v202210::ChannelType>(val));
        } else goto handle_unusual;
        continue;
      // bool include_disabled = 3[json_name = "includeDisabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          include_disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchNotificationChannelsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name_pattern = 1[json_name = "namePattern", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name_pattern().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_pattern().data(), static_cast<int>(this->_internal_name_pattern().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "kentik.notification_channel.v202210.SearchNotificationChannelsRequest.name_pattern");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name_pattern(), target);
  }

  // repeated .kentik.notification_channel.v202210.ChannelType types = 2[json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    int byte_size = _types_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, types_, byte_size, target);
    }
  }

  // bool include_disabled = 3[json_name = "includeDisabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->include_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_include_disabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  return target;
}

size_t SearchNotificationChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.notification_channel.v202210.ChannelType types = 2[json_name = "types", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _types_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name_pattern = 1[json_name = "namePattern", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->name_pattern().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_pattern());
  }

  // bool include_disabled = 3[json_name = "includeDisabled", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->include_disabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchNotificationChannelsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchNotificationChannelsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchNotificationChannelsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
    MergeFrom(*source);
  }
}

void SearchNotificationChannelsRequest::MergeFrom(const SearchNotificationChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  types_.MergeFrom(from.types_);
  if (from.name_pattern().size() > 0) {
    _internal_set_name_pattern(from._internal_name_pattern());
  }
  if (from.include_disabled() != 0) {
    _internal_set_include_disabled(from._internal_include_disabled());
  }
}

void SearchNotificationChannelsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchNotificationChannelsRequest::CopyFrom(const SearchNotificationChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202210.SearchNotificationChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchNotificationChannelsRequest::IsInitialized() const {
  return true;
}

void SearchNotificationChannelsRequest::InternalSwap(SearchNotificationChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  types_.InternalSwap(&other->types_);
  name_pattern_.Swap(&other->name_pattern_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(include_disabled_, other->include_disabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchNotificationChannelsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SearchNotificationChannelsResponse::InitAsDefaultInstance() {
}
class SearchNotificationChannelsResponse::_Internal {
 public:
};

SearchNotificationChannelsResponse::SearchNotificationChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  notification_channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
}
SearchNotificationChannelsResponse::SearchNotificationChannelsResponse(const SearchNotificationChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      notification_channels_(from.notification_channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  invalid_count_ = from.invalid_count_;
  // @@protoc_insertion_point(copy_constructor:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
}

void SearchNotificationChannelsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SearchNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  invalid_count_ = 0;
}

SearchNotificationChannelsResponse::~SearchNotificationChannelsResponse() {
  // @@protoc_insertion_point(destructor:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SearchNotificationChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SearchNotificationChannelsResponse::ArenaDtor(void* object) {
  SearchNotificationChannelsResponse* _this = reinterpret_cast< SearchNotificationChannelsResponse* >(object);
  (void)_this;
}
void SearchNotificationChannelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SearchNotificationChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SearchNotificationChannelsResponse& SearchNotificationChannelsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SearchNotificationChannelsResponse_kentik_2fnotification_5fchannel_2fv202210_2fnotification_5fchannel_2eproto.base);
  return *internal_default_instance();
}


void SearchNotificationChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  notification_channels_.Clear();
  invalid_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchNotificationChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_notification_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          invalid_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SearchNotificationChannelsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_notification_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_notification_channels(i), target, stream);
  }

  // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_invalid_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  return target;
}

size_t SearchNotificationChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kentik.notification_channel.v202210.NotificationChannel notification_channels = 1[json_name = "notificationChannels", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  total_size += 1UL * this->_internal_notification_channels_size();
  for (const auto& msg : this->notification_channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  if (this->invalid_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_invalid_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SearchNotificationChannelsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SearchNotificationChannelsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SearchNotificationChannelsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
    MergeFrom(*source);
  }
}

void SearchNotificationChannelsResponse::MergeFrom(const SearchNotificationChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  notification_channels_.MergeFrom(from.notification_channels_);
  if (from.invalid_count() != 0) {
    _internal_set_invalid_count(from._internal_invalid_count());
  }
}

void SearchNotificationChannelsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchNotificationChannelsResponse::CopyFrom(const SearchNotificationChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kentik.notification_channel.v202210.SearchNotificationChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchNotificationChannelsResponse::IsInitialized() const {
  return true;
}

void SearchNotificationChannelsResponse::InternalSwap(SearchNotificationChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  notification_channels_.InternalSwap(&other->notification_channels_);
  swap(invalid_count_, other->invalid_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchNotificationChannelsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v202210
}  // namespace notification_channel
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202210::NotificationChannel* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202210::NotificationChannel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202210::NotificationChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202210::ListNotificationChannelsRequest* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202210::ListNotificationChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202210::ListNotificationChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202210::ListNotificationChannelsResponse* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202210::ListNotificationChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202210::ListNotificationChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202210::GetNotificationChannelRequest* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202210::GetNotificationChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202210::GetNotificationChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202210::GetNotificationChannelResponse* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202210::GetNotificationChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202210::GetNotificationChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202210::SearchNotificationChannelsRequest* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202210::SearchNotificationChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202210::SearchNotificationChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kentik::notification_channel::v202210::SearchNotificationChannelsResponse* Arena::CreateMaybeMessage< ::kentik::notification_channel::v202210::SearchNotificationChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kentik::notification_channel::v202210::SearchNotificationChannelsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
