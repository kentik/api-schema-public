// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kentik/kmi/v202212/kmi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kentik_2fkmi_2fv202212_2fkmi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kentik_2fkmi_2fv202212_2fkmi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "protoc-gen-openapiv2/options/annotations.pb.h"
#include "kentik/core/v202012alpha1/annotations.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kentik_2fkmi_2fv202212_2fkmi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto;
namespace kentik {
namespace kmi {
namespace v202212 {
class ASNDetails;
class ASNDetailsDefaultTypeInternal;
extern ASNDetailsDefaultTypeInternal _ASNDetails_default_instance_;
class CustomerProvider;
class CustomerProviderDefaultTypeInternal;
extern CustomerProviderDefaultTypeInternal _CustomerProvider_default_instance_;
class GetASNDetailsRequest;
class GetASNDetailsRequestDefaultTypeInternal;
extern GetASNDetailsRequestDefaultTypeInternal _GetASNDetailsRequest_default_instance_;
class GetASNDetailsResponse;
class GetASNDetailsResponseDefaultTypeInternal;
extern GetASNDetailsResponseDefaultTypeInternal _GetASNDetailsResponse_default_instance_;
class GetRankingsRequest;
class GetRankingsRequestDefaultTypeInternal;
extern GetRankingsRequestDefaultTypeInternal _GetRankingsRequest_default_instance_;
class GetRankingsResponse;
class GetRankingsResponseDefaultTypeInternal;
extern GetRankingsResponseDefaultTypeInternal _GetRankingsResponse_default_instance_;
class ListMarketsRequest;
class ListMarketsRequestDefaultTypeInternal;
extern ListMarketsRequestDefaultTypeInternal _ListMarketsRequest_default_instance_;
class ListMarketsResponse;
class ListMarketsResponseDefaultTypeInternal;
extern ListMarketsResponseDefaultTypeInternal _ListMarketsResponse_default_instance_;
class Market;
class MarketDefaultTypeInternal;
extern MarketDefaultTypeInternal _Market_default_instance_;
class Peer;
class PeerDefaultTypeInternal;
extern PeerDefaultTypeInternal _Peer_default_instance_;
class Ranking;
class RankingDefaultTypeInternal;
extern RankingDefaultTypeInternal _Ranking_default_instance_;
}  // namespace v202212
}  // namespace kmi
}  // namespace kentik
PROTOBUF_NAMESPACE_OPEN
template<> ::kentik::kmi::v202212::ASNDetails* Arena::CreateMaybeMessage<::kentik::kmi::v202212::ASNDetails>(Arena*);
template<> ::kentik::kmi::v202212::CustomerProvider* Arena::CreateMaybeMessage<::kentik::kmi::v202212::CustomerProvider>(Arena*);
template<> ::kentik::kmi::v202212::GetASNDetailsRequest* Arena::CreateMaybeMessage<::kentik::kmi::v202212::GetASNDetailsRequest>(Arena*);
template<> ::kentik::kmi::v202212::GetASNDetailsResponse* Arena::CreateMaybeMessage<::kentik::kmi::v202212::GetASNDetailsResponse>(Arena*);
template<> ::kentik::kmi::v202212::GetRankingsRequest* Arena::CreateMaybeMessage<::kentik::kmi::v202212::GetRankingsRequest>(Arena*);
template<> ::kentik::kmi::v202212::GetRankingsResponse* Arena::CreateMaybeMessage<::kentik::kmi::v202212::GetRankingsResponse>(Arena*);
template<> ::kentik::kmi::v202212::ListMarketsRequest* Arena::CreateMaybeMessage<::kentik::kmi::v202212::ListMarketsRequest>(Arena*);
template<> ::kentik::kmi::v202212::ListMarketsResponse* Arena::CreateMaybeMessage<::kentik::kmi::v202212::ListMarketsResponse>(Arena*);
template<> ::kentik::kmi::v202212::Market* Arena::CreateMaybeMessage<::kentik::kmi::v202212::Market>(Arena*);
template<> ::kentik::kmi::v202212::Peer* Arena::CreateMaybeMessage<::kentik::kmi::v202212::Peer>(Arena*);
template<> ::kentik::kmi::v202212::Ranking* Arena::CreateMaybeMessage<::kentik::kmi::v202212::Ranking>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kentik {
namespace kmi {
namespace v202212 {

// ===================================================================

class Market PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.Market) */ {
 public:
  inline Market() : Market(nullptr) {};
  virtual ~Market();

  Market(const Market& from);
  Market(Market&& from) noexcept
    : Market() {
    *this = ::std::move(from);
  }

  inline Market& operator=(const Market& from) {
    CopyFrom(from);
    return *this;
  }
  inline Market& operator=(Market&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Market& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Market* internal_default_instance() {
    return reinterpret_cast<const Market*>(
               &_Market_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Market& a, Market& b) {
    a.Swap(&b);
  }
  inline void Swap(Market* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Market* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Market* New() const final {
    return CreateMaybeMessage<Market>(nullptr);
  }

  Market* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Market>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Market& from);
  void MergeFrom(const Market& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Market* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.Market";
  }
  protected:
  explicit Market(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildListFieldNumber = 5,
    kParentListFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kGeoScopeFieldNumber = 3,
    kGeoNameFieldNumber = 4,
  };
  // repeated string child_list = 5[json_name = "childList", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int child_list_size() const;
  private:
  int _internal_child_list_size() const;
  public:
  void clear_child_list();
  const std::string& child_list(int index) const;
  std::string* mutable_child_list(int index);
  void set_child_list(int index, const std::string& value);
  void set_child_list(int index, std::string&& value);
  void set_child_list(int index, const char* value);
  void set_child_list(int index, const char* value, size_t size);
  std::string* add_child_list();
  void add_child_list(const std::string& value);
  void add_child_list(std::string&& value);
  void add_child_list(const char* value);
  void add_child_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& child_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_child_list();
  private:
  const std::string& _internal_child_list(int index) const;
  std::string* _internal_add_child_list();
  public:

  // repeated string parent_list = 6[json_name = "parentList", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int parent_list_size() const;
  private:
  int _internal_parent_list_size() const;
  public:
  void clear_parent_list();
  const std::string& parent_list(int index) const;
  std::string* mutable_parent_list(int index);
  void set_parent_list(int index, const std::string& value);
  void set_parent_list(int index, std::string&& value);
  void set_parent_list(int index, const char* value);
  void set_parent_list(int index, const char* value, size_t size);
  std::string* add_parent_list();
  void add_parent_list(const std::string& value);
  void add_parent_list(std::string&& value);
  void add_parent_list(const char* value);
  void add_parent_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& parent_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_parent_list();
  private:
  const std::string& _internal_parent_list(int index) const;
  std::string* _internal_add_parent_list();
  public:

  // string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string geo_scope = 3[json_name = "geoScope", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_geo_scope();
  const std::string& geo_scope() const;
  void set_geo_scope(const std::string& value);
  void set_geo_scope(std::string&& value);
  void set_geo_scope(const char* value);
  void set_geo_scope(const char* value, size_t size);
  std::string* mutable_geo_scope();
  std::string* release_geo_scope();
  void set_allocated_geo_scope(std::string* geo_scope);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_geo_scope();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_geo_scope(
      std::string* geo_scope);
  private:
  const std::string& _internal_geo_scope() const;
  void _internal_set_geo_scope(const std::string& value);
  std::string* _internal_mutable_geo_scope();
  public:

  // string geo_name = 4[json_name = "geoName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_geo_name();
  const std::string& geo_name() const;
  void set_geo_name(const std::string& value);
  void set_geo_name(std::string&& value);
  void set_geo_name(const char* value);
  void set_geo_name(const char* value, size_t size);
  std::string* mutable_geo_name();
  std::string* release_geo_name();
  void set_allocated_geo_name(std::string* geo_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_geo_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_geo_name(
      std::string* geo_name);
  private:
  const std::string& _internal_geo_name() const;
  void _internal_set_geo_name(const std::string& value);
  std::string* _internal_mutable_geo_name();
  public:

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.Market)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> child_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> parent_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geo_scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geo_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class Ranking PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.Ranking) */ {
 public:
  inline Ranking() : Ranking(nullptr) {};
  virtual ~Ranking();

  Ranking(const Ranking& from);
  Ranking(Ranking&& from) noexcept
    : Ranking() {
    *this = ::std::move(from);
  }

  inline Ranking& operator=(const Ranking& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ranking& operator=(Ranking&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ranking& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ranking* internal_default_instance() {
    return reinterpret_cast<const Ranking*>(
               &_Ranking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Ranking& a, Ranking& b) {
    a.Swap(&b);
  }
  inline void Swap(Ranking* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ranking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ranking* New() const final {
    return CreateMaybeMessage<Ranking>(nullptr);
  }

  Ranking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ranking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ranking& from);
  void MergeFrom(const Ranking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ranking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.Ranking";
  }
  protected:
  explicit Ranking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoScopeFieldNumber = 2,
    kGeoNameFieldNumber = 3,
    kNameFieldNumber = 4,
    kAsnFieldNumber = 1,
    kRankFieldNumber = 5,
    kRankChangeFieldNumber = 6,
    kScoreFieldNumber = 7,
    kScoreChangeFieldNumber = 8,
  };
  // string geo_scope = 2[json_name = "geoScope", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_geo_scope();
  const std::string& geo_scope() const;
  void set_geo_scope(const std::string& value);
  void set_geo_scope(std::string&& value);
  void set_geo_scope(const char* value);
  void set_geo_scope(const char* value, size_t size);
  std::string* mutable_geo_scope();
  std::string* release_geo_scope();
  void set_allocated_geo_scope(std::string* geo_scope);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_geo_scope();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_geo_scope(
      std::string* geo_scope);
  private:
  const std::string& _internal_geo_scope() const;
  void _internal_set_geo_scope(const std::string& value);
  std::string* _internal_mutable_geo_scope();
  public:

  // string geo_name = 3[json_name = "geoName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_geo_name();
  const std::string& geo_name() const;
  void set_geo_name(const std::string& value);
  void set_geo_name(std::string&& value);
  void set_geo_name(const char* value);
  void set_geo_name(const char* value, size_t size);
  std::string* mutable_geo_name();
  std::string* release_geo_name();
  void set_allocated_geo_name(std::string* geo_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_geo_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_geo_name(
      std::string* geo_name);
  private:
  const std::string& _internal_geo_name() const;
  void _internal_set_geo_name(const std::string& value);
  std::string* _internal_mutable_geo_name();
  public:

  // string name = 4[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_asn() const;
  private:
  bool _internal_has_asn() const;
  public:
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rank = 5[json_name = "rank", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_rank() const;
  private:
  bool _internal_has_rank() const;
  public:
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 rank_change = 6[json_name = "rankChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_rank_change() const;
  private:
  bool _internal_has_rank_change() const;
  public:
  void clear_rank_change();
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_change() const;
  void set_rank_change(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rank_change() const;
  void _internal_set_rank_change(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 score = 7[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 score_change = 8[json_name = "scoreChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_score_change() const;
  private:
  bool _internal_has_score_change() const;
  public:
  void clear_score_change();
  ::PROTOBUF_NAMESPACE_ID::uint32 score_change() const;
  void set_score_change(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score_change() const;
  void _internal_set_score_change(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.Ranking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geo_scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geo_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rank_change_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_change_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class CustomerProvider PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.CustomerProvider) */ {
 public:
  inline CustomerProvider() : CustomerProvider(nullptr) {};
  virtual ~CustomerProvider();

  CustomerProvider(const CustomerProvider& from);
  CustomerProvider(CustomerProvider&& from) noexcept
    : CustomerProvider() {
    *this = ::std::move(from);
  }

  inline CustomerProvider& operator=(const CustomerProvider& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerProvider& operator=(CustomerProvider&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerProvider& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CustomerProvider* internal_default_instance() {
    return reinterpret_cast<const CustomerProvider*>(
               &_CustomerProvider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CustomerProvider& a, CustomerProvider& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerProvider* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerProvider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerProvider* New() const final {
    return CreateMaybeMessage<CustomerProvider>(nullptr);
  }

  CustomerProvider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerProvider>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerProvider& from);
  void MergeFrom(const CustomerProvider& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerProvider* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.CustomerProvider";
  }
  protected:
  explicit CustomerProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoNameFieldNumber = 3,
    kGeoScopeFieldNumber = 4,
    kNameFieldNumber = 5,
    kAsnFieldNumber = 1,
    kEdgeTypeFieldNumber = 2,
    kScoreFieldNumber = 6,
    kSinglehomedCustomerFieldNumber = 7,
    kMutualCustomerFieldNumber = 8,
    kMutualProviderFieldNumber = 9,
  };
  // string geo_name = 3[json_name = "geoName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_geo_name();
  const std::string& geo_name() const;
  void set_geo_name(const std::string& value);
  void set_geo_name(std::string&& value);
  void set_geo_name(const char* value);
  void set_geo_name(const char* value, size_t size);
  std::string* mutable_geo_name();
  std::string* release_geo_name();
  void set_allocated_geo_name(std::string* geo_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_geo_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_geo_name(
      std::string* geo_name);
  private:
  const std::string& _internal_geo_name() const;
  void _internal_set_geo_name(const std::string& value);
  std::string* _internal_mutable_geo_name();
  public:

  // string geo_scope = 4[json_name = "geoScope", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_geo_scope();
  const std::string& geo_scope() const;
  void set_geo_scope(const std::string& value);
  void set_geo_scope(std::string&& value);
  void set_geo_scope(const char* value);
  void set_geo_scope(const char* value, size_t size);
  std::string* mutable_geo_scope();
  std::string* release_geo_scope();
  void set_allocated_geo_scope(std::string* geo_scope);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_geo_scope();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_geo_scope(
      std::string* geo_scope);
  private:
  const std::string& _internal_geo_scope() const;
  void _internal_set_geo_scope(const std::string& value);
  std::string* _internal_mutable_geo_scope();
  public:

  // string name = 5[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_asn() const;
  private:
  bool _internal_has_asn() const;
  public:
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 edge_type = 2[json_name = "edgeType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_edge_type() const;
  private:
  bool _internal_has_edge_type() const;
  public:
  void clear_edge_type();
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_type() const;
  void set_edge_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_type() const;
  void _internal_set_edge_type(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 score = 6[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_score() const;
  private:
  bool _internal_has_score() const;
  public:
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::uint32 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool singlehomed_customer = 7[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_singlehomed_customer() const;
  private:
  bool _internal_has_singlehomed_customer() const;
  public:
  void clear_singlehomed_customer();
  bool singlehomed_customer() const;
  void set_singlehomed_customer(bool value);
  private:
  bool _internal_singlehomed_customer() const;
  void _internal_set_singlehomed_customer(bool value);
  public:

  // bool mutual_customer = 8[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_mutual_customer() const;
  private:
  bool _internal_has_mutual_customer() const;
  public:
  void clear_mutual_customer();
  bool mutual_customer() const;
  void set_mutual_customer(bool value);
  private:
  bool _internal_mutual_customer() const;
  void _internal_set_mutual_customer(bool value);
  public:

  // bool mutual_provider = 9[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_mutual_provider() const;
  private:
  bool _internal_has_mutual_provider() const;
  public:
  void clear_mutual_provider();
  bool mutual_provider() const;
  void set_mutual_provider(bool value);
  private:
  bool _internal_mutual_provider() const;
  void _internal_set_mutual_provider(bool value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.CustomerProvider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geo_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geo_scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 score_;
  bool singlehomed_customer_;
  bool mutual_customer_;
  bool mutual_provider_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class Peer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.Peer) */ {
 public:
  inline Peer() : Peer(nullptr) {};
  virtual ~Peer();

  Peer(const Peer& from);
  Peer(Peer&& from) noexcept
    : Peer() {
    *this = ::std::move(from);
  }

  inline Peer& operator=(const Peer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Peer& operator=(Peer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Peer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Peer* internal_default_instance() {
    return reinterpret_cast<const Peer*>(
               &_Peer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Peer& a, Peer& b) {
    a.Swap(&b);
  }
  inline void Swap(Peer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Peer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Peer* New() const final {
    return CreateMaybeMessage<Peer>(nullptr);
  }

  Peer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Peer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Peer& from);
  void MergeFrom(const Peer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Peer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.Peer";
  }
  protected:
  explicit Peer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAsnFieldNumber = 1,
    kPfxCountFieldNumber = 3,
  };
  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_asn() const;
  private:
  bool _internal_has_asn() const;
  public:
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 pfx_count = 3[json_name = "pfxCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_pfx_count() const;
  private:
  bool _internal_has_pfx_count() const;
  public:
  void clear_pfx_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 pfx_count() const;
  void set_pfx_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pfx_count() const;
  void _internal_set_pfx_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.Peer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pfx_count_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class ASNDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.ASNDetails) */ {
 public:
  inline ASNDetails() : ASNDetails(nullptr) {};
  virtual ~ASNDetails();

  ASNDetails(const ASNDetails& from);
  ASNDetails(ASNDetails&& from) noexcept
    : ASNDetails() {
    *this = ::std::move(from);
  }

  inline ASNDetails& operator=(const ASNDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ASNDetails& operator=(ASNDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ASNDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ASNDetails* internal_default_instance() {
    return reinterpret_cast<const ASNDetails*>(
               &_ASNDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ASNDetails& a, ASNDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ASNDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ASNDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ASNDetails* New() const final {
    return CreateMaybeMessage<ASNDetails>(nullptr);
  }

  ASNDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ASNDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ASNDetails& from);
  void MergeFrom(const ASNDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ASNDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.ASNDetails";
  }
  protected:
  explicit ASNDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomersFieldNumber = 4,
    kProvidersFieldNumber = 5,
    kPeersFieldNumber = 6,
    kNameFieldNumber = 2,
    kCountryNameFieldNumber = 3,
    kAsnFieldNumber = 1,
  };
  // repeated .kentik.kmi.v202212.CustomerProvider customers = 4[json_name = "customers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int customers_size() const;
  private:
  int _internal_customers_size() const;
  public:
  void clear_customers();
  ::kentik::kmi::v202212::CustomerProvider* mutable_customers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider >*
      mutable_customers();
  private:
  const ::kentik::kmi::v202212::CustomerProvider& _internal_customers(int index) const;
  ::kentik::kmi::v202212::CustomerProvider* _internal_add_customers();
  public:
  const ::kentik::kmi::v202212::CustomerProvider& customers(int index) const;
  ::kentik::kmi::v202212::CustomerProvider* add_customers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider >&
      customers() const;

  // repeated .kentik.kmi.v202212.CustomerProvider providers = 5[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int providers_size() const;
  private:
  int _internal_providers_size() const;
  public:
  void clear_providers();
  ::kentik::kmi::v202212::CustomerProvider* mutable_providers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider >*
      mutable_providers();
  private:
  const ::kentik::kmi::v202212::CustomerProvider& _internal_providers(int index) const;
  ::kentik::kmi::v202212::CustomerProvider* _internal_add_providers();
  public:
  const ::kentik::kmi::v202212::CustomerProvider& providers(int index) const;
  ::kentik::kmi::v202212::CustomerProvider* add_providers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider >&
      providers() const;

  // repeated .kentik.kmi.v202212.Peer peers = 6[json_name = "peers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int peers_size() const;
  private:
  int _internal_peers_size() const;
  public:
  void clear_peers();
  ::kentik::kmi::v202212::Peer* mutable_peers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Peer >*
      mutable_peers();
  private:
  const ::kentik::kmi::v202212::Peer& _internal_peers(int index) const;
  ::kentik::kmi::v202212::Peer* _internal_add_peers();
  public:
  const ::kentik::kmi::v202212::Peer& peers(int index) const;
  ::kentik::kmi::v202212::Peer* add_peers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Peer >&
      peers() const;

  // string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string country_name = 3[json_name = "countryName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_country_name();
  const std::string& country_name() const;
  void set_country_name(const std::string& value);
  void set_country_name(std::string&& value);
  void set_country_name(const char* value);
  void set_country_name(const char* value, size_t size);
  std::string* mutable_country_name();
  std::string* release_country_name();
  void set_allocated_country_name(std::string* country_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country_name(
      std::string* country_name);
  private:
  const std::string& _internal_country_name() const;
  void _internal_set_country_name(const std::string& value);
  std::string* _internal_mutable_country_name();
  public:

  // uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_asn() const;
  private:
  bool _internal_has_asn() const;
  public:
  void clear_asn();
  ::PROTOBUF_NAMESPACE_ID::uint32 asn() const;
  void set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_asn() const;
  void _internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.ASNDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider > customers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider > providers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Peer > peers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 asn_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class ListMarketsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.ListMarketsRequest) */ {
 public:
  inline ListMarketsRequest() : ListMarketsRequest(nullptr) {};
  virtual ~ListMarketsRequest();

  ListMarketsRequest(const ListMarketsRequest& from);
  ListMarketsRequest(ListMarketsRequest&& from) noexcept
    : ListMarketsRequest() {
    *this = ::std::move(from);
  }

  inline ListMarketsRequest& operator=(const ListMarketsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMarketsRequest& operator=(ListMarketsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMarketsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMarketsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMarketsRequest*>(
               &_ListMarketsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListMarketsRequest& a, ListMarketsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMarketsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMarketsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMarketsRequest* New() const final {
    return CreateMaybeMessage<ListMarketsRequest>(nullptr);
  }

  ListMarketsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMarketsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMarketsRequest& from);
  void MergeFrom(const ListMarketsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMarketsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.ListMarketsRequest";
  }
  protected:
  explicit ListMarketsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.ListMarketsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class ListMarketsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.ListMarketsResponse) */ {
 public:
  inline ListMarketsResponse() : ListMarketsResponse(nullptr) {};
  virtual ~ListMarketsResponse();

  ListMarketsResponse(const ListMarketsResponse& from);
  ListMarketsResponse(ListMarketsResponse&& from) noexcept
    : ListMarketsResponse() {
    *this = ::std::move(from);
  }

  inline ListMarketsResponse& operator=(const ListMarketsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMarketsResponse& operator=(ListMarketsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMarketsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMarketsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMarketsResponse*>(
               &_ListMarketsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListMarketsResponse& a, ListMarketsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMarketsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMarketsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMarketsResponse* New() const final {
    return CreateMaybeMessage<ListMarketsResponse>(nullptr);
  }

  ListMarketsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMarketsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMarketsResponse& from);
  void MergeFrom(const ListMarketsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMarketsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.ListMarketsResponse";
  }
  protected:
  explicit ListMarketsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketsFieldNumber = 1,
  };
  // repeated .kentik.kmi.v202212.Market markets = 1[json_name = "markets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int markets_size() const;
  private:
  int _internal_markets_size() const;
  public:
  void clear_markets();
  ::kentik::kmi::v202212::Market* mutable_markets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Market >*
      mutable_markets();
  private:
  const ::kentik::kmi::v202212::Market& _internal_markets(int index) const;
  ::kentik::kmi::v202212::Market* _internal_add_markets();
  public:
  const ::kentik::kmi::v202212::Market& markets(int index) const;
  ::kentik::kmi::v202212::Market* add_markets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Market >&
      markets() const;

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.ListMarketsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Market > markets_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class GetRankingsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.GetRankingsRequest) */ {
 public:
  inline GetRankingsRequest() : GetRankingsRequest(nullptr) {};
  virtual ~GetRankingsRequest();

  GetRankingsRequest(const GetRankingsRequest& from);
  GetRankingsRequest(GetRankingsRequest&& from) noexcept
    : GetRankingsRequest() {
    *this = ::std::move(from);
  }

  inline GetRankingsRequest& operator=(const GetRankingsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRankingsRequest& operator=(GetRankingsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRankingsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRankingsRequest* internal_default_instance() {
    return reinterpret_cast<const GetRankingsRequest*>(
               &_GetRankingsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetRankingsRequest& a, GetRankingsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRankingsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRankingsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRankingsRequest* New() const final {
    return CreateMaybeMessage<GetRankingsRequest>(nullptr);
  }

  GetRankingsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRankingsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRankingsRequest& from);
  void MergeFrom(const GetRankingsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRankingsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.GetRankingsRequest";
  }
  protected:
  explicit GetRankingsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kRankTypeFieldNumber = 2,
    kIpFieldNumber = 3,
    kLimitFieldNumber = 4,
  };
  // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_market_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_market_id(
      std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string rank_type = 2[json_name = "rankType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_rank_type();
  const std::string& rank_type() const;
  void set_rank_type(const std::string& value);
  void set_rank_type(std::string&& value);
  void set_rank_type(const char* value);
  void set_rank_type(const char* value, size_t size);
  std::string* mutable_rank_type();
  std::string* release_rank_type();
  void set_allocated_rank_type(std::string* rank_type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rank_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rank_type(
      std::string* rank_type);
  private:
  const std::string& _internal_rank_type() const;
  void _internal_set_rank_type(const std::string& value);
  std::string* _internal_mutable_rank_type();
  public:

  // string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // uint32 limit = 4[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_limit() const;
  private:
  bool _internal_has_limit() const;
  public:
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.GetRankingsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rank_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class GetRankingsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.GetRankingsResponse) */ {
 public:
  inline GetRankingsResponse() : GetRankingsResponse(nullptr) {};
  virtual ~GetRankingsResponse();

  GetRankingsResponse(const GetRankingsResponse& from);
  GetRankingsResponse(GetRankingsResponse&& from) noexcept
    : GetRankingsResponse() {
    *this = ::std::move(from);
  }

  inline GetRankingsResponse& operator=(const GetRankingsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRankingsResponse& operator=(GetRankingsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRankingsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRankingsResponse* internal_default_instance() {
    return reinterpret_cast<const GetRankingsResponse*>(
               &_GetRankingsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetRankingsResponse& a, GetRankingsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRankingsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRankingsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRankingsResponse* New() const final {
    return CreateMaybeMessage<GetRankingsResponse>(nullptr);
  }

  GetRankingsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRankingsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRankingsResponse& from);
  void MergeFrom(const GetRankingsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRankingsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.GetRankingsResponse";
  }
  protected:
  explicit GetRankingsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankingsFieldNumber = 1,
    kInvalidCountFieldNumber = 2,
  };
  // repeated .kentik.kmi.v202212.Ranking rankings = 1[json_name = "rankings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  int rankings_size() const;
  private:
  int _internal_rankings_size() const;
  public:
  void clear_rankings();
  ::kentik::kmi::v202212::Ranking* mutable_rankings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Ranking >*
      mutable_rankings();
  private:
  const ::kentik::kmi::v202212::Ranking& _internal_rankings(int index) const;
  ::kentik::kmi::v202212::Ranking* _internal_add_rankings();
  public:
  const ::kentik::kmi::v202212::Ranking& rankings(int index) const;
  ::kentik::kmi::v202212::Ranking* add_rankings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Ranking >&
      rankings() const;

  // uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_invalid_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count() const;
  void set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_invalid_count() const;
  void _internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.GetRankingsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Ranking > rankings_;
  ::PROTOBUF_NAMESPACE_ID::uint32 invalid_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class GetASNDetailsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.GetASNDetailsRequest) */ {
 public:
  inline GetASNDetailsRequest() : GetASNDetailsRequest(nullptr) {};
  virtual ~GetASNDetailsRequest();

  GetASNDetailsRequest(const GetASNDetailsRequest& from);
  GetASNDetailsRequest(GetASNDetailsRequest&& from) noexcept
    : GetASNDetailsRequest() {
    *this = ::std::move(from);
  }

  inline GetASNDetailsRequest& operator=(const GetASNDetailsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetASNDetailsRequest& operator=(GetASNDetailsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetASNDetailsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetASNDetailsRequest* internal_default_instance() {
    return reinterpret_cast<const GetASNDetailsRequest*>(
               &_GetASNDetailsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetASNDetailsRequest& a, GetASNDetailsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetASNDetailsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetASNDetailsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetASNDetailsRequest* New() const final {
    return CreateMaybeMessage<GetASNDetailsRequest>(nullptr);
  }

  GetASNDetailsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetASNDetailsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetASNDetailsRequest& from);
  void MergeFrom(const GetASNDetailsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetASNDetailsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.GetASNDetailsRequest";
  }
  protected:
  explicit GetASNDetailsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kAsnFieldNumber = 2,
    kIpFieldNumber = 3,
    kTypeFieldNumber = 4,
    kMutualProviderFieldNumber = 5,
    kMutualCustomerFieldNumber = 6,
    kSinglehomedCustomerFieldNumber = 7,
  };
  // string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_market_id();
  const std::string& market_id() const;
  void set_market_id(const std::string& value);
  void set_market_id(std::string&& value);
  void set_market_id(const char* value);
  void set_market_id(const char* value, size_t size);
  std::string* mutable_market_id();
  std::string* release_market_id();
  void set_allocated_market_id(std::string* market_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_market_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_market_id(
      std::string* market_id);
  private:
  const std::string& _internal_market_id() const;
  void _internal_set_market_id(const std::string& value);
  std::string* _internal_mutable_market_id();
  public:

  // string asn = 2[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_asn();
  const std::string& asn() const;
  void set_asn(const std::string& value);
  void set_asn(std::string&& value);
  void set_asn(const char* value);
  void set_asn(const char* value, size_t size);
  std::string* mutable_asn();
  std::string* release_asn();
  void set_allocated_asn(std::string* asn);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_asn();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_asn(
      std::string* asn);
  private:
  const std::string& _internal_asn() const;
  void _internal_set_asn(const std::string& value);
  std::string* _internal_mutable_asn();
  public:

  // string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string type = 4[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string mutual_provider = 5[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_mutual_provider();
  const std::string& mutual_provider() const;
  void set_mutual_provider(const std::string& value);
  void set_mutual_provider(std::string&& value);
  void set_mutual_provider(const char* value);
  void set_mutual_provider(const char* value, size_t size);
  std::string* mutable_mutual_provider();
  std::string* release_mutual_provider();
  void set_allocated_mutual_provider(std::string* mutual_provider);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mutual_provider();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mutual_provider(
      std::string* mutual_provider);
  private:
  const std::string& _internal_mutual_provider() const;
  void _internal_set_mutual_provider(const std::string& value);
  std::string* _internal_mutable_mutual_provider();
  public:

  // string mutual_customer = 6[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_mutual_customer();
  const std::string& mutual_customer() const;
  void set_mutual_customer(const std::string& value);
  void set_mutual_customer(std::string&& value);
  void set_mutual_customer(const char* value);
  void set_mutual_customer(const char* value, size_t size);
  std::string* mutable_mutual_customer();
  std::string* release_mutual_customer();
  void set_allocated_mutual_customer(std::string* mutual_customer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mutual_customer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mutual_customer(
      std::string* mutual_customer);
  private:
  const std::string& _internal_mutual_customer() const;
  void _internal_set_mutual_customer(const std::string& value);
  std::string* _internal_mutable_mutual_customer();
  public:

  // string singlehomed_customer = 7[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  void clear_singlehomed_customer();
  const std::string& singlehomed_customer() const;
  void set_singlehomed_customer(const std::string& value);
  void set_singlehomed_customer(std::string&& value);
  void set_singlehomed_customer(const char* value);
  void set_singlehomed_customer(const char* value, size_t size);
  std::string* mutable_singlehomed_customer();
  std::string* release_singlehomed_customer();
  void set_allocated_singlehomed_customer(std::string* singlehomed_customer);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_singlehomed_customer();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_singlehomed_customer(
      std::string* singlehomed_customer);
  private:
  const std::string& _internal_singlehomed_customer() const;
  void _internal_set_singlehomed_customer(const std::string& value);
  std::string* _internal_mutable_singlehomed_customer();
  public:

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.GetASNDetailsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mutual_provider_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mutual_customer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr singlehomed_customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// -------------------------------------------------------------------

class GetASNDetailsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:kentik.kmi.v202212.GetASNDetailsResponse) */ {
 public:
  inline GetASNDetailsResponse() : GetASNDetailsResponse(nullptr) {};
  virtual ~GetASNDetailsResponse();

  GetASNDetailsResponse(const GetASNDetailsResponse& from);
  GetASNDetailsResponse(GetASNDetailsResponse&& from) noexcept
    : GetASNDetailsResponse() {
    *this = ::std::move(from);
  }

  inline GetASNDetailsResponse& operator=(const GetASNDetailsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetASNDetailsResponse& operator=(GetASNDetailsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetASNDetailsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetASNDetailsResponse* internal_default_instance() {
    return reinterpret_cast<const GetASNDetailsResponse*>(
               &_GetASNDetailsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetASNDetailsResponse& a, GetASNDetailsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetASNDetailsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetASNDetailsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetASNDetailsResponse* New() const final {
    return CreateMaybeMessage<GetASNDetailsResponse>(nullptr);
  }

  GetASNDetailsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetASNDetailsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetASNDetailsResponse& from);
  void MergeFrom(const GetASNDetailsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetASNDetailsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kentik.kmi.v202212.GetASNDetailsResponse";
  }
  protected:
  explicit GetASNDetailsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto);
    return ::descriptor_table_kentik_2fkmi_2fv202212_2fkmi_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsnDetailsFieldNumber = 1,
  };
  // .kentik.kmi.v202212.ASNDetails asn_details = 1[json_name = "asnDetails", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
  bool has_asn_details() const;
  private:
  bool _internal_has_asn_details() const;
  public:
  void clear_asn_details();
  const ::kentik::kmi::v202212::ASNDetails& asn_details() const;
  ::kentik::kmi::v202212::ASNDetails* release_asn_details();
  ::kentik::kmi::v202212::ASNDetails* mutable_asn_details();
  void set_allocated_asn_details(::kentik::kmi::v202212::ASNDetails* asn_details);
  private:
  const ::kentik::kmi::v202212::ASNDetails& _internal_asn_details() const;
  ::kentik::kmi::v202212::ASNDetails* _internal_mutable_asn_details();
  public:
  void unsafe_arena_set_allocated_asn_details(
      ::kentik::kmi::v202212::ASNDetails* asn_details);
  ::kentik::kmi::v202212::ASNDetails* unsafe_arena_release_asn_details();

  // @@protoc_insertion_point(class_scope:kentik.kmi.v202212.GetASNDetailsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::kentik::kmi::v202212::ASNDetails* asn_details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kentik_2fkmi_2fv202212_2fkmi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Market

// string id = 1[json_name = "id", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Market::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Market::id() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Market.id)
  return _internal_id();
}
inline void Market::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Market.id)
}
inline std::string* Market::mutable_id() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Market.id)
  return _internal_mutable_id();
}
inline const std::string& Market::_internal_id() const {
  return id_.Get();
}
inline void Market::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Market::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.Market.id)
}
inline void Market::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Market.id)
}
inline void Market::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Market.id)
}
inline std::string* Market::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Market::release_id() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.Market.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Market::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.Market.id)
}
inline std::string* Market::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.Market.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Market::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    
  } else {
    
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.Market.id)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Market::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Market::name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Market.name)
  return _internal_name();
}
inline void Market::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Market.name)
}
inline std::string* Market::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Market.name)
  return _internal_mutable_name();
}
inline const std::string& Market::_internal_name() const {
  return name_.Get();
}
inline void Market::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Market::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.Market.name)
}
inline void Market::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Market.name)
}
inline void Market::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Market.name)
}
inline std::string* Market::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Market::release_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.Market.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Market::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.Market.name)
}
inline std::string* Market::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.Market.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Market::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.Market.name)
}

// string geo_scope = 3[json_name = "geoScope", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Market::clear_geo_scope() {
  geo_scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Market::geo_scope() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Market.geo_scope)
  return _internal_geo_scope();
}
inline void Market::set_geo_scope(const std::string& value) {
  _internal_set_geo_scope(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Market.geo_scope)
}
inline std::string* Market::mutable_geo_scope() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Market.geo_scope)
  return _internal_mutable_geo_scope();
}
inline const std::string& Market::_internal_geo_scope() const {
  return geo_scope_.Get();
}
inline void Market::_internal_set_geo_scope(const std::string& value) {
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Market::set_geo_scope(std::string&& value) {
  
  geo_scope_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.Market.geo_scope)
}
inline void Market::set_geo_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Market.geo_scope)
}
inline void Market::set_geo_scope(const char* value,
    size_t size) {
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Market.geo_scope)
}
inline std::string* Market::_internal_mutable_geo_scope() {
  
  return geo_scope_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Market::release_geo_scope() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.Market.geo_scope)
  return geo_scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Market::set_allocated_geo_scope(std::string* geo_scope) {
  if (geo_scope != nullptr) {
    
  } else {
    
  }
  geo_scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geo_scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.Market.geo_scope)
}
inline std::string* Market::unsafe_arena_release_geo_scope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.Market.geo_scope)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return geo_scope_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Market::unsafe_arena_set_allocated_geo_scope(
    std::string* geo_scope) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (geo_scope != nullptr) {
    
  } else {
    
  }
  geo_scope_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      geo_scope, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.Market.geo_scope)
}

// string geo_name = 4[json_name = "geoName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Market::clear_geo_name() {
  geo_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Market::geo_name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Market.geo_name)
  return _internal_geo_name();
}
inline void Market::set_geo_name(const std::string& value) {
  _internal_set_geo_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Market.geo_name)
}
inline std::string* Market::mutable_geo_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Market.geo_name)
  return _internal_mutable_geo_name();
}
inline const std::string& Market::_internal_geo_name() const {
  return geo_name_.Get();
}
inline void Market::_internal_set_geo_name(const std::string& value) {
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Market::set_geo_name(std::string&& value) {
  
  geo_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.Market.geo_name)
}
inline void Market::set_geo_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Market.geo_name)
}
inline void Market::set_geo_name(const char* value,
    size_t size) {
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Market.geo_name)
}
inline std::string* Market::_internal_mutable_geo_name() {
  
  return geo_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Market::release_geo_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.Market.geo_name)
  return geo_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Market::set_allocated_geo_name(std::string* geo_name) {
  if (geo_name != nullptr) {
    
  } else {
    
  }
  geo_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geo_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.Market.geo_name)
}
inline std::string* Market::unsafe_arena_release_geo_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.Market.geo_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return geo_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Market::unsafe_arena_set_allocated_geo_name(
    std::string* geo_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (geo_name != nullptr) {
    
  } else {
    
  }
  geo_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      geo_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.Market.geo_name)
}

// repeated string child_list = 5[json_name = "childList", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Market::_internal_child_list_size() const {
  return child_list_.size();
}
inline int Market::child_list_size() const {
  return _internal_child_list_size();
}
inline void Market::clear_child_list() {
  child_list_.Clear();
}
inline std::string* Market::add_child_list() {
  // @@protoc_insertion_point(field_add_mutable:kentik.kmi.v202212.Market.child_list)
  return _internal_add_child_list();
}
inline const std::string& Market::_internal_child_list(int index) const {
  return child_list_.Get(index);
}
inline const std::string& Market::child_list(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Market.child_list)
  return _internal_child_list(index);
}
inline std::string* Market::mutable_child_list(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Market.child_list)
  return child_list_.Mutable(index);
}
inline void Market::set_child_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Market.child_list)
  child_list_.Mutable(index)->assign(value);
}
inline void Market::set_child_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Market.child_list)
  child_list_.Mutable(index)->assign(std::move(value));
}
inline void Market::set_child_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  child_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Market.child_list)
}
inline void Market::set_child_list(int index, const char* value, size_t size) {
  child_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Market.child_list)
}
inline std::string* Market::_internal_add_child_list() {
  return child_list_.Add();
}
inline void Market::add_child_list(const std::string& value) {
  child_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.Market.child_list)
}
inline void Market::add_child_list(std::string&& value) {
  child_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.Market.child_list)
}
inline void Market::add_child_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  child_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.kmi.v202212.Market.child_list)
}
inline void Market::add_child_list(const char* value, size_t size) {
  child_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.kmi.v202212.Market.child_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Market::child_list() const {
  // @@protoc_insertion_point(field_list:kentik.kmi.v202212.Market.child_list)
  return child_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Market::mutable_child_list() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kmi.v202212.Market.child_list)
  return &child_list_;
}

// repeated string parent_list = 6[json_name = "parentList", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int Market::_internal_parent_list_size() const {
  return parent_list_.size();
}
inline int Market::parent_list_size() const {
  return _internal_parent_list_size();
}
inline void Market::clear_parent_list() {
  parent_list_.Clear();
}
inline std::string* Market::add_parent_list() {
  // @@protoc_insertion_point(field_add_mutable:kentik.kmi.v202212.Market.parent_list)
  return _internal_add_parent_list();
}
inline const std::string& Market::_internal_parent_list(int index) const {
  return parent_list_.Get(index);
}
inline const std::string& Market::parent_list(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Market.parent_list)
  return _internal_parent_list(index);
}
inline std::string* Market::mutable_parent_list(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Market.parent_list)
  return parent_list_.Mutable(index);
}
inline void Market::set_parent_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Market.parent_list)
  parent_list_.Mutable(index)->assign(value);
}
inline void Market::set_parent_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Market.parent_list)
  parent_list_.Mutable(index)->assign(std::move(value));
}
inline void Market::set_parent_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parent_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Market.parent_list)
}
inline void Market::set_parent_list(int index, const char* value, size_t size) {
  parent_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Market.parent_list)
}
inline std::string* Market::_internal_add_parent_list() {
  return parent_list_.Add();
}
inline void Market::add_parent_list(const std::string& value) {
  parent_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.Market.parent_list)
}
inline void Market::add_parent_list(std::string&& value) {
  parent_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.Market.parent_list)
}
inline void Market::add_parent_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  parent_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:kentik.kmi.v202212.Market.parent_list)
}
inline void Market::add_parent_list(const char* value, size_t size) {
  parent_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:kentik.kmi.v202212.Market.parent_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Market::parent_list() const {
  // @@protoc_insertion_point(field_list:kentik.kmi.v202212.Market.parent_list)
  return parent_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Market::mutable_parent_list() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kmi.v202212.Market.parent_list)
  return &parent_list_;
}

// -------------------------------------------------------------------

// Ranking

// uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Ranking::_internal_has_asn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Ranking::has_asn() const {
  return _internal_has_asn();
}
inline void Ranking::clear_asn() {
  asn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::asn() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Ranking.asn)
  return _internal_asn();
}
inline void Ranking::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  asn_ = value;
}
inline void Ranking::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Ranking.asn)
}

// string geo_scope = 2[json_name = "geoScope", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Ranking::clear_geo_scope() {
  geo_scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ranking::geo_scope() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Ranking.geo_scope)
  return _internal_geo_scope();
}
inline void Ranking::set_geo_scope(const std::string& value) {
  _internal_set_geo_scope(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Ranking.geo_scope)
}
inline std::string* Ranking::mutable_geo_scope() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Ranking.geo_scope)
  return _internal_mutable_geo_scope();
}
inline const std::string& Ranking::_internal_geo_scope() const {
  return geo_scope_.Get();
}
inline void Ranking::_internal_set_geo_scope(const std::string& value) {
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ranking::set_geo_scope(std::string&& value) {
  
  geo_scope_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.Ranking.geo_scope)
}
inline void Ranking::set_geo_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Ranking.geo_scope)
}
inline void Ranking::set_geo_scope(const char* value,
    size_t size) {
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Ranking.geo_scope)
}
inline std::string* Ranking::_internal_mutable_geo_scope() {
  
  return geo_scope_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ranking::release_geo_scope() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.Ranking.geo_scope)
  return geo_scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ranking::set_allocated_geo_scope(std::string* geo_scope) {
  if (geo_scope != nullptr) {
    
  } else {
    
  }
  geo_scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geo_scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.Ranking.geo_scope)
}
inline std::string* Ranking::unsafe_arena_release_geo_scope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.Ranking.geo_scope)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return geo_scope_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ranking::unsafe_arena_set_allocated_geo_scope(
    std::string* geo_scope) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (geo_scope != nullptr) {
    
  } else {
    
  }
  geo_scope_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      geo_scope, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.Ranking.geo_scope)
}

// string geo_name = 3[json_name = "geoName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Ranking::clear_geo_name() {
  geo_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ranking::geo_name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Ranking.geo_name)
  return _internal_geo_name();
}
inline void Ranking::set_geo_name(const std::string& value) {
  _internal_set_geo_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Ranking.geo_name)
}
inline std::string* Ranking::mutable_geo_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Ranking.geo_name)
  return _internal_mutable_geo_name();
}
inline const std::string& Ranking::_internal_geo_name() const {
  return geo_name_.Get();
}
inline void Ranking::_internal_set_geo_name(const std::string& value) {
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ranking::set_geo_name(std::string&& value) {
  
  geo_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.Ranking.geo_name)
}
inline void Ranking::set_geo_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Ranking.geo_name)
}
inline void Ranking::set_geo_name(const char* value,
    size_t size) {
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Ranking.geo_name)
}
inline std::string* Ranking::_internal_mutable_geo_name() {
  
  return geo_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ranking::release_geo_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.Ranking.geo_name)
  return geo_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ranking::set_allocated_geo_name(std::string* geo_name) {
  if (geo_name != nullptr) {
    
  } else {
    
  }
  geo_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geo_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.Ranking.geo_name)
}
inline std::string* Ranking::unsafe_arena_release_geo_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.Ranking.geo_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return geo_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ranking::unsafe_arena_set_allocated_geo_name(
    std::string* geo_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (geo_name != nullptr) {
    
  } else {
    
  }
  geo_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      geo_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.Ranking.geo_name)
}

// string name = 4[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Ranking::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Ranking::name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Ranking.name)
  return _internal_name();
}
inline void Ranking::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Ranking.name)
}
inline std::string* Ranking::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Ranking.name)
  return _internal_mutable_name();
}
inline const std::string& Ranking::_internal_name() const {
  return name_.Get();
}
inline void Ranking::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Ranking::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.Ranking.name)
}
inline void Ranking::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Ranking.name)
}
inline void Ranking::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Ranking.name)
}
inline std::string* Ranking::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Ranking::release_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.Ranking.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Ranking::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.Ranking.name)
}
inline std::string* Ranking::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.Ranking.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Ranking::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.Ranking.name)
}

// uint32 rank = 5[json_name = "rank", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Ranking::_internal_has_rank() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Ranking::has_rank() const {
  return _internal_has_rank();
}
inline void Ranking::clear_rank() {
  rank_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::rank() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Ranking.rank)
  return _internal_rank();
}
inline void Ranking::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  rank_ = value;
}
inline void Ranking::set_rank(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Ranking.rank)
}

// uint32 rank_change = 6[json_name = "rankChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Ranking::_internal_has_rank_change() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Ranking::has_rank_change() const {
  return _internal_has_rank_change();
}
inline void Ranking::clear_rank_change() {
  rank_change_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::_internal_rank_change() const {
  return rank_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::rank_change() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Ranking.rank_change)
  return _internal_rank_change();
}
inline void Ranking::_internal_set_rank_change(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  rank_change_ = value;
}
inline void Ranking::set_rank_change(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rank_change(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Ranking.rank_change)
}

// uint32 score = 7[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Ranking::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Ranking::has_score() const {
  return _internal_has_score();
}
inline void Ranking::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::score() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Ranking.score)
  return _internal_score();
}
inline void Ranking::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  score_ = value;
}
inline void Ranking::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Ranking.score)
}

// uint32 score_change = 8[json_name = "scoreChange", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Ranking::_internal_has_score_change() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Ranking::has_score_change() const {
  return _internal_has_score_change();
}
inline void Ranking::clear_score_change() {
  score_change_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::_internal_score_change() const {
  return score_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ranking::score_change() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Ranking.score_change)
  return _internal_score_change();
}
inline void Ranking::_internal_set_score_change(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  score_change_ = value;
}
inline void Ranking::set_score_change(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score_change(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Ranking.score_change)
}

// -------------------------------------------------------------------

// CustomerProvider

// uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CustomerProvider::_internal_has_asn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomerProvider::has_asn() const {
  return _internal_has_asn();
}
inline void CustomerProvider::clear_asn() {
  asn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomerProvider::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomerProvider::asn() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.asn)
  return _internal_asn();
}
inline void CustomerProvider::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  asn_ = value;
}
inline void CustomerProvider::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.asn)
}

// uint32 edge_type = 2[json_name = "edgeType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CustomerProvider::_internal_has_edge_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomerProvider::has_edge_type() const {
  return _internal_has_edge_type();
}
inline void CustomerProvider::clear_edge_type() {
  edge_type_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomerProvider::_internal_edge_type() const {
  return edge_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomerProvider::edge_type() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.edge_type)
  return _internal_edge_type();
}
inline void CustomerProvider::_internal_set_edge_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  edge_type_ = value;
}
inline void CustomerProvider::set_edge_type(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_edge_type(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.edge_type)
}

// string geo_name = 3[json_name = "geoName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomerProvider::clear_geo_name() {
  geo_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomerProvider::geo_name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.geo_name)
  return _internal_geo_name();
}
inline void CustomerProvider::set_geo_name(const std::string& value) {
  _internal_set_geo_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.geo_name)
}
inline std::string* CustomerProvider::mutable_geo_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.CustomerProvider.geo_name)
  return _internal_mutable_geo_name();
}
inline const std::string& CustomerProvider::_internal_geo_name() const {
  return geo_name_.Get();
}
inline void CustomerProvider::_internal_set_geo_name(const std::string& value) {
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomerProvider::set_geo_name(std::string&& value) {
  
  geo_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.CustomerProvider.geo_name)
}
inline void CustomerProvider::set_geo_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.CustomerProvider.geo_name)
}
inline void CustomerProvider::set_geo_name(const char* value,
    size_t size) {
  
  geo_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.CustomerProvider.geo_name)
}
inline std::string* CustomerProvider::_internal_mutable_geo_name() {
  
  return geo_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomerProvider::release_geo_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.CustomerProvider.geo_name)
  return geo_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerProvider::set_allocated_geo_name(std::string* geo_name) {
  if (geo_name != nullptr) {
    
  } else {
    
  }
  geo_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geo_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.CustomerProvider.geo_name)
}
inline std::string* CustomerProvider::unsafe_arena_release_geo_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.CustomerProvider.geo_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return geo_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomerProvider::unsafe_arena_set_allocated_geo_name(
    std::string* geo_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (geo_name != nullptr) {
    
  } else {
    
  }
  geo_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      geo_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.CustomerProvider.geo_name)
}

// string geo_scope = 4[json_name = "geoScope", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomerProvider::clear_geo_scope() {
  geo_scope_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomerProvider::geo_scope() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.geo_scope)
  return _internal_geo_scope();
}
inline void CustomerProvider::set_geo_scope(const std::string& value) {
  _internal_set_geo_scope(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.geo_scope)
}
inline std::string* CustomerProvider::mutable_geo_scope() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.CustomerProvider.geo_scope)
  return _internal_mutable_geo_scope();
}
inline const std::string& CustomerProvider::_internal_geo_scope() const {
  return geo_scope_.Get();
}
inline void CustomerProvider::_internal_set_geo_scope(const std::string& value) {
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomerProvider::set_geo_scope(std::string&& value) {
  
  geo_scope_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.CustomerProvider.geo_scope)
}
inline void CustomerProvider::set_geo_scope(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.CustomerProvider.geo_scope)
}
inline void CustomerProvider::set_geo_scope(const char* value,
    size_t size) {
  
  geo_scope_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.CustomerProvider.geo_scope)
}
inline std::string* CustomerProvider::_internal_mutable_geo_scope() {
  
  return geo_scope_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomerProvider::release_geo_scope() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.CustomerProvider.geo_scope)
  return geo_scope_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerProvider::set_allocated_geo_scope(std::string* geo_scope) {
  if (geo_scope != nullptr) {
    
  } else {
    
  }
  geo_scope_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geo_scope,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.CustomerProvider.geo_scope)
}
inline std::string* CustomerProvider::unsafe_arena_release_geo_scope() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.CustomerProvider.geo_scope)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return geo_scope_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomerProvider::unsafe_arena_set_allocated_geo_scope(
    std::string* geo_scope) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (geo_scope != nullptr) {
    
  } else {
    
  }
  geo_scope_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      geo_scope, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.CustomerProvider.geo_scope)
}

// string name = 5[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void CustomerProvider::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CustomerProvider::name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.name)
  return _internal_name();
}
inline void CustomerProvider::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.name)
}
inline std::string* CustomerProvider::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.CustomerProvider.name)
  return _internal_mutable_name();
}
inline const std::string& CustomerProvider::_internal_name() const {
  return name_.Get();
}
inline void CustomerProvider::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CustomerProvider::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.CustomerProvider.name)
}
inline void CustomerProvider::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.CustomerProvider.name)
}
inline void CustomerProvider::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.CustomerProvider.name)
}
inline std::string* CustomerProvider::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CustomerProvider::release_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.CustomerProvider.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerProvider::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.CustomerProvider.name)
}
inline std::string* CustomerProvider::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.CustomerProvider.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CustomerProvider::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.CustomerProvider.name)
}

// uint32 score = 6[json_name = "score", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CustomerProvider::_internal_has_score() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CustomerProvider::has_score() const {
  return _internal_has_score();
}
inline void CustomerProvider::clear_score() {
  score_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomerProvider::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 CustomerProvider::score() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.score)
  return _internal_score();
}
inline void CustomerProvider::_internal_set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  score_ = value;
}
inline void CustomerProvider::set_score(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.score)
}

// bool singlehomed_customer = 7[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CustomerProvider::_internal_has_singlehomed_customer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CustomerProvider::has_singlehomed_customer() const {
  return _internal_has_singlehomed_customer();
}
inline void CustomerProvider::clear_singlehomed_customer() {
  singlehomed_customer_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CustomerProvider::_internal_singlehomed_customer() const {
  return singlehomed_customer_;
}
inline bool CustomerProvider::singlehomed_customer() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.singlehomed_customer)
  return _internal_singlehomed_customer();
}
inline void CustomerProvider::_internal_set_singlehomed_customer(bool value) {
  _has_bits_[0] |= 0x00000008u;
  singlehomed_customer_ = value;
}
inline void CustomerProvider::set_singlehomed_customer(bool value) {
  _internal_set_singlehomed_customer(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.singlehomed_customer)
}

// bool mutual_customer = 8[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CustomerProvider::_internal_has_mutual_customer() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CustomerProvider::has_mutual_customer() const {
  return _internal_has_mutual_customer();
}
inline void CustomerProvider::clear_mutual_customer() {
  mutual_customer_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CustomerProvider::_internal_mutual_customer() const {
  return mutual_customer_;
}
inline bool CustomerProvider::mutual_customer() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.mutual_customer)
  return _internal_mutual_customer();
}
inline void CustomerProvider::_internal_set_mutual_customer(bool value) {
  _has_bits_[0] |= 0x00000010u;
  mutual_customer_ = value;
}
inline void CustomerProvider::set_mutual_customer(bool value) {
  _internal_set_mutual_customer(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.mutual_customer)
}

// bool mutual_provider = 9[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool CustomerProvider::_internal_has_mutual_provider() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CustomerProvider::has_mutual_provider() const {
  return _internal_has_mutual_provider();
}
inline void CustomerProvider::clear_mutual_provider() {
  mutual_provider_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CustomerProvider::_internal_mutual_provider() const {
  return mutual_provider_;
}
inline bool CustomerProvider::mutual_provider() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.CustomerProvider.mutual_provider)
  return _internal_mutual_provider();
}
inline void CustomerProvider::_internal_set_mutual_provider(bool value) {
  _has_bits_[0] |= 0x00000020u;
  mutual_provider_ = value;
}
inline void CustomerProvider::set_mutual_provider(bool value) {
  _internal_set_mutual_provider(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.CustomerProvider.mutual_provider)
}

// -------------------------------------------------------------------

// Peer

// uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Peer::_internal_has_asn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Peer::has_asn() const {
  return _internal_has_asn();
}
inline void Peer::clear_asn() {
  asn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Peer::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Peer::asn() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Peer.asn)
  return _internal_asn();
}
inline void Peer::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  asn_ = value;
}
inline void Peer::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Peer.asn)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void Peer::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Peer::name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Peer.name)
  return _internal_name();
}
inline void Peer::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Peer.name)
}
inline std::string* Peer::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.Peer.name)
  return _internal_mutable_name();
}
inline const std::string& Peer::_internal_name() const {
  return name_.Get();
}
inline void Peer::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Peer::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.Peer.name)
}
inline void Peer::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.Peer.name)
}
inline void Peer::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.Peer.name)
}
inline std::string* Peer::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Peer::release_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.Peer.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Peer::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.Peer.name)
}
inline std::string* Peer::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.Peer.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Peer::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.Peer.name)
}

// uint32 pfx_count = 3[json_name = "pfxCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool Peer::_internal_has_pfx_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Peer::has_pfx_count() const {
  return _internal_has_pfx_count();
}
inline void Peer::clear_pfx_count() {
  pfx_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Peer::_internal_pfx_count() const {
  return pfx_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Peer::pfx_count() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.Peer.pfx_count)
  return _internal_pfx_count();
}
inline void Peer::_internal_set_pfx_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pfx_count_ = value;
}
inline void Peer::set_pfx_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pfx_count(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.Peer.pfx_count)
}

// -------------------------------------------------------------------

// ASNDetails

// uint32 asn = 1[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool ASNDetails::_internal_has_asn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ASNDetails::has_asn() const {
  return _internal_has_asn();
}
inline void ASNDetails::clear_asn() {
  asn_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASNDetails::_internal_asn() const {
  return asn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ASNDetails::asn() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.ASNDetails.asn)
  return _internal_asn();
}
inline void ASNDetails::_internal_set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  asn_ = value;
}
inline void ASNDetails::set_asn(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.ASNDetails.asn)
}

// string name = 2[json_name = "name", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ASNDetails::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ASNDetails::name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.ASNDetails.name)
  return _internal_name();
}
inline void ASNDetails::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.ASNDetails.name)
}
inline std::string* ASNDetails::mutable_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.ASNDetails.name)
  return _internal_mutable_name();
}
inline const std::string& ASNDetails::_internal_name() const {
  return name_.Get();
}
inline void ASNDetails::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ASNDetails::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.ASNDetails.name)
}
inline void ASNDetails::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.ASNDetails.name)
}
inline void ASNDetails::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.ASNDetails.name)
}
inline std::string* ASNDetails::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ASNDetails::release_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.ASNDetails.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASNDetails::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.ASNDetails.name)
}
inline std::string* ASNDetails::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.ASNDetails.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ASNDetails::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.ASNDetails.name)
}

// string country_name = 3[json_name = "countryName", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void ASNDetails::clear_country_name() {
  country_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ASNDetails::country_name() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.ASNDetails.country_name)
  return _internal_country_name();
}
inline void ASNDetails::set_country_name(const std::string& value) {
  _internal_set_country_name(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.ASNDetails.country_name)
}
inline std::string* ASNDetails::mutable_country_name() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.ASNDetails.country_name)
  return _internal_mutable_country_name();
}
inline const std::string& ASNDetails::_internal_country_name() const {
  return country_name_.Get();
}
inline void ASNDetails::_internal_set_country_name(const std::string& value) {
  
  country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ASNDetails::set_country_name(std::string&& value) {
  
  country_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.ASNDetails.country_name)
}
inline void ASNDetails::set_country_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.ASNDetails.country_name)
}
inline void ASNDetails::set_country_name(const char* value,
    size_t size) {
  
  country_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.ASNDetails.country_name)
}
inline std::string* ASNDetails::_internal_mutable_country_name() {
  
  return country_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ASNDetails::release_country_name() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.ASNDetails.country_name)
  return country_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ASNDetails::set_allocated_country_name(std::string* country_name) {
  if (country_name != nullptr) {
    
  } else {
    
  }
  country_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.ASNDetails.country_name)
}
inline std::string* ASNDetails::unsafe_arena_release_country_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.ASNDetails.country_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return country_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ASNDetails::unsafe_arena_set_allocated_country_name(
    std::string* country_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country_name != nullptr) {
    
  } else {
    
  }
  country_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.ASNDetails.country_name)
}

// repeated .kentik.kmi.v202212.CustomerProvider customers = 4[json_name = "customers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ASNDetails::_internal_customers_size() const {
  return customers_.size();
}
inline int ASNDetails::customers_size() const {
  return _internal_customers_size();
}
inline void ASNDetails::clear_customers() {
  customers_.Clear();
}
inline ::kentik::kmi::v202212::CustomerProvider* ASNDetails::mutable_customers(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.ASNDetails.customers)
  return customers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider >*
ASNDetails::mutable_customers() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kmi.v202212.ASNDetails.customers)
  return &customers_;
}
inline const ::kentik::kmi::v202212::CustomerProvider& ASNDetails::_internal_customers(int index) const {
  return customers_.Get(index);
}
inline const ::kentik::kmi::v202212::CustomerProvider& ASNDetails::customers(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.ASNDetails.customers)
  return _internal_customers(index);
}
inline ::kentik::kmi::v202212::CustomerProvider* ASNDetails::_internal_add_customers() {
  return customers_.Add();
}
inline ::kentik::kmi::v202212::CustomerProvider* ASNDetails::add_customers() {
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.ASNDetails.customers)
  return _internal_add_customers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider >&
ASNDetails::customers() const {
  // @@protoc_insertion_point(field_list:kentik.kmi.v202212.ASNDetails.customers)
  return customers_;
}

// repeated .kentik.kmi.v202212.CustomerProvider providers = 5[json_name = "providers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ASNDetails::_internal_providers_size() const {
  return providers_.size();
}
inline int ASNDetails::providers_size() const {
  return _internal_providers_size();
}
inline void ASNDetails::clear_providers() {
  providers_.Clear();
}
inline ::kentik::kmi::v202212::CustomerProvider* ASNDetails::mutable_providers(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.ASNDetails.providers)
  return providers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider >*
ASNDetails::mutable_providers() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kmi.v202212.ASNDetails.providers)
  return &providers_;
}
inline const ::kentik::kmi::v202212::CustomerProvider& ASNDetails::_internal_providers(int index) const {
  return providers_.Get(index);
}
inline const ::kentik::kmi::v202212::CustomerProvider& ASNDetails::providers(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.ASNDetails.providers)
  return _internal_providers(index);
}
inline ::kentik::kmi::v202212::CustomerProvider* ASNDetails::_internal_add_providers() {
  return providers_.Add();
}
inline ::kentik::kmi::v202212::CustomerProvider* ASNDetails::add_providers() {
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.ASNDetails.providers)
  return _internal_add_providers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::CustomerProvider >&
ASNDetails::providers() const {
  // @@protoc_insertion_point(field_list:kentik.kmi.v202212.ASNDetails.providers)
  return providers_;
}

// repeated .kentik.kmi.v202212.Peer peers = 6[json_name = "peers", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ASNDetails::_internal_peers_size() const {
  return peers_.size();
}
inline int ASNDetails::peers_size() const {
  return _internal_peers_size();
}
inline void ASNDetails::clear_peers() {
  peers_.Clear();
}
inline ::kentik::kmi::v202212::Peer* ASNDetails::mutable_peers(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.ASNDetails.peers)
  return peers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Peer >*
ASNDetails::mutable_peers() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kmi.v202212.ASNDetails.peers)
  return &peers_;
}
inline const ::kentik::kmi::v202212::Peer& ASNDetails::_internal_peers(int index) const {
  return peers_.Get(index);
}
inline const ::kentik::kmi::v202212::Peer& ASNDetails::peers(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.ASNDetails.peers)
  return _internal_peers(index);
}
inline ::kentik::kmi::v202212::Peer* ASNDetails::_internal_add_peers() {
  return peers_.Add();
}
inline ::kentik::kmi::v202212::Peer* ASNDetails::add_peers() {
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.ASNDetails.peers)
  return _internal_add_peers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Peer >&
ASNDetails::peers() const {
  // @@protoc_insertion_point(field_list:kentik.kmi.v202212.ASNDetails.peers)
  return peers_;
}

// -------------------------------------------------------------------

// ListMarketsRequest

// -------------------------------------------------------------------

// ListMarketsResponse

// repeated .kentik.kmi.v202212.Market markets = 1[json_name = "markets", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int ListMarketsResponse::_internal_markets_size() const {
  return markets_.size();
}
inline int ListMarketsResponse::markets_size() const {
  return _internal_markets_size();
}
inline void ListMarketsResponse::clear_markets() {
  markets_.Clear();
}
inline ::kentik::kmi::v202212::Market* ListMarketsResponse::mutable_markets(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.ListMarketsResponse.markets)
  return markets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Market >*
ListMarketsResponse::mutable_markets() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kmi.v202212.ListMarketsResponse.markets)
  return &markets_;
}
inline const ::kentik::kmi::v202212::Market& ListMarketsResponse::_internal_markets(int index) const {
  return markets_.Get(index);
}
inline const ::kentik::kmi::v202212::Market& ListMarketsResponse::markets(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.ListMarketsResponse.markets)
  return _internal_markets(index);
}
inline ::kentik::kmi::v202212::Market* ListMarketsResponse::_internal_add_markets() {
  return markets_.Add();
}
inline ::kentik::kmi::v202212::Market* ListMarketsResponse::add_markets() {
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.ListMarketsResponse.markets)
  return _internal_add_markets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Market >&
ListMarketsResponse::markets() const {
  // @@protoc_insertion_point(field_list:kentik.kmi.v202212.ListMarketsResponse.markets)
  return markets_;
}

// -------------------------------------------------------------------

// GetRankingsRequest

// string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetRankingsRequest::clear_market_id() {
  market_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRankingsRequest::market_id() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetRankingsRequest.market_id)
  return _internal_market_id();
}
inline void GetRankingsRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetRankingsRequest.market_id)
}
inline std::string* GetRankingsRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetRankingsRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& GetRankingsRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void GetRankingsRequest::_internal_set_market_id(const std::string& value) {
  
  market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRankingsRequest::set_market_id(std::string&& value) {
  
  market_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetRankingsRequest.market_id)
}
inline void GetRankingsRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetRankingsRequest.market_id)
}
inline void GetRankingsRequest::set_market_id(const char* value,
    size_t size) {
  
  market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetRankingsRequest.market_id)
}
inline std::string* GetRankingsRequest::_internal_mutable_market_id() {
  
  return market_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRankingsRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetRankingsRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRankingsRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {
    
  } else {
    
  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetRankingsRequest.market_id)
}
inline std::string* GetRankingsRequest::unsafe_arena_release_market_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetRankingsRequest.market_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return market_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRankingsRequest::unsafe_arena_set_allocated_market_id(
    std::string* market_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (market_id != nullptr) {
    
  } else {
    
  }
  market_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      market_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetRankingsRequest.market_id)
}

// string rank_type = 2[json_name = "rankType", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetRankingsRequest::clear_rank_type() {
  rank_type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRankingsRequest::rank_type() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetRankingsRequest.rank_type)
  return _internal_rank_type();
}
inline void GetRankingsRequest::set_rank_type(const std::string& value) {
  _internal_set_rank_type(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetRankingsRequest.rank_type)
}
inline std::string* GetRankingsRequest::mutable_rank_type() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetRankingsRequest.rank_type)
  return _internal_mutable_rank_type();
}
inline const std::string& GetRankingsRequest::_internal_rank_type() const {
  return rank_type_.Get();
}
inline void GetRankingsRequest::_internal_set_rank_type(const std::string& value) {
  
  rank_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRankingsRequest::set_rank_type(std::string&& value) {
  
  rank_type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetRankingsRequest.rank_type)
}
inline void GetRankingsRequest::set_rank_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rank_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetRankingsRequest.rank_type)
}
inline void GetRankingsRequest::set_rank_type(const char* value,
    size_t size) {
  
  rank_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetRankingsRequest.rank_type)
}
inline std::string* GetRankingsRequest::_internal_mutable_rank_type() {
  
  return rank_type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRankingsRequest::release_rank_type() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetRankingsRequest.rank_type)
  return rank_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRankingsRequest::set_allocated_rank_type(std::string* rank_type) {
  if (rank_type != nullptr) {
    
  } else {
    
  }
  rank_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rank_type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetRankingsRequest.rank_type)
}
inline std::string* GetRankingsRequest::unsafe_arena_release_rank_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetRankingsRequest.rank_type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rank_type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRankingsRequest::unsafe_arena_set_allocated_rank_type(
    std::string* rank_type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rank_type != nullptr) {
    
  } else {
    
  }
  rank_type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rank_type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetRankingsRequest.rank_type)
}

// string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetRankingsRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRankingsRequest::ip() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetRankingsRequest.ip)
  return _internal_ip();
}
inline void GetRankingsRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetRankingsRequest.ip)
}
inline std::string* GetRankingsRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetRankingsRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& GetRankingsRequest::_internal_ip() const {
  return ip_.Get();
}
inline void GetRankingsRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRankingsRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetRankingsRequest.ip)
}
inline void GetRankingsRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetRankingsRequest.ip)
}
inline void GetRankingsRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetRankingsRequest.ip)
}
inline std::string* GetRankingsRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRankingsRequest::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetRankingsRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRankingsRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetRankingsRequest.ip)
}
inline std::string* GetRankingsRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetRankingsRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRankingsRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetRankingsRequest.ip)
}

// uint32 limit = 4[json_name = "limit", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetRankingsRequest::_internal_has_limit() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetRankingsRequest::has_limit() const {
  return _internal_has_limit();
}
inline void GetRankingsRequest::clear_limit() {
  limit_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRankingsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRankingsRequest::limit() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetRankingsRequest.limit)
  return _internal_limit();
}
inline void GetRankingsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  limit_ = value;
}
inline void GetRankingsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetRankingsRequest.limit)
}

// -------------------------------------------------------------------

// GetRankingsResponse

// repeated .kentik.kmi.v202212.Ranking rankings = 1[json_name = "rankings", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline int GetRankingsResponse::_internal_rankings_size() const {
  return rankings_.size();
}
inline int GetRankingsResponse::rankings_size() const {
  return _internal_rankings_size();
}
inline void GetRankingsResponse::clear_rankings() {
  rankings_.Clear();
}
inline ::kentik::kmi::v202212::Ranking* GetRankingsResponse::mutable_rankings(int index) {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetRankingsResponse.rankings)
  return rankings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Ranking >*
GetRankingsResponse::mutable_rankings() {
  // @@protoc_insertion_point(field_mutable_list:kentik.kmi.v202212.GetRankingsResponse.rankings)
  return &rankings_;
}
inline const ::kentik::kmi::v202212::Ranking& GetRankingsResponse::_internal_rankings(int index) const {
  return rankings_.Get(index);
}
inline const ::kentik::kmi::v202212::Ranking& GetRankingsResponse::rankings(int index) const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetRankingsResponse.rankings)
  return _internal_rankings(index);
}
inline ::kentik::kmi::v202212::Ranking* GetRankingsResponse::_internal_add_rankings() {
  return rankings_.Add();
}
inline ::kentik::kmi::v202212::Ranking* GetRankingsResponse::add_rankings() {
  // @@protoc_insertion_point(field_add:kentik.kmi.v202212.GetRankingsResponse.rankings)
  return _internal_add_rankings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kentik::kmi::v202212::Ranking >&
GetRankingsResponse::rankings() const {
  // @@protoc_insertion_point(field_list:kentik.kmi.v202212.GetRankingsResponse.rankings)
  return rankings_;
}

// uint32 invalid_count = 2[json_name = "invalidCount", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetRankingsResponse::clear_invalid_count() {
  invalid_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRankingsResponse::_internal_invalid_count() const {
  return invalid_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetRankingsResponse::invalid_count() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetRankingsResponse.invalid_count)
  return _internal_invalid_count();
}
inline void GetRankingsResponse::_internal_set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  invalid_count_ = value;
}
inline void GetRankingsResponse::set_invalid_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_invalid_count(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetRankingsResponse.invalid_count)
}

// -------------------------------------------------------------------

// GetASNDetailsRequest

// string market_id = 1[json_name = "marketId", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetASNDetailsRequest::clear_market_id() {
  market_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetASNDetailsRequest::market_id() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
  return _internal_market_id();
}
inline void GetASNDetailsRequest::set_market_id(const std::string& value) {
  _internal_set_market_id(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
}
inline std::string* GetASNDetailsRequest::mutable_market_id() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
  return _internal_mutable_market_id();
}
inline const std::string& GetASNDetailsRequest::_internal_market_id() const {
  return market_id_.Get();
}
inline void GetASNDetailsRequest::_internal_set_market_id(const std::string& value) {
  
  market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetASNDetailsRequest::set_market_id(std::string&& value) {
  
  market_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
}
inline void GetASNDetailsRequest::set_market_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
}
inline void GetASNDetailsRequest::set_market_id(const char* value,
    size_t size) {
  
  market_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
}
inline std::string* GetASNDetailsRequest::_internal_mutable_market_id() {
  
  return market_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetASNDetailsRequest::release_market_id() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
  return market_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetASNDetailsRequest::set_allocated_market_id(std::string* market_id) {
  if (market_id != nullptr) {
    
  } else {
    
  }
  market_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), market_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
}
inline std::string* GetASNDetailsRequest::unsafe_arena_release_market_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return market_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetASNDetailsRequest::unsafe_arena_set_allocated_market_id(
    std::string* market_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (market_id != nullptr) {
    
  } else {
    
  }
  market_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      market_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.market_id)
}

// string asn = 2[json_name = "asn", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetASNDetailsRequest::clear_asn() {
  asn_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetASNDetailsRequest::asn() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetASNDetailsRequest.asn)
  return _internal_asn();
}
inline void GetASNDetailsRequest::set_asn(const std::string& value) {
  _internal_set_asn(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetASNDetailsRequest.asn)
}
inline std::string* GetASNDetailsRequest::mutable_asn() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetASNDetailsRequest.asn)
  return _internal_mutable_asn();
}
inline const std::string& GetASNDetailsRequest::_internal_asn() const {
  return asn_.Get();
}
inline void GetASNDetailsRequest::_internal_set_asn(const std::string& value) {
  
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetASNDetailsRequest::set_asn(std::string&& value) {
  
  asn_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetASNDetailsRequest.asn)
}
inline void GetASNDetailsRequest::set_asn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetASNDetailsRequest.asn)
}
inline void GetASNDetailsRequest::set_asn(const char* value,
    size_t size) {
  
  asn_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetASNDetailsRequest.asn)
}
inline std::string* GetASNDetailsRequest::_internal_mutable_asn() {
  
  return asn_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetASNDetailsRequest::release_asn() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetASNDetailsRequest.asn)
  return asn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetASNDetailsRequest::set_allocated_asn(std::string* asn) {
  if (asn != nullptr) {
    
  } else {
    
  }
  asn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.asn)
}
inline std::string* GetASNDetailsRequest::unsafe_arena_release_asn() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetASNDetailsRequest.asn)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return asn_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetASNDetailsRequest::unsafe_arena_set_allocated_asn(
    std::string* asn) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (asn != nullptr) {
    
  } else {
    
  }
  asn_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      asn, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.asn)
}

// string ip = 3[json_name = "ip", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetASNDetailsRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetASNDetailsRequest::ip() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetASNDetailsRequest.ip)
  return _internal_ip();
}
inline void GetASNDetailsRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetASNDetailsRequest.ip)
}
inline std::string* GetASNDetailsRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetASNDetailsRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& GetASNDetailsRequest::_internal_ip() const {
  return ip_.Get();
}
inline void GetASNDetailsRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetASNDetailsRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetASNDetailsRequest.ip)
}
inline void GetASNDetailsRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetASNDetailsRequest.ip)
}
inline void GetASNDetailsRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetASNDetailsRequest.ip)
}
inline std::string* GetASNDetailsRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetASNDetailsRequest::release_ip() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetASNDetailsRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetASNDetailsRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.ip)
}
inline std::string* GetASNDetailsRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetASNDetailsRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetASNDetailsRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.ip)
}

// string type = 4[json_name = "type", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetASNDetailsRequest::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetASNDetailsRequest::type() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetASNDetailsRequest.type)
  return _internal_type();
}
inline void GetASNDetailsRequest::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetASNDetailsRequest.type)
}
inline std::string* GetASNDetailsRequest::mutable_type() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetASNDetailsRequest.type)
  return _internal_mutable_type();
}
inline const std::string& GetASNDetailsRequest::_internal_type() const {
  return type_.Get();
}
inline void GetASNDetailsRequest::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetASNDetailsRequest::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetASNDetailsRequest.type)
}
inline void GetASNDetailsRequest::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetASNDetailsRequest.type)
}
inline void GetASNDetailsRequest::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetASNDetailsRequest.type)
}
inline std::string* GetASNDetailsRequest::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetASNDetailsRequest::release_type() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetASNDetailsRequest.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetASNDetailsRequest::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.type)
}
inline std::string* GetASNDetailsRequest::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetASNDetailsRequest.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetASNDetailsRequest::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.type)
}

// string mutual_provider = 5[json_name = "mutualProvider", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetASNDetailsRequest::clear_mutual_provider() {
  mutual_provider_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetASNDetailsRequest::mutual_provider() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
  return _internal_mutual_provider();
}
inline void GetASNDetailsRequest::set_mutual_provider(const std::string& value) {
  _internal_set_mutual_provider(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
}
inline std::string* GetASNDetailsRequest::mutable_mutual_provider() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
  return _internal_mutable_mutual_provider();
}
inline const std::string& GetASNDetailsRequest::_internal_mutual_provider() const {
  return mutual_provider_.Get();
}
inline void GetASNDetailsRequest::_internal_set_mutual_provider(const std::string& value) {
  
  mutual_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetASNDetailsRequest::set_mutual_provider(std::string&& value) {
  
  mutual_provider_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
}
inline void GetASNDetailsRequest::set_mutual_provider(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mutual_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
}
inline void GetASNDetailsRequest::set_mutual_provider(const char* value,
    size_t size) {
  
  mutual_provider_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
}
inline std::string* GetASNDetailsRequest::_internal_mutable_mutual_provider() {
  
  return mutual_provider_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetASNDetailsRequest::release_mutual_provider() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
  return mutual_provider_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetASNDetailsRequest::set_allocated_mutual_provider(std::string* mutual_provider) {
  if (mutual_provider != nullptr) {
    
  } else {
    
  }
  mutual_provider_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mutual_provider,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
}
inline std::string* GetASNDetailsRequest::unsafe_arena_release_mutual_provider() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mutual_provider_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetASNDetailsRequest::unsafe_arena_set_allocated_mutual_provider(
    std::string* mutual_provider) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mutual_provider != nullptr) {
    
  } else {
    
  }
  mutual_provider_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mutual_provider, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.mutual_provider)
}

// string mutual_customer = 6[json_name = "mutualCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetASNDetailsRequest::clear_mutual_customer() {
  mutual_customer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetASNDetailsRequest::mutual_customer() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
  return _internal_mutual_customer();
}
inline void GetASNDetailsRequest::set_mutual_customer(const std::string& value) {
  _internal_set_mutual_customer(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
}
inline std::string* GetASNDetailsRequest::mutable_mutual_customer() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
  return _internal_mutable_mutual_customer();
}
inline const std::string& GetASNDetailsRequest::_internal_mutual_customer() const {
  return mutual_customer_.Get();
}
inline void GetASNDetailsRequest::_internal_set_mutual_customer(const std::string& value) {
  
  mutual_customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetASNDetailsRequest::set_mutual_customer(std::string&& value) {
  
  mutual_customer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
}
inline void GetASNDetailsRequest::set_mutual_customer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mutual_customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
}
inline void GetASNDetailsRequest::set_mutual_customer(const char* value,
    size_t size) {
  
  mutual_customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
}
inline std::string* GetASNDetailsRequest::_internal_mutable_mutual_customer() {
  
  return mutual_customer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetASNDetailsRequest::release_mutual_customer() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
  return mutual_customer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetASNDetailsRequest::set_allocated_mutual_customer(std::string* mutual_customer) {
  if (mutual_customer != nullptr) {
    
  } else {
    
  }
  mutual_customer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mutual_customer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
}
inline std::string* GetASNDetailsRequest::unsafe_arena_release_mutual_customer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mutual_customer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetASNDetailsRequest::unsafe_arena_set_allocated_mutual_customer(
    std::string* mutual_customer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mutual_customer != nullptr) {
    
  } else {
    
  }
  mutual_customer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mutual_customer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.mutual_customer)
}

// string singlehomed_customer = 7[json_name = "singlehomedCustomer", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline void GetASNDetailsRequest::clear_singlehomed_customer() {
  singlehomed_customer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetASNDetailsRequest::singlehomed_customer() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
  return _internal_singlehomed_customer();
}
inline void GetASNDetailsRequest::set_singlehomed_customer(const std::string& value) {
  _internal_set_singlehomed_customer(value);
  // @@protoc_insertion_point(field_set:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
}
inline std::string* GetASNDetailsRequest::mutable_singlehomed_customer() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
  return _internal_mutable_singlehomed_customer();
}
inline const std::string& GetASNDetailsRequest::_internal_singlehomed_customer() const {
  return singlehomed_customer_.Get();
}
inline void GetASNDetailsRequest::_internal_set_singlehomed_customer(const std::string& value) {
  
  singlehomed_customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetASNDetailsRequest::set_singlehomed_customer(std::string&& value) {
  
  singlehomed_customer_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
}
inline void GetASNDetailsRequest::set_singlehomed_customer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  singlehomed_customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
}
inline void GetASNDetailsRequest::set_singlehomed_customer(const char* value,
    size_t size) {
  
  singlehomed_customer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
}
inline std::string* GetASNDetailsRequest::_internal_mutable_singlehomed_customer() {
  
  return singlehomed_customer_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetASNDetailsRequest::release_singlehomed_customer() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
  return singlehomed_customer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetASNDetailsRequest::set_allocated_singlehomed_customer(std::string* singlehomed_customer) {
  if (singlehomed_customer != nullptr) {
    
  } else {
    
  }
  singlehomed_customer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), singlehomed_customer,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
}
inline std::string* GetASNDetailsRequest::unsafe_arena_release_singlehomed_customer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return singlehomed_customer_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetASNDetailsRequest::unsafe_arena_set_allocated_singlehomed_customer(
    std::string* singlehomed_customer) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (singlehomed_customer != nullptr) {
    
  } else {
    
  }
  singlehomed_customer_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      singlehomed_customer, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetASNDetailsRequest.singlehomed_customer)
}

// -------------------------------------------------------------------

// GetASNDetailsResponse

// .kentik.kmi.v202212.ASNDetails asn_details = 1[json_name = "asnDetails", (.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
inline bool GetASNDetailsResponse::_internal_has_asn_details() const {
  return this != internal_default_instance() && asn_details_ != nullptr;
}
inline bool GetASNDetailsResponse::has_asn_details() const {
  return _internal_has_asn_details();
}
inline void GetASNDetailsResponse::clear_asn_details() {
  if (GetArena() == nullptr && asn_details_ != nullptr) {
    delete asn_details_;
  }
  asn_details_ = nullptr;
}
inline const ::kentik::kmi::v202212::ASNDetails& GetASNDetailsResponse::_internal_asn_details() const {
  const ::kentik::kmi::v202212::ASNDetails* p = asn_details_;
  return p != nullptr ? *p : *reinterpret_cast<const ::kentik::kmi::v202212::ASNDetails*>(
      &::kentik::kmi::v202212::_ASNDetails_default_instance_);
}
inline const ::kentik::kmi::v202212::ASNDetails& GetASNDetailsResponse::asn_details() const {
  // @@protoc_insertion_point(field_get:kentik.kmi.v202212.GetASNDetailsResponse.asn_details)
  return _internal_asn_details();
}
inline void GetASNDetailsResponse::unsafe_arena_set_allocated_asn_details(
    ::kentik::kmi::v202212::ASNDetails* asn_details) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(asn_details_);
  }
  asn_details_ = asn_details;
  if (asn_details) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kentik.kmi.v202212.GetASNDetailsResponse.asn_details)
}
inline ::kentik::kmi::v202212::ASNDetails* GetASNDetailsResponse::release_asn_details() {
  auto temp = unsafe_arena_release_asn_details();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::kentik::kmi::v202212::ASNDetails* GetASNDetailsResponse::unsafe_arena_release_asn_details() {
  // @@protoc_insertion_point(field_release:kentik.kmi.v202212.GetASNDetailsResponse.asn_details)
  
  ::kentik::kmi::v202212::ASNDetails* temp = asn_details_;
  asn_details_ = nullptr;
  return temp;
}
inline ::kentik::kmi::v202212::ASNDetails* GetASNDetailsResponse::_internal_mutable_asn_details() {
  
  if (asn_details_ == nullptr) {
    auto* p = CreateMaybeMessage<::kentik::kmi::v202212::ASNDetails>(GetArena());
    asn_details_ = p;
  }
  return asn_details_;
}
inline ::kentik::kmi::v202212::ASNDetails* GetASNDetailsResponse::mutable_asn_details() {
  // @@protoc_insertion_point(field_mutable:kentik.kmi.v202212.GetASNDetailsResponse.asn_details)
  return _internal_mutable_asn_details();
}
inline void GetASNDetailsResponse::set_allocated_asn_details(::kentik::kmi::v202212::ASNDetails* asn_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete asn_details_;
  }
  if (asn_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(asn_details);
    if (message_arena != submessage_arena) {
      asn_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, asn_details, submessage_arena);
    }
    
  } else {
    
  }
  asn_details_ = asn_details;
  // @@protoc_insertion_point(field_set_allocated:kentik.kmi.v202212.GetASNDetailsResponse.asn_details)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v202212
}  // namespace kmi
}  // namespace kentik

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kentik_2fkmi_2fv202212_2fkmi_2eproto
